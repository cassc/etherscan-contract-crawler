{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"hh/moneyTree-hh/contracts/MoneyTree.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n\\n\\ncontract MoneyTree is VRFV2WrapperConsumerBase, ReentrancyGuard, Initializable, Ownable {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    uint256 public constant DIVIDER = 10000;\\n\\n    enum Group { DEV, POOL_A, POOL_B, POOL_C, LOTTERY, TRADING, TOTAL }\\n\\n    struct UserInfo {\\n        Group group;\\n        bool deposited;\\n        uint256 totalReceived;\\n        uint256 availableToClaim;\\n        uint256 numberOfReferrals;\\n        uint256 lastEpochAddReferrals;\\n        bool winner;\\n        uint256 depositTimestamp;\\n    }\\n\\n    struct GroupInfo {\\n        uint256 depositSize;\\n        uint256 maxPayout;\\n        uint256 distributionPercent;\\n    }\\n\\n    struct RequestStatus {\\n        uint256 paid;\\n        bool fulfilled;\\n        uint256[] randomWords;\\n    }\\n\\n    struct Values {\\n        uint256 distributeAmountDev;     \\n        uint256 distributeAmountPoolA;     \\n        uint256 distributeAmountPoolB;     \\n        uint256 distributeAmountPoolC;     \\n        uint256 distributeAmountLottery;\\n        uint256 distributeAmountTrading;     \\n        uint256 devPaymentAmount;\\n        address recipient;\\n\\n        uint256 maxPoolAmountForBonusROI;\\n        uint256 maxUsersForROIBonus;\\n        uint256 usersForROIBonus;\\n        uint256 len;\\n\\n        uint256 winnerIndex;\\n        address winnerAddress;\\n        uint256 winnerPayment;\\n        bool winnersStayInList;\\n        uint256 numberOfWinnersStayInList;\\n\\n        uint256 numberUsersInPool;\\n        uint256 distributePayment;\\n        uint256 maxPayout;\\n        uint256 recieved;\\n    } \\n\\n    address public token;\\n    address public tradingAccount;\\n\\n    uint256 public poolStartTime;\\n\\n    uint256 private distributeAmountPoolAStorage;     \\n    uint256 private distributeAmountPoolBStorage;     \\n    uint256 private distributeAmountPoolCStorage;     \\n    uint256 private distributeAmountLotteryStorage;  \\n\\n    uint256 private previousBlockNumber;\\n\\n    uint256 private nonce;\\n\\n    address public linkToken;\\n    address public vrfV2Wrapper;\\n\\n    address public keeper;\\n\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n\\n    uint32 private callbackGasLimit = 500000;\\n    uint16 private requestConfirmations = 3;\\n\\n    uint32 private numWords = 4;\\n\\n    EnumerableSet.AddressSet private _dev;\\n    EnumerableSet.AddressSet private _stakersPoolA;\\n    EnumerableSet.AddressSet private _stakersPoolB;\\n    EnumerableSet.AddressSet private _stakersPoolC;\\n    EnumerableSet.AddressSet private _stakersTotal;\\n\\n    EnumerableSet.AddressSet private _stakersPool_A_B;\\n    EnumerableSet.AddressSet private _winnerList;\\n\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(Group => GroupInfo) public groupInfo;\\n\\n    mapping(uint256 => mapping(Group => address[])) private epochUsersByGroup;   \\n    mapping(uint256 => mapping(address => uint256)) private epochUserIndex;\\n    mapping(uint256 => mapping(address => bool)) private isUserInEpochList;\\n\\n    mapping(uint256 => uint256) private epochDepositAmount;\\n\\n    mapping(uint256 => bool) private isEpochDistributed;\\n    mapping(address => Group) private winnerGroup;\\n\\n    mapping(uint256 => mapping(uint256 => bool)) private epochStepDone;\\n\\n    mapping(uint256 => RequestStatus) public s_requests;\\n\\n\\n    event Deposited(address indexed sender, Group group, uint256 amount, address indexed referrer);\\n    event ReferrerPaymentPaid(address indexed receiver, uint256 amount);\\n    event PoolBonusPaid(address indexed receiver, uint256 amount);\\n    event PoolBonusDistributed(address indexed receiver, uint256 amount);\\n    event LotteryBonusPaid(address indexed receiver, uint256 amount);\\n    event DevBonusPaid(address indexed receiver, uint256 amount);\\n    event TradingAccountFunded(address indexed receiver, uint256 amount);\\n    event Claimed(address user, uint256 amount);\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords, uint256 payment);\\n\\n    error MoneyTreeInvalidAddress(address account);\\n    error MoneyTreeInvalidKeeperAddress(address account);\\n    error MoneyTreeInvalidDevsLength(uint256 length);\\n    error MoneyTreeInvalidUserAddress(address user);\\n    error MoneyTreeUserAlreadyInList(address user);\\n    error MoneyTreeInvalidAmount(uint256 amount);\\n    error MoneyTreeInvalidReferrer(address referrer);\\n    error MoneyTreeInvalidStartTime(uint256 time);\\n    error MoneyTreeInvalidParameters();\\n    error MoneyTreeNotInWindow();\\n    error MoneyTreeInvalidGroup();\\n    error MoneyTreeInvalidGroupsParameters();\\n    error MoneyTreeZeroDistributedAmount();\\n    error MoneyTreeEpochIsDistributed();\\n    error MoneyTreeWindowIsOpen();\\n    error MoneyTreeRequestNotFulfilled(uint256 request);\\n    error MoneyTreeStepNotReadyForExecute(uint256 step);\\n    error MoneyTreeWrongBlock();\\n\\n\\n    modifier onlyKeeper(){\\n        if (msg.sender != keeper) {\\n            revert MoneyTreeInvalidKeeperAddress(msg.sender);\\n        }\\n        _;\\n    }\\n\\n\\n    constructor(address _linkToken, address _vrfV2Wrapper, address _keeper, address _token) VRFV2WrapperConsumerBase(_linkToken, _vrfV2Wrapper) {\\n        if (_keeper == address(0) ||\\n            _token == address(0)\\n        ) {\\n            revert MoneyTreeInvalidAddress(address(0));\\n        }\\n        keeper = _keeper;\\n        token = _token;\\n    }\\n\\n\\n    function initialize(address[] memory _devs, address _tradingAccount) external initializer onlyOwner returns (bool) {\\n        uint256 len = _devs.length;\\n        if (len != 11) revert MoneyTreeInvalidDevsLength(len);\\n        if (_tradingAccount == address(0)) revert MoneyTreeInvalidAddress(address(0));\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            if (_devs[i] == address(0)) revert MoneyTreeInvalidAddress(address(0));\\n            _dev.add(_devs[i]);\\n        }\\n        if (_dev.length() != 11) revert MoneyTreeInvalidDevsLength(len);\\n\\n        tradingAccount = _tradingAccount;\\n\\n        return true;\\n    }\\n\\n    function setPoolStartTime(uint256 _poolStartTime) external onlyOwner returns (bool) {\\n        if (_poolStartTime < block.timestamp) revert MoneyTreeInvalidStartTime(_poolStartTime);\\n        poolStartTime = _poolStartTime;\\n        return true;\\n    }\\n\\n    function setGroupsInfo(Group[] memory _groups, GroupInfo[] memory _infos) external onlyOwner returns (bool) {\\n        if (_groups.length != _infos.length) revert MoneyTreeInvalidGroupsParameters();\\n        uint256 sum;\\n        for (uint256 i = 0; i < _groups.length; i++) {\\n            if (groupInfo[_groups[i]].distributionPercent != 0) revert MoneyTreeInvalidGroupsParameters();\\n            groupInfo[_groups[i]].depositSize = _infos[i].depositSize;\\n            groupInfo[_groups[i]].maxPayout = _infos[i].maxPayout;\\n            groupInfo[_groups[i]].distributionPercent = _infos[i].distributionPercent;\\n            sum += _infos[i].distributionPercent;\\n        }\\n        if (sum != DIVIDER) revert MoneyTreeInvalidGroupsParameters();\\n        return true;\\n    }\\n\\n    function setLinkToken(address _linkToken) external onlyKeeper returns (bool) {\\n        if (_linkToken == address(0)) revert MoneyTreeInvalidAddress(address(0));\\n        linkToken = _linkToken;\\n        return true;\\n    }\\n\\n\\n    function deposit(Group _group, uint256 _amount, address _referrer) external returns (bool) {\\n        address _sender = msg.sender;\\n        if (!isTimeInWindow(block.timestamp)) revert MoneyTreeNotInWindow();\\n        if (stakersContainsByGroup(Group.TOTAL, _sender)) revert MoneyTreeUserAlreadyInList(_sender);\\n        if (_referrer != address(0) && \\n            (!stakersContainsByGroup(Group.TOTAL, _referrer) || \\n            stakersContainsByGroup(Group.DEV, _referrer) ||\\n            userInfo[_referrer].group != _group)) revert MoneyTreeInvalidReferrer(_referrer);\\n        if (_group != Group.POOL_A && _group != Group.POOL_B && _group != Group.POOL_C) revert MoneyTreeInvalidGroup();\\n        if (_amount != groupInfo[_group].depositSize) revert MoneyTreeInvalidAmount(_amount);\\n\\n        uint256 currentEpoch = getEpoch(block.timestamp);\\n\\n        IERC20(token).safeTransferFrom(_sender, address(this), _amount);\\n        epochDepositAmount[currentEpoch] += _amount;\\n\\n        _stakersTotal.add(_sender);\\n        if (_group == Group.POOL_A) _stakersPoolA.add(_sender);\\n        if (_group == Group.POOL_B) _stakersPoolB.add(_sender);\\n        if (_group == Group.POOL_C) _stakersPoolC.add(_sender);\\n        if (_group == Group.POOL_A || _group == Group.POOL_B) _stakersPool_A_B.add(_sender);\\n\\n        userInfo[_sender].group = _group;\\n        userInfo[_sender].deposited = true;\\n        userInfo[_sender].depositTimestamp = block.timestamp;\\n\\n        addUserToGroupCurrentEpochList(_sender);\\n\\n        if (_referrer != address(0)) {\\n            if (userInfo[_referrer].lastEpochAddReferrals == currentEpoch) {\\n                userInfo[_referrer].numberOfReferrals++;\\n            } else {\\n                userInfo[_referrer].numberOfReferrals = 1;\\n            }\\n            userInfo[_referrer].lastEpochAddReferrals = currentEpoch;\\n\\n            if (userInfo[_referrer].numberOfReferrals == 3) {\\n\\n                uint256 receivedAmount = userInfo[_referrer].totalReceived;\\n                uint256 depositSize = groupInfo[_group].depositSize;\\n                uint256 referrerMaxPayout = groupInfo[_group].maxPayout;\\n\\n                if (depositSize * 2 >= referrerMaxPayout - receivedAmount) {\\n\\n                    _stakersTotal.remove(_referrer);\\n                    if (_group == Group.POOL_A) _stakersPoolA.remove(_referrer);\\n                    if (_group == Group.POOL_B) _stakersPoolB.remove(_referrer);\\n                    if (_group == Group.POOL_C) _stakersPoolC.remove(_referrer);\\n                    if (_group == Group.POOL_A || _group == Group.POOL_B) _stakersPool_A_B.remove(_referrer);\\n\\n                    removeUserFromGroupCurrentEpochList(_referrer);\\n\\n                    userInfo[_referrer].deposited = false;\\n                    userInfo[_referrer].totalReceived = 0;\\n                    userInfo[_referrer].numberOfReferrals = 0;\\n                    userInfo[_referrer].lastEpochAddReferrals = 0;\\n                    userInfo[_referrer].winner = false;\\n                    userInfo[_referrer].depositTimestamp = 0;\\n\\n                    _winnerList.add(_referrer);\\n                    winnerGroup[_referrer] = _group;\\n                    \\n\\n                    IERC20(token).safeTransfer(_referrer, referrerMaxPayout - receivedAmount);\\n\\n                    epochDepositAmount[currentEpoch] -= (referrerMaxPayout - receivedAmount);\\n\\n                    emit ReferrerPaymentPaid(_referrer, referrerMaxPayout - receivedAmount);\\n\\n                } else {\\n                    userInfo[_referrer].totalReceived += depositSize * 2;\\n                    userInfo[_referrer].numberOfReferrals = 0;\\n                    IERC20(token).safeTransfer(_referrer, depositSize * 2);\\n\\n                    epochDepositAmount[currentEpoch] -= depositSize * 2;\\n\\n                    emit ReferrerPaymentPaid(_referrer, depositSize * 2);\\n                }\\n            }\\n        }\\n\\n        emit Deposited(_sender, _group, _amount, _referrer);\\n\\n        return true;\\n    }\\n\\n\\n    function claim() external nonReentrant returns (bool) {\\n        _claim(msg.sender);\\n        return true;\\n    }\\n\\n\\n    function requestRandomWords() external onlyKeeper returns (uint256 requestId) {\\n        previousBlockNumber = block.number;\\n        requestId = requestRandomness(\\n            callbackGasLimit,\\n            requestConfirmations,\\n            numWords\\n        );\\n        s_requests[requestId] = RequestStatus({\\n            paid: VRF_V2_WRAPPER.calculateRequestPrice(callbackGasLimit),\\n            randomWords: new uint256[](0),\\n            fulfilled: false\\n        });\\n        requestIds.push(requestId);\\n        lastRequestId = requestId;\\n        emit RequestSent(requestId, numWords);\\n        return requestId;\\n    }\\n\\n\\n    function distrubuteStep01() external onlyKeeper returns (bool) {\\n        uint256 _requestId = lastRequestId;\\n        (, bool fulfilled,) = getRequestStatus(_requestId);\\n        if (!fulfilled) revert MoneyTreeRequestNotFulfilled(_requestId);\\n\\n        uint256 currentEpoch = getEpoch(block.timestamp);\\n        if (block.number == previousBlockNumber) revert MoneyTreeWrongBlock();\\n        if (epochStepDone[currentEpoch][1]) revert MoneyTreeStepNotReadyForExecute(1);\\n        if (isTimeInWindow(block.timestamp)) revert MoneyTreeWindowIsOpen();\\n        if (isEpochDistributed[currentEpoch] == true) revert MoneyTreeEpochIsDistributed();\\n        if (epochDepositAmount[currentEpoch] == 0) revert MoneyTreeZeroDistributedAmount();\\n        previousBlockNumber = block.number;\\n\\n        Values memory v;\\n        uint256[] memory groupAmounts = calculateGroupDistribution(epochDepositAmount[currentEpoch]);\\n\\n        v.distributeAmountDev = groupAmounts[0];\\n        distributeAmountPoolAStorage = groupAmounts[1];\\n        distributeAmountPoolBStorage = groupAmounts[2];\\n        distributeAmountPoolCStorage = groupAmounts[3];\\n        distributeAmountLotteryStorage = groupAmounts[4];\\n        v.distributeAmountTrading = groupAmounts[5];\\n\\n        // payDev\\n        v.devPaymentAmount = v.distributeAmountDev / 11;\\n\\n        for (uint256 i = 0; i < 11; i++) {\\n            if (i == 10) {\\n                v.recipient = _dev.at(i);\\n                IERC20(token).safeTransfer(v.recipient, v.distributeAmountDev - v.devPaymentAmount * 10);\\n                emit DevBonusPaid(v.recipient, v.devPaymentAmount);\\n                break;\\n            }\\n            v.recipient = _dev.at(i);\\n            IERC20(token).safeTransfer(v.recipient, v.devPaymentAmount);\\n\\n            emit DevBonusPaid(v.recipient, v.devPaymentAmount);\\n        }\\n\\n        //  payTradingAccount\\n        IERC20(token).safeTransfer(tradingAccount, v.distributeAmountTrading);\\n\\n        epochStepDone[currentEpoch][1] = true;\\n\\n        emit TradingAccountFunded(tradingAccount, v.distributeAmountTrading);\\n\\n        return true;\\n    }\\n\\n\\n    function distrubuteStep02() external onlyKeeper returns (bool) {\\n        uint256 _requestId = lastRequestId;\\n        uint256 currentEpoch = getEpoch(block.timestamp);\\n        if (block.number == previousBlockNumber) revert MoneyTreeWrongBlock();\\n        if (!epochStepDone[currentEpoch][1] || epochStepDone[currentEpoch][2]) revert MoneyTreeStepNotReadyForExecute(2);\\n        previousBlockNumber = block.number;\\n\\n        Values memory v;\\n\\n        v.distributeAmountPoolA = distributeAmountPoolAStorage;   \\n\\n        //   payPoolA\\n        v.len = epochUsersByGroup[currentEpoch][Group.POOL_A].length;\\n        if (v.len > 0) {\\n\\n            v.maxPoolAmountForBonusROI = v.distributeAmountPoolA * 3 / 4;\\n            v.maxUsersForROIBonus = v.maxPoolAmountForBonusROI / groupInfo[Group.POOL_A].depositSize;\\n\\n            v.usersForROIBonus = (v.maxUsersForROIBonus > v.len / 4) ? v.len / 4 : v.maxUsersForROIBonus;\\n\\n            for (uint256 i = 0; i < v.usersForROIBonus; i++) {\\n                v.len = epochUsersByGroup[currentEpoch][Group.POOL_A].length;\\n\\n                v.winnerIndex = processRandomness(_requestId, 0, v.len);\\n                v.winnerAddress = epochUsersByGroup[currentEpoch][Group.POOL_A][v.winnerIndex];\\n\\n                (v.winnerPayment, v.winnersStayInList) = payWinner(v.winnerAddress);\\n                if (v.winnersStayInList) {\\n                    userInfo[v.winnerAddress].winner = true;\\n                    v.numberOfWinnersStayInList++;\\n                } \\n\\n                v.distributeAmountPoolA -= v.winnerPayment;\\n                removeUserFromGroupCurrentEpochList(v.winnerAddress);\\n            }\\n        }\\n\\n        v.numberUsersInPool = stakersLengthByGroup(Group.POOL_A) - v.numberOfWinnersStayInList;\\n\\n        if (v.numberUsersInPool > 0) {\\n\\n            v.distributePayment = v.distributeAmountPoolA / v.numberUsersInPool;\\n            v.maxPayout = groupInfo[Group.POOL_A].maxPayout;\\n\\n            for (uint256 i = stakersLengthByGroup(Group.POOL_A) - 1; i >= 0; i--) {\\n                v.recipient = stakersByGroup(Group.POOL_A, i);\\n\\n                if (userInfo[v.recipient].winner == true) {\\n                    userInfo[v.recipient].winner = false;\\n                } else {\\n\\n                    v.recieved = userInfo[v.recipient].totalReceived;\\n\\n                    if (v.distributePayment >= v.maxPayout - v.recieved) {\\n                        _stakersTotal.remove(v.recipient);\\n                        _stakersPoolA.remove(v.recipient);\\n                        _stakersPool_A_B.remove(v.recipient);\\n\\n                        userInfo[v.recipient].deposited = false;\\n                        userInfo[v.recipient].totalReceived = 0;\\n                        userInfo[v.recipient].numberOfReferrals = 0;\\n                        userInfo[v.recipient].lastEpochAddReferrals = 0;\\n                        userInfo[v.recipient].winner = false;\\n                        userInfo[v.recipient].depositTimestamp = 0;\\n\\n                        _winnerList.add(v.recipient);\\n                        winnerGroup[v.recipient] = Group.POOL_A;\\n\\n                        IERC20(token).safeTransfer(v.recipient, v.maxPayout - v.recieved);\\n                        v.distributeAmountPoolA -= (v.maxPayout - v.recieved);\\n\\n                        emit PoolBonusPaid(v.recipient, v.maxPayout - v.recieved);\\n\\n                    } else {\\n                        userInfo[v.recipient].totalReceived += v.distributePayment;\\n                        userInfo[v.recipient].availableToClaim += v.distributePayment;\\n                        userInfo[v.recipient].numberOfReferrals = 0;\\n            \\n                        v.distributeAmountPoolA -= v.distributePayment;\\n\\n                        emit PoolBonusDistributed(v.recipient, v.distributePayment);\\n                    }\\n                }\\n\\n                if (i == 0) {\\n                    break;\\n                }\\n            }\\n\\n            distributeAmountPoolBStorage += v.distributeAmountPoolA;\\n            distributeAmountPoolAStorage = 0;\\n\\n            v.numberOfWinnersStayInList = 0;\\n\\n        } else {\\n            \\n            distributeAmountPoolBStorage += v.distributeAmountPoolA;\\n            distributeAmountPoolAStorage = 0;\\n        }\\n\\n        epochStepDone[currentEpoch][2] = true;\\n\\n        return true;\\n    }\\n\\n\\n    function distrubuteStep03() external onlyKeeper returns (bool) {\\n        uint256 _requestId = lastRequestId;\\n        uint256 currentEpoch = getEpoch(block.timestamp);\\n        if (block.number == previousBlockNumber) revert MoneyTreeWrongBlock();\\n        if (!epochStepDone[currentEpoch][2] || epochStepDone[currentEpoch][3]) revert MoneyTreeStepNotReadyForExecute(3);\\n        previousBlockNumber = block.number;\\n\\n        Values memory v;\\n\\n        v.distributeAmountPoolB = distributeAmountPoolBStorage;\\n\\n        //   payPoolB\\n        v.len = epochUsersByGroup[currentEpoch][Group.POOL_B].length;\\n        if (v.len > 0) {\\n\\n            v.maxPoolAmountForBonusROI = v.distributeAmountPoolB * 3 / 4;\\n            v.maxUsersForROIBonus = v.maxPoolAmountForBonusROI / groupInfo[Group.POOL_B].depositSize;\\n\\n            v.usersForROIBonus = (v.maxUsersForROIBonus > v.len / 4) ? v.len / 4 : v.maxUsersForROIBonus;\\n\\n            for (uint256 i = 0; i < v.usersForROIBonus; i++) {\\n                v.len = epochUsersByGroup[currentEpoch][Group.POOL_B].length;\\n\\n                v.winnerIndex = processRandomness(_requestId, 1, v.len);\\n                v.winnerAddress = epochUsersByGroup[currentEpoch][Group.POOL_B][v.winnerIndex];\\n\\n                (v.winnerPayment, v.winnersStayInList) = payWinner(v.winnerAddress);\\n                if (v.winnersStayInList) {\\n                    userInfo[v.winnerAddress].winner = true;\\n                    v.numberOfWinnersStayInList++;\\n                } \\n\\n                v.distributeAmountPoolB -= v.winnerPayment;\\n                removeUserFromGroupCurrentEpochList(v.winnerAddress);\\n            }\\n        }\\n\\n        v.numberUsersInPool = stakersLengthByGroup(Group.POOL_B) - v.numberOfWinnersStayInList;\\n\\n        if (v.numberUsersInPool > 0) {\\n\\n            v.distributePayment = v.distributeAmountPoolB / v.numberUsersInPool;\\n            v.maxPayout = groupInfo[Group.POOL_B].maxPayout;\\n\\n            for (uint256 i = stakersLengthByGroup(Group.POOL_B) - 1; i >= 0; i--) {\\n                v.recipient = stakersByGroup(Group.POOL_B, i);\\n\\n                if (userInfo[v.recipient].winner == true) {\\n                    userInfo[v.recipient].winner = false;\\n                } else {\\n\\n                    v.recieved = userInfo[v.recipient].totalReceived;\\n\\n                    if (v.distributePayment >= v.maxPayout - v.recieved) {\\n                        _stakersTotal.remove(v.recipient);\\n                        _stakersPoolB.remove(v.recipient);\\n                        _stakersPool_A_B.remove(v.recipient);\\n\\n                        userInfo[v.recipient].deposited = false;\\n                        userInfo[v.recipient].totalReceived = 0;\\n                        userInfo[v.recipient].numberOfReferrals = 0;\\n                        userInfo[v.recipient].lastEpochAddReferrals = 0;\\n                        userInfo[v.recipient].winner = false;\\n                        userInfo[v.recipient].depositTimestamp = 0;\\n\\n                        _winnerList.add(v.recipient);\\n                        winnerGroup[v.recipient] = Group.POOL_B;\\n\\n\\n                        IERC20(token).safeTransfer(v.recipient, v.maxPayout - v.recieved);\\n                        v.distributeAmountPoolB -= (v.maxPayout - v.recieved);\\n\\n                        emit PoolBonusPaid(v.recipient, v.maxPayout - v.recieved);\\n\\n                    } else {\\n                        userInfo[v.recipient].totalReceived += v.distributePayment;\\n                        userInfo[v.recipient].availableToClaim += v.distributePayment;\\n                        userInfo[v.recipient].numberOfReferrals = 0;\\n            \\n                        v.distributeAmountPoolB -= v.distributePayment;\\n\\n                        emit PoolBonusDistributed(v.recipient, v.distributePayment);\\n                    }\\n                }\\n\\n                if (i == 0) {\\n                    break;\\n                }\\n            }\\n\\n            distributeAmountPoolCStorage += v.distributeAmountPoolB;\\n            distributeAmountPoolBStorage = 0;\\n\\n            v.numberOfWinnersStayInList = 0;\\n\\n        } else {\\n            \\n            distributeAmountPoolCStorage += v.distributeAmountPoolB;\\n            distributeAmountPoolBStorage = 0;\\n        }\\n\\n        epochStepDone[currentEpoch][3] = true;\\n\\n        return true;\\n    }\\n\\n\\n    function distrubuteStep04() external onlyKeeper returns (bool) {\\n        uint256 _requestId = lastRequestId;\\n        uint256 currentEpoch = getEpoch(block.timestamp);\\n        if (block.number == previousBlockNumber) revert MoneyTreeWrongBlock();\\n        if (!epochStepDone[currentEpoch][3] || epochStepDone[currentEpoch][4]) revert MoneyTreeStepNotReadyForExecute(4);\\n        previousBlockNumber = block.number;\\n\\n        Values memory v;\\n\\n        v.distributeAmountPoolC = distributeAmountPoolCStorage;   \\n\\n        //   payPoolC\\n        v.len = epochUsersByGroup[currentEpoch][Group.POOL_C].length;\\n        if (v.len > 0) {\\n\\n            v.maxPoolAmountForBonusROI = v.distributeAmountPoolC * 3 / 4;\\n            v.maxUsersForROIBonus = v.maxPoolAmountForBonusROI / groupInfo[Group.POOL_C].depositSize;\\n\\n            v.usersForROIBonus = (v.maxUsersForROIBonus > v.len / 4) ? v.len / 4 : v.maxUsersForROIBonus;\\n\\n            for (uint256 i = 0; i < v.usersForROIBonus; i++) {\\n                v.len = epochUsersByGroup[currentEpoch][Group.POOL_C].length;\\n\\n                v.winnerIndex = processRandomness(_requestId, 2, v.len);\\n                v.winnerAddress = epochUsersByGroup[currentEpoch][Group.POOL_C][v.winnerIndex];\\n\\n                (v.winnerPayment, v.winnersStayInList) = payWinner(v.winnerAddress);\\n                if (v.winnersStayInList) {\\n                    userInfo[v.winnerAddress].winner = true;\\n                    v.numberOfWinnersStayInList++;\\n                } \\n\\n                v.distributeAmountPoolC -= v.winnerPayment;\\n                removeUserFromGroupCurrentEpochList(v.winnerAddress);\\n            }\\n        }\\n\\n        v.numberUsersInPool = stakersLengthByGroup(Group.POOL_C) - v.numberOfWinnersStayInList;\\n\\n        if (v.numberUsersInPool > 0) {\\n\\n            v.distributePayment = v.distributeAmountPoolC / v.numberUsersInPool;\\n            v.maxPayout = groupInfo[Group.POOL_C].maxPayout;\\n\\n            for (uint256 i = stakersLengthByGroup(Group.POOL_C) - 1; i >= 0; i--) {\\n                v.recipient = stakersByGroup(Group.POOL_C, i);\\n\\n                if (userInfo[v.recipient].winner == true) {\\n                    userInfo[v.recipient].winner = false;                  \\n                } else {\\n\\n                    v.recieved = userInfo[v.recipient].totalReceived;\\n\\n                    if (v.distributePayment >= v.maxPayout - v.recieved) {\\n                        _stakersTotal.remove(v.recipient);\\n                        _stakersPoolC.remove(v.recipient);\\n\\n                        userInfo[v.recipient].deposited = false;\\n                        userInfo[v.recipient].totalReceived = 0;\\n                        userInfo[v.recipient].numberOfReferrals = 0;\\n                        userInfo[v.recipient].lastEpochAddReferrals = 0;\\n                        userInfo[v.recipient].winner = false;\\n                        userInfo[v.recipient].depositTimestamp = 0;\\n\\n                        _winnerList.add(v.recipient);\\n                        winnerGroup[v.recipient] = Group.POOL_C;\\n                        \\n\\n                        IERC20(token).safeTransfer(v.recipient, v.maxPayout - v.recieved);\\n                        v.distributeAmountPoolC -= (v.maxPayout - v.recieved);\\n\\n                        emit PoolBonusPaid(v.recipient, v.maxPayout - v.recieved);\\n\\n                    } else {\\n                        userInfo[v.recipient].totalReceived += v.distributePayment;\\n                        userInfo[v.recipient].availableToClaim += v.distributePayment;\\n                        userInfo[v.recipient].numberOfReferrals = 0;\\n            \\n                        v.distributeAmountPoolC -= v.distributePayment;\\n\\n                        emit PoolBonusDistributed(v.recipient, v.distributePayment);\\n                    }\\n                }\\n\\n                if (i == 0) {\\n                    break;\\n                }\\n            }\\n\\n            distributeAmountLotteryStorage += v.distributeAmountPoolC;\\n            distributeAmountPoolCStorage = 0;\\n\\n            v.numberOfWinnersStayInList = 0;\\n\\n        } else {\\n            \\n            distributeAmountLotteryStorage += v.distributeAmountPoolC;\\n            distributeAmountPoolCStorage = 0;\\n        }\\n\\n        epochStepDone[currentEpoch][4] = true;\\n\\n        return true;\\n    }\\n\\n\\n    function distrubuteStep05() external onlyKeeper returns (uint256) {\\n        uint256 _requestId = lastRequestId;\\n        uint256 currentEpoch = getEpoch(block.timestamp);\\n        if (block.number == previousBlockNumber) revert MoneyTreeWrongBlock();\\n        if (!epochStepDone[currentEpoch][4] || epochStepDone[currentEpoch][5]) revert MoneyTreeStepNotReadyForExecute(5);\\n        previousBlockNumber = block.number;\\n\\n        Values memory v;\\n\\n        v.distributeAmountLottery = distributeAmountLotteryStorage;     \\n\\n        //   payLottery\\n        while (v.distributeAmountLottery > 0) {\\n\\n            v.len = _stakersPool_A_B.length();\\n\\n            v.winnerIndex = processRandomness(_requestId, 3, v.len);\\n\\n            v.winnerAddress = _stakersPool_A_B.at(v.winnerIndex);\\n\\n\\n            Group _winnerGroup = userInfo[v.winnerAddress].group;\\n            v.recieved = userInfo[v.winnerAddress].totalReceived;\\n            v.maxPayout = groupInfo[_winnerGroup].maxPayout;\\n\\n            v.winnerPayment = v.maxPayout - v.recieved;\\n\\n            if (v.distributeAmountLottery >= v.winnerPayment) {\\n\\n                _stakersTotal.remove(v.winnerAddress);\\n                if (_winnerGroup == Group.POOL_A) _stakersPoolA.remove(v.winnerAddress);\\n                if (_winnerGroup == Group.POOL_B) _stakersPoolB.remove(v.winnerAddress);\\n                if (_winnerGroup == Group.POOL_A || _winnerGroup == Group.POOL_B) _stakersPool_A_B.remove(v.winnerAddress);\\n\\n                IERC20(token).safeTransfer(v.winnerAddress, v.winnerPayment);\\n\\n                userInfo[v.winnerAddress].deposited = false;\\n                userInfo[v.winnerAddress].totalReceived = 0;\\n                userInfo[v.winnerAddress].numberOfReferrals = 0;\\n                userInfo[v.winnerAddress].lastEpochAddReferrals = 0;\\n                userInfo[v.winnerAddress].winner = false;\\n                userInfo[v.winnerAddress].depositTimestamp = 0;\\n\\n                _winnerList.add(v.winnerAddress);\\n                winnerGroup[v.winnerAddress] = _winnerGroup;\\n\\n                v.distributeAmountLottery -= v.winnerPayment;\\n\\n                emit LotteryBonusPaid(v.winnerAddress, v.winnerPayment);\\n\\n            } else {\\n\\n                userInfo[v.winnerAddress].totalReceived += v.distributeAmountLottery;\\n                userInfo[v.winnerAddress].numberOfReferrals = 0;\\n                IERC20(token).safeTransfer(v.winnerAddress, v.distributeAmountLottery);\\n\\n                emit LotteryBonusPaid(v.winnerAddress, v.distributeAmountLottery);\\n\\n                v.distributeAmountLottery = 0;\\n            }\\n\\n        }\\n\\n        epochStepDone[currentEpoch][4] = true;\\n\\n        isEpochDistributed[currentEpoch] = true;\\n\\n        return v.distributeAmountLottery;\\n    }\\n\\n\\n    function winners(uint256 _index) external view returns (address) {\\n        return _winnerList.at(_index);\\n    }\\n\\n    function winnerListContains(address _user) external view returns (bool) {\\n        return _winnerList.contains(_user);\\n    }\\n\\n    function winnerListLength() external view returns (uint256) {\\n        return _winnerList.length();\\n    }\\n\\n    function getWinnerList(uint256 offset, uint256 limit) external view returns (address[] memory output) {\\n        uint256 _winnerListLength = _winnerList.length();\\n        if (offset >= _winnerListLength) return new address[](0);\\n        uint256 to = offset + limit;\\n        if (_winnerListLength < to) to = _winnerListLength;\\n        output = new address[](to - offset);\\n        for (uint256 i = 0; i < output.length; i++) output[i] = _winnerList.at(offset + i);\\n    }\\n\\n    function getUserInfo(address _user) \\n        external view returns (\\n            Group group,\\n            bool deposited,\\n            uint256 totalReceived,\\n            uint256 availableToClaim,\\n            uint256 numberOfReferrals,\\n            uint256 lastEpochAddReferrals,\\n            bool winner,\\n            uint256 depositTimestamp\\n        ) \\n    {\\n        if (!userInfo[_user].deposited) revert MoneyTreeInvalidUserAddress(_user);\\n\\n        UserInfo memory info = userInfo[_user];\\n        return (\\n            info.group, \\n            info.deposited, \\n            info.totalReceived, \\n            info.availableToClaim, \\n            info.numberOfReferrals,\\n            info.lastEpochAddReferrals,\\n            info.winner,\\n            info.depositTimestamp\\n        );\\n    }\\n\\n\\n    function getWinnerGroup(address _user) external view returns (Group group) {\\n        return winnerGroup[_user];\\n    }\\n\\n\\n    function getEpochDepositAmount(uint256 _epoch) external view returns (uint256) {\\n        return epochDepositAmount[_epoch];\\n    }\\n\\n\\n    function withdrawLink() public onlyKeeper returns (bool) {\\n        LinkTokenInterface link = LinkTokenInterface(linkToken);\\n        link.transfer(msg.sender, link.balanceOf(address(this)));\\n        return true;\\n    }\\n\\n    function stakersByGroup(Group _group, uint256 _index) public view returns (address) {\\n        if (_group == Group.DEV) {\\n            return _dev.at(_index);\\n        } else if (_group == Group.POOL_A) {\\n            return _stakersPoolA.at(_index);\\n        } else if (_group == Group.POOL_B) {\\n            return _stakersPoolB.at(_index);\\n        } else if (_group == Group.POOL_C) {\\n            return _stakersPoolC.at(_index);\\n        } else if (_group == Group.TOTAL) {\\n            return _stakersTotal.at(_index);\\n        } else {\\n            revert MoneyTreeInvalidGroup();\\n        }\\n    }\\n\\n    function stakersContainsByGroup(Group _group, address _user) public view returns (bool) {\\n        if (_group == Group.DEV) {\\n            return _dev.contains(_user);\\n        } else if (_group == Group.POOL_A) {\\n            return _stakersPoolA.contains(_user);\\n        } else if (_group == Group.POOL_B) {\\n            return _stakersPoolB.contains(_user);\\n        } else if (_group == Group.POOL_C) {\\n            return _stakersPoolC.contains(_user);\\n        } else if (_group == Group.TOTAL) {\\n            return _stakersTotal.contains(_user);\\n        } else {\\n            revert MoneyTreeInvalidGroup();\\n        }\\n    }\\n\\n    function stakersLengthByGroup(Group _group) public view returns (uint256) {\\n        if (_group == Group.DEV) {\\n            return _dev.length();\\n        } else if (_group == Group.POOL_A) {\\n            return _stakersPoolA.length();\\n        } else if (_group == Group.POOL_B) {\\n            return _stakersPoolB.length();\\n        } else if (_group == Group.POOL_C) {\\n            return _stakersPoolC.length();\\n        } else if (_group == Group.TOTAL) {\\n            return _stakersTotal.length();\\n        } else {\\n            revert MoneyTreeInvalidGroup();\\n        }\\n    }\\n\\n    function getStakersList(Group _group, uint256 offset, uint256 limit) public view returns (address[] memory output) {\\n        uint256 _stakersListLength;\\n        uint256 to;\\n        if (_group == Group.POOL_A) {\\n            _stakersListLength = _stakersPoolA.length();\\n            if (offset >= _stakersListLength) return new address[](0);\\n            to = offset + limit;\\n            if (_stakersListLength < to) to = _stakersListLength;\\n            output = new address[](to - offset);\\n            for (uint256 i = 0; i < output.length; i++) output[i] = _stakersPoolA.at(offset + i);\\n        } else if (_group == Group.POOL_B) {\\n            _stakersListLength = _stakersPoolB.length();\\n            if (offset >= _stakersListLength) return new address[](0);\\n            to = offset + limit;\\n            if (_stakersListLength < to) to = _stakersListLength;\\n            output = new address[](to - offset);\\n            for (uint256 i = 0; i < output.length; i++) output[i] = _stakersPoolB.at(offset + i);\\n        } else if (_group == Group.POOL_C) {\\n            _stakersListLength = _stakersPoolC.length();\\n            if (offset >= _stakersListLength) return new address[](0);\\n            to = offset + limit;\\n            if (_stakersListLength < to) to = _stakersListLength;\\n            output = new address[](to - offset);\\n            for (uint256 i = 0; i < output.length; i++) output[i] = _stakersPoolC.at(offset + i);\\n        } else if (_group == Group.TOTAL) {\\n            _stakersListLength = _stakersTotal.length();\\n            if (offset >= _stakersListLength) return new address[](0);\\n            to = offset + limit;\\n            if (_stakersListLength < to) to = _stakersListLength;\\n            output = new address[](to - offset);\\n            for (uint256 i = 0; i < output.length; i++) output[i] = _stakersTotal.at(offset + i);\\n        } else {\\n            revert MoneyTreeInvalidGroup();\\n        }\\n    }\\n\\n    function getEpochUsersByGroup(Group _group) public view returns (address[] memory) {\\n        uint256 _currentEpoch = getEpoch(block.timestamp);\\n        return epochUsersByGroup[_currentEpoch][_group];\\n    }\\n\\n\\n    function getEpochUserIndex(address _user) public view returns (uint256) {\\n        uint256 _currentEpoch = getEpoch(block.timestamp);\\n        return epochUserIndex[_currentEpoch][_user];\\n    }\\n\\n\\n    function _isUserInEpochList(address _user) public view returns (bool) {\\n        uint256 _currentEpoch = getEpoch(block.timestamp);\\n        return isUserInEpochList[_currentEpoch][_user];\\n    }\\n\\n\\n    function isTimeInWindow(uint256 _time) public view returns (bool) {\\n        if (_time < poolStartTime) revert MoneyTreeInvalidParameters();\\n        uint256 diff = _time - poolStartTime;\\n        return diff - (diff / 1 weeks) * 1 weeks < 1 days;\\n    }\\n\\n\\n    function getEpoch(uint256 _time) public view returns (uint256) {\\n        if (_time < poolStartTime) revert MoneyTreeInvalidParameters();\\n        uint256 diff = _time - poolStartTime;\\n        return diff / 1 weeks + 1;\\n    }\\n\\n\\n    function getRequestStatus(uint256 _requestId) public view returns (uint256 paid, bool fulfilled, uint256[] memory randomWords) {\\n        require(s_requests[_requestId].paid > 0, \\\"request not found\\\");\\n        RequestStatus memory request = s_requests[_requestId];\\n        return (request.paid, request.fulfilled, request.randomWords);\\n    }\\n\\n\\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\\n        require(s_requests[_requestId].paid > 0, \\\"request not found\\\");\\n        s_requests[_requestId].fulfilled = true;\\n        s_requests[_requestId].randomWords = _randomWords;\\n        emit RequestFulfilled(\\n            _requestId,\\n            _randomWords,\\n            s_requests[_requestId].paid\\n        );\\n    }\\n\\n\\n    function payWinner(address _user) private returns (uint256 payment, bool winnersStayInList) {\\n        Group userGroup = userInfo[_user].group;\\n        uint256 receivedAmount = userInfo[_user].totalReceived;\\n        uint256 depositSize = groupInfo[userGroup].depositSize;\\n        uint256 userMaxPayout = groupInfo[userGroup].maxPayout;\\n\\n        if (depositSize >= userMaxPayout - receivedAmount) {\\n\\n            _stakersTotal.remove(_user);\\n            if (userGroup == Group.POOL_A) _stakersPoolA.remove(_user);\\n            if (userGroup == Group.POOL_B) _stakersPoolB.remove(_user);\\n            if (userGroup == Group.POOL_C) _stakersPoolC.remove(_user);\\n            if (userGroup == Group.POOL_A || userGroup == Group.POOL_B) _stakersPool_A_B.remove(_user);\\n\\n            userInfo[_user].deposited = false;\\n            userInfo[_user].totalReceived = 0;\\n            userInfo[_user].numberOfReferrals = 0;\\n            userInfo[_user].lastEpochAddReferrals = 0;\\n            userInfo[_user].winner = false;\\n            userInfo[_user].depositTimestamp = 0;\\n\\n            _winnerList.add(_user);\\n            winnerGroup[_user] = userGroup;\\n\\n            IERC20(token).safeTransfer(_user, userMaxPayout - receivedAmount);\\n\\n            payment = userMaxPayout - receivedAmount;\\n\\n            emit PoolBonusPaid(_user, userMaxPayout - receivedAmount);\\n\\n        } else {\\n            userInfo[_user].totalReceived += depositSize;\\n            userInfo[_user].numberOfReferrals = 0;\\n            userInfo[_user].winner = true;\\n            IERC20(token).safeTransfer(_user, depositSize);\\n\\n            payment = depositSize;\\n\\n            winnersStayInList = true;\\n\\n            emit PoolBonusPaid(_user, depositSize);\\n        }\\n    }\\n\\n\\n    function addUserToGroupCurrentEpochList(address _user) private {\\n        uint256 _currentEpoch = getEpoch(block.timestamp);\\n        Group _userGroup = userInfo[_user].group;\\n\\n        epochUserIndex[_currentEpoch][_user] = epochUsersByGroup[_currentEpoch][_userGroup].length;\\n        isUserInEpochList[_currentEpoch][_user] = true;\\n        epochUsersByGroup[_currentEpoch][_userGroup].push(_user);\\n    }\\n\\n\\n    function removeUserFromGroupCurrentEpochList(address _user) private {                  \\n        uint256 _currentEpoch = getEpoch(block.timestamp);\\n        Group _userGroup = userInfo[_user].group;\\n        if (isUserInEpochList[_currentEpoch][_user]) {\\n            uint256 lastUserIndex = epochUsersByGroup[_currentEpoch][_userGroup].length - 1;\\n            uint256 userIndex = epochUserIndex[_currentEpoch][_user];\\n\\n            address lastUserAddress = epochUsersByGroup[_currentEpoch][_userGroup][lastUserIndex];\\n            epochUsersByGroup[_currentEpoch][_userGroup][userIndex] = lastUserAddress;\\n            epochUserIndex[_currentEpoch][lastUserAddress] = userIndex;\\n\\n            delete epochUserIndex[_currentEpoch][_user];\\n            isUserInEpochList[_currentEpoch][_user] = false;\\n\\n            epochUsersByGroup[_currentEpoch][_userGroup].pop();\\n        }\\n    }\\n\\n\\n    function _claim(address _user) private {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 claimAmount = user.availableToClaim;\\n        if (claimAmount > 0) {\\n            user.availableToClaim = 0;\\n            IERC20(token).safeTransfer(_user, claimAmount);\\n            emit Claimed(_user, claimAmount);\\n        }\\n    }\\n\\n\\n    function processRandomness(uint256 _requestId, uint256 _k, uint256 _size) private returns (uint256 _randomness) {                \\n        (,,uint256[] memory _randomWords) = getRequestStatus(_requestId);\\n        nonce++;\\n        _randomness = uint256(keccak256(abi.encode(_randomWords[_k], blockhash(block.number - 1), _size, nonce)));\\n        _randomness = _randomness % _size;\\n    }\\n\\n\\n    function calculateGroupDistribution(uint256 _totalAmount) private view returns (uint256[] memory) {\\n        uint256[] memory _amounts = new uint256[](6);\\n        _amounts[0] = _totalAmount * groupInfo[Group.DEV].distributionPercent / DIVIDER;\\n        _amounts[1] = _totalAmount * groupInfo[Group.POOL_A].distributionPercent / DIVIDER;\\n        _amounts[2] = _totalAmount * groupInfo[Group.POOL_B].distributionPercent / DIVIDER;\\n        _amounts[3] = _totalAmount * groupInfo[Group.POOL_C].distributionPercent / DIVIDER;\\n        _amounts[4] = _totalAmount * groupInfo[Group.LOTTERY].distributionPercent / DIVIDER;\\n        _amounts[5] = _totalAmount - _amounts[0] - _amounts[1] - _amounts[2] - _amounts[3] - _amounts[4];\\n        return _amounts;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/VRFV2WrapperInterface.sol\\\";\\n\\n/** *******************************************************************************\\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\\n * ********************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Create VRF V2 requests without the need for subscription management. Rather than creating\\n * @dev and funding a VRF V2 subscription, a user can use this wrapper to create one off requests,\\n * @dev paying up front rather than at fulfillment.\\n *\\n * @dev Since the price is determined using the gas price of the request transaction rather than\\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFV2WrapperConsumerBase. The consumer must be funded\\n * @dev with enough LINK to make the request, otherwise requests will revert. To request randomness,\\n * @dev call the 'requestRandomness' function with the desired VRF parameters. This function handles\\n * @dev paying for the request based on the current pricing.\\n *\\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\\n * @dev fulfillment with the randomness result.\\n */\\nabstract contract VRFV2WrapperConsumerBase {\\n  LinkTokenInterface internal immutable LINK;\\n  VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\\n\\n  /**\\n   * @param _link is the address of LinkToken\\n   * @param _vrfV2Wrapper is the address of the VRFV2Wrapper contract\\n   */\\n  constructor(address _link, address _vrfV2Wrapper) {\\n    LINK = LinkTokenInterface(_link);\\n    VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\\n  }\\n\\n  /**\\n   * @dev Requests randomness from the VRF V2 wrapper.\\n   *\\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\\n   *        fulfillRandomWords function.\\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\\n   *        request. A higher number of confirmations increases security by reducing the likelihood\\n   *        that a chain re-org changes a published randomness outcome.\\n   * @param _numWords is the number of random words to request.\\n   *\\n   * @return requestId is the VRF V2 request ID of the newly created randomness request.\\n   */\\n  function requestRandomness(\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords\\n  ) internal returns (uint256 requestId) {\\n    LINK.transferAndCall(\\n      address(VRF_V2_WRAPPER),\\n      VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\\n    );\\n    return VRF_V2_WRAPPER.lastRequestId();\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\\n   * @notice implement it.\\n   *\\n   * @param _requestId is the VRF V2 request ID.\\n   * @param _randomWords is the randomness result.\\n   */\\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\\n\\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n    require(msg.sender == address(VRF_V2_WRAPPER), \\\"only VRF V2 wrapper can fulfill\\\");\\n    fulfillRandomWords(_requestId, _randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFV2WrapperInterface {\\n  /**\\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\\n   * be relied option within the same transaction that the request was made.\\n   */\\n  function lastRequestId() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   */\\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\\n\\n  /**\\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfV2Wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MoneyTreeEpochIsDistributed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MoneyTreeInvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MoneyTreeInvalidAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"MoneyTreeInvalidDevsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MoneyTreeInvalidGroup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MoneyTreeInvalidGroupsParameters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MoneyTreeInvalidKeeperAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MoneyTreeInvalidParameters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"MoneyTreeInvalidReferrer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MoneyTreeInvalidStartTime\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"MoneyTreeInvalidUserAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MoneyTreeNotInWindow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"request\",\"type\":\"uint256\"}],\"name\":\"MoneyTreeRequestNotFulfilled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"MoneyTreeStepNotReadyForExecute\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"MoneyTreeUserAlreadyInList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MoneyTreeWindowIsOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MoneyTreeWrongBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MoneyTreeZeroDistributedAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum MoneyTree.Group\",\"name\":\"group\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DevBonusPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LotteryBonusPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolBonusDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolBonusPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferrerPaymentPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TradingAccountFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"_isUserInEpochList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MoneyTree.Group\",\"name\":\"_group\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distrubuteStep01\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distrubuteStep02\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distrubuteStep03\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distrubuteStep04\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distrubuteStep05\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getEpochDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEpochUserIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MoneyTree.Group\",\"name\":\"_group\",\"type\":\"uint8\"}],\"name\":\"getEpochUsersByGroup\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MoneyTree.Group\",\"name\":\"_group\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getStakersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"output\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"enum MoneyTree.Group\",\"name\":\"group\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"deposited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfReferrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEpochAddReferrals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWinnerGroup\",\"outputs\":[{\"internalType\":\"enum MoneyTree.Group\",\"name\":\"group\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getWinnerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"output\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MoneyTree.Group\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"groupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_devs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_tradingAccount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"isTimeInWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MoneyTree.Group[]\",\"name\":\"_groups\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct MoneyTree.GroupInfo[]\",\"name\":\"_infos\",\"type\":\"tuple[]\"}],\"name\":\"setGroupsInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"}],\"name\":\"setLinkToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolStartTime\",\"type\":\"uint256\"}],\"name\":\"setPoolStartTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MoneyTree.Group\",\"name\":\"_group\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stakersByGroup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MoneyTree.Group\",\"name\":\"_group\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakersContainsByGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MoneyTree.Group\",\"name\":\"_group\",\"type\":\"uint8\"}],\"name\":\"stakersLengthByGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"enum MoneyTree.Group\",\"name\":\"group\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"deposited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfReferrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEpochAddReferrals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfV2Wrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"winnerListContains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MoneyTree", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000404460c6a5ede2d891e8297795264fde62adbb75000000000000000000000000721dfbc5cfe53d32ab00a9bdfa605d3b8e1f3f420000000000000000000000009a9bb96ca76ff9b8fb870af25221f2cb60072b1400000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://22463ff4b1114ff559bc1294f8d46c66914a73d619a98ac1463c6e1b63ce3f6c"}