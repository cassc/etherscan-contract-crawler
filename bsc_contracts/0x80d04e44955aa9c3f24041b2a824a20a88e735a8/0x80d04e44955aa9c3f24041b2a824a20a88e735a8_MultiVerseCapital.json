{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\nMultiverse Capital: $MVC\r\n-You buy on BSC, we farm on multiple chains and return the profits to $MVC holders.\r\n\r\nTokenomics:\r\n10% of each buy goes to existing holders.\r\n10% of each sell goes into multi-chain farming and marketing to increase the treasury and buy back MVC tokens.\r\n\r\nWebsite:\r\nhttps://mvc.finance/\r\n\r\nTelegram:\r\nhttps://t.me/MultiVerseCapital\r\n\r\nTwitter:\r\nhttps://twitter.com/MulVerseCapital\r\n\r\nReddit:\r\nhttps://www.reddit.com/r/MultiVerseCapital/\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory){\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return\r\n        functionCallWithValue(\r\n            target,\r\n            data,\r\n            value,\r\n            \"Address: low-level call with value failed\"\r\n        );\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n}\r\n\r\ncontract MultiVerseCapital is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private _name = \"Multiverse Capital (MVC.finance)\";\r\n    string private _symbol = \"MVC\";\r\n    uint8 private _decimals = 18;\r\n\r\n    mapping(address => uint256) internal _reflectionBalance;\r\n    mapping(address => uint256) internal _tokenBalance;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 internal _tokenTotal = 1000000000000 * 10**18;\r\n    uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));\r\n\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n\r\n    mapping(address => bool) internal _isExcludedFromReward;\r\n    address[] internal _excludedFromReward;\r\n\r\n    uint256 public _feeDecimal = 2;\r\n\r\n    // index 0 = buy fee, index 1 = sell fee, index 2 = p2p fee\r\n    uint256[] public _transferFee;\r\n    uint256[] public _marketingFee;\r\n    uint256[] public _farmAndBuybackFee;\r\n\r\n    uint256 internal _feeTotal;\r\n    uint256 internal _farmAndBuybackFeeCollected;\r\n    uint256 internal _marketingFeeCollected;\r\n\r\n    bool public isFeeActive = true;\r\n    bool public swapEnabled = true;\r\n    bool private inSwap;\r\n\r\n    uint256 public maxTxAmount = 0;\r\n    uint256 public minTokensBeforeSwap = 500000000 * 10**18;\r\n\r\n    address public farmAndBuybackWallet = 0xCae017595027A8E33fF7F905eFACbB53d557b598;\r\n    address public marketingWallet = 0xF13A2113446eACA394513769d268A181c6ed55C1;\r\n    address public devWallet = 0xD214D098bBfD072837a68c61aC98eD8439cF31e6;\r\n\r\n    IUniswapV2Router02 public router;\r\n    address public pair;\r\n\r\n    event Swap(uint256 swaped, uint256 recieved);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() public {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        router = _uniswapV2Router;\r\n\r\n        _isExcludedFromFee[_msgSender()] = true;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        _isExcludedFromFee[farmAndBuybackWallet] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        excludeFromReward(address(pair));\r\n        excludeFromReward(address(this));\r\n\r\n        _reflectionBalance[_msgSender()] = _reflectionTotal;\r\n        emit Transfer(address(0), _msgSender(), _tokenTotal);\r\n\r\n        // index 0 = buy fee, index 1 = sell fee, index 2 = p2p fee\r\n        _transferFee.push(1000);\r\n        _transferFee.push(0);\r\n        _transferFee.push(0);\r\n\r\n        _marketingFee.push(0);\r\n        _marketingFee.push(500);\r\n        _marketingFee.push(500);\r\n\r\n        _farmAndBuybackFee.push(0);\r\n        _farmAndBuybackFee.push(500);\r\n        _farmAndBuybackFee.push(500);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tokenTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcludedFromReward[account]) return _tokenBalance[account];\r\n        return tokenFromReflection(_reflectionBalance[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool){\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256){\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool){\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool){\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool){\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcludedFromReward[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tokenAmount) public view returns (uint256){\r\n        require(tokenAmount <= _tokenTotal, \"Amount must be less than supply\");\r\n        return tokenAmount.mul(_getReflectionRate());\r\n    }\r\n\r\n    function tokenFromReflection(uint256 reflectionAmount) public view returns (uint256){\r\n        require(reflectionAmount <= _reflectionTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getReflectionRate();\r\n        return reflectionAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcludedFromReward[account], \"Account is already excluded\");\r\n        if (_reflectionBalance[account] > 0) {\r\n            _tokenBalance[account] = tokenFromReflection(\r\n                _reflectionBalance[account]\r\n            );\r\n        }\r\n        _isExcludedFromReward[account] = true;\r\n        _excludedFromReward.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcludedFromReward[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excludedFromReward.length; i++) {\r\n            if (_excludedFromReward[i] == account) {\r\n                _excludedFromReward[i] = _excludedFromReward[_excludedFromReward.length - 1];\r\n                _tokenBalance[account] = 0;\r\n                _isExcludedFromReward[account] = false;\r\n                _excludedFromReward.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(\r\n            !_isExcludedFromFee[sender] &&\r\n            !_isExcludedFromFee[recipient]\r\n        ){\r\n            require(amount <= maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n\r\n        if (swapEnabled && !inSwap && sender != pair) {\r\n            swap();\r\n        }\r\n\r\n        uint256 transferAmount = amount;\r\n        uint256 rate = _getReflectionRate();\r\n\r\n        if (\r\n            isFeeActive &&\r\n            !_isExcludedFromFee[sender] &&\r\n            !_isExcludedFromFee[recipient] &&\r\n            !inSwap\r\n        ) {\r\n            transferAmount = collectFee(\r\n                sender,\r\n                amount,\r\n                rate,\r\n                recipient == pair,\r\n                sender != pair && recipient != pair\r\n            );\r\n        }\r\n\r\n        //transfer reflection\r\n        _reflectionBalance[sender] = _reflectionBalance[sender].sub(\r\n            amount.mul(rate)\r\n        );\r\n        _reflectionBalance[recipient] = _reflectionBalance[recipient].add(\r\n            transferAmount.mul(rate)\r\n        );\r\n\r\n        //if any account belongs to the excludedAccount transfer token\r\n        if (_isExcludedFromReward[sender]) {\r\n            _tokenBalance[sender] = _tokenBalance[sender].sub(amount);\r\n        }\r\n        if (_isExcludedFromReward[recipient]) {\r\n            _tokenBalance[recipient] = _tokenBalance[recipient].add(\r\n                transferAmount\r\n            );\r\n        }\r\n\r\n        emit Transfer(sender, recipient, transferAmount);\r\n    }\r\n\r\n    function calculateFee(uint256 feeIndex, uint256 amount) internal returns (uint256, uint256){\r\n        uint256 taxFee = amount.mul(_transferFee[feeIndex]).div(\r\n            10**(_feeDecimal + 2)\r\n        );\r\n        uint256 marketingFee = amount.mul(_farmAndBuybackFee[feeIndex]).div(\r\n            10**(_feeDecimal + 2)\r\n        );\r\n        uint256 teamFee = amount.mul(_marketingFee[feeIndex]).div(\r\n            10**(_feeDecimal + 2)\r\n        );\r\n\r\n        _farmAndBuybackFeeCollected = _farmAndBuybackFeeCollected.add(marketingFee);\r\n        _marketingFeeCollected = _marketingFeeCollected.add(teamFee);\r\n        return (taxFee, marketingFee.add(teamFee));\r\n    }\r\n\r\n    function collectFee(address account, uint256 amount, uint256 rate, bool sell, bool p2p) private returns (uint256) {\r\n        uint256 transferAmount = amount;\r\n\r\n        (uint256 taxFee, uint256 otherFee) = calculateFee(\r\n            p2p ? 2 : sell ? 1 : 0,\r\n            amount\r\n        );\r\n        if (otherFee != 0) {\r\n            transferAmount = transferAmount.sub(otherFee);\r\n            _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(otherFee.mul(rate));\r\n            if (_isExcludedFromReward[address(this)]) {\r\n                _tokenBalance[address(this)] = _tokenBalance[address(this)].add(otherFee);\r\n            }\r\n            emit Transfer(account, address(this), otherFee);\r\n        }\r\n        if (taxFee != 0) {\r\n            transferAmount = transferAmount.sub(taxFee);\r\n            _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));\r\n        }\r\n        _feeTotal = _feeTotal.add(taxFee).add(otherFee);\r\n        return transferAmount;\r\n    }\r\n\r\n    function swap() private lockTheSwap {\r\n        uint256 totalFee = _marketingFeeCollected.add(_farmAndBuybackFeeCollected);\r\n        uint256 totalFeeToSell = balanceOf(address(this));\r\n\r\n        if (minTokensBeforeSwap >= totalFeeToSell) return;\r\n\r\n        address[] memory sellPath = new address[](2);\r\n        sellPath[0] = address(this);\r\n        sellPath[1] = router.WETH();\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        _approve(address(this), address(router), totalFeeToSell);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            totalFeeToSell,\r\n            0,\r\n            sellPath,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountFee = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 amountFarmAndBuyback = amountFee.mul(_farmAndBuybackFeeCollected).div(totalFee);\r\n\r\n        if (amountFarmAndBuyback > 0){\r\n            payable(farmAndBuybackWallet).transfer(amountFarmAndBuyback);\r\n        }\r\n\r\n        uint256 amountMarketing = address(this).balance;\r\n        uint256 amountDev = amountMarketing.div(5).mul(2);\r\n        if (amountMarketing > 0){\r\n            payable(marketingWallet).transfer(amountMarketing.sub(amountDev));\r\n            payable(devWallet).transfer(address(this).balance);\r\n        }\r\n\r\n        _farmAndBuybackFeeCollected = 0;\r\n        _marketingFeeCollected = 0;\r\n\r\n        emit Swap(totalFeeToSell, amountFee);\r\n    }\r\n\r\n    function _getReflectionRate() private view returns (uint256) {\r\n        uint256 reflectionSupply = _reflectionTotal;\r\n        uint256 tokenSupply = _tokenTotal;\r\n\r\n        for (uint256 i = 0; i < _excludedFromReward.length; i++) {\r\n            if(\r\n                _reflectionBalance[_excludedFromReward[i]] > reflectionSupply ||\r\n                _tokenBalance[_excludedFromReward[i]] > tokenSupply\r\n            ){\r\n                return _reflectionTotal.div(_tokenTotal);\r\n            }\r\n\r\n            reflectionSupply = reflectionSupply.sub(\r\n                _reflectionBalance[_excludedFromReward[i]]\r\n            );\r\n\r\n            tokenSupply = tokenSupply.sub(_tokenBalance[_excludedFromReward[i]]);\r\n        }\r\n\r\n        if (reflectionSupply < _reflectionTotal.div(_tokenTotal)){\r\n            return _reflectionTotal.div(_tokenTotal);\r\n        }\r\n\r\n        return reflectionSupply.div(tokenSupply);\r\n    }\r\n\r\n    function setPairRouterRewardToken(address _pair, IUniswapV2Router02 _router) external onlyOwner {\r\n        pair = _pair;\r\n        router = _router;\r\n        excludeFromReward(address(pair));\r\n    }\r\n\r\n    function setExcludeFromFee(address account, bool value) external onlyOwner {\r\n        require(_isExcludedFromFee[account] != value, \"Already set\");\r\n        _isExcludedFromFee[account] = value;\r\n    }\r\n\r\n    function setSwapEnabled(bool enabled) external onlyOwner {\r\n        require(swapEnabled != enabled, \"Already set\");\r\n        swapEnabled = enabled;\r\n    }\r\n\r\n    function setFeeActive(bool value) external onlyOwner{\r\n        require(isFeeActive != value, \"Already set\");\r\n        isFeeActive = value;\r\n    }\r\n\r\n    function setTransferFee(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\r\n        require(buy <= 2500 && sell <= 2500 && p2p <= 2500, \"Invalid fee\");\r\n        _transferFee[0] = buy;\r\n        _transferFee[1] = sell;\r\n        _transferFee[2] = p2p;\r\n    }\r\n\r\n    function setMarketingFee(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\r\n        require(buy <= 2500 && sell <= 2500 && p2p <= 2500, \"Invalid fee\");\r\n        _marketingFee[0] = buy;\r\n        _marketingFee[1] = sell;\r\n        _marketingFee[2] = p2p;\r\n    }\r\n\r\n    function setFarmAndBuybackFee(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\r\n        require(buy <= 2500 && sell <= 2500 && p2p <= 2500, \"Invalid fee\");\r\n        _farmAndBuybackFee[0] = buy;\r\n        _farmAndBuybackFee[1] = sell;\r\n        _farmAndBuybackFee[2] = p2p;\r\n    }\r\n\r\n    function setFarmAndBuybackWallet(address _address) external onlyOwner {\r\n        farmAndBuybackWallet = _address;\r\n    }\r\n\r\n    function setMarketingWallet(address _address) external onlyOwner {\r\n        marketingWallet = _address;\r\n    }\r\n\r\n    function setDevWallet(address _address) external onlyOwner {\r\n        devWallet = _address;\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 _newAmount) external onlyOwner() {\r\n        require(_newAmount >= 1 * 10**18 , \"maxTxAmount should be greater than 1 token\");\r\n        maxTxAmount = _newAmount;\r\n    }\r\n\r\n    function setMinTokensBeforeSwap(uint256 _amount) external onlyOwner {\r\n        minTokensBeforeSwap = _amount;\r\n    }\r\n\r\n    function getStuckBNB() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function getStuckToken(address token) external onlyOwner {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n\r\n        if(token == address(this)){\r\n            uint256 totalFee = _marketingFeeCollected.add(_farmAndBuybackFeeCollected);\r\n\r\n            require(balance > totalFee, \"No stuck token\");\r\n\r\n            balance = balance.sub(totalFee);\r\n        }\r\n\r\n        require(IERC20(token).transfer(msg.sender, balance), \"Transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swaped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_farmAndBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmAndBuybackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStuckBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2p\",\"type\":\"uint256\"}],\"name\":\"setFarmAndBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFarmAndBuybackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2p\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setPairRouterRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2p\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MultiVerseCapital", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "2500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://34dbc4c7cf4b747f5bcbad1c7655fdaa780c865114209fba1410a7bc07cfd1f7"}