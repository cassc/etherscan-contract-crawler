{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.19;\r\n\r\n/// @notice Simple single owner authorization mixin.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\r\nabstract contract Owned {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            OWNERSHIP STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() virtual {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             OWNERSHIP LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        owner = newOwner;\r\n\r\n        emit OwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract Fee is Owned {\r\n    uint256 public feeRate = 500;\r\n    address immutable usdt;\r\n\r\n    constructor(address _u) {\r\n        usdt = _u;\r\n    }\r\n\r\n    function setFeeRate(uint256 _feeRate) external onlyOwner {\r\n        require(_feeRate <= 10_000, \"<=10_000\");\r\n        feeRate = _feeRate;\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Owned {\r\n    bool public paused;\r\n\r\n    error ExpectedPause();\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused || msg.sender == owner, \"paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        paused = false;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\naddress constant Fund = 0xFCC6Bb27D1c0B5e79A25e84E208864458936fEB2;\r\n\r\nabstract contract SellMarket is Pausable, Fee {\r\n    struct ListingSell {\r\n        address token;\r\n        uint256 price;\r\n        address seller;\r\n        uint256 amount;\r\n        uint256 index;\r\n        bool canceled;\r\n    }\r\n\r\n    event SellItemListed(address indexed seller, address indexed token, uint256 amount, uint256 price);\r\n    event SellItemCanceled(address indexed seller, uint256 id, uint256 amount);\r\n    event ItemBuy(address indexed buyer, uint256 id, uint256 amount);\r\n\r\n    ListingSell[] public sellItems;\r\n\r\n    function listSell(address _token, uint256 _amount, uint256 _price) internal returns (uint256 id) {\r\n        uint256 i = sellItems.length;\r\n\r\n        ListingSell memory order;\r\n        order.token = _token;\r\n        order.seller = msg.sender;\r\n        order.amount = _amount;\r\n        order.price = _price;\r\n        order.index = i;\r\n\r\n        sellItems.push(order);\r\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\r\n        emit SellItemListed(msg.sender, _token, _amount, _price);\r\n        return i;\r\n    }\r\n\r\n    function canceSelllListing(uint256 id) external whenNotPaused {\r\n        ListingSell storage delItem = sellItems[id];\r\n        require(msg.sender == delItem.seller, \"not seller\");\r\n        require(delItem.amount > 0, \">0\");\r\n\r\n        uint256 ooA = delItem.amount;\r\n        delItem.amount = 0;\r\n        delItem.canceled = true;\r\n\r\n        IERC20(delItem.token).transfer(msg.sender, ooA);\r\n        emit SellItemCanceled(msg.sender, id, delItem.amount);\r\n    }\r\n\r\n    function buyItem(uint256 id, uint256 _amount) external whenNotPaused {\r\n        require(_amount > 0, \">0\");\r\n        ListingSell storage listedItem = sellItems[id];\r\n\r\n        listedItem.amount -= _amount;\r\n\r\n        IERC20(listedItem.token).transfer(msg.sender, _amount);\r\n\r\n        uint256 uamount = _amount * listedItem.price / 10_000;\r\n        IERC20(IERC20(usdt)).transferFrom(msg.sender, address(this), uamount);\r\n        uint256 fee = uamount * feeRate / 10000;\r\n        IERC20(usdt).transfer(Fund, fee);\r\n        IERC20(usdt).transfer(listedItem.seller, uamount - fee);\r\n\r\n        emit ItemBuy(msg.sender, listedItem.index, _amount);\r\n    }\r\n\r\n    function allSellItems() external view returns (ListingSell[] memory) {\r\n        uint256 length = sellItems.length;\r\n        ListingSell[] memory nitem = new ListingSell[](length);\r\n        for (uint256 i = 1; i < length; i++) {\r\n            nitem[i] = sellItems[i];\r\n        }\r\n        return nitem;\r\n    }\r\n\r\n    function allSellItemsWithLength(uint256 start, uint256 end) external view returns (ListingSell[] memory) {\r\n        ListingSell[] memory nitem = new ListingSell[](end - start);\r\n        for (uint256 i = start; i < end; i++) {\r\n            nitem[i] = sellItems[i];\r\n        }\r\n        return nitem;\r\n    }\r\n\r\n    function sellItemCount() public view returns (uint256 length) {\r\n        length = sellItems.length;\r\n    }\r\n}\r\n\r\nabstract contract BuyMarket is Pausable, Fee {\r\n    struct ListingBuy {\r\n        address token;\r\n        uint256 price;\r\n        address buyer;\r\n        uint256 amount;\r\n        uint256 index;\r\n        bool canceled;\r\n    }\r\n\r\n    event BuyItemListed(address indexed buyer, address indexed token, uint256 amount, uint256 price);\r\n    event BuyItemCanceled(address indexed buyer, uint256 id, uint256 amount);\r\n    event ItemSell(address indexed seller, uint256 id, uint256 amount);\r\n\r\n    ListingBuy[] public buyItems;\r\n\r\n    function listBuy(address _token, uint256 _amount, uint256 _price) internal returns (uint256 id) {\r\n        uint256 i = buyItems.length;\r\n\r\n        ListingBuy memory order;\r\n        order.token = _token;\r\n        order.buyer = msg.sender;\r\n        order.amount = _amount;\r\n        order.price = _price;\r\n        order.index = i;\r\n\r\n        buyItems.push(order);\r\n        IERC20(usdt).transferFrom(msg.sender, address(this), _amount * _price / 10_000);\r\n        emit BuyItemListed(msg.sender, _token, _amount, _price);\r\n        return i;\r\n    }\r\n\r\n    function canceBuylListing(uint256 id) external whenNotPaused {\r\n        ListingBuy storage delItem = buyItems[id];\r\n        require(msg.sender == delItem.buyer, \"not Buyer\");\r\n        require(delItem.amount > 0, \">0\");\r\n\r\n        uint256 ooA = delItem.amount;\r\n\r\n        delItem.amount = 0;\r\n        delItem.canceled = true;\r\n\r\n        uint256 returnUSD = ooA * delItem.price / 10_000;\r\n        IERC20(usdt).transfer(msg.sender, returnUSD);\r\n        emit BuyItemCanceled(msg.sender, id, returnUSD);\r\n    }\r\n\r\n    function sellItem(uint256 id, uint256 _amount) external whenNotPaused {\r\n        require(_amount > 0, \">0\");\r\n        ListingBuy storage listedItem = buyItems[id];\r\n\r\n        listedItem.amount -= _amount;\r\n\r\n        uint256 uamount = _amount * listedItem.price / 10_000;\r\n        uint256 fee = uamount * feeRate / 10000;\r\n        IERC20(usdt).transfer(Fund, fee);\r\n        IERC20(usdt).transfer(msg.sender, uamount - fee);\r\n\r\n        IERC20(listedItem.token).transferFrom(msg.sender, listedItem.buyer, _amount);\r\n\r\n        emit ItemSell(msg.sender, listedItem.index, _amount);\r\n    }\r\n\r\n    function allbuyItems() external view returns (ListingBuy[] memory) {\r\n        uint256 length = buyItems.length;\r\n        ListingBuy[] memory nitem = new ListingBuy[](length);\r\n        for (uint256 i = 1; i < length; i++) {\r\n            nitem[i] = buyItems[i];\r\n        }\r\n        return nitem;\r\n    }\r\n\r\n    function getBuyItem(uint256 index) external view returns (ListingBuy memory) {\r\n        return buyItems[index];\r\n    }\r\n\r\n    function allbuyItemsWithLength(uint256 start, uint256 end) external view returns (ListingBuy[] memory) {\r\n        ListingBuy[] memory nitem = new ListingBuy[](end - start);\r\n        for (uint256 i = start; i < end; i++) {\r\n            nitem[i] = buyItems[i];\r\n        }\r\n        return nitem;\r\n    }\r\n\r\n    function buyItemCount() public view returns (uint256 length) {\r\n        length = buyItems.length;\r\n    }\r\n}\r\n\r\ncontract Marketplace is Fee, SellMarket, BuyMarket {\r\n    mapping(address => uint256) public lastTimeListItem;\r\n\r\n    constructor(address _u) Owned(msg.sender) Fee(_u) {}\r\n\r\n    function listItem(address _token, uint256 _amount, uint256 _price, bool _sell)\r\n        external\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        require(_amount > 0, \"_amount>0\");\r\n        require(_price > 0, \"_price>0\");\r\n\r\n        require((lastTimeListItem[msg.sender] + 5 seconds) <= block.timestamp, \"5m\");\r\n        lastTimeListItem[msg.sender] = block.timestamp;\r\n\r\n        if (_sell) {\r\n            return listSell(_token, _amount, _price);\r\n        } else {\r\n            return listBuy(_token, _amount, _price);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_u\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BuyItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SellItemListed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allSellItems\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"internalType\":\"struct SellMarket.ListingSell[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"allSellItemsWithLength\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"internalType\":\"struct SellMarket.ListingSell[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allbuyItems\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"internalType\":\"struct BuyMarket.ListingBuy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"allbuyItemsWithLength\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"internalType\":\"struct BuyMarket.ListingBuy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyItemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyItems\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"canceBuylListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"canceSelllListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBuyItem\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"internalType\":\"struct BuyMarket.ListingBuy\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTimeListItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_sell\",\"type\":\"bool\"}],\"name\":\"listItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellItemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellItems\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1b296aeff706972f080738e2221970032e9104e26c340be85ad788db2151e598"}