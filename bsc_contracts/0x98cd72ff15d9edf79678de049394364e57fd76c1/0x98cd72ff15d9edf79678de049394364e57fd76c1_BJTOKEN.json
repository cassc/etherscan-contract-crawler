{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _bmby(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _balances[account] = _balances[account].add(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\ncontract BJTOKEN is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    uint[] public sellFee = [3,1,2,27,7];   \r\n    uint public buyFee = 2;\r\n\r\n    mapping(address=>bool) public ExcludeFromFees;   \r\n    address public MarketingWalletAddress = 0x96eCc38dCb76b8bEA6A9D85e0B163E0055faf09D;\r\n    address public DeadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint MaxAmount = 10 * (10**18);  \r\n    uint MaxWhiteAmount = 5 * (10**18);  \r\n    uint MintotalSupply = 918 * (10**18); \r\n \r\n\r\n    uint public LPrewardAmount;   \r\n    uint public LiquifyAmount;\r\n    uint public MarketAmount; \r\n\r\n    uint public selltotal = 0;\r\n\r\n    mapping(address=>bool) public whiteList; \r\n    mapping(address=>bool) public balanceList;  \r\n    mapping(address=>bool) public blackList;\r\n    bool public isPublicBuy = false;  \r\n\r\n\r\n    uint public doAddLiquifyAmount = 1 * (10**18);\r\n    uint public sellDestroy = 5;   \r\n    uint public dosellDestroyAddLiquifyAmount = 1 *(10**18);  \r\n    uint public doSendMarketAddress = 5 *(10**18);   \r\n    \r\n    \r\n    bool public swapping;\r\n    bool public isProcessLp = true;   \r\n    bool public swapAndLiquifyEnabled;\r\n    mapping(address => bool) private _updated;\r\n    address[] public shareholders;\r\n    mapping(address => uint256) shareholderIndexes;\r\n\r\n    uint256 public gasForProcessing;\r\n    uint256 currentIndex;\r\n    uint256 public LPFeeRewardsTimes;\r\n    uint public minLPFeeRewards= 5 * (10**18);\r\n    mapping(address => bool) noshareholderIndexes;  \r\n\r\n    uint256 public processRewardWaitBlock = 10;\r\n    bool public isDoRemove = true;\r\n\r\n    AddLiquiditySwap public _autoSwap;\r\n\r\n    address public usdtAddress = address(0x55d398326f99059fF775485246999027B3197955);\r\n    constructor(\r\n    ) payable ERC20(\"Beat Japan\",\"BJP\")  {\r\n        uint256 totalSupply = 9180 * (10**18);  \r\n        _mint(owner(), totalSupply);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair; \r\n\r\n        _autoSwap = new AddLiquiditySwap(address(this));\r\n\r\n        ExcludeFromFees[owner()] = true;\r\n        ExcludeFromFees[address(this)] = true;\r\n        ExcludeFromFees[MarketingWalletAddress] = true;\r\n        ExcludeFromFees[address(_autoSwap)] = true;\r\n\r\n        balanceList[owner()] = true;\r\n        balanceList[MarketingWalletAddress] = true;\r\n        balanceList[address(this)] = true;\r\n        balanceList[DeadAddress] = true;\r\n        balanceList[uniswapV2Pair] = true;\r\n\r\n\r\n        gasForProcessing = 300000;\r\n        swapAndLiquifyEnabled = true;\r\n        \r\n       \r\n    }\r\n    receive() external payable {}\r\n    fallback() external payable{}\r\n\r\n    function setMarketingWalletAddress(address _addr) public onlyOwner{\r\n        MarketingWalletAddress = _addr;\r\n    }\r\n    function setExcludeFromFees(address _addr, bool _is) public onlyOwner{\r\n        ExcludeFromFees[_addr] = _is;\r\n    }\r\n    function setWhiteList(address _addr, bool _is) public onlyOwner{\r\n        whiteList[_addr] = _is;\r\n    }\r\n    function setbalanceList(address _addr, bool _is) public onlyOwner{\r\n        balanceList[_addr] = _is;\r\n    }\r\n    function setshareholderIndexes(address _addr, uint _amount) public onlyOwner{\r\n        shareholderIndexes[_addr] = _amount;\r\n    }\r\n    function setisPublicBuy(bool _is) public onlyOwner{\r\n        isPublicBuy = _is;\r\n    }\r\n    function setisProcessLp(bool _is) public onlyOwner{\r\n        isProcessLp = _is;\r\n    }\r\n    function setisDoRemove(bool _is) public onlyOwner{\r\n        isDoRemove = _is;\r\n    }\r\n    function setswapAndLiquifyEnabled(bool _is) public onlyOwner{\r\n        swapAndLiquifyEnabled = _is;\r\n    }\r\n    function setMaxAmount(uint _amount) public onlyOwner{\r\n        MaxAmount = _amount;\r\n    }\r\n    function setdoSendMarketAddress(uint _amount) public onlyOwner{\r\n        doSendMarketAddress = _amount;\r\n    }\r\n    function setMintotalSupply(uint _amount) public onlyOwner{\r\n        MintotalSupply = _amount;\r\n    }\r\n    function setselltotal(uint _amount) public onlyOwner{\r\n        selltotal = _amount;\r\n    }\r\n    function setdoAddLiquifyAmount(uint _amount) public onlyOwner{\r\n        doAddLiquifyAmount = _amount;\r\n    }\r\n    function setdosellDestroyAddLiquifyAmount(uint _amount) public onlyOwner{\r\n        dosellDestroyAddLiquifyAmount = _amount;\r\n    }\r\n    function setLPandLiquifyAmount(uint _amount1,uint _amount2) public onlyOwner{\r\n        LPrewardAmount = _amount1;\r\n        LiquifyAmount = _amount2;\r\n    }\r\n    function setshareholders(address [] calldata _addrs) public onlyOwner{\r\n        shareholders = _addrs;\r\n    }\r\n    function withDrawBNB(uint _amount ,address payable  _to ) public onlyOwner{\r\n        _to.transfer(_amount);\r\n    }\r\n    function withDrawERC(uint _amount ,address  _to,address _token ) public onlyOwner{\r\n        IERC20(_token).transfer(_to,_amount);\r\n    }\r\n    function getshareholders(uint _i) public view returns(address){\r\n        return shareholders[_i];\r\n    }\r\n    function _transfer(address from,address to,uint256 amount) internal override{\r\n        require(!blackList[from] && !blackList[to],\"this is balck address\" );\r\n        if (ExcludeFromFees[from] || ExcludeFromFees[to]){\r\n            super._transfer(from, to, amount);\r\n            if (from != address(this) && to == uniswapV2Pair) {\r\n                setShare(from);\r\n                }       \r\n        return;\r\n        }\r\n\r\n        if(to == uniswapV2Pair &&  swapAndLiquifyEnabled && from != address(this) && !swapping ){\r\n             \r\n             swapping = true;\r\n\r\n            if(LiquifyAmount >= doAddLiquifyAmount && balanceOf(address(this)) >= LiquifyAmount){\r\n                swapAndLiquifyBySell(LiquifyAmount);\r\n                LiquifyAmount = 0;\r\n            }\r\n\r\n            if(MarketAmount >= doSendMarketAddress && balanceOf(address(this)) >= MarketAmount){\r\n                //swapAndLiquifyByRemove(address(this).balance);\r\n                swapTokensForUSDT(MarketAmount,MarketingWalletAddress);\r\n                MarketAmount = 0;\r\n            }\r\n\r\n            if((IERC20(uniswapV2Router.WETH()).balanceOf(address(this))) >= dosellDestroyAddLiquifyAmount){\r\n                _swap(IERC20(uniswapV2Router.WETH()).balanceOf(address(this)));\r\n            }\r\n\r\n            if(isDoRemove){\r\n                swapDoSellRemoveLP5(amount.div(2));\r\n            }\r\n            swapping = false;\r\n        }\r\n\r\n        uint doAmount = amount;\r\n\r\n        if(from == uniswapV2Pair || to == uniswapV2Pair){\r\n            if(from == uniswapV2Pair) {\r\n\r\n                if(totalSupply()-balanceOf(DeadAddress) <= MintotalSupply){\r\n                    doAmount = amount;\r\n                }\r\n                else {\r\n                    uint domarketFee = amount.mul(buyFee).div(100);\r\n                    super._transfer(from, address(this), domarketFee);\r\n                    doAmount = amount.sub(domarketFee);\r\n                    MarketAmount = MarketAmount.add(domarketFee);\r\n                }\r\n            }\r\n\r\n            else if(to == uniswapV2Pair) {\r\n                selltotal = selltotal + 1;\r\n                \r\n                if(totalSupply()-balanceOf(DeadAddress) <= MintotalSupply){\r\n                    uint liquidityFee = amount.mul(sellFee[1]).div(100);\r\n                    super._transfer(from, address(this), liquidityFee);\r\n                    LiquifyAmount = LiquifyAmount.add(liquidityFee);\r\n                    doAmount = amount.sub(liquidityFee);\r\n                }\r\n                else{\r\n                    uint liquidityFee = amount.mul(sellFee[1]).div(100);\r\n                    super._transfer(from, address(this), liquidityFee);\r\n                    LiquifyAmount = LiquifyAmount.add(liquidityFee);\r\n                    doAmount = amount.sub(liquidityFee);\r\n\r\n                    uint lpFee = amount.mul(sellFee[2]).div(100);\r\n                    super._transfer(from, address(this), lpFee);\r\n                    LPrewardAmount = LPrewardAmount.add(lpFee);\r\n                    doAmount = amount.sub(lpFee);\r\n\r\n                    if(selltotal <= 100){\r\n                        uint marketFee = amount.mul(sellFee[3]).div(100);\r\n                        super._transfer(from,address(this), marketFee);\r\n                        doAmount = amount.sub(marketFee);\r\n                        MarketAmount = MarketAmount.add(marketFee);\r\n                    }\r\n                    else if(selltotal > 100 && selltotal <= 200){\r\n                        uint marketFee = amount.mul(sellFee[4]).div(100);\r\n                        super._transfer(from,address(this), marketFee);\r\n                        doAmount = amount.sub(marketFee);\r\n                        MarketAmount = MarketAmount.add(marketFee);\r\n                    }\r\n                    else{\r\n                        uint marketFee = amount.mul(sellFee[0]).div(100);\r\n                        super._transfer(from,address(this), marketFee);\r\n                        doAmount = amount.sub(marketFee);\r\n                        MarketAmount = MarketAmount.add(marketFee);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(isPublicBuy){\r\n                uint newBalance = balanceOf(to).add(doAmount);\r\n                require((newBalance <= MaxAmount) || balanceList[to] ,\"max balance\");\r\n            }\r\n\r\n            super._transfer(from, to, doAmount);\r\n        }\r\n        else{\r\n            if(balanceList[from] || balanceList[to]){\r\n                super._transfer(from, to, amount);\r\n            }\r\n            else {\r\n                super._transfer(from, DeadAddress, amount);\r\n            }\r\n            \r\n        }\r\n    if (from != address(this) && to == uniswapV2Pair) {\r\n        setShare(from);\r\n    }\r\n    if (!swapping && isProcessLp &&\r\n    from != address(this) &&\r\n    block.number > LPFeeRewardsTimes + processRewardWaitBlock\r\n    ) {\r\n        processLpFee(gasForProcessing);\r\n        LPFeeRewardsTimes = block.number;\r\n    }\r\n}\r\n    function swapSellRemove(uint tokens)  public view returns(uint){\r\n        uint lpTotal = IERC20(uniswapV2Pair).totalSupply();\r\n        uint tokenThis = balanceOf(uniswapV2Pair);\r\n\r\n        uint removeLP =  lpTotal.mul(tokens).div(tokenThis);\r\n        return removeLP;\r\n    }\r\n    function swapDoSellRemove(uint tokens)  private returns (uint amountToken, uint amountETH) {\r\n        uint lpTotal = IERC20(uniswapV2Pair).totalSupply();\r\n        uint tokenThis = balanceOf(uniswapV2Pair);\r\n\r\n        uint removeLP = lpTotal.mul(tokens).div(tokenThis);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),removeLP);\r\n        (amountToken, amountETH) = uniswapV2Router.removeLiquidityETH(\r\n            address(this), \r\n            removeLP, \r\n            0, \r\n            0, \r\n            address(this), \r\n            block.timestamp);\r\n        super._transfer(address(this), DeadAddress, amountToken);  \r\n\r\n    }\r\n    function swapDoSellRemove(uint tokens,address _to)  private returns (uint amountToken, uint amountETH) {\r\n        uint lpTotal = IERC20(uniswapV2Pair).totalSupply();\r\n        uint tokenThis = balanceOf(uniswapV2Pair);\r\n\r\n        uint removeLP = lpTotal.mul(tokens).div(tokenThis);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),removeLP);\r\n        (amountToken, amountETH) = uniswapV2Router.removeLiquidityETH(\r\n            address(this), \r\n            removeLP, \r\n            0, \r\n            0, \r\n            _to, \r\n            block.timestamp);\r\n        super._transfer(address(this), DeadAddress, amountToken);  \r\n\r\n    }\r\n    function swapDoSellRemoveLP2(uint tokens,address _to)  private returns (uint amountETH) {\r\n\r\n        uint lpTotal = IERC20(uniswapV2Pair).totalSupply();\r\n        uint tokenThis = balanceOf(uniswapV2Pair);\r\n        uint removeLP = lpTotal.mul(tokens).div(tokenThis);\r\n        \r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),removeLP);\r\n\r\n        (amountETH) = uniswapV2Router.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address(this), \r\n            removeLP, \r\n            0, \r\n            0, \r\n            _to, \r\n            block.timestamp);\r\n    }\r\n    function swapDoSellRemoveLP3(uint tokens)  private returns (uint amountETH) {\r\n\r\n        uint lpTotal = IERC20(uniswapV2Pair).totalSupply();\r\n        uint tokenThis = balanceOf(uniswapV2Pair);\r\n        uint removeLP = lpTotal.mul(tokens).div(tokenThis);\r\n        \r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),removeLP);\r\n        uint256 initialBalance = balanceOf(address(this));\r\n        (amountETH) = uniswapV2Router.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address(this), \r\n            removeLP, \r\n            0, \r\n            0, \r\n            address(this), \r\n            block.timestamp);\r\n        uint256 newBalance = balanceOf(address(this)).sub(initialBalance);\r\n        super._transfer(address(this), DeadAddress, newBalance);\r\n    }\r\n\r\n    function swapDoSellRemoveLP4(uint tokens)  private returns (uint amoutnToken0, uint amoutnToken1) {\r\n\r\n        uint lpTotal = IERC20(uniswapV2Pair).totalSupply();\r\n        uint tokenThis = balanceOf(uniswapV2Pair);\r\n        uint removeLP = lpTotal.mul(tokens).div(tokenThis);\r\n        \r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),removeLP);\r\n        //uint256 initialBalance = balanceOf(address(this));\r\n        (amoutnToken0, amoutnToken1) = uniswapV2Router.removeLiquidity(\r\n            uniswapV2Router.WETH(),\r\n            address(this), \r\n            removeLP, \r\n            0, \r\n            0, \r\n            address(this), \r\n            block.timestamp);\r\n        //uint256 newBalance = balanceOf(address(this)).sub(initialBalance);\r\n       // super._transfer(address(this), DeadAddress, newBalance);\r\n    }\r\n    function swapDoSellRemoveLP5(uint tokens)  private returns (uint amoutnToken0, uint amoutnToken1) {\r\n\r\n        uint lpTotal = IERC20(uniswapV2Pair).totalSupply();\r\n        uint tokenThis = balanceOf(uniswapV2Pair);\r\n        uint removeLP = lpTotal.mul(tokens).div(tokenThis);\r\n        \r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),removeLP);\r\n       // uint256 initialBalance = balanceOf(address(this));\r\n        (amoutnToken0, amoutnToken1) = uniswapV2Router.removeLiquidity(\r\n            uniswapV2Router.WETH(),\r\n            address(this), \r\n            removeLP, \r\n            0, \r\n            0, \r\n            address(this), \r\n            block.timestamp);\r\n        //uint256 newBalance = balanceOf(address(this)).sub(initialBalance);\r\n        super._transfer(address(this), DeadAddress, amoutnToken1);\r\n    }\r\n    function swapDoSellRemoveLP6(uint lp,address _to)  private returns (uint amoutnToken0, uint amoutnToken1) {\r\n\r\n        uint removeLP = lp;\r\n        \r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),removeLP);\r\n      //  uint256 initialBalance = balanceOf(address(this));\r\n        (amoutnToken0, amoutnToken1) = uniswapV2Router.removeLiquidity(\r\n            uniswapV2Router.WETH(),\r\n            address(this), \r\n            removeLP, \r\n            0, \r\n            0, \r\n            _to, \r\n            block.timestamp);\r\n        //uint256 newBalance = balanceOf(address(this)).sub(initialBalance);\r\n        //super._transfer(address(this), DeadAddress, newBalance);\r\n    }\r\n    function swapALL(uint _amount, uint _LiquifyAmount,uint _weth) public onlyOwner {\r\n        swapAndLiquifyBySell(_LiquifyAmount);\r\n        _swap(_weth);\r\n        swapDoSellRemoveLP5(_amount.div(2));\r\n    }\r\n    function swapAndLiquifyBySell(uint256 tokens) private {\r\n       // split the contract balance into halves\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        uint256 initialBalance =  address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForWEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n    }\r\n    function swapAndLiquifyByRemove(uint256 tokens) private {\r\n       // split the contract balance into halves\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        uint256 initialBalance = balanceOf(address(this));\r\n\r\n        // swap tokens for ETH\r\n        swapETHForTokensToAddress(otherHalf,address(_autoSwap)); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n        _autoSwap.withdraw(address(this));\r\n        // how much ETH did we just swap into?\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = balanceOf(address(this)).sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(newBalance, half);\r\n    }\r\n    function _swap(uint tokens) private  {\r\n        //uint256 initialTokenBBalance = IERC20(uniswapV2Router.WETH()).balanceOf(address(this));\r\n        uint256 initialTokenBBalance =  balanceOf(address(this));\r\n        uint256 halfAmount = tokens.div(2);\r\n        swapTokensForTokenB(halfAmount, address(_autoSwap));\r\n        _autoSwap.withdraw(address(this));\r\n        uint256 tokenBAmount = balanceOf(address(this)).sub(initialTokenBBalance);\r\n        addLiquidityForTokenB(halfAmount, tokenBAmount);\r\n\r\n    }\r\n    function swapTokensForTokenB(uint256 tokenAmount, address recipient) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n        IERC20(uniswapV2Router.WETH()).approve(address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapTokensForWEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapTokensForUSDT(uint256 tokenAmount, address recipient) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = usdtAddress;\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapTokensForUSDTPublic(uint256 tokenAmount, address recipient) public onlyOwner {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = usdtAddress;\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapETHForTokensToAddress(uint256 ethAmount,address to) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:ethAmount}(\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapETHForTokens(uint256 ethAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:ethAmount}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n    function addLiquidityForTokenB(uint256 tokenAmount, uint256 tokenBAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenBAmount);\r\n        IERC20(uniswapV2Router.WETH()).approve(address(uniswapV2Router), tokenAmount);\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            address(uniswapV2Router.WETH()),\r\n            tokenBAmount,\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    // function _isAddLiquidity() internal view returns (bool isAdd){\r\n    //     IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);\r\n    //     (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n    //     address tokenOther = uniswapV2Router.WETH();\r\n    //     uint256 r;\r\n    //     if (tokenOther < address(this)) {\r\n    //         r = r0;\r\n    //     } else {\r\n    //         r = r1;\r\n    //     }\r\n\r\n    //     uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n    //     isAdd = bal > r;\r\n    // }\r\n\r\n    // function _isRemoveLiquidity() internal view returns (bool isRemove) {\r\n    //     IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);\r\n    //     (uint r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n    //     address tokenOther = uniswapV2Router.WETH();\r\n    //     uint256 r;\r\n    //     if (tokenOther < address(this)) {\r\n    //         r = r0;\r\n    //     } else {\r\n    //         r = r1;\r\n    //     }\r\n\r\n    //     uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n    //     isRemove = r >= bal;\r\n    // }\r\n\r\n\r\n    function processLpFee(uint256 gas) public  {\r\n        uint256 total = LPrewardAmount;\r\n        uint256 tokens = total;\r\n        if(tokens < minLPFeeRewards){\r\n            return;\r\n        }\r\n        uint256 shareholderCount = shareholders.length;\r\n        if (shareholderCount == 0) return;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            uint256 amount = total.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(IERC20(uniswapV2Pair).totalSupply());\r\n            if (tokens < amount) return;\r\n            if(amount > 0 && !noshareholderIndexes[shareholders[currentIndex]]){\r\n                super._transfer(address(this), shareholders[currentIndex], amount);\r\n                tokens = tokens.sub(amount);\r\n                LPrewardAmount = LPrewardAmount.sub(amount);\r\n            }\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(shareholder)\r\n        }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (!_updated[shareholder]) {\r\n            addShareholder(shareholder);\r\n            _updated[shareholder] = true;\r\n        }\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n}\r\n\r\ncontract AddLiquiditySwap {\r\n    using SafeMath for uint256;\r\n    address owner;\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n    receive() external payable {}\r\n    fallback() external payable{}\r\n\r\n\r\n    function withdraw(address token) public payable {\r\n        require(msg.sender == owner, \"caller is not owner\");\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            IERC20(token).transfer(msg.sender, balance);\r\n        }\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DeadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ExcludeFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPFeeRewardsTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPrewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquifyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoSwap\",\"outputs\":[{\"internalType\":\"contract AddLiquiditySwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doAddLiquifyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doSendMarketAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dosellDestroyAddLiquifyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getshareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDoRemove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProcessLp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLPFeeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewardWaitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDestroy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selltotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount2\",\"type\":\"uint256\"}],\"name\":\"setLPandLiquifyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMintotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"setbalanceList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setdoAddLiquifyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setdoSendMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setdosellDestroyAddLiquifyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"setisDoRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"setisProcessLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"setisPublicBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setselltotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setshareholderIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"setshareholders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"setswapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_LiquifyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weth\",\"type\":\"uint256\"}],\"name\":\"swapALL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"swapSellRemove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapTokensForUSDTPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withDrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withDrawERC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BJTOKEN", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a3eb07aee6ce914d2df2f2dfc9e94087beede5a7301b365a69929fb9fd688e7b"}