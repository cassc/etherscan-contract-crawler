{"SourceCode": "/*  \r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2557\u2588\u2588\u2557\r\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d    \u2588\u2588\u2551\u2588\u2588\u2551\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2551\u2588\u2588\u2551\r\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551   \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551    \u2588\u2588\u2551\u2588\u2588\u2551\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551    \u2588\u2588\u2551\u2588\u2588\u2551\r\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u255d\u255a\u2550\u255d \r\nBNBeast Farm | earn money until 8% daily | Metaversing \r\nSPDX-License-Identifier: MIT\r\n*/\r\n\r\npragma solidity ^0.8.14;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BNBBeats {\r\n    struct User {\r\n        uint256 invest;\r\n        uint256 withdraw;\r\n        uint256 hatcheryMiners;\r\n        uint256 claimedBeats;\r\n        uint256 lastHatch;\r\n        uint256 checkpoint;\r\n        address referrals;\r\n    }\r\n    mapping(address => User) public users;\r\n}\r\n\r\ncontract BNBBeatsV2 is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private BEATS_TO_HATCH_1MINERS = 1080000; //for final version should be seconds in a day\r\n    uint256 private PSN = 10000;\r\n    uint256 private PSNH = 5000;\r\n    uint256 private balanceLimit = 100;\r\n    uint256 private devFeeVal = 3;\r\n    uint256 private referrerCommissionVal = 13;\r\n    bool private initialized = false;\r\n    address payable public devAddress;\r\n    address payable public ownerAddress;\r\n    BNBBeats private contractOrigin;\r\n\r\n    uint256 public marketBeats;\r\n    uint256 private players;\r\n\r\n    struct UserOrigin {\r\n        uint256 invest;\r\n        uint256 withdraw;\r\n        uint256 hatcheryMiners;\r\n        uint256 claimedBeats;\r\n        uint256 lastHatch;\r\n        uint256 checkpoint;\r\n        address referrals;\r\n    }\r\n\r\n    struct User {\r\n        uint256 invest;\r\n        uint256 investOrigin;\r\n        uint256 withdraw;\r\n        uint256 withdrawOrigin;\r\n        uint256 hatcheryMiners;\r\n        uint256 claimedBeats;\r\n        uint256 lastHatch;\r\n        uint256 checkpoint;\r\n        bool originDone;\r\n        address referrals;\r\n        uint256 referrer;\r\n        uint256 amountBNBReferrer;\r\n        uint256 amountBEATSReferrer;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(address => UserOrigin) public usersOrigin;\r\n    mapping(address => bool) public whiteList;\r\n\r\n    uint256 public totalInvested;\r\n    uint256 internal constant TIME_STEP = 1 days;\r\n\r\n    constructor(\r\n        address _dev,\r\n        address _owner,\r\n        address _contractOrigin\r\n    ) {\r\n        devAddress = payable(_dev);\r\n        ownerAddress = payable(_owner);\r\n        marketBeats = 108000000000;\r\n        contractOrigin = BNBBeats(_contractOrigin);\r\n    }\r\n\r\n    modifier initializer() {\r\n        require(\r\n            initialized || msg.sender == ownerAddress,\r\n            \"initialized is false\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier checkUser_() {\r\n        require(checkUser(), \"try again later\");\r\n        _;\r\n    }\r\n\r\n    modifier checkReinvest_() {\r\n        require(checkReinvest(), \"try again later\");\r\n        _;\r\n    }\r\n\r\n    modifier checkOwner_() {\r\n        require(checkOwner(), \"try again later\");\r\n        _;\r\n    }\r\n\r\n    function checkOwner() public view returns (bool) {\r\n        return\r\n            msg.sender == ownerAddress ||\r\n            msg.sender == devAddress ||\r\n            msg.sender == owner();\r\n    }\r\n\r\n    function checkUser() public view returns (bool) {\r\n        uint256 check = block.timestamp.sub(users[msg.sender].checkpoint);\r\n        if (check > TIME_STEP) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function checkReinvest() public view returns (bool) {\r\n        uint256 check = block.timestamp.sub(users[msg.sender].checkpoint);\r\n        if (check > SafeMath.div(TIME_STEP, 2)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getDateForSelling(address adr) public view returns (uint256) {\r\n        return SafeMath.add(users[adr].checkpoint, TIME_STEP);\r\n    }\r\n\r\n    function mapUser() public {\r\n        UserOrigin storage user = usersOrigin[msg.sender];\r\n        (\r\n            uint256 invest,\r\n            uint256 withdraw,\r\n            uint256 hatcheryMiners,\r\n            uint256 claimedBeats,\r\n            uint256 lastHatch,\r\n            uint256 checkpoint,\r\n            address referrals\r\n        ) = contractOrigin.users(msg.sender);\r\n        user.invest = invest;\r\n        user.withdraw = withdraw;\r\n        user.referrals = referrals;\r\n        user.hatcheryMiners = hatcheryMiners;\r\n        user.claimedBeats = claimedBeats;\r\n        user.lastHatch = lastHatch;\r\n        user.checkpoint = checkpoint;\r\n    }\r\n\r\n    function mergeOrigin() public {\r\n        User storage user = users[msg.sender];\r\n        if (!user.originDone) {\r\n            mapUser();\r\n            UserOrigin memory userOrigin = usersOrigin[msg.sender];\r\n            if (user.invest == 0) {\r\n                players = SafeMath.add(players, 1);\r\n                uint256 dif = SafeMath.sub(\r\n                    userOrigin.invest,\r\n                    userOrigin.withdraw\r\n                );\r\n                if (dif > 0) {\r\n                    user.withdrawOrigin = userOrigin.withdraw;\r\n                    user.investOrigin = userOrigin.invest;\r\n                    user.invest = dif;\r\n                    user.hatcheryMiners = userOrigin.hatcheryMiners;\r\n                    user.claimedBeats = userOrigin.claimedBeats;\r\n                    user.lastHatch = userOrigin.lastHatch;\r\n                    user.checkpoint = userOrigin.checkpoint;\r\n                    user.referrals = userOrigin.referrals;\r\n                } else {\r\n                    user.originDone = true;\r\n                }\r\n            } else {\r\n                if (user.withdraw != userOrigin.withdraw) {\r\n                    uint256 dif = SafeMath.sub(\r\n                        user.invest,\r\n                        userOrigin.withdraw\r\n                    );\r\n                    if (dif > 0) {\r\n                        user.withdraw = userOrigin.withdraw;\r\n                    } else {\r\n                        user.originDone = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function reInvest() public initializer checkReinvest_ {\r\n        mergeOrigin();\r\n        User storage user = users[msg.sender];\r\n        uint256 beatsUsed = getMyBeats(msg.sender);\r\n        hatchBeats(beatsUsed, user);\r\n        //send referral beats\r\n        if (user.referrals != address(0)) {\r\n            User storage referrals_ = users[user.referrals];\r\n            uint256 amount = referrerCommission(referrals_.claimedBeats);\r\n            referrals_.claimedBeats = SafeMath.add(\r\n                referrals_.claimedBeats,\r\n                amount\r\n            );\r\n            referrals_.amountBEATSReferrer = amount;\r\n        }\r\n    }\r\n\r\n    function hatchBeats(uint256 beatsUsed, User storage user) private {\r\n        uint256 newMiners = SafeMath.div(beatsUsed, BEATS_TO_HATCH_1MINERS);\r\n        user.hatcheryMiners = SafeMath.add(user.hatcheryMiners, newMiners);\r\n        user.claimedBeats = 0;\r\n        user.lastHatch = block.timestamp;\r\n        user.checkpoint = block.timestamp;\r\n        //boost market to nerf miners hoarding\r\n        marketBeats = SafeMath.add(marketBeats, SafeMath.div(beatsUsed, 5));\r\n    }\r\n\r\n    function calculateMyBeats(address adr)\r\n        private\r\n        view\r\n        returns (\r\n            uint256 hasBeats,\r\n            uint256 beatValue,\r\n            uint256 beats\r\n        )\r\n    {\r\n        uint256 beats_ = getMyBeats(msg.sender);\r\n        uint256 hasBeats_ = beats_;\r\n        uint256 beatValue_;\r\n        if (whiteList[adr]) {\r\n            beatValue_ = calculateBeatSell(\r\n                SafeMath.div(hasBeats_, SafeMath.div(333, 100))\r\n            );\r\n            hasBeats_ -= (hasBeats_ / SafeMath.div(333, 100));\r\n        } else if (address(this).balance > balanceLimit) {\r\n            beatValue_ = calculateBeatSell(SafeMath.div(hasBeats_, 5));\r\n            hasBeats_ -= (hasBeats_ / 5);\r\n        } else {\r\n            beatValue_ = calculateBeatSell(SafeMath.div(hasBeats_, 10));\r\n            hasBeats_ -= (hasBeats_ / 10);\r\n        }\r\n        hasBeats = hasBeats_;\r\n        beatValue = beatValue_;\r\n        beats = calculateBeatSell(beats_);\r\n    }\r\n\r\n    function sellBeats() external initializer checkUser_ {\r\n        mergeOrigin();\r\n        (uint256 hasBeats, uint256 beatValue, ) = calculateMyBeats(msg.sender);\r\n        uint256 fee = withdrawFee(beatValue);\r\n        require(\r\n            SafeMath.sub(beatValue, fee) > SafeMath.div(1, 10),\r\n            \"Amount don't allowed\"\r\n        );\r\n        User storage user = users[msg.sender];\r\n        uint256 beatsUsed = hasBeats;\r\n        uint256 newMiners = SafeMath.div(beatsUsed, BEATS_TO_HATCH_1MINERS);\r\n        user.hatcheryMiners = SafeMath.add(user.hatcheryMiners, newMiners);\r\n        user.claimedBeats = 0;\r\n        user.lastHatch = block.timestamp;\r\n        user.checkpoint = block.timestamp;\r\n\r\n        marketBeats = SafeMath.add(marketBeats, hasBeats);\r\n        payFees(fee);\r\n        user.withdraw += beatValue;\r\n        payable(msg.sender).transfer(SafeMath.sub(beatValue, fee));\r\n    }\r\n\r\n    function beatsRewards(address adr) public view returns (uint256) {\r\n        uint256 hasBeats = getMyBeats(adr);\r\n        uint256 beatValue = calculateBeatSell(hasBeats);\r\n        return beatValue;\r\n    }\r\n\r\n    function referrerCommission(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return SafeMath.div(SafeMath.mul(_amount, referrerCommissionVal), 100);\r\n    }\r\n\r\n    function buyBeats(address ref) public payable initializer {\r\n        if (checkOwner()) {\r\n            initialized = true;\r\n        }\r\n        mergeOrigin();\r\n        User storage user = users[msg.sender];\r\n\r\n        if (ref == msg.sender) {\r\n            ref = address(0);\r\n            user.referrals = address(0);\r\n        } else {\r\n            user.referrals = ref;\r\n        }\r\n\r\n        uint256 beatsBought = calculateBeatBuy(\r\n            msg.value,\r\n            SafeMath.sub(address(this).balance, msg.value)\r\n        );\r\n        beatsBought = SafeMath.sub(beatsBought, devFee(beatsBought));\r\n        uint256 fee = devFee(msg.value);\r\n        payFees(fee);\r\n        if (user.invest == 0) {\r\n            user.checkpoint = block.timestamp;\r\n            players = SafeMath.add(players, 1);\r\n        }\r\n        user.invest += msg.value;\r\n        user.claimedBeats = SafeMath.add(user.claimedBeats, beatsBought);\r\n        hatchBeats(getMyBeats(msg.sender), user);\r\n        payCommision(user, ref);\r\n        totalInvested += msg.value;\r\n    }\r\n\r\n    function payCommision(User storage user, address ref) private {\r\n        uint256 amountReferrer = referrerCommission(msg.value);\r\n        if (user.referrals != msg.sender && user.referrals != address(0)) {\r\n            user.referrals = ref;\r\n            users[ref].referrer = SafeMath.add(users[ref].referrer, 1);\r\n            users[ref].amountBNBReferrer = SafeMath.add(\r\n                users[ref].amountBNBReferrer,\r\n                amountReferrer\r\n            );\r\n            payable(ref).transfer(amountReferrer);\r\n        }\r\n    }\r\n\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) private view returns (uint256) {\r\n        uint256 a = PSN.mul(bs);\r\n        uint256 b = PSNH;\r\n\r\n        uint256 c = PSN.mul(rs);\r\n        uint256 d = PSNH.mul(rt);\r\n\r\n        uint256 h = c.add(d).div(rt);\r\n        return a.div(b.add(h));\r\n    }\r\n\r\n    function calculateBeatSell(uint256 beats) private view returns (uint256) {\r\n        uint256 _cal = calculateTrade(\r\n            beats,\r\n            marketBeats,\r\n            address(this).balance\r\n        );\r\n        _cal += _cal.mul(5).div(100);\r\n        return _cal;\r\n    }\r\n\r\n    function calculateBeatBuy(uint256 eth, uint256 contractBalance)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculateTrade(eth, contractBalance, marketBeats);\r\n    }\r\n\r\n    function calculateBeatBuySimple(uint256 eth) public view returns (uint256) {\r\n        return calculateBeatBuy(eth, address(this).balance);\r\n    }\r\n\r\n    function devFee(uint256 _amount) private view returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(_amount, devFeeVal), 100);\r\n    }\r\n\r\n    function withdrawFee(uint256 _amount) private view returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(_amount, devFeeVal), 100);\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMyMiners(address adr) public view returns (uint256) {\r\n        User memory user = users[adr];\r\n        return user.hatcheryMiners;\r\n    }\r\n\r\n    function getPlayers() public view returns (uint256) {\r\n        return players;\r\n    }\r\n\r\n    function getMyBeats(address adr) public view returns (uint256) {\r\n        User memory user = users[adr];\r\n        return SafeMath.add(user.claimedBeats, getBeatsSinceLastHatch(adr));\r\n    }\r\n\r\n    function getBeatsSinceLastHatch(address adr) public view returns (uint256) {\r\n        User memory user = users[adr];\r\n        uint256 secondsPassed = min(\r\n            BEATS_TO_HATCH_1MINERS,\r\n            SafeMath.sub(block.timestamp, user.lastHatch)\r\n        );\r\n        return SafeMath.mul(secondsPassed, user.hatcheryMiners);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function getSellBeats(address user_)\r\n        public\r\n        view\r\n        returns (uint256 beatValue)\r\n    {\r\n        uint256 hasBeats = getMyBeats(user_);\r\n        beatValue = calculateBeatSell(hasBeats);\r\n    }\r\n\r\n    function getPublicData()\r\n        external\r\n        view\r\n        returns (uint256 _totalInvest, uint256 _balance)\r\n    {\r\n        _totalInvest = totalInvested;\r\n        _balance = address(this).balance;\r\n    }\r\n\r\n    function userData(address user_)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 lastHatch_,\r\n            uint256 rewards_,\r\n            uint256 amountAvailableReinvest_,\r\n            uint256 availableWithdraw_,\r\n            uint256 beatsMiners_,\r\n            address referrals_,\r\n            uint256 referrer,\r\n            uint256 checkpoint,\r\n            uint256 referrerBNB,\r\n            uint256 referrerBEATS\r\n        )\r\n    {\r\n        User memory user = users[user_];\r\n        (, uint256 beatValue, uint256 beats) = calculateMyBeats(user_);\r\n        lastHatch_ = user.lastHatch;\r\n        referrals_ = user.referrals;\r\n        rewards_ = beats;\r\n        amountAvailableReinvest_ = SafeMath.sub(beats, beatValue);\r\n        availableWithdraw_ = beatValue;\r\n        beatsMiners_ = getBeatsSinceLastHatch(user_);\r\n        referrer = user.referrer;\r\n        checkpoint = user.checkpoint;\r\n        referrerBNB = user.amountBNBReferrer;\r\n        referrerBEATS = user.amountBEATSReferrer;\r\n    }\r\n\r\n    function payFees(uint256 _amount) internal {\r\n        uint256 toOwners = _amount.div(2);\r\n        devAddress.transfer(toOwners);\r\n        ownerAddress.transfer(toOwners);\r\n    }\r\n\r\n    function addToWhiteList(address adr) external checkOwner_ {\r\n        whiteList[adr] = true;\r\n    }\r\n\r\n    function removeToWhiteList(address adr) external checkOwner_ {\r\n        whiteList[adr] = false;\r\n    }\r\n\r\n    function getDate() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractOrigin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"beatsRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyBeats\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateBeatBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateBeatBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getBeatsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDateForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyBeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getSellBeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beatValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketBeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mergeOrigin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reInvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"removeToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBeats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastHatch_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAvailableReinvest_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableWithdraw_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beatsMiners_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrals_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBEATS\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investOrigin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawOrigin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatcheryMiners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedBeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"originDone\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrals\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBNBReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBEATSReferrer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersOrigin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatcheryMiners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedBeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrals\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BNBBeatsV2", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d33b0b6fdb041a5c5a5aeb3c53735a375bc1c8470000000000000000000000000a61d672db25cac6bb653442a8360f6774dad057000000000000000000000000de875e515296423f3872e709d7520df78fd3035b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://484765862def4dcc94ae41bbe78e46de5eed326b729b1f796db6417fc823e951"}