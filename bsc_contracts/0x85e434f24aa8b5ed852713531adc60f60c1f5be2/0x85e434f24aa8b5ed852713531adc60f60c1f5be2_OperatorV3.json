{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface TokenMover {\r\n    function transferERC20(address currency, address from, address to, uint256 amount) external;\r\n    function transferERC721(address currency, address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface NFTToken {\r\n    function mintForSomeoneAndBuy(\r\n        uint256 tokenId,\r\n        address[] calldata creators,\r\n        uint256[] calldata royaltyPercent,\r\n        address buyer\r\n    ) external;\r\n}\r\n\r\ninterface FeeManager {\r\n    function getPartnerFee(address partner) external view returns (uint256);\r\n}\r\n\r\ninterface IERC2981Royalties {\r\n    /// @notice Called with the sale price to determine how much royalty\r\n    //          is owed and to whom.\r\n    /// @param _tokenId - the NFT asset queried for royalty information\r\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\r\n    /// @return _receiver - address of who should be sent the royalty payment\r\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\r\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\r\n        external\r\n        view\r\n        returns (address _receiver, uint256 _royaltyAmount);\r\n}\r\n\r\ninterface IERCMultiRoyalties {\r\n    function royaltyInfoAll(uint256 tokenId, uint256 value) external view returns (address[] memory, uint256[] memory);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract OperatorV3 is Ownable {\r\n\r\n    TokenMover immutable public tokenMover;\r\n    address private feeManager;\r\n    address private feeRecipient;\r\n\r\n    mapping(address => bool) internal _isApp;\r\n\r\n    event SaleAwarded(address from, address to, uint256 tokenId);\r\n\r\n    constructor(address _feeManager, address _feeRecipient, address _TokenMover) {\r\n        feeManager = _feeManager;\r\n        feeRecipient = _feeRecipient;\r\n        tokenMover = TokenMover(_TokenMover);\r\n    }\r\n\r\n    modifier onlyApp() {\r\n        require(_isApp[_msgSender()], \"Caller is not the app\");\r\n        _;\r\n    }\r\n\r\n    function getFeeManager() public view returns(address) {\r\n        return feeManager;\r\n    }\r\n\r\n    function getFeeRecipient() public view returns(address) {\r\n        return feeRecipient;\r\n    }\r\n\r\n    function isApp(address _app) public view returns(bool) {\r\n        return _isApp[_app];\r\n    }\r\n\r\n    function mintAndSell(\r\n        uint256 tokenId,\r\n        address nftContract,\r\n        address[] calldata owners,\r\n        address buyer,\r\n        uint256 price,\r\n        uint256 extraFee,\r\n        uint256[] calldata royaltyPercentages,\r\n        address currency\r\n    ) external onlyApp {\r\n        require(price > 0, \"Price should be greater than zero\");\r\n        _takeFeeOnMint(owners, royaltyPercentages, buyer, price, extraFee, currency);\r\n        NFTToken(nftContract).mintForSomeoneAndBuy(tokenId, owners, royaltyPercentages, buyer);\r\n        emit SaleAwarded(owners[0], buyer, tokenId);\r\n    }\r\n\r\n    function sellItem(\r\n        uint256 tokenId,\r\n        address nftContract,\r\n        address owner,\r\n        address buyer,\r\n        uint256 price,\r\n        uint256 extraFee,\r\n        address currency\r\n    ) external onlyApp {\r\n        require(price > 0, \"Price should be greater than zero\");\r\n        _takeFee(tokenId, nftContract, owner, buyer, price, extraFee, currency);\r\n        tokenMover.transferERC721(nftContract, owner, buyer, tokenId);\r\n        emit SaleAwarded(owner, buyer, tokenId);\r\n    }\r\n\r\n    function _takeFeeOnMint(\r\n        address[] calldata sellers,\r\n        uint256[] calldata percentages,\r\n        address buyer,\r\n        uint256 price,\r\n        uint256 extraFee,\r\n        address currency\r\n    ) internal {\r\n\r\n        uint256 commission = FeeManager(feeManager).getPartnerFee(sellers[0]);\r\n        uint256 platformFee = (price*commission)/10000 + extraFee;\r\n        uint256 amountForSeller = price - platformFee;\r\n\r\n        uint256 total;\r\n        uint256 length = sellers.length;\r\n\r\n        for(uint256 i = 0; i < length; i++) {\r\n            total += percentages[i];\r\n        }\r\n        _sendToMany(currency, buyer, sellers, percentages, amountForSeller, total);\r\n        tokenMover.transferERC20(currency, buyer, feeRecipient, platformFee);\r\n    }\r\n\r\n    function _sendToMany(address currency, address from, address[] calldata tos, uint256[] calldata percentages, uint256 amount, uint256 total) internal {\r\n\r\n        uint256 length = tos.length;\r\n        for(uint256 i = 0; i < length; i++) {\r\n            uint256 amountA = amount*percentages[i]/total;\r\n            tokenMover.transferERC20(currency, from, tos[i], amountA);\r\n        }\r\n    }\r\n\r\n    function _takeFee(\r\n        uint256 tokenId,\r\n        address nftContract,\r\n        address seller,\r\n        address buyer,\r\n        uint256 price,\r\n        uint256 extraFee,\r\n        address currency\r\n    ) internal {\r\n\r\n        uint256 totalRoyalty;\r\n        if(IERC165(nftContract).supportsInterface(type(IERCMultiRoyalties).interfaceId)) {\r\n\r\n            (address[] memory recipients, uint256[] memory amounts) = IERCMultiRoyalties(nftContract).royaltyInfoAll(tokenId, price);\r\n            uint256 length = recipients.length;\r\n            for(uint256 i = 0; i < length; i++) {\r\n                totalRoyalty += amounts[i];\r\n                tokenMover.transferERC20(currency, buyer, recipients[i], amounts[i]);\r\n            }\r\n\r\n        } else if(IERC165(nftContract).supportsInterface(type(IERC2981Royalties).interfaceId)) {\r\n            (address recipient, uint256 amount) = IERC2981Royalties(nftContract).royaltyInfo(tokenId, price);\r\n\r\n            if(seller != recipient) {\r\n                totalRoyalty = amount;\r\n                tokenMover.transferERC20(currency, buyer, recipient, amount);\r\n            }\r\n        }\r\n\r\n        uint256 commission = FeeManager(feeManager).getPartnerFee(seller);\r\n        uint256 platformFee = (price*commission)/10000 + extraFee;\r\n        uint256 amountForSeller = price - platformFee - totalRoyalty;\r\n\r\n        tokenMover.transferERC20(currency, buyer, seller, amountForSeller);\r\n        tokenMover.transferERC20(currency, buyer, feeRecipient, platformFee);\r\n    }\r\n\r\n    function changeFeeManager(address _feeManager) external onlyOwner {\r\n        feeManager = _feeManager;\r\n    }\r\n\r\n    function changeFeeRecipient(address _feeRecipient) external onlyOwner {\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n\r\n    function addApp(address _app) external onlyOwner {\r\n        require(!_isApp[_app], \"Address already added as app\");\r\n        _isApp[_app] = true;\r\n    }\r\n\r\n    function removeApp(address _app) external onlyOwner {\r\n        require(_isApp[_app], \"Address is not added as app\");\r\n        _isApp[_app] = false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TokenMover\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"SaleAwarded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_app\",\"type\":\"address\"}],\"name\":\"addApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"changeFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"changeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_app\",\"type\":\"address\"}],\"name\":\"isApp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyPercentages\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"mintAndSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_app\",\"type\":\"address\"}],\"name\":\"removeApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"sellItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMover\",\"outputs\":[{\"internalType\":\"contract TokenMover\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OperatorV3", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000da0f23bafd1909087a7616576eb5a3545cda3bab000000000000000000000000acb33c7cc49dfcf23055e3d383be3a72c3fa6ab5000000000000000000000000874f15088843949fa6ac0834a9933b57e6edfd08", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5d1281345421ba361b84403dfed673c1a54d6c139b1eae609c6ff991921cfec6"}