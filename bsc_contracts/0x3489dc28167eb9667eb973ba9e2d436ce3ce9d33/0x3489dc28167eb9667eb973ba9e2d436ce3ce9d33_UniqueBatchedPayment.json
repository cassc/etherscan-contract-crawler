{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract BEP20Basic {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public view virtual returns (uint);\r\n    function transfer(address to, uint value) public virtual returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\nabstract contract BEP20 is BEP20Basic {\r\n    function allowance(address owner, address spender) public view virtual returns (uint);\r\n    function transferFrom(address from, address to, uint value) public virtual returns (bool);\r\n    function approve(address spender, uint value) public virtual returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract UniqueBatchedPayments  {\r\n    address public immutable predefinedWallet;\r\n    address public immutable tokenAddress;\r\n    mapping(bytes32 => bool) successfulPayments;\r\n    mapping(address => bool) allowedSenders;\r\n    address public owner;\r\n\r\n    constructor(address _predefinedWallet, address _tokenAddress) {\r\n        predefinedWallet = _predefinedWallet;\r\n        tokenAddress = _tokenAddress;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function paymentSuccessful(address sender, bytes32 paymentId) public view returns (bool) {\r\n        return successfulPayments[keccak256(abi.encodePacked(sender, paymentId))];\r\n    }\r\n\r\n    function multisend(bytes32 paymentId, address[] calldata dests, uint256[] calldata values) \r\n    public returns (uint256) {\r\n        require(allowedSenders[msg.sender], \"Sender not authorized\");\r\n        require(dests.length > 0, \"No destination addresses provided\");\r\n        require(values.length == dests.length, \"Mismatch between addresses and values\");\r\n        \r\n        bytes32 scopedPaymentId = keccak256(abi.encodePacked(predefinedWallet, paymentId));\r\n        require(!successfulPayments[scopedPaymentId], \"Payment already made\");\r\n\r\n        for (uint256 i = 0; i < dests.length; i++) {\r\n            require(BEP20(tokenAddress).transferFrom(predefinedWallet, dests[i], values[i]), \"Transfer failed\");\r\n        }\r\n\r\n        successfulPayments[scopedPaymentId] = true;\r\n        return dests.length;\r\n    }\r\n\r\n    function addAddress(address _address) public onlyOwner {\r\n        allowedSenders[_address] = true;\r\n    }\r\n\r\n    function removeAddress(address _address) public onlyOwner {\r\n        delete allowedSenders[_address];\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        owner = newOwner;\r\n    }\r\n\r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_predefinedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"dests\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"}],\"name\":\"paymentSuccessful\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predefinedWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UniqueBatchedPayments", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001ae8537afe4e8fc9fde383f955c0200e8c16e707000000000000000000000000e7cb24f449973d5b3520e5b93d88b405903c75fb", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b1b53dc1f3af55e163d2072b8ffda36b21086751b78cb5e67e0156b3ae1ce670"}