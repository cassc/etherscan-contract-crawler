{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\ncontract AvariceBUSDMiner {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    /** Base parameters **/\r\n    uint256 public EGGS_TO_HIRE_1MINERS = 2160000;\r\n    uint256 public REFERRAL = 30;\r\n    uint256 public PERCENTS_DIVIDER = 1000;\r\n    uint256 public DEV = 20;\r\n    uint256 public TEAM = 25;\r\n    uint256 public POOL = 5;\r\n    uint256 public MARKET_EGGS_DIVISOR = 2;\r\n\r\n    uint256 public MIN_INVEST_LIMIT = 10 ether; /** min. 10 BUSD  **/\r\n    uint256 public WALLET_DEPOSIT_LIMIT = 500000 ether; /** max. 500000 BUSD  **/\r\n\r\n    uint256 public COMPOUND_BONUS_MAX_TIMES = 6; /** 6 Times Compound every 24 Hours / 6 days. **/\r\n    uint256 public COMPOUND_STEP = 1 days; /** 24 Hours Compound Timer **/\r\n\r\n    uint256 public WITHDRAWAL_TAX = 880; // 88% tax for For Early Withdrawals - Penalties\r\n    uint256 public COMPOUND_FOR_NO_TAX_WITHDRAWAL = 6; // Compound days, for no tax Withdrawal.\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalDeposits;\r\n    uint256 public totalCompound;\r\n    uint256 public totalRefBonus;\r\n    uint256 public totalWithdrawn;\r\n    uint256 public totalStakedAVC;\r\n\r\n    uint256 public marketEggs;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public contractStarted;\r\n\r\n    uint256 public CUTOFF_STEP = 36 * 60 * 60; /** 36 Hours Rewards Accumulation Cut-Off **/\r\n\r\n    /* addresses */\r\n    address public owner;\r\n    address payable public dev;\r\n    address payable public team;\r\n    address payable public pool;\r\n\r\n    mapping(address => uint256) public levelMap;\r\n    mapping(address => uint256) public stakeAmount;\r\n\r\n    struct User {\r\n        uint256 initialDeposit;\r\n        uint256 userDeposit;\r\n        uint256 miners;\r\n        uint256 claimedEggs;\r\n        uint256 lastHatch;\r\n        address referrer;\r\n        uint256 referralsCount;\r\n        uint256 referralEggRewards;\r\n        uint256 totalWithdrawn;\r\n        uint256 dailyCompoundBonus;\r\n        uint256 minerCompoundCount;\r\n        uint256 lastWithdrawTime;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    address public AVARICE_ADDRESS = address(0xe7d923444C21F9Bd73F8D5972fF2E04114845143);\r\n    IERC20 public BUSDToken = IERC20(address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56));\r\n    IERC20 public bavcToken = IERC20(AVARICE_ADDRESS);\r\n    IAVARICE public avarice = IAVARICE(AVARICE_ADDRESS);\r\n\r\n    constructor(\r\n        address payable _dev,\r\n        address payable _pool,\r\n        address payable _team\r\n    ) {\r\n        require(!isContract(_dev) && !isContract(_pool) && !isContract(_team));\r\n        owner = msg.sender;\r\n        dev = _dev;\r\n        pool = _pool;\r\n        team = _team;\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function startMiner() public {\r\n        if (!contractStarted) {\r\n            if (msg.sender == owner) {\r\n                require(marketEggs == 0);\r\n                contractStarted = true;\r\n                marketEggs = 216000000000;\r\n            } else revert('Contract not started yet.');\r\n        }\r\n    }\r\n\r\n    // Compound Function\r\n    function hireMoreMiners(bool isCompound) public {\r\n        User storage user = users[msg.sender];\r\n        require(contractStarted, 'Contract not started yet.');\r\n\r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 eggsForCompound = eggsUsed;\r\n\r\n        if (isCompound) {\r\n            uint256 eggsUsedValue = calculateEggSell(eggsForCompound);\r\n            user.userDeposit = user.userDeposit.add(eggsUsedValue);\r\n            totalCompound = totalCompound.add(eggsUsedValue);\r\n            require(block.timestamp.sub(user.lastHatch) >= COMPOUND_STEP, 'Tried to compound too early.');\r\n            if (user.dailyCompoundBonus < COMPOUND_BONUS_MAX_TIMES) {\r\n                user.dailyCompoundBonus = user.dailyCompoundBonus.add(1);\r\n            }\r\n            //add compoundCount for monitoring purposes.\r\n            user.minerCompoundCount = user.minerCompoundCount.add(1);\r\n        }\r\n\r\n        user.miners = user.miners.add(eggsForCompound.div(EGGS_TO_HIRE_1MINERS));\r\n        user.claimedEggs = 0;\r\n        user.lastHatch = block.timestamp;\r\n\r\n        marketEggs = marketEggs.add(eggsUsed.div(MARKET_EGGS_DIVISOR));\r\n    }\r\n\r\n    function sell() public {\r\n        require(contractStarted, 'Contract not started yet.');\r\n\r\n        User storage user = users[msg.sender];\r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n\r\n        /** \r\n            if user compound < to mandatory compound days**/\r\n        if (user.dailyCompoundBonus < COMPOUND_FOR_NO_TAX_WITHDRAWAL) {\r\n            //daily compound bonus count will not reset and eggValue will be deducted with feedback tax.\r\n            eggValue = eggValue.sub(eggValue.mul(WITHDRAWAL_TAX).div(PERCENTS_DIVIDER));\r\n        } else {\r\n            //set daily compound bonus count to 0 and eggValue will remain without deductions\r\n            user.dailyCompoundBonus = 0;\r\n            user.minerCompoundCount = 0;\r\n        }\r\n\r\n        user.lastWithdrawTime = block.timestamp;\r\n        user.claimedEggs = 0;\r\n        user.lastHatch = block.timestamp;\r\n        marketEggs = marketEggs.add(hasEggs.div(MARKET_EGGS_DIVISOR));\r\n\r\n        if (getBalance() < eggValue) {\r\n            eggValue = getBalance();\r\n        }\r\n\r\n        uint256 eggsPayout = eggValue.sub(payFees(eggValue));\r\n        BUSDToken.transfer(address(msg.sender), eggsPayout);\r\n        user.totalWithdrawn = user.totalWithdrawn.add(eggsPayout);\r\n        totalWithdrawn = totalWithdrawn.add(eggsPayout);\r\n    }\r\n\r\n    /** Buy Miners with BUSD **/\r\n    function hireMiners(address ref, uint256 amount) public payable {\r\n        require(contractStarted, 'Contract not started yet.');\r\n        User storage user = users[msg.sender];\r\n        require(amount >= MIN_INVEST_LIMIT, 'Mininum investment not met.');\r\n        require(user.initialDeposit.add(amount) <= WALLET_DEPOSIT_LIMIT, 'Max deposit limit reached.');\r\n        BUSDToken.transferFrom(address(msg.sender), address(this), amount);\r\n        uint256 eggsBought = calculateEggBuy(amount, BUSDToken.balanceOf(address(this)).sub(amount));\r\n        user.userDeposit = user.userDeposit.add(amount);\r\n        user.initialDeposit = user.initialDeposit.add(amount);\r\n        user.claimedEggs = user.claimedEggs.add(eggsBought);\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (ref != msg.sender) {\r\n                user.referrer = ref;\r\n            }\r\n\r\n            address upline1 = user.referrer;\r\n            if (upline1 != address(0)) {\r\n                users[upline1].referralsCount = users[upline1].referralsCount.add(1);\r\n            }\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            if (upline != address(0)) {\r\n                uint256 refRewards = amount.mul(REFERRAL).div(PERCENTS_DIVIDER);\r\n                BUSDToken.transfer(address(upline), refRewards);\r\n                users[upline].referralEggRewards = users[upline].referralEggRewards.add(refRewards);\r\n                totalRefBonus = totalRefBonus.add(refRewards);\r\n            }\r\n        }\r\n\r\n        uint256 eggsPayout = payFees(amount);\r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 eggsForCompound = eggsUsed;\r\n\r\n        user.miners = user.miners.add(eggsForCompound.div(EGGS_TO_HIRE_1MINERS));\r\n        user.claimedEggs = 0;\r\n        user.lastHatch = block.timestamp;\r\n\r\n        marketEggs = marketEggs.add(eggsUsed.div(MARKET_EGGS_DIVISOR));\r\n\r\n        totalStaked = totalStaked.add(amount.sub(eggsPayout));\r\n        totalDeposits = totalDeposits.add(1);\r\n    }\r\n\r\n    function payFees(uint256 eggValue) internal returns (uint256) {\r\n        uint256 devtax = eggValue.mul(DEV).div(PERCENTS_DIVIDER);\r\n        uint256 teamfee = eggValue.mul(TEAM).div(PERCENTS_DIVIDER);\r\n        uint256 poolfee = eggValue.mul(POOL).div(PERCENTS_DIVIDER);\r\n\r\n        BUSDToken.transfer(dev, devtax);\r\n        BUSDToken.transfer(team, teamfee);\r\n        BUSDToken.transfer(pool, poolfee);\r\n        return devtax.add(teamfee).add(poolfee);\r\n    }\r\n\r\n    function getUserInfo(address _adr)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _initialDeposit,\r\n            uint256 _userDeposit,\r\n            uint256 _miners,\r\n            uint256 _claimedEggs,\r\n            uint256 _lastHatch,\r\n            address _referrer,\r\n            uint256 _referrals,\r\n            uint256 _totalWithdrawn,\r\n            uint256 _referralEggRewards,\r\n            uint256 _dailyCompoundBonus,\r\n            uint256 _minerCompoundCount,\r\n            uint256 _lastWithdrawTime\r\n        )\r\n    {\r\n        _initialDeposit = users[_adr].initialDeposit;\r\n        _userDeposit = users[_adr].userDeposit;\r\n        _miners = users[_adr].miners;\r\n        _claimedEggs = users[_adr].claimedEggs;\r\n        _lastHatch = users[_adr].lastHatch;\r\n        _referrer = users[_adr].referrer;\r\n        _referrals = users[_adr].referralsCount;\r\n        _totalWithdrawn = users[_adr].totalWithdrawn;\r\n        _referralEggRewards = users[_adr].referralEggRewards;\r\n        _dailyCompoundBonus = users[_adr].dailyCompoundBonus;\r\n        _minerCompoundCount = users[_adr].minerCompoundCount;\r\n        _lastWithdrawTime = users[_adr].lastWithdrawTime;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getAvailableEarnings(address _adr) public view returns (uint256) {\r\n        uint256 userEggs = users[_adr].claimedEggs.add(getEggsSinceLastHatch(_adr));\r\n        return calculateEggSell(userEggs);\r\n    }\r\n\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) public view returns (uint256) {\r\n        return\r\n            SafeMath.div(\r\n                SafeMath.mul(PSN, bs),\r\n                SafeMath.add(PSNH, SafeMath.div(SafeMath.add(SafeMath.mul(PSN, rs), SafeMath.mul(PSNH, rt)), rt))\r\n            );\r\n    }\r\n\r\n    function calculateEggSell(uint256 eggs) public view returns (uint256) {\r\n        return calculateTrade(eggs, marketEggs, getBalance());\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth, uint256 contractBalance) public view returns (uint256) {\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n\r\n    function calculateEggBuySimple(uint256 eth) public view returns (uint256) {\r\n        return calculateEggBuy(eth, getBalance());\r\n    }\r\n\r\n    /** How many miners and eggs per day user will recieve based on BUSD deposit **/\r\n    function getEggsYield(uint256 amount) public view returns (uint256, uint256) {\r\n        uint256 eggsAmount = calculateEggBuy(amount, getBalance().add(amount).sub(amount));\r\n        uint256 miners = eggsAmount.div(EGGS_TO_HIRE_1MINERS);\r\n        uint256 day = 1 days;\r\n        uint256 eggsPerDay = day.mul(miners);\r\n        uint256 earningsPerDay = calculateEggSellForYield(eggsPerDay, amount);\r\n        return (miners, earningsPerDay);\r\n    }\r\n\r\n    function calculateEggSellForYield(uint256 eggs, uint256 amount) public view returns (uint256) {\r\n        return calculateTrade(eggs, marketEggs, getBalance().add(amount));\r\n    }\r\n\r\n    function getSiteInfo()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _totalStaked,\r\n            uint256 _totalDeposits,\r\n            uint256 _totalCompound,\r\n            uint256 _totalRefBonus\r\n        )\r\n    {\r\n        return (totalStaked, totalDeposits, totalCompound, totalRefBonus);\r\n    }\r\n\r\n    function getMyMiners(address adr) public view returns (uint256) {\r\n        return users[adr].miners;\r\n    }\r\n\r\n    function getMyEggs() public view returns (uint256) {\r\n        return users[msg.sender].claimedEggs.add(getEggsSinceLastHatch(msg.sender));\r\n    }\r\n\r\n    function getEggsSinceLastHatch(address adr) public view returns (uint256) {\r\n        uint256 secondsSinceLastHatch = block.timestamp.sub(users[adr].lastHatch);\r\n        // get min time.\r\n        uint256 cutoffTime = min(secondsSinceLastHatch, CUTOFF_STEP);\r\n        uint256 secondsPassed = min(EGGS_TO_HIRE_1MINERS, cutoffTime);\r\n\r\n        uint256 _miners = users[adr].miners;\r\n        uint256 boostedMiners = getBoostedMiners(levelMap[adr], _miners);\r\n        return secondsPassed.mul(users[adr].miners.add(boostedMiners));\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    // BAVC amount for a given day\r\n    function getAmountForDay(uint256 _day) public pure returns (uint256) {\r\n        uint256 amount = 3000000 ether;\r\n        if (_day < 1) {\r\n            return amount;\r\n        }\r\n        for (uint256 i = 0; i < _day; i++) {\r\n            amount = amount.mul(995).div(1000);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function getBoostedMiners(uint256 level, uint256 originalMiners) public pure returns (uint256) {\r\n        uint256 baseBoost = originalMiners.mul(9375).div(75000);\r\n        if (level == 0) {\r\n            return 0;\r\n        } else {\r\n            return level.mul(baseBoost);\r\n        }\r\n    }\r\n\r\n    /* Get avc amount needed to reach each level */\r\n    function getBAVCForLevelsList() public view returns (uint256[8] memory) {\r\n        uint256 currentDay = avarice._clcDay();\r\n        uint256 previousAVCAmount = getAmountForDay(currentDay.sub(1));\r\n        uint256 previousBUSDAmount = avarice.lobbyEntry(currentDay.sub(1));\r\n        uint256 AVCPerBUSD = previousAVCAmount.mul(1e18).div(previousBUSDAmount);\r\n        return [\r\n            AVCPerBUSD.mul(30),\r\n            AVCPerBUSD.mul(75),\r\n            AVCPerBUSD.mul(150),\r\n            AVCPerBUSD.mul(240),\r\n            AVCPerBUSD.mul(375),\r\n            AVCPerBUSD.mul(525),\r\n            AVCPerBUSD.mul(750),\r\n            AVCPerBUSD.mul(1050)\r\n        ];\r\n    }\r\n\r\n    function setUserLevel(address adr, uint256 _userStakedAmount) internal {\r\n        uint256[8] memory _avcList = getBAVCForLevelsList();\r\n        if (_userStakedAmount < _avcList[0]) {\r\n            levelMap[adr] = 0;\r\n        } else if (_avcList[0] <= _userStakedAmount && _userStakedAmount < _avcList[1]) {\r\n            levelMap[adr] = 1;\r\n        } else if (_avcList[1] <= _userStakedAmount && _userStakedAmount < _avcList[2]) {\r\n            levelMap[adr] = 2;\r\n        } else if (_avcList[2] <= _userStakedAmount && _userStakedAmount < _avcList[3]) {\r\n            levelMap[adr] = 3;\r\n        } else if (_avcList[3] <= _userStakedAmount && _userStakedAmount < _avcList[4]) {\r\n            levelMap[adr] = 4;\r\n        } else if (_avcList[4] <= _userStakedAmount && _userStakedAmount < _avcList[5]) {\r\n            levelMap[adr] = 5;\r\n        } else if (_avcList[5] <= _userStakedAmount && _userStakedAmount < _avcList[6]) {\r\n            levelMap[adr] = 6;\r\n        } else if (_avcList[6] <= _userStakedAmount && _userStakedAmount < _avcList[7]) {\r\n            levelMap[adr] = 7;\r\n        } else {\r\n            levelMap[adr] = 8;\r\n        }\r\n    }\r\n\r\n    function stakeBAVC(uint256 _sAmount) public {\r\n        require(_sAmount > 0, 'Stake amount can not be empty!');\r\n        require(users[msg.sender].miners > 0, 'Miners can not be empty!');\r\n\r\n        hireMoreMiners(true);\r\n        bavcToken.transferFrom(address(msg.sender), address(this), _sAmount);\r\n        stakeAmount[msg.sender] = stakeAmount[msg.sender].add(_sAmount);\r\n        setUserLevel(msg.sender, stakeAmount[msg.sender]);\r\n        totalStakedAVC = totalStakedAVC.add(_sAmount);\r\n    }\r\n\r\n    function unstakeBAVC(uint256 _uAmount) public {\r\n        require(_uAmount >= stakeAmount[msg.sender], 'Unstake amount can not be greater than staked amount!');\r\n\r\n        hireMoreMiners(true);\r\n        bavcToken.transfer(msg.sender, _uAmount);\r\n        stakeAmount[msg.sender] = stakeAmount[msg.sender].sub(_uAmount);\r\n        setUserLevel(msg.sender, stakeAmount[msg.sender]);\r\n        totalStakedAVC = totalStakedAVC.sub(_uAmount);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IAVARICE {\r\n    function _clcDay() external view returns (uint256);\r\n\r\n    function lobbyEntry(uint256) external view returns (uint256); //BUSD amount for a given day\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_team\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AVARICE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSDToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS_MAX_TIMES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_FOR_NO_TAX_WITHDRAWAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTOFF_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EGGS_TO_HIRE_1MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_EGGS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVEST_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avarice\",\"outputs\":[{\"internalType\":\"contract IAVARICE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bavcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateEggSellForYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getAmountForDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBAVCForLevelsList\",\"outputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalMiners\",\"type\":\"uint256\"}],\"name\":\"getBoostedMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEggsYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minerCompoundCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastWithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hireMiners\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"hireMoreMiners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"levelMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sAmount\",\"type\":\"uint256\"}],\"name\":\"stakeBAVC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAVC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uAmount\",\"type\":\"uint256\"}],\"name\":\"unstakeBAVC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minerCompoundCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AvariceBUSDMiner", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000068d433d8a9ce6e283701ca358c00794cb69c75090000000000000000000000006a7ad501f8df95147a14bc38073e973a05881f3e0000000000000000000000005900260d5e7d1176b0b70f603198bdcc972eb376", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://606047102e93e74316ab235fff0e6b3c6ca00657c6f614c164733dcda0c6dd33"}