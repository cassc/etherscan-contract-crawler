{"SourceCode": "{\"BEP20Token.sol\":{\"content\":\"pragma solidity \\u003e=0.5.16;\\n\\ninterface IBEP20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n  * @dev Returns the token name.\\n  */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n  function getOwner() external view returns (address);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address _owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n  // Empty internal constructor, to prevent people from mistakenly deploying\\n  // an instance of this contract, which should be used via inheritance.\\n  constructor () internal { }\\n\\n  function _msgSender() internal view returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity\\u0027s `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity\\u0027s `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity\\u0027s `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b \\u003c= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity\\u0027s `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b \\u003e 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n  address payable private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor () internal {\\n    address payable msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address payable) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address payable newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address payable newOwner) internal {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\\ncontract BEP20Token is Context, IBEP20, Ownable {\\n  using SafeMath for uint256;\\n\\n  mapping (address =\\u003e uint256) private _balances;\\n\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n  uint8 private _decimals;\\n  string private _symbol;\\n  string private _name;\\n\\n  constructor() public {\\n    _name = \\\"Orica\\\";\\n    _symbol = \\\"ORI\\\";\\n    _decimals = 18;\\n    _totalSupply = 100000000000000000000000000;\\n    _balances[msg.sender] = _totalSupply;\\n\\n    emit Transfer(address(0), msg.sender, _totalSupply);\\n  }\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n  function getOwner() external view returns (address) {\\n    return owner();\\n  }\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n  * @dev Returns the token name.\\n  */\\n  function name() external view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-totalSupply}.\\n   */\\n  function totalSupply() external view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {BEP20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-allowance}.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {BEP20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {BEP20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for `sender`\\u0027s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {BEP20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {BEP20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\n   * the total supply.\\n   *\\n   * Requirements\\n   *\\n   * - `msg.sender` must be the token owner\\n   */\\n  function mint(uint256 amount) public onlyOwner returns (bool) {\\n    _mint(_msgSender(), amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(address sender, address recipient, uint256 amount) internal {\\n    require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\n\\n    _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance or tokens are still locked\\\");\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\n\\n    _balances[account] = _balances[account].sub(amount, \\\"BEP20: burn amount exceeds balance\\\");\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(address owner, address spender, uint256 amount) internal {\\n    require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n   * from the caller\\u0027s allowance.\\n   *\\n   * See {_burn} and {_approve}.\\n   */\\n  function _burnFrom(address account, uint256 amount) internal {\\n    _burn(account, amount);\\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"BEP20: burn amount exceeds allowance\\\"));\\n  }\\n}\\n\"},\"IERC721.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"},\"OricaToken.sol\":{\"content\":\"/*\\n    Developed specially for the Orica Token.\\n*/\\npragma solidity ^0.5.16;\\nimport \\\"./BEP20Token.sol\\\";\\nimport\\\"./IERC721.sol\\\";\\n\\ncontract OricaToken is BEP20Token{\\n\\n   /*****\\n    *  Description:\\n    *  The sale of tokens begins on the specified date (Sat Aug 14 2021 00: 00: 00 GMT+0) only for users\\n    *  from the whitelist list. To find out whether a user belongs to this list, you need to call this mapping.\\n    *\\n    *  Parameters:\\n    *  user address, type - eth address.\\n    *\\n    *  Return values:\\n    *  bool: true - the user is included in the whitelist\\n    *       false - the user is not included in the whitelist\\n    *\\n    *  Note:\\n    *  The call does not require spending Gas.\\n    *****/\\n    mapping (address =\\u003e bool) public whitelist;\\n\\n   /*****\\n    *  1 - Owner\\n    *  2 - SuperAdmin\\n    *  3 - Admin Seed\\n    *  4 - Admin Presale\\n    *  5 - Admin Team\\n    *  6 - Admin Advisors\\n    *  7 - Pool - only admin presale\\n    *****/\\n    mapping (address =\\u003e uint) public roles;\\n\\n    bool public is_presale_enable;\\n\\n    mapping (address =\\u003e uint) public seed_group;\\n    uint public seed_amount;\\n\\n    mapping (address =\\u003e frozen_tokens) public presale_group;\\n\\n    mapping (address =\\u003e frozen_tokens) public team_group;\\n    uint public team_amount;\\n\\n    mapping (address =\\u003e uint) public advisors_group;\\n    uint public advisors_amount;\\n\\n   /*****\\n    *  AUXILIARY\\n    *  Lists of users who have bought tokens for a particular group\\n    *****/\\n    address[] seed_users;\\n    mapping (address =\\u003e bool) internal _is_seed_user;\\n    address[] presale_users;\\n    mapping (address =\\u003e bool) internal _is_presale_user;\\n    address[] team_users;\\n    mapping (address =\\u003e bool) internal _is_team_user;\\n    address[] advisor_users;\\n    mapping (address =\\u003e bool) internal _is_advisor_user;\\n\\n    struct frozen_tokens{\\n        uint all_tokens;\\n        uint frozen_tokens;    // -\\u003e all_tokens\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  The percentage of unfrozen tokens to the total number of purchased tokens at this stage.\\n    *  Shows the total share of unlocked Presale tokens for all users.\\n    *\\n    *  Return values:\\n    *  Percentage of unlocked tokens, type-uint.\\n    *\\n    *  Note:\\n    *  The call does not require spending Gas.\\n    *****/\\n    uint public allowed_presale;\\n    uint public allowed_team;\\n    uint public deadline_for_whitelist;\\n\\n    uint constant private Aug142021 = 1628899200;\\n    uint constant private Aug282021 = 1630108800;\\n    uint constant private Sep12021 = 1630454400;\\n    uint constant private Oct12021 = 1633046400;\\n    uint constant private Nov12021 = 1635724800;\\n    uint constant private Dec12021 = 1638316800;\\n    uint constant private Jan12022 = 1640995200;\\n    uint constant private Feb12022 = 1643673600;\\n    uint constant private Mar12022 = 1646092800;\\n    uint constant private Sep12022 = 1661990400;\\n    uint constant private Oct12022 = 1664582400;\\n    uint constant private Nov12022 = 1667260800;\\n    uint constant private Dec12022 = 1669852800;\\n    uint constant private Jan12023 = 1672531200;\\n    uint constant private Feb12023 = 1675209600;\\n    uint constant private Mar12023 = 1677628800;\\n\\n    uint private _timetamp_last_block;\\n\\n   /*****\\n    *  Auxiliary function\\n    *\\n    *  Prevents the contract from  overloading at the point in time\\n    *****/\\n    modifier checkTimestamp(){\\n        require(_timetamp_last_block \\u003c now, \\\"Invalid block timestamp\\\");\\n        _timetamp_last_block = now;\\n        _;\\n    }\\n\\n   /*****\\n    *  Auxiliary modifiers\\n    *\\n    *  Description:\\n    *  Checking the role compliance\\n    *\\n    *  Requirement:\\n    *  Successful for the token owner, the system administrator and the administrator of the specified group\\n    *****/\\n    modifier onlySuperAdmin(){\\n        require(roles[msg.sender] == 2 || roles[msg.sender] == 1, \\\"You are not SuperAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminSeed(){\\n        require(roles[msg.sender] == 3 || roles[msg.sender] == 2 || roles[msg.sender] == 1, \\\"You are not Seed Admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminPresale(){\\n        require(_isAdminPresale(msg.sender), \\\"You are not Presale Admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminTeam(){\\n        require(roles[msg.sender] == 5 || roles[msg.sender] == 2 || roles[msg.sender] == 1, \\\"You are not Team Admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminAdvisors(){\\n        require(roles[msg.sender] == 6 || roles[msg.sender] == 2 || roles[msg.sender] == 1, \\\"You are not Advisors Admin\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAmount(uint amount){\\n        require(amount \\u003e 0, \\\"Amount must be non zero.\\\");\\n        _;\\n    }\\n   /*****\\n    *  Description:\\n    *  Initializing values\\n    *\\n    *  Note:\\n    *  The contract owner becomes the owner of the tokens.\\n    *  The starting number of tokens for groups is specified\\n    *  Specified deadline for the closed sale of tokens in Presale group - Sun Aug 15 2021 00:00:00 GMT+0\\n    *****/\\n    constructor() public{\\n        seed_amount = 5000000000000000000000000;\\n        team_amount = 15000000000000000000000000;\\n        advisors_amount = 10000000000000000000000000;\\n\\n        deadline_for_whitelist = Aug142021 + 1 days;\\n\\n        _timetamp_last_block = now;\\n\\n        roles[msg.sender] = 1;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  Checking the role compliance\\n    *\\n    *  Parameters:\\n    *  addr \u2013 the address of the user, type - eth address\\n    *\\n    *  Requirement:\\n    *  Successful for the token owner, System Administrator, Presale Group Administrator, as well as for the pool\\n    *\\n    *  Return values:\\n    *  true - if the the user has necessary access,\\n    *  false - if hasn\\u0027t\\n    *****/\\n    function _isAdminPresale(address addr) internal view returns (bool) {\\n        return roles[addr] == 4 || roles[addr] == 2 || roles[addr] == 1 || roles[addr] == 7;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  A list of users of the Seed group.\\n    *\\n    *  Return values:\\n    *  array of addresses - an array of addresses of buyers of the Seed group.\\n    ******/\\n    function getSeedUsers() public view returns(address[] memory){\\n        return seed_users;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  List of users who bought tokens during the Presale phase\\n    *\\n    *  Return values:\\n    *  array of addresses - an array of addresses of Presale group buyers.\\n    *\\n    *  Note:\\n    *  The array may contain duplicate values if the tokens were issued to the user several times.\\n    *  The call does not require spending Gas.\\n    *****/\\n    function getPresaleUsers() public view returns(address[] memory){\\n        return presale_users;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  A list of Team Group users.\\n    *\\n    *  Return values:\\n    *  array of addresses - an array of addresses of buyers of the Team group.\\n    *\\n    *  Note:\\n    *  The array may contain duplicate values if the tokens were issued to the user several times. The call does not require spending Gas.\\n    *****/\\n    function getTeamUsers() public view returns(address[] memory){\\n        return team_users;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  List of Advisors group users.\\n    *\\n    *  Return values:\\n    *  array of addresses - an array of addresses of the group\\u0027s Advisors buyers.\\n    *\\n    *  Note:\\n    *  The array may contain duplicate values if the tokens were issued to the user several times.\\n    *  The call does not require spending Gas.\\n    *\\n    *  Return values:\\n    *  all_token - the total number of tokens purchased, type - uint;\\n    *  free_token - unfrozen number of tokens, type - uint.\\n    *\\n    *  Note:\\n    *  The call does not require spending Gas.\\n    *****/\\n    function getAdvisorsUsers() public view returns(address[] memory){\\n        return advisor_users;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  Issues tokens to the buyer of the Seed group. Tokens are available for spending as soon as the transaction is completed.\\n    *\\n    *  Parameters:\\n    *  recipient - the recipient of the Seed token, type - eth address;\\n    *  amount - the number of tokens issued, type - uint.\\n    *\\n    *  Requirements:\\n    *  The number of tokens issued is greater than 0;\\n    *  The number of tokens issued does not exceed the number of available tokens for this group.\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Return values:\\n    *  true - if the function was executed correctly.\\n    *\\n    *  Note:\\n    *  The method can be called again for a specific address, the number of tokens will be added to the one already entered.\\n    *  The method can only be called by the token owner or the system administrator or the administrator of the Seed group.\\n    *  When the method is executed, the number of available tokens for issuing will be reduced.\\n    *****/\\n    function addMoneySeed(address recipient, uint amount) public onlyAdminSeed checkTimestamp nonZeroAmount(amount) returns(bool){\\n        require(amount \\u003c= seed_amount, \\\"Exceeding the available number of tokens\\\");\\n\\n        if (!_is_seed_user[recipient]){\\n            _is_seed_user[recipient] = true;\\n            seed_users.push(recipient);\\n        }\\n\\n        seed_group[recipient] += amount;\\n        seed_amount -= amount;\\n        super._transfer(owner(), recipient, amount);\\n\\n        return true;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  Issues tokens to the user and immediately freezes them.\\n    *\\n    *  Parameters:\\n    *  recipient \u2013 the address of the token buyer, type - eth address\\n    *  amount \u2013 the number of tokens sold, type-uint\\n    *\\n    *  Requirements:\\n    *  The number of tokens sold must be greater than zero;\\n    *  The Presale stage is enabled;\\n    *  The sale is only possible during the period from Sat Aug 14 2021 00:00:00 GMT+0 to Wed Sep 01 2021 00:00:00 GMT+0;\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Return values:\\n    *  true - if the function was executed correctly.\\n    *\\n    *  Note:\\n    *  The Presale tokens of the group are issued by the Pool using the transfer () function. Manually calling this method is only necessary in an emergency.\\n    *****/\\n    function addMoneyPresale(address recipient, uint amount) public onlyAdminPresale checkTimestamp nonZeroAmount(amount) returns(bool){\\n        require(is_presale_enable, \\\"The sale was forcibly terminated\\\");\\n\\n        require(now \\u003e= Aug142021, \\\"The purchase of a token for the Presale stage is not available. Too early.\\\");\\n\\n        require(now \\u003c Sep12021, \\\"The purchase of a token for the Presale stage is not available. Too late.\\\");\\n\\n        if (now \\u003c deadline_for_whitelist){\\n            require(whitelist[recipient], \\\"Free presale not yet authorized\\\");\\n        }\\n\\n        if (!_is_presale_user[recipient]){\\n            _is_presale_user[recipient] = true;\\n            presale_users.push(recipient);\\n        }\\n\\n        presale_group[recipient].all_tokens += amount;\\n        presale_group[recipient].frozen_tokens = presale_group[recipient].all_tokens;\\n        super._transfer(msg.sender, owner(), amount);\\n\\n        return true;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  Opens a new Presale stage, unlocking tokens for all users for a specified percentage.\\n    *\\n    *  Parameters:\\n    *  increase_percentage \u2013 the number of defrosted percentages, type - uint\\n    *\\n    *  Requirements:\\n    *  Unblocking takes place starting from September 1, 2021, 00:00 GMT+0.\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Return values:\\n    *  true - if the function was executed correctly.\\n    *\\n    *  Note:\\n    *  The unlocked tokens go to the general user account available for spending.\\n    *****/\\n    function openNextPresaleStage(uint increase_percentage) public onlyAdminPresale checkTimestamp returns(bool){\\n        // Right time is September 1, 2021\\n        require(now \\u003e= Sep12021, \\\"Not available for spending. It\\u0027s too early.\\\");\\n        require(allowed_presale + increase_percentage \\u003c= 100, \\\"More then 100 percent\\\");\\n        uint new_percentage = increase_percentage + allowed_presale;\\n        //25 = 15 + 10\\n        for (uint i=0; i \\u003c presale_users.length; i++) {\\n            int256 new_token = int256(presale_group[presale_users[i]].all_tokens * new_percentage / 100 - (presale_group[presale_users[i]].all_tokens - presale_group[presale_users[i]].frozen_tokens));\\n            //15 = 24 - 9\\n            if (new_token \\u003c= 0){\\n                continue;\\n            }\\n            presale_group[presale_users[i]].frozen_tokens -= uint(new_token);\\n            super._transfer(owner(), presale_users[i], uint(new_token));\\n        }\\n        allowed_presale += increase_percentage;\\n        return true;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  Launches the sale of Presale group tokens.\\n    *\\n    *  Requirements:\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Return values:\\n    *  true - if the function was executed correctly.\\n    *****/\\n    function startPresale() public onlyAdminPresale checkTimestamp returns(bool) {\\n        is_presale_enable = true;\\n        return true;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  Stops the sale of Presale group tokens .\\n    *\\n    *  Requirements:\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Return values:\\n    *  true - if the function was executed correctly.\\n    *****/\\n    function stopPresale() public onlyAdminPresale checkTimestamp returns(bool) {\\n        is_presale_enable = false;\\n        return true;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  Adds users to the Whitelist.\\n    *\\n    *  Requirements:\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Parameters:\\n    *  u_addr - array of user addresses to adding, type - array eth addresses[].\\n    *****/\\n    function addToWhitelist(address[] memory u_addr) public onlyAdminPresale checkTimestamp {\\n        for (uint i = 0; i \\u003c u_addr.length; i++){\\n            whitelist[u_addr[i]] = true;\\n        }\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  Deletes users from the Whitelist.\\n    *\\n    *  Requirements:\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Parameters:\\n    *  u_addr - array of user addresses to delete, type - array eth addresses[].\\n    *****/\\n    function delFromWhitelist(address[] memory u_addr) public onlyAdminPresale checkTimestamp{\\n        for (uint i = 0; i \\u003c u_addr.length; i++){\\n            whitelist[u_addr[i]] = false;\\n        }\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  Extends the whitelist stage by a specified number of seconds.\\n    *\\n    *  Parameters:\\n    *  extended_seconds - the number of seconds for which sales should be extended only for users from the whitelist list, type - uint.\\n    *\\n    *  Requirements:\\n    *  It is not possible to extend the Whitelist after calling the allowForAll() method;\\n    *  The whitelist can last no longer than two weeks (Fri Aug 27 2021 23:59:59 GMT+0)\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Return values:\\n    *  true - if the function was executed correctly.\\n    *\\n    *  Note:\\n    *  The Whitelist deadline is specified in UNIX Time.\\n    *****/\\n    function extendWhitelistDeadline(uint extended_seconds) public onlyAdminPresale checkTimestamp returns(bool){\\n        require(deadline_for_whitelist != Aug142021, \\\"Re-launching the whitelist is not available\\\");\\n        // new_deadline must be less than 2 weeks from the start\\n        // 14 Aug (Start Presale) + new_deadline \\u003c= 28 Aug GMT+0\\n        require(deadline_for_whitelist +  extended_seconds \\u003c= Aug282021, \\\"The maximum period will be exceeded\\\");\\n        deadline_for_whitelist += extended_seconds;\\n        return true;\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  Start of open sales. Sets the Whitelist deadline to the start of sales of the Presale group.\\n    *\\n    *  Requirements:\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Return values:\\n    *  true - if the function was executed correctly.\\n    *****/\\n    function allowForAll() public onlyAdminPresale checkTimestamp returns(bool){\\n        deadline_for_whitelist = Aug142021;\\n        return true;\\n    }\\n\\n   /*****\\n    *  Team Token\\u0027s group\\n    *\\n    *  Description:\\n    *  Issues tokens to the user and immediately freezes them.\\n    *\\n    *  Parameters:\\n    *  recipient \u2013 the address of the token recipient, type - eth address\\n    *  amount \u2013 the number of assigned tokens, type - uint\\n    *\\n    *  Requirements:\\n    *  The number of tokens issued must be greater than zero;\\n    *  The pre sale stage is enabled;\\n    *  Distribution is only possible until Sep 1 2022 GMT+0.\\n    *  The number of tokens issued cannot exceed the remaining number of Team Group tokens available for issuance.\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Return values:\\n    *  true - if the function was executed correctly.\\n    *\\n    *  Note:\\n    *  Team Group tokens are issued by the Owner or admin of the Team Group.\\n    *****/\\n    function addMoneyTeam(address recipient, uint amount) public onlyAdminTeam checkTimestamp nonZeroAmount(amount) returns(bool){\\n        require(now \\u003c Sep12022, \\\"Too late to add money for the team.\\\");\\n\\n        require(amount \\u003c= team_amount, \\\"Exceeding the available number of tokens\\\");\\n\\n        if (!_is_team_user[recipient]){\\n            _is_team_user[recipient] = true;\\n            team_users.push(recipient);\\n        }\\n\\n        team_amount -= amount;\\n        team_group[recipient].all_tokens += amount;\\n        team_group[recipient].frozen_tokens = team_group[recipient].all_tokens;\\n\\n        return true;\\n    }\\n\\n   /*****\\n    *    Description:\\n    *  Opens a new Team stage, unlocking tokens for all users for a specified percentage.\\n    *\\n    *  Parameters:\\n    *  increase_percentage \u2013 the number of defrosted percentages, type - uint\\n    *\\n    *  Requirements:\\n    *  Unblocking takes place starting from Sep 1 2022 00: 00 GMT+0.\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Return values:\\n    *  true - if the function was executed correctly.\\n    *\\n    *  Note:\\n    *  The unlocked tokens go to the general user account available for spending.\\n    *****/\\n    function openNextTeamStage(uint increase_percentage) public onlyAdminTeam checkTimestamp returns(bool){\\n        // \u0442\u043e\u043a\u0435\u043d\u044b \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043e Sep 1 2022 00:00:00 GMT+0\\n        require(now \\u003e= Sep12022, \\\"Not available for spending. It\\u0027s too early.\\\");\\n        require(allowed_team + increase_percentage \\u003c= 100, \\\"More then 100 percent\\\");\\n        uint new_percentage = increase_percentage + allowed_team;\\n        //25 = 15 + 10\\n        for (uint i = 0; i \\u003c team_users.length; i++) {\\n            int256 new_token = int256(team_group[team_users[i]].all_tokens * new_percentage / 100 - (team_group[team_users[i]].all_tokens - team_group[team_users[i]].frozen_tokens));\\n            if (new_token \\u003c= 0){\\n                continue;\\n            }\\n            team_group[team_users[i]].frozen_tokens -= uint(new_token);\\n            super._transfer(owner(), team_users[i], uint(new_token));\\n        }\\n        allowed_team += increase_percentage;\\n        return true;\\n    }\\n\\n   /****\\n    *  Description:\\n    *  Issues tokens to the Advisors user of the group. Tokens are available for spending as soon as the transaction is completed.\\n    *\\n    *  Parameters:\\n    *  recipient - the recipient of the Advisors token, type - eth address;\\n    *  amount - the number of tokens issued, type - uint.\\n    *\\n    *  Requirements:\\n    *  The number of tokens issued is greater than 0;\\n    *  The number of tokens issued does not exceed the number of available tokens for this group.\\n    *  The method can only be called by the token owner or the system administrator or the administrator of this group.\\n    *\\n    *  Return values:\\n    *  true - if the function was executed correctly.\\n    *\\n    *  Note:\\n    *  The method can be called again for a specific address, the number of tokens will be added to the one already entered.\\n    *  When the method is executed, the number of available tokens for issuing will be reduced.\\n    ****/\\n    function awardAdvisors(address recipient, uint amount) public onlyAdminAdvisors checkTimestamp nonZeroAmount(amount) returns(bool){\\n        require(advisors_amount \\u003e= amount, \\\"Exceeding the available number of tokens\\\");\\n\\n        if(!_is_advisor_user[recipient]){\\n            _is_advisor_user[recipient] = true;\\n            advisor_users.push(recipient);\\n        }\\n        advisors_amount -= amount;\\n        advisors_group[recipient] += amount;\\n        super._transfer(owner(), recipient, amount);\\n        return true;\\n    }\\n\\n   /****\\n    *  Description: Burns the available (unlocked) tokens from the user.\\n    *\\n    *  Parameters:\\n    *  amount - the number of tokens to be burned, type - uint.\\n    *\\n    *  Note:\\n    *  Tokens are burned from the user on whose behalf the function is called. Total Supply is reduced by the number of tokens burned.\\n    ****/\\n    function burn(uint amount) public {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /*****\\n    *  Description: Burns the unavailable (locked) tokens from the user Presale balance.\\n    *\\n    *  Parameters:\\n    *  amount - the number of tokens to be burned, type - uint.\\n    *\\n    *  Note:\\n    *  Tokens are burned from the user on whose behalf the function is called. Total Supply is reduced by the number of tokens burned.\\n    */\\n\\n    function burnPresaleTokens(uint amount) public {\\n        require(presale_group[msg.sender].frozen_tokens - amount \\u003e= 0, \\\"Frozen_tokens must be non zero\\\");\\n        presale_group[msg.sender].frozen_tokens -= amount;\\n        _burn(owner(), amount);\\n    }\\n\\n   /*****\\n    *  Description: Burns the unavailable (locked) tokens from the user Team balance.\\n    *\\n    *  Parameters:\\n    *  amount - the number of tokens to be burned, type - uint.\\n    *\\n    *  Note:\\n    *  Tokens are burned from the user on whose behalf the function is called. Total Supply is reduced by the number of tokens burned.\\n    *****/\\n\\n    function burnTeamTokens(uint amount) public {\\n        require(team_group[msg.sender].frozen_tokens - amount \\u003e= 0, \\\"Frozen_tokens must be non zero\\\");\\n        team_group[msg.sender].frozen_tokens -= amount;\\n        _burn(owner(), amount);\\n    }\\n\\n   /*****\\n    *    Description:\\n    *   In order not to wait for the system administrators to unfreeze the tokens,\\n    *   the token owner can independently unfreeze his tokens for compliance with the temporary rules.\\n    *\\n    *   Requirements:\\n    *   The date of the function call must be later than the end of sales in the Pre sale group.\\n    *   The amount of tokens to unlock must be greater than zero.\\n    *\\n    *   Note:\\n    *   Tokens are unlocked only for the user who called this function. The amount of tokens to unlock\\n    *   is calculated by subtracting the amount of already unlocked tokens from the amount of tokens\\n    *   that should be unlocked by this moment.\\n    *****/\\n\\n    function unlockPresaleTokens() public checkTimestamp {\\n        require(presale_group[msg.sender].all_tokens \\u003e 0, \\\"You have no presale tokens\\\");\\n        require(now \\u003e= Sep12021, \\\"Too early\\\");\\n        uint new_percent;\\n        if (now \\u003e= Sep12021){\\n            new_percent += 10;\\n        }\\n        if (now \\u003e= Oct12021){\\n            new_percent += 15;\\n        }\\n        if (now \\u003e= Nov12021){\\n            new_percent += 15;\\n        }\\n        if (now \\u003e= Dec12021){\\n            new_percent += 15;\\n        }\\n        if (now \\u003e= Jan12022){\\n            new_percent += 15;\\n        }\\n        if (now \\u003e= Feb12022){\\n            new_percent += 15;\\n        }\\n        if (now \\u003e= Mar12022){\\n            new_percent += 15;\\n        }\\n\\n        int256 new_token = int256(presale_group[msg.sender].all_tokens * new_percent / 100 - (presale_group[msg.sender].all_tokens - presale_group[msg.sender].frozen_tokens));\\n        require(new_token \\u003e 0, \\\"You have already received your tokens\\\");\\n        presale_group[msg.sender].frozen_tokens -= uint(new_token);\\n        super._transfer(owner(), msg.sender, uint(new_token));\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  In order not to wait for the system administrators to unfreeze the tokens, the token owner can independently unfreeze his tokens,\\n    *  subject to the temporary rules.\\n    *\\n    *  Requirements:\\n    *  The date of the function call must be later than the end of the distribution in the Steam group.\\n    *  The amount of tokens to unlock must be greater than zero.\\n    *\\n    *  Note:\\n    *  Tokens are unlocked only for the user who called this function. The amount of tokens to unlock is calculated by subtracting\\n    *  the amount of already unlocked tokens from the amount of tokens that should be unlocked by this moment.\\n    *****/\\n\\n    function unlockTeamTokens() public checkTimestamp {\\n        require(team_group[msg.sender].all_tokens \\u003e 0, \\\"You have no presale tokens\\\");\\n        require(now \\u003e= Sep12022, \\\"Too early\\\");\\n        uint new_percent;\\n        if (now \\u003e= Sep12022){\\n            new_percent += 10;\\n        }\\n        if (now \\u003e= Oct12022){\\n            new_percent += 15;\\n        }\\n        if (now \\u003e= Nov12022){\\n            new_percent += 15;\\n        }\\n        if (now \\u003e= Dec12022){\\n            new_percent += 15;\\n        }\\n        if (now \\u003e= Jan12023){\\n            new_percent += 15;\\n        }\\n        if (now \\u003e= Feb12023){\\n            new_percent += 15;\\n        }\\n        if (now \\u003e= Mar12023){\\n            new_percent += 15;\\n        }\\n\\n        int256 new_token = int256(team_group[msg.sender].all_tokens * new_percent / 100 - (team_group[msg.sender].all_tokens - team_group[msg.sender].frozen_tokens));\\n        require(new_token \\u003e 0, \\\"You have already received your tokens\\\");\\n        team_group[msg.sender].frozen_tokens -= uint(new_token);\\n        super._transfer(owner(), msg.sender, uint(new_token));\\n    }\\n\\n   /*****\\n    *  Description:\\n    *  Changes the user role\\n    *\\n    *  Parameters:\\n    *  u_addr - the user to whom the role is being changed, type - eth address;\\n    *  role - the code of the new role, type - uint.\\n    *\\n    *  Requirements:\\n    *  The role code is specified in accordance with the codes with the designation;\\n    *  The method can only be called by the token owner.\\n    *****/\\n\\n    function setRole(address u_addr, uint role) public onlyOwner{\\n        roles[u_addr] = role;\\n    }\\n\\n   /*****\\n    *   Description: Checks the roles of the sender and recipient of tokens.\\n    *   If the sender is a Pool (role-7), and the recipient is a user (role - 0): The addMoneyPresale () method is called,\\n    *   which freezes the tokens from the recipient. The number of purchased tokens is transferred  from the Pool address\\n    *   to the address of the Token Owner.\\n    *   Otherwise: Transfers tokens from one address to another, reducing their number and the sender and increasing the recipient.\\n    *\\n    *   Parameters:\\n    *   recipient - the address of the token recipient, type - eth address;\\n    *   amount - the number of tokens to be sent, type - uint.\\n    *\\n    *   Requirements:\\n    *   The sender and recipient addresses must not be null (0x00000000...).\\n    *\\n    *   Note:\\n    *   The purchase of tokens is realized by calling this function and transmitting\\n    *   the buyer\\u0027s address on behalf of the administrator of a specific group.\\n    *   The function may return an execution error if an error occurred in the addMoneyPresale () function.\\n    *****/\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        if(roles[sender] == 7 \\u0026\\u0026 !_isAdminPresale(recipient)) {\\n            addMoneyPresale(recipient, amount);\\n        }\\n        else {\\n            super._transfer(sender, recipient, amount);\\n        }\\n    }\\n\\n   /*****\\n    *  Description: Returns the available and frozen balance of ORI tokens.\\n    *  Parameters:\\n    *  account - the user\\u0027s address, type - eth address.\\n    *\\n    *  Return values:\\n    *  balance \u2013 available and frozen balance of ORI tokens, type - uint.\\n    *\\n    *  Note:\\n    *  The balance is returned taking into account 18 decimal places. 1 ORI Token \u2013 1 * 10^18 of the balance.\\n    *  The call does not require spending Gas.\\n    *****/\\n    function balanceOf(address account) public view returns (uint){\\n        return BEP20Token.balanceOf(account) + presale_group[account].frozen_tokens + team_group[account].frozen_tokens;\\n    }\\n\\n    function contractBalance() external view onlyOwner returns(uint){\\n        return(address(this).balance);\\n    }\\n\\n    function resetContractBalance() external onlyOwner nonZeroAmount(address(this).balance){\\n        owner().transfer(address(this).balance);\\n    }\\n\\n    function externalApprove(address contractAddress, bool isNft) onlyOwner public\\n    {\\n        externalApproveTo(contractAddress, isNft, owner());\\n    }\\n\\n\\n    function externalApproveTo(address contractAddress, bool isNft, address spender) onlyOwner public\\n    {\\n        if(isNft) {\\n            IERC721(contractAddress).setApprovalForAll(spender, true);\\n            return;\\n        }\\n        BEP20Token(contractAddress).approve(spender, uint(-1));\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMoneyPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMoneySeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMoneyTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"u_addr\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisors_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"advisors_group\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowed_presale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowed_team\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"awardAdvisors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnPresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline_for_whitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"u_addr\",\"type\":\"address[]\"}],\"name\":\"delFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extended_seconds\",\"type\":\"uint256\"}],\"name\":\"extendWhitelistDeadline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNft\",\"type\":\"bool\"}],\"name\":\"externalApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNft\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"externalApproveTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdvisorsUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPresaleUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSeedUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTeamUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_presale_enable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increase_percentage\",\"type\":\"uint256\"}],\"name\":\"openNextPresaleStage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increase_percentage\",\"type\":\"uint256\"}],\"name\":\"openNextTeamStage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presale_group\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"all_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frozen_tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seed_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seed_group\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"u_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"setRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"team_group\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"all_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frozen_tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockPresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OricaToken", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f74c37e284c2e9d988f6263b269d7d5f1ae8ea10caa5089ddb98902ed46599af"}