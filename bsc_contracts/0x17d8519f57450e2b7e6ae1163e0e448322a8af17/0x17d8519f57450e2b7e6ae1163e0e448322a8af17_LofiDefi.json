{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LOFIDEFI.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\ninterface IERC20 {\\r\\n\\tfunction totalSupply() external view returns (uint256);\\r\\n\\tfunction balanceOf(address account) external view returns (uint256);\\r\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\r\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\r\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n    uint256 private _status;\\r\\n    constructor () {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    modifier nonReentrant() {\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n        _status = _ENTERED;\\r\\n        _;\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a + b; require(c >= a, \\\"SafeMath: addition overflow\\\"); return c;}\\t\\r\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {return sub(a, b, \\\"SafeMath: subtraction overflow\\\");}\\r\\n\\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b <= a, errorMessage);uint256 c = a - b;return c;}\\r\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {if (a == 0) {return 0;}uint256 c = a * b;require(c / a == b, \\\"SafeMath: multiplication overflow\\\");return c;}\\r\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {return div(a, b, \\\"SafeMath: division by zero\\\");}\\r\\n\\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b > 0, errorMessage);uint256 c = a / b;return c;}\\r\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {return mod(a, b, \\\"SafeMath: modulo by zero\\\");}\\r\\n\\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b != 0, errorMessage);return a % b;}\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n\\tfunction _msgSender() internal view virtual returns (address) {return msg.sender;}\\r\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {this;return msg.data;}\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n\\t\\r\\n\\tfunction isContract(address account) internal view returns (bool) {\\r\\n\\t\\tbytes32 codehash;\\r\\n\\t\\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\r\\n\\t\\tassembly { codehash := extcodehash(account) }\\r\\n\\t\\treturn (codehash != accountHash && codehash != 0x0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction sendValue(address payable recipient, uint256 amount) internal {\\r\\n\\t\\trequire(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n\\t\\t(bool success, ) = recipient.call{ value: amount }(\\\"\\\"); \\r\\n\\t\\trequire(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n\\t  return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n\\t\\treturn _functionCallWithValue(target, data, 0, errorMessage);\\r\\n\\t}\\r\\n\\r\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n\\t\\trequire(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n\\t\\treturn _functionCallWithValue(target, data, value, errorMessage);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n\\t\\trequire(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls\\r\\n\\t\\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n\\t\\tif (success) {\\r\\n\\t\\t\\treturn returndata;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tif (returndata.length > 0) {\\r\\n\\t\\t\\t\\t// solhint-disable-next-line no-inline-assembly\\r\\n\\t\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\t\\tlet returndata_size := mload(returndata)\\r\\n\\t\\t\\t\\t\\trevert(add(32, returndata), returndata_size)\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\trevert(errorMessage);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n\\taddress private _owner;\\r\\n\\taddress private _previousOwner;\\r\\n\\tuint256 private _lockTime;\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\tconstructor () {\\r\\n\\t\\taddress msgSender = _msgSender();\\r\\n\\t\\t_owner = msgSender;\\r\\n\\t\\temit OwnershipTransferred(address(0), msgSender);\\r\\n\\t}\\r\\n\\tfunction owner() public view returns (address) {return _owner;}\\r\\n\\tmodifier onlyOwner() {require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");_;}\\r\\n\\tfunction renounceOwnership() public virtual onlyOwner {emit OwnershipTransferred(_owner, address(0)); _owner = address(0);}\\r\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\r\\n\\t\\t_owner = newOwner;\\r\\n\\t}\\r\\n\\tfunction geUnlockTime() public view returns (uint256) {return _lockTime;}\\r\\n\\tfunction lock(uint256 time) public virtual onlyOwner {\\r\\n\\t\\t_previousOwner = _owner;\\r\\n\\t\\t_owner = address(0);\\r\\n\\t\\t_lockTime = block.timestamp + time;\\r\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction unlock() public virtual {\\r\\n\\t\\trequire(_previousOwner == msg.sender, \\\"You don't have permission to unlock\\\");\\r\\n\\t\\trequire(block.timestamp > _lockTime , \\\"Contract is locked until 7 days\\\");\\r\\n\\t\\temit OwnershipTransferred(_owner, _previousOwner);\\r\\n\\t\\t_owner = _previousOwner;\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\tfunction feeTo() external view returns (address);\\r\\n\\tfunction feeToSetter() external view returns (address);\\r\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\tfunction allPairs(uint) external view returns (address pair);\\r\\n\\tfunction allPairsLength() external view returns (uint);\\r\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\tfunction setFeeTo(address) external;\\r\\n\\tfunction setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint value);\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint value);\\r\\n\\tfunction name() external pure returns (string memory);\\r\\n\\tfunction symbol() external pure returns (string memory);\\r\\n\\tfunction decimals() external pure returns (uint8);\\r\\n\\tfunction totalSupply() external view returns (uint);\\r\\n\\tfunction balanceOf(address owner) external view returns (uint);\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint);\\r\\n\\tfunction approve(address spender, uint value) external returns (bool);\\r\\n\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\tfunction nonces(address owner) external view returns (uint);\\r\\n\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\r\\n\\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n\\tevent Swap(address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to);\\r\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\tfunction factory() external view returns (address);\\r\\n\\tfunction token0() external view returns (address);\\r\\n\\tfunction token1() external view returns (address);\\r\\n\\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\tfunction price0CumulativeLast() external view returns (uint);\\r\\n\\tfunction price1CumulativeLast() external view returns (uint);\\r\\n\\tfunction kLast() external view returns (uint);\\r\\n\\tfunction mint(address to) external returns (uint liquidity);\\r\\n\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\tfunction skim(address to) external;\\r\\n\\tfunction sync() external;\\r\\n\\tfunction initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n\\tfunction factory() external pure returns (address);\\r\\n\\tfunction WETH() external pure returns (address);\\r\\n\\tfunction addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline\\r\\n\\t) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\tfunction addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline\\r\\n\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\tfunction removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline\\r\\n\\t) external returns (uint amountA, uint amountB);\\r\\n\\tfunction removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline\\r\\n\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\tfunction removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountA, uint amountB);\\r\\n\\tfunction removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\tfunction swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\\r\\n\\t) external returns (uint[] memory amounts);\\r\\n\\tfunction swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline\\r\\n\\t) external returns (uint[] memory amounts);\\r\\n\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\r\\n\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\r\\n\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\r\\n\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\r\\n\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline\\r\\n\\t) external returns (uint amountETH);\\r\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountETH);\\r\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\\r\\n\\t) external;\\r\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline\\r\\n\\t) external payable;\\r\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\\r\\n\\t) external;\\r\\n}\\r\\n\\r\\ncontract LofiDefi is Context, IERC20, Ownable, ReentrancyGuard {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\tusing Address for address;\\r\\n\\r\\n\\tmapping (address => uint256) private _rOwned;\\r\\n\\tmapping (address => uint256) private _tOwned;\\r\\n\\tmapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n\\tmapping (address => bool) private _isExcludedFromFee;\\r\\n\\tmapping (address => bool) private _isExcludedFromReward;\\r\\n\\taddress[] private _excludedFromReward;\\r\\n\\r\\n\\taddress BURN_ADDRESS = 0x0000000000000000000000000000000000000001;\\r\\n    address DEV_ADDRESS = 0x29079Ac85A425e158ec4eAFF84445f8B433b24b9;\\r\\n\\t\\r\\n\\tuint256 private constant MAX = ~uint256(0);\\r\\n\\tuint256 private _tTotal = 1000000000 * 10**2 * 10**9;\\r\\n\\tuint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n\\tuint256 private _tHODLrRewardsTotal;\\r\\n\\r\\n\\tstring private _name = \\\"LOFI-DEFI\\\";\\r\\n\\tstring private _symbol = \\\"LOFI\\\";\\r\\n\\tuint8 private _decimals = 9;\\r\\n\\t\\r\\n\\tuint256 public _rewardFee = 5;\\r\\n\\tuint256 private _previousRewardFee = _rewardFee;\\r\\n\\t\\r\\n\\tuint256 public _burnFee = 2;\\r\\n\\tuint256 private _previousBurnFee = _burnFee;\\r\\n\\r\\n    //This is to calculate devFee\\r\\n    uint256 public _devFee = 1;\\r\\n    uint256 private _previousDevFee = _devFee;\\r\\n\\r\\n\\tIUniswapV2Router02 public  uniswapV2Router;\\r\\n\\taddress public  uniswapV2Pair;\\r\\n\\tuint256 public _maxTxAmount = 10000000000 * 10**9;\\r\\n\\r\\n\\tevent TransferBurn(address indexed from, address indexed burnAddress, uint256 value);\\r\\n    event TransferDev(address indexed from, address indexed devAddress, uint256 value);\\r\\n\\r\\n\\tconstructor () {\\r\\n\\t\\t_rOwned[_msgSender()] = _rTotal;\\r\\n\\t\\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\t\\t// binance PANCAKE V2\\r\\n        //create a pair for this new token \\r\\n\\t\\tuniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\r\\n        //set the rest of the contract variables\\r\\n\\t\\tuniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        //exclude the owner from fee\\r\\n\\t\\t_isExcludedFromFee[owner()] = true;\\r\\n        //exclude this contract, the burn address, and the developer address from fee and reward\\r\\n\\t\\t_isExcludedFromFee[address(this)] = true;\\r\\n\\t\\t_isExcludedFromReward[address(this)] = true;\\r\\n\\t\\t_isExcludedFromFee[BURN_ADDRESS] = true;\\r\\n\\t\\t_isExcludedFromReward[BURN_ADDRESS] = true;\\r\\n        _isExcludedFromFee[DEV_ADDRESS] = true;\\r\\n        _isExcludedFromReward[DEV_ADDRESS] =  true;\\r\\n\\r\\n\\t\\temit Transfer(address(0), _msgSender(), _tTotal);\\r\\n\\t}\\r\\n\\r\\n\\tfunction name() public view returns (string memory) {return _name;}\\r\\n\\tfunction symbol() public view returns (string memory) {return _symbol;}\\r\\n\\tfunction decimals() public view returns (uint8) {return _decimals;}\\r\\n\\tfunction totalSupply() public view override returns (uint256) {return _tTotal;}\\r\\n\\r\\n\\tfunction balanceOf(address account) public view override returns (uint256) {\\r\\n\\t\\tif (_isExcludedFromReward[account]) return _tOwned[account];\\r\\n\\t\\treturn tokenFromReflection(_rOwned[account]);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdraw() external onlyOwner nonReentrant{\\r\\n\\t\\tuint256 balance = IERC20(address(this)).balanceOf(address(this));\\r\\n\\t\\tIERC20(address(this)).transfer(msg.sender, balance);\\r\\n\\t\\tpayable(msg.sender).transfer(address(this).balance);\\r\\n\\t}\\r\\n\\r\\n\\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction allowance(address owner, address spender) public view override returns (uint256) {\\r\\n\\t\\treturn _allowances[owner][spender];\\r\\n\\t}\\r\\n\\r\\n\\tfunction approve(address spender, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_transfer(sender, recipient, amount);\\r\\n\\t\\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction totalHODLrRewards() public view returns (uint256) {\\r\\n\\t\\treturn _tHODLrRewardsTotal;\\r\\n\\t}\\r\\n\\r\\n    \\tfunction totalBurned() public view returns (uint256) {\\r\\n\\t\\treturn balanceOf(BURN_ADDRESS);\\r\\n\\t}\\r\\n    \\r\\n    \\r\\n    function totalSentToDev() public view returns (uint256){\\r\\n        return balanceOf(DEV_ADDRESS);\\r\\n    }\\r\\n\\r\\n\\tfunction deliver(uint256 tAmount) public {\\r\\n\\t\\taddress sender = _msgSender();\\r\\n\\t\\trequire(!_isExcludedFromReward[sender], \\\"Excluded addresses cannot call this function\\\");\\r\\n\\t\\t(uint256 rAmount,,,,,,) = _getValues(tAmount);\\r\\n\\t\\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n\\t\\t_rTotal = _rTotal.sub(rAmount);\\r\\n\\t\\t_tHODLrRewardsTotal = _tHODLrRewardsTotal.add(tAmount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\r\\n\\t\\trequire(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n\\t\\tif (!deductTransferFee) {\\r\\n\\t\\t\\t(uint256 rAmount,,,,,,) = _getValues(tAmount);\\r\\n\\t\\t\\treturn rAmount;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t(,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\\r\\n\\t\\t\\treturn rTransferAmount;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\r\\n\\t\\trequire(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n\\t\\tuint256 currentRate =  _getRate();\\r\\n\\t\\treturn rAmount.div(currentRate);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isExcludedFromReward(address account) public view returns (bool) {\\r\\n\\t\\treturn _isExcludedFromReward[account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromReward(address account) public onlyOwner {\\r\\n\\t\\trequire(!_isExcludedFromReward[account], \\\"Account is already excluded\\\");\\r\\n\\t\\tif(_rOwned[account] > 0) {\\r\\n\\t\\t\\t_tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n\\t\\t}\\r\\n\\t\\t_isExcludedFromReward[account] = true;\\r\\n\\t\\t_excludedFromReward.push(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction includeInReward(address account) external onlyOwner {\\r\\n\\t\\trequire(_isExcludedFromReward[account], \\\"Account is already excluded\\\");\\r\\n\\t\\tfor (uint256 i = 0; i < _excludedFromReward.length; i++) {\\r\\n\\t\\t\\tif (_excludedFromReward[i] == account) {\\r\\n\\t\\t\\t\\t_excludedFromReward[i] = _excludedFromReward[_excludedFromReward.length - 1];\\r\\n\\t\\t\\t\\t_tOwned[account] = 0;\\r\\n\\t\\t\\t\\t_isExcludedFromReward[account] = false;\\r\\n\\t\\t\\t\\t_excludedFromReward.pop();\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromFee(address account) public onlyOwner {\\r\\n\\t\\t_isExcludedFromFee[account] = true;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction includeInFee(address account) public onlyOwner {\\r\\n\\t\\t_isExcludedFromFee[account] = false;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setRewardFeePercent(uint256 rewardFee) external onlyOwner {\\r\\n\\t\\t_rewardFee = rewardFee;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setBurnFeePercent(uint256 burnFee) external onlyOwner {\\r\\n\\t\\t_burnFee = burnFee;\\r\\n\\t}\\r\\n\\r\\n    function setDevFeePercent(uint256 devFee) external onlyOwner{\\r\\n        _devFee = devFee;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\\r\\n\\t\\t_maxTxAmount = _tTotal.mul(maxTxPercent).div(\\r\\n\\t\\t\\t10**2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {}\\r\\n\\r\\n\\tfunction _HODLrFee(uint256 rHODLrFee, uint256 tHODLrFee) private {\\r\\n\\t\\t_rTotal = _rTotal.sub(rHODLrFee);\\r\\n\\t\\t_tHODLrRewardsTotal = _tHODLrRewardsTotal.add(tHODLrFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\\r\\n\\t\\t(uint256 tTransferAmount, uint256 tHODLrFee, uint256 tBurn, uint256 tDev) = _getTValues(tAmount);\\r\\n\\t\\t(uint256 rAmount, uint256 rTransferAmount, uint256 rHODLrFee) = _getRValues(tAmount, tHODLrFee, tBurn, tDev, _getRate());\\r\\n\\t\\treturn (rAmount, rTransferAmount, rHODLrFee, tTransferAmount, tHODLrFee, tBurn,tDev);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\\r\\n\\t\\tuint256 tHODLrFee = calculateRewardFee(tAmount);\\r\\n\\t\\tuint256 tBurn = calculateBurnFee(tAmount);\\r\\n        uint256 tDev = calculateDevFee(tAmount);\\r\\n\\t\\tuint256 tTransferAmount = tAmount.sub(tHODLrFee).sub(tBurn).sub(tDev);\\r\\n\\t\\treturn (tTransferAmount, tHODLrFee, tBurn, tDev);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getRValues(uint256 tAmount, uint256 tHODLrFee, uint256 tBurn, uint tDev, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\r\\n\\t\\tuint256 rAmount = tAmount.mul(currentRate);\\r\\n\\t\\tuint256 rHODLrFee = tHODLrFee.mul(currentRate);\\r\\n\\t\\tuint256 rBurn = tBurn.mul(currentRate);\\r\\n        uint256 rDev = tDev.mul(currentRate);\\r\\n\\t\\tuint256 rTransferAmount = rAmount.sub(rHODLrFee).sub(rBurn).sub(rDev);\\r\\n\\t\\treturn (rAmount, rTransferAmount, rHODLrFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getRate() private view returns(uint256) {\\r\\n\\t\\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n\\t\\treturn rSupply.div(tSupply);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getCurrentSupply() private view returns(uint256, uint256) {\\r\\n\\t\\tuint256 rSupply = _rTotal;\\r\\n\\t\\tuint256 tSupply = _tTotal;\\r\\n\\t\\tfor (uint256 i = 0; i < _excludedFromReward.length; i++) {\\r\\n\\t\\t\\tif (_rOwned[_excludedFromReward[i]] > rSupply || _tOwned[_excludedFromReward[i]] > tSupply) return (_rTotal, _tTotal);\\r\\n\\t\\t\\trSupply = rSupply.sub(_rOwned[_excludedFromReward[i]]);\\r\\n\\t\\t\\ttSupply = tSupply.sub(_tOwned[_excludedFromReward[i]]);\\r\\n\\t\\t}\\r\\n\\t\\tif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n\\t\\treturn (rSupply, tSupply);\\r\\n\\t}\\r\\n\\t\\r\\n\\r\\n\\t\\r\\n\\tfunction calculateRewardFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t\\treturn _amount.mul(_rewardFee).div(\\r\\n\\t\\t\\t10**2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateBurnFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t\\treturn _amount.mul(_burnFee).div(\\r\\n\\t\\t\\t10**2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n    function calculateDevFee(uint256 _amount) private view returns (uint256){\\r\\n        return _amount.mul(_devFee).div(\\r\\n            10**2\\r\\n        );\\r\\n    }\\r\\n\\t\\r\\n\\tfunction removeAllFee() private {\\r\\n\\t\\tif(_rewardFee == 0 && _burnFee == 0) return;\\t\\t\\r\\n\\t\\t_previousRewardFee = _rewardFee;\\r\\n\\t\\t_previousBurnFee = _burnFee;\\r\\n        _previousDevFee = _devFee;\\t\\t\\r\\n\\t\\t_rewardFee = 0;\\r\\n\\t\\t_burnFee = 0;\\r\\n        _devFee = 0;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction restoreAllFee() private {\\r\\n\\t\\t_rewardFee = _previousRewardFee;\\r\\n\\t\\t_burnFee = _previousBurnFee;\\r\\n        _devFee = _previousDevFee;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction isExcludedFromFee(address account) public view returns(bool) {\\r\\n\\t\\treturn _isExcludedFromFee[account];\\r\\n\\t}\\r\\n\\r\\n\\t function _setDevWallet(address _DEV_ADDRESS) external onlyOwner {\\r\\n        DEV_ADDRESS = _DEV_ADDRESS;\\r\\n    }\\r\\n\\r\\n\\tfunction _approve(address owner, address spender, uint256 amount) private {\\r\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\t\\t_allowances[owner][spender] = amount;\\r\\n\\t\\temit Approval(owner, spender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transfer(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 amount\\r\\n\\t) private {\\r\\n\\t\\trequire(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n\\t\\trequire(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\t\\trequire(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\t\\tif(from != owner() && to != owner())\\r\\n\\t\\t\\trequire(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\r\\n\\t\\tbool takeFee = true;\\r\\n\\t\\tif(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\\r\\n\\t\\t\\ttakeFee = false;\\r\\n\\t\\t}\\r\\n\\t\\t_tokenTransfer(from,to,amount,takeFee);\\r\\n\\t}\\r\\n\\tfunction _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\\r\\n\\t\\tif(!takeFee)\\r\\n\\t\\t\\tremoveAllFee();\\t\\t\\r\\n\\t\\tif (_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) {\\r\\n\\t\\t\\t_transferFromExcluded(sender, recipient, amount);\\r\\n\\t\\t} else if (!_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\\r\\n\\t\\t\\t_transferToExcluded(sender, recipient, amount);\\r\\n\\t\\t} else if (!_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) {\\r\\n\\t\\t\\t_transferStandard(sender, recipient, amount);\\r\\n\\t\\t} else if (_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\\r\\n\\t\\t\\t_transferBothExcluded(sender, recipient, amount);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t_transferStandard(sender, recipient, amount);\\r\\n\\t\\t}\\t\\t\\r\\n\\t\\tif(!takeFee)\\r\\n\\t\\t\\trestoreAllFee();\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transferBurn(uint256 tBurn) private {\\r\\n\\t\\tuint256 currentRate = _getRate();\\r\\n\\t\\tuint256 rBurn = tBurn.mul(currentRate);\\t\\t\\r\\n\\t\\t_rOwned[BURN_ADDRESS] = _rOwned[BURN_ADDRESS].add(rBurn);\\r\\n\\t\\tif(_isExcludedFromReward[BURN_ADDRESS])\\r\\n\\t\\t\\t_tOwned[BURN_ADDRESS] = _tOwned[BURN_ADDRESS].add(tBurn);\\r\\n\\t}\\r\\n\\r\\n    function _transferDev(uint256 tDev) private {\\r\\n\\t\\tuint256 currentRate = _getRate();\\r\\n\\t\\tuint256 rDev = tDev.mul(currentRate);\\t\\t\\r\\n\\t\\t_rOwned[DEV_ADDRESS] = _rOwned[DEV_ADDRESS].add(rDev);\\r\\n\\t\\tif(_isExcludedFromReward[DEV_ADDRESS])\\r\\n\\t\\t\\t_tOwned[DEV_ADDRESS] = _tOwned[DEV_ADDRESS].add(tDev);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n\\t\\t(\\r\\n\\t\\t\\tuint256 rAmount,\\r\\n\\t\\t\\tuint256 rTransferAmount,\\r\\n\\t\\t\\tuint256 rHODLrFee,\\r\\n\\t\\t\\tuint256 tTransferAmount,\\r\\n\\t\\t\\tuint256 tHODLrFee,\\r\\n\\t\\t\\tuint256 tBurn,\\r\\n            uint256 tDev\\r\\n\\t\\t) = _getValues(tAmount);\\r\\n\\t\\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n\\t\\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n\\t\\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\t\\t_transferBurn(tBurn);\\r\\n        _transferDev(tDev);\\r\\n\\t\\t_HODLrFee(rHODLrFee, tHODLrFee);\\r\\n\\t\\temit TransferBurn(sender, BURN_ADDRESS, tBurn);\\r\\n        emit TransferDev(sender, DEV_ADDRESS, tDev);\\r\\n\\t\\temit Transfer(sender, recipient, tTransferAmount);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n\\t\\t(\\r\\n            uint256 rAmount, \\r\\n            uint256 rTransferAmount, \\r\\n            uint256 rHODLrFee, \\r\\n            uint256 tTransferAmount, \\r\\n            uint256 tHODLrFee, \\r\\n            uint256 tBurn,\\r\\n            uint256 tDev) = _getValues(tAmount);\\r\\n\\t\\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n\\t\\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n\\t\\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\t\\t_transferBurn(tBurn);\\r\\n        _transferDev(tDev);\\r\\n\\t\\t_HODLrFee(rHODLrFee, tHODLrFee);\\t\\t\\r\\n\\t\\temit TransferBurn(sender, BURN_ADDRESS, tBurn);\\r\\n        emit TransferDev(sender, DEV_ADDRESS, tDev);\\r\\n\\t\\temit Transfer(sender, recipient, tTransferAmount);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\\r\\n\\t\\t(uint256 rAmount, uint256 rTransferAmount, uint256 rHODLrFee, uint256 tTransferAmount, uint256 tHODLrFee, uint256 tBurn, uint256 tDev) = _getValues(tAmount);\\r\\n\\t\\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n\\t\\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\t\\t_transferBurn(tBurn);\\r\\n        _transferDev(tDev);\\r\\n\\t\\t_HODLrFee(rHODLrFee, tHODLrFee);\\r\\n\\t\\temit TransferBurn(sender, BURN_ADDRESS, tBurn);\\r\\n        emit TransferDev(sender, DEV_ADDRESS, tDev);\\r\\n\\t\\temit Transfer(sender, recipient, tTransferAmount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n\\t\\t(uint256 rAmount, uint256 rTransferAmount, uint256 rHODLrFee, uint256 tTransferAmount, uint256 tHODLrFee, uint256 tBurn, uint tDev) = _getValues(tAmount);\\r\\n\\t\\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n\\t\\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n\\t\\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n\\t\\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\t\\t_transferBurn(tBurn);\\r\\n        _transferDev(tDev);\\r\\n\\t\\t_HODLrFee(rHODLrFee, tHODLrFee);\\r\\n\\t\\temit TransferBurn(sender, BURN_ADDRESS, tBurn);\\r\\n        emit TransferDev(sender, DEV_ADDRESS, tDev);\\r\\n\\t\\temit Transfer(sender, recipient, tTransferAmount);\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t//New Pancakeswap router version?\\r\\n    //No problem, just change it!\\r\\n    function setRouterAddress(address newRouter) public onlyOwner{\\r\\n        IUniswapV2Router02 _newPancakeRouter = IUniswapV2Router02(newRouter);\\r\\n        uniswapV2Pair = IUniswapV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\\r\\n        uniswapV2Router = _newPancakeRouter;\\r\\n    }\\r\\n\\t\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferDev\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DEV_ADDRESS\",\"type\":\"address\"}],\"name\":\"_setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"}],\"name\":\"setRewardFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHODLrRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSentToDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LofiDefi", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}