{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Burn(address indexed owner, address indexed to, uint value);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n}\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ncontract VulgarTycoon is Ownable, IBEP20 {\r\n    using SafeMath for uint;\r\n    mapping (address => uint) internal _balances;\r\n    mapping (address => mapping (address => uint)) internal _allowances;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint internal _totalSupply;\r\n    address private _pairAddress;\r\n    IPancakeRouter02 private _router;\r\n    address private pancakeRouterAddr = 0x10ED43C718714eb63d5aA57B78B54704E256024E;//Routing prohibited changes\r\n    address public dead = 0x0000000000000000000000000000000000000000;//black hole address\r\n    \r\n    uint public buyFeeToburn = 1;\r\n    uint public buyFeeToLiquidity = 1;\r\n    uint public buyFeeToDifidend = 0;\r\n    uint public sellFeeToburn = 1;\r\n    uint public sellFeeToLiquidity = 1;\r\n    uint public sellFeeToDifidend = 0;\r\n    uint private sellFeeToLPDifidend = 1;\r\n    uint256 public amountToStopBurn;\r\n    uint256 public amountTodifidend;\r\n    uint256 public amountToLPDifidend;\r\n    address[] public tokenHolders;\r\n    uint private buyFeeToLPDifidend = 1;\r\n    uint public buyFeeToDistributor = 1;//Marketing wallet\r\n    uint public sellFeeToDistributor = 1;//Marketing wallet\r\n    address private distributorAddr;\r\n    mapping(address => bool) private _holderIsExist;\r\n    mapping(address => bool) public _exemptFee;\r\n    address private LPDifidendAddr = 0x50b320820aFb41abcD5bbff33a5406863156024E; //Routing prohibited changes\r\n    constructor() {\r\n        _name = \"VulgarTycoon\";\r\n        _symbol = \"VIN\";\r\n        _decimals = 18;\r\n        _totalSupply = 19999000 * (10**18); \r\n\t    _balances[msg.sender] = _totalSupply;\r\n        tokenHolders.push(msg.sender);\r\n        _holderIsExist[msg.sender] = true;\r\n        _router = IPancakeRouter02(pancakeRouterAddr);\r\n        _pairAddress = IPancakeFactory(_router.factory()).createPair(\r\n            address(this),\r\n            _router.WETH()\r\n        );\r\n        _exemptFee[msg.sender] = true;\r\n        _exemptFee[address(this)] = true;\r\n        _exemptFee[LPDifidendAddr] = true;\r\n        _exemptFee[pancakeRouterAddr] = true;\r\n        amountToStopBurn = _totalSupply.div(2);\r\n        amountTodifidend = _totalSupply.div(100000);\r\n        amountToLPDifidend = _totalSupply.div(100000);\r\n\t    emit Transfer(address(0), msg.sender, _totalSupply);  \r\n    }\r\n    receive() external payable {}\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint amount) public override  returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address towner, address spender) public view override returns (uint) {\r\n        return _allowances[towner][spender];\r\n    }\r\n    function approve(address spender, uint amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, currentAllowance.sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        if( recipient != address(0) \r\n            && !_holderIsExist[recipient] \r\n            && recipient != address(_pairAddress) \r\n            && recipient != address(this)) {\r\n                tokenHolders.push(recipient);\r\n                _holderIsExist[recipient] = true;\r\n        }\r\n        uint finalAmount = amount;\r\n        if(sender == _pairAddress && !_exemptFee[recipient]) { // buy\r\n            finalAmount = processFee(sender,amount, buyFeeToburn, buyFeeToLiquidity, buyFeeToDifidend, buyFeeToLPDifidend,buyFeeToDistributor);\r\n        }\r\n        else if(recipient == _pairAddress && !_exemptFee[sender]) { // sell or addLiquidity\r\n            finalAmount = processFee(sender,amount, sellFeeToburn, sellFeeToLiquidity, sellFeeToDifidend, sellFeeToLPDifidend,sellFeeToDistributor);\r\n        } else if(!_exemptFee[sender] && !_exemptFee[recipient]){\r\n            uint burnAmount = amount.div(100);\r\n            _balances[dead] = _balances[dead].add(burnAmount);\r\n            _totalSupply = _totalSupply.sub(burnAmount);\r\n            emit Transfer(sender, dead, burnAmount);\r\n            uint distributorAmount;\r\n            if(distributorAddr != address(0)) {   \r\n                distributorAmount = amount.div(100);\r\n                _balances[distributorAddr] = _balances[distributorAddr].add(distributorAmount);\r\n            }\r\n            finalAmount = amount.sub(burnAmount).sub(distributorAmount);\r\n        }\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n        emit Transfer(sender, recipient, finalAmount);\r\n    }\r\n    function processFee(address sender,uint amount,uint feeToBurn,uint feeToLiquidity,uint feeTodifidend,uint feeToLPDifidend,uint feeToDistributor) private returns(uint finalAmount) {\r\n        uint burnAmount = amount.mul(feeToBurn).div(100);\r\n        _balances[dead] = _balances[dead].add(burnAmount);\r\n        _totalSupply = _totalSupply.sub(burnAmount);\r\n        emit Transfer(sender, dead, burnAmount);\r\n        uint addLiquidityAmount = amount.mul(feeToLiquidity).div(100);\r\n        _balances[_pairAddress] = _balances[_pairAddress].add(addLiquidityAmount);\r\n        emit Transfer(sender, _pairAddress, addLiquidityAmount);\r\n        uint difidendToHoldersAmount = amount.mul(feeTodifidend).div(100);\r\n        difidendToHolders(sender,difidendToHoldersAmount);   \r\n        uint LPDifidendAmount = amount.mul(feeToLPDifidend).div(100);\r\n        _balances[address(this)] = _balances[address(this)].add(LPDifidendAmount);\r\n        swapAndDifidend(sender); \r\n        uint distributorAmount;\r\n        if(distributorAddr != address(0)) {\r\n            distributorAmount = amount.mul(feeToDistributor).div(100);\r\n            _balances[distributorAddr] = _balances[distributorAddr].add(distributorAmount);\r\n        }\r\n        uint tatalFeeAmounts = burnAmount.add(addLiquidityAmount).add(difidendToHoldersAmount).add(LPDifidendAmount).add(distributorAmount);\r\n        finalAmount = amount.sub(tatalFeeAmounts); \r\n    }\r\n    function difidendToHolders(address sender,uint amount) private {\r\n        for(uint256 i = 0; i < tokenHolders.length; i++){\r\n            uint holderAmount = _balances[tokenHolders[i]];\r\n            if( holderAmount > amountTodifidend) {\r\n                uint difidendAmount = amount.mul(holderAmount).div(_totalSupply);\r\n                _balances[tokenHolders[i]] = _balances[tokenHolders[i]].add(difidendAmount);\r\n                emit Transfer(sender, tokenHolders[i], difidendAmount);\r\n            }\r\n        }\r\n    }\r\n    function swapAndDifidend(address sender) private {\r\n        uint amount = _balances[address(this)];\r\n        if (\r\n            amount < amountToLPDifidend ||\r\n            sender == address(this) ||\r\n            sender == _pairAddress\r\n        ) {\r\n            return;\r\n        }   \r\n        _approve(address(this),pancakeRouterAddr,amount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _router.WETH();\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            LPDifidendAddr,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function setBuyFeeToBurn(uint256 value) public onlyOwner {\r\n        buyFeeToburn = value;\r\n    }\r\n    function setBuyFeeToLiquidity(uint256 value) private onlyOwner {\r\n        buyFeeToLiquidity = value;\r\n    }\r\n    function setBuyFeeToDifidend(uint256 value) private onlyOwner {\r\n        buyFeeToDifidend = value;\r\n    }\r\n    function setBuyFeeToLPDifidend(uint256 value) private onlyOwner {\r\n        buyFeeToLPDifidend = value;\r\n    }\r\n    function setSellFeeToBurn(uint256 value) public onlyOwner {\r\n        sellFeeToburn = value;\r\n    }\r\n    function setSellFeeToLiquidity(uint256 value) private onlyOwner {\r\n        sellFeeToLiquidity = value;\r\n    }\r\n    function setSellFeeToDifidend(uint256 value) private onlyOwner {\r\n        sellFeeToDifidend = value;\r\n    }\r\n    function setSellFeeToLPDifidend(uint256 value) private onlyOwner {\r\n        sellFeeToLPDifidend = value;\r\n    }\r\n    function setAmountToStopBurn(uint256 value) public onlyOwner {\r\n        amountToStopBurn = value;\r\n    }\r\n    function setAmountTodifidend(uint256 value) public onlyOwner {\r\n        amountTodifidend = value;\r\n    }\r\n    function setAmountToLPDifidend(uint256 value) public onlyOwner {\r\n        amountToLPDifidend = value;\r\n    }\r\n    function exemptFromFee(address account, bool flag) public onlyOwner{\r\n        _exemptFee[account] = flag;\r\n    }\r\n    function setDistributorAddr(address account) public onlyOwner{\r\n        distributorAddr = account;\r\n    }\r\n    function setBuyFeeToDistributor(uint256 value) public onlyOwner{\r\n        buyFeeToDistributor = value;\r\n    }\r\n    function setSellFeeToDistributor(uint256 value) public onlyOwner{\r\n        sellFeeToDistributor = value;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"towner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToLPDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToStopBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTodifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToDistributor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToburn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"exemptFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToDistributor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToburn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAmountToLPDifidend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAmountToStopBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAmountTodifidend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDistributorAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VulgarTycoon", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ff07d93310323d2670f69914bb77daaadc3f5c50cec7a0a9d9ae940bdc46b2ec"}