{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad/Extension/FeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract FeeCollector is Ownable {\\n    using Address for address;\\n\\n    mapping(string => uint256) public configureFees;\\n    uint256 public collectedFees;\\n    uint256 public withdrawnFees;\\n\\n    event FeeConfigureChanged(string method, uint256 fee);\\n    event FeeWithdrawn(address indexed user, uint256 amount);\\n\\n    function setFeesConfiguration(string[] memory methods, uint256[] memory fees) public onlyOwner {\\n        require(methods.length == fees.length, 'FeeCollector: invalid set of configuration provided');\\n        for (uint i=0; i<methods.length; i++) {\\n            configureFees[methods[i]] = fees[i];\\n            emit FeeConfigureChanged(methods[i], fees[i]);\\n        }\\n    }\\n\\n    function withdrawCollectedFees(address addr, uint256 amount) public onlyOwner {\\n        require(addr != address(0), 'FeeCollector: address needs to be different than zero!');\\n        require(collectedFees >= amount, 'FeeCollector: not enough fees to withdraw!');\\n        collectedFees = collectedFees - amount;\\n        withdrawnFees = withdrawnFees + amount;\\n        Address.sendValue(payable(addr), amount);\\n        emit FeeWithdrawn(addr, amount);\\n    }\\n\\n    modifier collectFee(string memory method) {\\n        require(msg.value > 0 || configureFees[method] == 0, 'FeeCollector: this method requires fee');\\n        require(msg.value == configureFees[method], 'FeeCollector: wrong fee amount provided');\\n        collectedFees = collectedFees + msg.value;\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad/Extension/ILaunchpadVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\ninterface ILaunchpadVault {\\n    function currentUserInfoAt(address addr, uint256 index) external view returns (uint256);\\n\\n    function increasePeggedAmount(address addr, uint256 amount) external returns (uint256);\\n\\n    function decreasePeggedAmount(address addr, uint256 amount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad/LaunchpadPresale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Extension/ILaunchpadVault.sol\\\";\\nimport \\\"./Extension/FeeCollector.sol\\\";\\nimport \\\"../Token/IERC20Delegated.sol\\\";\\n\\ncontract LaunchpadPresale is Ownable, FeeCollector {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public minAllocate;\\n    uint256 public maxAllocate;\\n    uint256 public targetAmount;\\n    uint256 public remainAmount;\\n    uint256 public raisedAmount;\\n    uint256 public secureAmount;\\n    uint256 public freezeAmount;\\n    uint256 public sumAllocates;\\n    uint256 public startBlock;\\n    uint256 public pivotBlock;\\n    uint256 public closeBlock;\\n    uint256 public realStartBlock;\\n    uint256 public realPivotBlock;\\n    uint256 public realCloseBlock;\\n    uint256 public iniDeposit;\\n    uint256 public sumDeposit;\\n\\n    mapping(address => uint256) internal deposits;\\n    mapping(address => uint256) internal withdraws;\\n    mapping(address => uint256) internal allocates;\\n    mapping(address => uint256) internal releases;\\n\\n    IERC20Delegated public depoToken;\\n    IERC20 public saleToken;\\n    ILaunchpadVault public vault;\\n\\n    uint256 public stage;\\n    uint256 public setupFlag;\\n    uint256 public fine;\\n    uint256 public fineDivisor;\\n    uint256 public multiply;\\n\\n    bool private startInProgress;\\n    bool private closeInProgress;\\n    bool private salePremature;\\n    bool private saleSucceeded;\\n    uint256 private presaleAmount;\\n    uint256 private pubsaleAmount;\\n\\n    event ConstraintChanged(uint256 minAllocate, uint256 maxAllocate, uint256 targetAmount, uint256 remainAmount);\\n    event StartBlockChanged(uint256 block);\\n    event PivotBlockChanged(uint256 block);\\n    event CloseBlockChanged(uint256 block);\\n    event TokenAddressChanged(address indexed depoToken, address indexed saleToken);\\n    event VaultAddressChanged(address indexed addr);\\n    event SaleStarted(uint256 block);\\n    event SaleStopped(uint256 block);\\n    event StagePushed(uint256 block, uint256 stage);\\n    event Deposited(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event Allocated(address indexed user, uint256 amount);\\n    event Delivered(address indexed user, uint256 amount);\\n    event Released(address indexed user, uint256 amount);\\n    event WithdrawFineChanged(uint256 fine, uint256 divisor);\\n\\n    function startSale() external onlyOwner {\\n        require(stage == 0, 'Presale: already started');\\n        require(!startInProgress && stage == 0, 'Presale: not ready to be started');\\n        require(setupFlag == 63, 'Presale: constraints have not been set');\\n        startInProgress = true;\\n        raisedAmount = 0; // fix for non-allocation start\\n        updateState();\\n    }\\n\\n    function closeSale() external onlyOwner {\\n        require(stage <= 3, 'Presale: already stopped');\\n        require(!closeInProgress && stage == 3, 'Presale: not ready to be stopped');\\n        require(startInProgress, 'Presale: start of sale needs to be triggered before close');\\n        closeInProgress = true;\\n        raisedAmount = saleToken.balanceOf(address(this)); // fix for non-allocation close\\n        updateState();\\n    }\\n\\n    function setConstraint(uint256 minAllocate_, uint256 maxAllocate_, uint256 targetAmount_, uint256 remainAmount_) public onlyOwner {\\n        require(maxAllocate_ >= minAllocate_, 'Presale: max allocation needs to be higher or equal to min allocation');\\n        require(targetAmount_ >= maxAllocate_, 'Presale: presale target needs to be higher or equal to max allocation');\\n        require(targetAmount_ >= remainAmount_, 'Presale: presale target needs to be higher or equal to remain amount');\\n        require(targetAmount_ > 0, 'Presale: presale target needs to be higher than zero');\\n\\n        require(minAllocate == 0 && maxAllocate == 0 && targetAmount == 0 && remainAmount == 0,\\n            'Presale: constraints already set');\\n\\n        minAllocate = minAllocate_;\\n        maxAllocate = maxAllocate_;\\n        targetAmount = targetAmount_;\\n        remainAmount = remainAmount_;\\n\\n        setupFlag = setupFlag | 1;\\n        emit ConstraintChanged(minAllocate, maxAllocate, targetAmount, remainAmount);\\n    }\\n\\n    function setTokenAddress(IERC20Delegated _depoToken, IERC20 _saleToken) public onlyOwner {\\n        require(address(_depoToken) != address(0), 'Presale: token address needs to be different than zero!');\\n        require(address(_saleToken) != address(0), 'Presale: token address needs to be different than zero!');\\n        require(address(depoToken) == address(0), 'Presale: token already set!');\\n        require(address(saleToken) == address(0), 'Presale: token already set!');\\n\\n        depoToken = _depoToken;\\n        saleToken = _saleToken;\\n\\n        setupFlag = setupFlag | 2;\\n        emit TokenAddressChanged(address(depoToken), address(saleToken));\\n    }\\n\\n    function setVaultAddress(ILaunchpadVault _vault) public onlyOwner {\\n        require(address(_vault) != address(0), 'Presale: vault address needs to be different than zero!');\\n        require(address(vault) == address(0), 'Presale: vault already set!');\\n        vault = _vault;\\n\\n        setupFlag = setupFlag | 4;\\n        emit VaultAddressChanged(address(vault));\\n    }\\n\\n    function setStartBlock(uint256 _startBlock) public onlyOwner {\\n        require(startBlock == 0, 'Presale: start block already set');\\n        require(_startBlock > 0, 'Presale: start block needs to be higher than zero!');\\n        startBlock = _startBlock;\\n\\n        setupFlag = setupFlag | 8;\\n        emit StartBlockChanged(startBlock);\\n    }\\n\\n    function setPivotBlock(uint256 _pivotBlock) public onlyOwner {\\n        require(startBlock != 0, 'Presale: start block needs to be set first');\\n        require(pivotBlock == 0, 'Presale: pivot block already set');\\n        require(_pivotBlock > startBlock, 'Presale: pivot block needs to be higher than start one!');\\n        pivotBlock = _pivotBlock;\\n\\n        setupFlag = setupFlag | 16;\\n        emit PivotBlockChanged(pivotBlock);\\n    }\\n\\n    function setCloseBlock(uint256 _closeBlock) public onlyOwner {\\n        require(pivotBlock != 0, 'Presale: pivot block needs to be set first');\\n        require(closeBlock == 0, 'Presale: close block already set');\\n        require(_closeBlock > pivotBlock, 'Presale: close block needs to be higher than pivot one!');\\n        closeBlock = _closeBlock;\\n\\n        setupFlag = setupFlag | 32;\\n        emit CloseBlockChanged(closeBlock);\\n    }\\n\\n    function setWithdrawFine(uint256 _fine, uint256 _divisor) public onlyOwner {\\n        require(_divisor > 0, 'Presale: fine divisor needs to be higher than zero!');\\n        fine = _fine;\\n        fineDivisor = _divisor;\\n        emit WithdrawFineChanged(_fine, _divisor);\\n    }\\n\\n    function isDepositAccepted() public view returns (bool) {\\n        return stage == 1;\\n    }\\n\\n    function isAllocateAccepted() public view returns (bool) {\\n        return stage == 1 || stage == 2 || stage == 3;\\n    }\\n\\n    function isWithdrawAccepted() public view returns (bool) {\\n        return stage == 4;\\n    }\\n\\n    function isReleaseAccepted() public view returns (bool) {\\n        return stage == 4;\\n    }\\n\\n    function isInvestorAllowed(address addr) public view returns (bool) {\\n        return allowedAllocation(addr) > 0;\\n    }\\n\\n    function isPreCloseAllowed() public view returns (bool) {\\n        return stage == 2;\\n    }\\n\\n    function isCountingAllowed() public view returns (bool) {\\n        return stage == 2 || stage == 3 || stage == 4;\\n    }\\n\\n    function isEveryoneAllowed() public view returns (bool) {\\n        return stage == 3 || (stage == 2 && sumDeposit == 0);\\n    }\\n\\n    function depositToAllocation(uint256 amount, uint256 target) public view returns (uint256) {\\n        return (sumDeposit == 0) ? 0 : amount * target / sumDeposit;\\n    }\\n\\n    function currentDeposit(address addr) public view returns (uint256) {\\n        return deposits[addr];\\n    }\\n\\n    function allowedAllocation(address addr) public view returns (uint256) {\\n        return depositToAllocation(currentDeposit(addr), targetAmount);\\n    }\\n\\n    function securedAllocation(address addr) public view returns (uint256) {\\n        return allowedAllocation(addr) - missingAllocation(addr);\\n    }\\n\\n    function currentAllocation(address addr) public view returns (uint256) {\\n        return allocates[addr];\\n    }\\n\\n    function missingAllocation(address addr) public view returns (uint256) {\\n        uint256 allowed = allowedAllocation(addr);\\n        uint256 current = currentAllocation(addr);\\n        return (allowed >= current) ? allowed - current : 0;\\n    }\\n\\n    function deposit(uint256 amount) external payable collectFee('deposit') {\\n        updateState();\\n        // zero amount is required to be allowed!\\n        require(isDepositAccepted(), 'Presale: deposits are not accepted at this time!');\\n\\n        // check expiration of provided tokens\\n        uint256 expiry = vault.currentUserInfoAt(msg.sender, 4); // expiration is at index=4\\n        require(expiry >= block.timestamp, 'Presale: your tokens have expired, please re-issue them');\\n\\n        deposits[msg.sender] = deposits[msg.sender] + amount;\\n        sumDeposit = sumDeposit + amount;\\n\\n        // if user allocated on deposit phase already, increase his deposit, ignore otherwise\\n        if (isDepositAccepted() && currentAllocation(msg.sender) != 0) {\\n            iniDeposit = iniDeposit + amount;\\n        }\\n\\n        IERC20(depoToken).safeTransferFrom(address(msg.sender), address(this), amount);\\n        emit Deposited(msg.sender, amount);\\n    }\\n\\n    function allocate(uint256 amount) external payable collectFee('allocate') {\\n        updateState();\\n        // zero amount is required to be allowed!\\n        require(isAllocateAccepted(), 'Presale: allocations are not accepted at this time!');\\n\\n        bool isInvestor = isInvestorAllowed(msg.sender);\\n        bool isEveryone = isEveryoneAllowed();\\n        require(isInvestor || isEveryone, 'Presale: you are not allowed to participate at this time!');\\n        bool targetReached = raisedAmount + remainAmount >= targetAmount;\\n        uint256 balance = saleToken.balanceOf(address(this));\\n\\n        // if user allocated on deposit phase for the first time, count and add his deposit tokens\\n        if (isDepositAccepted() && currentAllocation(msg.sender) == 0 && amount > 0) {\\n            iniDeposit = iniDeposit + currentDeposit(msg.sender);\\n        }\\n        // if counter phase is active and raisedAmount from previous phase is yet to be determined - count it\\n        if (isCountingAllowed() && presaleAmount == 0 && !targetReached) {\\n            balance = balance < targetAmount ? balance : targetAmount;\\n            balance = depositToAllocation(iniDeposit, balance);\\n            raisedAmount = raisedAmount + balance;\\n            if (raisedAmount > targetAmount) raisedAmount = targetAmount;\\n            secureAmount = secureAmount + balance;\\n            if (secureAmount > targetAmount) secureAmount = targetAmount;\\n            presaleAmount = raisedAmount;\\n        }\\n        if (isEveryoneAllowed() && pubsaleAmount == 0 && !targetReached) {\\n            raisedAmount = balance;\\n            if (raisedAmount > targetAmount) raisedAmount = targetAmount;\\n            pubsaleAmount = raisedAmount;\\n        }\\n\\n        // compute secure allocation allowed\\n        uint256 newAmount = computeAllocation(msg.sender, amount);\\n        require(newAmount > 0 || isInvestor, 'Presale: unable to allocate that amount at this time!');\\n\\n        allocates[msg.sender] = allocates[msg.sender] + amount;\\n        sumAllocates = saleToken.balanceOf(address(this)) + amount;\\n\\n        // if counter phase is active, increase raisedAmount by allowed amount\\n        if (!isDepositAccepted() && isAllocateAccepted()) {\\n            if (isInvestor) secureAmount = secureAmount + newAmount; // secured amount is a feature available only for investors\\n            raisedAmount = raisedAmount + newAmount;\\n        }\\n\\n        targetReached = raisedAmount + remainAmount >= targetAmount;\\n        // if everyone is already accepted and real balance is higher than target, accept overbalance and succeed\\n        if (!targetReached && isEveryone) {\\n            uint256 actualAmount = sumAllocates;\\n            if (actualAmount + remainAmount >= targetAmount) {\\n                raisedAmount = actualAmount <= targetAmount ? actualAmount : targetAmount;\\n                targetReached = true;\\n            }\\n        }\\n        // if preclose phase is active and only remainAmount is missing treat sale as prematurely succeeded\\n        if ( targetReached && isPreCloseAllowed()) {\\n            salePremature = true;\\n        }\\n        // if counting phase is active and only remainAmount is missing treat sale as succeeded\\n        if ( targetReached && isCountingAllowed()) {\\n            saleSucceeded = true;\\n        }\\n        if ( targetReached) {\\n            updateState(); // stop presale and update state if sale succeeded\\n        }\\n\\n        saleToken.safeTransferFrom(address(msg.sender), address(this), amount);\\n        emit Allocated(msg.sender, amount);\\n    }\\n\\n    function withdraw() external payable collectFee('withdraw') {\\n        updateState();\\n        require(isWithdrawAccepted(), 'Presale: withdraws are not accepted at this time!');\\n\\n        uint256 amount = currentDeposit(msg.sender) - withdraws[msg.sender];\\n        require(amount > 0, 'Presale: unable to withdraw that amount at this time!');\\n\\n        withdraws[msg.sender] = withdraws[msg.sender] + amount;\\n\\n        uint256 burned = 0;\\n        uint256 maxAlloc = allowedAllocation(msg.sender);\\n        uint256 curAlloc = securedAllocation(msg.sender);\\n\\n        if (!salePremature && maxAlloc > curAlloc && fine > 0 && fineDivisor > 0) {\\n            burned = amount * fine / fineDivisor;\\n            amount = amount - burned;\\n        }\\n        if (amount != 0) {\\n            IERC20(depoToken).safeTransfer(address(msg.sender), amount);\\n            emit Withdrawn(msg.sender, amount);\\n        }\\n        if (burned != 0) {\\n            depoToken.burn(burned);\\n            uint256 newBurned = vault.decreasePeggedAmount(address(msg.sender), burned);\\n            require(newBurned == burned, 'Presale: unable to burn that number of funds');\\n            emit Withdrawn(address(0), burned);\\n        }\\n    }\\n\\n    function release() external payable collectFee('release') {\\n        updateState();\\n        require(isReleaseAccepted(), 'Presale: unable to release yet!');\\n\\n        uint256 securedAlloc = securedAllocation(msg.sender);\\n        uint256 currentAlloc = currentAllocation(msg.sender);\\n\\n        uint256 unlockAmount = ((currentAlloc - securedAlloc) * multiply / 1000) - releases[msg.sender];\\n        require(releases[msg.sender] == 0, 'Presale: funds were already released!');\\n        require(unlockAmount > 0, 'Presale: no overbalance found');\\n\\n        uint256 actualAmount = saleToken.balanceOf(address(this));\\n        if (unlockAmount > actualAmount) {\\n            unlockAmount = actualAmount;\\n        }\\n\\n        uint256 lockedAmount = raisedAmount - freezeAmount;\\n        if (unlockAmount > actualAmount - lockedAmount) {\\n            unlockAmount = actualAmount - lockedAmount;\\n        }\\n        require(unlockAmount > 0, 'Presale: no funds available for release!');\\n        releases[msg.sender] = releases[msg.sender] + unlockAmount;\\n\\n        saleToken.safeTransfer(address(msg.sender), unlockAmount);\\n        emit Released(msg.sender, unlockAmount);\\n    }\\n\\n    function deliver(address addr, uint256 amount) external payable collectFee('deliver') onlyOwner {\\n        updateState();\\n        require(isReleaseAccepted(), 'Presale: unable to release yet!');\\n\\n        uint256 unlockAmount = amount;\\n        uint256 queuedAmount = raisedAmount - freezeAmount;\\n        if (unlockAmount > queuedAmount) {\\n            unlockAmount = queuedAmount;\\n        }\\n        require(unlockAmount > 0, 'Presale: funds were already delivered!');\\n\\n        uint256 actualAmount = saleToken.balanceOf(address(this));\\n        if (unlockAmount > actualAmount) {\\n            unlockAmount = actualAmount;\\n        }\\n        require(unlockAmount > 0, 'Presale: funds were already delivered!');\\n        freezeAmount = freezeAmount + unlockAmount;\\n\\n        saleToken.safeTransfer(addr, unlockAmount);\\n        emit Delivered(msg.sender, unlockAmount);\\n    }\\n\\n    function computeAllocation(address addr, uint256 amount) private view returns (uint256) {\\n        uint256 newAmount = amount;\\n        bool isInvestor = isInvestorAllowed(addr);\\n        bool isEveryone = isEveryoneAllowed();\\n        if (raisedAmount + newAmount > targetAmount) {\\n            newAmount = targetAmount - raisedAmount;\\n        }\\n        if (isInvestor) {\\n            uint256 misAmount = missingAllocation(addr);\\n            if (newAmount > misAmount) {\\n                newAmount = misAmount;\\n            }\\n            return newAmount;\\n        }\\n        if (isEveryone) {\\n            uint256 curAmount = currentAllocation(addr);\\n            if (minAllocate != 0 && curAmount + newAmount < minAllocate) {\\n                newAmount = 0;\\n            }\\n            if (maxAllocate != 0 && curAmount > maxAllocate) {\\n                newAmount = 0;\\n            }\\n            if (maxAllocate != 0 && curAmount + newAmount > maxAllocate) {\\n                newAmount = maxAllocate - curAmount;\\n            }\\n            return newAmount;\\n        }\\n        return 0;\\n    }\\n\\n    function updateState() private {\\n        if (stage == 0) {\\n            if (!startInProgress) {\\n                return;\\n            }\\n            if (realStartBlock == 0 && startBlock > 0 && block.number >= startBlock) {\\n                updateStage(1);\\n                return updateState();\\n            }\\n        }\\n        if (stage == 1) {\\n            if (realStartBlock == 0) {\\n                realStartBlock = block.number;\\n            }\\n            if (realPivotBlock == 0 && pivotBlock > 0 && block.number >= pivotBlock) {\\n                updateStage(2);\\n                return updateState();\\n            }\\n        }\\n        if (stage == 2) {\\n            if (realPivotBlock == 0) {\\n                realPivotBlock = block.number;\\n            }\\n            if (realCloseBlock == 0 && raisedAmount + remainAmount >= targetAmount) {\\n                updateStage(3);\\n                return updateState();\\n            }\\n            if (realCloseBlock == 0 && closeBlock > 0 && block.number >= closeBlock) {\\n                updateStage(3);\\n                return updateState();\\n            }\\n        }\\n        if (stage == 3) {\\n            if (realCloseBlock == 0 && raisedAmount + remainAmount >= targetAmount) {\\n                updateStage(4);\\n                return updateState();\\n            }\\n            if (realCloseBlock == 0 && closeInProgress) {\\n                updateStage(4);\\n                return updateState();\\n            }\\n        }\\n        if (stage == 4) {\\n            if (realCloseBlock == 0) {\\n                realCloseBlock = block.number;\\n                exitPresale(); // close for good\\n            }\\n        }\\n    }\\n\\n    function updateStage(uint256 _stage) private {\\n        stage = _stage;\\n        emit StagePushed(block.number, stage);\\n    }\\n\\n    function exitPresale() private {\\n        uint256 one = 1000;\\n        uint256 currentBalance = sumAllocates;\\n        multiply = one;\\n        if (currentBalance > secureAmount) {\\n            multiply = one * (raisedAmount - secureAmount) / (currentBalance - secureAmount);\\n        }\\n        if (multiply > one) {\\n            multiply = one;\\n        }\\n        multiply = one - multiply;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Token/IERC20Delegated.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"./IERC20DelegatedBurn.sol\\\";\\nimport \\\"./IERC20DelegatedMint.sol\\\";\\n\\ninterface IERC20Delegated is IERC20DelegatedBurn, IERC20DelegatedMint {}\\n\"\r\n    },\r\n    \"contracts/Token/IERC20DelegatedBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20DelegatedBurn is IERC20 {\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFor(address addr, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Token/IERC20DelegatedMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20DelegatedMint is IERC20 {\\n\\n    function mint(uint256 amount) external;\\n\\n    function mintFor(address addr, uint256 amount) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"CloseBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAllocate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAllocate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"}],\"name\":\"ConstraintChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeConfigureChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"PivotBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"SaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"SaleStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"StagePushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"StartBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depoToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"saleToken\",\"type\":\"address\"}],\"name\":\"TokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"VaultAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fine\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"WithdrawFineChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"allowedAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"configureFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"currentAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"currentDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depoToken\",\"outputs\":[{\"internalType\":\"contract IERC20Delegated\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"depositToAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fineDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iniDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllocateAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCountingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDepositAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEveryoneAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isInvestorAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPreCloseAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReleaseAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllocate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAllocate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"missingAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pivotBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realCloseBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realPivotBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secureAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"securedAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_closeBlock\",\"type\":\"uint256\"}],\"name\":\"setCloseBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAllocate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllocate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount_\",\"type\":\"uint256\"}],\"name\":\"setConstraint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"methods\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"setFeesConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pivotBlock\",\"type\":\"uint256\"}],\"name\":\"setPivotBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Delegated\",\"name\":\"_depoToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_saleToken\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILaunchpadVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_divisor\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupFlag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumAllocates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract ILaunchpadVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollectedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawnFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LaunchpadPresale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}