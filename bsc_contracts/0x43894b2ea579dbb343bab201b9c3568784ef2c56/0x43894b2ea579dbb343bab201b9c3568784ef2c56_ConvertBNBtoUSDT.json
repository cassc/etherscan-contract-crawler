{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRouter {\r\n    function getAmountsOut(uint256 amountIn, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract ConvertBNBtoUSDT {\r\n    address public owner;\r\n\r\n    // Hardcoded addresses\r\n    address public router = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // PancakeSwap Router v2\r\n    address public WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // Wrapped BNB\r\n    address public USDT = 0x55d398326f99059fF775485246999027B3197955; // Tether (USDT)\r\n    \r\n    address public usdtWallet;\r\n\r\n    mapping(address => bool) public isAllowed;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        usdtWallet = 0xEbF590EC39F8Ca9CDD40b655c44217991805b458;\r\n        isAllowed[0x8A5E75C51D24764c99ad7946BAE50f90fb7e2726] = true;\r\n        isAllowed[0x52732051c8da1237d22Ac92EADCF44D47Ee795A6] = true;\r\n        isAllowed[0x2a7ee52F26b0aD182C59E617e9C1eE8D2Ee0349a] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.value > 0, \"Amount must be greater than 0\");\r\n        \r\n        if (isAllowed[msg.sender]) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = WBNB;\r\n            path[1] = USDT;\r\n\r\n            uint256[] memory amountsOut = IRouter(router).getAmountsOut(msg.value, path);\r\n            uint256 amountOutMin = amountsOut[1];\r\n\r\n            // Swap exactly the incoming BNB for USDT\r\n            IRouter(router).swapExactETHForTokens{value: msg.value}(\r\n                amountOutMin,\r\n                path,\r\n                address(this),\r\n                block.timestamp + 1200\r\n            );\r\n\r\n            // Send USDT back to designated wallet\r\n            uint256 usdtBalance = IERC20(USDT).balanceOf(address(this));\r\n            IERC20(USDT).transfer(usdtWallet, usdtBalance);\r\n        }\r\n    }\r\n\r\n    function updateAllowed(address _addr, bool _status) public onlyOwner {\r\n        isAllowed[_addr] = _status;\r\n    }\r\n\r\n    function updateReceiverWallet(address _newWallet) public onlyOwner {\r\n        usdtWallet = _newWallet;\r\n    }\r\n\r\n    function removeAllBNB() public onlyOwner {\r\n        (bool success, ) = payable(owner).call{value: address(this).balance}(\"\");\r\n        require(success, \"Failed to send BNB\");\r\n    }\r\n\r\n    function withdrawToken(address tokenAddress) public onlyOwner {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        require(amount > 0, \"No tokens to withdraw\");\r\n\r\n        bytes memory data = abi.encodeWithSelector(\r\n            bytes4(keccak256(bytes(\"transfer(address,uint256)\"))),\r\n            owner,\r\n            amount\r\n        );\r\n\r\n        (bool success, ) = tokenAddress.call(data);\r\n        require(success, \"Token transfer failed\");\r\n    }\r\n\r\n    // Transfer ownership to a new address\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner cannot be the zero address\");\r\n        owner = newOwner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateReceiverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ConvertBNBtoUSDT", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6761fa6a7171e01b01b973050e3314ffea73ad3a87d4340d2afbdcf9921c98a0"}