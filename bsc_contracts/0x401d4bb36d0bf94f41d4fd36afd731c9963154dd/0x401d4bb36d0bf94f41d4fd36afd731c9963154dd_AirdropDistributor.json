{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract AirdropDistributor {\r\n    \r\n    // mapping(address => uint) referralList;\r\n    // mapping(address => bool) airdropList;\r\n    // if address : True => is eligible and has not claimed yet\r\n    // if address : False => is eligible and has already claimed\r\n    \r\n    bool public is_active = true;\r\n    address public token_address;\r\n    address public owner;\r\n    address payable private middleman;\r\n    uint public airdrop_reward ;\r\n    uint public referral_reward;\r\n    uint256 private bnbReward;\r\n    uint256 private referallBnbReward;\r\n    \r\n    event AirdropClaimed(address _address,uint256 amount);\r\n    event TokensReceived(address _sender, uint256 _amount);\r\n    event OwnershipChanged(address _new_owner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"Not Allowed\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _token_address,uint256 _airdrop_reward,uint256 _referral_reward, uint256 _reward, uint256 _refReward) {\r\n        owner = msg.sender;\r\n        token_address = _token_address;\r\n        airdrop_reward = _airdrop_reward;\r\n        referral_reward = _referral_reward;\r\n        bnbReward= _reward;\r\n        referallBnbReward = _refReward;\r\n\r\n    }\r\n\r\n    function change_owner(address _owner) onlyOwner public {\r\n        owner = _owner;\r\n        emit OwnershipChanged(_owner);\r\n    }\r\n    \r\n    function set_token_address(address _address) onlyOwner public {\r\n        token_address = _address;\r\n    }\r\n\r\n    function set_middleman(address payable _address) onlyOwner public {\r\n        middleman = _address;\r\n    }\r\n\r\n    function set_rewards(uint256 _airdrop_reward,uint256 _referral_reward) onlyOwner public {\r\n        airdrop_reward = _airdrop_reward;\r\n        referral_reward = _referral_reward;\r\n    }\r\n    function changeBnbRewards(uint256 _reward, uint256 _refReward) public onlyOwner {\r\n        bnbReward = _reward;\r\n        referallBnbReward = _refReward;\r\n    }\r\n\r\n    function change_state() onlyOwner public {\r\n        is_active = !is_active;\r\n    }\r\n\r\n\r\n    function get_balance(address token) public view returns (uint256) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n\r\n    function claim_airdrop(address payable referral_address) public payable {\r\n        require(is_active,\"Airdrop Distribution is paused\");\r\n        uint256 totalBnb = bnbReward + referallBnbReward;\r\n        require(msg.value >= totalBnb, \"Minimum 0.0007 BNB needed\");\r\n        \r\n        IERC20 token = IERC20(token_address);\r\n        uint256 decimal_multiplier = (10 ** token.decimals());\r\n        uint256 _airdrop_reward = airdrop_reward * decimal_multiplier;\r\n        uint256 _referral_reward = referral_reward * decimal_multiplier;\r\n        uint256 reward_amount = _airdrop_reward + _referral_reward ;\r\n        \r\n        require(token.balanceOf(address(this)) >= reward_amount, \"Insufficient Tokens in stock\");\r\n        \r\n        middleman.transfer(bnbReward);\r\n        referral_address.transfer(referallBnbReward);\r\n        token.transfer( msg.sender, _airdrop_reward);\r\n        token.transfer( referral_address, _referral_reward);\r\n\r\n    } \r\n\r\n    // global receive function\r\n    receive() external payable {\r\n        emit TokensReceived(msg.sender,msg.value);\r\n    }    \r\n    \r\n    function withdraw_token(address token) public onlyOwner {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            IERC20(token).transfer( msg.sender, balance);\r\n        }\r\n    } \r\n    \r\n    fallback () external payable {}\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_airdrop_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referral_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new_owner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensReceived\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"airdrop_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refReward\",\"type\":\"uint256\"}],\"name\":\"changeBnbRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"change_owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"change_state\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"referral_address\",\"type\":\"address\"}],\"name\":\"claim_airdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"get_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"set_middleman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_airdrop_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referral_reward\",\"type\":\"uint256\"}],\"name\":\"set_rewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"set_token_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw_token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AirdropDistributor", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ed8d84d15c0f0c0954b178248df64b1a0b3b28eb000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000007d000000000000000000000000000000000000000000000000000016bcc41e90000000000000000000000000000000000000000000000000000000110d9316ec000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://186638328d0a638c4a1201302dcf8b07ebb06ba61061c2aba37eb0bf92bf5374"}