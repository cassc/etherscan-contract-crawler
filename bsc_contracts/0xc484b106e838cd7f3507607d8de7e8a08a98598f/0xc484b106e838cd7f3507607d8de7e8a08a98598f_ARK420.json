{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ARK420.sol\": {\r\n      \"content\": \"pragma solidity =0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// ARK420 token main contract (2022)\\n//\\n// Symbol       : ARK420\\n// Name         : Ark420\\n// Total supply : 4.200.000.000 (burnable)\\n// Decimals     : 18\\n// ----------------------------------------------------------------------------\\n// SPDX-License-Identifier: MIT\\n// ----------------------------------------------------------------------------\\n\\ninterface IBEP20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function getOwner() external view returns (address);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\ncontract Ownable {\\n    address public owner;\\n    address public newOwner;\\n\\n    event OwnershipTransferred(address indexed from, address indexed to);\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Ownable: Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address transferOwner) external onlyOwner {\\n        require(transferOwner != newOwner);\\n        newOwner = transferOwner;\\n    }\\n\\n    function acceptOwnership() virtual public {\\n        require(msg.sender == newOwner);\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n        newOwner = address(0);\\n    }\\n}\\n\\ncontract Pausable is Ownable {\\n    event Pause();\\n    event Unpause();\\n\\n    bool public paused = false;\\n\\n\\n    modifier whenNotPaused() {\\n        require(!paused);\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused);\\n        _;\\n    }\\n\\n    function pause() onlyOwner whenNotPaused public {\\n        paused = true;\\n        Pause();\\n    }\\n\\n    function unpause() onlyOwner whenPaused public {\\n        paused = false;\\n        Unpause();\\n    }\\n}\\n\\ncontract ARK420 is IBEP20, Ownable, Pausable {\\n    mapping (address => mapping (address => uint)) private _allowances;\\n    \\n    mapping (address => uint) private _unfrozenBalances;\\n\\n    mapping (address => uint) private _vestingNonces;\\n    mapping (address => mapping (uint => uint)) private _vestingAmounts;\\n    mapping (address => mapping (uint => uint)) private _unvestedAmounts;\\n    mapping (address => mapping (uint => uint)) private _vestingTypes; //0 - multivest, 1 - single vest, > 2 give by vester id\\n    mapping (address => mapping (uint => uint)) private _vestingReleaseStartDates;\\n    mapping (address => mapping (uint => uint)) private _vestingSecondPeriods;\\n\\n    uint private _totalSupply = 4_200_000_000e18;\\n    string private constant _name = \\\"ARK420\\\";\\n    string private constant _symbol = \\\"ARK420\\\";\\n    uint8 private constant _decimals = 18;\\n\\n    uint public constant vestingSaleReleaseStart = 1650412800; // 00:00:00 20 April 2022 GMT+00:00 1650412800\\n    uint public constant vestingSaleSecondPeriod = 365 days; // 1/365 each day\\n\\n    uint public constant vestingFoundationReleaseStart = 1642809600 + 60 days; // 00:00:00 22 January 2022 GMT+00:00 + 2 Months 2022 GMT+00:00 1642809600\\n    uint public constant vestingFoundationSecondPeriod = 1 seconds; // immediately release\\n\\n    address public stakingContract; // can be set once\\n    uint public constant stakingContractRelease = 1650412800; // 00:00:00 20 April 2022 GMT+00:00 1650412800\\n    uint public stakingAmount;  // will be transferred all at once to specific contract after release time\\n\\n    address public liquidityContract; // can be set once\\n    uint public constant liquidityContractRelease = 1650412800; // 00:00:00 20 April 2022 GMT+00:00 1650412800\\n    uint public liquidityAmount;  // will be transferred all at once to specific contract after release time\\n\\n    address public exchangeListingContract; // can be set once\\n    uint public constant exchangeListingContractRelease = 1650412800; // 00:00:00 20 April 2022 GMT+00:00 1650412800\\n    uint public exchangeListingAmount;  // will be transferred all at once to specific contract after release time\\n\\n    address public advisorsAndTeamContract; // can be set once\\n    uint public constant advisorsAndTeamContractRelease = 1642809600 + 14 days; // 00:00:00 22 January 2022 GMT+00:00 + 2 Weeks 1642809600\\n    uint public advisorsAndTeamAmount;  // will be transferred all at once to specific contract after release time\\n\\n    uint public giveAmount;\\n    mapping (address => bool) public vesters;\\n\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    mapping (address => uint) public nonces;\\n\\n    event Unvest(address indexed user, uint amount);\\n\\n    constructor (address[] memory foundation, address support) {\\n        require(support != address(0), \\\"ARK420: Zero address\\\");\\n        require(support != msg.sender, \\\"ARK420: Owner can't be support address\\\");\\n        _unfrozenBalances[owner] = _totalSupply;\\n\\n        uint256 toFoundation = _totalSupply * 25 / 100; // 25% to foundation\\n        for (uint i = 0; i < foundation.length; i++) {\\n            _vest(foundation[i], toFoundation / foundation.length, 1, vestingFoundationReleaseStart, vestingFoundationReleaseStart + vestingFoundationSecondPeriod);\\n        }\\n\\n        uint256 toAdvisors = _totalSupply * 5 / 100; // 5% to advisors\\n        uint256 toTeam = _totalSupply * 11 / 100; // 11% to team\\n        advisorsAndTeamAmount += toAdvisors + toTeam;\\n        _unfrozenBalances[owner] -= advisorsAndTeamAmount;\\n\\n        uint256 toExchangeListing = _totalSupply * 8 / 100; // 8% to exchange listing\\n        exchangeListingAmount += toExchangeListing;\\n        _unfrozenBalances[owner] -= exchangeListingAmount;\\n\\n        uint256 toStaking = _totalSupply * 25 / 100; // 25% to staking\\n        stakingAmount += toStaking;\\n        _unfrozenBalances[owner] -= stakingAmount;\\n\\n        uint256 toLiquidity = _totalSupply * 1 / 100; // 1% to liquidity\\n        liquidityAmount += toLiquidity;\\n        _unfrozenBalances[owner] -= liquidityAmount;\\n        \\n        uint256 toSupport = _unfrozenBalances[owner] * 4 / 100; // 4% of public sale to vested for support wallet\\n        _vest(support, toSupport, 1, vestingSaleReleaseStart, vestingSaleReleaseStart + vestingSaleSecondPeriod);\\n\\n        // rest to p2p\\n        emit Transfer(address(0), owner, _unfrozenBalances[owner]);\\n\\n        uint chainId = block.chainid;\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(_name)),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n        giveAmount = _totalSupply / 10;\\n    }\\n\\n    receive() payable external {\\n        revert();\\n    }\\n\\n    function getOwner() public override view returns (address) {\\n        return owner;\\n    }\\n\\n    function approve(address spender, uint amount) external override whenNotPaused returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transfer(address recipient, uint amount) external override whenNotPaused returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint amount) external override whenNotPaused returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        \\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance >= amount, \\\"ARK420::transferFrom: transfer amount exceeds allowance\\\");\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external whenNotPaused {\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"ARK420::permit: invalid signature\\\");\\n        require(signatory == owner, \\\"ARK420::permit: unauthorized\\\");\\n        require(block.timestamp <= deadline, \\\"ARK420::permit: signature expired\\\");\\n\\n        _allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function increaseAllowance(address spender, uint addedValue) external returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint subtractedValue) external returns (bool) {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ARK420::decreaseAllowance: decreased allowance below zero\\\");\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    function unvest() external whenNotPaused returns (uint unvested) {\\n        require (_vestingNonces[msg.sender] > 0, \\\"ARK420::unvest:No vested amount\\\");\\n        for (uint i = 1; i <= _vestingNonces[msg.sender]; i++) {\\n            if (_vestingAmounts[msg.sender][i] == _unvestedAmounts[msg.sender][i]) continue;\\n            if (_vestingReleaseStartDates[msg.sender][i] > block.timestamp) break;\\n            uint toUnvest = (block.timestamp - _vestingReleaseStartDates[msg.sender][i]) * _vestingAmounts[msg.sender][i] / (_vestingSecondPeriods[msg.sender][i] - _vestingReleaseStartDates[msg.sender][i]);\\n            if (toUnvest > _vestingAmounts[msg.sender][i]) {\\n                toUnvest = _vestingAmounts[msg.sender][i];\\n            } \\n            uint totalUnvestedForNonce = toUnvest;\\n            toUnvest -= _unvestedAmounts[msg.sender][i];\\n            unvested += toUnvest;\\n            _unvestedAmounts[msg.sender][i] = totalUnvestedForNonce;\\n        }\\n        _unfrozenBalances[msg.sender] += unvested;\\n        emit Unvest(msg.sender, unvested);\\n    }\\n\\n    function give(address user, uint amount, uint vesterId) external {\\n        require (giveAmount > amount, \\\"ARK420::give: give finished\\\");\\n        require (vesters[msg.sender], \\\"ARK420::give: not vester\\\");\\n        giveAmount -= amount;\\n        _vest(user, amount, vesterId, vestingSaleReleaseStart, vestingSaleReleaseStart + vestingSaleSecondPeriod);\\n    }\\n\\n    function vest(address user, uint amount) external {\\n        require (vesters[msg.sender], \\\"ARK420::vest: not vester\\\");\\n        _vest(user, amount, 1, vestingSaleReleaseStart, vestingSaleReleaseStart + vestingSaleSecondPeriod);\\n    }\\n\\n    function setAdvisorsAndTeamContract(address advisorsAndTeam) external onlyOwner { \\n        require (advisorsAndTeam != address(0), \\\"ARK420::setAdvisorsAndTeamContract: advisors and team address should be non zero\\\");\\n        require (advisorsAndTeamContract == address(0), \\\"ARK420::setAdvisorsAndTeamContract: advisors and team address already set\\\");\\n        advisorsAndTeamContract = advisorsAndTeam;\\n    }\\n\\n    function releaseToAdvisorsAndTeamContract() external onlyOwner {\\n        require (advisorsAndTeamContract != address(0), \\\"ARK420::releaseToAdvisorsAndTeamContract: Advisors And Team Contract address should be set\\\");\\n        require (advisorsAndTeamAmount > 0, \\\"ARK420::releaseToAdvisorsAndTeamContract: Advisors And Team Contract amount should be more then 0\\\");\\n        require(block.timestamp > advisorsAndTeamContractRelease, \\\"ARK420::releaseToAdvisorsAndTeamContract: too early to release Advisors And Team amount\\\");\\n        _unfrozenBalances[advisorsAndTeamContract] += advisorsAndTeamAmount;\\n        advisorsAndTeamAmount = 0;\\n        emit Transfer(address(0), advisorsAndTeamContract, _unfrozenBalances[advisorsAndTeamContract]);\\n    }\\n\\n    function setExchangeListingContract(address exchangeListing) external onlyOwner { \\n        require (exchangeListing != address(0), \\\"ARK420::setExchangeListingContract: exchange listing address should be non zero\\\");\\n        require (exchangeListingContract == address(0), \\\"ARK420::setExchangeListingContract: exchange listing address already set\\\");\\n        exchangeListingContract = exchangeListing;\\n    }\\n\\n    function releaseToExchangeListingContract() external onlyOwner {\\n        require (exchangeListingContract != address(0), \\\"ARK420::releaseToExchangeListingContract: Exchange Listing address should be set\\\");\\n        require (exchangeListingAmount > 0, \\\"ARK420::releaseToExchangeListingContract: Exchange Listing amount should be more then 0\\\");\\n        require(block.timestamp > exchangeListingContractRelease, \\\"ARK420::releaseToExchangeListingContract: too early to release ExchangeListing amount\\\");\\n        _unfrozenBalances[exchangeListingContract] += exchangeListingAmount;\\n        exchangeListingAmount = 0;\\n        emit Transfer(address(0), exchangeListingContract, _unfrozenBalances[exchangeListingContract]);\\n    }\\n\\n    function setLiquidityContract(address liquidity) external onlyOwner { \\n        require (liquidity != address(0), \\\"ARK420::setLiquidityContract: liquidity address should be non zero\\\");\\n        require (liquidityContract == address(0), \\\"ARK420::setLiquidityContract: liquidity address already set\\\");\\n        liquidityContract = liquidity;\\n    }\\n\\n    function releaseToLiquidityContract() external onlyOwner {\\n        require (liquidityContract != address(0), \\\"ARK420::releaseToLiquidityContract: liquidity address should be set\\\");\\n        require (liquidityAmount > 0, \\\"ARK420::releaseToLiquidityContract: liquidity amount should be more then 0\\\");\\n        require(block.timestamp > liquidityContractRelease, \\\"ARK420::releaseToLiquidityContract: too early to release liquidity amount\\\");\\n        _unfrozenBalances[liquidityContract] += liquidityAmount;\\n        liquidityAmount = 0;\\n        emit Transfer(address(0), liquidityContract, _unfrozenBalances[liquidityContract]);\\n    }\\n\\n    function setStakingContract(address staking) external onlyOwner { \\n        require (staking != address(0), \\\"ARK420::setStakingContract: staking address should be non zero\\\");\\n        require (stakingContract == address(0), \\\"ARK420::setStakingContract: staking address already set\\\");\\n        stakingContract = staking;\\n    }\\n\\n    function releaseToStakingContract() external onlyOwner {\\n        require (stakingContract != address(0), \\\"ARK420::releaseToStaking: staking address should be set\\\");\\n        require (stakingAmount > 0, \\\"ARK420::releaseToStaking: staking amount should be more then 0\\\");\\n        require(block.timestamp > stakingContractRelease, \\\"ARK420::releaseToStaking: too early to release staking amount\\\");\\n        _unfrozenBalances[stakingContract] += stakingAmount;\\n        stakingAmount = 0;\\n        emit Transfer(address(0), stakingContract, _unfrozenBalances[stakingContract]);\\n    }\\n\\n    function vestPurchase(address user, uint amount) external {\\n        require (vesters[msg.sender], \\\"ARK420::vestPurchase: not vester\\\");\\n        _transfer(msg.sender, owner, amount);\\n        _vest(user, amount, 1, vestingSaleReleaseStart, vestingSaleReleaseStart + vestingSaleSecondPeriod);\\n    }\\n\\n    function burnTokens(uint amount) external onlyOwner returns (bool success) {\\n        require(amount <= _unfrozenBalances[owner], \\\"ARK420::burnTokens: exceeds available amount\\\");\\n\\n        uint256 ownerBalance = _unfrozenBalances[owner];\\n        require(ownerBalance >= amount, \\\"ARK420::burnTokens: burn amount exceeds owner balance\\\");\\n\\n        _unfrozenBalances[owner] = ownerBalance - amount;\\n        _totalSupply -= amount;\\n        emit Transfer(owner, address(0), amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function decimals() external override pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function totalSupply() external view override returns (uint) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view override returns (uint) {\\n        uint amount = _unfrozenBalances[account];\\n        if (_vestingNonces[account] == 0) return amount;\\n        for (uint i = 1; i <= _vestingNonces[account]; i++) {\\n            amount = amount + _vestingAmounts[account][i] - _unvestedAmounts[account][i];\\n        }\\n        return amount;\\n    }\\n\\n    function availableForUnvesting(address user) external view returns (uint unvestAmount) {\\n        if (_vestingNonces[user] == 0) return 0;\\n        for (uint i = 1; i <= _vestingNonces[user]; i++) {\\n            if (_vestingAmounts[user][i] == _unvestedAmounts[user][i]) continue;\\n            if (_vestingReleaseStartDates[user][i] > block.timestamp) break;\\n            uint toUnvest = (block.timestamp - _vestingReleaseStartDates[user][i]) * _vestingAmounts[user][i] / (_vestingSecondPeriods[user][i] - _vestingReleaseStartDates[user][i]);\\n            if (toUnvest > _vestingAmounts[user][i]) {\\n                toUnvest = _vestingAmounts[user][i];\\n            } \\n            toUnvest -= _unvestedAmounts[user][i];\\n            unvestAmount += toUnvest;\\n        }\\n    }\\n\\n    function availableForTransfer(address account) external view returns (uint) {\\n        return _unfrozenBalances[account];\\n    }\\n\\n    function vestingInfo(address user, uint nonce) external view returns (uint vestingAmount, uint unvestedAmount, uint vestingReleaseStartDate, uint vestingSecondPeriod, uint vestType) {\\n        vestingAmount = _vestingAmounts[user][nonce];\\n        unvestedAmount = _unvestedAmounts[user][nonce];\\n        vestingReleaseStartDate = _vestingReleaseStartDates[user][nonce];\\n        vestingSecondPeriod = _vestingSecondPeriods[user][nonce];\\n        vestType = _vestingTypes[user][nonce];\\n    }\\n\\n    function vestingNonces(address user) external view returns (uint lastNonce) {\\n        return _vestingNonces[user];\\n    }\\n\\n    function _approve(address owner, address spender, uint amount) private {\\n        require(owner != address(0), \\\"ARK420::_approve: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ARK420::_approve: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint amount) private {\\n        require(sender != address(0), \\\"ARK420::_transfer: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ARK420::_transfer: transfer to the zero address\\\");\\n\\n        uint256 senderAvailableBalance = _unfrozenBalances[sender];\\n        require(senderAvailableBalance >= amount, \\\"ARK420::_transfer: amount exceeds available for transfer balance\\\");\\n        _unfrozenBalances[sender] = senderAvailableBalance - amount;\\n        _unfrozenBalances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _vest(address user, uint amount, uint vestType, uint vestingReleaseStart, uint vestingReleaseSecondPeriod) private {\\n        require(user != address(0), \\\"ARK420::_vest: vest to the zero address\\\");\\n        require(vestingReleaseStart >= 0, \\\"ARK420::_vest: vesting release start date should be more then 0\\\");\\n        require(vestingReleaseSecondPeriod >= vestingReleaseStart, \\\"ARK420::_vest: vesting release end date should be more then start date\\\");\\n        uint nonce = ++_vestingNonces[user];\\n        _vestingAmounts[user][nonce] = amount;\\n        _vestingReleaseStartDates[user][nonce] = vestingReleaseStart;\\n        _vestingSecondPeriods[user][nonce] = vestingReleaseSecondPeriod;\\n        _unfrozenBalances[owner] -= amount;\\n        _vestingTypes[user][nonce] = vestType;\\n        emit Transfer(owner, user, amount);\\n    }\\n\\n    function multisend(address[] memory to, uint[] memory values) external onlyOwner returns (uint) {\\n        require(to.length == values.length);\\n        require(to.length < 100);\\n        uint sum;\\n        for (uint j; j < values.length; j++) {\\n            sum += values[j];\\n        }\\n        _unfrozenBalances[owner] -= sum;\\n        for (uint i; i < to.length; i++) {\\n            _unfrozenBalances[to[i]] += values[i];\\n            emit Transfer(owner, to[i], values[i]);\\n        }\\n        return(to.length);\\n    }\\n\\n    function multivest(address[] memory to, uint[] memory values, uint[] memory vestingReleaseStarts, uint[] memory vestingSecondPeriods) external onlyOwner returns (uint) { \\n        require(to.length == values.length);\\n        require(to.length < 100);\\n        uint sum;\\n        for (uint j; j < values.length; j++) {\\n            sum += values[j];\\n        }\\n        _unfrozenBalances[owner] -= sum;\\n        for (uint i; i < to.length; i++) {\\n            uint nonce = ++_vestingNonces[to[i]];\\n            _vestingAmounts[to[i]][nonce] = values[i];\\n            _vestingReleaseStartDates[to[i]][nonce] = vestingReleaseStarts[i];\\n            _vestingSecondPeriods[to[i]][nonce] = vestingSecondPeriods[i];\\n            _vestingTypes[to[i]][nonce] = 0;\\n            emit Transfer(owner, to[i], values[i]);\\n        }\\n        return(to.length);\\n    }\\n\\n    function updateVesters(address vester, bool isActive) external onlyOwner { \\n        vesters[vester] = isActive;\\n    }\\n\\n    function updateGiveAmount(uint amount) external onlyOwner { \\n        require (_unfrozenBalances[owner] > amount, \\\"ARK420::updateGiveAmount: exceed owner balance\\\");\\n        giveAmount = amount;\\n    }\\n    \\n    function transferAnyBEP20Token(address tokenAddress, uint tokens) external onlyOwner returns (bool success) {\\n        return IBEP20(tokenAddress).transfer(owner, tokens);\\n    }\\n\\n    function acceptOwnership() public override {\\n        uint amount = _unfrozenBalances[owner];\\n        _unfrozenBalances[newOwner] = amount;\\n        _unfrozenBalances[owner] = 0;\\n        emit Transfer(owner, newOwner, amount);\\n        super.acceptOwnership();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"foundation\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"support\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unvest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisorsAndTeamAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisorsAndTeamContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisorsAndTeamContractRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableForTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"availableForUnvesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unvestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeListingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeListingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeListingContractRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesterId\",\"type\":\"uint256\"}],\"name\":\"give\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityContractRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vestingReleaseStarts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vestingSecondPeriods\",\"type\":\"uint256[]\"}],\"name\":\"multivest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseToAdvisorsAndTeamContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseToExchangeListingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseToLiquidityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseToStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"advisorsAndTeam\",\"type\":\"address\"}],\"name\":\"setAdvisorsAndTeamContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeListing\",\"type\":\"address\"}],\"name\":\"setExchangeListingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"name\":\"setLiquidityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContractRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyBEP20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unvested\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateGiveAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"updateVesters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vestPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingFoundationReleaseStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingFoundationSecondPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"vestingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unvestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingReleaseStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingSecondPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"vestingNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingSaleReleaseStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingSaleSecondPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ARK420", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000d1c9b867b39cf7917700b63840068b612150d40b00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b6af0161dc5e324225b642140b600286c1f31fb0000000000000000000000001f6fe130c6d3968e63b7b5423979aad73d1c887c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}