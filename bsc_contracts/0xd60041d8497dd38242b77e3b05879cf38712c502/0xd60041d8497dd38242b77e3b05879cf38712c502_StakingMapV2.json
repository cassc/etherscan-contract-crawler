{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ContractStakingMapV2.sol\": {\r\n      \"content\": \"/********************** @2022 Wizarre, All rights reserved *********************\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nMMMMMMMMMmMMMMMMMMMMMMMNNMMMMNddNMMMMmmmmmNMMMMNddNMMMMNMMMMMMMMMMMMMMmMMMMMMMMM\\nMMMMMMMMdysNhoossydNMmosyyMM+ddd-NhssdNMMNdsshN-ddd+MMsysomMNdyssoohNysdMMMMMMMM\\nMMMMMMMMmss::NMMh/+o+/-ohhMMhhdm`:hNNmMMMMmMNy:.mdhhMNhho-/+o+/dMMN-:ssmMMMMMMMM\\nMMMMMMMMNoMhyhdNNNmsoyNh/:mMMMs.oNMhoNMMMMmodMNo.yMMMd:/hNyoymNNNdhyhNoNMMMMMMMM\\nMMMMMMMNy/:shhhhy/-syyhhy`.hho :hho-yhhhhhhy-shh: ohh.`yhhyyo./yhhhhs:/hNMMMMMMM\\nMMMMMMMd `+://sso:`.`---/:osoo.syhh+yyyssyyyohhyo-osso:/---`.`/oss//:o  mMMMMMMM\\nMMMMMMMd `s+s+:..``.-+yhmyddhhsmyoyosddyyddsoyoymsyhdhymhy+-.``..:+s+y  mMMMMMMM\\nMMMMMMMd  sm`  -shhy. sMNys+ho+ssymyoodmmhooydyos+oh+yyMMo -yhhs-  `ms  mMMMMMMM\\nMMMMMMMd `yds` `/ss+:/hddddhhodNNhdssyNMMNyssdhNNhshhddddh/:+ss/` `ydy  mMMMMMMM\\nMMMMMMMd  ooNh/-..`````     :sdhdssddshmmhsddsydhdo-     `````..-/dNoo  mMMMMMMM\\nMMMMMMMd `md+ymddysohs.   `odmmdoyNoNmohhoNNoNssdmmho`   .yhosyddmy+dm  mMMMMMMM\\nMMMMMMMd `Nmh+/oyo-+o` `  syMMsM/dy/NhdyhhhN:yd+MsMNyo  ` `o+-oyo:+hmm  mMMMMMMM\\nMMMMMMMd  -NNy+/+yy.  :../odyhohssohyhsooshshossh+hyd+/`-:  -yy+/+yNm.  mMMMMMMM\\nMMMMMMMd -/-::yNN/   +/`so/shhssyhyy+yy++hy+hshysyhho:oo`++   +Nms::-/. mMMMMMMM\\nMMMMMMMd oMy/MMh.   ss hMNNhs+:/++++/yhyyhy/++++::oshNhNy ys   .hMM:hM+ mMMMMMMM\\nMMMMMMMd hMooMo    ym`oMdhymhyo/    `ooo+oo`    .shhdmyhM+`ms    oM+oMy mMMMMMMM\\nMMMMMMMd mMsy-    yM:`Nmsdyhysys:  ` `:ys/` ` `hmMMdsshsom /My    :ysMm mMMMMMMM\\nMMMMMMMd.MMd.    yMh :yssMNhshymNy: /``Nm .: .yNdMN/hmMddM- dMs    .mMM`mMMMMMMM\\nMMMMMMMdoMh`    oMM- :omdoMMMMdhddm/ s.--.s /mhshMhydhhdoN/ :MM+    `dM+mMMMMMMM\\nMMMMMMMdmh`    :MMd  /yhhh+s:ysyy+hN+`d..d`+ddhyyssNNyddss+  mMM-    `ddmMMMMMMM\\nMMMMMMMMh`     dMMy  :hodoNoy+hysdmym-+dd/-mymhdhdyd+NNmyN-  hMMd     `hMMMMMMMM\\nMMMMMMMM.      .sNMh- /yddyms+NMm:mmhs`Nm yMmhdssyhs+dy+o: -dMNs`      .MMMMMMMM\\nMMMMMMMNd:       .sNNs.`sNNyhhoNMm+dh-`dd`:Moymhhdyhsdho`.sNNs.       /mMMMMMMMM\\nMMMMMMMdhmo:`      .odm+`:sddmmsmmo/o +--+ /dymddhhmms-`+md+`      `:sNymMMMMMMM\\nMMMMMMMd/sy:do-      `:hh/`:sdmdydm- ./  /``odmyhydo-./dy:`      -sh:yy:mMMMMMMM\\nMMMMMMMd`m/.+shh+-      .os/`:ohdds  - // - `hMNhs-./s+.     `-+hhs/./m mMMMMMMM\\nMMMMMMMd -.mho/-hNds:.    `-/-`.oo`    --    `oo-`-/-`   `./sdNy-/sdm`- mMMMMMMM\\nMMMMMMMd  oMoo/.mNyooss+/-`  ``       `/:`       ``  .-/+ssoohMm.+osMo  mMMMMMMM\\nMMMMMMMd  myssh+hN.`o++/oNmo+/-.`  `.+hddh/.`  `.-++smm+/++o`.Nhohssyd  mMMMMMMM\\nMMMMMMMd  ++++osys-..--:/++:/yso+/:/o+-``-+o/:/+oss::++/:--..:syso++++  mMMMMMMM\\nMMMMMMMMh/.`-+hdmoohdmmmmddhmmmy+ooh/ .ys` +hoo+ymmmhddmmmmdhoomdh+-`.+hMMMMMMMM\\nMMMMMMMMMNmhs.`::`yhymdyoshNdsddyy. .+mNNm+` -yydhsmNhsoymdyhs /:`.sdmNMMMMMMMMM\\nMMMMMMMMMsohh.ymhy+//+./NMNssh+::.`+dmymmymd/`.::+hosNMm/.+//+yhmy.dh+yMMMMMMMMM\\nMMMMMMMMMNhysmMMMMMMMMh+MNhNMMMNNMdysyNMMNssydMNNMMMNhNN+dMMMMMMMMmsydNMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM*/\\n\\n\\n// SPDX-License-Identifier: None\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nabstract contract StakingMapV1Contract {\\n    struct Stake {\\n        uint32 createdAt;\\n        uint32 endAt;\\n        uint32 age;\\n        uint32 stakesAmount;\\n    }\\n\\n    function getStakes(address _userAddress) external virtual view returns (Stake[] memory _stakes, uint256[] memory _indexes);\\n\\n    function stakesCountForAddress(address _userAddress) external virtual view returns (uint256);\\n\\n    function getActiveStakes(address _userAddress) external virtual view returns (Stake[] memory _stakes, uint256[] memory _indexes);\\n}\\n\\ncontract StakingMapV2 is Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public TOKEN;\\n    StakingMapV1Contract public STAKING_MAP_V1;\\n    uint256 public TOKEN_SINGLE_STAKE_AMOUNT = 100000 * 10 ** 18; //100k\\n    bool public BLOCK_NEW_STAKES = false;\\n    uint32 public START_TIMESTAMP = 1647698400; //  19 March 2022 14:00:00 UTC (start 1st staking map)\\n    Map[] MAPS;\\n    Stake[] public STAKES;\\n    mapping(address => uint256[]) public stakesOf;\\n    mapping(uint256 => address) public ownerOf;\\n\\n    struct Map {\\n        uint32 period; // absolute period from START_TIMESTAMP\\n        uint32 completionBonusPercent;\\n    }\\n\\n    struct Stake {\\n        uint32 createdAt;\\n        uint32 endAt;\\n        uint32 age;\\n        uint32 stakesAmount;\\n    }\\n\\n    struct StakeOutput {\\n        uint32 createdAt;\\n        uint32 endAt;\\n        uint32 age;\\n        uint32 stakesAmount;\\n        uint32 startPos; // starting position period\\n        uint32 currentPos; // current position on map, starting from 0 on 1st map period\\n        uint32[] bonusPeriods;\\n        uint32[] bonusPercents;\\n        uint8 mapVersion;\\n    }\\n\\n    event Staked(uint256 stakeId, address userAddress, uint256 stakesAmount);\\n    event ReducedStake(uint256 stakeId, address userAddress, uint32 beforeAmount, uint256 reduceBy);\\n\\n    constructor(\\n        IERC20 _token,\\n        StakingMapV1Contract _stakingMapV1\\n    ) {\\n        TOKEN = _token;\\n        STAKING_MAP_V1 = _stakingMapV1;\\n\\n        // 1st map bonus - 120days, 25%\\n        uint32[] memory _period = new uint32[](1);\\n        uint32[] memory _bonus = new uint32[](1);\\n        _period[0] = 10368000;\\n        _bonus[0] = 25;\\n        setMaps(_period, _bonus);\\n    }\\n\\n    function setStartTimestamp(uint32 _startTimestamp) external onlyOwner {\\n        START_TIMESTAMP = _startTimestamp;\\n    }\\n\\n    function setStakingMapV1(StakingMapV1Contract _stakingMapV1) external onlyOwner {\\n        STAKING_MAP_V1 = _stakingMapV1;\\n    }\\n\\n    function setMaps(uint32[] memory _period, uint32[] memory _completionBonusPercent) public onlyOwner {\\n        require(_period.length == _completionBonusPercent.length, \\\"Both parameters length must be the same\\\");\\n\\n        delete MAPS;\\n        for (uint256 i = 0; i < _period.length; i++) {\\n            MAPS.push(\\n                Map({\\n                    period: _period[i],\\n                    completionBonusPercent: _completionBonusPercent[i]\\n                }));\\n        }\\n    }\\n\\n    function setBlockNewStakes(bool _blockNewStakes) external onlyOwner {\\n        BLOCK_NEW_STAKES = _blockNewStakes;\\n    }\\n\\n    function getMaps() external view returns (Map[] memory){\\n        return MAPS;\\n    }\\n\\n    function timestampOfNewMap() external view returns (uint32){\\n        uint32 curPeriod = uint32(block.timestamp) - START_TIMESTAMP;\\n        for (uint256 i = 0; i < MAPS.length; i++) {\\n            if (curPeriod < MAPS[i].period) {\\n                return START_TIMESTAMP + MAPS[i].period;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getLocalStake(address _userAddress, uint256 _index) external view returns (Stake memory _stake, uint256 _id){\\n        _stake = STAKES[stakesOf[_userAddress][_index]];\\n        _id = stakesOf[_userAddress][_index];\\n    }\\n\\n    function getLocalStakes(address _userAddress) external view returns (Stake[] memory _stakes, uint256[] memory _indexes){\\n        uint256[] memory _stakeIds = stakesOf[_userAddress];\\n        _stakes = new Stake[](_stakeIds.length);\\n        _indexes = _stakeIds;\\n        for (uint256 i = 0; i < _stakeIds.length; i++) {\\n            _stakes[i] = STAKES[_stakeIds[i]];\\n        }\\n    }\\n\\n    function getStakes(address _userAddress) external view returns (StakeOutput[] memory _stakes, uint256[] memory _indexes){\\n        uint256[] memory _stakeIds = stakesOf[_userAddress];\\n\\n        // Fetch stakes from V1 contract\\n        StakingMapV1Contract.Stake[] memory _stakesV1;\\n        uint256[] memory _indexesV1;\\n        (_stakesV1, _indexesV1) = STAKING_MAP_V1.getStakes(_userAddress);\\n\\n        _stakes = new StakeOutput[](_stakesV1.length + _stakeIds.length);\\n        _indexes = new uint256[](_stakesV1.length + _stakeIds.length);\\n\\n        for (uint256 i = 0; i < _stakesV1.length; i++) {\\n            _stakes[i] = _createStakeOutput(_stakeStructAdapter(_stakesV1[i]), 1);\\n            _indexes[i] = _indexesV1[i];\\n        }\\n\\n        // Fetch stakes from this contract\\n        uint256 _stakesIterator = _stakesV1.length;\\n        for (uint256 i = 0; i < _stakeIds.length; i++) {\\n            _stakes[_stakesIterator] = _createStakeOutput(STAKES[_stakeIds[i]], 2);\\n            _indexes[_stakesIterator] = _stakeIds[i];\\n            _stakesIterator++;\\n        }\\n    }\\n\\n    function calculateStartPos(uint32 _createdAt, uint32 _age) public view returns (uint32){\\n        uint32 _output = 0;\\n        for (uint256 i = 0; i < MAPS.length; i++) {\\n\\n            // If stake creation day is higher than a new map, then use it\\n            if (_createdAt - START_TIMESTAMP - _age > MAPS[i].period) {\\n                if (MAPS[i].period > _output) {// in case data in MAPS are not in inc order\\n                    _output = MAPS[i].period;\\n                }\\n            }\\n        }\\n\\n        return _output + _age;\\n    }\\n\\n    function getLocalActiveStakes(address _userAddress) external view returns (Stake[] memory _stakes, uint256[] memory _indexes){\\n        uint256[] memory _stakeIds = stakesOf[_userAddress];\\n\\n        uint256 activeStakesAmount = 0;\\n        for (uint256 i = 0; i < _stakeIds.length; i++) {\\n            if (0 == STAKES[_stakeIds[i]].endAt) {\\n                activeStakesAmount++;\\n            }\\n        }\\n\\n        _stakes = new Stake[](activeStakesAmount);\\n        _indexes = new uint256[](activeStakesAmount);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < _stakeIds.length; i++) {\\n            if (0 == STAKES[_stakeIds[i]].endAt) {\\n                _stakes[j] = STAKES[_stakeIds[i]];\\n                _indexes[j] = _stakeIds[i];\\n                j++;\\n            }\\n        }\\n    }\\n\\n    function getActiveStakes(address _userAddress) external view returns (StakeOutput[] memory _stakes, uint256[] memory _indexes){\\n        uint256[] memory _stakeIds = stakesOf[_userAddress];\\n        uint256 localActiveStakesAmount = 0;\\n        for (uint256 i = 0; i < _stakeIds.length; i++) {\\n            if (0 == STAKES[_stakeIds[i]].endAt) {\\n                localActiveStakesAmount++;\\n            }\\n        }\\n\\n        // Fetch stakes from V1 contract\\n        StakingMapV1Contract.Stake[] memory _stakesV1;\\n        uint256[] memory _indexesV1;\\n        (_stakesV1, _indexesV1) = STAKING_MAP_V1.getActiveStakes(_userAddress);\\n\\n        _stakes = new StakeOutput[](_stakesV1.length + localActiveStakesAmount);\\n        _indexes = new uint256[](_stakesV1.length + localActiveStakesAmount);\\n\\n        for (uint256 i = 0; i < _stakesV1.length; i++) {\\n            _stakes[i] = _createStakeOutput(_stakeStructAdapter(_stakesV1[i]), 1);\\n            _indexes[i] = _indexesV1[i];\\n        }\\n\\n        // Fetch stakes from this contract\\n        uint256 _stakesIterator = _stakesV1.length;\\n        for (uint256 i = 0; i < _stakeIds.length; i++) {\\n            if (0 == STAKES[_stakeIds[i]].endAt) {\\n                _stakes[_stakesIterator] = _createStakeOutput(STAKES[_stakeIds[i]], 2);\\n                _indexes[_stakesIterator] = _stakeIds[i];\\n                _stakesIterator++;\\n            }\\n        }\\n    }\\n\\n    function stake(uint256 _stakesAmount) external whenNotPaused returns (uint256){\\n        require(false == BLOCK_NEW_STAKES, \\\"NEW_STAKES_NOT_AVAILABLE\\\");\\n\\n        uint256 _totalTokenStakeAmount = _stakesAmount * TOKEN_SINGLE_STAKE_AMOUNT;\\n        TOKEN.safeTransferFrom(_msgSender(), address(this), _totalTokenStakeAmount);\\n\\n        uint256 _stakesLen = STAKES.length;\\n        _createStakeEntry(_stakesLen, _stakesAmount, 0);\\n\\n        emit Staked(_stakesLen, _msgSender(), _stakesAmount);\\n\\n        return _stakesLen;\\n    }\\n\\n    function _createStakeEntry(uint256 _stakesLen, uint256 _stakesAmount, uint32 _age) internal {\\n        stakesOf[_msgSender()].push(_stakesLen);\\n        ownerOf[_stakesLen] = _msgSender();\\n        STAKES.push(\\n            Stake({\\n                createdAt: uint32(block.timestamp),\\n                endAt: 0,\\n                age: uint32(_age),\\n                stakesAmount: uint32(_stakesAmount)\\n            })\\n        );\\n    }\\n\\n    function reduceLocalStake(uint256 _stakeId, uint256 _amountToReduce) public whenNotPaused {\\n        require(_msgSender() == ownerOf[_stakeId], \\\"NOT_OWNER\\\");\\n        _reduceLocalStake(_stakeId, _amountToReduce);\\n    }\\n\\n    function reduceAllLocalStakes() external onlyOwner() {\\n        for (uint256 i = 0; i < STAKES.length; i++) {\\n            if (STAKES[i].endAt == 0) {\\n                _reduceLocalStake(i, STAKES[i].stakesAmount);\\n            }\\n        }\\n    }\\n\\n    function _reduceLocalStake(uint256 _stakeId, uint256 _amountToReduce) internal {\\n        address _stakeOwner = ownerOf[_stakeId];\\n        require(uint256(STAKES[_stakeId].stakesAmount) >= _amountToReduce, \\\"CAN_NOT_REDUCE_MORE_THAN_AVAILABLE\\\");\\n        require(uint256(STAKES[_stakeId].endAt) == 0, \\\"STAKE_REDUCED_ALREADY\\\");\\n        STAKES[_stakeId].endAt = uint32(block.timestamp);\\n\\n        emit ReducedStake(_stakeId, _stakeOwner, STAKES[_stakeId].stakesAmount, _amountToReduce);\\n\\n        uint256 _newStakeAmount = uint256(STAKES[_stakeId].stakesAmount) - _amountToReduce;\\n        if (_newStakeAmount > 0) {\\n            uint32 _age = STAKES[_stakeId].endAt - STAKES[_stakeId].createdAt + STAKES[_stakeId].age;\\n            _createStakeEntry(STAKES.length, _newStakeAmount, _age);\\n        }\\n\\n        uint256 _totalTokenReturnAmount = _amountToReduce * TOKEN_SINGLE_STAKE_AMOUNT;\\n        TOKEN.safeTransfer(_stakeOwner, _totalTokenReturnAmount);\\n    }\\n\\n    function stakesCount() external view returns (uint256) {\\n        return STAKES.length;\\n    }\\n\\n    function localStakesCountForAddress(address _userAddress) public view returns (uint256){\\n        return stakesOf[_userAddress].length;\\n    }\\n\\n    function stakesCountForAddress(address _userAddress) external view returns (uint256){\\n        return localStakesCountForAddress(_userAddress) + STAKING_MAP_V1.stakesCountForAddress(_userAddress);\\n    }\\n\\n    function _stakeStructAdapter(StakingMapV1Contract.Stake memory _stake) internal pure returns (Stake memory){\\n        return\\n            Stake({\\n                createdAt : _stake.createdAt,\\n                endAt : _stake.endAt,\\n                age : _stake.age,\\n                stakesAmount : _stake.stakesAmount\\n            });\\n    }\\n\\n    function _createStakeOutput(Stake memory _stake, uint8 _mapVersion) internal view returns (StakeOutput memory){\\n        uint32 _endOrNowTimestamp;\\n        if (_stake.endAt > 0) {\\n            _endOrNowTimestamp = _stake.endAt;\\n        } else {\\n            _endOrNowTimestamp = uint32(block.timestamp);\\n        }\\n\\n        uint32 startPos = calculateStartPos(_stake.createdAt, _stake.age);\\n\\n        return\\n            StakeOutput({\\n                createdAt: _stake.createdAt,\\n                endAt: _stake.endAt,\\n                age: _stake.age,\\n                stakesAmount: _stake.stakesAmount,\\n                startPos: startPos,\\n                currentPos: startPos + (_endOrNowTimestamp - _stake.createdAt),\\n                bonusPeriods: _mapPeriods(),\\n                bonusPercents: _calculateBonuses(_stake.createdAt, _stake.age, _stake.endAt),\\n                mapVersion: _mapVersion\\n            });\\n    }\\n\\n    function _mapPeriods() internal view returns (uint32[] memory){\\n        uint32[] memory output = new uint32[](MAPS.length);\\n        for (uint256 i = 0; i < MAPS.length; i++) {\\n            output[i] = MAPS[i].period;\\n        }\\n\\n        return output;\\n    }\\n\\n    function _calculateBonuses(uint32 _createdAt, uint32 _age, uint32 _endAt) internal view returns (uint32[] memory){\\n        uint32[] memory output = new uint32[](MAPS.length);\\n        uint32 _stakeEndTime = _endAt;\\n\\n        // End stake lub current time if not finished\\n        if (0 == _endAt) {\\n            _stakeEndTime = uint32(block.timestamp);\\n        }\\n\\n        for (uint256 i = 0; i < MAPS.length; i++) {\\n            output[i] = 0;\\n\\n            // If stake period length is longer than a single map\\n            if ((_stakeEndTime - _createdAt + _age) > MAPS[i].period) {\\n                // If stake was created before map ended\\n                if ((_createdAt - _age) < START_TIMESTAMP + MAPS[i].period) {\\n                    output[i] = MAPS[i].completionBonusPercent;\\n                }\\n            }\\n        }\\n\\n        return output;\\n    }\\n\\n    function returnAccidentallySent(IERC20 _tokenToSent) external onlyOwner {\\n        require(address(_tokenToSent) != address(TOKEN));\\n        uint256 _amount = _tokenToSent.balanceOf(address(this));\\n        _tokenToSent.safeTransfer(_msgSender(), _amount);\\n    }\\n\\n    function tokenLockedAmount() public view returns (uint256){\\n        uint256 _usersTokenAmount = 0;\\n        uint256 _len = STAKES.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            if (0 == STAKES[i].endAt) {\\n                _usersTokenAmount += STAKES[i].stakesAmount * TOKEN_SINGLE_STAKE_AMOUNT;\\n            }\\n        }\\n\\n        return _usersTokenAmount;\\n    }\\n\\n    function returnRemainingTokens() external onlyOwner {\\n        uint256 _usersTokenAmount = tokenLockedAmount();\\n        uint256 _toReturnAmount = TOKEN.balanceOf(address(this)) - _usersTokenAmount;\\n        if (_toReturnAmount > 0) {\\n            TOKEN.safeTransfer(_msgSender(), _toReturnAmount);\\n        }\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract StakingMapV1Contract\",\"name\":\"_stakingMapV1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"beforeAmount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceBy\",\"type\":\"uint256\"}],\"name\":\"ReducedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakesAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCK_NEW_STAKES\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"STAKES\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stakesAmount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_MAP_V1\",\"outputs\":[{\"internalType\":\"contract StakingMapV1Contract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SINGLE_STAKE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_age\",\"type\":\"uint32\"}],\"name\":\"calculateStartPos\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getActiveStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stakesAmount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startPos\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentPos\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"bonusPeriods\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"bonusPercents\",\"type\":\"uint32[]\"},{\"internalType\":\"uint8\",\"name\":\"mapVersion\",\"type\":\"uint8\"}],\"internalType\":\"struct StakingMapV2.StakeOutput[]\",\"name\":\"_stakes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getLocalActiveStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stakesAmount\",\"type\":\"uint32\"}],\"internalType\":\"struct StakingMapV2.Stake[]\",\"name\":\"_stakes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLocalStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stakesAmount\",\"type\":\"uint32\"}],\"internalType\":\"struct StakingMapV2.Stake\",\"name\":\"_stake\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getLocalStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stakesAmount\",\"type\":\"uint32\"}],\"internalType\":\"struct StakingMapV2.Stake[]\",\"name\":\"_stakes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"completionBonusPercent\",\"type\":\"uint32\"}],\"internalType\":\"struct StakingMapV2.Map[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stakesAmount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startPos\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentPos\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"bonusPeriods\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"bonusPercents\",\"type\":\"uint32[]\"},{\"internalType\":\"uint8\",\"name\":\"mapVersion\",\"type\":\"uint8\"}],\"internalType\":\"struct StakingMapV2.StakeOutput[]\",\"name\":\"_stakes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"localStakesCountForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceAllLocalStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToReduce\",\"type\":\"uint256\"}],\"name\":\"reduceLocalStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenToSent\",\"type\":\"address\"}],\"name\":\"returnAccidentallySent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_blockNewStakes\",\"type\":\"bool\"}],\"name\":\"setBlockNewStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_period\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_completionBonusPercent\",\"type\":\"uint32[]\"}],\"name\":\"setMaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StakingMapV1Contract\",\"name\":\"_stakingMapV1\",\"type\":\"address\"}],\"name\":\"setStakingMapV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_startTimestamp\",\"type\":\"uint32\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakesAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"stakesCountForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampOfNewMap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingMapV2", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000052c1751c89fc913ed274d72e8d56dce4ee44a5cf000000000000000000000000f66ebafb82b54010da73cd7250cc599b8396f456", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}