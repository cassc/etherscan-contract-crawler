{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n    constructor () {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n      require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n      _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n      emit OwnershipTransferred(_owner, address(0));\r\n      _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ninterface BUSDBirdStake{\r\n    function userInfo(address _addr) view external returns(uint256 for_withdraw, uint256 total_invested, uint256 total_withdrawn, uint256 total_match_bonus, uint256[5] memory structure);\r\n}\r\n\r\ncontract BirdStaking is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n\t\r\n\tuint256 private EGGS_TO_HATCH_1MINERS = 1080000;\r\n\tuint256 private PSN = 10000;\r\n\tuint256 private PSNH = 5000;\r\n\tuint256 private devFeeVal = 15;\r\n\tuint256 private mrkFeeVal = 10;\r\n\tuint256 private prjFeeVal = 20;\r\n\tuint256 private totalFee  = 60;\r\n\tuint256 private monthlyLimit  = 30000 ether;\r\n\tuint256 private balanceLimit  = 100000 ether;\r\n\tbool private initialized = false;\r\n\taddress payable public dev1Address;\r\n\taddress payable public dev2Address;\r\n\taddress payable public mrkAddress;\r\n\taddress payable public prjAddress;\r\n\tuint256 public marketEggs;\r\n\r\n\tstruct User{\r\n\t\tuint256 invest;\r\n\t\tuint256 withdraw;\r\n\t\tuint256 hatcheryMiners;\r\n\t\tuint256 claimedEggs;\r\n\t\tuint256 lastHatch;\r\n\t\tuint checkpoint;\r\n\t\taddress referrals;\r\n\t}\r\n\r\n\tmapping (address => User) public users;\r\n\tmapping (uint256 => mapping(address => uint256)) public mLimit;\r\n\r\n\tuint public totalDonates;\r\n\tuint public totalInvested;\r\n\tuint256 constant internal TIME_STEP = 1 days;\r\n\r\n    address public oldContract;\r\n\r\n\tconstructor() {\r\n\t\tdev1Address = payable(0xF8Aaf52fb65137428bb02ed71Fa9ceAf572828D7);\r\n\t\tdev2Address = payable(0x169C8F739C2faAFE69a0B320BA13318C5f75f4c8);\r\n\t\tprjAddress = payable(0x0a61D672DB25cAc6bb653442A8360F6774DaD057);\r\n\t\tmrkAddress = payable(0xd6b2466EC22e655D8Af2cBC75Dd75d8c16337CE3);\r\n\r\n        oldContract = address(0x09180Eb78a3cb64Db28d058382428f6553612ee9);\r\n\t}\r\n\r\n\t modifier initializer() {\r\n\t\trequire(initialized, \"initialized is false\");\r\n\t\t_;\r\n\t }\r\n\r\n\tmodifier checkUser_() {\r\n\t\trequire(checkUser(), \"try again later\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction checkUser() public view returns (bool){\r\n\t\tuint256 check = block.timestamp.sub(users[msg.sender].checkpoint);\r\n\t\tif(check > TIME_STEP) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction hatchEggs(address ref) public initializer {\t\t\r\n\t\t\r\n\t\tif(ref == msg.sender) {\r\n\t\t\tref = address(0);\r\n\t\t}\r\n\t\t\r\n\t\tUser storage user = users[msg.sender];\r\n\t\tif(user.referrals == address(0) && user.referrals != msg.sender) {\r\n\t\t\tuser.referrals = ref;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 eggsUsed = getMyEggs(msg.sender);\r\n\t\tuint256 newMiners = SafeMath.div(eggsUsed,EGGS_TO_HATCH_1MINERS);\r\n\t\tuser.hatcheryMiners = SafeMath.add(user.hatcheryMiners,newMiners);\r\n\t\tuser.claimedEggs = 0;\r\n\t\tuser.lastHatch = block.timestamp;\r\n\t\tuser.checkpoint = block.timestamp;\r\n\t\t\r\n\t\t//send referral eggs\r\n\t\tUser storage referrals_ =users[user.referrals];\r\n\t\treferrals_.claimedEggs = SafeMath.add(referrals_.claimedEggs, (eggsUsed * 8) / 100);\r\n\t\t\r\n\t\t//boost market to nerf miners hoarding\r\n\t\tmarketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,5));\r\n\t}\r\n\t\r\n\tfunction sellEggs() external initializer checkUser_ {\r\n\t\tUser storage user =users[msg.sender];\r\n\t\tuint256 hasEggs = getMyEggs(msg.sender);\r\n        uint256 eggValue;\r\n        if(ERC20(BUSD).balanceOf(address(this)) > balanceLimit){\r\n            eggValue = calculateEggSell(hasEggs/5);\r\n            hasEggs -= (hasEggs/5); \r\n        }\r\n        else{\r\n            eggValue = calculateEggSell(hasEggs/10);\r\n            hasEggs -= (hasEggs/10);\r\n        }\r\n        \r\n        require(mLimit[cMonth()][msg.sender] + eggValue <= monthlyLimit, \"only 30k every month\");\r\n        mLimit[cMonth()][msg.sender] += eggValue;\r\n\r\n\t\tuint256 devFee = eggValue * devFeeVal / 1000;\r\n\t\tuint256 mrkFee  = eggValue * mrkFeeVal / 1000;\r\n\t\tuint256 prjFee  = eggValue * prjFeeVal / 1000;\r\n        ERC20(BUSD).transfer(payable(dev1Address), devFee);\r\n        ERC20(BUSD).transfer(payable(dev2Address), devFee);\r\n        ERC20(BUSD).transfer(payable(mrkAddress), mrkFee);\r\n        ERC20(BUSD).transfer(payable(prjAddress), prjFee);\r\n\r\n\r\n        uint256 eggsUsed = hasEggs;\r\n\t\tuint256 newMiners = SafeMath.div(eggsUsed,EGGS_TO_HATCH_1MINERS);\r\n\t\tuser.hatcheryMiners = SafeMath.add(user.hatcheryMiners,newMiners);\r\n\t\tuser.claimedEggs = 0;\r\n\t\tuser.lastHatch = block.timestamp;\r\n\t\tuser.checkpoint = block.timestamp;\r\n\r\n\t\tmarketEggs = SafeMath.add(marketEggs,hasEggs);\r\n\t\tuser.withdraw += eggValue;\r\n        ERC20(BUSD).transfer(payable(msg.sender), SafeMath.sub(eggValue,(devFee+devFee+mrkFee+prjFee)));\r\n\t}\r\n\r\n\tfunction beanRewards(address adr) public view returns(uint256) {\r\n\t\tuint256 hasEggs = getMyEggs(adr);\r\n\t\tuint256 eggValue = calculateEggSell(hasEggs);\r\n\t\treturn eggValue;\r\n\t}\r\n\t\r\n\tfunction buyEggs(address ref, uint256 amount) external initializer {\t\t\r\n\t\tUser storage user =users[msg.sender];\r\n\r\n        ERC20(BUSD).transferFrom(address(msg.sender), address(this), amount);\r\n\r\n        if(oldContract != address(0)){\r\n            (,uint256 oldTotalDeposit,,,) = BUSDBirdStake(oldContract).userInfo(msg.sender); \r\n            if(oldTotalDeposit > 0){\r\n                amount += amount / 100;\r\n            }\r\n        }\r\n\r\n\r\n\t\tuint256 eggsBought = calculateEggBuy(amount,SafeMath.sub(ERC20(BUSD).balanceOf(address(this)),amount));\r\n\t\teggsBought = SafeMath.sub(eggsBought, (eggsBought * totalFee) / 1000 );\r\n        uint256 devFee = amount * devFeeVal / 1000;\r\n\t\tuint256 mrkFee = amount * mrkFeeVal / 1000;\r\n\t\tuint256 prjFee = amount * prjFeeVal / 1000;\r\n\r\n        ERC20(BUSD).transfer(payable(dev1Address), devFee);\r\n        ERC20(BUSD).transfer(payable(dev2Address), devFee);\r\n        ERC20(BUSD).transfer(payable(mrkAddress), mrkFee);\r\n        ERC20(BUSD).transfer(payable(prjAddress), prjFee);\r\n\r\n\t\tif(user.invest == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t}\r\n\t\tuser.invest += amount;\r\n\t\tuser.claimedEggs = SafeMath.add(user.claimedEggs,eggsBought);\r\n\t\thatchEggs(ref);\r\n\t\ttotalInvested += amount;\r\n\t}\r\n\t\r\n\tfunction calculateTrade(uint256 rt,uint256 rs, uint256 bs) private view returns(uint256) {\r\n\t\tuint a =PSN.mul(bs);\r\n\t\tuint b =PSNH;\r\n\t\tuint c =PSN.mul(rs);\r\n\t\tuint d =PSNH.mul(rt);\r\n\t\tuint h =c.add(d).div(rt);\r\n\t\treturn a.div(b.add(h));\r\n\t}\r\n\t\r\n\tfunction calculateEggSell(uint256 eggs) public view returns(uint256) {\r\n\t\tuint _cal = calculateTrade(eggs,marketEggs,ERC20(BUSD).balanceOf(address(this)));\r\n\t\t_cal += _cal.mul(5).div(100);\r\n\t\treturn _cal;\r\n\t}\r\n\t\r\n\tfunction calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n\t\treturn calculateTrade(eth,contractBalance,marketEggs);\r\n\t}\r\n\t\r\n\tfunction calculateEggBuySimple(uint256 eth) public view returns(uint256) {\r\n\t\treturn calculateEggBuy(eth,ERC20(BUSD).balanceOf(address(this)));\r\n\t}\r\n\t\r\n\tfunction seedMarket() public onlyOwner {\r\n\t\trequire(marketEggs == 0);\r\n\t\tinitialized = true;\r\n\t\tmarketEggs = 108000000000;\r\n\t}\r\n\t\r\n\tfunction getBalance() public view returns(uint256) {\r\n\t\treturn ERC20(BUSD).balanceOf(address(this));\r\n\t}\r\n\t\r\n\tfunction getMyMiners(address adr) public view returns(uint256) {\r\n\t\tUser memory user =users[adr];\r\n\t\treturn user.hatcheryMiners;\r\n\t}\r\n\t\r\n\tfunction getMyEggs(address adr) public view returns(uint256) {\r\n\t\tUser memory user =users[adr];\r\n\t\treturn SafeMath.add(user.claimedEggs,getEggsSinceLastHatch(adr));\r\n\t}\r\n\t\r\n\tfunction getEggsSinceLastHatch(address adr) public view returns(uint256) {\r\n\t\tUser memory user =users[adr];\r\n\t\tuint256 secondsPassed=min(EGGS_TO_HATCH_1MINERS,SafeMath.sub(block.timestamp,user.lastHatch));\r\n\t\treturn SafeMath.mul(secondsPassed,user.hatcheryMiners);\r\n\t}\r\n\t\r\n\tfunction min(uint256 a, uint256 b) private pure returns (uint256) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\r\n\tfunction getSellEggs(address user_) public view returns(uint eggValue){\r\n\t\tuint256 hasEggs = getMyEggs(user_);\r\n\t\teggValue = calculateEggSell(hasEggs);\r\n\t}\r\n\r\n\tfunction getPublicData() external view returns(uint _totalInvest, uint _balance) {\r\n\t\t_totalInvest = totalInvested;\r\n\t\t_balance = ERC20(BUSD).balanceOf(address(this));\r\n\t}\r\n\r\n\tfunction cMonth() public view returns(uint256) {\r\n\t\treturn (block.timestamp / (30 * TIME_STEP));\r\n\t}\r\n\r\n\tfunction userData(address user_) external view returns (\r\n\tuint256 hatcheryMiners_,\r\n\tuint256 claimedEggs_,\r\n\tuint256 lastHatch_,\r\n\tuint256 sellEggs_,\r\n\tuint256 eggsMiners_,\r\n\taddress referrals_,\r\n\tuint256 checkpoint,\r\n\tuint256 monLimit\r\n\t) { \t\r\n        User memory user =users[user_];\r\n        hatcheryMiners_=getMyMiners(user_);\r\n        claimedEggs_=getMyEggs(user_);\r\n        lastHatch_=user.lastHatch;\r\n        referrals_=user.referrals;\r\n        sellEggs_=getSellEggs(user_);\r\n        eggsMiners_=getEggsSinceLastHatch(user_);\r\n        checkpoint=user.checkpoint;\r\n        monLimit = mLimit[cMonth()][msg.sender];\r\n\t}\r\n\r\n\t\r\n\tfunction donate(uint256 amount) external {\t\t\r\n        ERC20(BUSD).transferFrom(address(msg.sender), address(this), amount);\r\n        totalDonates += amount;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"beanRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev1Address\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev2Address\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getSellEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eggValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mrkAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prjAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hatcheryMiners_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedEggs_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellEggs_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggsMiners_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrals_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatcheryMiners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrals\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BirdStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c773bc86b790ad2b6a4b963928a2c8f4dfe92d8afc90539fa6e24f2f57dff5a5"}