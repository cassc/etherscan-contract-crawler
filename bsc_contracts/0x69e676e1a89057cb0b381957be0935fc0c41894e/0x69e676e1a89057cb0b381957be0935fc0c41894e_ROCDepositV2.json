{"SourceCode": "// Sources flattened with hardhat v2.10.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.7.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.7.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.7.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.7.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Common/TwoProfitReceiverRescue.sol\r\n\r\npragma solidity 0.8.9;\r\n// TwoProfitReceiverRescue contract\r\nabstract contract TwoProfitReceiverRescue is Ownable {\r\n\r\n\r\n    address payable internal profitReceiver1;\r\n    address payable internal profitReceiver2;\r\n\r\n    constructor(address payable _profitReceiver1, address payable _profitReceiver2) {\r\n        profitReceiver1 = _profitReceiver1;\r\n        profitReceiver2 = _profitReceiver2;\r\n    }\r\n\r\n\r\n\r\n    //Use this in case BNB are sent to the contract by mistake\r\n    function rescueBNB() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"TwoProfitReceiverRescue: balance is 0\");\r\n        uint256 halfBalance = balance / 2;\r\n        profitReceiver1.transfer(halfBalance);\r\n        profitReceiver2.transfer(balance - halfBalance);\r\n    }\r\n\r\n    // Function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\r\n    // Owner cannot transfer out catecoin from this smart contract\r\n    function rescueAnyERC20Tokens(address _tokenAddress) external onlyOwner {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance > 0, \"TwoProfitReceiverRescue: balance is 0\");\r\n        uint256 halfBalance = balance / 2;\r\n        token.transfer(profitReceiver1, halfBalance);\r\n        token.transfer(profitReceiver2, balance - halfBalance);\r\n    }\r\n\r\n    receive() external payable{}\r\n}\r\n\r\n\r\n// File contracts/Interfaces/IWETH.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File contracts/V2/Bridge/IROCDepositV2.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\ninterface IROCDepositV2 {\r\n\r\n    function deposit(\r\n        uint128 _targetUserId,\r\n        address _tokenAddress,\r\n        uint256 _amount) payable external;\r\n}\r\n\r\n\r\n// File contracts/V2/Bridge/ROCDepositV2.sol\r\n\r\npragma solidity 0.8.9;\r\n// ROCDepositV2 contract\r\ncontract ROCDepositV2 is IROCDepositV2, TwoProfitReceiverRescue, Pausable {\r\n\r\n    event Deposited(\r\n        address indexed _fromWallet,\r\n        uint128 indexed _userId,\r\n        address indexed _tokenAddress,\r\n        uint256 _amount\r\n    );\r\n    event SupportedTokenChanged(\r\n        address _tokenAddress,\r\n        bool _enable,\r\n        uint256 _minimum,\r\n        uint256 _maximum\r\n    );\r\n    \r\n    struct SupportedTokenInfo {\r\n        bool enabled;\r\n        uint256 minimum;\r\n        uint256 maximum;\r\n    }\r\n\r\n    address private walletAddress;\r\n    IWETH public wBNB;\r\n    mapping(address => SupportedTokenInfo) public supportedTokenMapping;\r\n\r\n    constructor(address payable _profitReceiver1, address payable _profitReceiver2, address _walletAddress, IWETH _wBNB)\r\n            TwoProfitReceiverRescue(_profitReceiver1, _profitReceiver2) {\r\n        walletAddress = _walletAddress;\r\n        wBNB = _wBNB;\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n\r\n    function addSupportedToken(address[] memory _tokenAddresses, uint256[] memory _minimums, uint256[] memory _maximums)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _tokenAddresses.length == _minimums.length &&\r\n            _tokenAddresses.length == _maximums.length,\r\n            \"ROCDepositV2: tokenAddresses, minimums and maximums must have the same length\");\r\n        require(_tokenAddresses.length > 0,\r\n            \"ROCDepositV2: tokenAddresses must have at least one element\");\r\n\r\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\r\n            require(_minimums[i] <= _maximums[i],\r\n                \"ROCDepositV2: minimums must be less or equal to maximums\");\r\n            supportedTokenMapping[_tokenAddresses[i]] = SupportedTokenInfo(true, _minimums[i], _maximums[i]);\r\n            emit SupportedTokenChanged(_tokenAddresses[i], true, _minimums[i], _maximums[i]);\r\n        }\r\n    }\r\n    \r\n    function updateSupportedToken(address _tokenAddress, uint256 _minimum, uint256 _maximum)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_minimum <= _maximum,\r\n            \"ROCDepositV2: minimum must be less or equal to maximum\");\r\n        SupportedTokenInfo storage info = supportedTokenMapping[_tokenAddress];\r\n        supportedTokenMapping[_tokenAddress] = SupportedTokenInfo(info.enabled, _minimum, _maximum);\r\n        emit SupportedTokenChanged(_tokenAddress, info.enabled, _minimum, _maximum);\r\n    }\r\n\r\n    function removeSupportedToken(address[] memory _tokenAddresses)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_tokenAddresses.length > 0,\r\n            \"ROCDepositV2: tokenAddresses must have at least one element\");\r\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\r\n            SupportedTokenInfo storage info = supportedTokenMapping[_tokenAddresses[i]];\r\n            if (info.enabled) {\r\n                info.enabled = false;\r\n                emit SupportedTokenChanged(\r\n                    _tokenAddresses[i],\r\n                    false,\r\n                    info.minimum,\r\n                    info.maximum\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function isSupportedToken(address _tokenAddress) public view returns (bool) {\r\n        return supportedTokenMapping[_tokenAddress].enabled;\r\n    }\r\n\r\n\r\n    function deposit(\r\n        uint128 _targetUserId,\r\n        address _tokenAddress,\r\n        uint256 _amount) external override payable whenNotPaused {\r\n        require(\r\n            _targetUserId > 0,\r\n            \"ROCDepositV2: targetUserId must be greater than 0\"\r\n        );\r\n        require(\r\n            isSupportedToken(_tokenAddress),\r\n            \"ROCDepositV2: tokenAddress is not supported\"\r\n        );\r\n        SupportedTokenInfo storage info = supportedTokenMapping[_tokenAddress];\r\n        require(\r\n            _amount >= info.minimum && _amount <= info.maximum,\r\n            \"ROCDepositV2: amount is less than minimum\"\r\n        );\r\n        bool isERC20 = _tokenAddress != address(0);\r\n        uint256 realAmount = _amount;\r\n        if (!isERC20) {\r\n            require(_amount == msg.value,\r\n                \"ROCDepositV2: amount must be equal to msg.value\");\r\n            wBNB.deposit{value: _amount}();\r\n            wBNB.transfer(walletAddress, _amount);\r\n        } else {\r\n            IERC20 erc20Token = IERC20(_tokenAddress);\r\n            realAmount = erc20Token.balanceOf(walletAddress);\r\n            erc20Token.transferFrom(\r\n                address(msg.sender),\r\n                walletAddress,\r\n                _amount\r\n            );\r\n            realAmount = erc20Token.balanceOf(walletAddress) - realAmount;\r\n        }\r\n        emit Deposited(\r\n            address(msg.sender),\r\n            _targetUserId,\r\n            _tokenAddress,\r\n            realAmount\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_profitReceiver1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_profitReceiver2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_wBNB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"_userId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maximum\",\"type\":\"uint256\"}],\"name\":\"SupportedTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minimums\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maximums\",\"type\":\"uint256[]\"}],\"name\":\"addSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_targetUserId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isSupportedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"removeSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokenMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximum\",\"type\":\"uint256\"}],\"name\":\"updateSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBNB\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ROCDepositV2", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000072722c47a67da9a32afee2d20063972f1d7d69370000000000000000000000005b435903b0e8bc52936e9b439e9aa015d0a28dff0000000000000000000000005c7c695e5a93a9eaae6c7a6c733e3bb34811a7c4000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://63fad60d29f40bf40393cc1eef0a0a49804561599c001e2573f0f77853c0469d"}