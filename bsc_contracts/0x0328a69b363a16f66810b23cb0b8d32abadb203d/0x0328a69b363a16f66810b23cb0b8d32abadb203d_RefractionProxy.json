{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// File contracts/modules/kanaloa/module/IModule.sol\r\npragma solidity ^0.8.0;\r\n\r\nenum SecurityLevel {\r\n    CRITICAL,\r\n    HIGH,\r\n    MEDIUM,\r\n    LOW\r\n}\r\n\r\nstruct ModuleMetadata {\r\n    bytes32 signature;\r\n    uint256 version;\r\n    bytes4[] selectors;\r\n    SecurityLevel securityLevel;\r\n}\r\n\r\nenum InitLevel {\r\n    NOT_INITIALIZED,\r\n    INITIALIZING,\r\n    INITIALIZED\r\n}\r\n\r\ninterface IModule {\r\n    function getModuleMetadata() external view returns (ModuleMetadata memory);\r\n    function getStorageAddress() external pure returns (bytes32);\r\n}\r\n\r\n\r\n// File contracts/modules/kanaloa/refraction-engine/IRefractionEngine.sol\r\npragma solidity ^0.8.0;\r\n\r\nstruct RefractionEngineStorage {\r\n    InitLevel init;\r\n    address deployer;\r\n    address operator;\r\n    uint256 stateVersion;\r\n    mapping(bytes4 => address) selectorToContract;\r\n}\r\n\r\ninterface IRefractionEngine {\r\n\r\n    enum VtableOpCode {\r\n        NO_OP,\r\n        ADD,\r\n        REPLACE,\r\n        REMOVE\r\n    }\r\n\r\n    struct VtableOps {\r\n        address implementation;\r\n        VtableOpCode op;\r\n        bytes4[] functionSelectors;\r\n    }\r\n\r\n    event ModuleInitialized(\r\n        bytes32 indexed moduleSignature,\r\n        uint256 moduleVersion,\r\n        bytes initData\r\n    );\r\n\r\n    struct VtableActionTaken {\r\n        VtableOpCode op;\r\n        bytes4 selector;\r\n    }\r\n\r\n    event VtableEdited(\r\n        address indexed issuer,\r\n        VtableOps[] operations\r\n    );\r\n\r\n    event ModuleInstalled(\r\n        bytes32 indexed moduleSignature,\r\n        uint256 moduleVersion,\r\n        VtableActionTaken[] actionsTaken\r\n    );\r\n\r\n    function selectorToContract(bytes4 selector) external returns (address);\r\n    function editVtable(VtableOps[] calldata ops) external;\r\n    function installModule(IModule module) external;\r\n    function installAndInitModule(IModule module, bytes calldata _calldata) external;\r\n    function installAndInitModules(IModule[] calldata module, bytes[] calldata _calldata) external;\r\n    function initialize(address op, address refractionEngine) external;\r\n}\r\n\r\n\r\n// File contracts/modules/kanaloa/refraction-engine/LibRefractionEngine.sol\r\npragma solidity ^0.8.0;\r\n\r\nlibrary LibRefractionEngine {\r\n    bytes32 constant REFRACTION_ENGINE_STORAGE = keccak256(\"modules.kanaloa.refraction-engine\");\r\n\r\n    function\r\n        getRefractionEngineStorage()\r\n        internal pure\r\n        returns (RefractionEngineStorage storage state) {\r\n        bytes32 position = REFRACTION_ENGINE_STORAGE;\r\n        assembly {\r\n            state.slot := position\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/modules/kanaloa/refraction-engine/RefractionProxy.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract RefractionProxy {\r\n\r\n    constructor(address op, address rE) {\r\n        (bool success, ) = rE.delegatecall(\r\n            abi.encodeWithSignature(\"initialize(address,address)\", op, rE)\r\n        );\r\n        require(success, \"RefractionProxy: Could not initialize RefractionEngine.\");\r\n    }\r\n\r\n    fallback() external payable {\r\n        RefractionEngineStorage storage state =\r\n            LibRefractionEngine.getRefractionEngineStorage();\r\n\r\n        address impl = state.selectorToContract[msg.sig];\r\n        require(impl != address(0), \"RefractionProxy: function signature not found\");\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0,0, returndatasize())\r\n            switch result\r\n                case 0 {\r\n                    revert(0, returndatasize())\r\n                }\r\n                default {\r\n                    return(0, returndatasize())\r\n                }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"op\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rE\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RefractionProxy", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003b170fe4e12d3e3e9460ca5f5f5e1ad55f6f9368000000000000000000000000827eadb4818c06ef5eb8a9fca59d7295178f1be3", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "1", "Implementation": "0x10654bed1ba9ef6bf7e3cf845dc7d821b5cc4462", "SwarmSource": "ipfs://d63baad86f343d2ff47c93d551b2fe1d9046a912f5a0f38ecf33ce1c1f3b6832"}