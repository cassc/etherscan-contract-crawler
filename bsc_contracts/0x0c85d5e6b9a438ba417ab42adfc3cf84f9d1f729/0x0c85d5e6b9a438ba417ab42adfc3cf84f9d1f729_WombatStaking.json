{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBaseRewardPool {\\n    function stakingDecimals() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function rewardPerToken(address token) external view returns (uint256);\\n\\n    function rewardTokenInfos()\\n        external\\n        view\\n        returns\\n        (\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols\\n        );\\n\\n    function earned(address account, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allEarned(address account)\\n        external\\n        view\\n        returns (uint256[] memory pendingBonusRewards);\\n\\n    function queueNewRewards(uint256 _rewards, address token)\\n        external\\n        returns (bool);\\n\\n    function getReward(address _account, address _receiver) external returns (bool);\\n\\n    function getRewards(address _account, address _receiver, address[] memory _rewardTokens) external;\\n\\n    function updateFor(address account) external;\\n\\n    function updateManager(address _rewardManager, bool _allowed) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IConverter {\\n\\n    function convert(uint256 _amountIn, uint256 _convertRatio, uint256 _minimutRec, uint256 _mode) external returns (uint256);\\n\\n    function convertFor(uint256 _amountIn, uint256 _convertRatio, uint256 _minimutRec, address _for, uint256 _mode) external returns (uint256);\\n\\n    function smartConvert(uint256 _amountIn, uint256 _mode) external returns (uint256);\\n\\n    function depositFor(uint256 _amountIn, address _for) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDelegateRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDelegateRegistry {\\n    function delegation(\\n        address _delegator,\\n        bytes32 _id\\n    ) external view returns (address);\\n\\n    function setDelegate(bytes32 _id, address _delegate) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHarvesttablePoolHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPoolHelper.sol\\\";\\n\\n\\ninterface IHarvesttablePoolHelper is IPoolHelper {\\n    function harvest() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMasterMagpie.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IMasterMagpie {\\n    function poolLength() external view returns (uint256);\\n\\n    function setPoolManagerStatus(address _address, bool _bool) external;\\n\\n    function add(\\n        uint256 _allocPoint,\\n        address _stakingTokenToken,\\n        address _rewarder,\\n        address _helper,\\n        bool _helperNeedsHarvest\\n    ) external;\\n\\n    function createRewarder(\\n        address _stakingToken,\\n        address mainRewardToken\\n    ) external returns (address);\\n\\n    function set(\\n        address _stakingToken,\\n        uint256 _allocPoint,\\n        address _helper,\\n        address _rewarder,\\n        bool _helperNeedsHarvest\\n    ) external;\\n\\n    // View function to see pending GMPs on frontend.\\n    function getPoolInfo(\\n        address token\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 emission,\\n            uint256 allocpoint,\\n            uint256 sizeOfPool,\\n            uint256 totalPoint\\n        );\\n\\n    function rewarderBonusTokenInfo(\\n        address _stakingToken\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols\\n        );\\n\\n    function pendingTokens(\\n        address _stakingToken,\\n        address _user,\\n        address token\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _pendingGMP,\\n            address _bonusTokenAddress,\\n            string memory _bonusTokenSymbol,\\n            uint256 _pendingBonusToken\\n        );\\n\\n    function allPendingTokens(\\n        address _stakingToken,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 pendingMGP,\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n        );\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(address _stakingToken) external;\\n\\n    function deposit(address _stakingToken, uint256 _amount) external;\\n\\n    function withdraw(address _stakingToken, uint256 _amount) external;\\n\\n    function depositFor(\\n        address _stakingToken,\\n        uint256 _amount,\\n        address sender\\n    ) external;\\n\\n    function withdrawFor(\\n        address _stakingToken,\\n        uint256 _amount,\\n        address _sender\\n    ) external;\\n\\n    function depositVlMGPFor(uint256 _amount, address sender) external;\\n\\n    function withdrawVlMGPFor(uint256 _amount, address sender) external;\\n\\n    function depositMWomSVFor(uint256 _amount, address sender) external;\\n\\n    function withdrawMWomSVFor(uint256 _amount, address sender) external;\\n\\n    function multiclaimFor(\\n        address[] calldata _stakingTokens,\\n        address[][] calldata _rewardTokens,\\n        address user_address\\n    ) external;\\n\\n    function multiclaimOnBehalf(\\n        address[] memory _stakingTokens,\\n        address[][] calldata _rewardTokens,\\n        address user_address\\n    ) external;\\n\\n    function emergencyWithdraw(address _stakingToken, address sender) external;\\n\\n    function updateEmissionRate(uint256 _gmpPerSec) external;\\n\\n    function stakingInfo(\\n        address _stakingToken,\\n        address _user\\n    ) external view returns (uint256 depositAmount, uint256 availableAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IMintableERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address, uint256) external;\\n    function faucet(uint256) external;\\n\\n    function burn(address, uint256) external;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPoolHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPoolHelper {\\n    function totalStaked() external view returns (uint256);\\n\\n    function balance(address _address) external view returns (uint256);\\n\\n    function deposit(uint256 amount, uint256 minimumAmount) external;\\n\\n    function withdraw(uint256 amount, uint256 minimumAmount) external;\\n\\n    function isNative() external view returns (bool);\\n\\n    function pid() external view returns (uint256);\\n\\n    function depositToken() external view returns (address);\\n\\n    function lpToken() external view returns (address);\\n\\n    function rewarder() external view returns (address);\\n\\n    function stakingToken() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISimpleHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISimpleHelper {\\n    function depositFor(uint256 _amount, address _for) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWNative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWNative {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/pancake/IBNBZapper.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IBNBZapper {\\n    function previewTotalAmount(IERC20[][] calldata inTokens, uint256[][] calldata amounts) external view returns(uint256 bnbAmount);\\n    function zapInToken(address _from, uint256 amount, uint256 minRec, address receiver) external returns (uint256 bnbAmount);\\n}\"\r\n    },\r\n    \"contracts/interfaces/wombat/IMasterWombat.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IMasterWombat {\\n\\n    function getAssetPid(address lp) external view returns(uint256);\\n    \\n    function depositFor(uint256 pid, uint256 amount, address account) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids) external returns (\\n        uint256 transfered,\\n        uint256[] memory amounts,\\n        uint256[] memory additionalRewards\\n    );\\n\\n    function pendingTokens(uint256 _pid, address _user) external view\\n        returns (\\n            uint256 pendingRewards,\\n            IERC20[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n    );\\n\\n    function migrate(uint256[] calldata _pids) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/wombat/IMultiRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IMultiRewarder {\\n    function onReward(address _user, uint256 _lpAmount) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/wombat/IMWom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IMWom is IERC20 {\\n    function deposit(uint256 _amount) external;\\n    function convert(uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/wombat/IVeWom.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\n/**\\n * @dev Interface of the VeWom\\n */\\ninterface IVeWom {\\n    struct Breeding {\\n        uint48 unlockTime;\\n        uint104 womAmount;\\n        uint104 veWomAmount;\\n    }\\n\\n    struct UserInfo {\\n        // reserve usage for future upgrades\\n        uint256[10] reserved;\\n        Breeding[] breedings;\\n    }\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _addr) external view returns (uint256);\\n\\n    function isUser(address _addr) external view returns (bool);\\n\\n    function getUserInfo(address addr) external view returns (Breeding[] memory);\\n\\n    function mint(uint256 amount, uint256 lockDays) external returns (uint256 veWomAmount);\\n\\n    function burn(uint256 slot) external;\\n\\n    function whitelist() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/wombat/IWombatBribe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './IMultiRewarder.sol';\\n\\ninterface IWombatBribe is IMultiRewarder {\\n\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external returns (uint256[] memory rewards);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/wombat/IWombatPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IWombatPool {\\n    function ampFactor() external view returns (uint256);\\n\\n    /**\\n     * @notice Deposits amount of tokens into pool ensuring deadline\\n     * @dev Asset needs to be created and added to pool before any operation. This function assumes tax free token.\\n     * @param token The token address to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @param deadline The deadline to be respected\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param token The token to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return amount The total amount withdrawn\\n     */\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n}\"\r\n    },\r\n    \"contracts/interfaces/wombat/IWombatStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWombatStaking {\\n    function convertWOM(uint256 amount) external returns (uint256);\\n\\n    function masterWombat() external view returns (address);\\n\\n    function deposit(\\n        address _lpToken,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        address _for,\\n        address _from\\n    ) external;\\n\\n    function depositLP(address _lpToken, uint256 _lpAmount, address _for) external;\\n\\n    function withdraw(\\n        address _lpToken,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        address _sender\\n    ) external;\\n\\n    function withdrawLP(address _lpToken, uint256 _lpAmount, address _sender) external;\\n\\n    function getPoolLp(address _lpToken) external view returns (address);\\n\\n    function harvest(address _lpToken) external;\\n\\n    function burnReceiptToken(address _lpToken, uint256 _amount) external;\\n\\n    function vote(\\n        address[] calldata _lpVote,\\n        int256[] calldata _deltas,\\n        address[] calldata _rewarders,\\n        address caller\\n    ) external returns (address[][] memory rewardTokens, uint256[][] memory feeAmounts);\\n\\n    function voter() external view returns (address);\\n\\n    function pendingBribeCallerFee(\\n        address[] calldata pendingPools\\n    )\\n        external\\n        view\\n        returns (IERC20[][] memory rewardTokens, uint256[][] memory callerFeeAmount);\\n}\"\r\n    },\r\n    \"contracts/interfaces/wombat/IWombatVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IWombatBribe.sol';\\n\\ninterface IWombatGauge {\\n    function notifyRewardAmount(IERC20 token, uint256 amount) external;\\n}\\n\\ninterface IWombatVoter {\\n    struct GaugeInfo {\\n        uint104 supplyBaseIndex;\\n        uint104 supplyVoteIndex;\\n        uint40 nextEpochStartTime;\\n        uint128 claimable;\\n        bool whitelist;\\n        IWombatGauge gaugeManager;\\n        IWombatBribe bribe;\\n    }\\n    \\n    struct GaugeWeight {\\n        uint128 allocPoint;\\n        uint128 voteWeight; // total amount of votes for an LP-token\\n    }\\n\\n    function infos(address) external view returns (GaugeInfo memory);\\n\\n    function getUserVotes(address _user, address _lpToken) external view returns (uint256);\\n\\n    function lpTokenLength() external view returns (uint256);\\n\\n    function weights(address _lpToken) external view returns (GaugeWeight memory);    \\n\\n    function pendingBribes(address[] calldata _lpTokens, address _user)\\n        external\\n        view\\n        returns (uint256[][] memory bribeRewards);\\n\\n    function vote(address[] calldata _lpVote, int256[] calldata _deltas)\\n        external\\n        returns (uint256[][] memory bribeRewards);\\n}\"\r\n    },\r\n    \"contracts/libraries/DSMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10**18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess\\n    function sqrt(uint256 y, uint256 guess) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            if (guess > y || guess == 0) {\\n                z = y;\\n            } else {\\n                z = guess;\\n            }\\n            uint256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/MagpieFactoryLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {MintableERC20} from \\\"./MintableERC20.sol\\\";\\nimport {BaseRewardPoolV3} from \\\"../rewards/BaseRewardPoolV3.sol\\\";\\nimport {WombatPoolHelperV3} from \\\"../wombat/WombatPoolHelperV3.sol\\\";\\nimport {BribeRewardPool} from \\\"../rewards/BribeRewardPool.sol\\\";\\n\\nlibrary MagpieFactoryLib {\\n    function createERC20(\\n        string memory name_,\\n        string memory symbol_\\n    ) public returns (address) {\\n        ERC20 token = new MintableERC20(name_, symbol_);\\n        return address(token);\\n    }\\n\\n    function createRewarder(\\n        address _stakingToken,\\n        address _mainRewardToken,\\n        address _masterMagpie,\\n        address _rewardManager\\n    ) external returns (address) {\\n        BaseRewardPoolV3 _rewarder = new BaseRewardPoolV3(\\n            _stakingToken,\\n            _mainRewardToken,\\n            _masterMagpie,\\n            _rewardManager\\n        );\\n        return address(_rewarder);\\n    }\\n\\n    function createWombatPoolHelper(\\n        uint256 _pid,\\n        address _stakingToken,\\n        address _depositToken,\\n        address _lpToken,\\n        address _wombatStaking,\\n        address _masterMagpie,\\n        address _rewarder,\\n        address _mWom,\\n        bool _isNative\\n    ) public returns (address) {\\n        WombatPoolHelperV3 pool = new WombatPoolHelperV3(\\n            _pid,\\n            _stakingToken,\\n            _depositToken,\\n            _lpToken,\\n            _wombatStaking,\\n            _masterMagpie,\\n            _rewarder,\\n            _mWom,\\n            _isNative\\n        );\\n        return address(pool);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MintableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\npragma solidity ^0.8.0;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MintableERC20 is ERC20, Ownable {\\n    /*\\n    The ERC20 deployed will be owned by the others contracts of the protocol, specifically by\\n    MasterMagpie and WombatStaking, forbidding the misuse of these functions for nefarious purposes\\n    */\\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {} \\n\\n    function mint(address account, uint256 amount) external virtual onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external virtual onlyOwner {\\n        _burn(account, amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    int256 public constant WAD = 10**18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    // Babylonian Method (typecast as int)\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess (typecast as int)\\n    function sqrt(int256 y, int256 guess) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            if (guess > 0 && guess <= y) {\\n                z = guess;\\n            } else if (guess < 0 && -guess <= y) {\\n                z = -guess;\\n            } else {\\n                z = y;\\n            }\\n            int256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return x * int256(10**(18 - d));\\n        } else if (d > 18) {\\n            return (x / int256(10**(d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return (x / int256(10**(18 - d)));\\n        } else if (d > 18) {\\n            return x * int256(10**(d - 18));\\n        }\\n        return x;\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, 'value must be positive');\\n        return uint256(value);\\n    }\\n}\"\r\n    },\r\n    \"contracts/rewards/BaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IMasterMagpie.sol\\\";\\nimport \\\"../interfaces/IBaseRewardPool.sol\\\";\\n\\n/// @title A contract for managing rewards for a pool\\n/// @author Magpie Team\\n/// @notice You can use this contract for getting informations about rewards for a specific pools\\ncontract BaseRewardPool is Ownable, IBaseRewardPool {\\n    using SafeERC20 for IERC20Metadata;\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ State Variables ============ */\\n\\n    address public immutable stakingToken;\\n    address public immutable operator;          // master magpie\\n\\n    address[] public rewardTokens;\\n\\n    struct Reward {\\n        address rewardToken;\\n        uint256 rewardPerTokenStored;\\n        uint256 queuedRewards;\\n        uint256 historicalRewards;\\n    }\\n\\n    mapping(address => Reward) public rewards;                           // [rewardToken]\\n    // amount by [rewardToken][account], \\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;                 \\n    mapping(address => mapping(address => uint256)) public userRewards;  // amount by [rewardToken][account]\\n    mapping(address => bool) public isRewardToken;\\n    mapping(address => bool) public managers;\\n\\n    /* ============ Events ============ */\\n\\n    event RewardAdded(uint256 _reward, address indexed _token);\\n    event Staked(address indexed _user, uint256 _amount);\\n    event Withdrawn(address indexed _user, uint256 _amount);\\n    event RewardPaid(address indexed _user, address indexed _receiver, uint256 _reward, address indexed _token);\\n    event ManagerUpdated(address indexed _manager, bool _allowed);\\n\\n    /* ============ Errors ============ */\\n\\n    error OnlyManager();\\n    error OnlyMasterMagpie();\\n    error NotAllowZeroAddress();\\n    error MustBeRewardToken();\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _masterMagpie,\\n        address _rewardManager\\n    ) {\\n        if(\\n            _stakingToken == address(0) ||\\n            _masterMagpie  == address(0) ||\\n            _rewardManager  == address(0)\\n        ) revert NotAllowZeroAddress();\\n\\n        stakingToken = _stakingToken;\\n        operator = _masterMagpie;\\n\\n        if (_rewardToken != address(0)) {\\n            rewards[_rewardToken] = Reward({\\n                rewardToken: _rewardToken,\\n                rewardPerTokenStored: 0,\\n                queuedRewards: 0,\\n                historicalRewards: 0\\n            });\\n            rewardTokens.push(_rewardToken);\\n        }\\n\\n        isRewardToken[_rewardToken] = true;\\n        managers[_rewardManager] = true;\\n    }\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier updateReward(address _account) {\\n        _updateFor(_account);\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        if (!managers[msg.sender])\\n            revert OnlyManager();\\n        _;\\n    }\\n\\n    modifier onlyMasterMagpie() {\\n        if (msg.sender != operator)\\n            revert OnlyMasterMagpie();\\n        _;\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    /// @notice Returns decimals of reward token\\n    /// @param _rewardToken Address of reward token\\n    /// @return Returns decimals of reward token\\n    function rewardDecimals(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return IERC20Metadata(_rewardToken).decimals();\\n    }\\n\\n    /// @notice Returns decimals of staking token\\n    /// @return Returns decimals of staking token\\n    function stakingDecimals() public override view returns (uint256) {\\n        return IERC20Metadata(stakingToken).decimals();\\n    }\\n\\n    /// @notice Returns current amount of staked tokens\\n    /// @return Returns current amount of staked tokens\\n    function totalStaked() external override virtual view returns (uint256) {\\n        return IERC20(stakingToken).balanceOf(operator);\\n    }\\n\\n    /// @notice Returns amount of staked tokens in master magpie by account\\n    /// @param _account Address account\\n    /// @return Returns amount of staked tokens by account\\n    function balanceOf(address _account) public override virtual view returns (uint256) {\\n        (uint256 staked, ) =  IMasterMagpie(operator).stakingInfo(stakingToken, _account);\\n        return staked;\\n    }\\n\\n    /// @notice Returns amount of reward token per staking tokens in pool\\n    /// @param _rewardToken Address reward token\\n    /// @return Returns amount of reward token per staking tokens in pool\\n    function rewardPerToken(address _rewardToken)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return rewards[_rewardToken].rewardPerTokenStored;\\n    }\\n\\n    function rewardTokenInfos()\\n        override\\n        external\\n        view\\n        returns\\n        (\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols\\n        )\\n    {\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        bonusTokenAddresses = new address[](rewardTokensLength);\\n        bonusTokenSymbols = new string[](rewardTokensLength);\\n        for (uint256 i; i < rewardTokensLength; i++) {\\n            bonusTokenAddresses[i] = rewardTokens[i];\\n            bonusTokenSymbols[i] = IERC20Metadata(address(bonusTokenAddresses[i])).symbol();\\n        }\\n    }\\n\\n    /// @notice Returns amount of reward token earned by a user\\n    /// @param _account Address account\\n    /// @param _rewardToken Address reward token\\n    /// @return Returns amount of reward token earned by a user\\n    function earned(address _account, address _rewardToken)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return (\\n            (((balanceOf(_account) *\\n                (rewardPerToken(_rewardToken) -\\n                    userRewardPerTokenPaid[_rewardToken][_account])) /\\n                (10**stakingDecimals())) + userRewards[_rewardToken][_account])\\n        );\\n    }\\n\\n    /// @notice Returns amount of all reward tokens\\n    /// @param _account Address account\\n    /// @return pendingBonusRewards as amounts of all rewards.\\n    function allEarned(address _account)\\n        external\\n        override\\n        view\\n        returns (\\n            uint256[] memory pendingBonusRewards\\n        )\\n    {\\n        uint256 length = rewardTokens.length;\\n        pendingBonusRewards = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            pendingBonusRewards[i] = earned(_account, rewardTokens[i]);\\n        }\\n\\n        return pendingBonusRewards;\\n    }\\n\\n    function getStakingToken() external view returns (address) {\\n        return stakingToken;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice Updates the reward information for one account\\n    /// @param _account Address account\\n    function updateFor(address _account) override external {\\n        _updateFor(_account);\\n    }\\n\\n    /// @notice Calculates and sends reward to user. Only callable by masterMagpie\\n    /// @param _account Address account\\n    function getReward(address _account, address _receiver)\\n        override\\n        public\\n        onlyMasterMagpie\\n        updateReward(_account)\\n        returns (bool)\\n    {\\n        uint256 length = rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            uint256 reward = userRewards[rewardToken][_account]; // updated during updateReward modifier\\n            if (reward > 0) {\\n                userRewards[rewardToken][_account] = 0;\\n                IERC20(rewardToken).safeTransfer(_receiver, reward);\\n                emit RewardPaid(_account, _receiver, reward, rewardToken);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function getRewards(address _account, address _receiver, address[] memory _rewardTokens) override external {\\n\\n    }\\n\\n    function getRewardLength() external view returns(uint256) {\\n        return rewardTokens.length;\\n    }\\n\\n    /* ============ Admin Functions ============ */\\n\\n    function updateManager(address _rewardManager, bool _allowed) external onlyOwner {\\n        managers[_rewardManager] = _allowed;\\n\\n        emit ManagerUpdated(_rewardManager, managers[_rewardManager]);\\n    }\\n\\n    /// @notice Sends new rewards to be distributed to the users staking. Only callable by manager\\n    /// @param _amountReward Amount of reward token to be distributed\\n    /// @param _rewardToken Address reward token\\n    function queueNewRewards(uint256 _amountReward, address _rewardToken)\\n        override\\n        external\\n        onlyManager\\n        returns (bool)\\n    {\\n        if (!isRewardToken[_rewardToken]) {\\n            rewardTokens.push(_rewardToken);\\n            isRewardToken[_rewardToken] = true;\\n        }\\n\\n        _provisionReward(_amountReward, _rewardToken);\\n        return true;\\n    }\\n\\n    /// @notice Sends new rewards to be distributed to the users staking. Only possible to donate already registered token\\n    /// @param _amountReward Amount of reward token to be distributed\\n    /// @param _rewardToken Address reward token\\n    function donateRewards(uint256 _amountReward, address _rewardToken) external {\\n        if (!isRewardToken[_rewardToken])\\n            revert MustBeRewardToken();\\n\\n        _provisionReward(_amountReward, _rewardToken);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _updateFor(address _account) internal {\\n        uint256 length = rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            userRewards[rewardToken][_account] = earned(_account, rewardToken);\\n            userRewardPerTokenPaid[rewardToken][_account] = rewardPerToken(rewardToken);\\n        }\\n    }\\n\\n    function _provisionReward(uint256 _amountReward, address _rewardToken) internal {\\n        IERC20(_rewardToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amountReward\\n        );\\n        Reward storage rewardInfo = rewards[_rewardToken];\\n        rewardInfo.historicalRewards =\\n            rewardInfo.historicalRewards +\\n            _amountReward;\\n        if (this.totalStaked() == 0) {\\n            rewardInfo.queuedRewards += _amountReward;\\n        } else {\\n            if (rewardInfo.queuedRewards > 0) {\\n                _amountReward += rewardInfo.queuedRewards;\\n                rewardInfo.queuedRewards = 0;\\n            }\\n            rewardInfo.rewardPerTokenStored =\\n                rewardInfo.rewardPerTokenStored +\\n                (_amountReward * 10**stakingDecimals()) /\\n                this.totalStaked();\\n        }\\n        emit RewardAdded(_amountReward, _rewardToken);\\n    }\\n}\"\r\n    },\r\n    \"contracts/rewards/BaseRewardPoolV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IMasterMagpie.sol\\\";\\nimport \\\"../interfaces/IBaseRewardPool.sol\\\";\\n\\n/// @title A contract for managing rewards for a pool\\n/// @author Magpie Team\\n/// @notice You can use this contract for getting informations about rewards for a specific pools\\ncontract BaseRewardPoolV3 is Ownable, IBaseRewardPool {\\n    using SafeERC20 for IERC20Metadata;\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ State Variables ============ */\\n\\n    uint256 public constant DENOMINATOR = 10**12;\\n\\n    address public immutable stakingToken;\\n    address public immutable operator;          // master magpie\\n    uint256 public immutable stakingTokenDecimals;\\n\\n    address[] public rewardTokens;\\n\\n    struct Reward {\\n        address rewardToken;\\n        uint256 rewardPerTokenStored;\\n        uint256 queuedRewards;\\n        uint256 historicalRewards;\\n    }\\n\\n    mapping(address => Reward) public rewards;                           // [rewardToken]\\n    // amount by [rewardToken][account], \\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;                 \\n    mapping(address => mapping(address => uint256)) public userRewards;  // amount by [rewardToken][account]\\n    mapping(address => bool) public isRewardToken;\\n    mapping(address => bool) public managers;\\n\\n    /* ============ Events ============ */\\n\\n    event RewardAdded(uint256 _reward, address indexed _token);\\n    event Staked(address indexed _user, uint256 _amount);\\n    event Withdrawn(address indexed _user, uint256 _amount);\\n    event RewardPaid(address indexed _user, address indexed _receiver, uint256 _reward, address indexed _token);\\n    event ManagerUpdated(address indexed _manager, bool _allowed);\\n    event EmergencyWithdrawn(address indexed _manager, address _token, uint256 _amount);\\n\\n    /* ============ Errors ============ */\\n\\n    error OnlyManager();\\n    error OnlyMasterMagpie();\\n    error NotAllowZeroAddress();\\n    error MustBeRewardToken();\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _masterMagpie,\\n        address _rewardManager\\n    ) {\\n        if(\\n            _stakingToken == address(0) ||\\n            _masterMagpie  == address(0) ||\\n            _rewardManager  == address(0)\\n        ) revert NotAllowZeroAddress();\\n\\n        stakingToken = _stakingToken;\\n        stakingTokenDecimals = IERC20Metadata(stakingToken).decimals();\\n        operator = _masterMagpie;\\n\\n        if (_rewardToken != address(0)) {\\n            rewards[_rewardToken] = Reward({\\n                rewardToken: _rewardToken,\\n                rewardPerTokenStored: 0,\\n                queuedRewards: 0,\\n                historicalRewards: 0\\n            });\\n            rewardTokens.push(_rewardToken);\\n\\n            isRewardToken[_rewardToken] = true;\\n        }\\n\\n        managers[_rewardManager] = true;\\n    }\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyManager() {\\n        if (!managers[msg.sender])\\n            revert OnlyManager();\\n        _;\\n    }\\n\\n    modifier onlyMasterMagpie() {\\n        if (msg.sender != operator)\\n            revert OnlyMasterMagpie();\\n        _;\\n    }\\n\\n    modifier updateReward(address _account) {\\n        _updateFor(_account);\\n        _;\\n    }\\n\\n    modifier updateRewards(address _account, address[] memory _rewards) {\\n        uint256 length = _rewards.length;\\n        uint256 userShare = balanceOf(_account);\\n        \\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = _rewards[index];\\n            // if a reward stopped queuing, no need to recalculate to save gas fee\\n            if (userRewardPerTokenPaid[rewardToken][_account] == rewardPerToken(rewardToken))\\n                continue;\\n            userRewards[rewardToken][_account] = _earned(_account, rewardToken, userShare);\\n            userRewardPerTokenPaid[rewardToken][_account] = rewardPerToken(rewardToken);\\n        }\\n        _;\\n    }  \\n\\n    /* ============ External Getters ============ */\\n\\n    /// @notice Returns current amount of staked tokens\\n    /// @return Returns current amount of staked tokens\\n    function totalStaked() public override virtual view returns (uint256) {\\n        return IERC20(stakingToken).balanceOf(operator);\\n    }\\n\\n    /// @notice Returns amount of staked tokens in master magpie by account\\n    /// @param _account Address account\\n    /// @return Returns amount of staked tokens by account\\n    function balanceOf(address _account) public override virtual view returns (uint256) {\\n        (uint256 staked, ) =  IMasterMagpie(operator).stakingInfo(stakingToken, _account);\\n        return staked;\\n    }\\n\\n    function stakingDecimals() external override virtual view returns (uint256) {\\n        return stakingTokenDecimals;\\n    }\\n\\n    /// @notice Returns amount of reward token per staking tokens in pool in 10**12\\n    /// @param _rewardToken Address reward token\\n    /// @return Returns amount of reward token per staking tokens in pool in 10**12\\n    function rewardPerToken(address _rewardToken)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return rewards[_rewardToken].rewardPerTokenStored;\\n    }\\n\\n    function rewardTokenInfos()\\n        override\\n        external\\n        view\\n        returns\\n        (\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols\\n        )\\n    {\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        bonusTokenAddresses = new address[](rewardTokensLength);\\n        bonusTokenSymbols = new string[](rewardTokensLength);\\n        for (uint256 i; i < rewardTokensLength; i++) {\\n            bonusTokenAddresses[i] = rewardTokens[i];\\n            bonusTokenSymbols[i] = IERC20Metadata(address(bonusTokenAddresses[i])).symbol();\\n        }\\n    }\\n\\n    /// @notice Returns amount of reward token earned by a user\\n    /// @param _account Address account\\n    /// @param _rewardToken Address reward token\\n    /// @return Returns amount of reward token earned by a user\\n    function earned(address _account, address _rewardToken)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _earned(_account, _rewardToken, balanceOf(_account));\\n    }\\n\\n    /// @notice Returns amount of all reward tokens\\n    /// @param _account Address account\\n    /// @return pendingBonusRewards as amounts of all rewards.\\n    function allEarned(address _account)\\n        external\\n        override\\n        view\\n        returns (\\n            uint256[] memory pendingBonusRewards\\n        )\\n    {\\n        uint256 length = rewardTokens.length;\\n        pendingBonusRewards = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            pendingBonusRewards[i] = earned(_account, rewardTokens[i]);\\n        }\\n\\n        return pendingBonusRewards;\\n    }\\n\\n    function getRewardLength() external view returns(uint256) {\\n        return rewardTokens.length;\\n    }    \\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice Updates the reward information for one account\\n    /// @param _account Address account\\n    function updateFor(address _account) override external {\\n        _updateFor(_account);\\n    }\\n\\n    function getReward(address _account, address _receiver)\\n        public\\n        onlyMasterMagpie\\n        updateReward(_account)\\n        returns (bool)\\n    {\\n        uint256 length = rewardTokens.length;\\n\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            uint256 reward = userRewards[rewardToken][_account]; // updated during updateReward modifier\\n            if (reward > 0) {\\n                _sendReward(rewardToken, _account, _receiver, reward);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function getRewards(address _account, address _receiver, address[] memory _rewardTokens) override\\n        external\\n        onlyMasterMagpie\\n        updateRewards(_account, _rewardTokens)\\n    {\\n        uint256 length = _rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = _rewardTokens[index];\\n            uint256 reward = userRewards[rewardToken][_account]; // updated during updateReward modifier\\n            if (reward > 0) {\\n                _sendReward(rewardToken, _account, _receiver, reward);\\n            }\\n        }\\n    }\\n\\n    /// @notice Sends new rewards to be distributed to the users staking. Only possible to donate already registered token\\n    /// @param _amountReward Amount of reward token to be distributed\\n    /// @param _rewardToken Address reward token\\n    function donateRewards(uint256 _amountReward, address _rewardToken) external {\\n        if (!isRewardToken[_rewardToken])\\n            revert MustBeRewardToken();\\n\\n        _provisionReward(_amountReward, _rewardToken);\\n    }\\n\\n    /* ============ Admin Functions ============ */\\n\\n    function updateManager(address _rewardManager, bool _allowed) external onlyOwner {\\n        managers[_rewardManager] = _allowed;\\n\\n        emit ManagerUpdated(_rewardManager, managers[_rewardManager]);\\n    }\\n\\n    /// @notice Sends new rewards to be distributed to the users staking. Only callable by manager\\n    /// @param _amountReward Amount of reward token to be distributed\\n    /// @param _rewardToken Address reward token\\n    function queueNewRewards(uint256 _amountReward, address _rewardToken)\\n        override\\n        external\\n        onlyManager\\n        returns (bool)\\n    {\\n        if (!isRewardToken[_rewardToken]) {\\n            rewardTokens.push(_rewardToken);\\n            isRewardToken[_rewardToken] = true;\\n        }\\n\\n        _provisionReward(_amountReward, _rewardToken);\\n        return true;\\n    }\\n\\n    function emergencyWithdraw(address _rewardToken, address _to) external onlyManager {\\n        uint256 amount = IERC20(_rewardToken).balanceOf(address(this));\\n        IERC20(_rewardToken).safeTransfer(_to, amount);\\n        emit EmergencyWithdrawn(_to, _rewardToken, amount);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _provisionReward(uint256 _amountReward, address _rewardToken) internal {\\n        IERC20(_rewardToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amountReward\\n        );\\n        Reward storage rewardInfo = rewards[_rewardToken];\\n        rewardInfo.historicalRewards =\\n            rewardInfo.historicalRewards +\\n            _amountReward;\\n\\n        uint256 totalStake = totalStaked();\\n        if (totalStake == 0) {\\n            rewardInfo.queuedRewards += _amountReward;\\n        } else {\\n            if (rewardInfo.queuedRewards > 0) {\\n                _amountReward += rewardInfo.queuedRewards;\\n                rewardInfo.queuedRewards = 0;\\n            }\\n            rewardInfo.rewardPerTokenStored =\\n                rewardInfo.rewardPerTokenStored +\\n                (_amountReward * 10**stakingTokenDecimals * DENOMINATOR) /\\n                totalStake;\\n        }\\n        emit RewardAdded(_amountReward, _rewardToken);\\n    }\\n\\n    function _earned(address _account, address _rewardToken, uint256 _userShare) internal view returns (uint256) {\\n        return ((_userShare *\\n            (rewardPerToken(_rewardToken) -\\n                userRewardPerTokenPaid[_rewardToken][_account])) /\\n            (10**stakingTokenDecimals * DENOMINATOR)) + userRewards[_rewardToken][_account];\\n    }\\n\\n    function _sendReward(address _rewardToken, address _account, address _receiver, uint256 _amount) internal {\\n        userRewards[_rewardToken][_account] = 0;\\n        IERC20(_rewardToken).safeTransfer(_receiver, _amount);\\n        emit RewardPaid(_account, _receiver, _amount, _rewardToken);\\n    }\\n\\n    function _updateFor(address _account) internal {\\n        uint256 length = rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            // if a reward stopped queuing, no need to recalculate to save gas fee\\n            if (userRewardPerTokenPaid[rewardToken][_account] == rewardPerToken(rewardToken))\\n                continue;\\n\\n            userRewards[rewardToken][_account] = earned(_account, rewardToken);\\n            userRewardPerTokenPaid[rewardToken][_account] = rewardPerToken(rewardToken);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/BribeRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./BaseRewardPool.sol\\\";\\nimport \\\"./BaseRewardPoolV3.sol\\\";\\n\\n/// @title A contract for managing rewards for a pool\\n/// @author Magpie Team\\n/// @notice You can use this contract for getting informations about rewards for a specific pools\\ncontract BribeRewardPool is BaseRewardPoolV3 {\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ State Variables ============ */\\n\\n    uint256 public totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== Errors ========== */\\n\\n    error OnlyOperator();    \\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _operator,\\n        address _rewardManager\\n    ) BaseRewardPoolV3(_stakingToken, _rewardToken, _operator, _rewardManager) {}\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyOperator() {\\n        if (msg.sender != operator)\\n            revert OnlyOperator();\\n        _;\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    function balanceOf(address _account) public override virtual view returns (uint256) {\\n        return _balances[_account];\\n    }\\n\\n    function totalStaked() public override virtual view returns (uint256) {\\n        return totalSupply;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice Updates information for a user in case of staking. Can only be called by the Masterchief operator\\n    /// @param _for Address account\\n    /// @param _amount Amount of newly staked tokens by the user on masterchief\\n    function stakeFor(address _for, uint256 _amount)\\n        external\\n        virtual\\n        onlyOperator\\n        updateRewards(_for, rewardTokens)\\n    {\\n        totalSupply = totalSupply + _amount;\\n        _balances[_for] = _balances[_for] + _amount;\\n\\n        emit Staked(_for, _amount);\\n    }\\n\\n    /// @notice Updates informaiton for a user in case of a withdraw. Can only be called by the Masterchief operator\\n    /// @param _for Address account\\n    /// @param _amount Amount of withdrawed tokens by the user on masterchief\\n    function withdrawFor(\\n        address _for,\\n        uint256 _amount,\\n        bool claim\\n    ) external virtual onlyOperator updateRewards(_for, rewardTokens) {\\n        totalSupply = totalSupply - _amount;\\n        _balances[_for] = _balances[_for] - _amount;\\n\\n        emit Withdrawn(_for, _amount);\\n\\n        if (claim) {\\n            _getReward(_for);\\n        }\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getReward(address _account) internal virtual {\\n        uint256 length = rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            uint256 reward = earned(_account, rewardToken);\\n            if (reward > 0) {\\n                userRewards[rewardToken][_account] = 0;\\n                IERC20(rewardToken).safeTransfer(_account, reward);\\n                emit RewardPaid(_account, _account, reward, rewardToken);\\n            }\\n        }\\n    }    \\n}\"\r\n    },\r\n    \"contracts/wombat/WombatPoolHelperV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/IBaseRewardPool.sol\\\";\\nimport \\\"../interfaces/IHarvesttablePoolHelper.sol\\\";\\nimport \\\"../interfaces/wombat/IWombatStaking.sol\\\";\\nimport \\\"../interfaces/wombat/IMasterWombat.sol\\\";\\nimport \\\"../interfaces/IMasterMagpie.sol\\\";\\nimport \\\"../interfaces/IMintableERC20.sol\\\";\\nimport \\\"../interfaces/IWNative.sol\\\";\\nimport \\\"../interfaces/ISimpleHelper.sol\\\";\\n/// @title WombatPoolHelper\\n/// @author Magpie Team\\n/// @notice This contract is the main contract that user will intreact with in order to stake stable in Wombat Pool\\n\\n/// @dev Upgrades in PoolHelperV3 are: \\n/// 1. Added the withdrawLP functionality\\n/// 2. Added the functionality to claim rewards with withdraw of deposit token or LP token\\n\\ncontract WombatPoolHelperV3 is IHarvesttablePoolHelper, ISimpleHelper {\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ Constants ============ */\\n\\n    address public immutable depositToken; // token to deposit into wombat\\n    address public immutable lpToken; // lp token receive from wombat, also the pool identified on womabtStaking\\n    address public immutable stakingToken; // token staking to master magpie\\n    address public immutable mWom;\\n\\n    address public immutable masterMagpie;\\n    address public immutable wombatStaking;\\n    address public immutable rewarder;\\n\\n    uint256 public immutable pid; // pid on master wombat\\n\\n    bool public immutable isNative;\\n\\n    /* ============ Events ============ */\\n\\n    event NewDeposit(address indexed _user, uint256 _amount);\\n    event NewLpDeposit(address indexed _user, uint256 _amount);\\n    event NewWithdraw(address indexed _user, uint256 _amount);\\n    event NewLpWithdraw(address indexed _user, uint256 _amount);\\n\\n    /* ============ Errors ============ */\\n\\n    error NotNativeToken();\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        uint256 _pid,\\n        address _stakingToken,\\n        address _depositToken,\\n        address _lpToken,\\n        address _wombatStaking,\\n        address _masterMagpie,\\n        address _rewarder,\\n        address _mWom,\\n        bool _isNative\\n    ) {\\n        pid = _pid;\\n        stakingToken = _stakingToken;\\n        depositToken = _depositToken;\\n        lpToken = _lpToken;\\n        wombatStaking = _wombatStaking;\\n        masterMagpie = _masterMagpie;\\n        rewarder = _rewarder;\\n        mWom = _mWom;\\n        isNative = _isNative;\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    /// notice get the amount of total staked LP token in master magpie\\n    function totalStaked() external view override returns (uint256) {\\n        return IBaseRewardPool(rewarder).totalStaked();\\n    }\\n\\n    /// @notice get the total amount of shares of a user\\n    /// @param _address the user\\n    /// @return the amount of shares\\n    function balance(\\n        address _address\\n    ) external view override returns (uint256) {\\n        return IBaseRewardPool(rewarder).balanceOf(_address);\\n    }\\n\\n    /// @notice returns the number of pending MGP of the contract for the given pool\\n    /// returns pendingTokens the number of pending MGP\\n    function pendingWom() external view returns (uint256 pendingTokens) {\\n        (pendingTokens, , , ) = IMasterWombat(\\n            IWombatStaking(wombatStaking).masterWombat()\\n        ).pendingTokens(pid, wombatStaking);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice deposit stables in wombat pool, autostake in master magpie\\n    /// @param _amount the amount of stables to deposit\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _minimumLiquidity\\n    ) external override {\\n        _deposit(_amount, _minimumLiquidity, msg.sender, msg.sender);\\n    }\\n\\n    function depositFor(uint256 _amount, address _for) external {\\n        IERC20(depositToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(depositToken).safeApprove(wombatStaking, _amount);\\n        _deposit(_amount, 0, _for, address(this));\\n    }\\n\\n    function depositLP(uint256 _lpAmount) external {\\n        uint256 beforeDeposit = IERC20(stakingToken).balanceOf(address(this));\\n        IWombatStaking(wombatStaking).depositLP(lpToken, _lpAmount, msg.sender);\\n        uint256 afterDeposit = IERC20(stakingToken).balanceOf(address(this));\\n        _stake(afterDeposit - beforeDeposit, msg.sender);\\n\\n        emit NewLpDeposit(msg.sender, _lpAmount);\\n    }\\n\\n    function depositNative(uint256 _minimumLiquidity) external payable {\\n        if (!isNative) revert NotNativeToken();\\n        // Dose need to limit the amount must > 0?\\n\\n        // Swap the BNB to wBNB\\n        _wrapNative();\\n        // depsoit wBNB to the pool\\n        IWNative(depositToken).approve(wombatStaking, msg.value);\\n        _deposit(msg.value, _minimumLiquidity, msg.sender, address(this));\\n        IWNative(depositToken).approve(wombatStaking, 0);\\n    }\\n\\n    /// @notice withdraw stables from wombat pool, auto unstake from master Magpie\\n    /// @param _liquidity the amount of liquidity to withdraw\\n    function withdraw(\\n        uint256 _liquidity,\\n        uint256 _minAmount\\n    ) external override {\\n        _withdraw(_liquidity, _minAmount, false);\\n    }\\n\\n    function withdrawAndClaim(\\n        uint256 _liquidity,\\n        uint256 _minAmount,\\n        bool _isClaim\\n    ) external {\\n        _withdraw(_liquidity, _minAmount, _isClaim);\\n    }\\n\\n    function withdrawLP(uint256 _amount, bool claim) external {\\n        // withdraw from wombat exchange and harvest rewards to base rewarder\\n        IWombatStaking(wombatStaking).withdrawLP(lpToken, _amount, msg.sender);\\n        // unstke from Master Wombat and trigger reward distribution from basereward\\n        _unstake(_amount, msg.sender);\\n        // claim all rewards\\n        if (claim) _claimRewards(msg.sender);\\n        // burn the staking token withdrawn from Master Magpie\\n        IWombatStaking(wombatStaking).burnReceiptToken(lpToken, _amount);\\n        emit NewLpWithdraw(msg.sender, _amount);\\n    }\\n\\n    function harvest() external override {\\n        IWombatStaking(wombatStaking).harvest(lpToken);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _withdraw(\\n        uint256 _liquidity,\\n        uint256 _minAmount,\\n        bool _claim\\n    ) internal {\\n        // we have to withdraw from wombat exchange to harvest reward to base rewarder\\n        IWombatStaking(wombatStaking).withdraw(\\n            lpToken,\\n            _liquidity,\\n            _minAmount,\\n            msg.sender\\n        );\\n        // then we unstake from master wombat to trigger reward distribution from basereward\\n        _unstake(_liquidity, msg.sender);\\n\\n        if (_claim) _claimRewards(msg.sender);\\n\\n        //  last burn the staking token withdrawn from Master Magpie\\n        IWombatStaking(wombatStaking).burnReceiptToken(lpToken, _liquidity);\\n        emit NewWithdraw(msg.sender, _liquidity);\\n    }\\n\\n    function _claimRewards(address _for) internal {\\n        address[] memory stakingTokens = new address[](1);\\n        stakingTokens[0] = stakingToken;\\n        address[][] memory rewardTokens = new address[][](1);\\n        IMasterMagpie(masterMagpie).multiclaimFor(\\n            stakingTokens,\\n            rewardTokens,\\n            _for\\n        );\\n    }\\n\\n    function _deposit(\\n        uint256 _amount,\\n        uint256 _minimumLiquidity,\\n        address _for,\\n        address _from\\n    ) internal {\\n        uint256 beforeDeposit = IERC20(stakingToken).balanceOf(address(this));\\n        IWombatStaking(wombatStaking).deposit(\\n            lpToken,\\n            _amount,\\n            _minimumLiquidity,\\n            _for,\\n            _from\\n        );\\n        uint256 afterDeposit = IERC20(stakingToken).balanceOf(address(this));\\n        _stake(afterDeposit - beforeDeposit, _for);\\n\\n        emit NewDeposit(_for, _amount);\\n    }\\n\\n    function _wrapNative() internal {\\n        IWNative(depositToken).deposit{value: msg.value}();\\n    }\\n\\n    /// @notice stake the receipt token in the masterchief of GMP on behalf of the caller\\n    function _stake(uint256 _amount, address _sender) internal {\\n        IERC20(stakingToken).safeApprove(masterMagpie, _amount);\\n        IMasterMagpie(masterMagpie).depositFor(stakingToken, _amount, _sender);\\n    }\\n\\n    /// @notice unstake from the masterchief of GMP on behalf of the caller\\n    function _unstake(uint256 _amount, address _sender) internal {\\n        IMasterMagpie(masterMagpie).withdrawFor(stakingToken, _amount, _sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wombat/WombatStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport { IERC20, ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport { IWombatPool } from \\\"../interfaces/wombat/IWombatPool.sol\\\";\\nimport { IMasterWombat } from \\\"../interfaces/wombat/IMasterWombat.sol\\\";\\nimport { IVeWom } from \\\"../interfaces/wombat/IVeWom.sol\\\";\\nimport { IMWom } from \\\"../interfaces/wombat/IMWom.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/IMintableERC20.sol\\\";\\nimport \\\"../interfaces/IPoolHelper.sol\\\";\\nimport \\\"../interfaces/IBaseRewardPool.sol\\\";\\nimport \\\"../interfaces/IMasterMagpie.sol\\\";\\nimport \\\"../interfaces/IConverter.sol\\\";\\nimport \\\"../libraries/MagpieFactoryLib.sol\\\";\\nimport \\\"../libraries/DSMath.sol\\\";\\nimport \\\"../libraries/SignedSafeMath.sol\\\";\\n\\nimport \\\"../interfaces/wombat/IWombatVoter.sol\\\";\\nimport \\\"../interfaces/wombat/IWombatBribe.sol\\\";\\nimport \\\"../interfaces/pancake/IBNBZapper.sol\\\";\\nimport \\\"../interfaces/IDelegateRegistry.sol\\\";\\n\\ncontract WombatStaking is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    /* ============ Structs ============ */\\n\\n    struct Pool {\\n        uint256 pid; // pid on master wombat\\n        address depositToken; // token to be deposited on wombat\\n        address lpAddress; // token received after deposit on wombat\\n        address receiptToken; // token to receive after\\n        address rewarder;\\n        address helper;\\n        address depositTarget;\\n        bool isActive;\\n    }\\n\\n    struct Fees {\\n        uint256 value; // allocation denominated by DENOMINATOR\\n        address to;\\n        bool isMWOM;\\n        bool isAddress;\\n        bool isActive;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // Addresses\\n    address public wom;\\n    address public veWom;\\n    address public mWom;\\n\\n    address public masterWombat;\\n    address public masterMagpie;\\n\\n    // Fees\\n    uint256 constant DENOMINATOR = 10000;\\n    uint256 public totalFee;\\n\\n    uint256 public lockDays;\\n\\n    mapping(address => Pool) public pools;\\n    mapping(address => address[]) public assetToBonusRewards; // extra rewards for alt pool\\n\\n    address[] private poolTokenList;\\n\\n    Fees[] public feeInfos;\\n\\n    /* ==== variable added for first upgrade === */\\n\\n    mapping(address => bool) public isPoolFeeFree;\\n    // for bribe\\n    address public smartWomConverter;\\n    IWombatVoter public voter;\\n    address public bribeManager;\\n    uint256 public bribeCallerFee;\\n    uint256 public bribeProtocolFee;\\n    address public bribeFeeCollector;\\n\\n    address public constant wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    /* ==== variable added for second upgrade === */\\n\\n    address public delegateRegistry;\\n    address public BNBZapper;\\n    uint256 public harvestCallerFee;\\n\\n    /* ============ Events ============ */\\n\\n    // Admin\\n    event PoolAdded(\\n        uint256 _pid,\\n        address _depositToken,\\n        address _lpAddress,\\n        address _helper,\\n        address _rewarder,\\n        address _receiptToken\\n    );\\n    event PoolRemoved(uint256 _pid, address _lpToken);\\n    event PoolHelperUpdated(address _lpToken);\\n    event MasterMagpieUpdated(address _oldMasterMagpie, address _newMasterMagpie);\\n    event MasterWombatUpdated(address _oldWombatStaking, address _newWombatStaking);\\n    event BribeManagerUpdated(address _oldBribeManager, address _bribeManager);\\n    event SmartWomConverterUpdated(\\n        address _oldSmartWomConverterUpdated,\\n        address _newSmartWomConverterUpdated\\n    );\\n    event SetMWom(address _oldmWom, address _newmWom);\\n    event SetLockDays(uint256 _oldLockDays, uint256 _newLockDays);\\n\\n    // Fee\\n    event AddFee(address _to, uint256 _value, bool _isMWOM, bool _isAddress);\\n    event SetFee(address _to, uint256 _value);\\n    event RemoveFee(uint256 value, address to, bool _isMWOM, bool _isAddress);\\n    event RewardPaidTo(address _to, address _rewardToken, uint256 _feeAmount);\\n    event HarvestCallerFeeSent(address _to, uint256 _womAmountToBNB);\\n    event SetHarvestCallerFee(uint256 _feeAmount);\\n\\n    // Deposit Withdraw\\n    event NewDeposit(\\n        address indexed _user,\\n        address indexed _depositToken,\\n        uint256 _depositAmount,\\n        address indexed _receptToken,\\n        uint256 _receptAmount\\n    );\\n\\n    event NewLPDeposit(\\n        address indexed _user,\\n        address indexed _lpToken,\\n        uint256 _lpAmount,\\n        address indexed _receptToken,\\n        uint256 _receptAmount\\n    );\\n\\n    event NewWithdraw(\\n        address indexed _user,\\n        address indexed _depositToken,\\n        uint256 _liquitity\\n    );\\n\\n    event NewLpWithdraw(\\n        address indexed _user,\\n        address indexed _lpToken,\\n        uint256 _lpAmount\\n    );\\n\\n    // mWom\\n    event WomLocked(uint256 _amount, uint256 _lockDays, uint256 _veWomAccumulated);\\n\\n    // Bribe\\n    event BribeSet(\\n        address _voter,\\n        address _bribeManager,\\n        uint256 _bribeCallerFee,\\n        uint256 _bribeProtocolFee,\\n        address _bribeFeeCollector\\n    );\\n\\n    event DelegateRegistrySet(address _oldDelegateRegistry, address _newDelegateRegistry);\\n\\n    event SnapshotDelegateSet(\\n        address indexed _delegator,\\n        bytes32 indexed _id,\\n        address indexed _delegate\\n    );\\n\\n    /* ============ Errors ============ */\\n\\n    error OnlyPoolHelper();\\n    error OnlyActivePool();\\n    error PoolOccupied();\\n    error InvalidFee();\\n    error OnlyBribeMamager();\\n    error LengthMismatch();\\n    error InvalidInput();\\n    error DelegateRegistryNotSet();\\n    error TotalFeeOverflow();\\n\\n    /* ============ Constructor ============ */\\n\\n    function __WombatStaking_init(\\n        address _wom,\\n        address _veWom,\\n        address _masterWombat,\\n        address _masterMagpie\\n    ) public initializer {\\n        __Ownable_init();\\n        wom = _wom;\\n        veWom = _veWom;\\n        masterWombat = _masterWombat;\\n        masterMagpie = _masterMagpie;\\n        lockDays = 1461;\\n    }\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier _onlyPoolHelper(address _lpToken) {\\n        Pool storage poolInfo = pools[_lpToken];\\n        if (msg.sender != poolInfo.helper) revert OnlyPoolHelper();\\n        _;\\n    }\\n\\n    modifier _onlyActivePool(address _lpToken) {\\n        Pool storage poolInfo = pools[_lpToken];\\n        if (!poolInfo.isActive) revert OnlyActivePool();\\n        _;\\n    }\\n\\n    modifier _onlyActivePoolHelper(address _lpToken) {\\n        Pool storage poolInfo = pools[_lpToken];\\n        if (msg.sender != poolInfo.helper) revert OnlyPoolHelper();\\n        if (!poolInfo.isActive) revert OnlyActivePool();\\n        _;\\n    }\\n\\n    /// @notice payable function needed to receive BNB\\n    receive() external payable {}\\n\\n    /* ============ External Getters ============ */\\n\\n    /// @notice get the number of veWom of this contract\\n    function accumelatedVeWom() external view returns (uint256) {\\n        return IERC20(veWom).balanceOf(address(this));\\n    }\\n\\n    function pendingBribeCallerFee(\\n        address[] calldata pendingPools\\n    )\\n        external\\n        view\\n        returns (IERC20[][] memory rewardTokens, uint256[][] memory callerFeeAmount)\\n    {\\n        // Warning: Arguments do not take into account repeated elements in the pendingPools list\\n        uint256[][] memory pending = voter.pendingBribes(pendingPools, address(this));\\n\\n        rewardTokens = new IERC20[][](pending.length);\\n        callerFeeAmount = new uint256[][](pending.length);\\n\\n        for (uint256 i; i < pending.length; i++) {\\n            rewardTokens[i] = IWombatBribe(voter.infos(pendingPools[i]).bribe)\\n                .rewardTokens();\\n            callerFeeAmount[i] = new uint256[](pending[i].length);\\n\\n            for (uint256 j; j < pending[i].length; j++) {\\n                if (pending[i][j] > 0) {\\n                    callerFeeAmount[i][j] =\\n                        (pending[i][j] * bribeCallerFee) /\\n                        DENOMINATOR;\\n                }\\n            }\\n        }\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice deposit wombat pool token in a wombat Pool\\n    /// @dev this function can only be called by a PoolHelper\\n    /// @param _lpAddress the lp token to deposit into wombat pool\\n    /// @param _amount the amount to deposit\\n    /// @param _for the user to deposit for\\n    /// @param _from the address to transfer from\\n    function deposit(\\n        address _lpAddress,\\n        uint256 _amount,\\n        uint256 _minimumLiquidity,\\n        address _for,\\n        address _from\\n    ) external nonReentrant whenNotPaused _onlyActivePoolHelper(_lpAddress) {\\n        // Get information of the Pool of the token\\n        Pool storage poolInfo = pools[_lpAddress];\\n\\n        address depositToken = poolInfo.depositToken;\\n        (uint256[] memory rewardTokenPreBal, IERC20[] memory rewardTokens) = _rewardBeforeBalances(\\n            poolInfo.lpAddress\\n        );\\n\\n        IERC20(depositToken).safeTransferFrom(_from, address(this), _amount);\\n        IERC20(depositToken).safeApprove(poolInfo.depositTarget, _amount);\\n        uint256 liqudiity = IWombatPool(poolInfo.depositTarget).deposit(\\n            depositToken,\\n            _amount,\\n            _minimumLiquidity,\\n            address(this),\\n            block.timestamp,\\n            true\\n        );\\n\\n        _calculateAndSendReward(_lpAddress, rewardTokenPreBal, rewardTokens, false); \\n        // update variables\\n        IMintableERC20(poolInfo.receiptToken).mint(msg.sender, liqudiity);\\n        emit NewDeposit(_for, depositToken, _amount, poolInfo.receiptToken, liqudiity);\\n    }\\n\\n    function depositLP(\\n        address _lpAddress,\\n        uint256 _lpAmount,\\n        address _for\\n    ) external nonReentrant whenNotPaused _onlyActivePoolHelper(_lpAddress) {\\n        // Get information of the Pool of the token\\n        Pool storage poolInfo = pools[_lpAddress];\\n        // Transfer lp to this contract and stake it to wombat\\n        (uint256[] memory rewardTokenPreBal, IERC20[] memory rewardTokens) = _rewardBeforeBalances(\\n            poolInfo.lpAddress\\n        );\\n        IERC20(poolInfo.lpAddress).safeTransferFrom(_for, address(this), _lpAmount);\\n\\n        IERC20(poolInfo.lpAddress).safeApprove(masterWombat, _lpAmount);\\n        IMasterWombat(masterWombat).deposit(poolInfo.pid, _lpAmount);\\n\\n        _calculateAndSendReward(_lpAddress, rewardTokenPreBal, rewardTokens, false); // triggers harvest from wombat exchange\\n        IMintableERC20(poolInfo.receiptToken).mint(msg.sender, _lpAmount);\\n\\n        emit NewLPDeposit(\\n            _for,\\n            poolInfo.lpAddress,\\n            _lpAmount,\\n            poolInfo.receiptToken,\\n            _lpAmount\\n        );\\n    }\\n\\n    /// @notice withdraw from a wombat Pool. Note!!! pool helper has to burn receipt token!\\n    /// @dev Only a PoolHelper can call this function\\n    /// @param _lpToken the address of the wombat pool lp token\\n    /// @param _liquidity wombat pool liquidity\\n    /// @param _minAmount The minimal amount the user accepts because of slippage\\n    /// @param _sender the address of the user\\n    function withdraw(\\n        address _lpToken,\\n        uint256 _liquidity,\\n        uint256 _minAmount,\\n        address _sender\\n    ) external nonReentrant whenNotPaused _onlyPoolHelper(_lpToken) {\\n        Pool storage poolInfo = pools[_lpToken];\\n\\n        IERC20(poolInfo.lpAddress).safeApprove(poolInfo.depositTarget, _liquidity);\\n\\n        (uint256[] memory rewardTokenPreBal, IERC20[] memory rewardTokens) = _rewardBeforeBalances(\\n            poolInfo.lpAddress\\n        );\\n        IMasterWombat(masterWombat).withdraw(poolInfo.pid, _liquidity);\\n        _calculateAndSendReward(_lpToken, rewardTokenPreBal, rewardTokens, false);\\n\\n        uint256 beforeWithdraw = IERC20(poolInfo.depositToken).balanceOf(address(this));\\n        IWombatPool(poolInfo.depositTarget).withdraw(\\n            poolInfo.depositToken,\\n            _liquidity,\\n            _minAmount,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        IERC20(poolInfo.depositToken).safeTransfer(\\n            _sender,\\n            IERC20(poolInfo.depositToken).balanceOf(address(this)) - beforeWithdraw\\n        );\\n\\n        emit NewWithdraw(_sender, poolInfo.depositToken, _liquidity);\\n    }\\n\\n    function withdrawLP(\\n        address _lpToken,\\n        uint256 _lpAmount,\\n        address _sender\\n    ) external nonReentrant whenNotPaused _onlyPoolHelper(_lpToken) {\\n        Pool storage poolInfo = pools[_lpToken];\\n\\n        uint256 beforeLpWithdraw = IERC20(poolInfo.lpAddress).balanceOf(address(this));\\n\\n        (uint256[] memory rewardTokenPreBal, IERC20[] memory rewardTokens) = _rewardBeforeBalances(\\n            poolInfo.lpAddress\\n        );\\n\\n        IMasterWombat(masterWombat).withdraw(poolInfo.pid, _lpAmount);\\n        _calculateAndSendReward(_lpToken, rewardTokenPreBal, rewardTokens, false);\\n        IERC20(poolInfo.lpAddress).safeTransfer(\\n            _sender,\\n            IERC20(poolInfo.lpAddress).balanceOf(address(this)) - beforeLpWithdraw\\n        );\\n\\n        emit NewLpWithdraw(_sender, poolInfo.lpAddress, _lpAmount);\\n    }\\n\\n    function burnReceiptToken(\\n        address _lpToken,\\n        uint256 _amount\\n    ) external whenNotPaused _onlyPoolHelper(_lpToken) {\\n        IMintableERC20(pools[_lpToken].receiptToken).burn(msg.sender, _amount);\\n    }\\n\\n    /// @notice harvest a Pool from Wombat\\n    /// @param _lpToken wombat pool lp as helper identifier\\n    function harvest(address _lpToken) external whenNotPaused _onlyActivePool(_lpToken) {\\n        Pool storage poolInfo = pools[_lpToken];\\n        (uint256[] memory rewardTokenPreBal, IERC20[] memory rewardTokens) = _rewardBeforeBalances(\\n            poolInfo.lpAddress\\n        );\\n        // Approve Transfer to Master Wombat for Staking\\n        IERC20(_lpToken).safeApprove(masterWombat, 0);\\n        IMasterWombat(masterWombat).deposit(poolInfo.pid, 0);\\n        _calculateAndSendReward(_lpToken, rewardTokenPreBal, rewardTokens, true);\\n    }\\n\\n    function batchHarvest(\\n        address[] calldata _lpTokens,\\n        uint256 minReceive\\n    ) external whenNotPaused nonReentrant {\\n        _tobatchMasterWomAndSendReward(_lpTokens, minReceive); // triggers harvest from wombat exchange\\n    }\\n    /// @notice convert WOM to mWOM\\n    /// @param _amount the number of WOM to convert\\n    /// @dev the WOM must already be in the contract\\n    function convertWOM(uint256 _amount) external whenNotPaused returns (uint256) {\\n        uint256 veWomMintedAmount = 0;\\n        if (_amount > 0) {\\n            IERC20(wom).safeApprove(veWom, _amount);\\n            veWomMintedAmount = IVeWom(veWom).mint(_amount, lockDays);\\n        }\\n        emit WomLocked(_amount, lockDays, veWomMintedAmount);\\n        return veWomMintedAmount;\\n    }\\n\\n    /// @notice stake all the WOM balance of the contract\\n    function convertAllWom() external whenNotPaused {\\n        this.convertWOM(IERC20(wom).balanceOf(address(this)));\\n    }\\n\\n    /* ============ Admin Functions ============ */\\n\\n    /// @notice Vote on WOM gauges\\n    /// @dev voting harvest the pools, even if the pool has no changing vote,\\n    /// so we have to ensure that each reward token goes to the good rewarder\\n    /// @dev this function can cost a lot of gas, so maybe we will not launch it at every interaction\\n    function vote(\\n        address[] calldata _lpVote,\\n        int256[] calldata _deltas,\\n        address[] calldata _rewarders,\\n        address caller\\n    )\\n        external\\n        returns (IERC20[][] memory rewardTokens, uint256[][] memory callerFeeAmounts)\\n    {\\n        if (msg.sender != bribeManager) revert OnlyBribeMamager();\\n\\n        if (_lpVote.length != _rewarders.length || _lpVote.length != _deltas.length)\\n            revert LengthMismatch();\\n        uint256[][] memory rewardAmounts = voter.vote(_lpVote, _deltas);\\n        rewardTokens = new IERC20[][](rewardAmounts.length);\\n        callerFeeAmounts = new uint256[][](rewardAmounts.length);\\n\\n        for (uint256 i; i < rewardAmounts.length; i++) {\\n            address bribesContract = address(voter.infos(_lpVote[i]).bribe);\\n\\n            if (bribesContract != address(0)) {\\n                rewardTokens[i] = IWombatBribe(bribesContract).rewardTokens();\\n                callerFeeAmounts[i] = new uint256[](rewardAmounts[i].length);\\n\\n                for (uint256 j; j < rewardAmounts[i].length; j++) {\\n                    uint256 rewardAmount = rewardAmounts[i][j];\\n                    uint256 callerFeeAmount = 0;\\n\\n                    if (rewardAmount > 0) {\\n                        // if reward token is bnb, wrap it first\\n                        if (address(rewardTokens[i][j]) == address(0)) {\\n                            Address.sendValue(payable(wbnb), rewardAmount);\\n                            rewardTokens[i][j] = IERC20(wbnb);\\n                        }\\n\\n                        uint256 protocolFee = (rewardAmount * bribeProtocolFee) /\\n                            DENOMINATOR;\\n\\n                        if (protocolFee > 0) {\\n                            IERC20(rewardTokens[i][j]).safeTransfer(\\n                                bribeFeeCollector,\\n                                protocolFee\\n                            );\\n                        }\\n\\n                        if (caller != address(0) && bribeCallerFee != 0) {\\n                            callerFeeAmount =\\n                                (rewardAmount * bribeCallerFee) /\\n                                DENOMINATOR;\\n                            IERC20(rewardTokens[i][j]).safeTransfer(\\n                                bribeManager,\\n                                callerFeeAmount\\n                            );\\n                        }\\n\\n                        rewardAmount -= protocolFee;\\n                        rewardAmount -= callerFeeAmount;\\n                        IERC20(rewardTokens[i][j]).safeApprove(\\n                            _rewarders[i],\\n                            rewardAmount\\n                        );\\n                        IBaseRewardPool(_rewarders[i]).queueNewRewards(\\n                            rewardAmount,\\n                            address(rewardTokens[i][j])\\n                        );\\n                    }\\n\\n                    callerFeeAmounts[i][j] = callerFeeAmount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Register a new Pool on Wombat Staking and Master Magpie\\n    /// @dev this function will deploy a new WombatPoolHelper, and add the Pool to the masterMagpie\\n    /// @param _pid the pid of the Pool on master wombat\\n    /// @param _depositToken the token to stake in the wombat Pool\\n    /// @param _lpAddress the address of the recepit token after deposit into wombat Pool. Also used for the pool identifier on WombatStaking\\n    /// @param _depositTarget the address to deposit for alt Pool\\n    /// @param _receiptName the name of the receipt Token\\n    /// @param _receiptSymbol the symbol of the receipt Token\\n    /// @param _allocPoints the weight of the MGP allocation\\n   function registerPool(\\n        uint256 _pid,\\n        address _depositToken,\\n        address _lpAddress,\\n        address _depositTarget,\\n        string memory _receiptName,\\n        string memory _receiptSymbol,\\n        uint256 _allocPoints,\\n        bool _isNative\\n    ) external onlyOwner {\\n        if (pools[_lpAddress].isActive != false) {\\n            revert PoolOccupied();\\n        }\\n\\n        address newToken = MagpieFactoryLib.createERC20(\\n            _receiptName,\\n            _receiptSymbol\\n        );\\n\\n        address rewarder = IMasterMagpie(masterMagpie).createRewarder(\\n            newToken,\\n            wom\\n        );\\n\\n        address helper = MagpieFactoryLib.createWombatPoolHelper(\\n            _pid,\\n            newToken,\\n            _depositToken,\\n            _lpAddress,\\n            address(this),\\n            masterMagpie,\\n            rewarder,\\n            mWom,\\n            _isNative\\n        );\\n\\n        IMasterMagpie(masterMagpie).add(\\n            _allocPoints,\\n            newToken,\\n            rewarder,\\n            address(helper),\\n            true\\n        );\\n\\n        pools[_lpAddress] = Pool({\\n            pid: _pid,\\n            isActive: true,\\n            depositToken: _depositToken,\\n            lpAddress: _lpAddress,\\n            receiptToken: newToken,\\n            rewarder: rewarder,\\n            helper: helper,\\n            depositTarget: _depositTarget\\n        });\\n        poolTokenList.push(_depositToken);\\n\\n        emit PoolAdded(\\n            _pid,\\n            _depositToken,\\n            _lpAddress,\\n            helper,\\n            rewarder,\\n            newToken\\n        );\\n    }\\n\\n    /// @notice set the mWom address\\n    /// @param _mWom the mWom address\\n    function setMWom(address _mWom) external onlyOwner {\\n        address oldmWom = mWom;\\n        mWom = _mWom;\\n        emit SetMWom(oldmWom, mWom);\\n    }\\n\\n    function setLockDays(uint256 _newLockDays) external onlyOwner {\\n        uint256 oldLockDays = lockDays;\\n        lockDays = _newLockDays;\\n        emit SetLockDays(oldLockDays, lockDays);\\n    }\\n\\n    /// @notice mark the pool as inactive\\n    function removePool(address _lpToken) external onlyOwner {\\n        pools[_lpToken].isActive = false;\\n        emit PoolRemoved(pools[_lpToken].pid, _lpToken);\\n    }\\n\\n    /// @notice update the pool information on wombat deposit and master magpie.\\n    function updatePoolHelper(\\n        address _lpAddress,\\n        uint256 _pid,\\n        address _poolHelper,\\n        address _rewarder,\\n        address _depositToken,\\n        address _depositTarget,\\n        uint256 _allocPoint\\n    ) external onlyOwner _onlyActivePool(_lpAddress) {\\n        Pool storage poolInfo = pools[_lpAddress];\\n        poolInfo.pid = _pid;\\n        poolInfo.helper = _poolHelper;\\n        poolInfo.rewarder = _rewarder;\\n        poolInfo.depositToken = _depositToken;\\n        poolInfo.depositTarget = _depositTarget;\\n\\n        IMasterMagpie(masterMagpie).set(\\n            poolInfo.receiptToken,\\n            _allocPoint,\\n            _poolHelper,\\n            _rewarder,\\n            true\\n        );\\n\\n        emit PoolHelperUpdated(_lpAddress);\\n    }\\n\\n    function upgradeHelper(address _lpAddress) external onlyOwner {\\n\\n        Pool storage poolInfo = pools[_lpAddress];\\n        IPoolHelper oldPoolHelper = IPoolHelper(poolInfo.helper);\\n        address newHelper = MagpieFactoryLib.createWombatPoolHelper(\\n            oldPoolHelper.pid(),\\n            oldPoolHelper.stakingToken(),\\n            oldPoolHelper.depositToken(),\\n            oldPoolHelper.lpToken(),\\n            address(this),\\n            masterMagpie,\\n            oldPoolHelper.rewarder(),\\n            mWom,\\n            oldPoolHelper.isNative()\\n        );\\n        poolInfo.helper = newHelper;\\n\\n        (,uint256 allocPoint,,) = IMasterMagpie(masterMagpie).getPoolInfo(oldPoolHelper.stakingToken());\\n        IMasterMagpie(masterMagpie).set(\\n            oldPoolHelper.stakingToken(),\\n            allocPoint,\\n            newHelper,\\n            oldPoolHelper.rewarder(),\\n            true\\n        );\\n    }\\n\\n    // function setMasterMagpie(address _masterMagpie) external onlyOwner {\\n    //     address oldMasterMagpie = masterMagpie;\\n    //     masterMagpie = _masterMagpie;\\n\\n    //     emit MasterMagpieUpdated(oldMasterMagpie, masterMagpie);\\n    // }\\n\\n    // function setMasterWombat(address _masterWombat) external onlyOwner {\\n    //     address oldMasterWombat = masterWombat;\\n    //     masterWombat = _masterWombat;\\n\\n    //     emit MasterWombatUpdated(oldMasterWombat, masterWombat);\\n    // }\\n\\n    function setBribeManager(address _bribeManager) external onlyOwner {\\n        address oldBribeManager = bribeManager;\\n        bribeManager = _bribeManager;\\n\\n        emit BribeManagerUpdated(oldBribeManager, bribeManager);\\n    }\\n\\n    // function setSmartConvert(address _smartConvert) external onlyOwner {\\n    //     address oldsmartWomConverter = smartWomConverter;\\n    //     smartWomConverter = _smartConvert;\\n\\n    //     emit SmartWomConverterUpdated(oldsmartWomConverter, smartWomConverter);\\n    // }\\n\\n    function setHarvestCallerFee(uint256 _harvestCallerFee) external onlyOwner {\\n        harvestCallerFee = _harvestCallerFee;\\n        emit SetHarvestCallerFee(harvestCallerFee);\\n    }\\n\\n    function setBNBZapper(address newZapper) external onlyOwner {\\n        BNBZapper = newZapper;\\n    }\\n    \\n    // function setDelegateRegistry(address _delegateRegistry) external onlyOwner {\\n    //     if (_delegateRegistry == address(0)) revert InvalidInput();\\n\\n    //     address oldDelegateRegistry = delegateRegistry;\\n    //     delegateRegistry = _delegateRegistry;\\n\\n    //     emit DelegateRegistrySet(oldDelegateRegistry, _delegateRegistry);\\n    // }\\n\\n    // function setSnapshotDelegate(bytes32 _id, address _delegate) external onlyOwner {\\n    //     if (delegateRegistry == address(0)) revert DelegateRegistryNotSet();\\n    //     if (_delegate == address(0) || _id == bytes32(0)) revert InvalidInput();\\n\\n    //     IDelegateRegistry(delegateRegistry).setDelegate(_id, _delegate);\\n\\n    //     emit SnapshotDelegateSet(address(this), _id, _delegate);\\n    // }\\n\\n    // /**\\n    //  * @notice pause wombat staking, restricting certain operations\\n    //  */\\n    // function pause() external nonReentrant onlyOwner {\\n    //     _pause();\\n    // }\\n\\n    // /**\\n    //  * @notice unpause wombat staking, enabling certain operations\\n    //  */\\n    // function unpause() external nonReentrant onlyOwner {\\n    //     _unpause();\\n    // }\\n\\n    /// @notice This function adds a fee to the magpie protocol\\n    /// @param _value the initial value for that fee\\n    /// @param _to the address or contract that receives the fee\\n    /// @param isMWOM true if the fee is sent as MWOM, otherwise it will be WOM\\n    /// @param _isAddress true if the receiver is an address, otherwise it's a BaseRewarder\\n    function addFee(\\n        uint256 _value,\\n        address _to,\\n        bool isMWOM,\\n        bool _isAddress\\n    ) external onlyOwner {\\n        if (_value >= DENOMINATOR) revert InvalidFee();\\n\\n        feeInfos.push(\\n            Fees({\\n                value: _value,\\n                to: _to,\\n                isMWOM: isMWOM,\\n                isAddress: _isAddress,\\n                isActive: true\\n            })\\n        );\\n        totalFee += _value;\\n        if(totalFee > DENOMINATOR) revert TotalFeeOverflow();\\n        emit AddFee(_to, _value, isMWOM, _isAddress);\\n    }\\n\\n    /// @notice change the value of some fee\\n    /// @dev the value must be between the min and the max specified when registering the fee\\n    /// @dev the value must match the max fee requirements\\n    /// @param _index the index of the fee in the fee list\\n    /// @param _value the new value of the fee\\n    function setFee(\\n        uint256 _index,\\n        uint256 _value,\\n        address _to,\\n        bool _isMWOM,\\n        bool _isAddress,\\n        bool _isActive\\n    ) external onlyOwner {\\n        if (_value >= DENOMINATOR) revert InvalidFee();\\n\\n        Fees storage fee = feeInfos[_index];\\n        fee.to = _to;\\n        fee.isMWOM = _isMWOM;\\n        fee.isAddress = _isAddress;\\n        fee.isActive = _isActive;\\n\\n        totalFee = totalFee - fee.value + _value;\\n        if(totalFee > DENOMINATOR) revert TotalFeeOverflow();\\n        fee.value = _value;\\n\\n        emit SetFee(fee.to, _value);\\n    }\\n\\n    /// @notice remove some fee\\n    /// @param _index the index of the fee in the fee list\\n    function removeFee(uint256 _index) external onlyOwner {\\n        Fees memory feeToRemove = feeInfos[_index];\\n\\n        for (uint i = _index; i < feeInfos.length - 1; i++) {\\n            feeInfos[i] = feeInfos[i + 1];\\n        }\\n        feeInfos.pop();\\n        totalFee -= feeToRemove.value;\\n\\n        emit RemoveFee(\\n            feeToRemove.value,\\n            feeToRemove.to,\\n            feeToRemove.isMWOM,\\n            feeToRemove.isAddress\\n        );\\n    }\\n\\n    function setPoolRewardFeeFree(address _lpToken, bool isFeeFree) external onlyOwner {\\n        isPoolFeeFree[_lpToken] = isFeeFree;\\n    }\\n\\n    function setBribe(\\n        address _voter,\\n        address _bribeManager,\\n        uint256 _bribeCallerFee,\\n        uint256 _bribeProtocolFee,\\n        address _bribeFeeCollector\\n    ) external onlyOwner {\\n        if ((_bribeCallerFee + _bribeProtocolFee) > DENOMINATOR) revert InvalidFee();\\n\\n        voter = IWombatVoter(_voter);\\n        bribeManager = _bribeManager;\\n        bribeCallerFee = _bribeCallerFee;\\n        bribeProtocolFee = _bribeProtocolFee;\\n        bribeFeeCollector = _bribeFeeCollector;\\n\\n        emit BribeSet(\\n            _voter,\\n            _bribeManager,\\n            _bribeCallerFee,\\n            _bribeProtocolFee,\\n            _bribeFeeCollector\\n        );\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _calculateAndSendReward(\\n        address _lpToken,\\n        uint256[] memory _rewardTokenPreBal,\\n        IERC20[] memory _rewardTokens,\\n        bool _isCaller\\n    ) internal {\\n        Pool storage poolInfo = pools[_lpToken];\\n\\n        uint256 rewardTokensLength = _rewardTokens.length;\\n        for (uint256 i; i < rewardTokensLength; i++) {\\n            address rewardToken = address(_rewardTokens[i]);\\n            uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this)) -\\n                _rewardTokenPreBal[i];\\n\\n            if (rewardAmount > 0) {\\n                _sendRewards(\\n                    _lpToken,\\n                    rewardToken,\\n                    poolInfo.rewarder,\\n                    rewardAmount,\\n                    rewardAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    function _tobatchMasterWomAndSendReward(address[] calldata _lpTokens, uint256 minReceive) internal {\\n        uint256 harvestCallerTotalWomFee;\\n\\n        for (uint j = 0; j < _lpTokens.length; j++) {\\n            Pool storage poolInfo = pools[_lpTokens[j]];\\n            if (poolInfo.lpAddress != _lpTokens[j]) revert OnlyActivePool();\\n\\n            (uint256[] memory beforeBalances, IERC20[] memory rewardTokens) = _rewardBeforeBalances(\\n            poolInfo.lpAddress\\n            );\\n            uint256 rewardTokenLength = rewardTokens.length;\\n\\n            IMasterWombat(masterWombat).deposit(poolInfo.pid, 0); // triggers harvest from wombat exchange\\n            uint256 cuurentMarketHarvestCallerFee;\\n\\n            for (uint256 i; i < rewardTokenLength; i++) {\\n\\n                address rewardToken = address(rewardTokens[i]);\\n                uint256 rewardAmount = IERC20(rewardTokens[i]).balanceOf(\\n                    address(this)\\n                ) - beforeBalances[i];\\n\\n                uint256 originalRewardAmount = rewardAmount;\\n\\n                if(rewardAmount>0 && harvestCallerFee > 0 && rewardToken ==wom) {\\n                \\n                uint256 womRewards = rewardAmount;\\n                cuurentMarketHarvestCallerFee = (womRewards *\\n                    harvestCallerFee) / DENOMINATOR;\\n                rewardAmount = rewardAmount - cuurentMarketHarvestCallerFee;\\n                harvestCallerTotalWomFee += cuurentMarketHarvestCallerFee;\\n                }\\n                if (rewardAmount > 0) {\\n                    _sendRewards(\\n                        _lpTokens[i],\\n                        rewardToken,\\n                        poolInfo.rewarder,\\n                        originalRewardAmount,\\n                        rewardAmount\\n                    );\\n                }\\n            }\\n        }\\n\\n        if(harvestCallerTotalWomFee > 0) {\\n            if(BNBZapper != address(0)){\\n                IERC20(wom).safeApprove(BNBZapper, harvestCallerTotalWomFee);\\n                uint256 minReceivedWithSlippage = minReceive * 99 /100; // 1% slippage\\n                IBNBZapper(BNBZapper).zapInToken(\\n                    wom,\\n                    harvestCallerTotalWomFee,\\n                    minReceivedWithSlippage,\\n                    tx.origin\\n                );\\n            }\\n            else{\\n                IERC20(wom).transfer(tx.origin, harvestCallerTotalWomFee);\\n            }\\n\\n            emit HarvestCallerFeeSent(tx.origin, harvestCallerTotalWomFee);\\n        }\\n    }\\n\\n    function _rewardBeforeBalances(\\n        address _lpToken\\n    ) internal view returns (uint256[] memory beforeBalances, IERC20[] memory rewardTokens) {\\n        Pool storage poolInfo = pools[_lpToken];\\n        (, IERC20[] memory bonusTokens, , ) = IMasterWombat(masterWombat).pendingTokens(poolInfo.pid, address(this));\\n        uint256 bonusTokensLength = bonusTokens.length;\\n        \\n        beforeBalances = new uint256[](bonusTokensLength+1);\\n        rewardTokens = new IERC20[](bonusTokensLength+1);\\n\\n        for (uint256 i = 0; i < bonusTokensLength; i++) {\\n            beforeBalances[i] = bonusTokens[i].balanceOf(address(this));\\n            rewardTokens[i] = bonusTokens[i];\\n        }\\n        beforeBalances[bonusTokensLength] = IERC20(wom).balanceOf(address(this));\\n        rewardTokens[bonusTokensLength] = IERC20(wom);\\n    }\\n\\n    /// @notice Send rewards to the rewarders\\n    /// @param _rewardToken the address of the reward token to send\\n    /// @param _rewarder the rewarder that will get the rewards\\n    /// @param _originalRewardAmount the initial amount of rewards after harvest\\n    /// @param _leftRewardAmount the intial amount - harvest caller rewardfee amount after harvest\\n    function _sendRewards(\\n        address _lpToken,\\n        address _rewardToken,\\n        address _rewarder,\\n        uint256 _originalRewardAmount,\\n        uint256 _leftRewardAmount\\n        // uint256 _amount\\n    ) internal {\\n        if (_leftRewardAmount == 0) return;\\n        uint256 originalRewardAmount = _originalRewardAmount;\\n        uint256 _amount = _leftRewardAmount;\\n\\n        if (!isPoolFeeFree[_lpToken]) {\\n            for (uint256 i = 0; i < feeInfos.length; i++) {\\n                Fees storage feeInfo = feeInfos[i];\\n\\n                if (feeInfo.isActive) {\\n                    address rewardToken = _rewardToken;\\n                    uint256 feeAmount = (originalRewardAmount * feeInfo.value) /\\n                        DENOMINATOR;\\n                    _amount -= feeAmount;\\n                    uint256 feeTosend = feeAmount;\\n\\n                    if (feeInfo.isMWOM && rewardToken == wom) {\\n                        if (smartWomConverter != address(0)) {\\n                            IERC20(wom).safeApprove(smartWomConverter, feeAmount);\\n                            uint256 beforeBalnce = IMWom(mWom).balanceOf(address(this));\\n                            IConverter(smartWomConverter).smartConvert(feeAmount, 0);\\n                            rewardToken = mWom;\\n                            feeTosend =\\n                                IMWom(mWom).balanceOf(address(this)) -\\n                                beforeBalnce;\\n                        } else {\\n                            IERC20(wom).safeApprove(mWom, feeAmount);\\n                            uint256 beforeBalnce = IMWom(mWom).balanceOf(address(this));\\n                            IMWom(mWom).deposit(feeAmount);\\n                            rewardToken = mWom;\\n                            feeTosend =\\n                                IMWom(mWom).balanceOf(address(this)) -\\n                                beforeBalnce;\\n                        }\\n                    }\\n\\n                    if (!feeInfo.isAddress) {\\n                        IERC20(rewardToken).safeApprove(feeInfo.to, 0);\\n                        IERC20(rewardToken).safeApprove(feeInfo.to, feeTosend);\\n                        IBaseRewardPool(feeInfo.to).queueNewRewards(\\n                            feeTosend,\\n                            rewardToken\\n                        );\\n                    } else {\\n                        IERC20(rewardToken).safeTransfer(feeInfo.to, feeTosend);\\n                        emit RewardPaidTo(feeInfo.to, rewardToken, feeTosend);\\n                    }\\n                }\\n            }\\n        }\\n\\n        IERC20(_rewardToken).safeApprove(_rewarder, 0);\\n        IERC20(_rewardToken).safeApprove(_rewarder, _amount);\\n        IBaseRewardPool(_rewarder).queueNewRewards(_amount, _rewardToken);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/MagpieFactoryLib.sol\": {\r\n        \"MagpieFactoryLib\": \"0x0bdcca686f30f2689bfdaa890deeb01e95f3abdd\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"DelegateRegistryNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyActivePool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyBribeMamager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPoolHelper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolOccupied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalFeeOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isMWOM\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isAddress\",\"type\":\"bool\"}],\"name\":\"AddFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldBribeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bribeManager\",\"type\":\"address\"}],\"name\":\"BribeManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bribeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bribeCallerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bribeProtocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bribeFeeCollector\",\"type\":\"address\"}],\"name\":\"BribeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldDelegateRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newDelegateRegistry\",\"type\":\"address\"}],\"name\":\"DelegateRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_womAmountToBNB\",\"type\":\"uint256\"}],\"name\":\"HarvestCallerFeeSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldMasterMagpie\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newMasterMagpie\",\"type\":\"address\"}],\"name\":\"MasterMagpieUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldWombatStaking\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newWombatStaking\",\"type\":\"address\"}],\"name\":\"MasterWombatUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receptToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_receptAmount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receptToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_receptAmount\",\"type\":\"uint256\"}],\"name\":\"NewLPDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"NewLpWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquitity\",\"type\":\"uint256\"}],\"name\":\"NewWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_helper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"PoolHelperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isMWOM\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isAddress\",\"type\":\"bool\"}],\"name\":\"RemoveFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"RewardPaidTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"SetHarvestCallerFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldLockDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLockDays\",\"type\":\"uint256\"}],\"name\":\"SetLockDays\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldmWom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newmWom\",\"type\":\"address\"}],\"name\":\"SetMWom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldSmartWomConverterUpdated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newSmartWomConverterUpdated\",\"type\":\"address\"}],\"name\":\"SmartWomConverterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"SnapshotDelegateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_veWomAccumulated\",\"type\":\"uint256\"}],\"name\":\"WomLocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNBZapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veWom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterWombat\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterMagpie\",\"type\":\"address\"}],\"name\":\"__WombatStaking_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumelatedVeWom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMWOM\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isAddress\",\"type\":\"bool\"}],\"name\":\"addFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetToBonusRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minReceive\",\"type\":\"uint256\"}],\"name\":\"batchHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeCallerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnReceiptToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertAllWom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertWOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"depositLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMWOM\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAddress\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestCallerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPoolFeeFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mWom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterMagpie\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterWombat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pendingPools\",\"type\":\"address[]\"}],\"name\":\"pendingBribeCallerFee\",\"outputs\":[{\"internalType\":\"contract IERC20[][]\",\"name\":\"rewardTokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"callerFeeAmount\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiptToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositTarget\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositTarget\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_receiptName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_receiptSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newZapper\",\"type\":\"address\"}],\"name\":\"setBNBZapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribeManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bribeCallerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bribeProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bribeFeeCollector\",\"type\":\"address\"}],\"name\":\"setBribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bribeManager\",\"type\":\"address\"}],\"name\":\"setBribeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isMWOM\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isAddress\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestCallerFee\",\"type\":\"uint256\"}],\"name\":\"setHarvestCallerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockDays\",\"type\":\"uint256\"}],\"name\":\"setLockDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mWom\",\"type\":\"address\"}],\"name\":\"setMWom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFeeFree\",\"type\":\"bool\"}],\"name\":\"setPoolRewardFeeFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartWomConverter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"updatePoolHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"}],\"name\":\"upgradeHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veWom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lpVote\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewarders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"contract IERC20[][]\",\"name\":\"rewardTokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"callerFeeAmounts\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract IWombatVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"withdrawLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WombatStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}