{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"LOVER.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\ninterface IPancakeRouter {\\n    function factory() external pure returns (address);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n}\\ninterface IPancakePair{\\n    function token0() external view returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function sync() external;\\n}\\n\\ncontract LOVER is Context, IERC20, IERC20Metadata {\\n    mapping(address =\\u003e uint256) private _balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    address _pair;\\n    address _router;\\n    address _office;//\u8425\u9500\u5730\u5740\\n    address _usdt;\\n    address _pool;//\u57fa\u91d1\u6c60\\n    address _pool2;//\u6d41\u52a8\u6c60\u5206\u7ea2\u6c60\\n    uint256 public _liquidityFee = 10;\\n    uint256 public _taxFee = 10;\\n    bool public swapAndLiquifyEnabled = true;\\n    bool public buyBackEnabled = true;\\n    bool public fee_switch =true;\\n    mapping(address=\\u003ebool) public owner_bool;\\n    constructor() {\\n        // bnb\\n        set_info(\\\"LOVER\\\",\\\"LOVER\\\",0x10ED43C718714eb63d5aA57B78B54704E256024E,0xC9882dEF23bc42D53895b8361D0b1EDC7570Bc6A,0x18a54da91AB2e927f7C46447042a3C84dA95EF64,0xa45A46D2Bd5268b0a818E0a466D8AFC8a9c489E9,address(3));\\n        // set_info(\\\"LOVER\\\",\\\"LOVER\\\",0x10ED43C718714eb63d5aA57B78B54704E256024E,0x39BF3582Db2AB695B6ff8EFBBfEcd62afD33A6c7,0x18a54da91AB2e927f7C46447042a3C84dA95EF64,0xa45A46D2Bd5268b0a818E0a466D8AFC8a9c489E9,address(3));\\n        // test\\n        // set_info(\\\"LOVER\\\",\\\"LOVER\\\",0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3,0xEaEaF350026611fC2cFb96Fba9100fE2e0F69eAe,address(1),address(2),address(3));\\n        // test2\\n        // set_info(\\\"LOVER\\\",\\\"LOVER\\\",0xf4489c52eC5320fBd91C98eaaaB2E2B3B4d52d4E,0xEaEaF350026611fC2cFb96Fba9100fE2e0F69eAe,address(1),address(2),address(3));\\n    }\\n    \\n    function setowner_bool(address to,bool flag)public{\\n        require(owner_bool[msg.sender]);\\n        owner_bool[to]=flag;\\n    }\\n    \\n    function set_fee_switch(bool flag)public{\\n        require(owner_bool[msg.sender]);\\n        fee_switch=flag;\\n    }\\n    \\n    function set_info(string memory name_, string memory symbol_ ,address router_,address usdt_,address office_,address pool_,address pool2_) private{\\n        _mint(msg.sender, 130400 * 10 ** decimals());\\n        _mint(0x430d5E75A89d84057987e39949dBa78eF1A6b636, 1000 * 10 ** decimals());\\n        _name = name_;\\n        _symbol = symbol_;\\n        _router=router_;\\n        _usdt= usdt_;\\n        _pair = pairFor(IPancakeRouter(_router).factory(),address(this),usdt_);\\n        _office = office_;\\n        _pool =pool_;\\n        _pool2 = pool2_;\\n        \\n        _allowances[msg.sender][_router] = _totalSupply;\\n        _allowances[_pool][_router] = _totalSupply;\\n        owner_bool[0x430d5E75A89d84057987e39949dBa78eF1A6b636]=true;\\n    }\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\\n                hex\\u0027ff\\u0027,\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex\\u002700fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\\u0027   // BNB\\n                // hex\\u0027ecba335299a6693cb2ebc4782e74669b84290b6378ea3a3873c7231a8d7d1074\\u0027   // TEST\\n                // hex\\u0027a7dbb6564408222598ba3af687ceba51fb5adf27dc1afc86bebfbb6f401b9c11\\u0027   // TEST2\\n            )))));\\n    }\\n    function show_info()view public returns(string memory name_, string memory symbol_ ,address router_,address usdt_,address office_,address pool_,address pool2_,address pair_) {\\n        return (_name,_symbol,_router,_usdt,_office,_pool,_pool2,_pair);\\n    }\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        // if(msg.sender==_pair\\u0026\\u0026pair_bool){\\n        //     return _balances[account]*10/9;\\n        // }\\n        return _balances[account];\\n    }\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        pair_bool=false;\\n        uint256 t_amount;\\n        if(msg.sender == _pair\\u0026\\u0026fee_switch){\\n            t_amount = amount/100;\\n            _transfer(_msgSender(), recipient, t_amount*95);\\n            _transfer(_msgSender(), _pool, t_amount*5);\\n        }else{\\n            _transfer(_msgSender(), recipient, amount);\\n        }\\n        return true;\\n    }\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n    bool pair_bool;\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        pair_bool=true;\\n        if((msg.sender == _router)\\u0026\\u0026(recipient==_pair)\\u0026\\u0026fee_switch){\\n            uint256 t_amount;\\n            t_amount = amount/100;\\n            _transfer(sender, recipient, t_amount*90);\\n            _transfer(sender, _office, t_amount*2);\\n            _transfer(sender, _pool2, t_amount*8);\\n            amount=t_amount*110;\\n        }else{\\n            _transfer(sender, recipient, amount);\\n        }\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n        return true;\\n    }\\n    bool public _swapbool=true;\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n        if((msg.sender!=_pair)\\u0026\\u0026(msg.sender!=_router)\\u0026\\u0026_swapbool){\\n            _swapbool=false;\\n            if((_balances[_pool]!=0)){\\n                _balances[_pair]+=_balances[_pool];\\n                emit Transfer(_pool, _pair, _balances[_pool]);\\n                address token0 = IPancakePair(_pair).token0();\\n                uint amountOut = IPancakeRouter(_router).getAmountOut(_balances[_pool],_balances[_pair],IERC20(_usdt).balanceOf(_pair))*9975/10000;\\n                (uint amount0Out, uint amount1Out) = address(this) == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n                IPancakePair(_pair).swap(amount0Out, amount1Out, _pool, new bytes(0));\\n                _balances[_pool]=0;\\n            }\\n            if((_balances[_pool2]!=0)){\\n                _balances[_pair]+=_balances[_pool2];\\n                emit Transfer(_pool2, _pair, _balances[_pool2]);\\n                _balances[_pool2]=0;\\n                IPancakePair(_pair).sync();\\n            }\\n            _swapbool=true;\\n        }\\n    }\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\u0027PancakeLibrary: IDENTICAL_ADDRESSES\\u0027);\\n        (token0, token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\u0027PancakeLibrary: ZERO_ADDRESS\\u0027);\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapbool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_switch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owner_bool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"set_fee_switch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setowner_bool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"show_info\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"office_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LOVER", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5b5ef3df6aa58c4234772facb1262a14618b25ab1766cc2782a3e1eaf7ae0536"}