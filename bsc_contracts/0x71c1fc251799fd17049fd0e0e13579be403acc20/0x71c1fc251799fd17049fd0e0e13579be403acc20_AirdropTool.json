{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract AirdropTool is Ownable {\r\n    struct ItemInfo {\r\n        address tokenAddress;\r\n        uint256 perAmount;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 totalAmount;\r\n        uint256 totalClaimedAmount;\r\n        bool rqWhiteList;\r\n        address itemOwner;\r\n        bool end;\r\n    }\r\n\r\n    ItemInfo[] private _items;\r\n    mapping(uint256 => mapping(address => uint256)) private _claimedAmount;\r\n    mapping(uint256 => mapping(address => bool)) private _whiteList;\r\n    uint256 public _createFee = 0.1 ether;\r\n    mapping(address => uint256) public _remainAmount;\r\n\r\n    function claimAirdrop(uint256 id) external {\r\n        address account = msg.sender;\r\n        require(tx.origin == account, \"rqOri\");\r\n        ItemInfo storage item = _items[id];\r\n        require(block.timestamp >= item.startTime, \"startTime\");\r\n        require(block.timestamp <= item.endTime, \"endTime\");\r\n        require(0 == _claimedAmount[id][account], \"claimed\");\r\n        require(!item.end, \"end\");\r\n        if (item.rqWhiteList) {\r\n            require(_whiteList[id][account], \"rqWhite\");\r\n        }\r\n        uint256 perAmount = item.perAmount;\r\n        require(item.totalAmount >= item.totalClaimedAmount + perAmount, \"Amt NE\");\r\n        item.totalClaimedAmount += perAmount;\r\n        _claimedAmount[id][account] = perAmount;\r\n        address tokenAddress = item.tokenAddress;\r\n        _remainAmount[tokenAddress] -= perAmount;\r\n        _giveToken(tokenAddress, account, perAmount);\r\n    }\r\n\r\n    function _giveToken(address tokenAddress, address account, uint256 tokenNum) private {\r\n        if (0 == tokenNum) {\r\n            return;\r\n        }\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.balanceOf(address(this)) >= tokenNum, \"P TNE\");\r\n        token.transfer(account, tokenNum);\r\n    }\r\n\r\n    function _takeToken(address tokenAddress, address sender, address receiver, uint256 tokenNum) private {\r\n        if (0 == tokenNum) {\r\n            return;\r\n        }\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 beforeBalance = token.balanceOf(receiver);\r\n        token.transferFrom(sender, receiver, tokenNum);\r\n        require(token.balanceOf(receiver) >= beforeBalance + tokenNum, \"TNE\");\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function addItem(\r\n        address tokenAddress,\r\n        uint256 totalAmount,\r\n        uint256 perAmount,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        bool rqWhite\r\n    ) external payable {\r\n        require(totalAmount > 0, \"total 0\");\r\n        require(perAmount > 0, \"per 0\");\r\n        require(endTime > block.timestamp, \"err endTime\");\r\n        require(startTime < endTime, \"err startTime\");\r\n        require(msg.value >= _createFee, \"Fee NE\");\r\n        safeTransferETH(_feeReceiver, msg.value);\r\n\r\n        address account = msg.sender;\r\n        _items.push(ItemInfo({\r\n        tokenAddress : tokenAddress,\r\n        perAmount : perAmount,\r\n        startTime : startTime,\r\n        endTime : endTime,\r\n        totalAmount : totalAmount,\r\n        totalClaimedAmount : 0,\r\n        rqWhiteList : rqWhite,\r\n        itemOwner : account,\r\n        end : false\r\n        }));\r\n\r\n        _takeToken(tokenAddress, account, address(this), totalAmount);\r\n        _remainAmount[tokenAddress] += totalAmount;\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        if (0 == value) {\r\n            return;\r\n        }\r\n        (bool success,) = to.call{value : value}(new bytes(0));\r\n        require(success, 'ETF');\r\n    }\r\n\r\n    modifier onlyItemOwner(uint256 itemId) {\r\n        require(_items[itemId].itemOwner == msg.sender, \"!AirOwn\");\r\n        require(!_items[itemId].end, \"end\");\r\n        _;\r\n    }\r\n\r\n    function end(uint256 itemId) external onlyItemOwner(itemId) {\r\n        ItemInfo storage item = _items[itemId];\r\n        item.end = true;\r\n        uint256 remainAmount = item.totalAmount - item.totalClaimedAmount;\r\n        _giveToken(item.tokenAddress, item.itemOwner, remainAmount);\r\n        _remainAmount[item.tokenAddress] -= remainAmount;\r\n    }\r\n\r\n    function setRqWhite(uint256 itemId, bool reWhite) external onlyItemOwner(itemId) {\r\n        _items[itemId].rqWhiteList = reWhite;\r\n    }\r\n\r\n    function changeOwner(uint256 itemId, address adr) external onlyItemOwner(itemId) {\r\n        _items[itemId].itemOwner = adr;\r\n    }\r\n\r\n    function batchSetWhiteList(uint256 itemId, address [] memory addr, bool enable) external onlyItemOwner(itemId) {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _whiteList[itemId][addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function claimBalance(address to, uint256 amount) external onlyOwner {\r\n        address payable addr = payable(to);\r\n        addr.transfer(amount);\r\n    }\r\n\r\n    function claimToken(address tokenAddress, address to, uint256 amount) external onlyOwner {\r\n        IERC20 erc20 = IERC20(tokenAddress);\r\n        erc20.transfer(to, amount);\r\n        require(erc20.balanceOf(address(this)) >= _remainAmount[tokenAddress], \"rqNAir\");\r\n    }\r\n\r\n    function setCreateFee(uint256 fee) external onlyOwner {\r\n        _createFee = fee;\r\n    }\r\n\r\n    function getTokenInfo(address tokenAddress) public view returns (\r\n        uint256 tokenDecimals,\r\n        string memory tokenSymbol\r\n    ){\r\n        tokenDecimals = IERC20(tokenAddress).decimals();\r\n        tokenSymbol = IERC20(tokenAddress).symbol();\r\n    }\r\n\r\n    function getItemInfo(uint256 itemId) public view returns (\r\n        address tokenAddress,\r\n        uint256 perAmount,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 totalAmount,\r\n        uint256 totalClaimedAmount,\r\n        bool rqWhiteList,\r\n        address itemOwner,\r\n        bool isEnd\r\n    ) {\r\n        ItemInfo storage itemInfo = _items[itemId];\r\n        tokenAddress = itemInfo.tokenAddress;\r\n        perAmount = itemInfo.perAmount;\r\n        startTime = itemInfo.startTime;\r\n        endTime = itemInfo.endTime;\r\n        totalAmount = itemInfo.totalAmount;\r\n        totalClaimedAmount = itemInfo.totalClaimedAmount;\r\n        rqWhiteList = itemInfo.rqWhiteList;\r\n        itemOwner = itemInfo.itemOwner;\r\n        isEnd = itemInfo.end;\r\n    }\r\n\r\n    function getItemLen() public view returns (uint256){\r\n        return _items.length;\r\n    }\r\n\r\n    function getItemList(uint256 start, uint256 len) external view returns (\r\n        address[] memory tokenAddress,\r\n        uint256[] memory tokenDecimals,\r\n        string[] memory tokenSymbol,\r\n        uint256[] memory perAmount,\r\n        uint256[] memory startTime,\r\n        uint256[] memory endTime,\r\n        uint256[] memory totalAmount,\r\n        uint256[] memory totalClaimedAmount,\r\n        bool[] memory rqWhiteList,\r\n        address[] memory itemOwner,\r\n        bool[] memory isEnd\r\n    ){\r\n        if (len > _items.length - start) {\r\n            len = _items.length - start;\r\n        }\r\n\r\n        tokenAddress = new address[](len);\r\n        tokenDecimals = new uint256[](len);\r\n        tokenSymbol = new string[](len);\r\n        perAmount = new uint256[](len);\r\n        startTime = new uint256[](len);\r\n        endTime = new uint256[](len);\r\n        totalAmount = new uint256[](len);\r\n        totalClaimedAmount = new uint256[](len);\r\n        rqWhiteList = new bool[](len);\r\n        itemOwner = new address[](len);\r\n        isEnd = new bool[](len);\r\n\r\n        uint256 index = 0;\r\n        for (uint256 i = start; i < start + len; ++i) {\r\n            (tokenAddress[index], perAmount[index],,,,,,,) = getItemInfo(i);\r\n            (,, startTime[index], endTime[index], totalAmount[index], totalClaimedAmount[index],,,) = getItemInfo(i);\r\n            (,,,,,, rqWhiteList[index], itemOwner[index], isEnd[index]) = getItemInfo(i);\r\n            (tokenDecimals[index], tokenSymbol[index]) = getTokenInfo(tokenAddress[index]);\r\n            ++index;\r\n        }\r\n    }\r\n\r\n    function getBaseInfo() public view returns (uint256 listSize, uint256 createFee){\r\n        listSize = getItemLen();\r\n        createFee = _createFee;\r\n    }\r\n\r\n    function getUserItem(uint256 itemId, address account) public view returns (\r\n        bool whiteList, uint256 claimedAmount\r\n    ){\r\n        whiteList = _whiteList[itemId][account];\r\n        claimedAmount = _claimedAmount[itemId][account];\r\n    }\r\n\r\n    function getUserItemList(address account, uint256 start, uint256 len) external view returns (\r\n        bool[] memory whiteList, uint256[] memory claimedAmount\r\n    ){\r\n        if (len > _items.length - start) {\r\n            len = _items.length - start;\r\n        }\r\n\r\n        whiteList = new bool[](len);\r\n        claimedAmount = new uint256[](len);\r\n\r\n        uint256 index = 0;\r\n        for (uint256 i = start; i < start + len; ++i) {\r\n            (whiteList[index], claimedAmount[index]) = getUserItem(i, account);\r\n            ++index;\r\n        }\r\n    }\r\n\r\n    function setFeeReceiver(address feeRec) external onlyOwner {\r\n        _feeReceiver = feeRec;\r\n    }\r\n\r\n    address  public _feeReceiver = address(0x3160162E6DB2DA10D028fEAAF9F4F684d2B89413);\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_createFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_remainAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rqWhite\",\"type\":\"bool\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getItemInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rqWhiteList\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEnd\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getItemLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"getItemList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenDecimals\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenSymbol\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"rqWhiteList\",\"type\":\"bool[]\"},{\"internalType\":\"address[]\",\"name\":\"itemOwner\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isEnd\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserItem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"whiteList\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"getUserItemList\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"whiteList\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setCreateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRec\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reWhite\",\"type\":\"bool\"}],\"name\":\"setRqWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AirdropTool", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://26c8bf4fb56e060a9861f8a9ab06c12bf193f33b2db4f54678fcd9e9a2e45bd7"}