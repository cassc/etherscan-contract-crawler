{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CrowdsaleLETITToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./interfaces/ICrowdsale.sol\\\";\\nimport \\\"./interfaces/IBEP20.sol\\\";\\nimport \\\"./interfaces/IWalletFactory.sol\\\";\\nimport \\\"./interfaces/IPancakeRouter.sol\\\";\\n\\n\\n/**\\n * @title Crowdsale\\n */\\ncontract CrowdsaleLETITToken is ICrowdsale, Ownable, Pausable, ReentrancyGuard {\\n\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Predefined max referral levels.\\n     */\\n    uint256 public constant REFERRAL_PROGRAM_LEVELS = 3;\\n\\n    uint256 internal constant PERCENTAGE_DENOM = 10000;\\n\\n    /**\\n     * @dev Getter for the price.\\n     */\\n    uint256 public price;\\n\\n    /**\\n     * @dev Getter for the raise.\\n     */\\n    uint256 public raise;\\n\\n    /**\\n     * @dev Getter for the min possible amountIn at time.\\n     */\\n    uint256 public minAmount;\\n\\n    /**\\n     * @dev Getter for max possible amount total.\\n     */\\n    uint256 public maxAmount;\\n\\n    /**\\n     * @dev Getter for sale start.\\n     */\\n    uint256 public start;\\n\\n    /**\\n     * @dev Getter for duration.\\n     */\\n    uint256 public duration;\\n\\n    /**\\n     * @dev Getter for the total LETIT sold.\\n     */\\n    uint256 public totalSold;\\n\\n    /**\\n     * @dev Getter for the total reward earned by all referrers.\\n     */\\n    uint256 public totalEarned;\\n\\n    /**\\n     * @dev Getter for the total sum bonus.\\n     */\\n    uint256 public totalBonus;\\n\\n    address public immutable BUSD; // 0xe9e7cea3dedca5984780bafc599bd69add087d56\\n    address public immutable USDT; // 0x55d398326f99059ff775485246999027b3197955\\n    address public immutable USDC; // 0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\\n    address public immutable LETIT;\\n    address public immutable pancakeRouter; // 0x10ed43c718714eb63d5aa57b78b54704e256024e\\n    \\n    /**\\n     * @dev Getter referres.\\n     */\\n    mapping(address => address) public referrers;\\n\\n    /**\\n     * @dev Getter for spent amounts by user.\\n     */\\n    mapping(address => uint256) public spent;\\n\\n    /**\\n     * @dev Getter for bought LETIT amounts by user.\\n     */\\n    mapping(address => uint256) public bought;\\n\\n    /**\\n     * @dev Getter for all level rewards by user.\\n     */\\n    mapping(address => uint256) public rewards;\\n\\n    /**\\n     * @dev Getter for bonuses by user.\\n     */\\n    mapping(address => uint256) public bonuses;\\n\\n    /**\\n     * @dev Factory address to create vesting wallets.\\n     */\\n    address internal _walletFactory;\\n\\n    /**\\n     * @dev Internal vesting managers storage.\\n     */\\n    Vesting[] internal _vestingManagers;\\n\\n    modifier onlySalePeriod {\\n        require(block.timestamp >= start && block.timestamp < (start + duration), \\\"Sale: sale not started or already finished\\\");\\n        _;\\n    }\\n\\n    modifier whenNotStarted {\\n        require(start == 0 || (start > 0 && block.timestamp < start), \\\"Sale: sale already started\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @param BUSD_ The BUSD address, preferable to buy for;\\n     * @param USDT_ The USDT address;\\n     * @param USDC_ The USDC_ address;\\n     * @param LETIT_ The selling LETIT address;\\n     * @param pancakeRouter_ The PancakeRouter address. Used to change BNB\\\\USDT\\\\USDC to BUSD;\\n     * @param walletFactory_ The IWalletFactory implementation.\\n     *\\n     * USDT, USDC and PancakeRouter are optional. In that case sale be possible only for BUSD.\\n     */\\n    constructor(address BUSD_, address USDT_, address USDC_, address LETIT_, address pancakeRouter_, address walletFactory_) {\\n        BUSD = BUSD_;\\n        USDT = USDT_;\\n        USDC = USDC_;\\n        LETIT = LETIT_;\\n        pancakeRouter = pancakeRouter_;\\n        _walletFactory = walletFactory_;\\n    }\\n\\n    /**\\n     * @dev Getter for vesting managers count.\\n     */\\n    function getVestingManagersCount() external view virtual override returns (uint256) {\\n        return _vestingManagers.length;\\n    }\\n\\n    /**\\n     * @dev Getter for vesting manager.\\n     *\\n     * @return The address of vesting manager and its distribution percentage.\\n     */\\n    function getVestingManager(uint256 index) external view virtual override returns (address, uint256) {\\n        return (_vestingManagers[index].vestingManager, _vestingManagers[index].distributionPercentage);\\n    }\\n\\n    /**\\n     * @dev Getter for vesting managers.\\n     */\\n    function getVestingManagers() external view virtual override returns (address[] memory) {\\n        address[] memory vestingManagers = new address[](_vestingManagers.length);\\n        for (uint256 i = 0; i < _vestingManagers.length; ++i) {\\n            vestingManagers[i] = _vestingManagers[i].vestingManager;\\n        }\\n        return vestingManagers;\\n    }\\n\\n    /**\\n     * @dev Getter for user's vesting wallet.\\n     *\\n     * Can return all vesting wallets for given vesting managers (from any sale which used same wallet factory).\\n     *\\n     * @param beneficiary The beneficiary;\\n     * @param vestingManagers The array of vesting managers, used in current or previous sale.\\n     */\\n    function getVestingWallets(address beneficiary, address[] memory vestingManagers) external view virtual override returns (address[] memory) {\\n        address[] memory wallets = new address[](_vestingManagers.length);\\n        for (uint256 i = 0; i < vestingManagers.length; ++i) {\\n            address vestingManager = vestingManagers[i];\\n            wallets[i] = _walletFor(beneficiary, vestingManager);\\n        }\\n        return wallets;\\n    }\\n\\n    /**\\n     * @dev Getter for user's vesting wallet.\\n     */\\n    function walletFor(address beneficiary, address vestingManager) external view virtual override returns (address) {\\n        return _walletFor(beneficiary, vestingManager);\\n    }\\n\\n    /**\\n     * @dev Setter for the price.\\n     *\\n     * @param price_ The price in BUSD (18 decimals).\\n     */\\n    function setPrice(uint256 price_) external virtual override onlyOwner whenNotStarted {\\n        require(price_ > 0, \\\"Sale: wrong price\\\");\\n        price = price_;\\n    }\\n\\n    /**\\n     * @dev Setter for the raise. Only for info purpose, not used in this contract.\\n     *\\n     * @param raise_ The target raise in BUSD (18 decimals).\\n     */\\n    function setRaise(uint256 raise_) external virtual override onlyOwner whenNotStarted {\\n        raise = raise_;\\n    }\\n\\n    /**\\n     * @dev Setter for the sale start.\\n     *\\n     * @param start_ in seconds, timestamp format.\\n     */\\n    function setStart(uint64 start_) external virtual override onlyOwner whenNotStarted {\\n        require(start_ > block.timestamp, \\\"Sale: past timestamp\\\");\\n        start = start_;\\n    }\\n\\n    /**\\n     * @dev Setter for the sale duration.\\n     *\\n     * @param duration_ in seconds.\\n     */\\n    function setDuration(uint64 duration_) external virtual override onlyOwner whenNotStarted {\\n        duration = duration_;\\n    }\\n\\n    /**\\n     * @dev Setter min possible amount for one beneficiary at time.\\n     */\\n    function setMinAmount(uint256 minAmount_) external virtual override onlyOwner whenNotStarted {\\n        minAmount = minAmount_;\\n    }\\n\\n    /**\\n     * @dev Setter for total max possible amount for one beneficiary.\\n     */\\n    function setMaxAmount(uint256 maxAmount_) external virtual override onlyOwner whenNotStarted {\\n        maxAmount = maxAmount_;\\n    }\\n\\n    /**\\n     * @dev Adds vesting manager.\\n     *\\n     * @param vestingManager_ The new vesting manager.\\n     * @param distributionPercentage_ The distribution percentage, with 3 decimals (100% is 10000).\\n     *\\n     * To start sale total sum of distributionPercentage of all managers have to be 10000 (100%).\\n     */\\n    function addVestingManager(address vestingManager_, uint256 distributionPercentage_) external virtual override onlyOwner whenNotStarted {\\n        uint256 distributionPercentageTotal = _getDistributionPercentageTotal();\\n        distributionPercentageTotal += distributionPercentage_;\\n        require(distributionPercentageTotal <= 10000, \\\"Sale: wrong total distribution percentage\\\");\\n        _vestingManagers.push(Vesting(vestingManager_, distributionPercentage_));\\n    }\\n\\n    /**\\n     * @dev Removes vesting manager.\\n     */\\n    function removeVestingManager(uint256 index) external virtual override onlyOwner whenNotStarted {\\n        require(index < _vestingManagers.length, \\\"Sale: wrong index\\\");\\n        uint256 lastIndex = _vestingManagers.length - 1;\\n        _vestingManagers[index].vestingManager = _vestingManagers[lastIndex].vestingManager;\\n        _vestingManagers[index].distributionPercentage = _vestingManagers[lastIndex].distributionPercentage;\\n        _vestingManagers.pop();\\n    }\\n\\n    /**\\n     * @dev Withdraws given `token` tokens from the contracts's account to owner.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     */\\n    function withdraw(address token) external virtual override onlyOwner {\\n        require(token != address(0), \\\"Sale: zero address given\\\");\\n        IERC20 tokenImpl = IERC20(token);\\n        tokenImpl.safeTransfer(msg.sender, tokenImpl.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function pause() external virtual override onlyOwner onlySalePeriod {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function unpause() external virtual override onlyOwner onlySalePeriod {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Buy tokens for `token`'s `amountIn`. \\n     *\\n     * @param token For what token user want buy LETIT. Can be BUSD\\\\USDT\\\\USDC\\\\0x0. Use 0x0 and send value to buy LETIT for BNB.\\n     *  USDT\\\\USDC\\\\BNB will be changed to BUSD 'on the fly';\\n     * @param amountIn Amount for which user want to buy LETIT;\\n     * @param minAmountOut Min amount out in terms of PancakeRouter. Have to be given if token is USDT\\\\USDC\\\\BNB, \\n     *  otherwise have to be 0;\\n     * @param referrer The referrer, if present. If possible will be set in the LETIT token too, to get rewards from future\\n     *  transfers.\\n     *\\n     * Can be used only in sale period.\\n     *\\n     * Can be paused by owner in emergency case.\\n     *\\n     * minAmountOut can be get from PancakeRouter:\\n     *  - to deduct PancakeRouter's fee from amountIn (will not work with if amountIn is equal with minAmountIn set in sale):\\n     *      const minAmountOut = pancakeRouter.getAmountsOut(amountIn, [USDT, BUSD])\\n     *  - or add it amountIn before call:\\n     *      const amountsIn = pancakeRouter.getAmountsIn(amountOut, [USDT, BUSD])\\n     *      const minAmountOut = amountsIn[0]\\n     *      \\n     * Emits {TokenTransferred} event;\\n     * Emits {TokenSold} event;\\n     * Emits {RewardEarned} event if referrer provided;\\n     * Emits few {Transfer} event.\\n     */\\n    function buy(address token, uint256 amountIn, uint256 minAmountOut, address referrer) external payable virtual override onlySalePeriod whenNotPaused nonReentrant {\\n        _buy(token, amountIn, minAmountOut, referrer);\\n    }\\n\\n    function _buy(address token, uint256 amountIn, uint256 minAmountOut, address referrer) internal {\\n        require(_getDistributionPercentageTotal() == 10000, \\\"Sale: vestings are not correct\\\");\\n        require(token == BUSD || token == USDT || token == USDC || (token == address(0) && msg.value > 0), \\\"Sale: wrong asset or value\\\");\\n        if (referrer != address(0)) {\\n            address existingReferrer = referrers[msg.sender];\\n            if (existingReferrer != address(0)) {\\n                require(existingReferrer == referrer, \\\"Sale: referrer already set\\\");\\n            }\\n            // check is referrer have vesting wallet\\n            address[] memory wallets = _getVestingWallets(referrer);\\n            // can check only first element, cause there is no case when first element is not set but second one is\\n            require(wallets.length > 0 && wallets[0] != address(0), \\\"Sale: invalid referrer\\\");\\n        }\\n\\n        uint256 amountBusdIn = amountIn;\\n        if (token == address(0)) { // native asset (BNB)\\n            amountBusdIn = _swapToBusd(address(0), 0, minAmountOut);\\n        } else {\\n            IERC20 tokenImpl = IERC20(token);\\n\\n            tokenImpl.safeTransferFrom(msg.sender, address(this), amountIn);\\n\\n            if (token != BUSD) { // USDT or USDC\\n                amountBusdIn = _swapToBusd(token, amountIn, minAmountOut);\\n            }\\n        }\\n\\n        require(amountBusdIn >= minAmount, \\\"Sale: minAmount\\\");\\n        spent[msg.sender] += amountBusdIn;\\n        require(spent[msg.sender] <= maxAmount, \\\"Sale: maxAmount\\\");\\n\\n        referrers[msg.sender] = referrer;\\n\\n        IBEP20 erc20Impl = IBEP20(LETIT);\\n        uint256 decimals = erc20Impl.decimals();\\n\\n        uint256[] memory amountLETITOuts = new uint256[](5);\\n        for (uint256 i = 0; i < _vestingManagers.length; ++i) {\\n            uint256 amountBusdInByVestingManager = (amountBusdIn * _vestingManagers[i].distributionPercentage) / PERCENTAGE_DENOM;\\n\\n            uint256 amountOut = (amountBusdInByVestingManager * 10**decimals) / price;\\n\\n            amountLETITOuts[0] = amountOut;\\n            amountLETITOuts[1] = (amountOut * 500) / PERCENTAGE_DENOM;\\n            amountLETITOuts[2] = (amountOut * 300) / PERCENTAGE_DENOM;\\n            amountLETITOuts[3] = (amountOut * 200) / PERCENTAGE_DENOM;\\n            amountLETITOuts[4] = _getBonus(token == address(0) ? amountBusdIn : amountIn, amountOut);\\n\\n            _execute(_vestingManagers[i].vestingManager, msg.sender, amountLETITOuts);\\n        }\\n    }\\n\\n    function _swapToBusd(address erc20, uint256 amountIn, uint256 minAmountOut) private returns (uint256) {\\n        IPancakeRouter02 pancakeRouterImpl = IPancakeRouter02(pancakeRouter);\\n\\n        address[] memory path = new address[](2);\\n        path[1] = BUSD;\\n\\n        IERC20 BUSDImpl = IERC20(BUSD);\\n        uint256 balanceBefore = BUSDImpl.balanceOf(address(this));\\n\\n        if (erc20 == address(0)) {\\n            path[0] = pancakeRouterImpl.WETH();\\n            pancakeRouterImpl.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: msg.value }(minAmountOut, path, address(this), block.timestamp);\\n        } else {\\n            path[0] = erc20;\\n            IERC20 erc20Impl = IERC20(erc20);\\n            erc20Impl.safeIncreaseAllowance(pancakeRouter, amountIn);\\n            pancakeRouterImpl.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, minAmountOut, path, address(this), block.timestamp);\\n        }\\n\\n        uint256 balanceAfter = BUSDImpl.balanceOf(address(this));\\n\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    function _execute(address vestingManager, address beneficiary, uint256[] memory amountLETITOuts) private {\\n        (address[] memory allLevelsVestingWallets, address[] memory allLevelsReferrers) = _getAllLevelsVestingWallets(vestingManager, beneficiary);\\n\\n        totalSold += amountLETITOuts[0];\\n        emit TokenTransferred(allLevelsVestingWallets[0], amountLETITOuts[0]);\\n        emit TokenSold(beneficiary, amountLETITOuts[0]);\\n\\n        IERC20 erc20Impl = IERC20(LETIT);\\n\\n        bought[beneficiary] += amountLETITOuts[0];\\n        \\n        erc20Impl.safeTransfer(allLevelsVestingWallets[0], amountLETITOuts[0]);\\n        for (uint256 i = 1; i < allLevelsVestingWallets.length; ++i) {\\n            if (allLevelsVestingWallets[i] == address(0)) {\\n                break;\\n            }\\n            totalEarned += amountLETITOuts[i];\\n            emit RewardEarned(allLevelsVestingWallets[i], amountLETITOuts[i], i);\\n            rewards[allLevelsReferrers[i]] += amountLETITOuts[i];\\n            erc20Impl.safeTransfer(allLevelsVestingWallets[i], amountLETITOuts[i]);\\n        }\\n        if (amountLETITOuts[4] > 0) {\\n            emit BonusTransferred(allLevelsVestingWallets[0], amountLETITOuts[0]);\\n            totalBonus += amountLETITOuts[4];\\n            bonuses[beneficiary] += amountLETITOuts[4];\\n            erc20Impl.safeTransfer(allLevelsVestingWallets[0], amountLETITOuts[4]);\\n        }\\n    }\\n\\n    function _getVestingWallets(address beneficiary) internal view returns (address[] memory) {\\n        address[] memory wallets = new address[](_vestingManagers.length);\\n        for (uint256 i = 0; i < _vestingManagers.length; ++i) {\\n            address vestingManager = _vestingManagers[i].vestingManager;\\n            wallets[i] = _walletFor(beneficiary, vestingManager);\\n        }\\n        return wallets;\\n    }\\n\\n    function _getDistributionPercentageTotal() internal view returns (uint256) {\\n        uint256 distributionPercentageTotal = 0;\\n        for (uint256 i = 0; i < _vestingManagers.length; ++i) {\\n            distributionPercentageTotal += _vestingManagers[i].distributionPercentage;\\n        }\\n        return distributionPercentageTotal;\\n    }\\n\\n    function _getAllLevelsVestingWallets(address vestingManager, address beneficiary) internal returns (address[] memory, address[] memory) {\\n        address[] memory allLevelsVestingWallets = new address[](REFERRAL_PROGRAM_LEVELS + 1);\\n        address[] memory allLevelsReferrers = new address[](REFERRAL_PROGRAM_LEVELS + 1);\\n\\n        address vestingWallet = _walletFor(beneficiary, vestingManager);\\n\\n        if (vestingWallet == address(0)) {\\n            IWalletFactory factoryImpl = IWalletFactory(_walletFactory);\\n            vestingWallet = factoryImpl.createManagedVestingWallet(beneficiary, vestingManager);\\n        }\\n\\n        allLevelsVestingWallets[0] = vestingWallet;\\n\\n        address referrer = referrers[beneficiary];\\n        for (uint256 i = 1; i <= REFERRAL_PROGRAM_LEVELS; ++i) {\\n            address referrerVestingWallet = _walletFor(referrer, vestingManager);\\n            if (referrerVestingWallet == address(0)) {\\n                break;\\n            }\\n            allLevelsVestingWallets[i] = referrerVestingWallet;\\n            allLevelsReferrers[i] = referrer;\\n            referrer = referrers[referrer];\\n        }\\n\\n        return (allLevelsVestingWallets, allLevelsReferrers);\\n    }\\n\\n    function _getBonus(uint256 amountIn, uint256 amountOut) internal pure returns (uint256) {\\n        uint256 bonus = 0;\\n        if (amountIn >= 5000 ether) {\\n            bonus = ((amountOut * 500) / PERCENTAGE_DENOM);\\n        } else if (amountIn >= 2500 ether) {\\n            bonus = ((amountOut * 300) / PERCENTAGE_DENOM);\\n        }\\n        return bonus;\\n    }\\n\\n    function _walletFor(address beneficiary, address vestingManager) internal view returns (address) {\\n        return IWalletFactory(_walletFactory).walletFor(beneficiary, vestingManager, true);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICrowdsale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICrowdsale {\\n\\n    struct Vesting {\\n        address vestingManager;\\n        uint256 distributionPercentage;\\n    }\\n\\n    /**\\n     * @dev Emitted when `beneficiary` bought `amount` of token.\\n     */\\n    event TokenSold(address indexed beneficiary, uint256 indexed amount);\\n\\n    /**\\n     * @dev Emitted when vesting wallet `receiver` received `amount` of token.\\n     */\\n    event TokenTransferred(address indexed receiver, uint256 indexed amount);\\n\\n    /**\\n     * @dev Emitted when vesting wallet `receiver` received `amount` of token.\\n     */\\n    event BonusTransferred(address indexed receiver, uint256 indexed amount);\\n\\n    /**\\n     * @dev Emitted when `referrer` get his `level`'s reward from his referee (eg referee bought tokens).\\n     */\\n    event RewardEarned(address indexed referrer, uint256 indexed amount, uint256 indexed level);\\n\\n    function price() external view returns (uint256);\\n    function raise() external view returns (uint256);\\n    function start() external view returns (uint256);\\n    function duration() external view returns (uint256);\\n    function minAmount() external view returns (uint256);\\n    function maxAmount() external view returns (uint256);\\n    function getVestingManagersCount() external view returns (uint256);\\n    function getVestingManager(uint256 index) external view returns (address, uint256);\\n    function getVestingManagers() external view returns (address[] memory);\\n    function getVestingWallets(address beneficiary, address[] memory vestingManagers) external view returns (address[] memory);\\n    function walletFor(address beneficiary, address vestingManager) external view returns (address);\\n\\n    function totalSold() external view returns (uint256);\\n    function totalEarned() external view returns (uint256);\\n    function totalBonus() external view returns (uint256);\\n\\n    function BUSD() external view returns (address);\\n    function USDT() external view returns (address);\\n    function LETIT() external view returns (address);\\n    function pancakeRouter() external view returns (address);\\n\\n    function setPrice(uint256) external;\\n    function setRaise(uint256) external;\\n    function setStart(uint64) external;\\n    function setDuration(uint64) external;\\n    function setMinAmount(uint256 minAmount_) external;\\n    function setMaxAmount(uint256 maxAmount_) external;\\n    function addVestingManager(address vestingManager_, uint256 distributionPercentage_) external;\\n    function removeVestingManager(uint256 index) external;\\n\\n    function pause() external;\\n    function unpause() external;\\n\\n    function withdraw(address) external;\\n\\n    function buy(address erc20, uint256 amountIn, uint256 minAmountOut, address referrer) external payable;\\n}\\n\\ninterface IWhitelistedCrowdsale is ICrowdsale {\\n    function isInWhitelist(address user, bytes32[] memory proof) external view returns (bool);\\n    function setWhitelist(bytes32 whitelist_) external;\\n    function buyWithProof(bytes32[] memory proof, address erc20, uint256 amountIn, uint256 minAmountOut, address referrer) external payable;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWalletFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IWalletFactory {\\n    function createManagedVestingWallet(address beneficiary, address vestingManager) external returns (address);\\n    function walletFor(address beneficiary, address vestingManager, bool strict) external view returns (address);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BUSD_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDT_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDC_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LETIT_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pancakeRouter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletFactory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BonusTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"RewardEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LETIT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_PROGRAM_LEVELS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vestingManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionPercentage_\",\"type\":\"uint256\"}],\"name\":\"addVestingManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingManagersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"vestingManagers\",\"type\":\"address[]\"}],\"name\":\"getVestingWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeVestingManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"duration_\",\"type\":\"uint64\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount_\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount_\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raise_\",\"type\":\"uint256\"}],\"name\":\"setRaise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"start_\",\"type\":\"uint64\"}],\"name\":\"setStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"spent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vestingManager\",\"type\":\"address\"}],\"name\":\"walletFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrowdsaleLETITToken", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d000000000000000000000000973485d34eeb9eebbefb812eeed3feeb6ddf60de00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000325c9ff723fd242d8ad829058d00681e9357a7b8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}