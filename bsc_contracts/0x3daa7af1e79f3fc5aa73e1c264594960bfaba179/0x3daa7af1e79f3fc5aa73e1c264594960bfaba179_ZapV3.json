{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Taxable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.15;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n// Part: IERC20Taxable\\r\\n\\r\\ninterface IERC20Taxable is IERC20 {\\r\\n    function getCurrentTaxRate() external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/MultipleOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n// Part: MultipleOperator\\r\\n\\r\\ncontract MultipleOperator is Context, Ownable {\\r\\n  mapping(address => bool) private _operator;\\r\\n\\r\\n  event OperatorStatusChanged(address indexed _operator, bool _operatorStatus);\\r\\n\\r\\n  constructor()  {\\r\\n    _operator[_msgSender()] = true;\\r\\n    _operator[address(this)] = true;\\r\\n    emit OperatorStatusChanged(_msgSender(), true);\\r\\n  }\\r\\n\\r\\n  modifier onlyOperator() {\\r\\n    require(\\r\\n      _operator[msg.sender] == true,\\r\\n      \\\"operator: caller is not the operator\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function isOperator() public view returns (bool) {\\r\\n    return _operator[_msgSender()];\\r\\n  }\\r\\n\\r\\n  function isOperator(address _account) public view returns (bool) {\\r\\n    return _operator[_account];\\r\\n  }\\r\\n\\r\\n  function setOperatorStatus(\\r\\n    address _account,\\r\\n    bool _operatorStatus\\r\\n  ) public onlyOwner {\\r\\n    _setOperatorStatus(_account, _operatorStatus);\\r\\n  }\\r\\n\\r\\n  function setOperatorStatus(\\r\\n    address[] memory _accounts,\\r\\n    bool _operatorStatus\\r\\n  ) external onlyOperator {\\r\\n    for (uint8 idx = 0; idx < _accounts.length; ++idx) {\\r\\n      _setOperatorStatus(_accounts[idx], _operatorStatus);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setShareTokenWhitelistType(\\r\\n    address[] memory _accounts,\\r\\n    bool[] memory _operatorStatuses\\r\\n  ) external onlyOperator {\\r\\n    require(\\r\\n      _accounts.length == _operatorStatuses.length,\\r\\n      \\\"Error: Account and OperatorStatuses lengths not equal\\\"\\r\\n    );\\r\\n    for (uint8 idx = 0; idx < _accounts.length; ++idx) {\\r\\n      _setOperatorStatus(_accounts[idx], _operatorStatuses[idx]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _setOperatorStatus(address _account, bool _operatorStatus) internal {\\r\\n    _operator[_account] = _operatorStatus;\\r\\n    emit OperatorStatusChanged(_account, _operatorStatus);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/pancakeSwap/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/pancakeSwap/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/pancakeSwap/interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/pancakeSwap/interfaces/IPancakeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPancakeRouter01.sol\\\";\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/pancakeSwap/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/pancakeSwap/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.15;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ZapBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n\\r\\n\\r\\n\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"./pancakeSwap/interfaces/IPancakeFactory.sol\\\";\\r\\nimport \\\"./pancakeSwap/interfaces/IPancakeRouter02.sol\\\";\\r\\nimport \\\"./pancakeSwap/interfaces/IPancakePair.sol\\\";\\r\\nimport \\\"./pancakeSwap/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./interfaces/IERC20Taxable.sol\\\";\\r\\nimport \\\"./interfaces/MultipleOperator.sol\\\";\\r\\nimport \\\"./pancakeSwap/interfaces/IWETH.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Part: IRewardPool\\r\\n\\r\\ninterface IRewardPool {\\r\\n    function depositFor(uint256 _pid, uint256 _amount, address _recipient) external;\\r\\n}\\r\\n// Part: ZapBase\\r\\n\\r\\ncontract ZapBase is MultipleOperator, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    address public WETH;\\r\\n    address public mainToken;\\r\\n    address public mainTokenLP;\\r\\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    IPancakeRouter02 private ROUTER;\\r\\n    address PancakeSwapFactory;\\r\\n\\r\\n    enum TokenType {\\r\\n        INVALID,\\r\\n        ERC20,\\r\\n        LP\\r\\n    }\\r\\n    mapping(address => TokenType) public tokenType; //Type of token @ corresponding address.\\r\\n    mapping(address => mapping(address => address[])) public swapPath; // Paths for swapping 2 given tokens.\\r\\n\\r\\n    event TaxPaid(address indexed user, uint256 amount);\\r\\n    event AddLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountInA,\\r\\n        uint256 amountInB,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n    event SwapTokens(address tokenA, address tokenB, uint256 amountInA, uint256 amountOut);\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n    function setCoreValues(\\r\\n        address _router,\\r\\n        address factory,\\r\\n        address _mainToken,\\r\\n        address _mainTokenLP,\\r\\n        address _weth\\r\\n    ) external onlyOwner {\\r\\n        mainToken = _mainToken;\\r\\n        mainTokenLP = _mainTokenLP;\\r\\n        WETH = _weth;\\r\\n        PancakeSwapFactory = factory;\\r\\n        ROUTER = IPancakeRouter02(_router);\\r\\n\\r\\n        tokenType[WETH] = TokenType.ERC20;\\r\\n        tokenType[mainToken] = TokenType.ERC20;\\r\\n        tokenType[mainTokenLP] = TokenType.LP;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function sortTokens(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, \\\"Zap: IDENTICAL_ADDRESSES\\\");\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\\"Zap: ZERO_ADDRESS\\\");\\r\\n    }\\r\\n\\r\\n    /* ========== EXTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    function zap(\\r\\n        address _inputToken,\\r\\n        uint256 _amount,\\r\\n        address _targetToken,\\r\\n        bool _targetIsNative\\r\\n    ) external returns (uint256 amountOut) {\\r\\n        amountOut = _universalZap(\\r\\n            _inputToken, //_inputToken\\r\\n            _amount, //_amount\\r\\n            _targetToken, //_targetToken\\r\\n            msg.sender, //_recipient\\r\\n            _targetIsNative\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ========== EXTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    function zapETH(address _targetToken) external payable returns (uint256 amountOut) {\\r\\n        require(msg.value > 0, \\\"Insufficient ETH\\\");\\r\\n        amountOut = _universalZapETH(\\r\\n            msg.value, //_amount\\r\\n            _targetToken, //_targetToken\\r\\n            msg.sender //_recipient\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addTaxFreeLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountA,\\r\\n        uint256 _amountB\\r\\n    ) external {\\r\\n        IERC20(_tokenA).safeTransferFrom(msg.sender, address(this), _amountA);\\r\\n        IERC20(_tokenB).safeTransferFrom(msg.sender, address(this), _amountB);\\r\\n\\r\\n        _increaseRouterAllowance(_tokenA, _amountA);\\r\\n        _increaseRouterAllowance(_tokenB, _amountB);\\r\\n\\r\\n        ROUTER.addLiquidity(\\r\\n            _tokenA,\\r\\n            _tokenB,\\r\\n            _amountA,\\r\\n            _amountB,\\r\\n            _amountA.mul(95).div(100),\\r\\n            _amountB.mul(95).div(100),\\r\\n            msg.sender,\\r\\n            block.timestamp + 40\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeTaxFreeLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        address _pair,\\r\\n        uint256 _amount\\r\\n    ) external {\\r\\n        IERC20(_pair).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        _increaseRouterAllowance(_pair, _amount);\\r\\n\\r\\n        (uint256 _amountA, uint256 _amountB) = ROUTER.removeLiquidity(\\r\\n            _tokenA,\\r\\n            _tokenB,\\r\\n            _amount,\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            block.timestamp + 40\\r\\n        );\\r\\n\\r\\n        IERC20(_tokenA).transfer(msg.sender, _amountA);\\r\\n        IERC20(_tokenB).transfer(msg.sender, _amountB);\\r\\n    }\\r\\n\\r\\n    /* ========== MAIN ZAP FUNCTION ========== */\\r\\n\\r\\n    function _zapIntoTokenTaxWrapper(\\r\\n        address _inputToken,\\r\\n        uint256 _amount,\\r\\n        address _targetToken,\\r\\n        bool _targetIsNative,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        //Handle token taxes - Only if not zapping into farm.\\r\\n        //Zap into token.\\r\\n        if (_targetIsNative == true) {\\r\\n            amountOut = _zapIntoETH(_inputToken, _amount, _recipient);\\r\\n        } else {\\r\\n            if (\\r\\n                (_recipient != address(this)) &&\\r\\n                (_inputToken == mainToken) &&\\r\\n                (_targetToken != mainToken)\\r\\n            ) {\\r\\n                //Calculate tax variables.\\r\\n                uint256 tokenTaxRate = IERC20Taxable(_inputToken).getCurrentTaxRate();\\r\\n                uint256 taxedAmount = _amount\\r\\n                    .mul(tokenTaxRate).div(10000);\\r\\n\\r\\n                //Halve the taxed amount if the target token is an LP token.\\r\\n                if (tokenType[_targetToken] == TokenType.LP) {\\r\\n                    taxedAmount = taxedAmount.div(2);\\r\\n                }\\r\\n\\r\\n                //Send taxes to Tax Office and handle accordingly.\\r\\n                if (taxedAmount > 0) {\\r\\n                    IERC20(_inputToken).transfer(deadAddress, taxedAmount);\\r\\n                }\\r\\n\\r\\n                //Amend the input amount.\\r\\n                _amount = _amount.sub(taxedAmount);\\r\\n            }\\r\\n            amountOut = _zapIntoToken(_inputToken, _amount, _targetToken, _recipient);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Zaps in ERC20 tokens to LP tokens.\\r\\n    */\\r\\n    function _zapIntoETH(\\r\\n        address _inputToken,\\r\\n        uint256 _amount,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        require(tokenType[_inputToken] == TokenType.ERC20, \\\"Error: Invalid token type\\\");\\r\\n        //Safely increase the router allowance.\\r\\n        _increaseRouterAllowance(_inputToken, _amount);\\r\\n\\r\\n        amountOut = _swapTokensForETH(\\r\\n            _amount, //_amountIn,\\r\\n            _inputToken, //_pathIn,\\r\\n            _recipient //_recipient,\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Zaps in ERC20 tokens to LP tokens.\\r\\n    */\\r\\n    function _zapIntoToken(\\r\\n        address _inputToken,\\r\\n        uint256 _amount,\\r\\n        address _targetToken,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        require(tokenType[_inputToken] == TokenType.ERC20, \\\"Error: Invalid token type\\\");\\r\\n        require(tokenType[_targetToken] != TokenType.INVALID, \\\"Error: Invalid token type\\\");\\r\\n\\r\\n        //Safely increase the router allowance.\\r\\n        _increaseRouterAllowance(_inputToken, _amount);\\r\\n\\r\\n        //If target token is an LP token.\\r\\n        if (tokenType[_targetToken] == TokenType.LP) {\\r\\n            //Deconstruct target token.\\r\\n            IPancakePair pair = IPancakePair(_targetToken);\\r\\n            address token0 = pair.token0();\\r\\n            address token1 = pair.token1();\\r\\n\\r\\n            //Input token is a component of the target LP token then swap half and add liquidity.\\r\\n            if (_inputToken == token0 || _inputToken == token1) {\\r\\n                //Dictate which is the missing LP token.\\r\\n                address missingToken = _inputToken == token0 ? token1 : token0;\\r\\n                uint256 altTokenAmount = _amount.div(2);\\r\\n\\r\\n                amountOut = _zapIntoLPFromComponentToken(\\r\\n                    _inputToken, // _componentToken\\r\\n                    _inputToken, // _altToken\\r\\n                    _amount.sub(altTokenAmount), //_componentTokenAmount\\r\\n                    altTokenAmount, //_altTokenAmount\\r\\n                    missingToken, //_missingToken\\r\\n                    _recipient //_recipient\\r\\n                );\\r\\n\\r\\n                //Otherwise swap the token for ETH and then add the liquidity from there.\\r\\n            } else {\\r\\n                uint256 ethAmount = _swapTokensForETH(\\r\\n                    _amount, //_amountIn,\\r\\n                    _inputToken, //_pathIn,\\r\\n                    address(this) //_recipient,\\r\\n                );\\r\\n\\r\\n                //Truncate eth balance to account for tax.\\r\\n                uint256 ethBalance = address(this).balance;\\r\\n                ethAmount = ethAmount > ethBalance ? ethBalance : ethAmount;\\r\\n\\r\\n                amountOut = _swapETHToLP(\\r\\n                    _targetToken, //lpToken\\r\\n                    ethAmount, //amount\\r\\n                    _recipient //_recipient.\\r\\n                );\\r\\n            }\\r\\n            //Otherwise swap tokens for tokens.\\r\\n        } else {\\r\\n            amountOut = _swapTokensForTokens(\\r\\n                _amount, //_amountIn\\r\\n                _inputToken, //_pathIn\\r\\n                _targetToken, //_pathOut\\r\\n                _recipient //_recipient\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _zapIntoLPFromComponentToken(\\r\\n        address _componentToken,\\r\\n        address _altToken,\\r\\n        uint256 _componentTokenAmount,\\r\\n        uint256 _altTokenAmount,\\r\\n        address _missingToken,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        //Swap alternative token to missing token.\\r\\n        _increaseRouterAllowance(_altToken, _altTokenAmount);\\r\\n        uint256 _missingTokenAmount = _swapTokensForTokens(\\r\\n            _altTokenAmount, //_amountIn\\r\\n            _altToken, //_pathIn\\r\\n            _missingToken, //_pathOut\\r\\n            address(this) //_recipient\\r\\n        );\\r\\n\\r\\n        //Increase router allowances.\\r\\n        _increaseRouterAllowance(_componentToken, _componentTokenAmount);\\r\\n        _increaseRouterAllowance(_missingToken, _missingTokenAmount);\\r\\n\\r\\n        //Add liquidity\\r\\n        (, , amountOut) = ROUTER.addLiquidity(\\r\\n            _componentToken,\\r\\n            _missingToken,\\r\\n            _componentTokenAmount,\\r\\n            _missingTokenAmount,\\r\\n            0,\\r\\n            0,\\r\\n            _recipient,\\r\\n            block.timestamp + 40\\r\\n        );\\r\\n\\r\\n        //Emit event - Dont need to truncate as we send straight to recipient from the router.\\r\\n        emit AddLiquidity(\\r\\n            _componentToken,\\r\\n            _missingToken,\\r\\n            _componentTokenAmount,\\r\\n            _missingTokenAmount,\\r\\n            amountOut\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _unZapIntoETH(\\r\\n        address _inputToken,\\r\\n        uint256 _amount,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        require(tokenType[_inputToken] == TokenType.LP, \\\"Error: Invalid token type\\\");\\r\\n\\r\\n        //Deconstruct target token.\\r\\n        IPancakePair pair = IPancakePair(_inputToken);\\r\\n        address tokenA = pair.token0();\\r\\n        address tokenB = pair.token1();\\r\\n\\r\\n        //Remove Liquidity.\\r\\n        _increaseRouterAllowance(_inputToken, _amount);\\r\\n        (uint256 amountA, uint256 amountB) = ROUTER.removeLiquidity(\\r\\n            tokenA, //tokenA\\r\\n            tokenB, //tokenB\\r\\n            _amount, //liquidity\\r\\n            0, //amountAMin\\r\\n            0, //amountBMin\\r\\n            address(this), //recipient\\r\\n            block.timestamp + 40 //deadline\\r\\n        );\\r\\n\\r\\n        //Swap tokenA to target token if required.\\r\\n        if (tokenA != WETH) {\\r\\n            amountA = _swapTokensForTokens(\\r\\n                amountA, //_amountIn\\r\\n                tokenA, //_pathIn\\r\\n                WETH, //_pathOut\\r\\n                address(this) //_recipient\\r\\n            );\\r\\n            IWETH(WETH).withdraw(amountA);\\r\\n            TransferHelper.safeTransferETH(_recipient, amountA);\\r\\n        } else {\\r\\n            IWETH(WETH).withdraw(amountA);\\r\\n            TransferHelper.safeTransferETH(_recipient, amountA);\\r\\n        }\\r\\n\\r\\n        //Swap tokenB to target token if required.\\r\\n        if (tokenB != WETH) {\\r\\n            amountB = _swapTokensForTokens(\\r\\n                amountB, //_amountIn\\r\\n                tokenB, //_pathIn\\r\\n                WETH, //_pathOut\\r\\n                address(this) //_recipient\\r\\n            );\\r\\n            IWETH(WETH).withdraw(amountB);\\r\\n            TransferHelper.safeTransferETH(_recipient, amountB);\\r\\n        } else {\\r\\n            IWETH(WETH).withdraw(amountB);\\r\\n            TransferHelper.safeTransferETH(_recipient, amountB);\\r\\n        }\\r\\n\\r\\n        //Add amount out.\\r\\n        amountOut = amountA.add(amountB);\\r\\n    }\\r\\n\\r\\n    function _unZapIntoToken(\\r\\n        address _inputToken,\\r\\n        uint256 _amount,\\r\\n        address _targetToken,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        require(tokenType[_inputToken] == TokenType.LP, \\\"Error: Invalid token type\\\");\\r\\n        require(tokenType[_targetToken] == TokenType.ERC20, \\\"Error: Invalid token type\\\");\\r\\n\\r\\n        //Restrict usage if not an operator.\\r\\n        if (!isOperator()) {\\r\\n            require(\\r\\n                _targetToken == mainToken,\\r\\n                \\\"Error: User is not an operator\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        //Deconstruct target token.\\r\\n        IPancakePair pair = IPancakePair(_inputToken);\\r\\n        address tokenA = pair.token0();\\r\\n        address tokenB = pair.token1();\\r\\n\\r\\n        //Remove Liquidity.\\r\\n        _increaseRouterAllowance(_inputToken, _amount);\\r\\n        (uint256 amountA, uint256 amountB) = ROUTER.removeLiquidity(\\r\\n            tokenA, //tokenA\\r\\n            tokenB, //tokenB\\r\\n            _amount, //liquidity\\r\\n            0, //amountAMin\\r\\n            0, //amountBMin\\r\\n            address(this), //recipient\\r\\n            block.timestamp + 40 //deadline\\r\\n        );\\r\\n\\r\\n        //Swap tokenA to target token if required.\\r\\n        if (tokenA != _targetToken) {\\r\\n            amountA = _swapTokensForTokens(\\r\\n                amountA, //_amountIn\\r\\n                tokenA, //_pathIn\\r\\n                _targetToken, //_pathOut\\r\\n                _recipient //_recipient\\r\\n            );\\r\\n        } else {\\r\\n            IERC20(_targetToken).transfer(_recipient, amountA);\\r\\n        }\\r\\n\\r\\n        //Swap tokenB to target token if required.\\r\\n        if (tokenB != _targetToken) {\\r\\n            amountB = _swapTokensForTokens(\\r\\n                amountB, //_amountIn\\r\\n                tokenB, //_pathIn\\r\\n                _targetToken, //_pathOut\\r\\n                _recipient //_recipient\\r\\n            );\\r\\n        } else {\\r\\n            IERC20(_targetToken).transfer(_recipient, amountB);\\r\\n        }\\r\\n\\r\\n        //Add amount out.\\r\\n        amountOut = amountA.add(amountB);\\r\\n    }\\r\\n\\r\\n    function _unZapIntoLP(\\r\\n        address _inputToken,\\r\\n        uint256 _amount,\\r\\n        address _targetToken,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        require(tokenType[_inputToken] == TokenType.LP, \\\"Error: Invalid token type\\\");\\r\\n        require(tokenType[_targetToken] == TokenType.LP, \\\"Error: Invalid token type\\\");\\r\\n\\r\\n        //Restrict usage if not an operator.\\r\\n        if (!isOperator()) {\\r\\n            require(\\r\\n                _targetToken == mainTokenLP,\\r\\n                \\\"Error: User is not an operator\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        //Deconstruct target token.\\r\\n        IPancakePair pair = IPancakePair(_inputToken);\\r\\n        address inputTokenA = pair.token0();\\r\\n        address inputTokenB = pair.token1();\\r\\n\\r\\n        //Remove Liquidity.\\r\\n        _increaseRouterAllowance(_inputToken, _amount);\\r\\n        (uint256 amountA, uint256 amountB) = ROUTER.removeLiquidity(\\r\\n            inputTokenA, //tokenA\\r\\n            inputTokenB, //tokenB\\r\\n            _amount, //liquidity\\r\\n            0, //amountAMin\\r\\n            0, //amountBMin\\r\\n            address(this), //recipient\\r\\n            block.timestamp + 40 //deadline\\r\\n        );\\r\\n\\r\\n        //Get output token components.\\r\\n        pair = IPancakePair(_targetToken);\\r\\n        address outputTokenA = pair.token0();\\r\\n        address outputTokenB = pair.token1();\\r\\n\\r\\n        //If input token A is already a component.\\r\\n        if (inputTokenA == outputTokenA || inputTokenA == outputTokenB) {\\r\\n            //Dictate which is the missing LP token.\\r\\n            address missingToken = inputTokenA == outputTokenA ? outputTokenB : outputTokenA;\\r\\n            amountOut = _zapIntoLPFromComponentToken(\\r\\n                inputTokenA, //_componentToken,\\r\\n                inputTokenB, //_altToken,\\r\\n                amountA, //_componentTokenAmount,\\r\\n                amountB, //_altTokenAmount,\\r\\n                missingToken, //_missingToken,\\r\\n                _recipient\\r\\n            );\\r\\n            //If input token A is already a component.\\r\\n        } else if (inputTokenB == outputTokenA || inputTokenB == outputTokenB) {\\r\\n            //Dictate which is the missing LP token.\\r\\n            address missingToken = inputTokenB == outputTokenA ? outputTokenB : outputTokenA;\\r\\n            amountOut = _zapIntoLPFromComponentToken(\\r\\n                inputTokenB, //_componentToken,\\r\\n                inputTokenA, //_altToken,\\r\\n                amountB, //_componentTokenAmount,\\r\\n                amountA, //_altTokenAmount,\\r\\n                missingToken, //_missingToken,\\r\\n                _recipient\\r\\n            );\\r\\n            //Otherwise swap both tokens to ETH and then convert to LP.\\r\\n        } else {\\r\\n            //Swap both tokens to ETH.\\r\\n            uint256 ethAmountA = _swapTokensForETH(\\r\\n                amountA, //_amountIn,\\r\\n                inputTokenA, //_pathIn,\\r\\n                address(this) //_recipient,\\r\\n            );\\r\\n            uint256 ethAmountB = _swapTokensForETH(\\r\\n                amountB, //_amountIn,\\r\\n                inputTokenB, //_pathIn,\\r\\n                address(this) //_recipient,\\r\\n            );\\r\\n\\r\\n            //Convert eth to LP.\\r\\n            amountOut = _swapETHToLP(\\r\\n                _targetToken, //lpToken\\r\\n                ethAmountA.add(ethAmountB), //amount\\r\\n                _recipient //_recipient.\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _universalZap(\\r\\n        address _inputToken,\\r\\n        uint256 _amount,\\r\\n        address _targetToken,\\r\\n        address _recipient,\\r\\n        bool _targetIsNative\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        require(tokenType[_inputToken] != TokenType.INVALID, \\\"Error: Invalid token type\\\");\\r\\n        require(tokenType[_targetToken] != TokenType.INVALID, \\\"Error: Invalid token type\\\");\\r\\n\\r\\n        //Transfer token into contract.\\r\\n        IERC20(_inputToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        //Exit early if no zap required.\\r\\n        if (_inputToken == _targetToken) {\\r\\n            if (_recipient != address(this)) {\\r\\n                IERC20(_inputToken).safeTransfer(_recipient, _amount);\\r\\n            }\\r\\n            return _amount;\\r\\n        }\\r\\n\\r\\n        //Zap into token.\\r\\n        if (tokenType[_inputToken] == TokenType.ERC20) {\\r\\n            if (_inputToken == WETH && _targetIsNative == true) {\\r\\n                IWETH(WETH).withdraw(_amount);\\r\\n                TransferHelper.safeTransferETH(_recipient, _amount);\\r\\n            } else {\\r\\n                amountOut = _zapIntoTokenTaxWrapper(\\r\\n                    _inputToken,\\r\\n                    _amount,\\r\\n                    _targetToken,\\r\\n                    _targetIsNative,\\r\\n                    _recipient\\r\\n                );\\r\\n            }\\r\\n        } else if (tokenType[_targetToken] == TokenType.ERC20) {\\r\\n            if (_targetIsNative) {\\r\\n                amountOut = _unZapIntoETH(_inputToken, _amount, _recipient);\\r\\n            } else {\\r\\n                amountOut = _unZapIntoToken(_inputToken, _amount, _targetToken, _recipient);\\r\\n            }\\r\\n        } else {\\r\\n            amountOut = _unZapIntoLP(_inputToken, _amount, _targetToken, _recipient);\\r\\n        }\\r\\n\\r\\n        //Truncate to target token balance.\\r\\n        uint256 targetTokenBalance = IERC20(_targetToken).balanceOf(_recipient);\\r\\n        amountOut = amountOut > targetTokenBalance ? targetTokenBalance : amountOut;\\r\\n    }\\r\\n\\r\\n    function _universalZapETH(\\r\\n        uint256 _amount,\\r\\n        address _targetToken,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        require(tokenType[_targetToken] != TokenType.INVALID, \\\"Error: Invalid token type\\\");\\r\\n        //Zap into token.\\r\\n        if (tokenType[_targetToken] == TokenType.ERC20) {\\r\\n            if (_targetToken == WETH) {\\r\\n                IWETH(WETH).deposit{value: _amount}();\\r\\n                IERC20(WETH).transfer(_recipient, _amount);\\r\\n            } else {\\r\\n                amountOut = _swapETHForTokens(_amount, _targetToken, _recipient);\\r\\n            }\\r\\n        } else {\\r\\n            amountOut = _swapETHToLP(_targetToken, _amount, _recipient);\\r\\n        }\\r\\n\\r\\n        //Truncate to target token balance.\\r\\n        uint256 targetTokenBalance = IERC20(_targetToken).balanceOf(_recipient);\\r\\n        amountOut = amountOut > targetTokenBalance ? targetTokenBalance : amountOut;\\r\\n    }\\r\\n\\r\\n    /* ========== Private Functions ========== */\\r\\n\\r\\n    function _swapETHToLP(\\r\\n        address _lpToken,\\r\\n        uint256 _amount,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        //If target token is not an LP then perform single swap.\\r\\n        if (tokenType[_lpToken] == TokenType.LP) {\\r\\n            //Deconstruct LP token.\\r\\n            IPancakePair pair = IPancakePair(_lpToken);\\r\\n            address token0 = pair.token0();\\r\\n            address token1 = pair.token1();\\r\\n\\r\\n            //If either of the tokens are WETH then swap half of the EVMOS balance.\\r\\n            if (token0 == WETH || token1 == WETH) {\\r\\n                address altToken = token0 == WETH ? token1 : token0;\\r\\n                uint256 swapValue = _amount.div(2);\\r\\n\\r\\n                uint256 altTokenAmount = _swapETHForTokens(\\r\\n                    swapValue, //_amountIn\\r\\n                    altToken, //_pathOut\\r\\n                    address(this) //_recipient\\r\\n                );\\r\\n\\r\\n                _increaseRouterAllowance(altToken, altTokenAmount);\\r\\n\\r\\n                (, , amountOut) = ROUTER.addLiquidityETH{value: _amount.sub(swapValue)}(\\r\\n                    altToken,\\r\\n                    altTokenAmount,\\r\\n                    0,\\r\\n                    0,\\r\\n                    _recipient,\\r\\n                    block.timestamp + 40\\r\\n                );\\r\\n                emit AddLiquidity(\\r\\n                    WETH,\\r\\n                    altToken,\\r\\n                    _amount.sub(swapValue),\\r\\n                    altTokenAmount,\\r\\n                    amountOut\\r\\n                );\\r\\n\\r\\n                //Otherwise perform 2 swaps & add liquidity.\\r\\n            } else {\\r\\n                uint256 swapValue = _amount.div(2);\\r\\n                uint256 token0Amount = _swapETHForTokens(\\r\\n                    swapValue, //_amountIn\\r\\n                    token0, //_pathOut\\r\\n                    address(this) //_recipient\\r\\n                );\\r\\n                uint256 token1Amount = _swapETHForTokens(\\r\\n                    _amount.sub(swapValue), //_amountIn\\r\\n                    token1, //_pathOut\\r\\n                    address(this) //_recipient\\r\\n                );\\r\\n\\r\\n                _increaseRouterAllowance(token0, token0Amount);\\r\\n                _increaseRouterAllowance(token1, token1Amount);\\r\\n\\r\\n                (, , amountOut) = ROUTER.addLiquidity(\\r\\n                    token0,\\r\\n                    token1,\\r\\n                    token0Amount,\\r\\n                    token1Amount,\\r\\n                    0,\\r\\n                    0,\\r\\n                    _recipient,\\r\\n                    block.timestamp + 40\\r\\n                );\\r\\n                emit AddLiquidity(token0, token1, token0Amount, token1Amount, amountOut);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== SWAP FUNCTIONS ========== */\\r\\n\\r\\n    function _increaseRouterAllowance(address _token, uint256 _amount) private {\\r\\n        IERC20(_token).safeIncreaseAllowance(address(ROUTER), _amount);\\r\\n    }\\r\\n\\r\\n    function _setSwapPath(\\r\\n        address _token0,\\r\\n        address _token1,\\r\\n        address[] memory _path\\r\\n    ) internal virtual {\\r\\n        require(_path.length > 1, \\\"Error: Path is not long enough.\\\");\\r\\n        require(\\r\\n            _path[0] == _token0 && _path[_path.length - 1] == _token1,\\r\\n            \\\"Error: Endpoints of path are incorrect.\\\"\\r\\n        );\\r\\n        swapPath[_token0][_token1] = _path;\\r\\n\\r\\n        //Set inverse path.\\r\\n        uint256 pathLength = _path.length;\\r\\n        address[] memory invPath = new address[](pathLength);\\r\\n        for (uint256 i = 0; i < pathLength; i++) {\\r\\n            invPath[i] = _path[pathLength - 1 - i];\\r\\n        }\\r\\n        swapPath[_token1][_token0] = invPath;\\r\\n    }\\r\\n\\r\\n    function setSwapPath(\\r\\n        address _token0,\\r\\n        address _token1,\\r\\n        address[] calldata _path\\r\\n    ) external virtual onlyOwner {\\r\\n        _setSwapPath(_token0, _token1, _path);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Swaps Tokens for Tokens Safely. - Is public to allow a static call.\\r\\n    */\\r\\n    function _swapTokensForTokens(\\r\\n        uint256 _amountIn,\\r\\n        address _pathIn,\\r\\n        address _pathOut,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 _outputAmount) {\\r\\n        //Extract swap path.\\r\\n        address[] memory path = swapPath[_pathIn][_pathOut];\\r\\n        if (path.length == 0) {\\r\\n            path = new address[](2);\\r\\n            path[0] = _pathIn;\\r\\n            path[1] = _pathOut;\\r\\n        }\\r\\n\\r\\n        //Increase allowance and swap.\\r\\n        if (_amountIn > 0) {\\r\\n            _increaseRouterAllowance(_pathIn, _amountIn);\\r\\n\\r\\n                uint256[] memory amounts = ROUTER.swapExactTokensForTokens(\\r\\n                    _amountIn,\\r\\n                    0,\\r\\n                    path,\\r\\n                    _recipient,\\r\\n                    block.timestamp + 40\\r\\n                );\\r\\n                _outputAmount = amounts[amounts.length - 1];\\r\\n            }\\r\\n\\r\\n        emit SwapTokens(_pathIn, _pathOut, _amountIn, _outputAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Swaps Tokens for 'ETH' safely. \\r\\n    */\\r\\n    function _swapTokensForETH(\\r\\n        uint256 _amountIn,\\r\\n        address _pathIn,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 _outputAmount) {\\r\\n        //Set output of the path.\\r\\n        address _pathOut = WETH;\\r\\n\\r\\n        //Extract swap path.\\r\\n        address[] memory path = swapPath[_pathIn][_pathOut];\\r\\n        if (path.length == 0) {\\r\\n            path = new address[](2);\\r\\n            path[0] = _pathIn;\\r\\n            path[1] = _pathOut;\\r\\n        }\\r\\n\\r\\n        //Increase allowance and swap.\\r\\n        if (_amountIn > 0) {\\r\\n            _increaseRouterAllowance(_pathIn, _amountIn);\\r\\n\\r\\n                uint256[] memory amounts = ROUTER.swapExactTokensForETH(\\r\\n                    _amountIn,\\r\\n                    0,\\r\\n                    path,\\r\\n                    _recipient,\\r\\n                    block.timestamp + 40\\r\\n                );\\r\\n                _outputAmount = amounts[amounts.length - 1];\\r\\n        }\\r\\n\\r\\n        emit SwapTokens(_pathIn, _pathOut, _amountIn, _outputAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Swaps 'ETH' for Tokens safely. \\r\\n    */\\r\\n    function _swapETHForTokens(\\r\\n        uint256 _amountIn,\\r\\n        address _pathOut,\\r\\n        address _recipient\\r\\n    ) internal returns (uint256 _outputAmount) {\\r\\n        //Set output of the path.\\r\\n        address _pathIn = WETH;\\r\\n\\r\\n        //Extract swap path.\\r\\n        address[] memory path = swapPath[_pathIn][_pathOut];\\r\\n        if (path.length == 0) {\\r\\n            path = new address[](2);\\r\\n            path[0] = _pathIn;\\r\\n            path[1] = _pathOut;\\r\\n        }\\r\\n\\r\\n        //Increase allowance and swap.\\r\\n        if (_amountIn > 0) {\\r\\n            uint256[] memory amounts = ROUTER.swapExactETHForTokens{value: _amountIn}(\\r\\n                0,\\r\\n                path,\\r\\n                _recipient,\\r\\n                block.timestamp + 40\\r\\n            );\\r\\n            _outputAmount = amounts[amounts.length - 1];\\r\\n        }\\r\\n\\r\\n        emit SwapTokens(_pathIn, _pathOut, _amountIn, _outputAmount);\\r\\n    }\\r\\n\\r\\n    /* ========== EXTERNAL SWAP FUNCTIONS ========== */\\r\\n\\r\\n    function swapTokensForTokens(\\r\\n        uint256 _amountIn,\\r\\n        address _pathIn,\\r\\n        address _pathOut,\\r\\n        address _recipient\\r\\n    ) external onlyOperator returns (uint256 _outputAmount) {\\r\\n        IERC20(_pathIn).transferFrom(msg.sender, address(this), _amountIn);\\r\\n        _outputAmount = _swapTokensForTokens(_amountIn, _pathIn, _pathOut, _recipient);\\r\\n    }\\r\\n\\r\\n    function swapETHForTokens(\\r\\n        uint256 _amountIn,\\r\\n        address _pathOut,\\r\\n        address _recipient\\r\\n    ) external payable onlyOperator returns (uint256 _outputAmount) {\\r\\n        require(msg.value > _amountIn, \\\"Zap: Not enough ether sent in for the swap\\\");\\r\\n        _outputAmount = _swapETHForTokens(_amountIn, _pathOut, _recipient);\\r\\n    }\\r\\n\\r\\n    function swapTokensForETH(\\r\\n        uint256 _amountIn,\\r\\n        address _pathIn,\\r\\n        address _recipient\\r\\n    ) external onlyOperator returns (uint256 _outputAmount) {\\r\\n        IERC20(_pathIn).transferFrom(msg.sender, address(this), _amountIn);\\r\\n        _outputAmount = _swapTokensForETH(_amountIn, _pathIn, _recipient);\\r\\n    }\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n        @notice Sets the token type of an address.\\r\\n    */\\r\\n    function setTokenType(address _token, uint8 _type) public onlyOwner {\\r\\n        tokenType[_token] = TokenType(_type);\\r\\n    }\\r\\n\\r\\n    function setTokensType(address[] memory _tokens, uint8 _type) external onlyOperator {\\r\\n        for (uint8 idx = 0; idx < _tokens.length; ++idx) {\\r\\n            tokenType[_tokens[idx]] = TokenType(_type);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTokensTypes(address[] memory _tokens, uint8[] memory _types) external onlyOperator {\\r\\n        require(_tokens.length == _types.length, \\\"Error: Tokens and Types lengths not equal\\\");\\r\\n        for (uint8 idx = 0; idx < _tokens.length; ++idx) {\\r\\n            tokenType[_tokens[idx]] = TokenType(_types[idx]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw(address token) external onlyOwner {\\r\\n        if (token == address(0)) {\\r\\n            (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n            require(callSuccess, \\\"Call failed\\\");\\r\\n        }\\r\\n        IERC20(token).transfer(owner(), IERC20(token).balanceOf(address(this)));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/ZapV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n\\r\\n\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"./ZapBase.sol\\\";\\r\\n\\r\\n// File: ZapV3.sol\\r\\n\\r\\ncontract ZapV3 is ZapBase {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event ZapIntoFarm(address indexed _recipient, uint256 indexed _pid, uint256 _amount);\\r\\n    event ZapIntoAC(address indexed _recipient, uint256 indexed _pid, uint256 _amount);\\r\\n    event ZapIntoBoardroom(address indexed _recipient, address _inputToken, uint256 _amount);\\r\\n    event ZapIntoBoardrooms(address indexed _recipient, uint256 _lpAmount, uint256 _ssAmount);\\r\\n\\r\\n    /* ========== BANK ========== */\\r\\n    function zapIntoFarmWithToken(\\r\\n        address _inputToken,\\r\\n        uint256 _amount,\\r\\n        address _targetToken,\\r\\n        address _farm,\\r\\n        uint256 _pid,\\r\\n        bool _targetIsNative\\r\\n    ) external nonReentrant returns (uint256 amountOut) {\\r\\n        //Zap into token.\\r\\n        amountOut = _universalZap(\\r\\n            _inputToken, //_inputToken\\r\\n            _amount, //_amount\\r\\n            _targetToken, //_targetToken\\r\\n            address(this), //_recipient\\r\\n            _targetIsNative\\r\\n        );\\r\\n\\r\\n        //Stake in farm.\\r\\n        IERC20(_targetToken).safeIncreaseAllowance(_farm, amountOut);\\r\\n        IRewardPool(_farm).depositFor(_pid, amountOut, msg.sender);\\r\\n\\r\\n        //Emit event.\\r\\n        emit ZapIntoFarm(msg.sender, _pid, amountOut);\\r\\n    }\\r\\n\\r\\n    /* ========== BANK ========== */\\r\\n\\r\\n    function zapIntoFarmWithETH(\\r\\n        address _targetToken,\\r\\n        address _farm,\\r\\n        uint256 _pid\\r\\n    ) external payable nonReentrant returns (uint256 amountOut) {\\r\\n        //Zap into token.\\r\\n        require(msg.value > 0, \\\"Insufficient ETH\\\");\\r\\n\\r\\n        amountOut = _universalZapETH(\\r\\n            msg.value, //_amount\\r\\n            _targetToken, //_targetToken\\r\\n            address(this) //_recipient\\r\\n        );\\r\\n\\r\\n        //Stake in farm.\\r\\n        IERC20(_targetToken).safeIncreaseAllowance(_farm, amountOut);\\r\\n        IRewardPool(_farm).depositFor(_pid, amountOut, msg.sender);\\r\\n\\r\\n        //Emit event.\\r\\n        emit ZapIntoFarm(msg.sender, _pid, amountOut);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_operatorStatus\",\"type\":\"bool\"}],\"name\":\"OperatorStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TaxPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ZapIntoAC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ZapIntoBoardroom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ssAmount\",\"type\":\"uint256\"}],\"name\":\"ZapIntoBoardrooms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ZapIntoFarm\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"}],\"name\":\"addTaxFreeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainTokenLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeTaxFreeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainTokenLP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setCoreValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_operatorStatus\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_operatorStatus\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_operatorStatuses\",\"type\":\"bool[]\"}],\"name\":\"setShareTokenWhitelistType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setSwapPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setTokenType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setTokensType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_types\",\"type\":\"uint8[]\"}],\"name\":\"setTokensTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pathOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"swapETHForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pathIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"swapTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pathIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pathOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"swapTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"enum ZapBase.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsNative\",\"type\":\"bool\"}],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"}],\"name\":\"zapETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"zapIntoFarmWithETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_targetIsNative\",\"type\":\"bool\"}],\"name\":\"zapIntoFarmWithToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZapV3", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}