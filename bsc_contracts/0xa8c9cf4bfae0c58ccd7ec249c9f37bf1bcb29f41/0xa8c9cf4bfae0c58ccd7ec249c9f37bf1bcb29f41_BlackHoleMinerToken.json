{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BlackHoleMinerToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./role/Member.sol\\\";\\n\\nimport \\\"./interface/IMinterPool.sol\\\";\\nimport \\\"./interface/IInviteManager.sol\\\";\\n\\ncontract BlackHoleMinerToken is IERC20, Member {\\n    using SafeMath for uint256;\\n\\n    event TransferEventReceiverAdd(address receiver);\\n    event TransferEventReceiverRemove(address receiver);\\n\\n    string public override name;\\n    string public override symbol;\\n    uint8 public decimals;\\n\\n    uint256 public override totalSupply;\\n    uint256 public remainedSupply;\\n\\n    mapping(address => uint256) public override balanceOf;\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    constructor() {\\n        name = \\\"BlackHole Miner Token\\\";\\n\\n        symbol = \\\"BHT\\\";\\n        decimals = 18;\\n        remainedSupply = 5000000000 * 1e18;\\n\\n        mint(0x79bDEa2E54053e54733BB07Dc9d965Eb7CeC2b43, remainedSupply);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        require(to != address(0), \\\"zero address\\\");\\n        require(remainedSupply >= amount, \\\"mint too much\\\");\\n\\n        remainedSupply = remainedSupply.sub(amount);\\n        totalSupply = totalSupply.add(amount);\\n        balanceOf[to] = balanceOf[to].add(amount);\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) private {\\n        require(balanceOf[from] >= amount, \\\"balance not enough\\\");\\n\\n        balanceOf[from] = balanceOf[from].sub(amount);\\n        totalSupply = totalSupply.sub(amount);\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    function burnFrom(address from, uint256 amount) external {\\n        require(allowance[from][msg.sender] >= amount, \\\"allowance not enough\\\");\\n\\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(amount);\\n        _burn(from, amount);\\n    }\\n\\n    function _transferWithFee(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(balanceOf[from] >= amount, \\\"balance not enough\\\");\\n        address lpAddress = getMember(\\\"LPAddress\\\");\\n        uint256 remainAmount = amount;\\n        if (lpAddress != address(0) && (from == lpAddress || to == lpAddress)) {\\n            uint256 burnAmount = (amount * 200) / 10000;\\n            _transfer(from, address(0), burnAmount);\\n            remainAmount = remainAmount - burnAmount;\\n\\n            uint256 lpRewardAmount = (amount * 100) / 10000;\\n            _transfer(from, getMember(\\\"LPReward\\\"), lpRewardAmount);\\n            remainAmount = remainAmount - lpRewardAmount;\\n\\n            address user = from == lpAddress ? to : from;\\n            address inviteManager = getMember(\\\"InviteManager\\\");\\n            if (inviteManager != address(0)) {\\n                address[] memory users = IInviteManager(inviteManager)\\n                    .allocationUsersWhenDeal(user);\\n                uint256 prarentAmount = (amount * 200) / 10000;\\n                _transfer(from, users[0], prarentAmount);\\n                uint256 grandPaAmount = (amount * 100) / 10000;\\n                _transfer(from, users[1], grandPaAmount);\\n\\n                remainAmount = remainAmount - prarentAmount - grandPaAmount;\\n            }\\n\\n            uint256 nodeRewardAmount = (amount * 100) / 10000;\\n            _transfer(from, getMember(\\\"NodeReward\\\"), nodeRewardAmount);\\n            remainAmount = remainAmount - nodeRewardAmount;\\n        }\\n        _transfer(from, to, remainAmount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(balanceOf[from] >= amount, \\\"balance not enough\\\");\\n\\n        balanceOf[from] = balanceOf[from].sub(amount);\\n        balanceOf[to] = balanceOf[to].add(amount);\\n\\n        _afterTransfer(from, to, amount);\\n\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    function transfer(address to, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transferWithFee(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        require(allowance[from][msg.sender] >= amount, \\\"allowance not enough\\\");\\n\\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(amount);\\n        _transferWithFee(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        require(spender != address(0), \\\"zero address\\\");\\n\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function _afterTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (to == address(0)) {\\n            address minterPool = getMember(\\\"MinePool\\\");\\n            if (minterPool != address(0)) {\\n                IMinterPool(minterPool).onTransferToBlackHole(from, to, amount);\\n            }\\n        } else {\\n            address inviteManager = getMember(\\\"InviteManager\\\");\\n            if (inviteManager != address(0)) {\\n                IInviteManager(inviteManager).onTransferToNozeroAddress(\\n                    from,\\n                    to,\\n                    amount\\n                );\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/role/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Context {\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/role/Member.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Manager.sol\\\";\\n\\nabstract contract Member is Ownable {\\n    //\u68c0\u67e5\u6743\u9650\\n    modifier CheckPermit(string memory permit) {\\n        require(manager.getUserPermit(msg.sender, permit), \\\"no permit\\\");\\n        _;\\n    }\\n\\n    Manager public manager;\\n\\n    function getMember(string memory _name) public view returns (address) {\\n        return manager.members(_name);\\n    }\\n\\n    function setManager(address addr) external onlyOwner {\\n        manager = Manager(addr);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/role/Manager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/Ownable.sol\\\";\\n\\ncontract Manager is Ownable {\\n    /// Oracle=>\\\"Oracle\\\"\\n\\n    mapping(string => address) public members;\\n\\n    mapping(address => mapping(string => bool)) public permits; //\u5730\u5740\u662f\u5426\u6709\u67d0\u4e2a\u6743\u9650\\n\\n    function setMember(string memory name, address member) external onlyOwner {\\n        members[name] = member;\\n    }\\n\\n    function getUserPermit(address user, string memory permit)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return permits[user][permit];\\n    }\\n\\n    function setUserPermit(\\n        address user,\\n        string calldata permit,\\n        bool enable\\n    ) external onlyOwner {\\n        permits[user][permit] = enable;\\n    }\\n\\n    function getTimestamp() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IMinterPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMinterPool {\\n    function onTransferToBlackHole(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IInviteManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IInviteManager {\\n    struct DynamicIncome {\\n        address user;\\n        uint256 rate;\\n    }\\n\\n    function onTransferToNozeroAddress(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function nodeConfig(address user) external returns (bool);\\n\\n    function allocationUsersWhenDeal(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allocationDynamicIncome(address user)\\n        external\\n        view\\n        returns (DynamicIncome[] memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 400\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TransferEventReceiverAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TransferEventReceiverRemove\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract Manager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlackHoleMinerToken", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "400", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}