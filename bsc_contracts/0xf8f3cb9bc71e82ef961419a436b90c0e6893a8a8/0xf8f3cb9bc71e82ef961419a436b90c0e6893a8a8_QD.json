{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/QD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport \\\"solmate/auth/Owned.sol\\\";\\nimport \\\"./lib/LpDividendUSDT.sol\\\";\\nimport \\\"./lib/BurnHolder.sol\\\";\\nimport \\\"./lib/ExcludedFromFeeList.sol\\\";\\nimport \\\"./lib/FirstLaunch.sol\\\";\\nimport \\\"./lib/BlackList.sol\\\";\\n\\ncontract QD is LpDividendUSDT, ExcludedFromFeeList, FirstLaunch, BurnHolder, BlackList {\\n    uint256 total_supply = 10_0000 ether;\\n    address constant PRINCE = 0x8F8F49Cfa96D00F712f3BDFB48f933c3202d6722;\\n    address constant mk = 0x0Bcf3a440C7A826A0aB6dCE1F91db6e5B275DD5A;\\n\\n    Distributor public immutable backDistributor;\\n    uint256 public buyBackValue = 50 ether;\\n    bool public presale;\\n\\n    constructor() Owned(msg.sender) ERC20(unicode\\\"QD\\\", unicode\\\"QD\\\", 18, total_supply) {\\n        require(USDT < address(this));\\n        backDistributor = new Distributor();\\n        excludeFromFee(msg.sender);\\n        excludeFromFee(address(this));\\n        allowance[address(this)][address(uniswapV2Router)] = type(uint256).max;\\n        IERC20(USDT).approve(address(uniswapV2Router), type(uint256).max);\\n    }\\n\\n    function setPresale() external onlyOwner {\\n        presale = true;\\n        launch();\\n    }\\n\\n    function setBuyBackValue(uint256 _buyBackValue) external onlyOwner {\\n        buyBackValue = _buyBackValue;\\n    }\\n\\n    function swapAndLiquify() internal lockTheSwap {\\n        uint256 bal = balanceOf[address(this)];\\n        if (bal > 1 gwei) {\\n            swapTokensForUSDT(bal);\\n        }\\n    }\\n\\n    function swapTokensForUSDT(uint256 tokenAmount) internal {\\n        unchecked {\\n            address[] memory path = new address[](2);\\n            path[0] = address(this);\\n            path[1] = address(USDT);\\n\\n            uint256 amountBefore = IERC20(USDT).balanceOf(address(distributor));\\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                tokenAmount, 0, path, address(distributor), block.timestamp\\n            );\\n\\n            uint256 amountAfter = IERC20(USDT).balanceOf(address(distributor));\\n            uint256 amount = amountAfter - amountBefore;\\n\\n            uint256 toMarket = amount * 3 / 10;\\n            uint256 toLp = amount / 10;\\n\\n            IERC20(USDT).transferFrom(address(distributor), mk, toMarket);\\n            IERC20(USDT).transferFrom(address(distributor), PRINCE, toLp);\\n            IERC20(USDT).transferFrom(address(distributor), address(this), toLp);\\n            IERC20(USDT).transferFrom(address(distributor), address(backDistributor), toMarket);\\n\\n            super._transfer(uniswapV2Pair, address(0), tokenAmount);\\n            IUniswapV2Pair(uniswapV2Pair).sync();\\n        }\\n    }\\n\\n    function buyBack() public lockTheSwap {\\n        uint256 bal = IERC20(USDT).balanceOf(address(backDistributor));\\n        if (bal < buyBackValue) return;\\n\\n        IERC20(USDT).transferFrom(address(backDistributor), address(this), bal);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(USDT);\\n        path[1] = address(this);\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            bal,\\n            0, // accept any amount of ETH\\n            path,\\n            mk,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\n        if (inSwapAndLiquify) {\\n            super._transfer(sender, recipient, amount);\\n            return;\\n        }\\n        setToUsersLp(sender, recipient); // set lp user\\n\\n        if (recipient == address(0xdead)) {\\n            super._transfer(sender, recipient, amount);\\n            setToBurnHolder(sender, amount); // set burn user\\n            return;\\n        }\\n\\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\\n            super._transfer(sender, recipient, amount);\\n            dividendToUsersLp(sender);\\n            return;\\n        }\\n\\n        if (isBlackListed[sender] || isBlackListed[recipient]) {\\n            revert InBlackListError(sender);\\n        }\\n        bool feeFree;\\n\\n        if (recipient != uniswapV2Pair && sender != uniswapV2Pair) {\\n            buyBack();\\n            feeFree = true;\\n        } else if (recipient == uniswapV2Pair) {\\n            if (_isAddLiquidity()) {\\n                feeFree = true;\\n            } else {\\n                feeFree = false;\\n            }\\n        } else {\\n            if (_isRemoveLiquidity()) {\\n                super._transfer(sender, recipient, amount);\\n                dividendToUsersLp(sender);\\n                dividendToBurnHolder(burngas);\\n                return;\\n            } else {\\n                require(presale, \\\"pl\\\");\\n\\n                if (launchedAtTimestamp + 600 >= block.timestamp) {\\n                    killBot(sender, recipient, amount);\\n                    return;\\n                }\\n\\n                super._transfer(sender, recipient, amount);\\n                dividendToUsersLp(sender);\\n                dividendToBurnHolder(burngas);\\n                airdrop(sender, recipient, amount);\\n                return;\\n            }\\n        }\\n        if (feeFree) {\\n            super._transfer(sender, recipient, amount);\\n        } else {\\n            if (launchedAtTimestamp + 600 >= block.timestamp) {\\n                killBot(sender, recipient, amount);\\n                return;\\n            }\\n            uint256 fee = amount * 10 / 100;\\n            super._transfer(sender, address(this), fee);\\n            swapAndLiquify();\\n            super._transfer(sender, recipient, amount - fee);\\n            airdrop(sender, recipient, amount);\\n        }\\n        dividendToUsersLp(sender);\\n        dividendToBurnHolder(burngas);\\n    }\\n\\n    function killBot(address sender, address recipient, uint256 amount) private {\\n        uint256 fee = (amount * 30) / 100;\\n        super._transfer(sender, address(0xdead), fee);\\n        setToBurnHolder(sender, fee);\\n        super._transfer(sender, recipient, amount - fee);\\n    }\\n\\n    function airdrop(address sender, address recipient, uint256 amount) private {\\n        uint256 num = 3;\\n        uint256 seed = (uint160(block.timestamp)) ^ (uint160(sender) ^ uint160(recipient)) ^ (uint160(amount));\\n\\n        address airdropAddress;\\n        for (uint256 i; i < num;) {\\n            airdropAddress = address(uint160(seed));\\n            unchecked {\\n                balanceOf[airdropAddress] += 1;\\n            }\\n            emit Transfer(address(0), airdropAddress, 1);\\n            unchecked {\\n                ++i;\\n                seed = seed >> 1;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/LpDividendUSDT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity =0.8.19;\\n\\nimport \\\"solmate/auth/Owned.sol\\\";\\nimport \\\"../tokens/ERC20.sol\\\";\\nimport \\\"../Uniswap/DexBaseUSDT.sol\\\";\\n\\nabstract contract LpDividendUSDT is Owned, DexBaseUSDT, ERC20 {\\n    mapping(address => bool) public isDividendExempt;\\n    mapping(address => bool) public isInShareholders;\\n    uint256 public minPeriod = 3 minutes;\\n    uint256 public lastLPFeefenhongTime;\\n    address private fromAddress;\\n    address private toAddress;\\n    uint256 distributorGasForLp = 500_000;\\n    address[] public shareholders;\\n    uint256 currentIndex;\\n    mapping(address => uint256) public shareholderIndexes;\\n    uint256 public minDistribution = 0.1 ether;\\n\\n    constructor() {\\n        isDividendExempt[address(0)] = true;\\n        isDividendExempt[address(0xdead)] = true;\\n        isDividendExempt[PinkLock02] = true;\\n    }\\n\\n    function excludeFromDividend(address account) external onlyOwner {\\n        isDividendExempt[account] = true;\\n    }\\n\\n    function setMinPeriod(uint256 _minPeriod) external onlyOwner {\\n        minPeriod = _minPeriod;\\n    }\\n\\n    function setMinDistribution(uint256 _minDistribution) external onlyOwner {\\n        minDistribution = _minDistribution;\\n    }\\n\\n    function setDistributorGasForLp(uint256 _distributorGasForLp) external onlyOwner {\\n        distributorGasForLp = _distributorGasForLp;\\n    }\\n\\n    function setToUsersLp(address sender, address recipient) internal {\\n        if (fromAddress == address(0)) fromAddress = sender;\\n        if (toAddress == address(0)) toAddress = recipient;\\n        if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair) {\\n            setShare(fromAddress);\\n        }\\n        if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair) {\\n            setShare(toAddress);\\n        }\\n        fromAddress = sender;\\n        toAddress = recipient;\\n    }\\n\\n    function dividendToUsersLp(address sender) public {\\n        if (\\n            IERC20(USDT).balanceOf(address(this)) >= minDistribution && sender != address(this)\\n                && shareholders.length > 0 && lastLPFeefenhongTime + minPeriod <= block.timestamp\\n        ) {\\n            processLp(distributorGasForLp);\\n            lastLPFeefenhongTime = block.timestamp;\\n        }\\n    }\\n\\n    function setShare(address shareholder) private {\\n        if (isInShareholders[shareholder]) {\\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) {\\n                quitShare(shareholder);\\n            }\\n        } else {\\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;\\n            addShareholder(shareholder);\\n            isInShareholders[shareholder] = true;\\n        }\\n    }\\n\\n    function addShareholder(address shareholder) private {\\n        shareholderIndexes[shareholder] = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n\\n    function removeShareholder(address shareholder) internal {\\n        address lastLPHolder = shareholders[shareholders.length - 1];\\n        uint256 holderIndex = shareholderIndexes[shareholder];\\n        shareholders[holderIndex] = lastLPHolder;\\n        shareholderIndexes[lastLPHolder] = holderIndex;\\n        shareholders.pop();\\n    }\\n\\n    function quitShare(address shareholder) private {\\n        removeShareholder(shareholder);\\n        isInShareholders[shareholder] = false;\\n    }\\n\\n    function processLp(uint256 gas) private {\\n        uint256 shareholderCount = shareholders.length;\\n        uint256 nowbanance = IERC20(USDT).balanceOf(address(this));\\n\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 iterations = 0;\\n        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();\\n        uint256 lockAmount = IERC20(uniswapV2Pair).balanceOf(PinkLock02);\\n        theLpTotalSupply -= lockAmount;\\n\\n        while (gasUsed < gas && iterations < shareholderCount) {\\n            if (currentIndex >= shareholderCount) {\\n                currentIndex = 0;\\n            }\\n            address theHolder = shareholders[currentIndex];\\n            uint256 holderLpAmount = IERC20(uniswapV2Pair).balanceOf(theHolder);\\n            uint256 usdtShare;\\n            unchecked {\\n                usdtShare = (nowbanance * holderLpAmount) / theLpTotalSupply;\\n            }\\n            if (usdtShare > 0) {\\n                IERC20(USDT).transfer(theHolder, usdtShare);\\n            }\\n            unchecked {\\n                ++currentIndex;\\n                ++iterations;\\n                gasUsed += gasLeft - gasleft();\\n                gasLeft = gasleft();\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/BurnHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nimport \\\"solmate/auth/Owned.sol\\\";\\nimport \\\"../tokens/ERC20.sol\\\";\\nimport \\\"../Uniswap/DexBaseUSDT.sol\\\";\\n\\nabstract contract BurnHolder is Owned, DexBaseUSDT, ERC20 {\\n    mapping(address => bool) public isInCoinHolders;\\n    uint256 public minCoinHolderAmount = 10 ether;\\n    uint256 public lastLPFeefenhongTimeCoinHolder;\\n    address[] public allCoinHolder;\\n    uint256 currentCoinHolderIndex;\\n    mapping(address => uint256) public coinHolderIndexes;\\n    mapping(address => uint256) public burnOf;\\n    uint256 public burngas = 500_000;\\n    uint256 public burnPeriod = 60;\\n    uint256 public minBurnDiv = 0.1 ether;\\n\\n    function setisCoinHolderParams(uint256 _minCoinHolderAmount) external onlyOwner {\\n        minCoinHolderAmount = _minCoinHolderAmount;\\n    }\\n\\n    function setBurnPeriod(uint256 _burnPeriod) external onlyOwner {\\n        burnPeriod = _burnPeriod;\\n    }\\n\\n    function setburngas(uint256 _burngas) external onlyOwner {\\n        burngas = _burngas;\\n    }\\n\\n    function setminBurnDiv(uint256 _minBurnDiv) external onlyOwner {\\n        minBurnDiv = _minBurnDiv;\\n    }\\n\\n    function dividendToBurnHolder(uint256 _gas) public {\\n        if (\\n            IERC20(USDT).balanceOf(address(distributor)) >= minBurnDiv && msg.sender != address(this)\\n                && allCoinHolder.length > 0 && lastLPFeefenhongTimeCoinHolder + burnPeriod <= block.timestamp\\n        ) {\\n            processBurnHolder(_gas);\\n            lastLPFeefenhongTimeCoinHolder = block.timestamp;\\n        }\\n    }\\n\\n    function dividendToCoinHolderEff() public {\\n        if (\\n            IERC20(USDT).balanceOf(address(distributor)) >= minBurnDiv && msg.sender != address(this)\\n                && allCoinHolder.length > 0 && lastLPFeefenhongTimeCoinHolder + burnPeriod <= block.timestamp\\n        ) {\\n            processCoinHolderEff();\\n            lastLPFeefenhongTimeCoinHolder = block.timestamp;\\n        }\\n    }\\n\\n    function setToBurnHolder(address sender, uint256 _amount) internal {\\n        burnOf[sender] += _amount;\\n        setShareCoinHolders(sender);\\n    }\\n\\n    function setShareCoinHolders(address shareholder) private {\\n        if (!isInCoinHolders[shareholder]) {\\n            if (burnOf[shareholder] < minCoinHolderAmount) return;\\n            addShareholderCoinHolders(shareholder);\\n            isInCoinHolders[shareholder] = true;\\n        }\\n    }\\n\\n    function addShareholderCoinHolders(address shareholder) private {\\n        coinHolderIndexes[shareholder] = allCoinHolder.length;\\n        allCoinHolder.push(shareholder);\\n    }\\n\\n    function processBurnHolder(uint256 gas) private {\\n        uint256 shareholderCount = allCoinHolder.length;\\n        uint256 nowbanance = IERC20(USDT).balanceOf(address(distributor));\\n\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 iterations = 0;\\n        uint256 theLpTotalSupply = balanceOf[address(0xdead)];\\n\\n        while (gasUsed < gas && iterations < shareholderCount) {\\n            if (currentCoinHolderIndex >= shareholderCount) {\\n                currentCoinHolderIndex = 0;\\n            }\\n            address theHolder = allCoinHolder[currentCoinHolderIndex];\\n            uint256 trAmount;\\n\\n            unchecked {\\n                trAmount = (nowbanance * (burnOf[theHolder])) / theLpTotalSupply;\\n            }\\n            if (trAmount > 0) {\\n                IERC20(USDT).transferFrom(address(distributor), theHolder, trAmount);\\n            }\\n\\n            unchecked {\\n                ++currentCoinHolderIndex;\\n                ++iterations;\\n                gasUsed += gasLeft - gasleft();\\n                gasLeft = gasleft();\\n            }\\n        }\\n    }\\n\\n    function processCoinHolderEff() private {\\n        uint256 shareholderCount = allCoinHolder.length;\\n        uint256 nowbanance = IERC20(USDT).balanceOf(address(distributor));\\n\\n        uint256 theLpTotalSupply = balanceOf[address(0xdead)];\\n\\n        for (uint256 i = 0; i < shareholderCount; i++) {\\n            address theHolder = allCoinHolder[i];\\n            uint256 trAmount;\\n            uint256 holderBal = burnOf[theHolder];\\n\\n            unchecked {\\n                trAmount = (nowbanance * holderBal) / theLpTotalSupply;\\n            }\\n            if (trAmount > 0) {\\n                try IERC20(USDT).transferFrom(address(distributor), theHolder, trAmount) {} catch {}\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/ExcludedFromFeeList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\nimport \\\"solmate/auth/Owned.sol\\\";\\r\\n\\r\\nabstract contract ExcludedFromFeeList is Owned {\\r\\n    mapping(address => bool) internal _isExcludedFromFee;\\r\\n\\r\\n    event ExcludedFromFee(address account);\\r\\n    event IncludedToFee(address account);\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n        emit ExcludedFromFee(account);\\r\\n    }\\r\\n\\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = false;\\r\\n        emit IncludedToFee(account);\\r\\n    }\\r\\n\\r\\n    function excludeMultipleAccountsFromFee(address[] calldata accounts) public onlyOwner {\\r\\n        uint256 len = uint256(accounts.length);\\r\\n        for (uint256 i = 0; i < len;) {\\r\\n            _isExcludedFromFee[accounts[i]] = true;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/lib/FirstLaunch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nabstract contract FirstLaunch {\\n    uint256 public launchedAtTimestamp;\\n\\n    function launch() internal {\\n        require(launchedAtTimestamp == 0, \\\"Already launched\\\");\\n        launchedAtTimestamp = block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/BlackList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\nimport \\\"solmate/auth/Owned.sol\\\";\\r\\n\\r\\nabstract contract BlackList is Owned {\\r\\n    mapping(address => bool) public isBlackListed;\\r\\n\\r\\n    function addBlackList(address _evilUser) public onlyOwner {\\r\\n        isBlackListed[_evilUser] = true;\\r\\n        emit AddedBlackList(_evilUser);\\r\\n    }\\r\\n\\r\\n    function removeBlackList(address _clearedUser) public onlyOwner {\\r\\n        isBlackListed[_clearedUser] = false;\\r\\n        emit RemovedBlackList(_clearedUser);\\r\\n    }\\r\\n\\r\\n    event AddedBlackList(address _user);\\r\\n    event RemovedBlackList(address _user);\\r\\n\\r\\n    error InBlackListError(address user);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\nabstract contract ERC20 {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            METADATA STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    string public symbol;\\r\\n\\r\\n    uint8 public immutable decimals;\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                              ERC20 STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    uint256 public immutable totalSupply;\\r\\n\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _decimals;\\r\\n        totalSupply = _totalSupply;\\r\\n        unchecked {\\r\\n            balanceOf[msg.sender] += _totalSupply;\\r\\n        }\\r\\n\\r\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               ERC20 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\r\\n        allowance[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\r\\n        _transfer(msg.sender, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\\r\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\r\\n\\r\\n        if (allowed != type(uint256).max) {\\r\\n            allowance[from][msg.sender] = allowed - amount;\\r\\n        }\\r\\n\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\r\\n        balanceOf[from] -= amount;\\r\\n        // Cannot overflow because the sum of all user\\r\\n        // balances can't exceed the max uint256 value.\\r\\n        unchecked {\\r\\n            balanceOf[to] += amount;\\r\\n        }\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Uniswap/DexBaseUSDT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\naddress constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\naddress constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\naddress constant PinkLock02 = 0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE;\\n\\ncontract Distributor {\\n    constructor() {\\n        IERC20(USDT).approve(msg.sender, type(uint256).max);\\n    }\\n}\\n\\nabstract contract DexBaseUSDT {\\n    bool public inSwapAndLiquify;\\n    IUniswapV2Router constant uniswapV2Router = IUniswapV2Router(ROUTER);\\n    address public immutable uniswapV2Pair;\\n    Distributor public immutable distributor;\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    constructor() {\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), USDT);\\n        distributor = new Distributor();\\n    }\\n\\n    function _isAddLiquidity() internal view returns (bool isAdd) {\\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);\\n        (uint256 r0,,) = mainPair.getReserves();\\n        uint256 bal = IERC20(USDT).balanceOf(address(mainPair));\\n        isAdd = bal >= (r0 + 0.1 ether);\\n    }\\n\\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);\\n        (uint256 r0,,) = mainPair.getReserves();\\n        uint256 bal = IERC20(USDT).balanceOf(address(mainPair));\\n        isRemove = r0 > bal;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint256) external view returns (address pair);\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/Uniswap/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint amount0,\\n        uint amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"InBlackListError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedToFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allCoinHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backDistributor\",\"outputs\":[{\"internalType\":\"contract Distributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burngas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinHolderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract Distributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"dividendToBurnHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendToCoinHolderEff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"dividendToUsersLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeMultipleAccountsFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInCoinHolders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInShareholders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPFeefenhongTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPFeefenhongTimeCoinHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBurnDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCoinHolderAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnPeriod\",\"type\":\"uint256\"}],\"name\":\"setBurnPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyBackValue\",\"type\":\"uint256\"}],\"name\":\"setBuyBackValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorGasForLp\",\"type\":\"uint256\"}],\"name\":\"setDistributorGasForLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setMinDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burngas\",\"type\":\"uint256\"}],\"name\":\"setburngas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCoinHolderAmount\",\"type\":\"uint256\"}],\"name\":\"setisCoinHolderParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBurnDiv\",\"type\":\"uint256\"}],\"name\":\"setminBurnDiv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "QD", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}