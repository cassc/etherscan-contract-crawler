{"SourceCode": "// DxSale LP Locker Contract\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface decentralizedStorage {\r\n    function addNewLock(address _lpAddress, uint256 _locktime, address _lockContract, uint256 _tokenAmount, string memory _logo) external;\r\n\r\n    function extendLockerTime(uint256 _userLockerNumber, uint256 _newLockTime) external;\r\n\r\n    function transferLocker(address _newOwner, uint256 _userLockerNumber) external;\r\n\r\n    function unlockLocker(uint256 _userLockerNumber) external;\r\n\r\n    function changeLogo(string memory _newLogo, uint256 _userLockerNumber) external;\r\n\r\n    function getPersonalLockerCount(address _owner) external returns (uint256);\r\n\r\n    function getBurnContractAddress() external view returns (address);\r\n}\r\n\r\ncontract PersonalLPLocker is Ownable {\r\n\r\n    string public deployer = \"dx.app\";\r\n\r\n    uint256 public LockedAmount;\r\n\r\n    uint256 public personalLockerCount;\r\n    decentralizedStorage public storagePersonal;\r\n\r\n    uint256 public LockExpireTimestamp;\r\n    uint256 public LockerCreationTimestamp;\r\n\r\n    bool public feePaid;\r\n    uint256 public percFeeAmount;\r\n    uint256 public RewardsNativeClaimed;\r\n    mapping(address => uint256) public RewardsTokenClaimed;\r\n    IERC20 public PersonalLockerToken;\r\n\r\n\r\n    constructor (address _lockTokenAddress, uint256 _lockTimeEnd, uint256 _personalLockerCount, address _lockerStorage, uint256 _lockingAmount, bool _feeState, uint256 _feeAmount) {\r\n        require(_lockingAmount > 0,\"can't lock 0 Tokens\");\r\n        require(_lockTimeEnd > (block.timestamp + 600), \"Please lock longer than now\");\r\n\r\n        LockedAmount = _lockingAmount;\r\n\r\n        PersonalLockerToken = IERC20(_lockTokenAddress);\r\n\r\n        LockExpireTimestamp = _lockTimeEnd;\r\n        personalLockerCount = _personalLockerCount;\r\n        storagePersonal = decentralizedStorage(_lockerStorage);\r\n\r\n        LockerCreationTimestamp = block.timestamp;\r\n\r\n        feePaid = _feeState;\r\n        percFeeAmount = _feeAmount;\r\n\r\n        _transferOwnership(tx.origin);\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n    function changeLogo(string memory _logo) public onlyOwner {\r\n        storagePersonal.changeLogo(_logo, personalLockerCount);\r\n    }\r\n\r\n    function CheckLockedBalance() public view returns (uint256){\r\n        return PersonalLockerToken.balanceOf(address(this));\r\n    }\r\n\r\n    function ExtendPersonalLocker(uint256 _newLockTime) external onlyOwner {\r\n        require(LockExpireTimestamp < _newLockTime, \"You cant reduce locktime...\");\r\n        require(block.timestamp < LockExpireTimestamp, \"Your Lock Expired \");\r\n\r\n        LockExpireTimestamp = _newLockTime;\r\n        storagePersonal.extendLockerTime(LockExpireTimestamp, personalLockerCount);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public override onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n        storagePersonal.transferLocker(_newOwner, personalLockerCount);\r\n    }\r\n\r\n    function unlockTokensAfterTimestamp() external onlyOwner {\r\n        require(block.timestamp >= LockExpireTimestamp, \"Token is still Locked\");\r\n        require(feePaid, \"Please pay the fee first\");\r\n\r\n        PersonalLockerToken.transfer(owner(), PersonalLockerToken.balanceOf(address(this)));\r\n        storagePersonal.unlockLocker(personalLockerCount);\r\n    }\r\n\r\n    function payFee() external onlyOwner {\r\n        require(!feePaid, \"Fee is already paid\");\r\n\r\n        uint256 feeToPay = (PersonalLockerToken.balanceOf(address(this)) * percFeeAmount) / 1000;\r\n        PersonalLockerToken.transfer(storagePersonal.getBurnContractAddress(), feeToPay);\r\n        feePaid = true;\r\n    }\r\n\r\n    function unlockPercentageAfterTimestamp(uint256 _percentage) external onlyOwner {\r\n        require(block.timestamp >= LockExpireTimestamp, \"Token is still Locked\");\r\n        require(feePaid, \"Fee not paid yet\");\r\n        uint256 amountUnlock = (PersonalLockerToken.balanceOf(address(this)) * _percentage) / 100;\r\n        PersonalLockerToken.transfer(owner(), amountUnlock);\r\n    }\r\n    function WithdrawRewardNativeToken() external onlyOwner {\r\n        uint256 amountFee = (address(this).balance * percFeeAmount) / 100;\r\n        payable(storagePersonal.getBurnContractAddress()).transfer(amountFee);\r\n        uint256 amount = address(this).balance;\r\n        payable(owner()).transfer(amount);\r\n        RewardsNativeClaimed += amount;\r\n    }\r\n\r\n    function WithdrawTokensReward(address _token) external onlyOwner {\r\n        require(_token != address(PersonalLockerToken), \"You can't unlock the Tokens you locked with this function!\");\r\n\r\n        uint256 amountFee = (IERC20(_token).balanceOf(address(this))* percFeeAmount) / 100;\r\n        IERC20(_token).transfer(storagePersonal.getBurnContractAddress(), amountFee);\r\n\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(owner(), amount);\r\n        RewardsTokenClaimed[_token] += amount;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockTimeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_personalLockerCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lockerStorage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_feeState\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CheckLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockTime\",\"type\":\"uint256\"}],\"name\":\"ExtendPersonalLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LockExpireTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LockerCreationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PersonalLockerToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardsNativeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RewardsTokenClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawRewardNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"WithdrawTokensReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_logo\",\"type\":\"string\"}],\"name\":\"changeLogo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"personalLockerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storagePersonal\",\"outputs\":[{\"internalType\":\"contract decentralizedStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"unlockPercentageAfterTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokensAfterTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PersonalLPLocker", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c58a80cf11d1cbbae4fc1c2fa9244f517676ab3d0000000000000000000000000000000000000000000000000000000064e0e6100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fee2a3f4329e9a1828f46927bd424db2c16249850000000000000000000000000000000000000000000056b55f0c9bf36274a1a100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d0f9eea7fd06bb3ef1a38b469aab349e3ccb0348aa51bbb7e080a54a9194624"}