{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/MiningCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Incomeisland interface\\r\\n */\\r\\ninterface IIncomeisland {\\r\\n    /**\\r\\n     * @dev See {IERC1155-balanceOf}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function balanceOf(\\r\\n        address account,\\r\\n        uint256 id\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice set tansfer contract address\\r\\n     * @param _address tansfer contract address\\r\\n     */\\r\\n    function checkTransferPermission(\\r\\n        address _address\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice checking the nft owner about the unity asset.\\r\\n     * @param _nftType the nft type\\r\\n     */\\r\\n    function getNftType(\\r\\n        uint256 _nftType\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, string memory, string memory, uint256, uint256);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function isDisabled(uint256 _nftType) external view returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Utility interface\\r\\n */\\r\\ninterface IUtility {\\r\\n    /**\\r\\n     * @notice get number of income token vs wbnb\\r\\n     */\\r\\n    function getIncomeTokenFromBNB(\\r\\n        uint256 bnbNumber\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get number of income token vs wbnb\\r\\n     */\\r\\n    function getBnbTokenFromDollar(\\r\\n        uint256 dollarAmount\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get usd price from bnb\\r\\n     */\\r\\n    function getDollarFromBnb(\\r\\n        uint256 bnbAmount\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract MiningCenter is ERC1155Holder {\\r\\n    using Address for address;\\r\\n\\r\\n    /// @notice Information about the NFT as the property\\r\\n    struct NftHistory {\\r\\n        uint256 originUSDT;\\r\\n        uint256 earnedUSDT;\\r\\n        uint256 nftNum;\\r\\n        bool staked;\\r\\n    }\\r\\n\\r\\n    struct NFTStakedInfo {\\r\\n        address ownerAddress;\\r\\n        uint256 stakedTime;\\r\\n        uint256 nftNum;\\r\\n        uint256 nftType;\\r\\n        uint256 stakedType;\\r\\n    }\\r\\n\\r\\n    struct StakingType {\\r\\n        uint256 stakingTime;\\r\\n        uint256 stakingRateDays;\\r\\n    }\\r\\n\\r\\n    event debug(address owner, uint256 nftNum, uint256 nftType);\\r\\n\\r\\n    address private _ownerAddress;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // @notice ERC20 income token\\r\\n    IIncomeisland public incomeIsland;\\r\\n\\r\\n    // @notice utility contract interface\\r\\n    IUtility public utility;\\r\\n\\r\\n    IERC20 public incomeToken;\\r\\n\\r\\n    // @notice NftHistory\\r\\n    // owner address => nft type => No => nft num\\r\\n    mapping(address => mapping(uint256 => mapping(uint256 => NftHistory)))\\r\\n        public nftHistory;\\r\\n\\r\\n    // @notice NftHistoryLength\\r\\n    mapping(address => mapping(uint256 => uint256)) public nftHistoryLength;\\r\\n\\r\\n    // @notice stakingStatus\\r\\n    // owner No => NFTStakedInfo\\r\\n    mapping(address => mapping(uint256 => NFTStakedInfo)) public stakingStatus;\\r\\n\\r\\n    // @notice stakingStatus Length\\r\\n    // owner No => NFTStakedInfo\\r\\n    mapping(address => uint256) public stakingStatusLength;\\r\\n\\r\\n    // @notice Staking Type\\r\\n    // owner No => staking keep days\\r\\n    mapping(uint256 => StakingType) public stakingType;\\r\\n\\r\\n    mapping(address => uint256) public earnedHistory;\\r\\n\\r\\n    // @notice stakingTypeLength\\r\\n    uint256 public stakingTypeLength;\\r\\n\\r\\n    address public marketingWallet;\\r\\n\\r\\n    uint256 public marketingPros;\\r\\n\\r\\n    // Transfer NFT with fee.\\r\\n    address public transferNFTContract;\\r\\n\\r\\n    /**\\r\\n     * @notice add nftHistory variable.\\r\\n     * @param _owner the nft owner address\\r\\n     * @param _nftType the nft type\\r\\n     * @param _nftNum the nft unique number\\r\\n     * @param _mode 0: remove 1: add\\r\\n     */\\r\\n    function updateNFTHistory(\\r\\n        address _owner,\\r\\n        uint256 _nftType,\\r\\n        uint256 _nftNum,\\r\\n        uint16 _mode\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == address(incomeIsland) || msg.sender == owner(),\\r\\n            \\\"no permission\\\"\\r\\n        );\\r\\n        updateNFTHistoryIntern(_owner, _nftType, _nftNum, _mode);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice add nftHistory variable.\\r\\n     * @param _owner the nft owner address\\r\\n     * @param _nftType the nft type\\r\\n     * @param _nftNum the nft unique number\\r\\n     * @param _mode 0: remove 1: add\\r\\n     */\\r\\n    function updateNFTHistoryIntern(\\r\\n        address _owner,\\r\\n        uint256 _nftType,\\r\\n        uint256 _nftNum,\\r\\n        uint16 _mode\\r\\n    ) private {\\r\\n        if (_mode == 0) {\\r\\n            for (\\r\\n                uint256 i = getHistoryIndex(_owner, _nftType, _nftNum);\\r\\n                i < nftHistoryLength[_owner][_nftType] - 1;\\r\\n                i++\\r\\n            ) {\\r\\n                nftHistory[_owner][_nftType][i] = nftHistory[_owner][_nftType][\\r\\n                    i + 1\\r\\n                ];\\r\\n            }\\r\\n            nftHistory[_owner][_nftType][\\r\\n                nftHistoryLength[_owner][_nftType] - 1\\r\\n            ] = NftHistory(0, 0, 0, false);\\r\\n            nftHistoryLength[_owner][_nftType]--;\\r\\n        } else if (_mode == 1) {\\r\\n            (uint256 priceBNB, , , , ) = incomeIsland.getNftType(_nftType);\\r\\n            nftHistory[_owner][_nftType][\\r\\n                nftHistoryLength[_owner][_nftType]\\r\\n            ] = NftHistory(\\r\\n                priceBNB * utility.getDollarFromBnb(1),\\r\\n                0,\\r\\n                _nftNum,\\r\\n                false\\r\\n            );\\r\\n            nftHistoryLength[_owner][_nftType]++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update nftHistory variable.\\r\\n     * @param _owner the nft owner address\\r\\n     * @param _nftType the nft type\\r\\n     * @param _priceUSDT the nft bnb price\\r\\n     * @param _nftNum the nft unique number\\r\\n     * @param _mode 0: update 1: add\\r\\n     */\\r\\n    function manageNFTHistory(\\r\\n        address _owner,\\r\\n        uint256 _nftType,\\r\\n        uint256 _priceUSDT,\\r\\n        uint256 _earnedUSDT,\\r\\n        uint256 _nftNum,\\r\\n        bool _staked,\\r\\n        uint16 _mode\\r\\n    ) external onlyOwner {\\r\\n        manageNFTHistoryIntern(\\r\\n            _owner,\\r\\n            _nftType,\\r\\n            _priceUSDT,\\r\\n            _earnedUSDT,\\r\\n            _nftNum,\\r\\n            _staked,\\r\\n            _mode\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update nftHistory variable.\\r\\n     * @param _owner the nft owner address\\r\\n     * @param _nftType the nft type\\r\\n     * @param _priceUSDT the nft bnb price\\r\\n     * @param _nftNum the nft unique number\\r\\n     * @param _mode 0: update 1: add\\r\\n     */\\r\\n    function manageNFTHistoryIntern(\\r\\n        address _owner,\\r\\n        uint256 _nftType,\\r\\n        uint256 _priceUSDT,\\r\\n        uint256 _earnedUSDT,\\r\\n        uint256 _nftNum,\\r\\n        bool _staked,\\r\\n        uint16 _mode\\r\\n    ) private {\\r\\n        if (_mode == 0) {\\r\\n            uint256 i = getHistoryIndex(_owner, _nftType, _nftNum);\\r\\n            nftHistory[_owner][_nftType][i] = NftHistory(\\r\\n                _priceUSDT,\\r\\n                _earnedUSDT,\\r\\n                _nftNum,\\r\\n                _staked\\r\\n            );\\r\\n        } else if (_mode == 1) {\\r\\n            nftHistory[_owner][_nftType][\\r\\n                nftHistoryLength[_owner][_nftType]\\r\\n            ] = NftHistory(_priceUSDT, _earnedUSDT, _nftNum, false);\\r\\n            nftHistoryLength[_owner][_nftType]++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checking the nft owner about the unity asset.\\r\\n     * @param _nftType the nft type\\r\\n     */\\r\\n    function getHistoryIndex(\\r\\n        address _owner,\\r\\n        uint256 _nftType,\\r\\n        uint256 _nftNum\\r\\n    ) public view returns (uint256) {\\r\\n        for (uint256 i = 0; i < nftHistoryLength[_owner][_nftType]; i++) {\\r\\n            if (nftHistory[_owner][_nftType][i].nftNum == _nftNum) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return 9999;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checking the nft owner about the unity asset.\\r\\n     * @param _nftType the nft type\\r\\n     */\\r\\n    function getStakingIndex(\\r\\n        address _owner,\\r\\n        uint256 _nftType,\\r\\n        uint256 _nftNum\\r\\n    ) public view returns (uint256) {\\r\\n        for (uint256 i = 0; i < stakingStatusLength[_owner]; i++) {\\r\\n            if (\\r\\n                stakingStatus[_owner][i].nftNum == _nftNum &&\\r\\n                stakingStatus[_owner][i].nftType == _nftType &&\\r\\n                stakingStatus[_owner][i].ownerAddress == _owner\\r\\n            ) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return 9999;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update nftHistory variable.\\r\\n     * @param _stakedays staking keeping day\\r\\n     * @param _index the order number which will operate\\r\\n     * @param _mode 0: update 1: add 2: remove\\r\\n     */\\r\\n    function manageStakingType(\\r\\n        uint256 _stakedays,\\r\\n        uint256 _stakeratedays,\\r\\n        uint256 _index,\\r\\n        uint16 _mode\\r\\n    ) external onlyOwner {\\r\\n        if (_mode != 1) {\\r\\n            require(_index < stakingTypeLength, \\\"_index is not valid\\\");\\r\\n        }\\r\\n        if (_mode == 0) {\\r\\n            stakingType[_index].stakingTime = _stakedays;\\r\\n            stakingType[_index].stakingRateDays = _stakeratedays;\\r\\n        } else if (_mode == 1) {\\r\\n            stakingType[stakingTypeLength].stakingTime = _stakedays;\\r\\n            stakingType[stakingTypeLength++].stakingRateDays = _stakeratedays;\\r\\n        } else if (_mode == 2) {\\r\\n            for (uint256 i = _index; i < stakingTypeLength; i++) {\\r\\n                stakingType[i] = stakingType[i + 1];\\r\\n            }\\r\\n            stakingTypeLength--;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update stakingStatus variable.\\r\\n     * @param _stakedTime staked timestamp\\r\\n     * @param _index the order number which will operate\\r\\n     * @param _mode 0: update 1: add 2: remove\\r\\n     */\\r\\n    function manageStakingStatus(\\r\\n        address _owner,\\r\\n        uint256 _stakedTime,\\r\\n        uint256 _nftNum,\\r\\n        uint256 _nftType,\\r\\n        uint256 _stakedType,\\r\\n        uint256 _index,\\r\\n        uint16 _mode\\r\\n    ) external onlyOwner {\\r\\n        if (_mode != 1) {\\r\\n            require(\\r\\n                _index >= 0 && _index < stakingStatusLength[_owner],\\r\\n                \\\"_index is not valid\\\"\\r\\n            );\\r\\n        }\\r\\n        if (_mode == 0) {\\r\\n            stakingStatus[_owner][_index] = NFTStakedInfo(\\r\\n                _owner,\\r\\n                _stakedTime,\\r\\n                _nftNum,\\r\\n                _nftType,\\r\\n                _stakedType\\r\\n            );\\r\\n        } else if (_mode == 1) {\\r\\n            stakingStatus[_owner][\\r\\n                stakingStatusLength[_owner]++\\r\\n            ] = NFTStakedInfo(\\r\\n                _owner,\\r\\n                _stakedTime,\\r\\n                _nftNum,\\r\\n                _nftType,\\r\\n                _stakedType\\r\\n            );\\r\\n        } else if (_mode == 2) {\\r\\n            for (uint256 i = _index; i < stakingStatusLength[_owner]; i++) {\\r\\n                stakingStatus[_owner][i] = stakingStatus[_owner][i + 1];\\r\\n            }\\r\\n            stakingStatusLength[_owner]--;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Staking or Unstaking the properties.\\r\\n     * @param _stakingType staked timestamp\\r\\n     * @param _mode 0: staking 1: unstaking\\r\\n     */\\r\\n    function groupStakingUnStaking(\\r\\n        uint256 _stakingType,\\r\\n        uint256 _mode,\\r\\n        uint256 _note\\r\\n    ) external payable {\\r\\n        require(\\r\\n            msg.value >= utility.getBnbTokenFromDollar(2 * 10 ** 18),\\r\\n            \\\"not enough gas fee\\\"\\r\\n        );\\r\\n        payable(marketingWallet).transfer(msg.value);\\r\\n        for (uint256 nftType = 0; nftType < 6; nftType++) {\\r\\n            for (\\r\\n                uint256 i = 0;\\r\\n                i < nftHistoryLength[msg.sender][nftType];\\r\\n                i++\\r\\n            ) {\\r\\n                // Staking property\\r\\n                if (\\r\\n                    _mode == 0 &&\\r\\n                    nftHistory[msg.sender][nftType][i].staked == false\\r\\n                ) {\\r\\n                    if (!incomeIsland.isDisabled(nftType)) {\\r\\n                        stakingPropertyIntern(\\r\\n                            msg.sender,\\r\\n                            _stakingType,\\r\\n                            nftHistory[msg.sender][nftType][i].nftNum,\\r\\n                            nftType\\r\\n                        );\\r\\n                        incomeIsland.safeTransferFrom(\\r\\n                            msg.sender,\\r\\n                            address(this),\\r\\n                            nftType,\\r\\n                            1,\\r\\n                            \\\"\\\"\\r\\n                        );\\r\\n                    }\\r\\n                } else if (\\r\\n                    _mode == 1 &&\\r\\n                    nftHistory[msg.sender][nftType][i].staked == true\\r\\n                ) {\\r\\n                    unStakingPropertyIntern(\\r\\n                        msg.sender,\\r\\n                        nftHistory[msg.sender][nftType][i].nftNum,\\r\\n                        nftType,\\r\\n                        _note\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update nftHistory variable.\\r\\n     * @param _stakingType 0: 7 days 1: 30 days 2: 180 days\\r\\n     * @param _nftNum the property unique number\\r\\n     * @param _nftType the property type\\r\\n     */\\r\\n    function stakingProperty(\\r\\n        uint256 _stakingType,\\r\\n        uint256 _nftNum,\\r\\n        uint256 _nftType\\r\\n    ) external payable {\\r\\n        payable(marketingWallet).transfer(msg.value);\\r\\n\\r\\n        stakingPropertyIntern(msg.sender, _stakingType, _nftNum, _nftType);\\r\\n\\r\\n        incomeIsland.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _nftType,\\r\\n            1,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update nftHistory variable.\\r\\n     * @param _stakingType 0: 7 days 1: 30 days 2: 180 days\\r\\n     * @param _nftNum the property unique number\\r\\n     * @param _nftType the property type\\r\\n     */\\r\\n    function stakingPropertyIntern(\\r\\n        address _owner,\\r\\n        uint256 _stakingType,\\r\\n        uint256 _nftNum,\\r\\n        uint256 _nftType\\r\\n    ) private {\\r\\n        require(\\r\\n            incomeIsland.balanceOf(_owner, _nftType) > 0,\\r\\n            \\\"You have no nft.\\\"\\r\\n        );\\r\\n        uint256 index = getHistoryIndex(_owner, _nftType, _nftNum);\\r\\n        require(\\r\\n            nftHistory[_owner][_nftType][index].nftNum == _nftNum &&\\r\\n                nftHistory[_owner][_nftType][index].staked == false &&\\r\\n                stakingType[_stakingType].stakingTime != 0,\\r\\n            \\\"param err\\\"\\r\\n        );\\r\\n        manageNFTHistoryIntern(\\r\\n            _owner,\\r\\n            _nftType,\\r\\n            nftHistory[_owner][_nftType][index].originUSDT,\\r\\n            nftHistory[_owner][_nftType][index].earnedUSDT,\\r\\n            _nftNum,\\r\\n            true,\\r\\n            0\\r\\n        );\\r\\n\\r\\n        stakingStatus[_owner][stakingStatusLength[_owner]++] = NFTStakedInfo(\\r\\n            _owner,\\r\\n            block.timestamp,\\r\\n            _nftNum,\\r\\n            _nftType,\\r\\n            _stakingType\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferNFT(\\r\\n        address _to,\\r\\n        uint256 _nftType,\\r\\n        uint256 _nftNum\\r\\n    ) external {\\r\\n        require(_to != address(0), \\\"cann't burn\\\");\\r\\n        uint256 index = getHistoryIndex(msg.sender, _nftType, _nftNum);\\r\\n        NftHistory memory _nftHistory = nftHistory[msg.sender][_nftType][index];\\r\\n        require(\\r\\n            _nftHistory.nftNum == _nftNum && _nftHistory.staked == false,\\r\\n            \\\"param err\\\"\\r\\n        );\\r\\n\\r\\n        nftHistory[msg.sender][_nftType][index] = NftHistory(0, 0, 0, false);\\r\\n        nftHistoryLength[msg.sender][_nftType]--;\\r\\n        nftHistory[_to][_nftType][nftHistoryLength[_to][_nftType]] = NftHistory(\\r\\n            _nftHistory.originUSDT,\\r\\n            0,\\r\\n            _nftHistory.nftNum,\\r\\n            false\\r\\n        );\\r\\n        nftHistoryLength[_to][_nftType]++;\\r\\n\\r\\n        incomeIsland.safeTransferFrom(msg.sender, _to, _nftType, 1, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unstake the property.\\r\\n     * @param _nftNum the property unique number\\r\\n     * @param _nftType the property type\\r\\n     */\\r\\n    function unStakingProperty(\\r\\n        uint256 _nftNum,\\r\\n        uint256 _nftType,\\r\\n        uint256 _note\\r\\n    ) external payable {\\r\\n        unStakingPropertyIntern(msg.sender, _nftNum, _nftType, _note);\\r\\n        payable(marketingWallet).transfer(msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unstake the property.\\r\\n     * @param _nftNum the property unique number\\r\\n     * @param _nftType the property type\\r\\n     */\\r\\n    function unStakingPropertyByAdmin(\\r\\n        address _owner,\\r\\n        uint256 _nftNum,\\r\\n        uint256 _nftType,\\r\\n        uint256 _note\\r\\n    ) external onlyOwner {\\r\\n        unStakingPropertyIntern(_owner, _nftNum, _nftType, _note);\\r\\n    }\\r\\n\\r\\n    function getExpectedInStakingReward(\\r\\n        address _owner,\\r\\n        uint256 _nftNum,\\r\\n        uint256 _nftType,\\r\\n        uint256 _note\\r\\n    ) public view returns (uint256, uint256, uint256) {\\r\\n        uint256 index = getHistoryIndex(_owner, _nftType, _nftNum);\\r\\n        NftHistory memory _nftHistory = nftHistory[_owner][_nftType][index];\\r\\n        require(\\r\\n            _nftHistory.nftNum == _nftNum && _nftHistory.staked == true,\\r\\n            \\\"param err\\\"\\r\\n        );\\r\\n\\r\\n        uint256 stakingIndex = getStakingIndex(_owner, _nftType, _nftNum);\\r\\n        require(stakingIndex != 9999, \\\"There is no staking history\\\");\\r\\n\\r\\n        uint256 stakedType = stakingStatus[_owner][stakingIndex].stakedType;\\r\\n\\r\\n        uint256 different = (block.timestamp -\\r\\n            stakingStatus[_owner][stakingIndex].stakedTime) / 1 days;\\r\\n\\r\\n        uint256 rate = _nftHistory.originUSDT /\\r\\n            stakingType[stakedType].stakingRateDays;\\r\\n\\r\\n        uint256 _earnedUSDT = rate * different;\\r\\n        if (\\r\\n            _nftHistory.earnedUSDT <= _nftHistory.originUSDT &&\\r\\n            _nftHistory.originUSDT < _nftHistory.earnedUSDT + _earnedUSDT\\r\\n        ) {\\r\\n            _earnedUSDT =\\r\\n                (_earnedUSDT -\\r\\n                    _nftHistory.earnedUSDT +\\r\\n                    _nftHistory.originUSDT) /\\r\\n                2;\\r\\n        } else if (_nftHistory.originUSDT < _nftHistory.earnedUSDT) {\\r\\n            _earnedUSDT = 0;\\r\\n        }\\r\\n\\r\\n        uint256 ownerIncomeAmount = 0;\\r\\n        uint256 marketingIncomeAmount = 0;\\r\\n\\r\\n        if (different >= stakingType[stakedType].stakingTime) {\\r\\n            ownerIncomeAmount = utility.getIncomeTokenFromBNB(\\r\\n                utility.getBnbTokenFromDollar((_earnedUSDT * 11) / 10)\\r\\n            );\\r\\n        } else {\\r\\n            ownerIncomeAmount = utility.getIncomeTokenFromBNB(\\r\\n                utility.getBnbTokenFromDollar(\\r\\n                    (((_earnedUSDT * 11) / 10) * (100 - marketingPros)) / 100\\r\\n                )\\r\\n            );\\r\\n\\r\\n            marketingIncomeAmount = utility.getIncomeTokenFromBNB(\\r\\n                utility.getBnbTokenFromDollar(\\r\\n                    (((_earnedUSDT * 11) / 10) * marketingPros) / 100\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (_nftNum == 35 && _nftType == 2) {\\r\\n            ownerIncomeAmount = ownerIncomeAmount * _note;\\r\\n        }\\r\\n        return (\\r\\n            _earnedUSDT * 10,\\r\\n            ownerIncomeAmount / 15,\\r\\n            marketingIncomeAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unstake the property.\\r\\n     * @param _nftNum the property unique number\\r\\n     * @param _nftType the property type\\r\\n     */\\r\\n    function unStakingPropertyIntern(\\r\\n        address _owner,\\r\\n        uint256 _nftNum,\\r\\n        uint256 _nftType,\\r\\n        uint256 _note\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 _earnedUSDT,\\r\\n            uint256 _ownerIncomeAmount,\\r\\n            uint256 _marketingIncomeAmount\\r\\n        ) = getExpectedInStakingReward(_owner, _nftNum, _nftType, _note);\\r\\n\\r\\n        if (_ownerIncomeAmount != 0) {\\r\\n            incomeToken.transfer(_owner, _ownerIncomeAmount);\\r\\n            earnedHistory[_owner] = earnedHistory[_owner] + _ownerIncomeAmount;\\r\\n        }\\r\\n\\r\\n        if (_marketingIncomeAmount != 0) {\\r\\n            incomeToken.transfer(marketingWallet, _marketingIncomeAmount);\\r\\n        }\\r\\n\\r\\n        incomeIsland.safeTransferFrom(address(this), _owner, _nftType, 1, \\\"\\\");\\r\\n\\r\\n        uint256 index = getHistoryIndex(_owner, _nftType, _nftNum);\\r\\n        nftHistory[_owner][_nftType][index] = NftHistory(\\r\\n            nftHistory[_owner][_nftType][index].originUSDT,\\r\\n            _nftType == 2 && _nftNum == 35\\r\\n                ? 0\\r\\n                : nftHistory[_owner][_nftType][index].earnedUSDT + _earnedUSDT,\\r\\n            nftHistory[_owner][_nftType][index].nftNum,\\r\\n            false\\r\\n        );\\r\\n\\r\\n        for (\\r\\n            uint256 i = getStakingIndex(_owner, _nftType, _nftNum);\\r\\n            i < stakingStatusLength[_owner];\\r\\n            i++\\r\\n        ) {\\r\\n            stakingStatus[_owner][i] = stakingStatus[_owner][i + 1];\\r\\n        }\\r\\n        stakingStatusLength[_owner]--;\\r\\n    }\\r\\n\\r\\n    function getRemainTimeBySeconds(\\r\\n        address _owner,\\r\\n        uint256 _nftType,\\r\\n        uint256 _nftNum\\r\\n    ) public view returns (uint256, uint256, uint256) {\\r\\n        uint256 stakingIndex = getStakingIndex(_owner, _nftType, _nftNum);\\r\\n        require(stakingIndex != 9999, \\\"There is no staking history\\\");\\r\\n        if (\\r\\n            (stakingStatus[_owner][stakingIndex].stakedTime +\\r\\n                1 days *\\r\\n                stakingType[stakingStatus[_owner][stakingIndex].stakedType]\\r\\n                    .stakingTime >=\\r\\n                block.timestamp)\\r\\n        ) {\\r\\n            // The time didn't gone.\\r\\n            return (\\r\\n                ((block.timestamp -\\r\\n                    stakingStatus[_owner][stakingIndex].stakedTime) /\\r\\n                    1 seconds), // gone time\\r\\n                ((stakingStatus[_owner][stakingIndex].stakedTime +\\r\\n                    1 days *\\r\\n                    stakingType[stakingStatus[_owner][stakingIndex].stakedType]\\r\\n                        .stakingTime -\\r\\n                    block.timestamp) / 1 seconds), // the remain time which has to spend.\\r\\n                1\\r\\n            );\\r\\n        } else {\\r\\n            return (\\r\\n                ((block.timestamp -\\r\\n                    stakingStatus[_owner][stakingIndex].stakedTime) /\\r\\n                    1 seconds),\\r\\n                ((block.timestamp -\\r\\n                    stakingStatus[_owner][stakingIndex].stakedTime -\\r\\n                    1 days *\\r\\n                    stakingType[stakingStatus[_owner][stakingIndex].stakedType]\\r\\n                        .stakingTime) / 1 seconds),\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set Metadata\\r\\n     * @param _incomeIsland IIncomeisland address\\r\\n     * @param _incomeToken IIncome token address\\r\\n     * @param _utility utility address\\r\\n     * @param _marketingWallet marketing address\\r\\n     * @param _marketingPros marketing percent\\r\\n     * @param _transferNFTContract ransfer nft contract address\\r\\n     */\\r\\n    function setMetadata(\\r\\n        IIncomeisland _incomeIsland,\\r\\n        IERC20 _incomeToken,\\r\\n        IUtility _utility,\\r\\n        address _marketingWallet,\\r\\n        uint256 _marketingPros,\\r\\n        address _transferNFTContract\\r\\n    ) external onlyOwner {\\r\\n        incomeIsland = _incomeIsland;\\r\\n        incomeToken = _incomeToken;\\r\\n        utility = _utility;\\r\\n        marketingWallet = _marketingWallet;\\r\\n        marketingPros = _marketingPros;\\r\\n        transferNFTContract = _transferNFTContract;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _ownerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        _ownerAddress = newOwner;\\r\\n    }\\r\\n\\r\\n    // function transferNFTFromContract(uint256 _type, address _to)\\r\\n    //     external\\r\\n    //     onlyOwner\\r\\n    // {\\r\\n    //     incomeIsland.safeTransferFrom(address(this), _to, _type, 1, \\\"\\\");\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @notice transfer NFT to other user. The config also transfer.\\r\\n     * @param _from nft owner address\\r\\n     * @param _to nft receiver address\\r\\n     * @param _type nft type\\r\\n     */\\r\\n    function transferNFTByUser(\\r\\n        address _from,\\r\\n        uint256 _type,\\r\\n        address _to\\r\\n    ) external {\\r\\n        require(msg.sender == transferNFTContract, \\\"no permission\\\");\\r\\n        incomeIsland.safeTransferFrom(_from, _to, _type, 1, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice transfer NFT to other user. The config also transfer.\\r\\n     * @param _from nft owner address\\r\\n     * @param _to nft receiver address\\r\\n     * @param _type nft type\\r\\n     * @param _nftId nft id\\r\\n     */\\r\\n    function updateNFTHistoryExternal(\\r\\n        address _from,\\r\\n        uint256 _type,\\r\\n        uint256 _nftId,\\r\\n        address _to\\r\\n    ) external {\\r\\n        require(msg.sender == transferNFTContract, \\\"no permission\\\");\\r\\n        updateNFTHistoryIntern(_from, _type, _nftId, 0);\\r\\n        updateNFTHistoryIntern(_to, _type, _nftId, 1);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"}],\"name\":\"debug\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnedHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_note\",\"type\":\"uint256\"}],\"name\":\"getExpectedInStakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftNum\",\"type\":\"uint256\"}],\"name\":\"getHistoryIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftNum\",\"type\":\"uint256\"}],\"name\":\"getRemainTimeBySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftNum\",\"type\":\"uint256\"}],\"name\":\"getStakingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_note\",\"type\":\"uint256\"}],\"name\":\"groupStakingUnStaking\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeIsland\",\"outputs\":[{\"internalType\":\"contract IIncomeisland\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earnedUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_staked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_mode\",\"type\":\"uint16\"}],\"name\":\"manageNFTHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_mode\",\"type\":\"uint16\"}],\"name\":\"manageStakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakedays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeratedays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_mode\",\"type\":\"uint16\"}],\"name\":\"manageStakingType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingPros\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"originUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIncomeisland\",\"name\":\"_incomeIsland\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_incomeToken\",\"type\":\"address\"},{\"internalType\":\"contract IUtility\",\"name\":\"_utility\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketingPros\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_transferNFTContract\",\"type\":\"address\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"}],\"name\":\"stakingProperty\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingStatus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingStatusLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRateDays\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTypeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftNum\",\"type\":\"uint256\"}],\"name\":\"transferNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferNFTByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferNFTContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_note\",\"type\":\"uint256\"}],\"name\":\"unStakingProperty\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_note\",\"type\":\"uint256\"}],\"name\":\"unStakingPropertyByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftNum\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_mode\",\"type\":\"uint16\"}],\"name\":\"updateNFTHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"updateNFTHistoryExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utility\",\"outputs\":[{\"internalType\":\"contract IUtility\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MiningCenter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}