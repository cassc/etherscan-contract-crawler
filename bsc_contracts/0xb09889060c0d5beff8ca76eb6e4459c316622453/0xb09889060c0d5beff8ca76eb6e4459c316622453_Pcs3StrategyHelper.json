{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/lbf/pcs3/Pcs3StrategyHelperLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"./../../../interfaces/ILogicContract.sol\\\";\\r\\nimport \\\"./../../../interfaces/IPancakeV3.sol\\\";\\r\\nimport \\\"./../../../libraries/TickMath.sol\\\";\\r\\nimport \\\"./../../../libraries/SqrtPrice.sol\\\";\\r\\nimport \\\"../LbfStrategyHelperLib.sol\\\";\\r\\n\\r\\nlibrary Pcs3StrategyHelper {\\r\\n    uint256 private constant BASE = 10**18;\\r\\n    uint256 private constant Q128 = 0x100000000000000000000000000000000;\\r\\n\\r\\n    function calcNewPoolTicks(\\r\\n        address pool,\\r\\n        int24 minPriceTickDiff,\\r\\n        int24 maxPriceTickDiff\\r\\n    ) public view returns (int24 tickLower, int24 tickUpper) {\\r\\n        require(minPriceTickDiff != 0, \\\"F21\\\");\\r\\n        require(maxPriceTickDiff != 0, \\\"F21\\\");\\r\\n\\r\\n        (, int24 currentTick, , , , , ) = IPancakeV3Pool(pool).slot0();\\r\\n        int24 tickSpacing = IPancakeV3Pool(pool).tickSpacing();\\r\\n\\r\\n        (tickLower, tickUpper) = _calcTicksForPriceRange(\\r\\n            currentTick,\\r\\n            tickSpacing,\\r\\n            minPriceTickDiff,\\r\\n            maxPriceTickDiff\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function calcChangeAmount(\\r\\n        INonfungiblePositionManager nftPositionManager,\\r\\n        address logic,\\r\\n        CalcChangeAmountParams memory params,\\r\\n        int24 minPriceTickDiff,\\r\\n        int24 maxPriceTickDiff\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1,\\r\\n            int24 tickLower,\\r\\n            int24 tickUpper\\r\\n        )\\r\\n    {\\r\\n        // Get tick\\r\\n        if (params.tokenId == 0) {\\r\\n            // If there is no pool yet\\r\\n            (tickLower, tickUpper) = calcNewPoolTicks(\\r\\n                params.pool,\\r\\n                minPriceTickDiff,\\r\\n                maxPriceTickDiff\\r\\n            );\\r\\n        } else {\\r\\n            // If pool is exists\\r\\n            (, , , , , tickLower, tickUpper, , , , , ) = nftPositionManager\\r\\n                .positions(params.tokenId);\\r\\n        }\\r\\n\\r\\n        (uint160 sqrtPriceX96, , , , , , ) = IPancakeV3Pool(params.pool)\\r\\n            .slot0();\\r\\n        uint160 sqrtPriceX96Min = TickMath.getSqrtRatioAtTick(tickLower);\\r\\n        uint160 sqrtPriceX96Max = TickMath.getSqrtRatioAtTick(tickUpper);\\r\\n\\r\\n        if (params.token0Price == 0) {\\r\\n            params.token0Price = ILendingLogic(logic).getUnderlyingPrice(\\r\\n                ILendingLogic(logic).getXToken(\\r\\n                    IPancakeV3Pool(params.pool).token0()\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (params.token1Price == 0) {\\r\\n            params.token1Price = ILendingLogic(logic).getUnderlyingPrice(\\r\\n                ILendingLogic(logic).getXToken(\\r\\n                    IPancakeV3Pool(params.pool).token1()\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        liquidity = uint128(\\r\\n            (params.amountUsd * BASE) /\\r\\n                ((params.token1Price *\\r\\n                    SqrtPriceLib.absSub(sqrtPriceX96, sqrtPriceX96Min)) /\\r\\n                    2**96 +\\r\\n                    ((((uint256)(\\r\\n                        SqrtPriceLib.absSub(sqrtPriceX96Max, sqrtPriceX96)\\r\\n                    ) * 2**96) / sqrtPriceX96Max) * params.token0Price) /\\r\\n                    sqrtPriceX96)\\r\\n        );\\r\\n\\r\\n        amount0 = SqrtPriceLib.calcAmount0(\\r\\n            sqrtPriceX96Max,\\r\\n            sqrtPriceX96,\\r\\n            liquidity\\r\\n        );\\r\\n        amount1 = SqrtPriceLib.calcAmount1(\\r\\n            sqrtPriceX96Min,\\r\\n            sqrtPriceX96,\\r\\n            liquidity\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getAmountsByPosition(\\r\\n        INonfungiblePositionManager nftPositionManager,\\r\\n        uint256 _tokenId,\\r\\n        address _pool\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amount0,\\r\\n            uint256 amount1,\\r\\n            uint128 liquidity\\r\\n        )\\r\\n    {\\r\\n        if (_tokenId == 0) return (0, 0, 0);\\r\\n\\r\\n        (\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n            int24 tickLower,\\r\\n            int24 tickUpper,\\r\\n            uint128 _liquidity,\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = nftPositionManager.positions(_tokenId);\\r\\n\\r\\n        liquidity = _liquidity;\\r\\n\\r\\n        (uint160 sqrtPriceX96, , , , , , ) = IPancakeV3Pool(_pool).slot0();\\r\\n\\r\\n        (amount0, amount1) = _calcAmountsByPosition(\\r\\n            tickLower,\\r\\n            tickUpper,\\r\\n            liquidity,\\r\\n            sqrtPriceX96\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function calcFeeAmountsByPosition(\\r\\n        INonfungiblePositionManager nftPositionManager,\\r\\n        uint256 _tokenId,\\r\\n        address _pool\\r\\n    ) public view returns (uint256 fee0, uint256 fee1) {\\r\\n        if (_tokenId == 0) return (0, 0);\\r\\n\\r\\n        (\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n            int24 tickLower,\\r\\n            int24 tickUpper,\\r\\n            uint128 liquidity,\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            ,\\r\\n\\r\\n        ) = nftPositionManager.positions(_tokenId);\\r\\n\\r\\n        (, int24 tickCurrent, , , , , ) = IPancakeV3Pool(_pool).slot0();\\r\\n        uint256 feeGrowthGlobal0X128 = IPancakeV3Pool(_pool)\\r\\n            .feeGrowthGlobal0X128();\\r\\n        uint256 feeGrowthGlobal1X128 = IPancakeV3Pool(_pool)\\r\\n            .feeGrowthGlobal1X128();\\r\\n\\r\\n        (\\r\\n            uint256 feeGrowthInside0X128,\\r\\n            uint256 feeGrowthInside1X128\\r\\n        ) = _getFeeGrowthInside(\\r\\n                _pool,\\r\\n                tickLower,\\r\\n                tickUpper,\\r\\n                tickCurrent,\\r\\n                feeGrowthGlobal0X128,\\r\\n                feeGrowthGlobal1X128\\r\\n            );\\r\\n\\r\\n        unchecked {\\r\\n            fee0 = uint128(\\r\\n                Math.mulDiv(\\r\\n                    feeGrowthInside0X128 - feeGrowthInside0LastX128,\\r\\n                    liquidity,\\r\\n                    Q128\\r\\n                )\\r\\n            );\\r\\n            fee1 = uint128(\\r\\n                Math.mulDiv(\\r\\n                    feeGrowthInside1X128 - feeGrowthInside1LastX128,\\r\\n                    liquidity,\\r\\n                    Q128\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkRebalancePriceRangeForPosition(\\r\\n        INonfungiblePositionManager nftPositionManager,\\r\\n        uint256 tokenId,\\r\\n        address pool,\\r\\n        uint160 sqrtPriceThreshold\\r\\n    ) public view returns (bool) {\\r\\n        (\\r\\n            int24 tickCurrent,\\r\\n            int24 tickLower,\\r\\n            int24 tickUpper,\\r\\n            ,\\r\\n\\r\\n        ) = _getTickInfo(nftPositionManager, tokenId, pool);\\r\\n\\r\\n        if (tickCurrent < tickLower || tickCurrent > tickUpper) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        int24 tickInitial = tickLower + (tickUpper - tickLower) / 2;\\r\\n\\r\\n        uint160 sqrtPriceDiff;\\r\\n\\r\\n        if (tickInitial > tickCurrent) {\\r\\n            sqrtPriceDiff = TickMath.getSqrtRatioAtTick(\\r\\n                tickInitial - tickCurrent\\r\\n            );\\r\\n        } else {\\r\\n            sqrtPriceDiff = TickMath.getSqrtRatioAtTick(\\r\\n                tickCurrent - tickInitial\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return sqrtPriceDiff > sqrtPriceThreshold;\\r\\n    }\\r\\n\\r\\n    function _getTickInfo(\\r\\n        INonfungiblePositionManager nftPositionManager,\\r\\n        uint256 _tokenId,\\r\\n        address _pool\\r\\n    )\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            int24 tickCurrent,\\r\\n            int24 tickLower,\\r\\n            int24 tickUpper,\\r\\n            int24 tickSpacing,\\r\\n            uint160 sqrtPriceX96\\r\\n        )\\r\\n    {\\r\\n        (sqrtPriceX96, tickCurrent, , , , , ) = IPancakeV3Pool(_pool).slot0();\\r\\n        tickSpacing = IPancakeV3Pool(_pool).tickSpacing();\\r\\n\\r\\n        if (_tokenId != 0)\\r\\n            (, , , , , tickLower, tickUpper, , , , , ) = nftPositionManager\\r\\n                .positions(_tokenId);\\r\\n    }\\r\\n\\r\\n    function _calcAmountsByPosition(\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 liquidity,\\r\\n        uint160 sqrtPriceX96\\r\\n    ) private pure returns (uint256 amount0, uint256 amount1) {\\r\\n        uint160 sqrtPriceX96Min = TickMath.getSqrtRatioAtTick(tickLower);\\r\\n        uint160 sqrtPriceX96Max = TickMath.getSqrtRatioAtTick(tickUpper);\\r\\n\\r\\n        if (sqrtPriceX96 <= sqrtPriceX96Min) {\\r\\n            amount0 = SqrtPriceLib.calcAmount0(\\r\\n                sqrtPriceX96Min,\\r\\n                sqrtPriceX96Max,\\r\\n                liquidity\\r\\n            );\\r\\n        } else if (sqrtPriceX96 >= sqrtPriceX96Max) {\\r\\n            amount1 = SqrtPriceLib.calcAmount1(\\r\\n                sqrtPriceX96Min,\\r\\n                sqrtPriceX96Max,\\r\\n                liquidity\\r\\n            );\\r\\n        } else {\\r\\n            amount0 = SqrtPriceLib.calcAmount0(\\r\\n                sqrtPriceX96,\\r\\n                sqrtPriceX96Max,\\r\\n                liquidity\\r\\n            );\\r\\n            amount1 = SqrtPriceLib.calcAmount1(\\r\\n                sqrtPriceX96Min,\\r\\n                sqrtPriceX96,\\r\\n                liquidity\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calcTicksForPriceRange(\\r\\n        int24 _currentTick,\\r\\n        int24 _tickSpacing,\\r\\n        int24 _tickLowerDiff,\\r\\n        int24 _tickUpperDiff\\r\\n    ) private pure returns (int24 tickLower, int24 tickUpper) {\\r\\n        tickLower =\\r\\n            ((_currentTick + _tickLowerDiff) / _tickSpacing) *\\r\\n            _tickSpacing;\\r\\n        tickUpper =\\r\\n            ((_currentTick + _tickUpperDiff) / _tickSpacing) *\\r\\n            _tickSpacing;\\r\\n\\r\\n        if (tickLower > _currentTick) {\\r\\n            tickLower -= _tickSpacing;\\r\\n            tickUpper -= _tickSpacing;\\r\\n        } else if (tickUpper < _currentTick) {\\r\\n            tickLower += _tickSpacing;\\r\\n            tickUpper += _tickSpacing;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/Tick.sol#L60C5-L95C6\\r\\n    function _getFeeGrowthInside(\\r\\n        address pool,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        int24 tickCurrent,\\r\\n        uint256 feeGrowthGlobal0X128,\\r\\n        uint256 feeGrowthGlobal1X128\\r\\n    )\\r\\n        private\\r\\n        view\\r\\n        returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128)\\r\\n    {\\r\\n        (\\r\\n            ,\\r\\n            ,\\r\\n            uint256 tickLowerFeeGrowthOutside0X128,\\r\\n            uint256 tickLowerFeeGrowthOutside1X128,\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = IPancakeV3Pool(pool).ticks(tickLower);\\r\\n        (\\r\\n            ,\\r\\n            ,\\r\\n            uint256 tickUpperFeeGrowthOutside0X128,\\r\\n            uint256 tickUpperFeeGrowthOutside1X128,\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = IPancakeV3Pool(pool).ticks(tickUpper);\\r\\n\\r\\n        // calculate fee growth below\\r\\n        uint256 feeGrowthBelow0X128;\\r\\n        uint256 feeGrowthBelow1X128;\\r\\n        if (tickCurrent >= tickLower) {\\r\\n            feeGrowthBelow0X128 = tickLowerFeeGrowthOutside0X128;\\r\\n            feeGrowthBelow1X128 = tickLowerFeeGrowthOutside1X128;\\r\\n        } else {\\r\\n            feeGrowthBelow0X128 =\\r\\n                feeGrowthGlobal0X128 -\\r\\n                tickLowerFeeGrowthOutside0X128;\\r\\n            feeGrowthBelow1X128 =\\r\\n                feeGrowthGlobal1X128 -\\r\\n                tickLowerFeeGrowthOutside1X128;\\r\\n        }\\r\\n\\r\\n        // calculate fee growth above\\r\\n        uint256 feeGrowthAbove0X128;\\r\\n        uint256 feeGrowthAbove1X128;\\r\\n        if (tickCurrent < tickUpper) {\\r\\n            feeGrowthAbove0X128 = tickUpperFeeGrowthOutside0X128;\\r\\n            feeGrowthAbove1X128 = tickUpperFeeGrowthOutside1X128;\\r\\n        } else {\\r\\n            feeGrowthAbove0X128 =\\r\\n                feeGrowthGlobal0X128 -\\r\\n                tickUpperFeeGrowthOutside0X128;\\r\\n            feeGrowthAbove1X128 =\\r\\n                feeGrowthGlobal1X128 -\\r\\n                tickUpperFeeGrowthOutside1X128;\\r\\n        }\\r\\n\\r\\n        // The origin code requires solidity <0.8.0. Such versions allow overflows.\\r\\n        // And overflows are ok here by design.\\r\\n        unchecked {\\r\\n            feeGrowthInside0X128 =\\r\\n                feeGrowthGlobal0X128 -\\r\\n                feeGrowthBelow0X128 -\\r\\n                feeGrowthAbove0X128;\\r\\n            feeGrowthInside1X128 =\\r\\n                feeGrowthGlobal1X128 -\\r\\n                feeGrowthBelow1X128 -\\r\\n                feeGrowthAbove1X128;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILogicContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./IPancakeV3.sol\\\";\\r\\n\\r\\ninterface ILogicContract {\\r\\n    function addXTokens(\\r\\n        address token,\\r\\n        address xToken,\\r\\n        uint8 leadingTokenType\\r\\n    ) external;\\r\\n\\r\\n    function approveTokenForSwap(address token) external;\\r\\n\\r\\n    function claim(address[] calldata xTokens, uint8 leadingTokenType) external;\\r\\n\\r\\n    function mint(address xToken, uint256 mintAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function borrow(\\r\\n        address xToken,\\r\\n        uint256 borrowAmount,\\r\\n        uint8 leadingTokenType\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function repayBorrow(address xToken, uint256 repayAmount) external;\\r\\n\\r\\n    function redeemUnderlying(address xToken, uint256 redeemAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        address swap,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        address swap,\\r\\n        uint256 amountETH,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        address swap,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        address swap,\\r\\n        uint256 amountETH,\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address swap,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address swap,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address swap,\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountETHDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address swap,\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function addEarnToStorage(uint256 amount) external;\\r\\n\\r\\n    function enterMarkets(address[] calldata xTokens, uint8 leadingTokenType)\\r\\n        external\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function returnTokenToStorage(uint256 amount, address token) external;\\r\\n\\r\\n    function takeTokenFromStorage(uint256 amount, address token) external;\\r\\n\\r\\n    function returnETHToMultiLogicProxy(uint256 amount) external;\\r\\n\\r\\n    function deposit(\\r\\n        address swapMaster,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function withdraw(\\r\\n        address swapMaster,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function returnToken(uint256 amount, address token) external; // for StorageV2 only\\r\\n}\\r\\n\\r\\n/************* New Architecture *************/\\r\\ninterface ISwapLogic {\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        bool isExactInput\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        bool isExactInput\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface ILogic is ISwapLogic {\\r\\n    function addEarnToStorage(uint256 amount) external;\\r\\n\\r\\n    function returnTokenToStorage(uint256 amount, address token) external;\\r\\n\\r\\n    function takeTokenFromStorage(uint256 amount, address token) external;\\r\\n\\r\\n    function returnETHToMultiLogicProxy(uint256 amount) external;\\r\\n\\r\\n    function multiLogicProxy() external view returns (address);\\r\\n\\r\\n    function approveTokenForSwap(address _swap, address token) external;\\r\\n}\\r\\n\\r\\ninterface ILendingLogic is ILogic {\\r\\n    function isXTokenUsed(address xToken) external view returns (bool);\\r\\n\\r\\n    function addXTokens(address token, address xToken) external;\\r\\n\\r\\n    function comptroller() external view returns (address);\\r\\n\\r\\n    function getAllMarkets() external view returns (address[] memory);\\r\\n\\r\\n    function checkEnteredMarket(address xToken) external view returns (bool);\\r\\n\\r\\n    function getUnderlyingPrice(address xToken) external view returns (uint256);\\r\\n\\r\\n    function getUnderlying(address xToken) external view returns (address);\\r\\n\\r\\n    function getXToken(address token) external view returns (address);\\r\\n\\r\\n    function getCollateralFactor(address xToken)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function rewardToken() external view returns (address);\\r\\n\\r\\n    function enterMarkets(address[] calldata xTokens)\\r\\n        external\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function claim() external;\\r\\n\\r\\n    function mint(address xToken, uint256 mintAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function borrow(address xToken, uint256 borrowAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function repayBorrow(address xToken, uint256 repayAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function redeemUnderlying(address xToken, uint256 redeemAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function redeem(address xToken, uint256 redeemTokenAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function accrueInterest(address xToken) external;\\r\\n}\\r\\n\\r\\ninterface IFarmingLogic is ILogic {\\r\\n    function addLiquidity(\\r\\n        address swap,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address swap,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function farmingDeposit(\\r\\n        address swapMaster,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function farmingWithdraw(\\r\\n        address swapMaster,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n}\\r\\n\\r\\nstruct CalcChangeAmountParams {\\r\\n    uint256 amountUsd;\\r\\n    address pool;\\r\\n    uint256 token0Price;\\r\\n    uint256 token1Price;\\r\\n    uint24 minPricePercentage;\\r\\n    uint24 maxPricePercentage;\\r\\n    uint256 tokenId;\\r\\n}\\r\\n\\r\\nstruct AddLiquidityParams {\\r\\n    address pool;\\r\\n    uint256 amount0;\\r\\n    uint256 amount1;\\r\\n    int24 tickLower;\\r\\n    int24 tickUpper;\\r\\n    uint256 tokenId;\\r\\n    uint24 minPricePercentage;\\r\\n    uint24 maxPricePercentage;\\r\\n}\\r\\n\\r\\nstruct WithdrawAndRemoveParams {\\r\\n    uint256 tokenId;\\r\\n    address pool;\\r\\n    uint128 liquidity;\\r\\n    uint256 amount0;\\r\\n    uint256 amount1;\\r\\n    bool shouldBurn;\\r\\n}\\r\\n\\r\\ninterface IFarmingV3Logic {\\r\\n    function getAmountsByPosition(uint256 _tokenId, address _pool)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amount0,\\r\\n            uint256 amount1,\\r\\n            uint128 liquidity\\r\\n        );\\r\\n\\r\\n    function calcFeeAmountsByPosition(uint256 _tokenId, address pool)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 fee0, uint256 fee1);\\r\\n\\r\\n    function checkRebalancePriceRangeForPosition(\\r\\n        uint256 tokenId,\\r\\n        address pool,\\r\\n        uint160 sqrtPriceThreshold\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function getTokensByPool(address _pool)\\r\\n        external\\r\\n        view\\r\\n        returns (address token0, address token1);\\r\\n\\r\\n    function calcChangeAmount(CalcChangeAmountParams memory params)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1,\\r\\n            int24 tickLower,\\r\\n            int24 tickUpper\\r\\n        );\\r\\n\\r\\n    function calcNewPoolTicks(\\r\\n        address pool,\\r\\n        uint24 minPricePercentage,\\r\\n        uint24 maxPricePercentage\\r\\n    ) external view returns (int24 tickLower, int24 tickUpper);\\r\\n\\r\\n    function addLiquidity(AddLiquidityParams memory params)\\r\\n        external\\r\\n        returns (\\r\\n            uint256 tokenId,\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(WithdrawAndRemoveParams memory params)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function addToFarming(uint256 _tokenId, address pool) external;\\r\\n\\r\\n    function removeFromFarming(\\r\\n        uint256 tokenId,\\r\\n        address pool,\\r\\n        uint256 liquidity\\r\\n    ) external;\\r\\n\\r\\n    function withdrawAndRemove(WithdrawAndRemoveParams memory params)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function claimFarmingRewards(uint256 _tokenId, address pool)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function farmingRewardsToken() external view returns (address);\\r\\n\\r\\n    function getRewardsAmount(uint256 _tokenId, address pool)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function collectFees(uint256 _tokenId, address _pool)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function WETH() external view returns (IWETH);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address _fromAsset,\\r\\n        address _toAsset,\\r\\n        uint24 fee\\r\\n    ) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Router {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(ExactInputSingleParams memory params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(ExactInputParams calldata params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(ExactOutputSingleParams memory params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(ExactOutputParams calldata params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ninterface IPancakeV3MasterChef {\\r\\n    function CAKE() external view returns (address);\\r\\n\\r\\n    function pendingCake(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 reward);\\r\\n\\r\\n    function harvest(uint256 _tokenId, address _to)\\r\\n        external\\r\\n        returns (uint256 reward);\\r\\n\\r\\n    function withdraw(uint256 _tokenId, address _to)\\r\\n        external\\r\\n        returns (uint256 reward);\\r\\n\\r\\n    function increaseLiquidity(\\r\\n        INonfungiblePositionManager.IncreaseLiquidityParams memory params\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n\\r\\n    function decreaseLiquidity(\\r\\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function collect(INonfungiblePositionManager.CollectParams memory params)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool {\\r\\n    // Has a bit different signature than the original IUniswapV3Pool\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\r\\n\\r\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\r\\n\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    function ticks(int24 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint128 liquidityGross,\\r\\n            int128 liquidityNet,\\r\\n            uint256 feeGrowthOutside0X128,\\r\\n            uint256 feeGrowthOutside1X128,\\r\\n            int56 tickCumulativeOutside,\\r\\n            uint160 secondsPerLiquidityOutsideX128,\\r\\n            uint32 secondsOutside,\\r\\n            bool initialized\\r\\n        );\\r\\n\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    function liquidity() external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface INonfungiblePositionManager {\\r\\n    struct MintParams {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    struct IncreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    struct DecreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint128 liquidity;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    struct CollectParams {\\r\\n        uint256 tokenId;\\r\\n        address recipient;\\r\\n        uint128 amount0Max;\\r\\n        uint128 amount1Max;\\r\\n    }\\r\\n\\r\\n    function positions(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint96 nonce,\\r\\n            address operator,\\r\\n            address token0,\\r\\n            address token1,\\r\\n            uint24 fee,\\r\\n            int24 tickLower,\\r\\n            int24 tickUpper,\\r\\n            uint128 liquidity,\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            uint128 tokensOwed0,\\r\\n            uint128 tokensOwed1\\r\\n        );\\r\\n\\r\\n    function mint(INonfungiblePositionManager.MintParams memory params)\\r\\n        external\\r\\n        returns (\\r\\n            uint256 tokenId,\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n\\r\\n    function increaseLiquidity(\\r\\n        INonfungiblePositionManager.IncreaseLiquidityParams memory params\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n\\r\\n    function decreaseLiquidity(\\r\\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function collect(INonfungiblePositionManager.CollectParams memory params)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function burn(uint256 _tokenId) external;\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external returns (address);\\r\\n\\r\\n    function refundETH() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\nlibrary TickMath {\\r\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n    int24 internal constant MIN_TICK = -887272;\\r\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n    uint160 internal constant MAX_SQRT_RATIO =\\r\\n        1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n    /// @dev Throws if |tick| > max tick\\r\\n    /// @param tick The input tick for the above formula\\r\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n    /// at the given tick\\r\\n    function getSqrtRatioAtTick(int24 tick)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint160 sqrtPriceX96)\\r\\n    {\\r\\n        uint256 absTick = tick < 0\\r\\n            ? uint256(-int256(tick))\\r\\n            : uint256(int256(tick));\\r\\n        // require(absTick <= uint256(MAX_TICK), 'T');\\r\\n\\r\\n        uint256 ratio = absTick & 0x1 != 0\\r\\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\\r\\n            : 0x100000000000000000000000000000000;\\r\\n        if (absTick & 0x2 != 0)\\r\\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n        if (absTick & 0x4 != 0)\\r\\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n        if (absTick & 0x8 != 0)\\r\\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n        if (absTick & 0x10 != 0)\\r\\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n        if (absTick & 0x20 != 0)\\r\\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n        if (absTick & 0x40 != 0)\\r\\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n        if (absTick & 0x80 != 0)\\r\\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n        if (absTick & 0x100 != 0)\\r\\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n        if (absTick & 0x200 != 0)\\r\\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n        if (absTick & 0x400 != 0)\\r\\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n        if (absTick & 0x800 != 0)\\r\\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n        if (absTick & 0x1000 != 0)\\r\\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n        if (absTick & 0x2000 != 0)\\r\\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n        if (absTick & 0x4000 != 0)\\r\\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n        if (absTick & 0x8000 != 0)\\r\\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n        if (absTick & 0x10000 != 0)\\r\\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n        if (absTick & 0x20000 != 0)\\r\\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n        if (absTick & 0x40000 != 0)\\r\\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n        if (absTick & 0x80000 != 0)\\r\\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n        sqrtPriceX96 = uint160(\\r\\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n    /// ever return.\\r\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\r\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int24 tick)\\r\\n    {\\r\\n        // second inequality must be < because the price can never reach the price at the max tick\\r\\n        require(\\r\\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\r\\n            \\\"R\\\"\\r\\n        );\\r\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\r\\n\\r\\n        uint256 r = ratio;\\r\\n        uint256 msb = 0;\\r\\n\\r\\n        assembly {\\r\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(4, gt(r, 0xFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(3, gt(r, 0xFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(2, gt(r, 0xF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(1, gt(r, 0x3))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := gt(r, 0x1)\\r\\n            msb := or(msb, f)\\r\\n        }\\r\\n\\r\\n        if (msb >= 128) r = ratio >> (msb - 127);\\r\\n        else r = ratio << (127 - msb);\\r\\n\\r\\n        int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(63, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(62, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(61, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(60, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(59, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(58, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(57, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(56, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(55, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(54, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(53, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(52, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(51, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(50, f))\\r\\n        }\\r\\n\\r\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n        int24 tickLow = int24(\\r\\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\r\\n        );\\r\\n        int24 tickHi = int24(\\r\\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\r\\n        );\\r\\n\\r\\n        tick = tickLow == tickHi\\r\\n            ? tickLow\\r\\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\r\\n            ? tickHi\\r\\n            : tickLow;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/SqrtPrice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nlibrary SqrtPriceLib {\\r\\n    function calcLiquidity0(\\r\\n        uint160 _pb,\\r\\n        uint160 _pc,\\r\\n        uint160 _dx\\r\\n    ) internal pure returns (uint256) {\\r\\n        return (((_pb * _pc) / 2**96) / absSub(_pb, _pc)) * _dx;\\r\\n    }\\r\\n\\r\\n    function calcLiquidity1(\\r\\n        uint160 _pa,\\r\\n        uint160 _pc,\\r\\n        uint160 _dy\\r\\n    ) internal pure returns (uint256) {\\r\\n        return (_dy * (2**96)) / absSub(_pc, _pa);\\r\\n    }\\r\\n\\r\\n    function calcAmount0(\\r\\n        uint160 _pb,\\r\\n        uint160 _pc,\\r\\n        uint160 _l\\r\\n    ) internal pure returns (uint256) {\\r\\n        return (((uint256(_l) * absSub(_pb, _pc)) / _pb) * 2**96) / _pc;\\r\\n    }\\r\\n\\r\\n    function calcAmount1(\\r\\n        uint160 _pa,\\r\\n        uint160 _pc,\\r\\n        uint160 _l\\r\\n    ) internal pure returns (uint256) {\\r\\n        return (uint256(_l) * absSub(_pc, _pa)) / 2**96;\\r\\n    }\\r\\n\\r\\n    function absSub(uint160 _a, uint160 _b) internal pure returns (uint160) {\\r\\n        return _a > _b ? _a - _b : _b - _a;\\r\\n    }\\r\\n\\r\\n    function getPriceBySqrtPriceX96(uint160 _sqrtPriceX96)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return ((_sqrtPriceX96 * _sqrtPriceX96) >> (96 * 2)) * 10**18;\\r\\n    }\\r\\n\\r\\n    function subUint256(uint256 _a, uint256 _b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (_a >= _b) {\\r\\n            return _a - _b;\\r\\n        }\\r\\n\\r\\n        return type(uint256).max - _b + _a;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/lbf/LbfStrategyHelperLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"./../../interfaces/ILogicContract.sol\\\";\\r\\nimport \\\"./../../interfaces/IStrategyStatistics.sol\\\";\\r\\nimport \\\"./../../interfaces/IMultiLogicProxy.sol\\\";\\r\\nimport \\\"./../../interfaces/IPancakeV3.sol\\\";\\r\\nimport \\\"./../../libraries/TickMath.sol\\\";\\r\\nimport \\\"./../../libraries/SqrtPrice.sol\\\";\\r\\n\\r\\nlibrary LbfStrategyHelper {\\r\\n    uint256 private constant BASE = 10**18;\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate build amount for all pair\\r\\n     */\\r\\n    function calcBuildAmounts(\\r\\n        uint256 _usdAmount,\\r\\n        address logic,\\r\\n        Pair[] memory pairs\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            address[] memory arrBorrowToken,\\r\\n            uint256[] memory arrBorrowAmount,\\r\\n            uint256[] memory arrTokenAmount,\\r\\n            int24[] memory arrTicks\\r\\n        )\\r\\n    {\\r\\n        uint256 length = pairs.length;\\r\\n        arrBorrowToken = new address[](length * 2);\\r\\n        arrBorrowAmount = new uint256[](length * 2);\\r\\n        arrTokenAmount = new uint256[](length * 2);\\r\\n        arrTicks = new int24[](length * 2);\\r\\n\\r\\n        uint256 pos;\\r\\n\\r\\n        for (uint256 index = 0; index < length; ) {\\r\\n            Pair memory pair = pairs[index];\\r\\n\\r\\n            CalcChangeAmountParams memory params = CalcChangeAmountParams({\\r\\n                amountUsd: (_usdAmount * pair.percentage) / 10000,\\r\\n                pool: pair.pool,\\r\\n                token0Price: 0,\\r\\n                token1Price: 0,\\r\\n                minPricePercentage: pair.minPricePercentage,\\r\\n                maxPricePercentage: pair.maxPricePercentage,\\r\\n                tokenId: pair.tokenId\\r\\n            });\\r\\n\\r\\n            (\\r\\n                ,\\r\\n                arrTokenAmount[index * 2],\\r\\n                arrTokenAmount[index * 2 + 1],\\r\\n                arrTicks[index * 2],\\r\\n                arrTicks[index * 2 + 1]\\r\\n            ) = IFarmingV3Logic(logic).calcChangeAmount(params);\\r\\n\\r\\n            // Store borrow token and borrow amount in array\\r\\n            uint256 i;\\r\\n            (address token0, address token1) = IFarmingV3Logic(logic)\\r\\n                .getTokensByPool(pair.pool);\\r\\n            for (i = 0; i < pos + 1; i++) {\\r\\n                if (arrBorrowToken[i] == token0) {\\r\\n                    arrBorrowAmount[i] += arrTokenAmount[index * 2];\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            if (i == pos + 1) {\\r\\n                arrBorrowToken[pos] = token0;\\r\\n                arrBorrowAmount[pos] = arrTokenAmount[index * 2];\\r\\n                pos++;\\r\\n            }\\r\\n\\r\\n            for (i = 0; i < pos + 1; i++) {\\r\\n                if (arrBorrowToken[i] == token1) {\\r\\n                    arrBorrowAmount[i] += arrTokenAmount[index * 2 + 1];\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            if (i == pos + 1) {\\r\\n                arrBorrowToken[pos] = token1;\\r\\n                arrBorrowAmount[pos] = arrTokenAmount[index * 2 + 1];\\r\\n                pos++;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++index;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcDestroyAmounts(\\r\\n        uint256 usdAmount,\\r\\n        address logic,\\r\\n        Pair[] memory pairs,\\r\\n        DestroyMode mode\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory arrToken0Amount,\\r\\n            uint256[] memory arrToken1Amount,\\r\\n            uint128[] memory arrLiquidity\\r\\n        )\\r\\n    {\\r\\n        uint256 length = pairs.length;\\r\\n\\r\\n        arrLiquidity = new uint128[](length);\\r\\n        arrToken0Amount = new uint256[](length);\\r\\n        arrToken1Amount = new uint256[](length);\\r\\n        for (uint256 i; i < length; ) {\\r\\n            Pair memory pair = pairs[i];\\r\\n\\r\\n            uint256 token0Price;\\r\\n            uint256 token1Price;\\r\\n\\r\\n            {\\r\\n                (address token0, address token1) = IFarmingV3Logic(logic)\\r\\n                    .getTokensByPool(pair.pool);\\r\\n\\r\\n                token0Price = ILendingLogic(logic).getUnderlyingPrice(\\r\\n                    ILendingLogic(logic).getXToken(token0)\\r\\n                );\\r\\n                token1Price = ILendingLogic(logic).getUnderlyingPrice(\\r\\n                    ILendingLogic(logic).getXToken(token1)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            (\\r\\n                arrToken0Amount[i],\\r\\n                arrToken1Amount[i],\\r\\n                arrLiquidity[i]\\r\\n            ) = IFarmingV3Logic(logic).getAmountsByPosition(\\r\\n                pair.tokenId,\\r\\n                pair.pool\\r\\n            );\\r\\n\\r\\n            uint256 amountUsdToRemove;\\r\\n\\r\\n            if (mode == DestroyMode.Greedy) {\\r\\n                // TODO: think about calculation accuracy\\r\\n                amountUsdToRemove = (usdAmount * 101) / 100;\\r\\n            } else if (mode == DestroyMode.Proportional) {\\r\\n                amountUsdToRemove = (usdAmount * pair.percentage) / 10_000;\\r\\n            } else if (mode == DestroyMode.Full) {\\r\\n                amountUsdToRemove = type(uint256).max;\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                (arrToken0Amount[i] *\\r\\n                    token0Price +\\r\\n                    arrToken1Amount[i] *\\r\\n                    token1Price) /\\r\\n                    BASE >\\r\\n                amountUsdToRemove\\r\\n            ) {\\r\\n                CalcChangeAmountParams memory params = CalcChangeAmountParams({\\r\\n                    amountUsd: amountUsdToRemove,\\r\\n                    pool: pair.pool,\\r\\n                    token0Price: token0Price,\\r\\n                    token1Price: token1Price,\\r\\n                    minPricePercentage: pair.minPricePercentage,\\r\\n                    maxPricePercentage: pair.maxPricePercentage,\\r\\n                    tokenId: pair.tokenId\\r\\n                });\\r\\n\\r\\n                (\\r\\n                    arrLiquidity[i],\\r\\n                    arrToken0Amount[i],\\r\\n                    arrToken1Amount[i],\\r\\n                    ,\\r\\n\\r\\n                ) = IFarmingV3Logic(logic).calcChangeAmount(params);\\r\\n            }\\r\\n\\r\\n            if (mode == DestroyMode.Full) {\\r\\n                (uint256 fee0, uint256 fee1) = IFarmingV3Logic(logic)\\r\\n                    .calcFeeAmountsByPosition(pair.tokenId, pair.pool);\\r\\n\\r\\n                arrToken0Amount[i] += fee0;\\r\\n                arrToken1Amount[i] += fee1;\\r\\n            }\\r\\n\\r\\n            if (mode == DestroyMode.Greedy) {\\r\\n                uint256 removedAmountUsd = (arrToken0Amount[i] * token0Price) /\\r\\n                    BASE +\\r\\n                    (arrToken1Amount[i] * token1Price) /\\r\\n                    BASE;\\r\\n\\r\\n                if (usdAmount <= removedAmountUsd) {\\r\\n                    break;\\r\\n                } else {\\r\\n                    usdAmount -= removedAmountUsd;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcAmountUsdToReleseToken(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        address logic,\\r\\n        address statistics\\r\\n    ) public view returns (uint256) {\\r\\n        StrategyStatistics memory stats = IStrategyStatistics(statistics)\\r\\n            .getStrategyStatistics(logic);\\r\\n\\r\\n        uint256 tokenPrice = ILendingLogic(logic).getUnderlyingPrice(\\r\\n            ILendingLogic(logic).getXToken(token)\\r\\n        );\\r\\n        uint256 amountUsd = (amount * tokenPrice) / BASE;\\r\\n\\r\\n        XTokenAnalytics memory xTokenInfo = IStrategyStatistics(statistics)\\r\\n            .getXTokenInfo(\\r\\n                ILendingLogic(logic).getXToken(token),\\r\\n                ILendingLogic(logic).comptroller()\\r\\n            );\\r\\n\\r\\n        // Preserve the same borrowRate as we already have\\r\\n        return\\r\\n            (stats.totalBorrowUSD *\\r\\n                ((amountUsd * xTokenInfo.collateralFactor) / BASE)) /\\r\\n            stats.totalBorrowLimitUSD;\\r\\n    }\\r\\n\\r\\n    function checkRebalance(\\r\\n        address logic,\\r\\n        address statistics,\\r\\n        uint256 borrowRateMin,\\r\\n        uint256 borrowRateMax\\r\\n    ) public view returns (bool) {\\r\\n        StrategyStatistics memory stats = IStrategyStatistics(statistics)\\r\\n            .getStrategyStatistics(logic);\\r\\n\\r\\n        return\\r\\n            (stats.borrowRate == 0 && stats.totalBorrowLimitUSD > 0) || // after initial useToken case\\r\\n            (stats.borrowRate < ((borrowRateMin * 95) / 100) ||\\r\\n                stats.borrowRate > ((borrowRateMax * 105) / 100));\\r\\n    }\\r\\n\\r\\n    function checkRebalancePriceRange(address logic, Pair[] memory pairs)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 len = pairs.length;\\r\\n\\r\\n        for (uint256 i; i < len; ) {\\r\\n            Pair memory pair = pairs[i];\\r\\n\\r\\n            bool res = IFarmingV3Logic(logic)\\r\\n                .checkRebalancePriceRangeForPosition(\\r\\n                    pair.tokenId,\\r\\n                    pair.pool,\\r\\n                    pair.sqrtPriceThreshold\\r\\n                );\\r\\n            if (res) {\\r\\n                return true;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function checkUseToken(\\r\\n        address multiLogicProxy,\\r\\n        address logic,\\r\\n        uint256 minStorageAvailable\\r\\n    ) public view returns (bool) {\\r\\n        address[] memory tokens = IMultiLogicProxy(multiLogicProxy)\\r\\n            .getUsedTokensStorage();\\r\\n\\r\\n        for (uint256 i; i < tokens.length; ) {\\r\\n            if (\\r\\n                IMultiLogicProxy(multiLogicProxy).getTokenAvailable(\\r\\n                    tokens[i],\\r\\n                    logic\\r\\n                ) > minStorageAvailable\\r\\n            ) {\\r\\n                return true;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function calcRebalanceAmount(\\r\\n        address logic,\\r\\n        address statistics,\\r\\n        uint256 borrowRateMin,\\r\\n        uint256 borrowRateMax\\r\\n    ) public view returns (uint256 buildAmountUsd, uint256 destroyAmountUsd) {\\r\\n        StrategyStatistics memory stats = IStrategyStatistics(statistics)\\r\\n            .getStrategyStatistics(logic);\\r\\n        uint256 borrowRateMedian = (borrowRateMin + borrowRateMax) / 2;\\r\\n\\r\\n        if (stats.borrowRate < borrowRateMin) {\\r\\n            buildAmountUsd = stats.borrowRate == 0\\r\\n                ? (stats.totalBorrowLimitUSD * borrowRateMedian) / BASE\\r\\n                : (stats.totalBorrowUSD *\\r\\n                    (borrowRateMedian - stats.borrowRate)) / stats.borrowRate;\\r\\n        }\\r\\n\\r\\n        if (stats.borrowRate > borrowRateMax) {\\r\\n            destroyAmountUsd =\\r\\n                (stats.totalBorrowUSD * (stats.borrowRate - borrowRateMedian)) /\\r\\n                stats.borrowRate;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcRedeemAmount(\\r\\n        address statistics,\\r\\n        address logic,\\r\\n        address[] memory tokens,\\r\\n        uint256 borrowRate\\r\\n    ) public view returns (uint256[] memory arrRedeemAmount) {\\r\\n        StrategyStatistics memory stats = IStrategyStatistics(statistics)\\r\\n            .getStrategyStatistics(logic);\\r\\n        uint256 borrowLimitUsd = (stats.totalBorrowUSD * BASE) / borrowRate;\\r\\n\\r\\n        arrRedeemAmount = new uint256[](tokens.length);\\r\\n\\r\\n        for (uint256 i; i < tokens.length; ) {\\r\\n            address xToken = ILendingLogic(logic).getXToken(tokens[i]);\\r\\n            XTokenInfo memory xTokenInfo = IStrategyStatistics(statistics)\\r\\n                .getStrategyXTokenInfo(xToken, logic);\\r\\n\\r\\n            XTokenAnalytics memory xTokenStat = IStrategyStatistics(statistics)\\r\\n                .getXTokenInfo(xToken, ILendingLogic(logic).comptroller());\\r\\n\\r\\n            if (\\r\\n                (xTokenInfo.totalSupplyUSD * xTokenStat.collateralFactor) /\\r\\n                    BASE <=\\r\\n                borrowLimitUsd\\r\\n            ) {\\r\\n                arrRedeemAmount[i] = 0;\\r\\n                borrowLimitUsd -=\\r\\n                    (xTokenInfo.totalSupplyUSD * xTokenStat.collateralFactor) /\\r\\n                    BASE;\\r\\n            } else {\\r\\n                arrRedeemAmount[i] =\\r\\n                    xTokenInfo.totalSupply -\\r\\n                    (((borrowLimitUsd * BASE) / xTokenStat.collateralFactor) *\\r\\n                        BASE) /\\r\\n                    xTokenStat.underlyingPrice;\\r\\n                borrowLimitUsd = 0;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getLogicBalance(address token, address logic)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            token == address(0) ||\\r\\n                token == address(IFarmingV3Logic(logic).WETH())\\r\\n                ? logic.balance\\r\\n                : IERC20Upgradeable(token).balanceOf(logic);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyStatistics.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nstruct XTokenInfo {\\r\\n    string symbol;\\r\\n    address xToken;\\r\\n    uint256 totalSupply;\\r\\n    uint256 totalSupplyUSD;\\r\\n    uint256 lendingAmount;\\r\\n    uint256 lendingAmountUSD;\\r\\n    uint256 borrowAmount;\\r\\n    uint256 borrowAmountUSD;\\r\\n    uint256 borrowLimit;\\r\\n    uint256 borrowLimitUSD;\\r\\n    uint256 underlyingBalance;\\r\\n    uint256 priceUSD;\\r\\n}\\r\\n\\r\\nstruct XTokenAnalytics {\\r\\n    string symbol;\\r\\n    address platformAddress;\\r\\n    string underlyingSymbol;\\r\\n    address underlyingAddress;\\r\\n    uint256 underlyingDecimals;\\r\\n    uint256 underlyingPrice;\\r\\n    uint256 totalSupply;\\r\\n    uint256 totalSupplyUSD;\\r\\n    uint256 totalBorrows;\\r\\n    uint256 totalBorrowsUSD;\\r\\n    uint256 liquidity;\\r\\n    uint256 collateralFactor;\\r\\n    uint256 borrowApy;\\r\\n    uint256 borrowRewardsApy;\\r\\n    uint256 supplyApy;\\r\\n    uint256 supplyRewardsApy;\\r\\n}\\r\\n\\r\\nstruct StrategyStatistics {\\r\\n    XTokenInfo[] xTokensStatistics;\\r\\n    WalletInfo[] walletStatistics;\\r\\n    uint256 lendingEarnedUSD;\\r\\n    uint256 totalSupplyUSD;\\r\\n    uint256 totalBorrowUSD;\\r\\n    uint256 totalBorrowLimitUSD;\\r\\n    uint256 borrowRate;\\r\\n    uint256 storageAvailableUSD;\\r\\n    int256 totalAmountUSD;\\r\\n}\\r\\n\\r\\nstruct LbfStrategyStatistics {\\r\\n    XTokenInfo[] xTokensStatistics;\\r\\n    WalletInfo[] walletStatistics;\\r\\n    uint256 lendingEarnedUSD;\\r\\n    uint256 totalSupplyUSD;\\r\\n    uint256 totalBorrowUSD;\\r\\n    uint256 totalBorrowLimitUSD;\\r\\n    uint256 borrowRate;\\r\\n    uint256 storageAvailableUSD;\\r\\n    StakedInfo[] stakedStatistics;\\r\\n    uint256 stakedAmountUSD;\\r\\n    uint256 farmingRewardsAmountUSD;\\r\\n    int256 totalAmountUSD;\\r\\n}\\r\\n\\r\\nstruct FarmingPairInfo {\\r\\n    uint256 index;\\r\\n    address lpToken;\\r\\n    uint256 farmingAmount;\\r\\n    uint256 rewardsAmount;\\r\\n    uint256 rewardsAmountUSD;\\r\\n}\\r\\n\\r\\nstruct WalletInfo {\\r\\n    string symbol;\\r\\n    address token;\\r\\n    uint256 balance;\\r\\n    uint256 balanceUSD;\\r\\n}\\r\\n\\r\\nstruct PriceInfo {\\r\\n    address token;\\r\\n    uint256 priceUSD;\\r\\n}\\r\\n\\r\\nstruct StakedTokenAmountUSD {\\r\\n    address token;\\r\\n    uint256 amount;\\r\\n    uint256 amountUSD;\\r\\n    uint256 fee;\\r\\n    uint256 feeUSD;\\r\\n}\\r\\n\\r\\nstruct StakedInfo {\\r\\n    uint256 tokenId;\\r\\n    StakedTokenAmountUSD token0Info;\\r\\n    StakedTokenAmountUSD token1Info;\\r\\n}\\r\\n\\r\\nstruct Pair {\\r\\n    address pool;\\r\\n    uint24 percentage;\\r\\n    uint24 minPricePercentage;\\r\\n    uint24 maxPricePercentage;\\r\\n    uint160 sqrtPriceThreshold; // 2**96 * sqrt(percentage)\\r\\n    uint256 tokenId;\\r\\n}\\r\\n\\r\\nenum DestroyMode {\\r\\n    // Remove liquidity from all pairs based on percentages\\r\\n    Proportional,\\r\\n    // Remove maximum liquidity from pair by pair\\r\\n    Greedy,\\r\\n    // Remove all liquidity\\r\\n    Full\\r\\n}\\r\\n\\r\\ninterface IStrategyStatistics {\\r\\n    function getXTokenInfo(address _asset, address comptroller)\\r\\n        external\\r\\n        view\\r\\n        returns (XTokenAnalytics memory);\\r\\n\\r\\n    function getXTokensInfo(address comptroller)\\r\\n        external\\r\\n        view\\r\\n        returns (XTokenAnalytics[] memory);\\r\\n\\r\\n    function getStrategyStatistics(address logic)\\r\\n        external\\r\\n        view\\r\\n        returns (StrategyStatistics memory statistics);\\r\\n\\r\\n    function getStrategyXTokenInfo(address xToken, address logic)\\r\\n        external\\r\\n        view\\r\\n        returns (XTokenInfo memory tokenInfo);\\r\\n\\r\\n    function getStrategyXTokenInfoCompact(address xToken, address logic)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalSupply,\\r\\n            uint256 borrowLimit,\\r\\n            uint256 borrowAmount\\r\\n        );\\r\\n\\r\\n    function getRewardsTokenPrice(address comptroller, address rewardsToken)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 priceUSD);\\r\\n\\r\\n    function getEnteredMarkets(address comptroller, address logic)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory markets);\\r\\n}\\r\\n\\r\\ninterface IFarmingStatistics {\\r\\n    function getStakedPortfolio(address logic, address strategy)\\r\\n        external\\r\\n        view\\r\\n        returns (StakedInfo[] memory);\\r\\n\\r\\n    function getFarmingRewardsAmount(address logic, address strategy)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMultiLogicProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IMultiLogicProxy {\\r\\n    function releaseToken(uint256 amount, address token) external;\\r\\n\\r\\n    function takeToken(uint256 amount, address token) external;\\r\\n\\r\\n    function addEarn(uint256 amount, address blidToken) external;\\r\\n\\r\\n    function returnToken(uint256 amount, address token) external;\\r\\n\\r\\n    function setLogicTokenAvailable(\\r\\n        uint256 amount,\\r\\n        address token,\\r\\n        uint256 deposit_withdraw\\r\\n    ) external;\\r\\n\\r\\n    function getTokenAvailable(address _token, address _logicAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getTokenTaken(address _token, address _logicAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getUsedTokensStorage() external view returns (address[] memory);\\r\\n\\r\\n    function multiStrategyLength() external view returns (uint256);\\r\\n\\r\\n    function multiStrategyName(uint256) external view returns (string memory);\\r\\n\\r\\n    function strategyInfo(string memory)\\r\\n        external\\r\\n        view\\r\\n        returns (address, address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"nftPositionManager\",\"type\":\"INonfungiblePositionManager\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountUsd\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Price\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"minPricePercentage\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"maxPricePercentage\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct CalcChangeAmountParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"int24\",\"name\":\"minPriceTickDiff\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxPriceTickDiff\",\"type\":\"int24\"}],\"name\":\"calcChangeAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"nftPositionManager\",\"type\":\"INonfungiblePositionManager\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"calcFeeAmountsByPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"minPriceTickDiff\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"maxPriceTickDiff\",\"type\":\"int24\"}],\"name\":\"calcNewPoolTicks\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"nftPositionManager\",\"type\":\"INonfungiblePositionManager\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceThreshold\",\"type\":\"uint160\"}],\"name\":\"checkRebalancePriceRangeForPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"nftPositionManager\",\"type\":\"INonfungiblePositionManager\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getAmountsByPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Pcs3StrategyHelper", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}