{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IAdmin.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IAdmin {\\n    function admin() external view returns (address);\\n\\n    function setAdmin(address _admin) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IShortsTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IShortsTracker {\\n    function isGlobalShortDataReady() external view returns (bool);\\n\\n    function globalShortAveragePrices(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNextGlobalShortData(\\n        address _account,\\n        address _indexToken,\\n        uint256 _nextPrice,\\n        uint256 _sizeDelta,\\n        bool _isIncrease\\n    ) external view returns (uint256, uint256);\\n\\n    function updateGlobalShortData(\\n        address _account,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta,\\n        uint256 _markPrice,\\n        bool _isIncrease\\n    ) external;\\n\\n    function setIsGlobalShortDataReady(bool value) external;\\n\\n    function setInitData(\\n        address[] calldata _tokens,\\n        uint256[] calldata _averagePrices\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/peripherals/ShortsTrackerTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../core/interfaces/IShortsTracker.sol\\\";\\nimport \\\"../access/interfaces/IAdmin.sol\\\";\\n\\ncontract ShortsTrackerTimelock is IAdmin {\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant MAX_BUFFER = 5 days;\\n\\n    mapping(bytes32 => uint256) public pendingActions;\\n\\n    address public admin;\\n    uint256 public buffer;\\n\\n    mapping(address => bool) public isHandler;\\n    mapping(address => uint256) public lastUpdated;\\n    uint256 public averagePriceUpdateDelay;\\n    uint256 public maxAveragePriceChange;\\n\\n    event GlobalShortAveragePriceUpdated(\\n        address indexed token,\\n        uint256 oldAveragePrice,\\n        uint256 newAveragePrice\\n    );\\n\\n    event SignalSetGov(address target, address gov);\\n    event SetGov(address target, address gov);\\n\\n    event SignalSetAdmin(address admin);\\n    event SetAdmin(address admin);\\n\\n    event SetHandler(address indexed handler, bool isHandler);\\n\\n    event SignalSetMaxAveragePriceChange(uint256 maxAveragePriceChange);\\n    event SetMaxAveragePriceChange(uint256 maxAveragePriceChange);\\n\\n    event SignalSetAveragePriceUpdateDelay(uint256 averagePriceUpdateDelay);\\n    event SetAveragePriceUpdateDelay(uint256 averagePriceUpdateDelay);\\n\\n    event SignalSetIsGlobalShortDataReady(\\n        address target,\\n        bool isGlobalShortDataReady\\n    );\\n    event SetIsGlobalShortDataReady(\\n        address target,\\n        bool isGlobalShortDataReady\\n    );\\n\\n    event SignalPendingAction(bytes32 action);\\n    event ClearAction(bytes32 action);\\n\\n    constructor(\\n        address _admin,\\n        uint256 _buffer,\\n        uint256 _averagePriceUpdateDelay,\\n        uint256 _maxAveragePriceChange\\n    ) {\\n        admin = _admin;\\n        buffer = _buffer;\\n        averagePriceUpdateDelay = _averagePriceUpdateDelay;\\n        maxAveragePriceChange = _maxAveragePriceChange;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"ShortsTrackerTimelock: admin forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyHandler() {\\n        require(\\n            isHandler[msg.sender] || msg.sender == admin,\\n            \\\"ShortsTrackerTimelock: handler forbidden\\\"\\n        );\\n        _;\\n    }\\n\\n    function setBuffer(uint256 _buffer) external onlyAdmin {\\n        require(_buffer <= MAX_BUFFER, \\\"ShortsTrackerTimelock: invalid buffer\\\");\\n        require(\\n            _buffer > buffer,\\n            \\\"ShortsTrackerTimelock: buffer cannot be decreased\\\"\\n        );\\n        buffer = _buffer;\\n    }\\n\\n    function signalSetAdmin(address _admin) external onlyAdmin {\\n        require(_admin != address(0), \\\"ShortsTrackerTimelock: invalid admin\\\");\\n\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setAdmin\\\", _admin));\\n        _setPendingAction(action);\\n\\n        emit SignalSetAdmin(_admin);\\n    }\\n\\n    function setAdmin(address _admin) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setAdmin\\\", _admin));\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        admin = _admin;\\n\\n        emit SetAdmin(_admin);\\n    }\\n\\n    function setHandler(address _handler, bool _isActive) external onlyAdmin {\\n        isHandler[_handler] = _isActive;\\n\\n        emit SetHandler(_handler, _isActive);\\n    }\\n\\n    function signalSetGov(address _shortsTracker, address _gov)\\n        external\\n        onlyAdmin\\n    {\\n        require(_gov != address(0), \\\"ShortsTrackerTimelock: invalid owner\\\");\\n\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"transferOwnership\\\", _shortsTracker, _gov)\\n        );\\n        _setPendingAction(action);\\n\\n        emit SignalSetGov(_shortsTracker, _gov);\\n    }\\n\\n    function transferOwnership(address _shortsTracker, address _gov)\\n        external\\n        onlyAdmin\\n    {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"transferOwnership\\\", _shortsTracker, _gov)\\n        );\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        Ownable(_shortsTracker).transferOwnership(_gov);\\n\\n        emit SetGov(_shortsTracker, _gov);\\n    }\\n\\n    function signalSetAveragePriceUpdateDelay(uint256 _averagePriceUpdateDelay)\\n        external\\n        onlyAdmin\\n    {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\n                \\\"setAveragePriceUpdateDelay\\\",\\n                _averagePriceUpdateDelay\\n            )\\n        );\\n        _setPendingAction(action);\\n\\n        emit SignalSetAveragePriceUpdateDelay(_averagePriceUpdateDelay);\\n    }\\n\\n    function setAveragePriceUpdateDelay(uint256 _averagePriceUpdateDelay)\\n        external\\n        onlyAdmin\\n    {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\n                \\\"setAveragePriceUpdateDelay\\\",\\n                _averagePriceUpdateDelay\\n            )\\n        );\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        averagePriceUpdateDelay = _averagePriceUpdateDelay;\\n\\n        emit SetAveragePriceUpdateDelay(_averagePriceUpdateDelay);\\n    }\\n\\n    function signalSetMaxAveragePriceChange(uint256 _maxAveragePriceChange)\\n        external\\n        onlyAdmin\\n    {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"setMaxAveragePriceChange\\\", _maxAveragePriceChange)\\n        );\\n        _setPendingAction(action);\\n\\n        emit SignalSetMaxAveragePriceChange(_maxAveragePriceChange);\\n    }\\n\\n    function setMaxAveragePriceChange(uint256 _maxAveragePriceChange)\\n        external\\n        onlyAdmin\\n    {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"setMaxAveragePriceChange\\\", _maxAveragePriceChange)\\n        );\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        maxAveragePriceChange = _maxAveragePriceChange;\\n\\n        emit SetMaxAveragePriceChange(_maxAveragePriceChange);\\n    }\\n\\n    function signalSetIsGlobalShortDataReady(\\n        IShortsTracker _shortsTracker,\\n        bool _value\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\n                \\\"setIsGlobalShortDataReady\\\",\\n                address(_shortsTracker),\\n                _value\\n            )\\n        );\\n        _setPendingAction(action);\\n\\n        emit SignalSetIsGlobalShortDataReady(address(_shortsTracker), _value);\\n    }\\n\\n    function setIsGlobalShortDataReady(\\n        IShortsTracker _shortsTracker,\\n        bool _value\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\n                \\\"setIsGlobalShortDataReady\\\",\\n                address(_shortsTracker),\\n                _value\\n            )\\n        );\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        _shortsTracker.setIsGlobalShortDataReady(_value);\\n\\n        emit SetIsGlobalShortDataReady(address(_shortsTracker), _value);\\n    }\\n\\n    function disableIsGlobalShortDataReady(IShortsTracker _shortsTracker)\\n        external\\n        onlyAdmin\\n    {\\n        _shortsTracker.setIsGlobalShortDataReady(false);\\n\\n        emit SetIsGlobalShortDataReady(address(_shortsTracker), false);\\n    }\\n\\n    function setGlobalShortAveragePrices(\\n        IShortsTracker _shortsTracker,\\n        address[] calldata _tokens,\\n        uint256[] calldata _averagePrices\\n    ) external onlyHandler {\\n        _shortsTracker.setIsGlobalShortDataReady(false);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            uint256 oldAveragePrice = _shortsTracker.globalShortAveragePrices(\\n                token\\n            );\\n            uint256 newAveragePrice = _averagePrices[i];\\n            uint256 diff = newAveragePrice > oldAveragePrice\\n                ? newAveragePrice - oldAveragePrice\\n                : oldAveragePrice - newAveragePrice;\\n            require(\\n                (diff * BASIS_POINTS_DIVISOR) / oldAveragePrice <\\n                    maxAveragePriceChange,\\n                \\\"ShortsTrackerTimelock: too big change\\\"\\n            );\\n\\n            require(\\n                block.timestamp >= lastUpdated[token] + averagePriceUpdateDelay,\\n                \\\"ShortsTrackerTimelock: too early\\\"\\n            );\\n            lastUpdated[token] = block.timestamp;\\n\\n            emit GlobalShortAveragePriceUpdated(\\n                token,\\n                oldAveragePrice,\\n                newAveragePrice\\n            );\\n        }\\n\\n        _shortsTracker.setInitData(_tokens, _averagePrices);\\n    }\\n\\n    function _setPendingAction(bytes32 _action) private {\\n        require(\\n            pendingActions[_action] == 0,\\n            \\\"ShortsTrackerTimelock: action already signalled\\\"\\n        );\\n        pendingActions[_action] = block.timestamp + buffer;\\n        emit SignalPendingAction(_action);\\n    }\\n\\n    function _validateAction(bytes32 _action) private view {\\n        require(\\n            pendingActions[_action] != 0,\\n            \\\"ShortsTrackerTimelock: action not signalled\\\"\\n        );\\n        require(\\n            pendingActions[_action] <= block.timestamp,\\n            \\\"ShortsTrackerTimelock: action time not yet passed\\\"\\n        );\\n    }\\n\\n    function _clearAction(bytes32 _action) private {\\n        require(\\n            pendingActions[_action] != 0,\\n            \\\"ShortsTrackerTimelock: invalid _action\\\"\\n        );\\n        delete pendingActions[_action];\\n        emit ClearAction(_action);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averagePriceUpdateDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAveragePriceChange\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"ClearAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAveragePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAveragePrice\",\"type\":\"uint256\"}],\"name\":\"GlobalShortAveragePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averagePriceUpdateDelay\",\"type\":\"uint256\"}],\"name\":\"SetAveragePriceUpdateDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gov\",\"type\":\"address\"}],\"name\":\"SetGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isHandler\",\"type\":\"bool\"}],\"name\":\"SetHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGlobalShortDataReady\",\"type\":\"bool\"}],\"name\":\"SetIsGlobalShortDataReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAveragePriceChange\",\"type\":\"uint256\"}],\"name\":\"SetMaxAveragePriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalPendingAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SignalSetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averagePriceUpdateDelay\",\"type\":\"uint256\"}],\"name\":\"SignalSetAveragePriceUpdateDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gov\",\"type\":\"address\"}],\"name\":\"SignalSetGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGlobalShortDataReady\",\"type\":\"bool\"}],\"name\":\"SignalSetIsGlobalShortDataReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAveragePriceChange\",\"type\":\"uint256\"}],\"name\":\"SignalSetMaxAveragePriceChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averagePriceUpdateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IShortsTracker\",\"name\":\"_shortsTracker\",\"type\":\"address\"}],\"name\":\"disableIsGlobalShortDataReady\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAveragePriceChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingActions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_averagePriceUpdateDelay\",\"type\":\"uint256\"}],\"name\":\"setAveragePriceUpdateDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"setBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IShortsTracker\",\"name\":\"_shortsTracker\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_averagePrices\",\"type\":\"uint256[]\"}],\"name\":\"setGlobalShortAveragePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IShortsTracker\",\"name\":\"_shortsTracker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setIsGlobalShortDataReady\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAveragePriceChange\",\"type\":\"uint256\"}],\"name\":\"setMaxAveragePriceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"signalSetAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_averagePriceUpdateDelay\",\"type\":\"uint256\"}],\"name\":\"signalSetAveragePriceUpdateDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shortsTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"signalSetGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IShortsTracker\",\"name\":\"_shortsTracker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"signalSetIsGlobalShortDataReady\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAveragePriceChange\",\"type\":\"uint256\"}],\"name\":\"signalSetMaxAveragePriceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shortsTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShortsTrackerTimelock", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a237d6b4bdf35ba51b732577260154849b4eff200000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000014", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}