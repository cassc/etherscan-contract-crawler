{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: contracts/LERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ILosslessController {\r\n    function beforeTransfer(address sender, address recipient, uint256 amount) external;\r\n\r\n    function beforeTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;\r\n\r\n    function beforeApprove(address sender, address spender, uint256 amount) external;\r\n\r\n    function beforeIncreaseAllowance(address msgSender, address spender, uint256 addedValue) external;\r\n\r\n    function beforeDecreaseAllowance(address msgSender, address spender, uint256 subtractedValue) external;\r\n\r\n    function afterApprove(address sender, address spender, uint256 amount) external;\r\n\r\n    function afterTransfer(address sender, address recipient, uint256 amount) external;\r\n\r\n    function afterTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;\r\n\r\n    function afterIncreaseAllowance(address sender, address spender, uint256 addedValue) external;\r\n\r\n    function afterDecreaseAllowance(address sender, address spender, uint256 subtractedValue) external;\r\n}\r\n\r\ncontract LERC20 is Context, IERC20 {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    address public recoveryAdmin;\r\n    address private recoveryAdminCanditate;\r\n    bytes32 private recoveryAdminKeyHash;\r\n    address public admin;\r\n    uint256 public timelockPeriod;\r\n    uint256 public losslessTurnOffTimestamp;\r\n    bool public isLosslessTurnOffProposed;\r\n    bool public isLosslessOn = true;\r\n    ILosslessController private lossless;\r\n\r\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n    event RecoveryAdminChangeProposed(address indexed candidate);\r\n    event RecoveryAdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n    event LosslessTurnOffProposed(uint256 turnOffDate);\r\n    event LosslessTurnedOff();\r\n    event LosslessTurnedOn();\r\n\r\n    constructor(uint256 totalSupply_, string memory name_, string memory symbol_, address admin_, address recoveryAdmin_, uint256 timelockPeriod_, address lossless_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        admin = admin_;\r\n        _mint(admin, totalSupply_);\r\n        recoveryAdmin = recoveryAdmin_;\r\n        timelockPeriod = timelockPeriod_;\r\n        lossless = ILosslessController(lossless_);\r\n    }\r\n\r\n    // --- LOSSLESS modifiers ---\r\n\r\n    modifier lssAprove(address spender, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeApprove(_msgSender(), spender, amount);\r\n            _;\r\n            lossless.afterApprove(_msgSender(), spender, amount);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier lssTransfer(address recipient, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeTransfer(_msgSender(), recipient, amount);\r\n            _;\r\n            lossless.afterTransfer(_msgSender(), recipient, amount);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier lssTransferFrom(address sender, address recipient, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeTransferFrom(_msgSender(),sender, recipient, amount);\r\n            _;\r\n            lossless.afterTransferFrom(_msgSender(), sender, recipient, amount);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\r\n            _;\r\n            lossless.afterIncreaseAllowance(_msgSender(), spender, addedValue);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeDecreaseAllowance(_msgSender(), spender, subtractedValue);\r\n            _;\r\n            lossless.afterDecreaseAllowance(_msgSender(), spender, subtractedValue);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyRecoveryAdmin() {\r\n        require(_msgSender() == recoveryAdmin, \"LERC20: Must be recovery admin\");\r\n        _;\r\n    }\r\n\r\n    // --- LOSSLESS management ---\r\n\r\n    function getAdmin() external view returns (address) {\r\n        return admin;\r\n    }\r\n\r\n    function transferOutBlacklistedFunds(address[] calldata from) external {\r\n        require(_msgSender() == address(lossless), \"LERC20: Only lossless contract\");\r\n        for (uint i = 0; i < from.length; i++) {\r\n            _transfer(from[i], address(lossless), balanceOf(from[i]));\r\n        }\r\n    }\r\n\r\n    function setLosslessAdmin(address newAdmin) public onlyRecoveryAdmin {\r\n        emit AdminChanged(admin, newAdmin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash) public onlyRecoveryAdmin {\r\n        recoveryAdminCanditate = candidate;\r\n        recoveryAdminKeyHash = keyHash;\r\n        emit RecoveryAdminChangeProposed(candidate);\r\n    }\r\n\r\n    function acceptRecoveryAdminOwnership(bytes memory key) external {\r\n        require(_msgSender() == recoveryAdminCanditate, \"LERC20: Must be canditate\");\r\n        require(keccak256(key) == recoveryAdminKeyHash, \"LERC20: Invalid key\");\r\n        emit RecoveryAdminChanged(recoveryAdmin, recoveryAdminCanditate);\r\n        recoveryAdmin = recoveryAdminCanditate;\r\n    }\r\n\r\n    function proposeLosslessTurnOff() public onlyRecoveryAdmin {\r\n        losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\r\n        isLosslessTurnOffProposed = true;\r\n        emit LosslessTurnOffProposed(losslessTurnOffTimestamp);\r\n    }\r\n\r\n    function executeLosslessTurnOff() public onlyRecoveryAdmin {\r\n        require(isLosslessTurnOffProposed, \"LERC20: TurnOff not proposed\");\r\n        require(losslessTurnOffTimestamp <= block.timestamp, \"LERC20: Time lock in progress\");\r\n        isLosslessOn = false;\r\n        isLosslessTurnOffProposed = false;\r\n        emit LosslessTurnedOff();\r\n    }\r\n\r\n    function executeLosslessTurnOn() public onlyRecoveryAdmin {\r\n        isLosslessTurnOffProposed = false;\r\n        isLosslessOn = true;\r\n        emit LosslessTurnedOn();\r\n    }\r\n\r\n    // --- ERC20 methods ---\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override lssTransfer(recipient, amount) returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override lssAprove(spender, amount) returns (bool) {\r\n        require((amount == 0) || (_allowances[_msgSender()][spender] == 0), \"LERC20: Cannot change non zero allowance\");\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override lssTransferFrom(sender, recipient, amount) returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"LERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual lssIncreaseAllowance(spender, addedValue) returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual lssDecreaseAllowance(spender, subtractedValue) returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"LERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"LERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"LERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"LERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"LERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"LERC20: approve from the zero address\");\r\n        require(spender != address(0), \"LERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/external/UniswapV2Library.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Exempt from the original UniswapV2Library.\r\nlibrary UniswapV2Library {\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(bytes32 initCodeHash, address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                initCodeHash // init code hash\r\n            )))));\r\n    }\r\n}\r\n\r\n// File: contracts/external/UniswapV3Library.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @notice based on https://github.com/Uniswap/uniswap-v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol\r\n/// @notice changed compiler version and lib name.\r\n\r\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\r\nlibrary UniswapV3Library {\r\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\r\n\r\n    /// @notice The identifying key of the pool\r\n    struct PoolKey {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n    }\r\n\r\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\r\n    /// @param tokenA The first token of a pool, unsorted\r\n    /// @param tokenB The second token of a pool, unsorted\r\n    /// @param fee The fee level of the pool\r\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\r\n    function getPoolKey(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal pure returns (PoolKey memory) {\r\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\r\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\r\n    }\r\n\r\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\r\n    /// @param factory The Uniswap V3 factory contract address\r\n    /// @param key The PoolKey\r\n    /// @return pool The contract address of the V3 pool\r\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r\n        require(key.token0 < key.token1);\r\n        pool = address(\r\n            uint160(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            hex'ff',\r\n                            factory,\r\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\r\n                            POOL_INIT_CODE_HASH\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/IPLPS.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPLPS {\r\n    function LiquidityProtection_beforeTokenTransfer(\r\n        address _pool, address _from, address _to, uint _amount) external;\r\n    function isBlocked(address _pool, address _who) external view returns(bool);\r\n    function unblock(address _pool, address _who) external;\r\n}\r\n\r\n// File: contracts/UsingLiquidityProtectionService.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\nabstract contract UsingLiquidityProtectionService {\r\n    bool private unProtected = false;\r\n    IPLPS private plps;\r\n    uint64 internal constant HUNDRED_PERCENT = 1e18;\r\n    bytes32 internal constant UNISWAP = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\r\n    bytes32 internal constant PANCAKESWAP = 0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5;\r\n    bytes32 internal constant QUICKSWAP = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\r\n\r\n    enum UniswapVersion {\r\n        V2,\r\n        V3\r\n    }\r\n\r\n    enum UniswapV3Fees {\r\n        _005, // 0.05%\r\n        _03, // 0.3%\r\n        _1 // 1%\r\n    }\r\n\r\n    modifier onlyProtectionAdmin() {\r\n        protectionAdminCheck();\r\n        _;\r\n    }\r\n\r\n    constructor (address _plps) {\r\n        plps = IPLPS(_plps);\r\n    }\r\n\r\n    function LiquidityProtection_setLiquidityProtectionService(IPLPS _plps) external onlyProtectionAdmin() {\r\n        plps = _plps;\r\n    }\r\n\r\n    function token_transfer(address from, address to, uint amount) internal virtual;\r\n    function token_balanceOf(address holder) internal view virtual returns(uint);\r\n    function protectionAdminCheck() internal view virtual;\r\n    function uniswapVariety() internal pure virtual returns(bytes32);\r\n    function uniswapVersion() internal pure virtual returns(UniswapVersion);\r\n    function uniswapFactory() internal pure virtual returns(address);\r\n    function counterToken() internal pure virtual returns(address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH\r\n    }\r\n    function uniswapV3Fee() internal pure virtual returns(UniswapV3Fees) {\r\n        return UniswapV3Fees._03;\r\n    }\r\n    function protectionChecker() internal view virtual returns(bool) {\r\n        return ProtectionSwitch_manual();\r\n    }\r\n\r\n    function lps() private view returns(IPLPS) {\r\n        return plps;\r\n    }\r\n\r\n    function LiquidityProtection_beforeTokenTransfer(address _from, address _to, uint _amount) internal virtual {\r\n        if (protectionChecker()) {\r\n            if (unProtected) {\r\n                return;\r\n            }\r\n            lps().LiquidityProtection_beforeTokenTransfer(getLiquidityPool(), _from, _to, _amount);\r\n        }\r\n    }\r\n\r\n    function revokeBlocked(address[] calldata _holders, address _revokeTo) external onlyProtectionAdmin() {\r\n        require(protectionChecker(), 'UsingLiquidityProtectionService: protection removed');\r\n        unProtected = true;\r\n        address pool = getLiquidityPool();\r\n        for (uint i = 0; i < _holders.length; i++) {\r\n            address holder = _holders[i];\r\n            if (lps().isBlocked(pool, holder)) {\r\n                token_transfer(holder, _revokeTo, token_balanceOf(holder));\r\n            }\r\n        }\r\n        unProtected = false;\r\n    }\r\n\r\n    function LiquidityProtection_unblock(address[] calldata _holders) external onlyProtectionAdmin() {\r\n        require(protectionChecker(), 'UsingLiquidityProtectionService: protection removed');\r\n        address pool = getLiquidityPool();\r\n        for (uint i = 0; i < _holders.length; i++) {\r\n            lps().unblock(pool, _holders[i]);\r\n        }\r\n    }\r\n\r\n    function disableProtection() external onlyProtectionAdmin() {\r\n        unProtected = true;\r\n    }\r\n\r\n    function isProtected() public view returns(bool) {\r\n        return not(unProtected);\r\n    }\r\n\r\n    function ProtectionSwitch_manual() internal view returns(bool) {\r\n        return isProtected();\r\n    }\r\n\r\n    function ProtectionSwitch_timestamp(uint _timestamp) internal view returns(bool) {\r\n        return not(passed(_timestamp));\r\n    }\r\n\r\n    function ProtectionSwitch_block(uint _block) internal view returns(bool) {\r\n        return not(blockPassed(_block));\r\n    }\r\n\r\n    function blockPassed(uint _block) internal view returns(bool) {\r\n        return _block < block.number;\r\n    }\r\n\r\n    function passed(uint _timestamp) internal view returns(bool) {\r\n        return _timestamp < block.timestamp;\r\n    }\r\n\r\n    function not(bool _condition) internal pure returns(bool) {\r\n        return !_condition;\r\n    }\r\n\r\n    function feeToUint24(UniswapV3Fees _fee) internal pure returns(uint24) {\r\n        if (_fee == UniswapV3Fees._03) return 3000;\r\n        if (_fee == UniswapV3Fees._005) return 500;\r\n        return 10000;\r\n    }\r\n\r\n    function getLiquidityPool() public view returns(address) {\r\n        if (uniswapVersion() == UniswapVersion.V2) {\r\n            return UniswapV2Library.pairFor(uniswapVariety(), uniswapFactory(), address(this), counterToken());\r\n        }\r\n        require(uniswapVariety() == UNISWAP, 'LiquidityProtection: uniswapVariety() can only be UNISWAP for V3.');\r\n        return UniswapV3Library.computeAddress(uniswapFactory(),\r\n            UniswapV3Library.getPoolKey(address(this), counterToken(), feeToUint24(uniswapV3Fee())));\r\n    }\r\n}\r\n\r\n// File: contracts/YDR.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract YDR is LERC20, UsingLiquidityProtectionService(0x5C3fB8fF925996da50f03836FD8734270f5016AC) {\r\n    constructor(uint256 totalSupply_, address admin_, address recoveryAdmin_, uint256 timelockPeriod_, address lossless_) LERC20(totalSupply_, \"YDragon\", \"YDR\", admin_, recoveryAdmin_, timelockPeriod_, lossless_) {\r\n\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(admin == _msgSender(), \"YDR: caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    function burn(uint256 amount) external onlyAdmin {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function token_transfer(address _from, address _to, uint _amount) internal override {\r\n        _transfer(_from, _to, _amount); // Expose low-level token transfer function.\r\n    }\r\n    function token_balanceOf(address _holder) internal view override returns(uint) {\r\n        return balanceOf(_holder); // Expose balance check function.\r\n    }\r\n    function protectionAdminCheck() internal view override onlyAdmin {} // Must revert to deny access.\r\n    function uniswapVariety() internal pure override returns(bytes32) {\r\n        return PANCAKESWAP; // UNISWAP / PANCAKESWAP / QUICKSWAP.\r\n    }\r\n    function uniswapVersion() internal pure override returns(UniswapVersion) {\r\n        return UniswapVersion.V2; // V2 or V3.\r\n    }\r\n    function uniswapFactory() internal pure override returns(address) {\r\n        return 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73; // Replace with the correct address.\r\n    }\r\n    function _beforeTokenTransfer(address _from, address _to, uint _amount) internal override {\r\n        super._beforeTokenTransfer(_from, _to, _amount);\r\n        LiquidityProtection_beforeTokenTransfer(_from, _to, _amount);\r\n    }\r\n    // All the following overrides are optional, if you want to modify default behavior.\r\n\r\n    // How the protection gets disabled.\r\n    function protectionChecker() internal view override returns(bool) {\r\n         return ProtectionSwitch_timestamp(1630367999); // Switch off protection on Monday, August 30, 2021 11:59:59 PM GTM.\r\n        // return ProtectionSwitch_block(13000000); // Switch off protection on block 13000000.\r\n//        return ProtectionSwitch_manual(); // Switch off protection by calling disableProtection(); from owner. Default.\r\n    }\r\n\r\n    // This token will be pooled in pair with:\r\n    function counterToken() internal pure override returns(address) {\r\n        return 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // WBNB\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recoveryAdmin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lossless_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turnOffDate\",\"type\":\"uint256\"}],\"name\":\"LosslessTurnOffProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessTurnedOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessTurnedOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"RecoveryAdminChangeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"RecoveryAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IPLPS\",\"name\":\"_plps\",\"type\":\"address\"}],\"name\":\"LiquidityProtection_setLiquidityProtectionService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"LiquidityProtection_unblock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"acceptRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessTurnOffProposed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProtected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"losslessTurnOffTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_revokeTo\",\"type\":\"address\"}],\"name\":\"revokeBlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setLosslessAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"}],\"name\":\"transferOutBlacklistedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"transferRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YDR", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000cf24a2f86d75386e56eaecef9542784ec0f7710500000000000000000000000045cb38345018ad17e863751839f740b0ab5b8ccc0000000000000000000000000000000000000000000000000000000000015180000000000000000000000000dbb5125ceeaf7233768c84a5df570aeecf0b4634", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4a40345881cdd6bdd5792b083e110f078d495c0951e6c73483ce0f425042d37e"}