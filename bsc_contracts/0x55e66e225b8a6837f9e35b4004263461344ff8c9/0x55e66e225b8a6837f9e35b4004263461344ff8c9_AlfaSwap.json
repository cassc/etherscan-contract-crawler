{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IBEP20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract AlfaSwap {\r\n    address public owner;\r\n    IBEP20 public token;\r\n    IBEP20 public usdtToken;\r\n    uint256 public tokenPrice;\r\n    bool public paused;\r\n    uint256 public totalTokensSwapped;\r\n    uint256 decimals = 18;\r\n    uint256 decimalFactor = 10**uint256(decimals);\r\n\r\n    event TokensSwapped(address user, uint256 tokenAmount, uint256 usdtAmount);\r\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwne);\r\n    \r\n    constructor(address _tokenAddress, address _usdtTokenAddress, uint256 _tokenPrice) {\r\n        owner = msg.sender;\r\n        token = IBEP20(_tokenAddress);\r\n        usdtToken = IBEP20(_usdtTokenAddress);\r\n        tokenPrice = _tokenPrice;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can perform this action\");\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setTokenPrice(uint256 _price) public onlyOwner {\r\n        tokenPrice = _price;\r\n    }\r\n\r\n    function setPause(bool _value) public onlyOwner {\r\n        paused = _value;\r\n    }\r\n\r\n    function getTokenBalance() public view returns (uint) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getUSDTBalance() public view returns (uint) {\r\n        return usdtToken.balanceOf(address(this));\r\n    }\r\n\r\n    function swapTokensForUSDT(uint256 _tokenAmount) external {\r\n        require(_tokenAmount > 0, \"Invalid token amount\");\r\n        require(!paused, \"Swapping is paused!\");\r\n\r\n        uint256 tokenBalance = token.balanceOf(msg.sender);\r\n        require(tokenBalance >= _tokenAmount, \"Not enough tokens in your balance\");\r\n\r\n        uint256 usdtAmount = (_tokenAmount * tokenPrice) / decimalFactor;\r\n        \r\n        require(token.allowance(msg.sender, address(this)) >= usdtAmount, \"Not enough USDT allowance\");\r\n        require(usdtToken.balanceOf(address(this)) >= usdtAmount, \"Not enough USDT balance\");\r\n\r\n        bool tokenTransferSuccess = token.transferFrom(msg.sender, address(this), _tokenAmount);\r\n        require(tokenTransferSuccess, \"Token transfer failed\");\r\n\r\n        bool usdtTransferSuccess = usdtToken.transfer(msg.sender, usdtAmount);\r\n        require(usdtTransferSuccess, \"USDT transfer failed\");\r\n\r\n        totalTokensSwapped += _tokenAmount;\r\n\r\n        emit TokensSwapped(msg.sender, _tokenAmount, usdtAmount);\r\n    }\r\n\r\n    function withdrawTokens(uint256 _tokenAmount) external onlyOwner {\r\n        require(_tokenAmount > 0, \"Invalid token amount\");\r\n\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        require(tokenBalance >= _tokenAmount, \"Insufficient token balance in the contract\");\r\n\r\n        bool transferSuccess = token.transfer(owner, _tokenAmount);\r\n        require(transferSuccess, \"Token transfer failed\");\r\n    }\r\n\r\n    function withdrawUSDT(uint256 _usdtAmount) external onlyOwner {\r\n        require(_usdtAmount > 0, \"Invalid USDT amount\");\r\n\r\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\r\n        require(usdtBalance >= _usdtAmount, \"Insufficient USDT balance in the contract\");\r\n\r\n        bool transferSuccess = usdtToken.transfer(owner, _usdtAmount);\r\n        require(transferSuccess, \"USDT transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwne\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"TokensSwapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokensForUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSwapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlfaSwap", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006ed903eabb327577166b55825309432747d67e4700000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000000016345785d8a0000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dec076612b4b83db72436b017138b75d524f4fb2055e10ded5a4d140588da9f8"}