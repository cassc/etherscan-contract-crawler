{"SourceCode": "/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-12-06\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ncontract GoldenLama {\r\n\r\n    struct UserInfo {\r\n        uint256 userId;\r\n        uint256 refId;\r\n        uint256 profitDept;\r\n        uint256 balanceOfCocktail;\r\n        uint256 balanceOfCoin;\r\n        uint256[30] timestamps;\r\n        uint8[] purchasedIds;\r\n    }\r\n\r\n    uint64 private constant PRICE_OF_COCKTAIL = 30000000000000;\r\n    uint64 private constant PRICE_OF_COIN = 300000000000;\r\n\r\n    address public owner;\r\n    address unusedRefWallet;\r\n\r\n    uint256 public startTimestamp;\r\n    uint256 public usersCount;\r\n    uint256[30] public profits;\r\n    uint32[30] public prices;\r\n\r\n    mapping(address => bool) public isAdmin;\r\n    mapping(uint256 => address) public idToHisAddress; \r\n    mapping(address => address) public addressToHisReferrer; \r\n    mapping(address => UserInfo) userInfo;\r\n    \r\n    //events\r\n    event CocktailBought(address indexed buyer, uint256 indexed count, uint256 indexed timestamp);\r\n    event CoinSold(address indexed buyer, uint256 indexed count, uint256 indexed timestamp);\r\n    event CoinSwap(address indexed user, uint256 indexed countOfCoins, uint256 countOfReceivedCoctails, uint256 indexed timestamp);\r\n    event PersonagePurchased(address indexed user, uint256 indexed typeOfItem, uint256 indexed timestamp);\r\n    event Claimed(address indexed user, uint256 indexed profit, uint256 indexed timestamp);\r\n\r\n    modifier onlyAdmin(){\r\n        require(isAdmin[msg.sender] || msg.sender == owner, \"GoldenLama:: This function can be called only by admins\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"GoldenLama:: This function can be called only by admins\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint32[30] memory _prices, address _unusedRefWallet) {\r\n        owner = msg.sender;\r\n        unusedRefWallet = _unusedRefWallet;\r\n        startTimestamp = block.timestamp;\r\n        usersCount = 1;\r\n        prices = _prices;\r\n        _setProfits();\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function getUserInfo(address _user) external view returns(UserInfo memory) {\r\n        return userInfo[_user];\r\n    }\r\n\r\n    function setAdminStatus(address _admin, bool _status) external onlyOwner{\r\n        isAdmin[_admin] = _status;\r\n    }\r\n\r\n    function addUserToMlm(address _user, uint256 _refId) external onlyAdmin {\r\n        require(!(addressToHisReferrer[_user] != address(0) && idToHisAddress[_refId] != addressToHisReferrer[_user]),\"GoldenLama:: your referrer is already set and it is another user\"); //checking refid\r\n        require(_refId < usersCount, \"GoldenLama:: Please provide right ID!\");\r\n\r\n        userInfo[_user].refId = _refId;\r\n        userInfo[_user].userId = usersCount;\r\n        idToHisAddress[usersCount] = _user;\r\n        ++usersCount;\r\n        address referrer = idToHisAddress[_refId];\r\n        addressToHisReferrer[_user] = referrer;\r\n    }\r\n\r\n    function buyCocktail(uint256 _count) external payable {\r\n        require(_count >= prices[0], \"GoldenLama:: Cocktails count to buy should be greater than 600!\");\r\n        require(msg.value == (_count * PRICE_OF_COCKTAIL), \"GoldenLama:: Insufficient funds for buying cocktails!\");\r\n\r\n        payable(owner).transfer(msg.value / 10);\r\n\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        if(user.userId == 0) {\r\n            user.userId = usersCount;\r\n            idToHisAddress[usersCount] = msg.sender;\r\n            ++usersCount;\r\n        }\r\n\r\n        user.balanceOfCocktail += _count;\r\n\r\n        address referrer = addressToHisReferrer[msg.sender];\r\n        uint256 countOfCoctails = msg.value * 7 / 1000 / PRICE_OF_COCKTAIL;\r\n        uint256 countOfCoins = msg.value * 3 / 1000 / PRICE_OF_COIN;\r\n        if(referrer != address(0)) {\r\n            userInfo[referrer].balanceOfCocktail += countOfCoctails;\r\n            userInfo[referrer].balanceOfCoin += countOfCoins;\r\n        } else {\r\n            userInfo[unusedRefWallet].balanceOfCocktail += countOfCoctails;\r\n            userInfo[unusedRefWallet].balanceOfCoin += countOfCoins;\r\n        }\r\n\r\n        emit CocktailBought(msg.sender, _count, block.timestamp);\r\n    }\r\n\r\n    function swapCoinsWithCocktails(uint256 _count) external {\r\n        require(_count > 0, \"GoldenLama:: Coins count to exchange should be greater than 0!\");\r\n        require(userInfo[msg.sender].balanceOfCoin >= _count, \"GoldenLama:: Insufficient balance of coins!\");\r\n        userInfo[msg.sender].balanceOfCoin -= _count - (_count % 100);\r\n        uint256 receivedCocktails = (_count - (_count % 100)) / 100;\r\n        userInfo[msg.sender].balanceOfCocktail += receivedCocktails;\r\n        emit CoinSwap(msg.sender, _count, receivedCocktails, block.timestamp);\r\n    }\r\n\r\n    function sellCoins(uint256 _count) external {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.balanceOfCoin >= _count, \"GoldenLama:: Insufficient balance of cocktails!\");\r\n        user.balanceOfCoin -= _count;\r\n        uint256 amountToTransfer = _count * PRICE_OF_COIN;\r\n\r\n        (bool sent,) = payable(msg.sender).call{value:amountToTransfer}(\"\");\r\n        require(sent , \"GoldenLama:: Not sent!\");\r\n        emit CoinSold(msg.sender, _count, block.timestamp);\r\n    }\r\n\r\n    function purchasePersonage(uint8 _personageType) external {\r\n        require(_personageType < 30, \"GoldenLama:: Invalide type!\");\r\n        require(userInfo[msg.sender].balanceOfCocktail >= prices[_personageType], \"GoldenLama:: Insufficient balance for buying personage!\");\r\n\r\n        userInfo[msg.sender].balanceOfCocktail -= prices[_personageType];\r\n        userInfo[msg.sender].purchasedIds.push(_personageType);\r\n        \r\n        if(_personageType < 6) {\r\n            _purchaselevelOneItem(_personageType);\r\n        }\r\n        if(_personageType > 5 && _personageType < 12) {\r\n            _purchaselevelTwoItem(_personageType);\r\n        }\r\n        if(_personageType > 11 && _personageType < 18) {\r\n            _purchaselevelThreeItem(_personageType);\r\n        }\r\n        if(_personageType > 17 && _personageType < 24) {\r\n            _purchaselevelFourItem(_personageType);\r\n        }\r\n        if(_personageType > 23 && _personageType < 30) {\r\n            _purchaselevelFiveItem(_personageType);\r\n        }\r\n\r\n        emit PersonagePurchased(msg.sender, _personageType, block.timestamp);\r\n\r\n    }\r\n\r\n    function claim() external {\r\n        uint256 profit;\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint256[30] memory _timestamps = user.timestamps;\r\n        uint256 length = user.purchasedIds.length;\r\n\r\n        for(uint8 i; i < length; ++i) {\r\n            if(_timestamps[user.purchasedIds[i]] > 0 && block.timestamp > _timestamps[user.purchasedIds[i]] + 1 days) {\r\n                _timestamps[user.purchasedIds[i]] = block.timestamp;\r\n                profit += profits[user.purchasedIds[i]];\r\n            }  \r\n        }\r\n\r\n        user.timestamps = _timestamps;\r\n        user.balanceOfCoin += profit;\r\n        user.profitDept +=profit;\r\n\r\n        emit Claimed(msg.sender, profit, block.timestamp);\r\n\r\n    }\r\n\r\n    function _setProfits() private {\r\n        require(prices.length != 0, \"GoldenLama:: can not set!\");\r\n        uint256[30] memory _profits = profits;\r\n\r\n        for(uint8 i; i < 30; ++i) {\r\n            _profits[i] = prices[i] * 22 / 10;          \r\n        }\r\n\r\n        profits = _profits;\r\n    }\r\n\r\n    function _purchaselevelOneItem(uint8 _personageType) private {        \r\n        uint256[30] memory _timestamps = userInfo[msg.sender].timestamps;\r\n\r\n        require(\r\n            (_personageType == 0 && _timestamps[0] == 0) || // Sand is always allowed\r\n            (_personageType == 1 && _timestamps[1] == 0 && _timestamps[0] > 0) || // Sky requires Sand\r\n            (_personageType == 2 && _timestamps[2] == 0 && _timestamps[0] > 0 && _timestamps[1] > 0) || // Sea requires Sand and Sky\r\n            (_personageType == 3 && _timestamps[3] == 0 && _timestamps[0] > 0 && _timestamps[1] > 0 && _timestamps[2] > 0) || // Cloud requires Sand, Sky, and Sea\r\n            (_personageType == 4 && _timestamps[4] == 0 && _timestamps[0] > 0 && _timestamps[1] > 0 && _timestamps[2] > 0 && _timestamps[3] > 0) || // Sun requires Sand, Sky, Sea, and Cloud\r\n            (_personageType == 5 && _timestamps[5] == 0 && _timestamps[0] > 0 && _timestamps[1] > 0 && _timestamps[2] > 0 && _timestamps[3] > 0 && _timestamps[4] > 0) , // Gull requires Sand, Sky, Sea, Cloud and Sun\r\n            \"GoldenLama:: You must buy the previous items or you already purchased this item!\"\r\n        );\r\n\r\n        // Update the corresponding timestamp       \r\n        _timestamps[_personageType] = block.timestamp;\r\n\r\n        userInfo[msg.sender].timestamps = _timestamps;\r\n\r\n    }\r\n\r\n    function _purchaselevelTwoItem(uint8 _personageType) private {        \r\n        uint256[30] memory _timestamps = userInfo[msg.sender].timestamps;\r\n        require(\r\n            (_personageType == 6 && _timestamps[6] == 0) || // Palm is always allowed\r\n            (_personageType == 7 && _timestamps[7] == 0 && _timestamps[6] > 0) || // Coconut requires Palm\r\n            (_personageType == 8 && _timestamps[8] == 0 && _timestamps[6] > 0 && _timestamps[7] > 0) || // Fish requires Coconut and Palm\r\n            (_personageType == 9 && _timestamps[9] == 0 && _timestamps[6] > 0 && _timestamps[7] > 0 && _timestamps[8] > 0) || // Crab requires Palm, Coconut and Fish\r\n            (_personageType == 10 && _timestamps[10] == 0 && _timestamps[6] > 0 && _timestamps[7] > 0 && _timestamps[8] > 0 && _timestamps[9] > 0) || // Shells requires Palm, Coconut, Fish and Crab\r\n            (_personageType == 11 && _timestamps[11] == 0 && _timestamps[6] > 0 && _timestamps[7] > 0 && _timestamps[8] > 0 && _timestamps[9] > 0 && _timestamps[10] > 0), // Stones requires Palm, Coconut, Fish, Crab and Shells\r\n            \"GoldenLama:: You must buy the previous items or you already purchased this item!\"\r\n        );\r\n\r\n        // Update the corresponding timestamp\r\n        _timestamps[_personageType] = block.timestamp;\r\n\r\n        userInfo[msg.sender].timestamps = _timestamps;\r\n\r\n    }\r\n\r\n    function _purchaselevelThreeItem(uint8 _personageType) private {\r\n        require(block.timestamp > startTimestamp + 11 days, \"GoldenLama:: Third line items are not available yet!\");\r\n        \r\n        uint256[30] memory _timestamps = userInfo[msg.sender].timestamps;\r\n\r\n        require(\r\n            (_personageType == 12 && _timestamps[12] == 0) || // Sand castel is always allowed\r\n            (_personageType == 13 && _timestamps[13] == 0 && _timestamps[12] > 0) || // Chaise Lounge requires Sand Castel\r\n            (_personageType == 14 && _timestamps[14] == 0 && _timestamps[12] > 0 && _timestamps[13] > 0) || // Towel requires Sand Castel and Chaise Lounge \r\n            (_personageType == 15 && _timestamps[15] == 0 && _timestamps[12] > 0 && _timestamps[13] > 0 && _timestamps[14] > 0) || // Sunscreen requires Sand Castel, Chaise Lounge and Towel\r\n            (_personageType == 16 && _timestamps[16] == 0 && _timestamps[12] > 0 && _timestamps[13] > 0 && _timestamps[14] > 0 && _timestamps[15] > 0) || // Basket requires Sand Castel, Chaise Lounge, Towel and Sunscreen\r\n            (_personageType == 17 && _timestamps[17] == 0 && _timestamps[12] > 0 && _timestamps[13] > 0 && _timestamps[14] > 0 && _timestamps[15] > 0 && _timestamps[16] > 0), // Umbrella requires Sand Castel, Chaise Lounge, Towel, Sunscreen and Basket \r\n            \"GoldenLama:: You must buy the previous items or you already purchased this item!\"\r\n        );\r\n        \r\n        // Update the corresponding timestamp\r\n        _timestamps[_personageType] = block.timestamp;\r\n\r\n        userInfo[msg.sender].timestamps = _timestamps;\r\n        \r\n    }\r\n\r\n    function _purchaselevelFourItem(uint8 _personageType) private {\r\n        require(block.timestamp > startTimestamp + 21 days, \"GoldenLama:: Fourth line items are not available yet!\");\r\n\r\n        uint256[30] memory _timestamps = userInfo[msg.sender].timestamps;\r\n\r\n        require(\r\n            (_personageType == 18 && _timestamps[18] == 0) || // Boa is always allowed\r\n            (_personageType == 19 && _timestamps[19] == 0 && _timestamps[18] > 0) || // Sunglasses requires Boa\r\n            (_personageType == 20 && _timestamps[20] == 0 && _timestamps[18] > 0 && _timestamps[19] > 0) || // Baseball Cap requires Boa and Sunglasses \r\n            (_personageType == 21 && _timestamps[21] == 0 && _timestamps[18] > 0 && _timestamps[19] > 0 && _timestamps[20] > 0) || // Swimsuit Top requires Boa, Sunglasses and Baseball Cap\r\n            (_personageType == 22 && _timestamps[22] == 0 && _timestamps[18] > 0 && _timestamps[19] > 0 && _timestamps[20] > 0 && _timestamps[21] > 0) || // Swimsuit Briefs requires Boa, Sunglasses, Baseball Cap and Swimsuit Top\r\n            (_personageType == 23 && _timestamps[23] == 0 && _timestamps[18] > 0 && _timestamps[19] > 0 && _timestamps[20] > 0 && _timestamps[21] > 0 && _timestamps[22] > 0), // Crocs requires Boa, Sunglasses, Baseball Cap, Swimsuit Top and Swimsuit Briefs \r\n            \"GoldenLama:: You must buy the previous items or you already purchased this item!\"\r\n        );\r\n\r\n        // Update the corresponding timestamp\r\n        _timestamps[_personageType] = block.timestamp;\r\n\r\n        userInfo[msg.sender].timestamps = _timestamps;\r\n\r\n    }\r\n\r\n    function _purchaselevelFiveItem(uint8 _personageType) private {\r\n        require(block.timestamp > startTimestamp + 41 days, \"GoldenLama:: Fifth line items are not available yet!\");\r\n       \r\n        uint256[30] memory _timestamps = userInfo[msg.sender].timestamps;\r\n\r\n        require(\r\n            (_personageType == 24 && _timestamps[24] == 0) || //  Flamingo Ring is always allowed\r\n            (_personageType == 25 && _timestamps[25] == 0 && _timestamps[24] > 0) || // Drink requires  Flamingo Ring\r\n            (_personageType == 26 && _timestamps[26] == 0 && _timestamps[24] > 0 && _timestamps[25] > 0) || // Golden Color Cap requires  Flamingo Ring and Drink \r\n            (_personageType == 27 && _timestamps[27] == 0 && _timestamps[24] > 0 && _timestamps[25] > 0 && _timestamps[26] > 0) || // Swimsuit Top requires  Flamingo Ring, Drink and Golden Color Cap\r\n            (_personageType == 28 && _timestamps[28] == 0 && _timestamps[24] > 0 && _timestamps[25] > 0 && _timestamps[26] > 0 && _timestamps[27] > 0) || // Smartphone requires  Flamingo Ring, Drink, Golden Color Cap and Swimsuit Top\r\n            (_personageType == 29 && _timestamps[29] == 0 && _timestamps[24] > 0 && _timestamps[25] > 0 && _timestamps[26] > 0 && _timestamps[27] > 0 && _timestamps[28] > 0), // Yacht requires  Flamingo Ring, Drink, Golden Color Cap, Swimsuit Top and Smartphone \r\n            \"GoldenLama:: You must buy the previous items or you already purchased this item!\"\r\n        );\r\n\r\n        // Update the corresponding timestamp\r\n        _timestamps[_personageType] = block.timestamp;\r\n\r\n        userInfo[msg.sender].timestamps = _timestamps;\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint32[30]\",\"name\":\"_prices\",\"type\":\"uint32[30]\"},{\"internalType\":\"address\",\"name\":\"_unusedRefWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CocktailBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CoinSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"countOfCoins\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countOfReceivedCoctails\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CoinSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"typeOfItem\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PersonagePurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refId\",\"type\":\"uint256\"}],\"name\":\"addUserToMlm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToHisReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"buyCocktail\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitDept\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfCocktail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfCoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256[30]\",\"name\":\"timestamps\",\"type\":\"uint256[30]\"},{\"internalType\":\"uint8[]\",\"name\":\"purchasedIds\",\"type\":\"uint8[]\"}],\"internalType\":\"struct GoldenLama.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToHisAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_personageType\",\"type\":\"uint8\"}],\"name\":\"purchasePersonage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"sellCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdminStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"swapCoinsWithCocktails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GoldenLama", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000025800000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000000000000000070800000000000000000000000000000000000000000000000000000000000009600000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000000000000000000000000000000000000000106800000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000157c00000000000000000000000000000000000000000000000000000000000019640000000000000000000000000000000000000000000000000000000000001b580000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000232800000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000002ee00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000004e2000000000000000000000000000000000000000000000000000000000000061a8000000000000000000000000000000000000000000000000000000000000753000000000000000000000000000000000000000000000000000000000000088b80000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000fde8000000000000000000000000000000000000000000000000000000000001388000000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000001d4c000000000000000000000000000000000000000000000000000000000000249f0000000000000000000000000000000000000000000000000000000000002bf20000000000000000000000000000000000000000000000000000000000003827000000000000000000000000000000000000000000000000000000000000493e00000000000000000000000009e4b4dc4c9abd92df68fb714ed8542109f17b246", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://41d948a4464937504886fafe84ab1674ef5d13a19734382cd9ed684f3774dd8e"}