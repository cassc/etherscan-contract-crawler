{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n// File: contracts/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// File: contracts/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: contracts/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n// File: contracts/WinkPrivateSale_nocomments.sol\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\ncontract WinkPrivateSale is Ownable {\r\n    event Purchase(address indexed buyer, uint256 wink, uint256 usdt);\r\n\r\n    IERC20 public USDT;\r\n\r\n    address public treasuryAddress;\r\n\r\n    mapping(address => UserData) users;\r\n\r\n    struct UserData {\r\n        uint256 bought;\r\n        uint256 discountedBought;\r\n        uint256 bonus;\r\n        uint256 whitelist;\r\n    }\r\n\r\n    uint256 totalBought = 0;\r\n    uint256 price = 12;\r\n    uint256 discountedPrice = 11;\r\n    uint256 minimum = 100_000_00000_00000_00000;\r\n    \r\n    uint256 baseLimit = 0;\r\n\r\n    constructor() {\r\n        USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    }\r\n\r\n    function setUSDT(address _usdt) public onlyOwner {\r\n        USDT = IERC20(_usdt);\r\n    }\r\n\r\n    function setMinimum(uint256 _minimum) public onlyOwner {\r\n        minimum = _minimum;\r\n    }\r\n\r\n    function getMinimum() public view returns (uint256) {\r\n        return minimum;\r\n    }\r\n\r\n    \r\n\r\n\r\n    function buyDiscountedWink(uint256 USDTAmount) public {\r\n        uint256 winkAmount = USDTAmount * 1e3 / discountedPrice;\r\n\r\n        require(users[msg.sender].discountedBought < users[msg.sender].whitelist * 1e3 / discountedPrice, \"Address purchase limit reached\");\r\n\r\n        if(users[msg.sender].discountedBought + winkAmount > users[msg.sender].whitelist * 1e3 / discountedPrice) {\r\n            winkAmount = users[msg.sender].whitelist - users[msg.sender].whitelist * 1e3 / discountedPrice;\r\n        }\r\n\r\n        USDTAmount = winkAmount * discountedPrice / 1e3;\r\n\r\n        require(USDTAmount >= minimum, \"Minimum amount not reached\");\r\n\r\n        uint256 USDTBalanceOfUser = USDT.balanceOf(msg.sender);\r\n        require(USDTBalanceOfUser >= USDTAmount, \"You dont have enough balance\");\r\n        \r\n        uint256 allowance = USDT.allowance(msg.sender, address(this));\r\n        require(allowance >= USDTAmount, \"Check allowance\");\r\n\r\n        USDT.transferFrom(msg.sender, address(this), USDTAmount);\r\n\r\n        users[msg.sender].discountedBought += winkAmount;\r\n\r\n        emit Purchase(msg.sender, winkAmount, USDTAmount);\r\n    }\r\n\r\n    function buyBaseWink(uint256 USDTAmount) public {\r\n        uint256 winkAmount = USDTAmount * 1e3 / price;\r\n\r\n        require(totalBought < baseLimit, \"Purchase limit reached\");\r\n\r\n        if(totalBought + winkAmount > baseLimit) {\r\n            winkAmount = baseLimit - totalBought;\r\n        }\r\n\r\n        USDTAmount = winkAmount * price / 1e3;\r\n\r\n        require(USDTAmount >= minimum, \"Minimum amount not reached\");\r\n\r\n        uint256 USDTBalanceOfUser = USDT.balanceOf(msg.sender);\r\n        require(USDTBalanceOfUser >= USDTAmount, \"You dont have enough balance\");\r\n        \r\n        uint256 allowance = USDT.allowance(msg.sender, address(this));\r\n        require(allowance >= USDTAmount, \"Check allowance\");\r\n\r\n        USDT.transferFrom(msg.sender, address(this), USDTAmount);\r\n\r\n        users[msg.sender].bought += winkAmount;\r\n        totalBought += winkAmount;\r\n\r\n        emit Purchase(msg.sender, winkAmount, USDTAmount);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function setPrice(uint256 _price) public onlyOwner {\r\n        price = _price;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256) {\r\n        return price;\r\n    }\r\n\r\n    function setDiscountedPrice(uint256 _discountedPrice) public onlyOwner {\r\n        discountedPrice = _discountedPrice;\r\n    }\r\n\r\n    function getDiscountedPrice() public view returns (uint256) {\r\n        return discountedPrice;\r\n    }\r\n\r\n\r\n\r\n\r\n    function setBonus(address _address, uint256 _amount) public onlyOwner {\r\n        users[_address].bonus = _amount;\r\n    }\r\n\r\n    function getUserData(address _address) public view returns (uint256 bought, uint256 discountedBought, uint256 bonus, uint256 whitelist) {\r\n        bought = users[_address].bought;\r\n        discountedBought = users[_address].discountedBought;\r\n        bonus = users[_address].bonus;\r\n        whitelist = users[_address].whitelist;\r\n    }\r\n\r\n    function getTotalBought() public view returns (uint256) {\r\n        return totalBought;\r\n    }\r\n\r\n\r\n\r\n\r\n    function setBaseLimit(uint256 _baseLimit) public onlyOwner {\r\n        baseLimit = _baseLimit;\r\n    }\r\n\r\n    function getBaseLimit() public view returns (uint256) {\r\n        return baseLimit;\r\n    }\r\n\r\n    function setAddressLimit(address _address, uint256 _addressLimit) public onlyOwner {\r\n        users[_address].whitelist = _addressLimit;\r\n    }\r\n \r\n    \r\n\r\n\r\n    function withdrawUSDT() public onlyOwner {\r\n        uint256 USDTBalance = USDT.balanceOf(address(this));\r\n        USDT.transfer(treasuryAddress, USDTBalance);\r\n    }\r\n\r\n    function setTreasuryAddress(address _treasuryAddress) public onlyOwner {\r\n        treasuryAddress = _treasuryAddress;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wink\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmount\",\"type\":\"uint256\"}],\"name\":\"buyBaseWink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmount\",\"type\":\"uint256\"}],\"name\":\"buyDiscountedWink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiscountedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountedBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whitelist\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addressLimit\",\"type\":\"uint256\"}],\"name\":\"setAddressLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseLimit\",\"type\":\"uint256\"}],\"name\":\"setBaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountedPrice\",\"type\":\"uint256\"}],\"name\":\"setDiscountedPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"setUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WinkPrivateSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://30446d33e6cdbc13e47b384cd0cd5c88c0252ad91c128d69fcf2f862e99c7658"}