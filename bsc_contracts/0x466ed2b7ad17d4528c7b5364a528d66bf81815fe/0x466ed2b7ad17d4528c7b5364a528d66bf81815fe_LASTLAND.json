{"SourceCode": "// SPDX-License-Identifier: MIT\r\n//9ecc02a53f8032a599c51cbc7f7c474835c40cb0e92543f7995708cce9e06df9\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract ForgeManager {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Forge {\r\n        uint256 checkpoint;\r\n        uint256 depositedAmount;\r\n        uint256 harvestableAmount;\r\n        uint256 lockedAmount;\r\n        uint256 unlockTime;\r\n    }\r\n\r\n    uint256 constant public DAILY_ROI = 8; //0.8%\r\n    uint256 constant public PERCENT_DIVIDER = 1000;\r\n\r\n    uint256 constant public TIME_STEP = 24 hours;\r\n\r\n    mapping(address => Forge) public forges; \r\n\r\n    event onDeposit(address indexed userAddr, uint256 amount, uint256 time);\r\n    event onUnlock(address indexed userAddr, uint256 amount, uint256 time);\r\n    event onHarvest(address indexed userAddr, uint256 amount, uint256 time);\r\n    event onUnstake(address indexed userAddr, uint256 amount, uint256 time);\r\n\r\n\r\n    function deposit(uint256 amount, address userAddr) internal {\r\n        syncForge(userAddr);\r\n\r\n        forges[userAddr].depositedAmount = forges[userAddr].depositedAmount.add(amount);\r\n        forges[userAddr].checkpoint = block.timestamp;\r\n\r\n        emit onDeposit(userAddr,amount,block.timestamp);\r\n    }\r\n\r\n    function syncForge(address userAddr) internal {\r\n        uint256 dividends = getForgeDividends(userAddr);\r\n\r\n        if(dividends > 0) {\r\n            forges[userAddr].harvestableAmount = forges[userAddr].harvestableAmount.add(dividends);\r\n        }\r\n    }\r\n\r\n    function unlock(address userAddr) internal {\r\n        require(forges[userAddr].depositedAmount > 0, \"nothing to unlock\");\r\n\r\n        syncForge(userAddr);\r\n\r\n        Forge storage forge = forges[userAddr];\r\n\r\n        forge.lockedAmount = forge.lockedAmount.add(forge.depositedAmount);\r\n        forge.depositedAmount = 0;\r\n\r\n        forge.unlockTime = block.timestamp.add(24 hours);\r\n\r\n        emit onUnlock(userAddr, forge.lockedAmount,block.timestamp);\r\n\r\n    }\r\n\r\n    function harvest(address userAddr) internal returns(uint256){\r\n        uint256 dividends = getForgeDividends(userAddr);\r\n        uint256 claimableAmount = getClaimableAmount(userAddr);\r\n        uint256 harvestableAmount = forges[userAddr].harvestableAmount;\r\n\r\n        require(dividends.add(claimableAmount).add(harvestableAmount) > 0, \"nothing to harvest\");\r\n\r\n        forges[userAddr].checkpoint = block.timestamp;\r\n        \r\n        if(harvestableAmount > 0) {\r\n            dividends = dividends.add(harvestableAmount);\r\n            forges[userAddr].harvestableAmount = 0;\r\n        }\r\n\r\n        if(claimableAmount > 0) {\r\n            uint256 unstakedAmount = unstake(userAddr);\r\n            dividends = dividends.add(unstakedAmount);\r\n        }\r\n\r\n\r\n        emit onHarvest(userAddr, dividends, block.timestamp);\r\n\r\n        return dividends;\r\n\r\n    }\r\n\r\n    function unstake(address userAddr) internal returns(uint256){\r\n        uint256 claimableAmount = getClaimableAmount(userAddr);\r\n\r\n        forges[userAddr].lockedAmount = 0;\r\n\r\n        emit onUnstake(userAddr, claimableAmount, block.timestamp);\r\n\r\n        return claimableAmount;\r\n\r\n    }\r\n\r\n    function getClaimableAmount(address userAddr) public view returns(uint256){\r\n        return block.timestamp >= forges[userAddr].unlockTime ? forges[userAddr].lockedAmount : 0; \r\n    }\r\n\r\n    function getForgeDividends(address userAddr) public view returns(uint256 totalAmount){\r\n        Forge memory forge = forges[userAddr];\r\n        uint256 share = forge.depositedAmount.mul(DAILY_ROI).div(PERCENT_DIVIDER);\r\n\r\n        uint256 from = forge.checkpoint;\r\n        uint256 to = block.timestamp;\r\n\r\n        totalAmount = share.mul(to.sub(from)).div(TIME_STEP);\r\n\r\n    }\r\n\r\n    function getHarvestableAmount(address userAddr) public view returns(uint256) {\r\n        uint256 dividends = getForgeDividends(userAddr);\r\n        uint256 claimableAmount = getClaimableAmount(userAddr);\r\n\r\n        uint256 totalAmount = dividends.add(claimableAmount).add(forges[userAddr].harvestableAmount);\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function getUnlockTimer(address userAddr) public view returns(uint256) {\r\n        return block.timestamp >= forges[userAddr].unlockTime ? 0 : forges[userAddr].unlockTime.sub(block.timestamp);\r\n    }\r\n\r\n    function getForgeData(address userAddr) public view returns(uint256 metalInForge, uint256 harvestableMetal, uint256 lockedMetal, uint256 timer) {\r\n        metalInForge = forges[userAddr].depositedAmount;\r\n        harvestableMetal = getHarvestableAmount(userAddr);\r\n        lockedMetal = forges[userAddr].lockedAmount;\r\n        timer = getUnlockTimer(userAddr);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\ncontract LASTLAND is ForgeManager {\r\n    using SafeMath for uint256;\r\n\r\n    struct FuelTank {\r\n        uint256 cost;\r\n        uint256 capacity;\r\n    }\r\n\r\n    struct Car {\r\n        uint8 _type;\r\n        uint256 cost;\r\n        uint256 productivity; //per hour\r\n    }\r\n\r\n    struct Partners {\r\n        uint256[3] referrals;\r\n        uint256[3] coinRewards;\r\n        uint256[3] metalRewards;\r\n        address referrer;\r\n    }\r\n\r\n    struct Balance {\r\n        uint256 coins;\r\n        uint256 metal;\r\n    }\r\n\r\n    struct Stats {\r\n        uint256 totalDeposited;\r\n        uint256 totalWithdrawn;\r\n    }\r\n\r\n    struct Wastelands {\r\n        uint256 checkpoint;\r\n        uint256 metalToGet;\r\n        uint256 time;\r\n    }\r\n\r\n    struct Equipment {\r\n        uint8 _type;\r\n        uint256 cost;\r\n        uint256 bonus;\r\n    }\r\n\r\n    struct User {\r\n        Stats stats;\r\n        Balance balance;\r\n        Partners partners;\r\n        Car[] cars;\r\n        Equipment[] equipment;\r\n        Wastelands wastelands;\r\n        uint256 metalStorage;\r\n        uint256 fuelTankLevel;\r\n    }\r\n\r\n    uint256 constant public PERCENTS_DIVIDER = 10_000;\r\n\r\n    uint256 constant public MARKETING_FEE = 700; //7%\r\n    uint256 constant public DEV_FEE = 300; // 3%\r\n\r\n    uint256 constant public MIN_PURCHASE = 0.05 ether;\r\n\r\n    uint256 constant public COINS_PRICE = 0.001 ether; // 1 BNB = 1000 COINS\r\n    uint256 constant public METAL_PRICE = 0.00001 ether; // 1 BNB = 100000 METAL\r\n\r\n    uint256 constant public REINVESTMENT_BONUS = 500; //5%\r\n\r\n    mapping(address => User) public users;\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalCars;\r\n    uint256 public totalUsers;\r\n\r\n    uint256 public launchTime;\r\n\r\n    address private marketingFund;\r\n    address private dev;\r\n\r\n    event coinsBought(uint256 coins, address indexed userAddr, uint256 time);\r\n    event carBought(uint8 _type, address indexed userAddr, uint256 time);\r\n    event enteredInWastelands(address indexed userAddr, uint256 metalToGet, uint256 _hours);\r\n    event metalClaimed(address indexed userAddr, uint256 amount, uint256 time);\r\n    event fuelTankUpgraded(address indexed userAddr, uint256 lvl, uint256 time);\r\n    event equipmentBought(address indexed userAddr, uint8 _type, uint256 time);\r\n    event metalSold(address indexed userAddr, uint256 amount, uint256 time);\r\n\r\n\r\n    constructor(uint256 time, address marketingAddr, address devAddr) {\r\n        require(!isContract(marketingAddr));\r\n        require(!isContract(devAddr));\r\n\r\n        marketingFund = marketingAddr;\r\n        dev = devAddr;\r\n\r\n        launchTime = time;\r\n    }\r\n\r\n\r\n    function buyCoins(address referrer) public payable {\r\n        require(isLaunched(), \"contract hasn`t launched yet\");\r\n        require(msg.sender == tx.origin, \"not allowed\");\r\n        require(msg.value >= MIN_PURCHASE,'insufficient amount');\r\n        require(referrer != msg.sender, \"wrong referrer\"); \r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        payFee(msg.value);\r\n        recordReferral(referrer,msg.sender);\r\n        payRefFee(msg.sender,msg.value);\r\n\r\n        if(user.stats.totalDeposited == 0) {\r\n            totalUsers = totalUsers.add(1);\r\n        }\r\n\r\n        uint256 coinsAmount = fromBnbToCoins(msg.value);\r\n\r\n        user.balance.coins = user.balance.coins.add(coinsAmount);\r\n        user.stats.totalDeposited = user.stats.totalDeposited.add(msg.value);\r\n\r\n        totalStaked = totalStaked.add(msg.value);\r\n\r\n        emit coinsBought(coinsAmount, msg.sender, block.timestamp);\r\n\r\n    }\r\n\r\n    function buyCar(uint8 _type) public {\r\n        require(_type > 0 && _type < 8, \"wrong car type\");\r\n\r\n        Car memory car = getCarByType(_type);\r\n        User storage user = users[msg.sender];\r\n\r\n        require(user.balance.coins >= car.cost, \"insufficient coins amount\");\r\n\r\n        user.balance.coins = user.balance.coins.sub(car.cost);\r\n        user.cars.push(car);\r\n\r\n        totalCars = totalCars.add(1);\r\n\r\n        emit carBought(_type, msg.sender, block.timestamp);\r\n    }  \r\n\r\n    function enterWastelands(uint256 _hours) public {\r\n        require(users[msg.sender].cars.length > 0, \"user doesn`t have cars\");\r\n        require(!inWastelands(msg.sender), \"cars are already in wastelands\");\r\n        require(_hours > 0, \"wrong time\");\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        FuelTank memory fuelTank = getFuelTankByLvl(user.fuelTankLevel);\r\n\r\n        uint256 unixTimeInWastelands = _hours.mul(1 hours);\r\n\r\n        require(unixTimeInWastelands <= fuelTank.capacity, \"capacity not enough\");\r\n\r\n        syncStorage(msg.sender);\r\n\r\n        (,,uint256 metalToGet) = getUserTotalProductivity(msg.sender,_hours); \r\n\r\n        user.wastelands.checkpoint = block.timestamp.add(unixTimeInWastelands);\r\n        user.wastelands.metalToGet = metalToGet;\r\n        user.wastelands.time = unixTimeInWastelands;\r\n\r\n\r\n        emit enteredInWastelands(msg.sender, user.wastelands.metalToGet,_hours);\r\n\r\n\r\n\r\n    }  \r\n\r\n    function buyEquipment(uint8 _type) public {\r\n        require(_type > 0 && _type < 13, \"wrong equipment type\");\r\n        require(users[msg.sender].stats.totalDeposited != 0, \"user not found\");\r\n        require(!hasEquipment(msg.sender, _type), \"user already has an equipment of this type\");\r\n\r\n        Equipment memory equipment = getEquipmentByType(_type);\r\n\r\n        require(users[msg.sender].balance.coins >= equipment.cost, \"insufficient balance\");\r\n\r\n        users[msg.sender].balance.coins = users[msg.sender].balance.coins.sub(equipment.cost);\r\n        users[msg.sender].equipment.push(equipment);\r\n\r\n\r\n        emit equipmentBought(msg.sender, _type, block.timestamp);\r\n\r\n\r\n    }\r\n\r\n    function buyCoinsForMetal(uint256 amount) public {\r\n        require(users[msg.sender].balance.metal >= amount, \"amount exceeds balance\");\r\n\r\n        uint256 coins = fromMetalToCoins(amount);\r\n        uint256 bonusCoins = coins.mul(REINVESTMENT_BONUS).div(PERCENTS_DIVIDER);\r\n\r\n        users[msg.sender].balance.metal = users[msg.sender].balance.metal.sub(amount);\r\n        users[msg.sender].balance.coins = users[msg.sender].balance.coins.add(coins).add(bonusCoins);\r\n\r\n        uint256 bnbAmount = fromCoinsToBnb(coins);\r\n\r\n        payFee(bnbAmount);\r\n\r\n        emit coinsBought(coins.add(bonusCoins), msg.sender, block.timestamp);\r\n    }\r\n\r\n    function sellMetal(uint256 amount) public {\r\n        require(users[msg.sender].balance.metal >= amount, \"amount exceeds balance\");\r\n\r\n        uint256 payout = fromMetalToBnb(amount);\r\n\r\n        users[msg.sender].balance.metal = users[msg.sender].balance.metal.sub(amount);\r\n        users[msg.sender].stats.totalWithdrawn = users[msg.sender].stats.totalWithdrawn.add(payout);\r\n\r\n\r\n        payable(msg.sender).transfer(payout);\r\n\r\n        emit metalSold(msg.sender,amount,block.timestamp);\r\n\r\n    }\r\n\r\n\r\n    function claimMetal() public {\r\n\r\n        uint256 claimableMetal = getClaimableMetalAmount(msg.sender);\r\n\r\n        require( claimableMetal > 0, \"nothing to claim\");\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        user.metalStorage = 0;\r\n\r\n        if(!inWastelands(msg.sender)) {\r\n            user.wastelands.metalToGet = 0;\r\n        }\r\n\r\n        user.balance.metal = user.balance.metal.add(claimableMetal);\r\n\r\n        emit metalClaimed(msg.sender, claimableMetal, block.timestamp);\r\n\r\n    }\r\n\r\n    function forgeMetal(uint256 amount) public {\r\n        require(amount > 0, \"wrong amount\"); \r\n        require(users[msg.sender].balance.metal >= amount, \"insufficient amount\");\r\n\r\n        users[msg.sender].balance.metal = users[msg.sender].balance.metal.sub(amount);\r\n        \r\n        deposit(amount,msg.sender);\r\n    }\r\n\r\n    function harvestForgedMetal() public {\r\n        uint256 harvestedAmount = harvest(msg.sender);\r\n\r\n        users[msg.sender].balance.metal = users[msg.sender].balance.metal.add(harvestedAmount);\r\n    }\r\n\r\n    function unlockMetal() public {\r\n        unlock(msg.sender);\r\n    }\r\n\r\n\r\n    function syncStorage(address userAddr) internal {\r\n        if(users[userAddr].wastelands.metalToGet > 0) {\r\n            users[userAddr].metalStorage = users[userAddr].metalStorage.add(users[userAddr].wastelands.metalToGet);\r\n        }\r\n    }\r\n\r\n\r\n    function upgradeFuelTank() public {\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        require(user.stats.totalDeposited != 0, \"user not found\");\r\n        require(user.fuelTankLevel < 2, \"fuel tank has max lvl\");\r\n        \r\n        FuelTank memory fuelTank = getFuelTankByLvl(user.fuelTankLevel.add(1));\r\n\r\n        require(user.balance.coins >= fuelTank.cost, \"insufficient coins balance\");\r\n\r\n        user.balance.coins = user.balance.coins.sub(fuelTank.cost);\r\n        user.fuelTankLevel = user.fuelTankLevel.add(1);\r\n\r\n        emit fuelTankUpgraded(msg.sender,user.fuelTankLevel,block.timestamp);\r\n    }\r\n\r\n    function recordReferral(address referrer, address sender) internal {\r\n\r\n        if(users[sender].partners.referrer == address(0)) {\r\n            \r\n            if(referrer != address(0) && users[referrer].stats.totalDeposited != 0) {\r\n                users[sender].partners.referrer = referrer;\r\n            } \r\n\r\n            address upline = users[sender].partners.referrer;\r\n\r\n\r\n            for(uint8 i = 0; i < 3; i++) {\r\n                    if(upline != address(0)) {\r\n                        users[upline].partners.referrals[i] = users[upline].partners.referrals[i].add(1);\r\n                        upline = users[upline].partners.referrer;\r\n                    } else break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function payRefFee(address sender, uint256 value) internal {\r\n\r\n        if (users[sender].partners.referrer != address(0)) {\r\n\r\n\t\t\taddress upline = users[sender].partners.referrer;\r\n\r\n\t\t\tfor (uint8 i = 0; i < 3; i++) {  \r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\r\n    \t\t\t\t\tuint256 amount = value.mul(getRefRewards(i)).div(PERCENTS_DIVIDER);\r\n\r\n                        uint256 coinsAmount = fromBnbToCoins(amount).div(2); //50% in coins\r\n                        uint256 metalAmount = fromBnbToMetal(amount).div(2); //50% in metal\r\n\r\n    \t\t\t\t\t\r\n    \t\t\t\t\tusers[upline].partners.coinRewards[i] = users[upline].partners.coinRewards[i].add(coinsAmount); \r\n                        users[upline].partners.metalRewards[i] = users[upline].partners.metalRewards[i].add(metalAmount); \r\n                        users[upline].balance.coins = users[upline].balance.coins.add(coinsAmount);\r\n                        users[upline].balance.metal = users[upline].balance.metal.add(metalAmount);\r\n\t\t\t\t    \r\n\t\t\t\t\t\r\n\t\t\t\t\tupline = users[upline].partners.referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\r\n\t\t}\r\n    }\r\n\r\n\r\n    function payFee(uint256 amount) internal {\r\n\r\n        uint256 marketingFee = amount.mul(MARKETING_FEE).div(PERCENTS_DIVIDER);\r\n        uint256 devFee = amount.mul(DEV_FEE).div(PERCENTS_DIVIDER);\r\n\r\n        payable(marketingFund).transfer(marketingFee);\r\n        payable(dev).transfer(devFee);\r\n\r\n    }\r\n\r\n    function getClaimableMetalAmount(address userAddr) public view returns(uint256) {\r\n\r\n\r\n        return !inWastelands(userAddr) ? users[userAddr].metalStorage.add(users[userAddr].wastelands.metalToGet) : users[userAddr].metalStorage;\r\n        \r\n    }\r\n\r\n\r\n    function getUserCarsProductivity(address userAddr, uint256 _hours) public view returns(uint256) {\r\n        uint256 totalMetal;\r\n        User memory user = users[userAddr];\r\n\r\n        for(uint256 i = 0; i < user.cars.length; i++) {\r\n            uint256 carRevenue = user.cars[i].productivity.mul(_hours);\r\n            totalMetal = totalMetal.add(carRevenue);\r\n        }\r\n\r\n        return totalMetal;\r\n    } \r\n\r\n    function getUserEquipmentBonus(address userAddr) public view returns(uint256) {\r\n        uint256 totalBonus;\r\n        User memory user = users[userAddr];\r\n\r\n        for(uint256 i = 0; i < user.equipment.length; i++) {\r\n            uint256 bonus = user.equipment[i].bonus;\r\n            totalBonus = totalBonus.add(bonus);\r\n        }\r\n\r\n        return totalBonus;\r\n    }\r\n\r\n    function getUserTotalProductivity(address userAddr, uint256 _hours) public view returns(uint256 carsProductivity, uint256 bonusesProductivity, uint256 totalProductivity) {\r\n\r\n        uint256 bonuses = getUserEquipmentBonus(userAddr);\r\n\r\n        carsProductivity = getUserCarsProductivity(userAddr,_hours);\r\n        bonusesProductivity = carsProductivity.mul(bonuses).div(PERCENTS_DIVIDER);\r\n        totalProductivity = carsProductivity.add(bonusesProductivity);\r\n\r\n    }\r\n\r\n\r\n    function hasEquipment(address userAddr, uint8 _type) public view returns(bool){\r\n\r\n        bool flag = false;\r\n\r\n        for(uint256 i = 0; i < users[userAddr].equipment.length; i++) {\r\n            if(users[userAddr].equipment[i]._type == _type) {\r\n                flag = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n\r\n    function inWastelands(address userAddr) public view returns(bool) {\r\n        return users[userAddr].wastelands.checkpoint >= block.timestamp;\r\n    }\r\n\r\n    function getRefRewards(uint8 index) internal pure returns(uint256) {\r\n        return[700, 300, 100][index];\r\n    }\r\n     \r\n    function isLaunched() public view returns(bool) {\r\n        return block.timestamp >= launchTime;\r\n    }\r\n\r\n    function fromBnbToCoins(uint256 amount) public pure returns(uint256) {\r\n        return amount.div(COINS_PRICE);\r\n    }\r\n\r\n    function fromBnbToMetal(uint256 amount) public pure returns(uint256) {\r\n        return amount.div(METAL_PRICE);\r\n    }\r\n\r\n    function fromMetalToBnb(uint256 amount) public pure returns(uint256) {\r\n        return amount.mul(METAL_PRICE);\r\n    }\r\n\r\n    function fromCoinsToBnb(uint256 amount) public pure returns(uint256) {\r\n        return amount.mul(COINS_PRICE);\r\n    }\r\n\r\n    function fromMetalToCoins(uint256 amount) public pure returns(uint256) {\r\n        return amount.div(100);\r\n    }\r\n\r\n    function getFuelTankByLvl(uint256 lvl) public pure returns(FuelTank memory) {\r\n        if(lvl == 0) {\r\n            return FuelTank(0, 4 hours);\r\n        } else if(lvl == 1) {\r\n            return FuelTank(150, 6 hours);\r\n        } else {\r\n            return FuelTank(300, 8 hours);\r\n        }\r\n    }\r\n\r\n    function getEquipmentByType(uint8 _type) public pure returns(Equipment memory) {\r\n        if(_type == 1) {\r\n            return Equipment(_type, 25, 50); //type 1, cost 25 COINS, bonus +0.5% productivity\r\n        } else if (_type == 2) {\r\n            return Equipment(_type, 30, 60); //type 2, cost 30 COINS, bonus +0.6% productivity\r\n        } else if (_type == 3) {\r\n            return Equipment(_type, 45, 90); //type 3, cost 45 COINS, bonus +0.9% productivity\r\n        } else if(_type == 4){\r\n            return Equipment(_type, 35, 92); //type 4, cost 35 COINS, bonus +0.92% productivity\r\n        } else if(_type == 5){\r\n            return Equipment(_type, 45, 132); //type 5, cost 45 COINS, bonus +1.32% productivity\r\n        } else if(_type == 6){\r\n            return Equipment(_type, 65, 172); //type 6, cost 65 COINS, bonus +1.72% productivity\r\n        } else if(_type == 7){\r\n            return Equipment(_type, 50, 150); //type 7, cost 50 COINS, bonus +1.5% productivity\r\n        } else if(_type == 8){\r\n            return Equipment(_type, 60, 180); //type 8, cost 60 COINS, bonus +1.8% productivity\r\n        } else if(_type == 9){\r\n            return Equipment(_type, 90, 270); //type 9, cost 90 COINS, bonus +2.7% productivity\r\n        } else if(_type == 10){\r\n            return Equipment(_type, 140, 200); //type 10, cost 140 COINS, bonus +2% productivity\r\n        } else if(_type == 11){\r\n            return Equipment(_type, 165, 240); //type 11, cost 165 COINS, bonus +2.4% productivity\r\n        } else {\r\n            return Equipment(_type, 250, 360); //type 12, cost 250 COINS, bonus +3.6% productivity\r\n        }\r\n    }\r\n    \r\n\r\n    function getCarByType(uint8 _type) public pure returns(Car memory) {\r\n        if(_type == 1) {\r\n            return Car(_type,100,8); // type 1, cost 100 COINS, productivity 8 METAL per hour\r\n        } else if(_type == 2) {\r\n            return Car(_type, 250, 21); // type 2, cost 250 COINS, productivity 21 METAL per hour\r\n        } else if(_type == 3) {\r\n            return Car(_type, 500, 44); // type 3, cost 500 COINS, productivity 44 METAL per hour\r\n        } else if(_type == 4) {\r\n            return Car(_type, 1000, 91); // type 4, cost 1000 COINS, productivity 91 METAL per hour\r\n        } else if(_type == 5) {\r\n            return Car(_type, 3000, 287); // type 5, cost 3000 COINS, productivity 287 METAL per hour\r\n        } else if(_type == 6) {\r\n            return Car(_type, 5000, 500); // type 6, cost 5000 COINS, productivity 500 METAL per hour\r\n        } else {\r\n            return Car(_type  , 10000, 1040); // type 7, cost 10000 COINS, productivity 1040 METAL per hour\r\n        }\r\n    }\r\n\r\n    function getUserBalance(address userAddr) public view returns(Balance memory balance) {\r\n        balance = users[userAddr].balance;\r\n    }\r\n\r\n\r\n    function getUserCars(address userAddr) public view returns(Car[] memory) {\r\n        return users[userAddr].cars;\r\n    }\r\n\r\n    function getUserEquipment(address userAddr) public view returns(Equipment[] memory) {\r\n        return users[userAddr].equipment;\r\n    }\r\n\r\n    function getUserFuelTank(address userAddr) public view returns(FuelTank memory,uint256) {\r\n        uint256 level = users[userAddr].fuelTankLevel;\r\n\r\n        return(getFuelTankByLvl(level),level);\r\n    }\r\n\r\n    function getUserPartners(address userAddr) public view returns(Partners memory) {\r\n        return users[userAddr].partners;\r\n    }\r\n\r\n    function getUserStats(address userAddr) public view returns(Stats memory) {\r\n        return users[userAddr].stats;\r\n    } \r\n\r\n    function getUserFullData(address userAddr) public view returns(Stats memory stats, Partners memory partners, FuelTank memory tank, uint256 tankLevel, Equipment[] memory equipment, Car[] memory cars, Balance memory balance) {\r\n        stats = getUserStats(userAddr);\r\n        partners = getUserPartners(userAddr);\r\n        (tank,tankLevel) = getUserFuelTank(userAddr);\r\n        equipment = getUserEquipment(userAddr);\r\n        cars = getUserCars(userAddr);\r\n        balance = getUserBalance(userAddr);\r\n    }\r\n\r\n    function getContractStats() public view returns(uint256 _staked, uint256 _users, uint256 _cars ) {\r\n        _staked = totalStaked;\r\n        _users = totalUsers;\r\n        _cars = totalCars;\r\n    }\r\n \r\n    function getWastelandsTimer(address userAddr) public view returns(uint256) {\r\n        return inWastelands(userAddr) ? users[userAddr].wastelands.checkpoint.sub(block.timestamp) : 0 ;\r\n    }\r\n\r\n    function getWastelandsInfo(address userAddr) public view returns(uint256 timer, uint256 metalToGet, uint256 timeInWastelands) {\r\n        timer = getWastelandsTimer(userAddr);\r\n\r\n        metalToGet = users[userAddr].wastelands.metalToGet;\r\n\r\n        timeInWastelands = users[userAddr].wastelands.time;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n   \r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    \r\n     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketingAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"carBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"coinsBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"metalToGet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"}],\"name\":\"enteredInWastelands\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"equipmentBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lvl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"fuelTankUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"metalClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"metalSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onUnstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COINS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAILY_ROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METAL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PURCHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVESTMENT_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"buyCar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyCoins\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyCoinsForMetal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"buyEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMetal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"}],\"name\":\"enterWastelands\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forgeMetal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"forges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fromBnbToCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fromBnbToMetal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fromCoinsToBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fromMetalToBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fromMetalToCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getCarByType\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productivity\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Car\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getClaimableMetalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_users\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cars\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getEquipmentByType\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Equipment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getForgeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"metalInForge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestableMetal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedMetal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getForgeDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lvl\",\"type\":\"uint256\"}],\"name\":\"getFuelTankByLvl\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.FuelTank\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getHarvestableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUnlockTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metal\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Balance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserCars\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productivity\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Car[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"}],\"name\":\"getUserCarsProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserEquipment\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Equipment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserEquipmentBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserFuelTank\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.FuelTank\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserFullData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Stats\",\"name\":\"stats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"referrals\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"coinRewards\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"metalRewards\",\"type\":\"uint256[3]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct LASTLAND.Partners\",\"name\":\"partners\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.FuelTank\",\"name\":\"tank\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tankLevel\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Equipment[]\",\"name\":\"equipment\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productivity\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Car[]\",\"name\":\"cars\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metal\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Balance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserPartners\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"referrals\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"coinRewards\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"metalRewards\",\"type\":\"uint256[3]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct LASTLAND.Partners\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Stats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"}],\"name\":\"getUserTotalProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"carsProductivity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusesProductivity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalProductivity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getWastelandsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metalToGet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeInWastelands\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getWastelandsTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestForgedMetal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"hasEquipment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"inWastelands\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellMetal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockMetal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeFuelTank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Stats\",\"name\":\"stats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metal\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Balance\",\"name\":\"balance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"referrals\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"coinRewards\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"metalRewards\",\"type\":\"uint256[3]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct LASTLAND.Partners\",\"name\":\"partners\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metalToGet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct LASTLAND.Wastelands\",\"name\":\"wastelands\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"metalStorage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuelTankLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LASTLAND", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000006531366000000000000000000000000027799a2d63a9c3c085f05c25df1571fe10b80d7e00000000000000000000000014f3afddda5133a13e5068fd51ce57a066d94a01", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3b0114476be4285f6c1f0ac8371b0d49d23c1bf55f7615a6ec075ac504aee0f3"}