{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FormationV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {CDP} from \\\"./libraries/formation/CDP.sol\\\";\\nimport {FixedPointMath} from \\\"./libraries/FixedPointMath.sol\\\";\\nimport {ITransmuter} from \\\"./interfaces/ITransmuter.sol\\\";\\nimport {IMintableERC20} from \\\"./interfaces/IMintableERC20.sol\\\";\\nimport {IChainlink} from \\\"./interfaces/IChainlink.sol\\\";\\nimport {IVaultAdapterV2} from \\\"./interfaces/IVaultAdapterV2.sol\\\";\\nimport {VaultV2} from \\\"./libraries/formation/VaultV2.sol\\\";\\n\\ncontract FormationV2 is ReentrancyGuard {\\n    using CDP for CDP.Data;\\n    using FixedPointMath for FixedPointMath.uq192x64;\\n    using VaultV2 for VaultV2.Data;\\n    using VaultV2 for VaultV2.List;\\n    using SafeERC20 for IMintableERC20;\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    address public constant ZERO_ADDRESS = address(0);\\n\\n    /// @dev Resolution for all fixed point numeric parameters which represent percents. The resolution allows for a\\n    /// granularity of 0.01% increments.\\n    uint256 public constant PERCENT_RESOLUTION = 10000;\\n\\n    /// @dev The minimum value that the collateralization limit can be set to by the governance. This is a safety rail\\n    /// to prevent the collateralization from being set to a value which breaks the system.\\n    ///\\n    /// This value is equal to 100%.\\n    ///\\n    /// IMPORTANT: This constant is a raw FixedPointMath.uq192x64 value and assumes a resolution of 64 bits. If the\\n    ///            resolution for the FixedPointMath library changes this constant must change as well.\\n    uint256 public constant MINIMUM_COLLATERALIZATION_LIMIT = 1000000000000000000;\\n\\n    /// @dev The maximum value that the collateralization limit can be set to by the governance. This is a safety rail\\n    /// to prevent the collateralization from being set to a value which breaks the system.\\n    ///\\n    /// This value is equal to 400%.\\n    ///\\n    /// IMPORTANT: This constant is a raw FixedPointMath.uq192x64 value and assumes a resolution of 64 bits. If the\\n    ///            resolution for the FixedPointMath library changes this constant must change as well.\\n    uint256 public constant MAXIMUM_COLLATERALIZATION_LIMIT = 4000000000000000000;\\n\\n    event GovernanceUpdated(address governance);\\n\\n    event PendingGovernanceUpdated(address pendingGovernance);\\n\\n    event SentinelUpdated(address sentinel);\\n\\n    event TransmuterUpdated(address transmuter);\\n\\n    event RewardsUpdated(address treasury);\\n\\n    event HarvestFeeUpdated(uint256 fee);\\n\\n    event CollateralizationLimitUpdated(uint256 limit);\\n\\n    event EmergencyExitUpdated(bool status);\\n\\n    event ActiveVaultUpdated(IVaultAdapterV2 indexed adapter);\\n\\n    event FundsHarvested(uint256 withdrawnAmount, uint256 decreasedValue);\\n\\n    event FundsRecalled(uint256 indexed vaultId, uint256 withdrawnAmount, uint256 decreasedValue);\\n\\n    event FundsFlushed(uint256 amount);\\n\\n    event TokensDeposited(address indexed account, uint256 amount);\\n\\n    event TokensWithdrawn(address indexed account, uint256 requestedAmount, uint256 withdrawnAmount, uint256 decreasedValue);\\n\\n    event TokensRepaid(address indexed account, uint256 parentAmount, uint256 childAmount);\\n\\n    event TokensLiquidated(address indexed account, uint256 requestedAmount, uint256 withdrawnAmount, uint256 decreasedValue);\\n\\n    /// @dev The token that this contract is using as the parent asset.\\n    IMintableERC20 public token;\\n\\n    /// @dev The token that this contract is using as the child asset.\\n    IMintableERC20 public xtoken;\\n\\n    /// @dev The address of the account which currently has administrative capabilities over this contract.\\n    address public governance;\\n\\n    /// @dev The address of the pending governance.\\n    address public pendingGovernance;\\n\\n    /// @dev The address of the account which can initiate an emergency withdraw of funds in a vault.\\n    address public sentinel;\\n\\n    /// @dev The address of the contract which will transmute synthetic tokens back into native tokens.\\n    address public transmuter;\\n\\n    /// @dev The address of the contract which will receive fees.\\n    address public rewards;\\n\\n    /// @dev The percent of each profitable harvest that will go to the rewards contract.\\n    uint256 public harvestFee;\\n\\n    /// @dev The total amount the native token deposited into the system that is owned by external users.\\n    uint256 public totalDeposited;\\n\\n    /// @dev when movements are bigger than this number flush is activated.\\n    uint256 public flushActivator;\\n\\n    /// @dev A flag indicating if the contract has been initialized yet.\\n    bool public initialized;\\n\\n    /// @dev A flag indicating if deposits and flushes should be halted and if all parties should be able to recall\\n    /// from the active vault.\\n    bool public emergencyExit;\\n\\n    /// @dev The context shared between the CDPs.\\n    CDP.Context private _ctx;\\n\\n    /// @dev A mapping of all of the user CDPs. If a user wishes to have multiple CDPs they will have to either\\n    /// create a new address or set up a proxy contract that interfaces with this contract.\\n    mapping(address => CDP.Data) private _cdps;\\n\\n    /// @dev A list of all of the vaults. The last element of the list is the vault that is currently being used for\\n    /// deposits and withdraws. Vaults before the last element are considered inactive and are expected to be cleared.\\n    VaultV2.List private _vaults;\\n\\n    /// @dev The address of the link oracle.\\n    address public _linkGasOracle;\\n\\n    /// @dev The minimum returned amount needed to be on peg according to the oracle.\\n    uint256 public pegMinimum;\\n\\n    /// @dev The maximum update time of oracle (seconds)\\n    uint256 public oracleUpdateDelay;\\n\\n    /// @dev A mapping of adapter addresses to keep track of vault adapters that have already been added\\n    mapping(IVaultAdapterV2 => bool) public adapters;\\n\\n    /// @dev The const number (10^n) to align the decimals in this system\\n    /// Eg. USDT(6 decimals), so the const number should be 10^(18 - 6) to make the number in this system 18 decimals\\n    uint256 public USDT_CONST;\\n\\n    constructor(\\n        IMintableERC20 _token,\\n        IMintableERC20 _xtoken,\\n        address _governance,\\n        address _sentinel,\\n        uint256 _flushActivator\\n    ) public {\\n        require(address(_token) != ZERO_ADDRESS, \\\"Formation: token address cannot be 0x0.\\\");\\n        require(address(_xtoken) != ZERO_ADDRESS, \\\"Formation: xtoken address cannot be 0x0.\\\");\\n        require(_governance != ZERO_ADDRESS, \\\"Formation: governance address cannot be 0x0.\\\");\\n        require(_sentinel != ZERO_ADDRESS, \\\"Formation: sentinel address cannot be 0x0.\\\");\\n        require(_flushActivator > 0, \\\"Formation: flushActivator should be larger than 0\\\");\\n        require(_token.decimals() <= _xtoken.decimals(), \\\"Formation: xtoken decimals should be larger than token decimals\\\");\\n        token = _token;\\n        xtoken = _xtoken;\\n        governance = _governance;\\n        sentinel = _sentinel;\\n        flushActivator = _flushActivator; // Recommend(if the token decimals is 18): 100000 ether\\n\\n        USDT_CONST = uint256(10)**(uint256(_xtoken.decimals()).sub(uint256(_token.decimals())));\\n\\n        uint256 COLL_LIMIT = MINIMUM_COLLATERALIZATION_LIMIT.mul(2);\\n        _ctx.collateralizationLimit = FixedPointMath.uq192x64(COLL_LIMIT);\\n        _ctx.accumulatedYieldWeight = FixedPointMath.uq192x64(0);\\n    }\\n\\n    /// @dev Sets the pending governance.\\n    ///\\n    /// This function reverts if the new pending governance is the zero address or the caller is not the current\\n    /// governance. This is to prevent the contract governance being set to the zero address which would deadlock\\n    /// privileged contract functionality.\\n    ///\\n    /// @param _pendingGovernance the new pending governance.\\n    function setPendingGovernance(address _pendingGovernance) external onlyGov {\\n        require(_pendingGovernance != ZERO_ADDRESS, \\\"Formation: governance address cannot be 0x0.\\\");\\n\\n        pendingGovernance = _pendingGovernance;\\n\\n        emit PendingGovernanceUpdated(_pendingGovernance);\\n    }\\n\\n    /// @dev Accepts the role as governance.\\n    ///\\n    /// This function reverts if the caller is not the new pending governance.\\n    function acceptGovernance() external {\\n        require(msg.sender == pendingGovernance, \\\"sender is not pendingGovernance\\\");\\n\\n        governance = pendingGovernance;\\n\\n        emit GovernanceUpdated(pendingGovernance);\\n    }\\n\\n    function setSentinel(address _sentinel) external onlyGov {\\n        require(_sentinel != ZERO_ADDRESS, \\\"Formation: sentinel address cannot be 0x0.\\\");\\n\\n        sentinel = _sentinel;\\n\\n        emit SentinelUpdated(_sentinel);\\n    }\\n\\n    /// @dev Sets the transmuter.\\n    ///\\n    /// This function reverts if the new transmuter is the zero address or the caller is not the current governance.\\n    ///\\n    /// @param _transmuter the new transmuter.\\n    function setTransmuter(address _transmuter) external onlyGov {\\n        // Check that the transmuter address is not the zero address. Setting the transmuter to the zero address would break\\n        // transfers to the address because of `safeTransfer` checks.\\n        require(_transmuter != ZERO_ADDRESS, \\\"Formation: transmuter address cannot be 0x0.\\\");\\n\\n        transmuter = _transmuter;\\n\\n        emit TransmuterUpdated(_transmuter);\\n    }\\n\\n    /// @dev Sets the flushActivator.\\n    ///\\n    /// @param _flushActivator the new flushActivator.\\n    function setFlushActivator(uint256 _flushActivator) external onlyGov {\\n        flushActivator = _flushActivator;\\n    }\\n\\n    /// @dev Sets the rewards contract.\\n    ///\\n    /// This function reverts if the new rewards contract is the zero address or the caller is not the current governance.\\n    ///\\n    /// @param _rewards the new rewards contract.\\n    function setRewards(address _rewards) external onlyGov {\\n        // Check that the rewards address is not the zero address. Setting the rewards to the zero address would break\\n        // transfers to the address because of `safeTransfer` checks.\\n        require(_rewards != ZERO_ADDRESS, \\\"Formation: rewards address cannot be 0x0.\\\");\\n\\n        rewards = _rewards;\\n\\n        emit RewardsUpdated(_rewards);\\n    }\\n\\n    /// @dev Sets the harvest fee.\\n    ///\\n    /// This function reverts if the caller is not the current governance.\\n    ///\\n    /// @param _harvestFee the new harvest fee.\\n    function setHarvestFee(uint256 _harvestFee) external onlyGov {\\n        // Check that the harvest fee is within the acceptable range. Setting the harvest fee greater than 100% could\\n        // potentially break internal logic when calculating the harvest fee.\\n        require(_harvestFee <= PERCENT_RESOLUTION, \\\"Formation: harvest fee above maximum.\\\");\\n\\n        harvestFee = _harvestFee;\\n\\n        emit HarvestFeeUpdated(_harvestFee);\\n    }\\n\\n    /// @dev Sets the collateralization limit.\\n    ///\\n    /// This function reverts if the caller is not the current governance or if the collateralization limit is outside\\n    /// of the accepted bounds.\\n    ///\\n    /// @param _limit the new collateralization limit.\\n    function setCollateralizationLimit(uint256 _limit) external onlyGov {\\n        require(_limit >= MINIMUM_COLLATERALIZATION_LIMIT, \\\"Formation: collateralization limit below minimum.\\\");\\n        require(_limit <= MAXIMUM_COLLATERALIZATION_LIMIT, \\\"Formation: collateralization limit above maximum.\\\");\\n\\n        _ctx.collateralizationLimit = FixedPointMath.uq192x64(_limit);\\n\\n        emit CollateralizationLimitUpdated(_limit);\\n    }\\n\\n    /// @dev Set oracle.\\n    function setOracleAddress(\\n        address Oracle,\\n        uint256 peg,\\n        uint256 delay\\n    ) external onlyGov {\\n        _linkGasOracle = Oracle;\\n        pegMinimum = peg;\\n        oracleUpdateDelay = delay;\\n    }\\n\\n    /// @dev Sets if the contract should enter emergency exit mode.\\n    ///\\n    /// @param _emergencyExit if the contract should enter emergency exit mode.\\n    function setEmergencyExit(bool _emergencyExit) external {\\n        require(msg.sender == governance || msg.sender == sentinel, \\\"Formation: sender should be governance or sentinel\\\");\\n\\n        emergencyExit = _emergencyExit;\\n\\n        emit EmergencyExitUpdated(_emergencyExit);\\n    }\\n\\n    /// @dev Gets the collateralization limit.\\n    ///\\n    /// The collateralization limit is the minimum ratio of collateral to debt that is allowed by the system.\\n    ///\\n    /// @return the collateralization limit.\\n    function collateralizationLimit() external view returns (FixedPointMath.uq192x64 memory) {\\n        return _ctx.collateralizationLimit;\\n    }\\n\\n    /// @dev Initializes the contract.\\n    ///\\n    /// This function checks that the transmuter and rewards have been set and sets up the active vault.\\n    ///\\n    /// @param _adapter the vault adapter of the active vault.\\n    function initialize(IVaultAdapterV2 _adapter) external onlyGov {\\n        require(!initialized, \\\"Formation: already initialized\\\");\\n\\n        require(transmuter != ZERO_ADDRESS, \\\"Formation: cannot initialize transmuter address to 0x0\\\");\\n        require(rewards != ZERO_ADDRESS, \\\"Formation: cannot initialize rewards address to 0x0\\\");\\n\\n        _updateActiveVault(_adapter);\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev Migrates the system to a new vault.\\n    ///\\n    /// This function reverts if the vault adapter is the zero address, if the token that the vault adapter accepts\\n    /// is not the token that this contract defines as the parent asset, or if the contract has not yet been initialized.\\n    ///\\n    /// @param _adapter the adapter for the vault the system will migrate to.\\n    function migrate(IVaultAdapterV2 _adapter) external expectInitialized onlyGov {\\n        _updateActiveVault(_adapter);\\n    }\\n\\n    /// @dev Harvests yield from a vault.\\n    ///\\n    /// @param _vaultId the identifier of the vault to harvest from.\\n    ///\\n    /// @return the amount of funds that were harvested from the vault.\\n\\n    function harvest(uint256 _vaultId) external expectInitialized returns (uint256, uint256) {\\n        VaultV2.Data storage _vault = _vaults.get(_vaultId);\\n\\n        (uint256 _harvestedAmount, uint256 _decreasedValue) = _vault.harvest(address(this));\\n\\n        if (_harvestedAmount > 0) {\\n            uint256 _feeAmount = _harvestedAmount.mul(harvestFee).div(PERCENT_RESOLUTION);\\n            uint256 _distributeAmount = _harvestedAmount.sub(_feeAmount);\\n            FixedPointMath.uq192x64 memory _weight = FixedPointMath.fromU256(_distributeAmount).div(totalDeposited);\\n            _ctx.accumulatedYieldWeight = _ctx.accumulatedYieldWeight.add(_weight);\\n\\n            if (_feeAmount > 0) {\\n                token.safeTransfer(rewards, _feeAmount);\\n            }\\n\\n            if (_distributeAmount > 0) {\\n                _distributeToTransmuter(_distributeAmount);\\n            }\\n        }\\n\\n        emit FundsHarvested(_harvestedAmount, _decreasedValue);\\n\\n        return (_harvestedAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Recalls an amount of deposited funds from a vault to this contract.\\n    ///\\n    /// @param _vaultId the identifier of the recall funds from.\\n    ///\\n    /// @return the amount of funds that were recalled from the vault to this contract and the decreased vault value.\\n    function recall(uint256 _vaultId, uint256 _amount) external nonReentrant expectInitialized returns (uint256, uint256) {\\n        return _recallFunds(_vaultId, _amount);\\n    }\\n\\n    /// @dev Flushes buffered tokens to the active vault.\\n    ///\\n    /// This function reverts if an emergency exit is active. This is in place to prevent the potential loss of\\n    /// additional funds.\\n    ///\\n    /// @return the amount of tokens flushed to the active vault.\\n    function flush() external nonReentrant expectInitialized returns (uint256) {\\n        return flushActiveVault();\\n    }\\n\\n    /// @dev Internal function to flush buffered tokens to the active vault.\\n    ///\\n    /// This function reverts if an emergency exit is active. This is in place to prevent the potential loss of\\n    /// additional funds.\\n    ///\\n    /// @return the amount of tokens flushed to the active vault.\\n    function flushActiveVault() internal returns (uint256) {\\n        // Prevent flushing to the active vault when an emergency exit is enabled to prevent potential loss of funds if\\n        // the active vault is poisoned for any reason.\\n        require(!emergencyExit, \\\"emergency pause enabled\\\");\\n\\n        VaultV2.Data storage _activeVault = _vaults.last();\\n        uint256 _depositedAmount = _activeVault.depositAll();\\n\\n        emit FundsFlushed(_depositedAmount);\\n\\n        return _depositedAmount;\\n    }\\n\\n    /// @dev Deposits collateral into a CDP.\\n    ///\\n    /// This function reverts if an emergency exit is active. This is in place to prevent the potential loss of\\n    /// additional funds.\\n    ///\\n    /// @param _amount the amount of collateral to deposit.\\n    function deposit(uint256 _amount) external nonReentrant noContractAllowed expectInitialized {\\n        require(_amount > 0, \\\"amount is zero\\\");\\n        uint256 amount_USDT = _amount.mul(USDT_CONST);\\n\\n        require(!emergencyExit, \\\"emergency pause enabled\\\");\\n\\n        CDP.Data storage _cdp = _cdps[msg.sender];\\n        _cdp.update(_ctx);\\n\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        if (amount_USDT >= flushActivator) {\\n            flushActiveVault();\\n        }\\n        totalDeposited = totalDeposited.add(_amount);\\n\\n        _cdp.totalDeposited = _cdp.totalDeposited.add(amount_USDT);\\n        _cdp.lastDeposit = block.number;\\n\\n        emit TokensDeposited(msg.sender, _amount);\\n    }\\n\\n    /// @dev Attempts to withdraw part of a CDP's collateral.\\n    ///\\n    /// This function reverts if a deposit into the CDP was made in the same block. This is to prevent flash loan attacks\\n    /// on other internal or external systems.\\n    ///\\n    /// @param _amount the amount of collateral to withdraw.\\n    function withdraw(uint256 _amount) external nonReentrant noContractAllowed expectInitialized returns (uint256, uint256) {\\n        require(_amount > 0, \\\"amount is zero\\\");\\n\\n        CDP.Data storage _cdp = _cdps[msg.sender];\\n        require(block.number > _cdp.lastDeposit, \\\"\\\");\\n\\n        _cdp.update(_ctx);\\n\\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _withdrawFundsTo(msg.sender, _amount);\\n        _cdp.totalDeposited = _cdp.totalDeposited.sub(_decreasedValue.mul(USDT_CONST), \\\"Exceeds withdrawable amount\\\");\\n        _cdp.checkHealth(_ctx, \\\"Action blocked: unhealthy collateralization ratio\\\");\\n\\n        emit TokensWithdrawn(msg.sender, _amount, _withdrawnAmount, _decreasedValue);\\n\\n        return (_withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Repays debt with the native and or synthetic token.\\n    ///\\n    /// An approval is required to transfer native tokens to the transmuter.\\n    function repay(uint256 _parentAmount, uint256 _childAmount) external nonReentrant noContractAllowed onLinkCheck expectInitialized {\\n        CDP.Data storage _cdp = _cdps[msg.sender];\\n        _cdp.update(_ctx);\\n        uint256 _parentAmount_USDT = 0;\\n\\n        if (_parentAmount > 0) {\\n            token.safeTransferFrom(msg.sender, address(this), _parentAmount);\\n            _distributeToTransmuter(_parentAmount);\\n            _parentAmount_USDT = _parentAmount.mul(USDT_CONST);\\n        }\\n\\n        if (_childAmount > 0) {\\n            xtoken.burnFrom(msg.sender, _childAmount);\\n            //lower debt cause burn\\n            xtoken.lowerHasMinted(_childAmount);\\n        }\\n\\n        uint256 _totalAmount = _parentAmount_USDT.add(_childAmount);\\n        _cdp.totalDebt = _cdp.totalDebt.sub(_totalAmount, \\\"\\\");\\n\\n        emit TokensRepaid(msg.sender, _parentAmount, _childAmount);\\n    }\\n\\n    /// @dev Attempts to liquidate part of a CDP's collateral to pay back its debt.\\n    ///\\n    /// @param _amount the amount of collateral to attempt to liquidate.\\n    ///\\n    /// @return the liquidation amount and the reduced net worth of the vault, the decimal is based on the deposited token\\n    function liquidate(uint256 _amount) external nonReentrant noContractAllowed onLinkCheck expectInitialized returns (uint256, uint256) {\\n        require(_amount > 0, \\\"amount is zero\\\");\\n\\n        CDP.Data storage _cdp = _cdps[msg.sender];\\n        _cdp.update(_ctx);\\n\\n        // don't attempt to liquidate more than is possible\\n        if (_amount > _cdp.totalDebt) {\\n            _amount = _cdp.totalDebt;\\n        }\\n\\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _withdrawFundsTo(address(this), _amount.div(USDT_CONST));\\n        //changed to new transmuter compatibillity\\n        _distributeToTransmuter(_withdrawnAmount);\\n\\n        _cdp.totalDeposited = _cdp.totalDeposited.sub(_decreasedValue.mul(USDT_CONST), \\\"\\\");\\n        _cdp.totalDebt = _cdp.totalDebt.sub(_withdrawnAmount.mul(USDT_CONST), \\\"\\\");\\n        emit TokensLiquidated(msg.sender, _amount, _withdrawnAmount, _decreasedValue);\\n\\n        return (_withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Mints synthetic tokens by either claiming credit or increasing the debt.\\n    ///\\n    /// Claiming credit will take priority over increasing the debt.\\n    ///\\n    /// This function reverts if the debt is increased and the CDP health check fails.\\n    ///\\n    /// @param _amount the amount of formation tokens to borrow.\\n    function mint(uint256 _amount) external nonReentrant noContractAllowed onLinkCheck expectInitialized {\\n        require(_amount > 0, \\\"amount is zero\\\");\\n        CDP.Data storage _cdp = _cdps[msg.sender];\\n        _cdp.update(_ctx);\\n\\n        uint256 _totalCredit = _cdp.totalCredit;\\n\\n        if (_totalCredit < _amount) {\\n            uint256 _remainingAmount = _amount.sub(_totalCredit);\\n            _cdp.totalDebt = _cdp.totalDebt.add(_remainingAmount);\\n            _cdp.totalCredit = 0;\\n\\n            _cdp.checkHealth(_ctx, \\\"Formation: Loan-to-value ratio breached\\\");\\n        } else {\\n            _cdp.totalCredit = _totalCredit.sub(_amount);\\n        }\\n\\n        xtoken.mint(msg.sender, _amount);\\n    }\\n\\n    /// @dev Gets the number of vaults in the vault list.\\n    ///\\n    /// @return the vault count.\\n    function vaultCount() external view returns (uint256) {\\n        return _vaults.length();\\n    }\\n\\n    /// @dev Get the adapter of a vault.\\n    ///\\n    /// @param _vaultId the identifier of the vault.\\n    ///\\n    /// @return the vault adapter.\\n    function getVaultAdapter(uint256 _vaultId) external view returns (IVaultAdapterV2) {\\n        VaultV2.Data storage _vault = _vaults.get(_vaultId);\\n        return _vault.adapter;\\n    }\\n\\n    /// @dev Get the total amount of the parent asset that has been deposited into a vault.\\n    ///\\n    /// @param _vaultId the identifier of the vault.\\n    ///\\n    /// @return the total amount of deposited tokens.\\n    function getVaultTotalDeposited(uint256 _vaultId) external view returns (uint256) {\\n        VaultV2.Data storage _vault = _vaults.get(_vaultId);\\n        return _vault.totalDeposited;\\n    }\\n\\n    /// @dev Get the total amount of collateral deposited into a CDP.\\n    ///\\n    /// @param _account the user account of the CDP to query.\\n    ///\\n    /// @return the deposited amount of tokens.\\n    function getCdpTotalDeposited(address _account) external view returns (uint256) {\\n        CDP.Data storage _cdp = _cdps[_account];\\n        return _cdp.totalDeposited.div(USDT_CONST);\\n    }\\n\\n    /// @dev Get the total amount of formation tokens borrowed from a CDP.\\n    ///\\n    /// @param _account the user account of the CDP to query.\\n    ///\\n    /// @return the borrowed amount of tokens.\\n    function getCdpTotalDebt(address _account) external view returns (uint256) {\\n        CDP.Data storage _cdp = _cdps[_account];\\n        return _cdp.getUpdatedTotalDebt(_ctx);\\n    }\\n\\n    /// @dev Get the total amount of credit that a CDP has.\\n    ///\\n    /// @param _account the user account of the CDP to query.\\n    ///\\n    /// @return the amount of credit.\\n    function getCdpTotalCredit(address _account) external view returns (uint256) {\\n        CDP.Data storage _cdp = _cdps[_account];\\n        return _cdp.getUpdatedTotalCredit(_ctx);\\n    }\\n\\n    /// @dev Gets the last recorded block of when a user made a deposit into their CDP.\\n    ///\\n    /// @param _account the user account of the CDP to query.\\n    ///\\n    /// @return the block number of the last deposit.\\n    function getCdpLastDeposit(address _account) external view returns (uint256) {\\n        CDP.Data storage _cdp = _cdps[_account];\\n        return _cdp.lastDeposit;\\n    }\\n\\n    /// @dev sends tokens to the transmuter\\n    ///\\n    /// benefit of great nation of transmuter\\n    function _distributeToTransmuter(uint256 amount) internal {\\n        require(token.approve(transmuter, amount), \\\"Formation: failed to approve tokens\\\");\\n        ITransmuter(transmuter).distribute(address(this), amount);\\n        // lower debt cause of 'burn'\\n        xtoken.lowerHasMinted(amount.mul(USDT_CONST));\\n    }\\n\\n    /// @dev Checks that parent token is on peg.\\n    ///\\n    /// This is used over a modifier limit of pegged interactions.\\n    modifier onLinkCheck() {\\n        if (pegMinimum > 0) {\\n            (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) = IChainlink(_linkGasOracle).latestRoundData();\\n            require(updatedAt > 0, \\\"Round not complete\\\");\\n            require(block.timestamp <= updatedAt.add(oracleUpdateDelay), \\\"Update time exceeded\\\");\\n            require(uint256(answer) > pegMinimum, \\\"off peg limitation\\\");\\n        }\\n        _;\\n    }\\n    /// @dev Checks that caller is an eoa.\\n    ///\\n    /// This is used to prevent contracts from interacting.\\n    modifier noContractAllowed() {\\n        require(!address(msg.sender).isContract() && msg.sender == tx.origin, \\\"Sorry we do not accept contract!\\\");\\n        _;\\n    }\\n    /// @dev Checks that the contract is in an initialized state.\\n    ///\\n    /// This is used over a modifier to reduce the size of the contract\\n    modifier expectInitialized() {\\n        require(initialized, \\\"Formation: not initialized.\\\");\\n        _;\\n    }\\n\\n    /// @dev Checks that the current message sender or caller is the governance address.\\n    ///\\n    ///\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"Formation: only governance.\\\");\\n        _;\\n    }\\n\\n    /// @dev Updates the active vault.\\n    ///\\n    /// This function reverts if the vault adapter is the zero address, if the token that the vault adapter accepts\\n    /// is not the token that this contract defines as the parent asset, or if the contract has not yet been initialized.\\n    ///\\n    /// @param _adapter the adapter for the new active vault.\\n    function _updateActiveVault(IVaultAdapterV2 _adapter) internal {\\n        require(_adapter != IVaultAdapterV2(ZERO_ADDRESS), \\\"Formation: active vault address cannot be 0x0.\\\");\\n        require(_adapter.token() == token, \\\"Formation: token mismatch.\\\");\\n        require(!adapters[_adapter], \\\"Adapter already in use\\\");\\n        adapters[_adapter] = true;\\n\\n        _vaults.push(VaultV2.Data({adapter: _adapter, totalDeposited: 0}));\\n\\n        emit ActiveVaultUpdated(_adapter);\\n    }\\n\\n    /// @dev Recalls an amount of funds from a vault to this contract.\\n    ///\\n    /// @param _vaultId the identifier of the recall funds from.\\n    /// @param _amount  the amount of funds to recall from the vault.\\n    ///\\n    /// @return the amount of funds that were recalled from the vault to this contract and the decreased vault value.\\n    function _recallFunds(uint256 _vaultId, uint256 _amount) internal returns (uint256, uint256) {\\n        require(emergencyExit || msg.sender == governance || _vaultId != _vaults.lastIndex(), \\\"Formation: not an emergency, not governance, and user does not have permission to recall funds from active vault\\\");\\n\\n        VaultV2.Data storage _vault = _vaults.get(_vaultId);\\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _vault.withdraw(address(this), _amount);\\n\\n        emit FundsRecalled(_vaultId, _withdrawnAmount, _decreasedValue);\\n\\n        return (_withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Attempts to withdraw funds from the active vault to the recipient.\\n    ///\\n    /// Funds will be first withdrawn from this contracts balance and then from the active vault. This function\\n    /// is different from `recallFunds` in that it reduces the total amount of deposited tokens by the decreased\\n    /// value of the vault.\\n    ///\\n    /// @param _recipient the account to withdraw the funds to.\\n    /// @param _amount    the amount of funds to withdraw.\\n\\n    function _withdrawFundsTo(address _recipient, uint256 _amount) internal returns (uint256, uint256) {\\n        // Pull the funds from the buffer.\\n        uint256 _bufferedAmount = Math.min(_amount, token.balanceOf(address(this)));\\n\\n        if (_recipient != address(this)) {\\n            token.safeTransfer(_recipient, _bufferedAmount);\\n        }\\n\\n        uint256 _totalWithdrawn = _bufferedAmount;\\n        uint256 _totalDecreasedValue = _bufferedAmount;\\n\\n        uint256 _remainingAmount = _amount.sub(_bufferedAmount);\\n\\n        // Pull the remaining funds from the active vault.\\n        if (_remainingAmount > 0) {\\n            VaultV2.Data storage _activeVault = _vaults.last();\\n            (uint256 _withdrawAmount, uint256 _decreasedValue) = _activeVault.withdraw(_recipient, _remainingAmount);\\n            _totalWithdrawn = _totalWithdrawn.add(_withdrawAmount);\\n            _totalDecreasedValue = _totalDecreasedValue.add(_decreasedValue);\\n        }\\n\\n        totalDeposited = totalDeposited.sub(_totalDecreasedValue);\\n\\n        return (_totalWithdrawn, _totalDecreasedValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/formation/CDP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {FixedPointMath} from \\\"../FixedPointMath.sol\\\";\\nimport {IDetailedERC20} from \\\"../../interfaces/IDetailedERC20.sol\\\";\\n\\n/// @title CDP\\n///\\n/// @dev A library which provides the CDP data struct and associated functions.\\nlibrary CDP {\\n    using CDP for Data;\\n    using FixedPointMath for FixedPointMath.uq192x64;\\n    using SafeERC20 for IDetailedERC20;\\n    using SafeMath for uint256;\\n\\n    struct Context {\\n        FixedPointMath.uq192x64 collateralizationLimit;\\n        FixedPointMath.uq192x64 accumulatedYieldWeight;\\n    }\\n\\n    struct Data {\\n        uint256 totalDeposited;\\n        uint256 totalDebt;\\n        uint256 totalCredit;\\n        uint256 lastDeposit;\\n        FixedPointMath.uq192x64 lastAccumulatedYieldWeight;\\n    }\\n\\n    function update(Data storage _self, Context storage _ctx) internal {\\n        uint256 _earnedYield = _self.totalCredit.add(_self.getEarnedYield(_ctx));\\n        if (_earnedYield > _self.totalDebt) {\\n            uint256 _currentTotalDebt = _self.totalDebt;\\n            _self.totalDebt = 0;\\n            _self.totalCredit = _earnedYield.sub(_currentTotalDebt);\\n        } else {\\n            _self.totalDebt = _self.totalDebt.sub(_earnedYield);\\n        }\\n        _self.lastAccumulatedYieldWeight = _ctx.accumulatedYieldWeight;\\n    }\\n\\n    /// @dev Assures that the CDP is healthy.\\n    ///\\n    /// This function will revert if the CDP is unhealthy.\\n    function checkHealth(\\n        Data storage _self,\\n        Context storage _ctx,\\n        string memory _msg\\n    ) internal view {\\n        require(_self.isHealthy(_ctx), _msg);\\n    }\\n\\n    /// @dev Gets if the CDP is considered healthy.\\n    ///\\n    /// A CDP is healthy if its collateralization ratio is greater than or equal to the global collateralization limit.\\n    ///\\n    /// @return if the CDP is healthy.\\n    function isHealthy(Data storage _self, Context storage _ctx) internal view returns (bool) {\\n        return _ctx.collateralizationLimit.cmp(_self.getCollateralizationRatio(_ctx)) <= 0;\\n    }\\n\\n    function getUpdatedTotalDebt(Data storage _self, Context storage _ctx) internal view returns (uint256) {\\n        uint256 _unclaimedYield = _self.getEarnedYield(_ctx);\\n        if (_unclaimedYield == 0) {\\n            return _self.totalDebt;\\n        }\\n\\n        uint256 _currentTotalDebt = _self.totalDebt;\\n        if (_unclaimedYield >= _currentTotalDebt) {\\n            return 0;\\n        }\\n\\n        return _currentTotalDebt - _unclaimedYield;\\n    }\\n\\n    function getUpdatedTotalCredit(Data storage _self, Context storage _ctx) internal view returns (uint256) {\\n        uint256 _unclaimedYield = _self.getEarnedYield(_ctx);\\n        if (_unclaimedYield == 0) {\\n            return _self.totalCredit;\\n        }\\n\\n        uint256 _currentTotalDebt = _self.totalDebt;\\n        if (_unclaimedYield <= _currentTotalDebt) {\\n            return 0;\\n        }\\n\\n        return _self.totalCredit + (_unclaimedYield - _currentTotalDebt);\\n    }\\n\\n    /// @dev Gets the amount of yield that a CDP has earned since the last time it was updated.\\n    ///\\n    /// @param _self the CDP to query.\\n    /// @param _ctx  the CDP context.\\n    ///\\n    /// @return the amount of earned yield.\\n    function getEarnedYield(Data storage _self, Context storage _ctx) internal view returns (uint256) {\\n        FixedPointMath.uq192x64 memory _currentAccumulatedYieldWeight = _ctx.accumulatedYieldWeight;\\n        FixedPointMath.uq192x64 memory _lastAccumulatedYieldWeight = _self.lastAccumulatedYieldWeight;\\n\\n        if (_currentAccumulatedYieldWeight.cmp(_lastAccumulatedYieldWeight) == 0) {\\n            return 0;\\n        }\\n\\n        return _currentAccumulatedYieldWeight.sub(_lastAccumulatedYieldWeight).mul(_self.totalDeposited).decode();\\n    }\\n\\n    /// @dev Gets a CDPs collateralization ratio.\\n    ///\\n    /// The collateralization ratio is defined as the ratio of collateral to debt. If the CDP has zero debt then this\\n    /// will return the maximum value of a fixed point integer.\\n    ///\\n    /// This function will use the updated total debt so an update before calling this function is not required.\\n    ///\\n    /// @param _self the CDP to query.\\n    ///\\n    /// @return a fixed point integer representing the collateralization ratio.\\n    function getCollateralizationRatio(Data storage _self, Context storage _ctx) internal view returns (FixedPointMath.uq192x64 memory) {\\n        uint256 _totalDebt = _self.getUpdatedTotalDebt(_ctx);\\n        if (_totalDebt == 0) {\\n            return FixedPointMath.maximumValue();\\n        }\\n        return FixedPointMath.fromU256(_self.totalDeposited).div(_totalDebt);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPointMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nlibrary FixedPointMath {\\n    uint256 public constant DECIMALS = 18;\\n    uint256 public constant SCALAR = 10**DECIMALS;\\n\\n    struct uq192x64 {\\n        uint256 x;\\n    }\\n\\n    function fromU256(uint256 value) internal pure returns (uq192x64 memory) {\\n        uint256 x;\\n        require(value == 0 || (x = value * SCALAR) / SCALAR == value);\\n        return uq192x64(x);\\n    }\\n\\n    function maximumValue() internal pure returns (uq192x64 memory) {\\n        return uq192x64(uint256(-1));\\n    }\\n\\n    function add(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\\n        uint256 x;\\n        require((x = self.x + value.x) >= self.x);\\n        return uq192x64(x);\\n    }\\n\\n    function add(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\n        return add(self, fromU256(value));\\n    }\\n\\n    function sub(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\\n        uint256 x;\\n        require((x = self.x - value.x) <= self.x);\\n        return uq192x64(x);\\n    }\\n\\n    function sub(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\n        return sub(self, fromU256(value));\\n    }\\n\\n    function mul(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\n        uint256 x;\\n        require(value == 0 || (x = self.x * value) / value == self.x);\\n        return uq192x64(x);\\n    }\\n\\n    function div(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\n        require(value != 0);\\n        return uq192x64(self.x / value);\\n    }\\n\\n    function cmp(uq192x64 memory self, uq192x64 memory value) internal pure returns (int256) {\\n        if (self.x < value.x) {\\n            return -1;\\n        }\\n\\n        if (self.x > value.x) {\\n            return 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function decode(uq192x64 memory self) internal pure returns (uint256) {\\n        return self.x / SCALAR;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITransmuter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface ITransmuter {\\n    function distribute(address origin, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport {IDetailedERC20} from \\\"./IDetailedERC20.sol\\\";\\n\\ninterface IMintableERC20 is IDetailedERC20 {\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function lowerHasMinted(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChainlink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface IChainlink {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultAdapterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IDetailedERC20.sol\\\";\\n\\n/// Interface for all Vault Adapter V2 implementations.\\ninterface IVaultAdapterV2 {\\n    /// @dev Gets the token that the adapter accepts.\\n    function token() external view returns (IDetailedERC20);\\n\\n    /// @dev The total value of the assets deposited into the vault.\\n    function totalValue() external view returns (uint256);\\n\\n    /// @dev Deposits funds into the vault.\\n    ///\\n    /// @param _amount  the amount of funds to deposit.\\n    function deposit(uint256 _amount) external;\\n\\n    /// @dev Attempts to withdraw funds from the wrapped vault.\\n    ///\\n    /// The amount withdrawn to the recipient may be less than the amount requested.\\n    ///\\n    /// @param _recipient the recipient of the funds.\\n    /// @param _amount    the amount of funds to withdraw.\\n    function withdraw(address _recipient, uint256 _amount) external;\\n\\n    /// @dev Attempts to withdraw funds from the wrapped vault.\\n    ///\\n    /// The amount withdrawn to the recipient may be less than the amount requested.\\n    ///\\n    /// @param _recipient the recipient of the funds.\\n    /// @param _amount    the amount of funds to withdraw.\\n    function indirectWithdraw(address _recipient, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/formation/VaultV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IDetailedERC20} from \\\"../../interfaces/IDetailedERC20.sol\\\";\\nimport {IVaultAdapterV2} from \\\"../../interfaces/IVaultAdapterV2.sol\\\";\\n\\n/// @title Pool\\n///\\n/// @dev A library which provides the Vault data struct and associated functions.\\nlibrary VaultV2 {\\n    using VaultV2 for Data;\\n    using VaultV2 for List;\\n    using SafeERC20 for IDetailedERC20;\\n    using SafeMath for uint256;\\n\\n    struct Data {\\n        IVaultAdapterV2 adapter;\\n        uint256 totalDeposited;\\n    }\\n\\n    struct List {\\n        Data[] elements;\\n    }\\n\\n    /// @dev Gets the total amount of assets deposited in the vault.\\n    ///\\n    /// @return the total assets.\\n    function totalValue(Data storage _self) internal view returns (uint256) {\\n        return _self.adapter.totalValue();\\n    }\\n\\n    /// @dev Gets the token that the vault accepts.\\n    ///\\n    /// @return the accepted token.\\n    function token(Data storage _self) internal view returns (IDetailedERC20) {\\n        return IDetailedERC20(_self.adapter.token());\\n    }\\n\\n    /// @dev Deposits funds from the caller into the vault.\\n    ///\\n    /// @param _amount the amount of funds to deposit.\\n    function deposit(Data storage _self, uint256 _amount) internal returns (uint256) {\\n        // Push the token that the vault accepts onto the stack to save gas.\\n        IDetailedERC20 _token = _self.token();\\n\\n        _token.safeTransfer(address(_self.adapter), _amount);\\n        _self.adapter.deposit(_amount);\\n        _self.totalDeposited = _self.totalDeposited.add(_amount);\\n\\n        return _amount;\\n    }\\n\\n    /// @dev Deposits the entire token balance of the caller into the vault.\\n    function depositAll(Data storage _self) internal returns (uint256) {\\n        IDetailedERC20 _token = _self.token();\\n        return _self.deposit(_token.balanceOf(address(this)));\\n    }\\n\\n    /// @dev Withdraw deposited funds from the vault.\\n    ///\\n    /// @param _recipient the account to withdraw the tokens to.\\n    /// @param _amount    the amount of tokens to withdraw.\\n    function withdraw(\\n        Data storage _self,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal returns (uint256, uint256) {\\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _self.directWithdraw(_recipient, _amount);\\n        _self.totalDeposited = _self.totalDeposited.sub(_decreasedValue);\\n        return (_withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Directly withdraw deposited funds from the vault.\\n    ///\\n    /// @param _recipient the account to withdraw the tokens to.\\n    /// @param _amount    the amount of tokens to withdraw.\\n    function directWithdraw(\\n        Data storage _self,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal returns (uint256, uint256) {\\n        IDetailedERC20 _token = _self.token();\\n\\n        uint256 _startingBalance = _token.balanceOf(_recipient);\\n        uint256 _startingTotalValue = _self.totalValue();\\n\\n        _self.adapter.withdraw(_recipient, _amount);\\n\\n        uint256 _endingBalance = _token.balanceOf(_recipient);\\n        uint256 _withdrawnAmount = _endingBalance.sub(_startingBalance);\\n\\n        uint256 _endingTotalValue = _self.totalValue();\\n        uint256 _decreasedValue = _startingTotalValue.sub(_endingTotalValue);\\n\\n        return (_withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev This function is used for harvest function to get the yield\\n    ///\\n    /// @param _recipient the account to withdraw the tokens to.\\n    /// @param _amount    the amount of tokens to withdraw.\\n    function indirectWithdraw(\\n        Data storage _self,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal returns (uint256, uint256) {\\n        IDetailedERC20 _token = _self.token();\\n\\n        uint256 _startingBalance = _token.balanceOf(_recipient);\\n        uint256 _startingTotalValue = _self.totalValue();\\n\\n        _self.adapter.indirectWithdraw(_recipient, _amount);\\n\\n        uint256 _endingBalance = _token.balanceOf(_recipient);\\n        uint256 _withdrawnAmount = _endingBalance.sub(_startingBalance);\\n\\n        uint256 _endingTotalValue = _self.totalValue();\\n        uint256 _decreasedValue = _startingTotalValue.sub(_endingTotalValue);\\n\\n        return (_withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Withdraw all the deposited funds from the vault.\\n    ///\\n    /// @param _recipient the account to withdraw the tokens to.\\n    function withdrawAll(Data storage _self, address _recipient) internal returns (uint256, uint256) {\\n        return _self.withdraw(_recipient, _self.totalDeposited);\\n    }\\n\\n    /// @dev Harvests yield from the vault.\\n    ///\\n    /// @param _recipient the account to withdraw the harvested yield to.\\n    function harvest(Data storage _self, address _recipient) internal returns (uint256, uint256) {\\n        if (_self.totalValue() <= _self.totalDeposited) {\\n            return (0, 0);\\n        }\\n        uint256 _withdrawAmount = _self.totalValue().sub(_self.totalDeposited);\\n        return _self.indirectWithdraw(_recipient, _withdrawAmount);\\n    }\\n\\n    /// @dev Adds a element to the list.\\n    ///\\n    /// @param _element the element to add.\\n    function push(List storage _self, Data memory _element) internal {\\n        _self.elements.push(_element);\\n    }\\n\\n    /// @dev Gets a element from the list.\\n    ///\\n    /// @param _index the index in the list.\\n    ///\\n    /// @return the element at the specified index.\\n    function get(List storage _self, uint256 _index) internal view returns (Data storage) {\\n        return _self.elements[_index];\\n    }\\n\\n    /// @dev Gets the last element in the list.\\n    ///\\n    /// This function will revert if there are no elements in the list.\\n    ///\\n    /// @return the last element in the list.\\n    function last(List storage _self) internal view returns (Data storage) {\\n        return _self.elements[_self.lastIndex()];\\n    }\\n\\n    /// @dev Gets the index of the last element in the list.\\n    ///\\n    /// This function will revert if there are no elements in the list.\\n    ///\\n    /// @return the index of the last element.\\n    function lastIndex(List storage _self) internal view returns (uint256) {\\n        uint256 _length = _self.length();\\n        return _length.sub(1, \\\"Vault.List: empty\\\");\\n    }\\n\\n    /// @dev Gets the number of elements in the list.\\n    ///\\n    /// @return the number of elements.\\n    function length(List storage _self) internal view returns (uint256) {\\n        return _self.elements.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDetailedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDetailedERC20 is IERC20 {\\n    function name() external returns (string memory);\\n\\n    function symbol() external returns (string memory);\\n\\n    function decimals() external returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IMintableERC20\",\"name\":\"_xtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sentinel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flushActivator\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IVaultAdapterV2\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"ActiveVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"CollateralizationLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"EmergencyExitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsFlushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"FundsHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"FundsRecalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"HarvestFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"PendingGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"RewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sentinel\",\"type\":\"address\"}],\"name\":\"SentinelUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"TokensLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childAmount\",\"type\":\"uint256\"}],\"name\":\"TokensRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmuter\",\"type\":\"address\"}],\"name\":\"TransmuterUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_COLLATERALIZATION_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_COLLATERALIZATION_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_RESOLUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_CONST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_linkGasOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultAdapterV2\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralizationLimit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPointMath.uq192x64\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flush\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushActivator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpLastDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpTotalCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultAdapter\",\"outputs\":[{\"internalType\":\"contract IVaultAdapterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultAdapterV2\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultAdapterV2\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUpdateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sentinel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setCollateralizationLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergencyExit\",\"type\":\"bool\"}],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flushActivator\",\"type\":\"uint256\"}],\"name\":\"setFlushActivator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestFee\",\"type\":\"uint256\"}],\"name\":\"setHarvestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"peg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sentinel\",\"type\":\"address\"}],\"name\":\"setSentinel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transmuter\",\"type\":\"address\"}],\"name\":\"setTransmuter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xtoken\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FormationV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000f71b4b8aa71f7923c94c7e20b8a434a4d9368eee000000000000000000000000b4247b0010f269ebaf9ad87d3bbb53431a0f333a000000000000000000000000b4247b0010f269ebaf9ad87d3bbb53431a0f333a00000000000000000000000000000000000000000000021e19e0c9bab2400000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}