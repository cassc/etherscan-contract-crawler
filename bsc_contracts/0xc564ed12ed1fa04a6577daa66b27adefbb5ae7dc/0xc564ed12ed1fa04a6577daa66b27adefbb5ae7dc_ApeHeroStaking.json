{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ApeHeroStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./ApeHeroPOWEmission.sol\\\";\\nimport \\\"./ApeHeroStakingAccount.sol\\\";\\nimport \\\"./ApeHeroStakingPool.sol\\\";\\n\\ninterface IRarity {\\n    function validateRarity(address asset, Rarity assetRarity, uint[] calldata tokenIds) external view returns (bool);\\n}\\n\\ninterface IVoucher is IERC20 {\\n    function mint(uint amount, address recipient) external;\\n    function burn(uint amount, address account) external;\\n}\\n\\ncontract ApeHeroStaking is ApeHeroPOWEmission, ReentrancyGuard, Pausable, IERC721Receiver {\\n    using Address for address;\\n    using Strings for uint;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct ContractData {\\n        PoolData[] activePools;\\n        PoolData[] inactivePools;\\n        uint defaultLockupDuration;\\n        uint defaultLockupPenalty;\\n        uint maxDepositPerTx;\\n        uint maxWithdrawPerTx;\\n        uint emissionStart;\\n        uint penaltyBalance;\\n        uint burnedPenaltyBalance;\\n        address POW;\\n        bool paused;\\n    }\\n\\n    address private RarityManager;\\n    ApeHeroStakingAccount private AccountManager;\\n    ApeHeroStakingPool private PoolManager;\\n\\n    // --- settings --- //\\n    uint public MAX_DEPOSIT_PER_TX = 10;\\n    uint public MAX_WITHDRAW_PER_TX = 5;\\n\\n    // --- POW --- //\\n    uint public PENALTY_BALANCE;\\n    uint public BURNED_PENALTY_BALANCE;\\n\\n    // events\\n    event FundsDirectlyDeposited(address sender, uint amount, uint timestamp);\\n    event FundsReceived(address sender, uint amount, uint timestamp);\\n    event Deposited(uint pid, address depositor, AssetType assetType, NFTType nftType, address asset, uint[] tokenIdsOrAmount, uint timestamp);\\n    event Withdrew(uint pid, address withdrawer, AssetType assetType, NFTType nftType, address asset, uint[] tokenIdsOrAmount, uint timestamp);\\n    event EmergencyReleased(uint pid, address executor, address affectedAccount, AssetType assetType, address asset, uint[] tokenIdsOrAmount, uint timestamp);\\n\\n    event Payout(address indexed account, uint pid, VestedRewards rewards, uint timestamp);\\n    event AccountUpdated(address indexed account, uint timestamp);\\n    event RewardEmissionStarted(uint blockNumber, uint timestamp);\\n\\n    constructor(address powToken, address accountMgr, address poolMgr, address rarityMgr) Ownable() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\\n        _grantRole(ADMIN, owner());\\n        _grantRole(OPERATOR, owner());\\n\\n        POW = powToken;\\n        RarityManager = rarityMgr;\\n\\n        AccountManager = ApeHeroStakingAccount(accountMgr);\\n        PoolManager = ApeHeroStakingPool(poolMgr);\\n    }\\n\\n    // --- fallback/received --- //\\n    receive() external payable {\\n        emit FundsReceived(_msgSender(), msg.value, block.timestamp);\\n    }\\n\\n    fallback() external payable {\\n        emit FundsDirectlyDeposited(_msgSender(), msg.value, block.timestamp);\\n    }\\n\\n    // --- overrides --- //\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    // --- ADMIN --- //\\n    function startRewardEmission() external onlyRole(ADMIN) {\\n        require(EMISSION_START == 0, \\\"Emission already started\\\");\\n\\n        uint startTime = IPOW(POW).EMISSION_START();\\n        require(startTime > 0, \\\"POW emission has not started\\\");\\n\\n        EMISSION_START = startTime;\\n\\n        PoolManager.activatePoolManager(startTime);\\n        AccountManager.activateAccountManager(startTime);\\n\\n        emit RewardEmissionStarted(block.number, block.timestamp);\\n    }\\n\\n    function pauseStaking() external onlyRole(ADMIN) {\\n        _pause();\\n    }\\n\\n    function unpauseStaking() external onlyRole(ADMIN) {\\n        _unpause();\\n    }\\n\\n    function setMaxDepositPerTx(uint max) external onlyRole(ADMIN) {\\n        MAX_DEPOSIT_PER_TX = max;\\n    }\\n\\n    function setMaxWithdrawPerTx(uint max) external onlyRole(ADMIN) {\\n        MAX_WITHDRAW_PER_TX = max;\\n    }\\n\\n    function burnPenaltyBalance() external onlyAdminAndOperator {\\n        if (PENALTY_BALANCE > 0) {\\n            IPOW(POW).burn(PENALTY_BALANCE);\\n            BURNED_PENALTY_BALANCE += PENALTY_BALANCE;\\n            PENALTY_BALANCE = 0;\\n        }\\n    }\\n\\n    // --- UTILS / INTERNAL --- //\\n    function handleLockupPenalty(address account, uint deposited, Pool memory pool) internal returns (bool) {\\n        if (\\n            EMISSION_START == 0 || pool.lockupDuration == 0 || pool.lockupPenalty == 0 ||\\n            (block.timestamp - deposited) >= pool.lockupDuration\\n        ) {\\n            return true;\\n        }\\n\\n        if ((block.timestamp - deposited) < pool.lockupDuration) {\\n            require(\\n                IPOW(POW).balanceOf(account) >= pool.lockupPenalty,\\n                \\\"Insufficient $POW balance to pay for lockup penalty\\\"\\n            );\\n            IPOW(POW).transferFrom(account, address(this), pool.lockupPenalty);\\n            PENALTY_BALANCE += pool.lockupPenalty;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    // --- STAKING --- //\\n    function _depositNFT(address account, address asset, address assetVoucher, uint tokenId, uint pid, Rarity rarity, bool isAssetDeposit) internal {\\n        IERC721(asset).safeTransferFrom(account, address(this), tokenId);\\n        IVoucher(assetVoucher).mint(1, account);\\n        AccountManager.createAccountAssets(\\n            account, asset, tokenId, AssetType.NFT, rarity, isAssetDeposit ? NFTType.Asset : NFTType.Booster, pid);\\n        isAssetDeposit ? PoolManager.addPoolAssets(pid, 1) : PoolManager.addPoolBoosters(pid, 1);\\n        AccountManager.addAccountAssets(account, pid, tokenId, true, isAssetDeposit);\\n    }\\n\\n    function depositNFT(address account, Pool memory pool, uint pid, uint[] memory tokens, NFTType nftType) internal nonReentrant {\\n        uint _assetsCount = AccountManager.accountAssetsCount(account, pid, pool.assetType == AssetType.NFT);\\n        uint _boostersCount;\\n        bool isAssetDeposit = nftType == NFTType.Asset;\\n        if (isAssetDeposit) {\\n            if (pool.maxAssets > 0) {\\n                require((_assetsCount + tokens.length) <= pool.maxAssets, \\\"Maximum assets deposit limit reached\\\");\\n            }\\n            if (pool.assetRarity != Rarity.NONE) {\\n                require(IRarity(RarityManager).validateRarity(pool.asset, pool.assetRarity, tokens), \\\"Invalid rarity\\\");\\n            }\\n        } else {\\n            require(_assetsCount > 0, \\\"Cannot deposit boosters without assets in pool\\\");\\n            _boostersCount = AccountManager.accountBoostersCount(account, pid);\\n            if (pool.maxBoosters > 0) {\\n                require((_boostersCount + tokens.length) <= pool.maxBoosters, \\\"Maximum boosters deposit limit reached\\\");\\n            }\\n        }\\n\\n        AccountManager.settleAccountPoolBalance(account, pid);\\n        address asset = isAssetDeposit ? pool.asset : pool.booster;\\n        address assetVoucher = isAssetDeposit ? pool.assetVoucher : pool.boosterVoucher;\\n        Rarity rarity = isAssetDeposit ? pool.assetRarity : Rarity.NONE;\\n        for (uint _idx = 0; _idx < tokens.length; _idx++) {\\n            _depositNFT(account, asset, assetVoucher, tokens[_idx], pid, rarity, isAssetDeposit);\\n        }\\n\\n        emit Deposited(pid, account, pool.assetType, nftType, (isAssetDeposit ? pool.asset : pool.booster), tokens, block.timestamp);\\n    }\\n\\n    function depositFungible(address account, Pool memory pool, uint pid, uint[] memory tokensAmount) internal nonReentrant {\\n        uint _amount = tokensAmount[0];\\n        require(_amount > 0, \\\"Depositing amount must be greater than 0\\\");\\n\\n        uint _assetsCount = AccountManager.accountAssetsCount(account, pid, false);\\n        require(pool.maxAssets == 0 || (_amount + _assetsCount) <= pool.maxAssets,\\\"Maximum assets deposit limit reached\\\");\\n        require(IERC20(pool.asset).balanceOf(account) >= _amount, \\\"Depositing amount cannot be great than owned balance\\\");\\n\\n        AccountManager.settleAccountPoolBalance(account, pid);\\n        IERC20(pool.asset).transferFrom(account, address(this), _amount);\\n        PoolManager.addPoolAssets(pid, _amount);\\n        AccountManager.addAccountAssets(account, pid, _amount, false, false);\\n\\n        emit Deposited(pid, account, pool.assetType, NFTType.NONE, pool.asset, tokensAmount, block.timestamp);\\n    }\\n\\n    function deposit(uint pid, uint[] memory tokenIdsOrAmount, NFTType nftType) public whenNotPaused {\\n        if (nftType != NFTType.NONE) {\\n            require(tokenIdsOrAmount.length <= MAX_DEPOSIT_PER_TX, \\\"NFT amount exceeds max deposit limit. Try depositing fewer items per transaction\\\");\\n        }\\n\\n        Pool memory _pool = PoolManager.getPoolWithoutRewards(pid);\\n        require(_pool.status == PoolStatus.ACTIVE, \\\"Pool is not active\\\");\\n\\n        AccountManager.settleAccountPoolBalance(_msgSender(), pid);\\n        if (nftType == NFTType.NONE) {\\n            depositFungible(_msgSender(), _pool, pid, tokenIdsOrAmount);\\n        } else {\\n            depositNFT(_msgSender(), _pool, pid, tokenIdsOrAmount, nftType);\\n        }\\n        AccountManager.settleAccountPoolBalanceAfterUpdate(_msgSender(), pid);\\n    }\\n\\n    function _withdrawNFT(address account, address asset, address assetVoucher, uint tokenId, uint pid, bool isAssetWithdraw) internal {\\n        IERC721(asset).safeTransferFrom(address(this), account, tokenId);\\n        IVoucher(assetVoucher).burn(1, account);\\n\\n        isAssetWithdraw ? PoolManager.subtractPoolAssets(pid, 1) : PoolManager.subtractPoolBoosters(pid, 1);\\n        AccountManager.removeAccountAssets(account, pid, asset, tokenId, true, isAssetWithdraw);\\n    }\\n\\n    function _removeBoostersIfNoAssets(address account, uint pid, Pool memory pool, bool isNFT) internal {\\n        if (\\n            AccountManager.accountAssetsCount(account, pid, isNFT) == 0 &&\\n            AccountManager.accountBoostersCount(account, pid) > 0\\n        ) {\\n            Asset[] memory _allPoolBoosters = AccountManager.accountPoolAssets(account, pid, pool, true);\\n            for (uint _idx = 0; _idx < _allPoolBoosters.length; _idx++) {\\n                _withdrawNFT(account, pool.booster, pool.boosterVoucher, _allPoolBoosters[_idx].tokenIdOrAmount, pid, false);\\n            }\\n        }\\n    }\\n\\n    function withdrawNFT(address account, Pool memory pool, uint pid, uint[] memory tokens, NFTType nftType, bool mustPayPenalty) internal nonReentrant {\\n        uint _assetsCount = AccountManager.accountAssetsCount(account, pid, true);\\n        uint _boostersCount = AccountManager.accountBoostersCount(account, pid);\\n        bool isAssetWithdraw = nftType == NFTType.Asset;\\n        require(\\n            isAssetWithdraw ? (_assetsCount > 0) : (_boostersCount > 0),\\n            \\\"No assets found in pool\\\"\\n        );\\n\\n        address asset = isAssetWithdraw ? pool.asset : pool.booster;\\n        address assetVoucher = isAssetWithdraw ? pool.assetVoucher : pool.boosterVoucher;\\n        for (uint _idx = 0; _idx < tokens.length; _idx++) {\\n            require(AccountManager.assetOwner(account, asset, tokens[_idx]), \\\"Not owner of asset\\\");\\n            if (mustPayPenalty && isAssetWithdraw) {\\n                require(\\n                    handleLockupPenalty(account, AccountManager.assetDeposited(asset, tokens[_idx]), pool),\\n                    \\\"Unable to withdraw without paying lockup penalty\\\"\\n                );\\n            }\\n            _withdrawNFT(account, asset, assetVoucher, tokens[_idx], pid, isAssetWithdraw);\\n        }\\n        if (isAssetWithdraw) {\\n            _removeBoostersIfNoAssets(account, pid, pool, true);\\n        }\\n\\n        emit Withdrew(pid, account, pool.assetType, nftType, asset, tokens, block.timestamp);\\n    }\\n\\n    function withdrawFungible(address account, Pool memory pool, uint pid, uint[] memory tokensAmount, bool mustPayPenalty) internal nonReentrant {\\n        uint _assetsCount = AccountManager.accountAssetsCount(account, pid, false);\\n        uint _amount = tokensAmount[0];\\n        require(\\n            (_amount > 0) && (_amount <= _assetsCount),\\n            \\\"Withdraw amount must be greater than 0 and smaller or equal to deposited balance\\\"\\n        );\\n\\n        if (mustPayPenalty) {\\n            require(\\n                handleLockupPenalty(account, AccountManager.fungibleAssetDeposited(_msgSender(), pid), pool),\\n                \\\"Unable to withdraw without paying lockup penalty\\\"\\n            );\\n        }\\n\\n        PoolManager.subtractPoolAssets(pid, _amount);\\n        AccountManager.removeAccountAssets(account, pid, pool.asset, _amount, false, false);\\n        IERC20(pool.asset).transfer(account, _amount);\\n        _removeBoostersIfNoAssets(account, pid, pool, false);\\n\\n        emit Withdrew(pid, account, pool.assetType, NFTType.NONE, pool.asset, tokensAmount, block.timestamp);\\n    }\\n\\n    function withdraw(uint pid, uint[] memory tokenIdsOrAmount, NFTType nftType) public whenNotPaused {\\n        if (nftType != NFTType.NONE) {\\n            require(tokenIdsOrAmount.length <= MAX_WITHDRAW_PER_TX, \\\"NFT amount exceeds max withdrawal limit. Withdraw fewer items per transaction\\\");\\n        }\\n\\n        Pool memory _pool = PoolManager.getPoolWithoutRewards(pid);\\n        AccountManager.settleAccountPoolBalance(_msgSender(), pid);\\n        if (nftType == NFTType.NONE) {\\n            withdrawFungible(_msgSender(), _pool, pid, tokenIdsOrAmount, true);\\n        } else {\\n            withdrawNFT(_msgSender(), _pool, pid, tokenIdsOrAmount, nftType, true);\\n        }\\n        AccountManager.settleAccountPoolBalanceAfterUpdate(_msgSender(), pid);\\n    }\\n\\n    function emergencyRelease(address account, uint pid, uint limit) external onlyRole(ADMIN) {\\n        Pool memory _pool = PoolManager.getPoolWithoutRewards(pid);\\n        bool isFungiblePool = _pool.assetType == AssetType.Fungible;\\n        uint _assetsCount = AccountManager.accountAssetsCount(account, pid, !isFungiblePool);\\n        require(_assetsCount > 0, \\\"Account has no assets in this pool\\\");\\n        uint _limit = _assetsCount > (limit > 0 ? limit : 10) ? limit : _assetsCount;\\n\\n        Asset[] memory _poolAssets = isFungiblePool ?\\n            AccountManager.accountPoolFungibleAssets(account, pid, _pool, false) :\\n            AccountManager.accountPoolAssets(account, pid, _pool, false);\\n\\n        uint[] memory _tokenIdsOrAmount = new uint[](isFungiblePool ? 1 : _limit);\\n\\n        AccountManager.settleAccountPoolBalance(_msgSender(), pid);\\n        if (isFungiblePool) {\\n            _tokenIdsOrAmount[0] = _poolAssets[0].tokenIdOrAmount;\\n            withdrawFungible(account, _pool, pid, _tokenIdsOrAmount, false);\\n        } else {\\n            for (uint _idx = 0; _idx < _limit; _idx++) {\\n                _tokenIdsOrAmount[_idx] = _poolAssets[_idx].tokenIdOrAmount;\\n            }\\n            withdrawNFT(account, _pool, pid, _tokenIdsOrAmount, NFTType.Asset, false);\\n        }\\n        AccountManager.settleAccountPoolBalanceAfterUpdate(_msgSender(), pid);\\n\\n        emit EmergencyReleased(pid, _msgSender(), account, _pool.assetType, _pool.asset, _tokenIdsOrAmount, block.timestamp);\\n    }\\n\\n    // --- REWARDS --- //\\n    function claimPoolRewards(uint pid) external whenNotPaused nonReentrant {\\n        require(EMISSION_START != 0, \\\"Reward emission not started\\\");\\n\\n        VestedRewards memory _rewards = AccountManager.claimPoolRewards(_msgSender(), pid);\\n        emit Payout(_msgSender(), pid, _rewards, block.timestamp);\\n    }\\n\\n    function claimAllPoolsRewards() external whenNotPaused nonReentrant {\\n        require(EMISSION_START != 0, \\\"Reward emission not started\\\");\\n\\n        VestedRewards memory _rewards = AccountManager.claimAllPoolsRewards(_msgSender());\\n        emit Payout(_msgSender(), 0, _rewards, block.timestamp);\\n    }\\n\\n    // --- basic info --- //\\n    function cData() public view returns (ContractData memory) {\\n        return ContractData(\\n            PoolManager.getPoolsByStatus(PoolStatus.ACTIVE),\\n            PoolManager.getPoolsByStatus(PoolStatus.INACTIVE),\\n            PoolManager.DEFAULT_LOCKUP_DURATION(),\\n            PoolManager.DEFAULT_LOCKUP_PENALTY(),\\n            MAX_DEPOSIT_PER_TX,\\n            MAX_WITHDRAW_PER_TX,\\n            EMISSION_START,\\n            PENALTY_BALANCE,\\n            BURNED_PENALTY_BALANCE,\\n            POW,\\n            paused()\\n        );\\n    }\\n\\n    function wData(address account) public view returns (AccountData memory) {\\n        return AccountManager.accountData(account);\\n    }\\n\\n    function aData() public view returns (AccountData memory) {\\n        return wData(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ApeHeroPOWEmission.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ApeHeroTypes.sol\\\";\\n\\ninterface IPOW is IERC20 {\\n    function EMISSION_START() external view returns (uint);\\n    function mint(uint amount, address recipient) external;\\n    function burn(uint amount) external;\\n}\\n\\ncontract ApeHeroPOWEmission is Ownable, AccessControlEnumerable {\\n    address public POW;\\n    uint public GENESIS_BLOCK;\\n    uint public EMISSION_START;\\n    uint WEEK_IN_SECONDS = 604800;\\n\\n    // --- supply --- //\\n    uint public MAX_SUPPLY = 600000000e18;\\n    uint public STAKING_MAX_SUPPLY = 150000000e18;\\n    uint public FUTURE_ROADMAP_MAX_SUPPLY = 150000000e18;\\n    uint public INITIAL_LIQUIDITY_MAX_SUPPLY = 60000000e18;\\n    uint public MARKETING_MAX_SUPPLY = 150000000e18;\\n    uint public TEAM_MAX_SUPPLY = 90000000e18;\\n\\n    // emission schedule for both staking & future roadmap\\n    uint[] public WEEKLY_EMISSION_SCHEDULE = [\\n        0, 12902400e18, 9676800e18, 6451200e18, 5644800e18, 4838400e18, 4032000e18, 3225600e18, 2822400e18, 2419200e18, 2016000e18, 1612800e18, 1512000e18,\\n        1411200e18, 1310400e18, 1209600e18, 1108800e18, 1008000e18, 907200e18, 806400e18, 705600e18, 604800e18, 504000e18, 403200e18\\n    ];\\n    uint[] public MAX_WEEKLY_EMISSION_SCHEDULE = [\\n        0, 12902400e18, 22579200e18, 29030400e18, 34675200e18, 39513600e18, 43545600e18, 46771200e18, 49593600e18, 52012800e18, 54028800e18, 55641600e18,\\n        57153600e18, 58564800e18, 59875200e18, 61084800e18, 62193600e18, 63201600e18, 64108800e18, 64915200e18, 65620800e18, 66225600e18, 66729600e18,\\n        67132800e18\\n    ];\\n\\n    uint public FIRST_CLIFF_WEEKLY_EMISSION_RATE = 302400e18;\\n    uint public FIRST_CLIFF_EMISSION_TOTAL_SUPPLY = 40219200e18;\\n    uint public SECOND_CLIFF_WEEKLY_EMISSION_RATE = 201600e18;\\n    uint public SECOND_CLIFF_EMISSION_TOTAL_SUPPLY = 41932800e18;\\n    uint public THIRD_CLIFF_WEEKLY_EMISSION_RATE = 100800e18;\\n\\n    // --- cliff/halving schedules --- //\\n    uint public FIRST_CLIFF_WEEK = 24;\\n    uint public SECOND_CLIFF_WEEK = 157;\\n    uint public THIRD_CLIFF_WEEK = 365;\\n\\n    // vesting\\n    uint public VESTED_FULL_WEEK = 49;\\n    uint[] public VESTED_SCHEDULE = [\\n        0, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53,\\n        55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99\\n    ];\\n\\n    // unlocking\\n    uint public UNLOCK_START_WEEK = 30;\\n    uint public UNLOCK_FULL_WEEK = 49;\\n    uint[] public UNLOCK_SCHEDULE = [400, 500, 600, 700, 800, 900, 1000, 1200, 1400, 1600, 2000, 2600, 3400, 4200, 5200, 6200, 7200, 8400, 9600];\\n\\n    // vars\\n    uint public WEEKLY_INTERVAL = 583200; // (6 hours flexibility)\\n    uint public MONTHLY_INTERVAL = 2397600; // (6 hours flexibility)\\n\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant OPERATOR = keccak256(\\\"OPERATOR\\\");\\n    bytes32 public constant CONTROLLER = keccak256(\\\"CONTROLLER\\\");\\n\\n    // --- modifiers --- //\\n    modifier onlyController() {\\n        require(hasRole(CONTROLLER, _msgSender()), \\\"CONTROLLER role required\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminAndOperator() {\\n        require(\\n            hasRole(ADMIN, _msgSender()) || hasRole(OPERATOR, _msgSender()),\\n            \\\"ADMIN or OPERATOR role required\\\"\\n        );\\n        _;\\n    }\\n\\n    // --- utils --- //\\n    function currentWeek() public view returns (uint) {\\n        if (EMISSION_START == 0) {\\n            return 0;\\n        }\\n        uint _secondsSinceGenesis = block.timestamp - EMISSION_START;\\n        return (_secondsSinceGenesis / WEEK_IN_SECONDS) + ((_secondsSinceGenesis % WEEK_IN_SECONDS) > 0 ? 1 : 0);\\n    }\\n\\n    function currentMoment(uint ts) public view returns (CurrentMoment memory) {\\n        if (EMISSION_START == 0) {\\n            return CurrentMoment(0, 0, 0, 0, 0);\\n        }\\n        uint _timestamp = ts > 0 ? ts : block.timestamp;\\n        uint _secondsSinceGenesis = _timestamp - EMISSION_START;\\n        uint _secondsSinceWeekStarted = _secondsSinceGenesis % WEEK_IN_SECONDS;\\n        return CurrentMoment({\\n            timestamp: _timestamp,\\n            week: (_secondsSinceGenesis / WEEK_IN_SECONDS) + (_secondsSinceWeekStarted > 0 ? 1 : 0),\\n            secondsSinceGenesis: _secondsSinceGenesis,\\n            secondsSinceWeekStarted: _secondsSinceWeekStarted,\\n            secondsUntilWeekEnds: WEEK_IN_SECONDS - _secondsSinceWeekStarted\\n        });\\n    }\\n\\n    function currentVestedForWeek(uint week) public view returns (uint) {\\n        return week >= VESTED_FULL_WEEK ? 1e4 : VESTED_SCHEDULE[week] * 100;\\n    }\\n\\n    function currentVested() public view returns (uint) {\\n        return currentVestedForWeek(currentWeek());\\n    }\\n\\n    function checkAfter(uint checkpoint, uint afterInterval) public view returns (bool) {\\n        return (block.timestamp - checkpoint) >= afterInterval;\\n    }\\n\\n    function monthlyEmissionWeekFor(uint lastEmittedWeek) public view returns (uint) {\\n        uint _eWeek = currentWeek();\\n        if ((lastEmittedWeek + 3) == _eWeek) {\\n            _eWeek += 1;\\n        }\\n        return _eWeek;\\n    }\\n\\n    function weeklyEmissionWeekFor(uint lastEmittedWeek) public view returns (uint) {\\n        uint _eWeek = currentWeek();\\n        if (lastEmittedWeek == _eWeek) {\\n            _eWeek = lastEmittedWeek + 1;\\n        }\\n        return _eWeek;\\n    }\\n\\n    function getStandardYieldEmissionForWeek(uint weekNum) public view returns (uint) {\\n        if (weekNum >= THIRD_CLIFF_WEEK) {\\n            return THIRD_CLIFF_WEEKLY_EMISSION_RATE;\\n        } else if (weekNum >= SECOND_CLIFF_WEEK) {\\n            return SECOND_CLIFF_WEEKLY_EMISSION_RATE;\\n        } else if (weekNum >= FIRST_CLIFF_WEEK) {\\n            return FIRST_CLIFF_WEEKLY_EMISSION_RATE;\\n        }\\n        return WEEKLY_EMISSION_SCHEDULE[weekNum];\\n    }\\n\\n    function getMaxStandardYieldEmissionForWeek(uint weekNum) public view returns (uint) {\\n        uint _maxYieldForWeek;\\n        if (weekNum < FIRST_CLIFF_WEEK) {\\n            _maxYieldForWeek = MAX_WEEKLY_EMISSION_SCHEDULE[weekNum];\\n        } else {\\n            _maxYieldForWeek = MAX_WEEKLY_EMISSION_SCHEDULE[23];\\n            if (weekNum >= THIRD_CLIFF_WEEK) {\\n                _maxYieldForWeek +=\\n                    FIRST_CLIFF_EMISSION_TOTAL_SUPPLY +\\n                    SECOND_CLIFF_EMISSION_TOTAL_SUPPLY +\\n                    ((1 + weekNum - THIRD_CLIFF_WEEK) * THIRD_CLIFF_WEEKLY_EMISSION_RATE);\\n            } else if (weekNum >= SECOND_CLIFF_WEEK) {\\n                _maxYieldForWeek +=\\n                FIRST_CLIFF_EMISSION_TOTAL_SUPPLY +\\n                ((1 + weekNum - SECOND_CLIFF_WEEK) * SECOND_CLIFF_WEEKLY_EMISSION_RATE);\\n            } else if (weekNum >= FIRST_CLIFF_WEEK) {\\n                _maxYieldForWeek += ((1 + weekNum - FIRST_CLIFF_WEEK) * FIRST_CLIFF_WEEKLY_EMISSION_RATE);\\n            }\\n        }\\n        return _maxYieldForWeek;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ApeHeroStakingAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./ApeHeroPOWEmission.sol\\\";\\n\\ninterface IMasterApe is IERC20 {\\n    function stakingPayout(address account, uint amount) external returns (VestedRewards memory);\\n}\\n\\ninterface IStakingPool {\\n    function getPool(uint pid) external view returns (PoolData memory);\\n    function getPoolCollections(uint[] memory pids) external view returns (PoolData[] memory);\\n    function getPoolCollectionsWithoutRewards(uint[] memory pids) external view returns (Pool[] memory);\\n}\\n\\ninterface IVault {\\n    function wData(address account) external view returns (VaultAccountData memory);\\n}\\n\\ncontract ApeHeroStakingAccount is ApeHeroPOWEmission {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    // --- account rewards --- //\\n    // {[account]: {[pid]: uint<rewards>}\\n    mapping(address => mapping(uint => uint)) private ACCOUNT_ACCRUED_POOL_ASSETS_REWARDS;\\n    mapping(address => mapping(uint => uint)) private ACCOUNT_PAID_POOL_ASSETS_REWARDS;\\n    mapping(address => mapping(uint => uint)) private ACCOUNT_CLAIMED_POOL_ASSETS_REWARDS;\\n\\n    mapping(address => mapping(uint => uint)) private ACCOUNT_ACCRUED_POOL_BOOSTERS_REWARDS;\\n    mapping(address => mapping(uint => uint)) private ACCOUNT_PAID_POOL_BOOSTERS_REWARDS;\\n    mapping(address => mapping(uint => uint)) private ACCOUNT_CLAIMED_POOL_BOOSTERS_REWARDS;\\n\\n    // --- assets --- //\\n    // {[assetCA]: {[tokenId]: Asset}}\\n    mapping(address => mapping(uint => Asset)) private ASSETS;\\n\\n    // {[account]: uint\\n    mapping(address => uint) private ACCOUNT_ASSETS_TOTAL;\\n    mapping(address => uint) private ACCOUNT_BOOSTERS_TOTAL;\\n\\n    // {[account]: [pid,]}\\n    mapping(address => EnumerableSet.UintSet) private ACCOUNT_POOLS;\\n    // {[account]: {[pid]: uint<total>}}\\n    mapping(address => mapping(uint => uint)) private ACCOUNT_POOL_FUNGIBLE_ASSETS;\\n    // {[account]: {[pid]: uint<block.timestamp>}}\\n    mapping(address => mapping(uint => uint)) private ACCOUNT_POOL_FUNGIBLE_ASSETS_DEPOSITED;\\n    // {[account]: {[pid]: [tokenId, ]}}\\n    mapping(address => mapping(uint => EnumerableSet.UintSet)) private ACCOUNT_POOL_ASSETS;\\n    // {[account]: {[pid]: [tokenId, ]}}\\n    mapping(address => mapping(uint => EnumerableSet.UintSet)) private ACCOUNT_POOL_BOOSTERS;\\n\\n    // events\\n    event AccountManagerActivated(address controller, uint timestamp);\\n\\n    address MasterApe;\\n    address StakingPool;\\n    address VAULT;\\n\\n    constructor(address masterApe, address poolManager, address vaultManager) Ownable() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\\n        _grantRole(ADMIN, owner());\\n\\n        MasterApe = masterApe;\\n        StakingPool = poolManager;\\n        VAULT = vaultManager;\\n    }\\n\\n    function updateAccountPools(address account, uint pid) internal {\\n        if (\\n            (ACCOUNT_POOL_FUNGIBLE_ASSETS[account][pid] == 0) &&\\n            (ACCOUNT_POOL_ASSETS[account][pid].length() == 0) &&\\n            (ACCOUNT_POOL_BOOSTERS[account][pid].length() == 0)\\n        ) {\\n            ACCOUNT_POOLS[account].remove(pid);\\n        } else if (\\n            (ACCOUNT_POOL_FUNGIBLE_ASSETS[account][pid] > 0) ||\\n            (ACCOUNT_POOL_ASSETS[account][pid].length() > 0) ||\\n            (ACCOUNT_POOL_BOOSTERS[account][pid].length() > 0)\\n        ) {\\n            ACCOUNT_POOLS[account].add(pid);\\n        }\\n    }\\n\\n    // --- CONTROLLER --- //\\n    function activateAccountManager(uint startTime) external onlyController {\\n        require(EMISSION_START == 0, \\\"Pool Manager already activated\\\");\\n        EMISSION_START = startTime;\\n\\n        emit AccountManagerActivated(_msgSender(), block.timestamp);\\n    }\\n\\n    function createAccountAssets(\\n        address account, address poolAsset, uint tokenId, AssetType assetType, Rarity rarity, NFTType nftType, uint pid\\n    ) external onlyController {\\n        ASSETS[poolAsset][tokenId] = Asset(\\n            account, poolAsset, tokenId, assetType, rarity, nftType, pid, block.timestamp\\n        );\\n    }\\n\\n    function addAccountAssets(address account, uint pid, uint tokenIdOrAmount, bool isNFT, bool isAssetNFT) external onlyController {\\n        if (isNFT) {\\n            if (isAssetNFT) {\\n                ACCOUNT_ASSETS_TOTAL[account] += 1;\\n                ACCOUNT_POOL_ASSETS[account][pid].add(tokenIdOrAmount);\\n            } else {\\n                ACCOUNT_BOOSTERS_TOTAL[account] += 1;\\n                ACCOUNT_POOL_BOOSTERS[account][pid].add(tokenIdOrAmount);\\n            }\\n        } else {\\n            if (ACCOUNT_POOL_FUNGIBLE_ASSETS[account][pid] == 0) {\\n                ACCOUNT_ASSETS_TOTAL[account] += 1;\\n            }\\n            ACCOUNT_POOL_FUNGIBLE_ASSETS[account][pid] += tokenIdOrAmount;\\n            ACCOUNT_POOL_FUNGIBLE_ASSETS_DEPOSITED[account][pid] = block.timestamp;\\n        }\\n        updateAccountPools(account, pid);\\n    }\\n\\n    function removeAccountAssets(address account, uint pid, address poolAsset, uint tokenIdOrAmount, bool isNFT, bool isAssetNFT) external onlyController {\\n        if (isNFT) {\\n            if (isAssetNFT) {\\n                ACCOUNT_ASSETS_TOTAL[account] -= 1;\\n                ACCOUNT_POOL_ASSETS[account][pid].remove(tokenIdOrAmount);\\n            } else {\\n                ACCOUNT_BOOSTERS_TOTAL[account] -= 1;\\n                ACCOUNT_POOL_BOOSTERS[account][pid].remove(tokenIdOrAmount);\\n            }\\n            delete ASSETS[poolAsset][tokenIdOrAmount];\\n        } else {\\n            ACCOUNT_POOL_FUNGIBLE_ASSETS[account][pid] -= tokenIdOrAmount;\\n            if (ACCOUNT_POOL_FUNGIBLE_ASSETS[account][pid] == 0) {\\n                ACCOUNT_ASSETS_TOTAL[account] -= 1;\\n            }\\n        }\\n        updateAccountPools(account, pid);\\n    }\\n\\n    function settleAccountPoolBalanceByPoolData(address account, PoolData memory poolData) internal {\\n        uint _pid = poolData.pool.pid;\\n        uint _assetsCount = poolData.pool.assetType == AssetType.NFT ? ACCOUNT_POOL_ASSETS[account][_pid].length() :\\n            (ACCOUNT_POOL_FUNGIBLE_ASSETS[account][_pid] / (10 ** poolData.pool.decimal));\\n        uint _boostersCount = ACCOUNT_POOL_BOOSTERS[account][_pid].length();\\n\\n        if (_assetsCount > 0) {\\n            uint _lifetimeAssetsRewards = _assetsCount * poolData.rewards.assetsLifetime;\\n            uint _pendingAssetsRewards = _lifetimeAssetsRewards - ACCOUNT_PAID_POOL_ASSETS_REWARDS[account][_pid];\\n            ACCOUNT_ACCRUED_POOL_ASSETS_REWARDS[account][_pid] += _pendingAssetsRewards;\\n            ACCOUNT_PAID_POOL_ASSETS_REWARDS[account][_pid] = _lifetimeAssetsRewards;\\n        }\\n\\n        if (_boostersCount > 0) {\\n            uint _lifeTimeBoostersRewards = _boostersCount * poolData.rewards.boostersLifetime;\\n            uint _pendingBoostersRewards = _lifeTimeBoostersRewards - ACCOUNT_PAID_POOL_BOOSTERS_REWARDS[account][_pid];\\n            ACCOUNT_ACCRUED_POOL_BOOSTERS_REWARDS[account][_pid] += _pendingBoostersRewards;\\n            ACCOUNT_PAID_POOL_BOOSTERS_REWARDS[account][_pid] = _lifeTimeBoostersRewards;\\n        }\\n    }\\n\\n    function settleAccountPoolBalance(address account, uint pid) public onlyController {\\n        PoolData memory _poolData = IStakingPool(StakingPool).getPool(pid);\\n        settleAccountPoolBalanceByPoolData(account, _poolData);\\n    }\\n\\n    function settleAccountPoolBalanceAfterUpdate(address account, uint pid) public onlyController {\\n        PoolData memory _poolData = IStakingPool(StakingPool).getPool(pid);\\n        uint _assetsCount = _poolData.pool.assetType == AssetType.NFT ? ACCOUNT_POOL_ASSETS[account][pid].length() :\\n            (ACCOUNT_POOL_FUNGIBLE_ASSETS[account][pid] / (10 ** _poolData.pool.decimal));\\n        uint _boostersCount = ACCOUNT_POOL_BOOSTERS[account][pid].length();\\n\\n        if (_assetsCount > 0) {\\n            ACCOUNT_PAID_POOL_ASSETS_REWARDS[account][pid] = _assetsCount * _poolData.rewards.assetsLifetime;\\n        }\\n\\n        if (_boostersCount > 0) {\\n            ACCOUNT_PAID_POOL_BOOSTERS_REWARDS[account][pid] = _boostersCount * _poolData.rewards.boostersLifetime;\\n        }\\n    }\\n\\n    function claimPoolRewardsWithPoolData(address account, PoolData memory poolData) public onlyController returns (VestedRewards memory) {\\n        settleAccountPoolBalanceByPoolData(account, poolData);\\n        uint _pid = poolData.pool.pid;\\n        uint _accruedRewards = ACCOUNT_ACCRUED_POOL_ASSETS_REWARDS[account][_pid] + ACCOUNT_ACCRUED_POOL_BOOSTERS_REWARDS[account][_pid];\\n\\n        VestedRewards memory _rewards;\\n        if (_accruedRewards > 0) {\\n            _rewards = IMasterApe(MasterApe).stakingPayout(account, _accruedRewards);\\n            require(_rewards.total > 0, \\\"Payout failed\\\");\\n\\n            ACCOUNT_CLAIMED_POOL_ASSETS_REWARDS[account][_pid] += ACCOUNT_ACCRUED_POOL_ASSETS_REWARDS[account][_pid];\\n            ACCOUNT_CLAIMED_POOL_BOOSTERS_REWARDS[account][_pid] += ACCOUNT_ACCRUED_POOL_BOOSTERS_REWARDS[account][_pid];\\n            ACCOUNT_ACCRUED_POOL_ASSETS_REWARDS[account][_pid] = 0;\\n            ACCOUNT_ACCRUED_POOL_BOOSTERS_REWARDS[account][_pid] = 0;\\n            settleAccountPoolBalanceByPoolData(account, poolData);\\n        }\\n        return _rewards;\\n    }\\n\\n    function claimPoolRewards(address account, uint pid) public onlyController returns (VestedRewards memory) {\\n        PoolData memory _poolData = IStakingPool(StakingPool).getPool(pid);\\n        return claimPoolRewardsWithPoolData(account, _poolData);\\n    }\\n\\n    function claimAllPoolsRewards(address account) public onlyController returns (VestedRewards memory) {\\n        uint[] memory _allPoolPids = accountPoolPids(account);\\n        PoolData[] memory _allPools = IStakingPool(StakingPool).getPoolCollections(_allPoolPids);\\n        VestedRewards memory _allRewards;\\n        VestedRewards memory _rewards;\\n\\n        for (uint idx = 0; idx < _allPools.length; idx++) {\\n            _rewards = claimPoolRewardsWithPoolData(account, _allPools[idx]);\\n            _allRewards.total += _rewards.total;\\n            _allRewards.vested += _rewards.vested;\\n            _allRewards.locked += _rewards.locked;\\n        }\\n\\n        return _allRewards;\\n    }\\n\\n    // --- public/external --- //\\n    function accountPoolPids(address account) public view returns (uint[] memory) {\\n        uint _poolsCount = ACCOUNT_POOLS[account].length();\\n        uint[] memory _allAccountPools = new uint[](_poolsCount);\\n        for (uint idx = 0; idx < _poolsCount; idx++) {\\n            _allAccountPools[idx] = ACCOUNT_POOLS[account].at(idx);\\n        }\\n        return _allAccountPools;\\n    }\\n\\n    function poolRewards(uint pid, address account, PoolData memory poolData) internal view returns (AccountRewards memory) {\\n        uint _assetsCount = poolData.pool.assetType == AssetType.NFT ? ACCOUNT_POOL_ASSETS[account][pid].length() :\\n            ACCOUNT_POOL_FUNGIBLE_ASSETS[account][pid] / (10 ** poolData.pool.decimal);\\n\\n        uint _pendingAssetsRewards;\\n        if (_assetsCount > 0) {\\n            _pendingAssetsRewards = ACCOUNT_ACCRUED_POOL_ASSETS_REWARDS[account][pid] +\\n                ((_assetsCount * poolData.rewards.assetsLifetime) - ACCOUNT_PAID_POOL_ASSETS_REWARDS[account][pid]);\\n        }\\n\\n        uint _pendingBoostersRewards;\\n        if (ACCOUNT_POOL_BOOSTERS[account][pid].length() > 0) {\\n            _pendingBoostersRewards = ACCOUNT_ACCRUED_POOL_BOOSTERS_REWARDS[account][pid] +\\n            ((ACCOUNT_POOL_BOOSTERS[account][pid].length() * poolData.rewards.boostersLifetime) - ACCOUNT_PAID_POOL_BOOSTERS_REWARDS[account][pid]);\\n        }\\n\\n        uint _totalPendingRewards = _pendingAssetsRewards + _pendingBoostersRewards;\\n        uint _vestedPendingRewards = (currentVested() * _totalPendingRewards) / 1e4;\\n        return AccountRewards({\\n            rewards: VestedRewards({\\n                total: _totalPendingRewards,\\n                vested: _vestedPendingRewards,\\n                locked: _totalPendingRewards - _vestedPendingRewards\\n            }),\\n            pendingRewards: ItemizedRewards({\\n                total: _totalPendingRewards,\\n                assets: _pendingAssetsRewards,\\n                boosters: _pendingBoostersRewards\\n            }),\\n            claimedRewards: ItemizedRewards({\\n                total: ACCOUNT_CLAIMED_POOL_ASSETS_REWARDS[account][pid] + ACCOUNT_CLAIMED_POOL_BOOSTERS_REWARDS[account][pid],\\n                assets: ACCOUNT_CLAIMED_POOL_ASSETS_REWARDS[account][pid],\\n                boosters: ACCOUNT_CLAIMED_POOL_BOOSTERS_REWARDS[account][pid]\\n            })\\n        });\\n    }\\n\\n    function getPoolRewards(uint pid, address account) public view returns (AccountRewards memory) {\\n        PoolData memory _poolData = IStakingPool(StakingPool).getPool(pid);\\n        return poolRewards(pid, account, _poolData);\\n    }\\n\\n    function allPoolsRewards(address account) public view returns (AccountRewards memory) {\\n        uint[] memory _allPoolPids = accountPoolPids(account);\\n        uint _poolsCount = _allPoolPids.length;\\n        PoolData[] memory _allPools = IStakingPool(StakingPool).getPoolCollections(_allPoolPids);\\n\\n        AccountRewards memory _allPoolsRewards;\\n        AccountRewards memory _pRewards;\\n        for (uint idx = 0; idx < _poolsCount; idx++) {\\n            _pRewards = poolRewards(ACCOUNT_POOLS[account].at(idx), account, _allPools[idx]);\\n\\n            _allPoolsRewards.rewards.total += _pRewards.rewards.total;\\n            _allPoolsRewards.rewards.vested += _pRewards.rewards.vested;\\n            _allPoolsRewards.rewards.locked += _pRewards.rewards.locked;\\n\\n            _allPoolsRewards.pendingRewards.total += _pRewards.pendingRewards.total;\\n            _allPoolsRewards.pendingRewards.assets += _pRewards.pendingRewards.assets;\\n            _allPoolsRewards.pendingRewards.boosters += _pRewards.pendingRewards.boosters;\\n\\n            _allPoolsRewards.claimedRewards.total += _pRewards.claimedRewards.total;\\n            _allPoolsRewards.claimedRewards.assets += _pRewards.claimedRewards.assets;\\n            _allPoolsRewards.claimedRewards.boosters += _pRewards.claimedRewards.boosters;\\n        }\\n\\n        return _allPoolsRewards;\\n    }\\n\\n    function accountPools(address account) public view returns (AccountPool[] memory) {\\n        uint[] memory _allPoolPids = accountPoolPids(account);\\n        uint _poolsCount = _allPoolPids.length;\\n        if (_poolsCount == 0) {\\n            return new AccountPool[](0);\\n        }\\n        PoolData[] memory _allPools = IStakingPool(StakingPool).getPoolCollections(_allPoolPids);\\n        AccountPool[] memory _allAccountPools = new AccountPool[](_poolsCount);\\n        for (uint _idx = 0; _idx < _poolsCount; _idx++) {\\n            _allAccountPools[_idx] = AccountPool({\\n                pid: _allPoolPids[_idx],\\n                totalAssets: _allPools[_idx].pool.assetType == AssetType.NFT ?\\n                    ACCOUNT_POOL_ASSETS[account][_allPoolPids[_idx]].length() : ACCOUNT_POOL_FUNGIBLE_ASSETS[account][_allPoolPids[_idx]],\\n                totalBoosters: ACCOUNT_POOL_BOOSTERS[account][_allPoolPids[_idx]].length(),\\n                rewards: poolRewards(_allPoolPids[_idx], account, _allPools[_idx])\\n            });\\n        }\\n\\n        return _allAccountPools;\\n    }\\n\\n    function accountPoolFungibleAssets(address account, uint pid, Pool memory pool, bool includeBoosters) public view returns (Asset[] memory) {\\n        uint _assetsCount;\\n        if (ACCOUNT_POOL_FUNGIBLE_ASSETS[account][pid] > 0) {\\n            _assetsCount = 1;\\n        }\\n        uint _boostersCount = ACCOUNT_POOL_BOOSTERS[account][pid].length();\\n        Asset[] memory _allPoolAssets = new Asset[](includeBoosters ? (_assetsCount + _boostersCount) : _assetsCount);\\n        uint _aIdx = 0;\\n\\n        // get assets\\n        if (_assetsCount > 0) {\\n            _allPoolAssets[_aIdx] = Asset(\\n                account, pool.asset, ACCOUNT_POOL_FUNGIBLE_ASSETS[account][pid],\\n                AssetType.Fungible, Rarity.NONE, NFTType.NONE, pid, ACCOUNT_POOL_FUNGIBLE_ASSETS_DEPOSITED[account][pid]\\n            );\\n            _aIdx += 1;\\n        }\\n\\n        // get boosters\\n        if (includeBoosters) {\\n            for (uint _bIdx = 0; _bIdx < _boostersCount; _bIdx++) {\\n                _allPoolAssets[_aIdx] = ASSETS[pool.booster][ACCOUNT_POOL_BOOSTERS[account][pid].at(_bIdx)];\\n                _aIdx += 1;\\n            }\\n        }\\n\\n        return _allPoolAssets;\\n    }\\n\\n    function accountPoolAssets(address account, uint pid, Pool memory pool, bool includeBoosters) public view returns (Asset[] memory) {\\n        uint _assetsCount = ACCOUNT_POOL_ASSETS[account][pid].length();\\n        uint _boostersCount = ACCOUNT_POOL_BOOSTERS[account][pid].length();\\n        Asset[] memory _allPoolAssets = new Asset[](includeBoosters ? (_assetsCount + _boostersCount) : _assetsCount);\\n        uint _aIdx = 0;\\n\\n        // get assets\\n        for (uint _idx = 0; _idx < _assetsCount; _idx++) {\\n            _allPoolAssets[_aIdx] = ASSETS[pool.asset][ACCOUNT_POOL_ASSETS[account][pid].at(_idx)];\\n            _aIdx += 1;\\n        }\\n\\n        // get boosters\\n        if (includeBoosters) {\\n            for (uint _bIdx = 0; _bIdx < _boostersCount; _bIdx++) {\\n                _allPoolAssets[_aIdx] = ASSETS[pool.booster][ACCOUNT_POOL_BOOSTERS[account][pid].at(_bIdx)];\\n                _aIdx += 1;\\n            }\\n        }\\n\\n        return _allPoolAssets;\\n    }\\n\\n    function accountAssets(address account, bool includeBoosters) public view returns (Asset[] memory) {\\n        uint[] memory _allPoolPids = accountPoolPids(account);\\n        if (_allPoolPids.length == 0) {\\n            return new Asset[](0);\\n        }\\n\\n        Asset[] memory _allAccountAssets = new Asset[](\\n            ACCOUNT_ASSETS_TOTAL[account] + ACCOUNT_BOOSTERS_TOTAL[account]\\n        );\\n        Pool[] memory _allPools = IStakingPool(StakingPool).getPoolCollectionsWithoutRewards(_allPoolPids);\\n        uint _pid;\\n        uint _assetsCount;\\n        uint _boostersCount;\\n        uint _pIdx;\\n        uint _idx;\\n        uint _aIdx = 0;\\n\\n        for (_idx = 0; _idx < _allPoolPids.length; _idx++) {\\n            _pid = _allPoolPids[_idx];\\n\\n            if (_allPools[_idx].assetType == AssetType.NFT) {\\n                _assetsCount = ACCOUNT_POOL_ASSETS[account][_pid].length();\\n            } else if (\\n                _allPools[_idx].assetType == AssetType.Fungible &&\\n                ACCOUNT_POOL_FUNGIBLE_ASSETS[account][_pid] > 0\\n            ) {\\n                _assetsCount = 1;\\n            }\\n            _boostersCount = ACCOUNT_POOL_BOOSTERS[account][_pid].length();\\n\\n            Asset[] memory _poolAssets = _allPools[_idx].assetType == AssetType.Fungible ?\\n                accountPoolFungibleAssets(account, _pid, _allPools[_idx], includeBoosters) :\\n                accountPoolAssets(account, _pid, _allPools[_idx], includeBoosters);\\n\\n            for (_pIdx = 0; _pIdx < (_assetsCount + (includeBoosters ? _boostersCount : 0)); _pIdx++) {\\n                _allAccountAssets[_aIdx] = _poolAssets[_pIdx];\\n                _aIdx += 1;\\n            }\\n        }\\n\\n        return _allAccountAssets;\\n    }\\n\\n    function accountAssetsCount(address account, uint pid, bool isNFT) public view returns (uint) {\\n        return isNFT ? ACCOUNT_POOL_ASSETS[account][pid].length() : ACCOUNT_POOL_FUNGIBLE_ASSETS[account][pid];\\n    }\\n\\n    function accountBoostersCount(address account, uint pid) public view returns (uint) {\\n        return ACCOUNT_POOL_BOOSTERS[account][pid].length();\\n    }\\n\\n    function assetOwner(address account, address asset, uint tokenId) external view returns(bool) {\\n        return account == ASSETS[asset][tokenId].owner;\\n    }\\n\\n    function assetDeposited(address asset, uint tokenId) external view returns (uint) {\\n        return ASSETS[asset][tokenId].deposited;\\n    }\\n\\n    function fungibleAssetDeposited(address account, uint pid) external view returns (uint) {\\n        return ACCOUNT_POOL_FUNGIBLE_ASSETS_DEPOSITED[account][pid];\\n    }\\n\\n    function accountData(address account) public view returns (AccountData memory) {\\n        VaultAccountData memory _vault = IVault(VAULT).wData(account);\\n        AccountRewards memory _pRewards = allPoolsRewards(account);\\n        return AccountData({\\n            assets: accountAssets(account, true),\\n            pools: accountPools(account),\\n            rewards: _pRewards,\\n            vault: _vault\\n        });\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ApeHeroStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./ApeHeroPOWEmission.sol\\\";\\n\\ncontract ApeHeroStakingPool is ApeHeroPOWEmission {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct AccruedRewards {\\n        uint assets;\\n        uint boosters;\\n        uint lastUpdated;\\n    }\\n\\n    struct ContractData {\\n        PoolData[] activePools;\\n        PoolData[] inactivePools;\\n        uint emissionStart;\\n        uint multiplierTotal;\\n        uint defaultLockupDuration;\\n        uint defaultLockupPenalty;\\n    }\\n\\n    // pools\\n    uint public DEFAULT_LOCKUP_DURATION = 604800;\\n    uint public DEFAULT_LOCKUP_PENALTY = 100e18;\\n    uint public MULTIPLIER_TOTAL;\\n    uint public CURRENT_POOL_ID;\\n    EnumerableSet.UintSet private ACTIVE_POOLS;\\n    EnumerableSet.UintSet private INACTIVE_POOLS;\\n    EnumerableSet.UintSet private REMOVED_POOLS;\\n    mapping(uint => Pool) private POOLS;\\n\\n    // rewards\\n    // {[pid]: uint<earned rewards, week, time>}\\n    mapping(uint => uint) private POOL_LIFETIME_ASSETS_REWARDS;\\n    mapping(uint => uint) private POOL_LIFETIME_BOOSTERS_REWARDS;\\n    mapping(uint => uint) private POOL_LIFETIME_REWARDS_LAST_UPDATE;\\n\\n    // events\\n    event PoolAdded(uint pid, uint timestamp);\\n    event PoolBoosterUpdated(uint pid, uint timestamp);\\n    event PoolStatusChanged(uint pid, PoolStatus status, uint timestamp);\\n    event PoolLockupUpdated(uint pid, uint duration, uint penalty, uint timestamp);\\n    event PoolBoosterSharesUpdated(uint pid, uint boosterShares, uint timestamp);\\n    event PoolMultiplierUpdated(uint pid, uint multiplier, uint timestamp);\\n    event PoolManagerActivated(address controller, uint timestamp);\\n\\n    constructor() Ownable() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\\n        _grantRole(ADMIN, owner());\\n    }\\n\\n    // --- utils --- //\\n    function updatePoolsMultiplierTotal() internal {\\n        uint _multiplierTotal;\\n        uint _activePoolsCount = ACTIVE_POOLS.length();\\n        for (uint idx = 0; idx < _activePoolsCount; idx++) {\\n            _multiplierTotal += POOLS[ACTIVE_POOLS.at(idx)].multiplier;\\n        }\\n        MULTIPLIER_TOTAL = _multiplierTotal;\\n    }\\n\\n    function accruedRewardsForWeek(uint week, uint durationInSeconds, Pool memory pool) internal view returns (AccruedRewards memory) {\\n        if (EMISSION_START == 0 || durationInSeconds == 0 || (pool.totalAssets == 0 && pool.totalBoosters == 0)) {\\n            return AccruedRewards(0, 0, 0);\\n        }\\n        uint _accruedRewards = durationInSeconds * (((getStandardYieldEmissionForWeek(week) * pool.multiplier) / MULTIPLIER_TOTAL) / WEEK_IN_SECONDS);\\n        uint _totalAssets = pool.assetType == AssetType.NFT ? pool.totalAssets : (pool.totalAssets / (10 ** pool.decimal));\\n        uint _boostersShares = (_accruedRewards * pool.boosterShares) / 1e4;\\n        uint _assetsShares = _accruedRewards - (pool.totalBoosters > 0 ? _boostersShares : 0);\\n\\n        uint _accruedBoostersRewards = pool.totalBoosters > 0 ? (_boostersShares / pool.totalBoosters) : 0;\\n        uint _accruedAssetsRewards = _totalAssets > 0 ? (_assetsShares / _totalAssets) : 0;\\n        return AccruedRewards({assets : _accruedAssetsRewards, boosters : _accruedBoostersRewards, lastUpdated : 0});\\n    }\\n\\n    function getAccruedLifetimeRewards(uint pid, CurrentMoment memory cMoment) internal view returns (AccruedRewards memory) {\\n        Pool memory _pool = POOLS[pid];\\n\\n        AccruedRewards memory _accruedRewards;\\n        uint _accruedAssetsRewards;\\n        uint _accruedBoostersRewards;\\n        CurrentMoment memory _lastUpdate = currentMoment(\\n            POOL_LIFETIME_REWARDS_LAST_UPDATE[pid] == 0 ? EMISSION_START : POOL_LIFETIME_REWARDS_LAST_UPDATE[pid]\\n        );\\n\\n        // same week\\n        if (_lastUpdate.week == cMoment.week) {\\n            _accruedRewards = accruedRewardsForWeek(cMoment.week, cMoment.timestamp - _lastUpdate.timestamp, _pool);\\n            _accruedAssetsRewards = _accruedRewards.assets;\\n            _accruedBoostersRewards = _accruedRewards.boosters;\\n        } else {\\n            // week of last update\\n            _accruedRewards = accruedRewardsForWeek(_lastUpdate.week, _lastUpdate.secondsUntilWeekEnds, _pool);\\n            _accruedAssetsRewards += _accruedRewards.assets;\\n            _accruedBoostersRewards += _accruedRewards.boosters;\\n\\n            // weeks in between\\n            for (uint _wIdx = (_lastUpdate.week + 1); _wIdx < cMoment.week; _wIdx++) {\\n                _accruedRewards = accruedRewardsForWeek(_wIdx, WEEK_IN_SECONDS, _pool);\\n                _accruedAssetsRewards += _accruedRewards.assets;\\n                _accruedBoostersRewards += _accruedRewards.boosters;\\n            }\\n\\n            // this week\\n            _accruedRewards = accruedRewardsForWeek(cMoment.week, cMoment.secondsSinceWeekStarted, _pool);\\n            _accruedAssetsRewards += _accruedRewards.assets;\\n            _accruedBoostersRewards += _accruedRewards.boosters;\\n        }\\n\\n        return AccruedRewards({\\n            assets : POOL_LIFETIME_ASSETS_REWARDS[pid] + _accruedAssetsRewards,\\n            boosters : POOL_LIFETIME_BOOSTERS_REWARDS[pid] + _accruedBoostersRewards,\\n            lastUpdated : cMoment.timestamp\\n        });\\n    }\\n\\n    function updatePoolLifetimeRewards(uint pid, CurrentMoment memory cMoment) internal {\\n        AccruedRewards memory _accruedRewards = getAccruedLifetimeRewards(pid, cMoment);\\n\\n        POOL_LIFETIME_ASSETS_REWARDS[pid] = _accruedRewards.assets;\\n        POOL_LIFETIME_BOOSTERS_REWARDS[pid] = _accruedRewards.boosters;\\n        POOL_LIFETIME_REWARDS_LAST_UPDATE[pid] = cMoment.timestamp;\\n    }\\n\\n    function updateAllPoolsLifetimeRewards() internal {\\n        Pool[] memory _allActivePools = getPoolsByStatusWithoutShares(PoolStatus.ACTIVE);\\n\\n        for (uint _idx = 0; _idx < _allActivePools.length; _idx++) {\\n            updatePoolLifetimeRewards(_allActivePools[_idx].pid, currentMoment(block.timestamp));\\n        }\\n    }\\n\\n    // --- ADMIN --- //\\n    function setDefaultLockupDuration(uint duration) external onlyRole(ADMIN) {\\n        DEFAULT_LOCKUP_DURATION = duration;\\n    }\\n\\n    function setDefaultLockupPenalty(uint penalty) external onlyRole(ADMIN) {\\n        DEFAULT_LOCKUP_PENALTY = penalty;\\n    }\\n\\n    function updatePoolBoosterShares(uint pid, uint boosterShares) external onlyRole(ADMIN) {\\n        require(boosterShares != POOLS[pid].boosterShares, \\\"Booster shares unchanged\\\");\\n\\n        updatePoolLifetimeRewards(pid, currentMoment(block.timestamp));\\n        POOLS[pid].boosterShares = boosterShares;\\n\\n        emit PoolBoosterSharesUpdated(pid, boosterShares, block.timestamp);\\n    }\\n\\n    function updatePoolMultiplier(uint pid, uint multiplier) external onlyRole(ADMIN) {\\n        require(multiplier != POOLS[pid].multiplier, \\\"Multiplier unchanged\\\");\\n\\n        POOLS[pid].multiplier = multiplier;\\n        updatePoolsMultiplierTotal();\\n\\n        emit PoolMultiplierUpdated(pid, multiplier, block.timestamp);\\n    }\\n\\n    function updatePoolLockup(uint pid, uint duration, uint penalty) external onlyRole(ADMIN) {\\n        POOLS[pid].lockupDuration = duration;\\n        POOLS[pid].lockupPenalty = penalty;\\n\\n        emit PoolLockupUpdated(pid, duration, penalty, block.timestamp);\\n    }\\n\\n    function setPoolStatus(uint pid, PoolStatus status) external onlyRole(ADMIN) {\\n        require(status != POOLS[pid].status, \\\"Pool already has requested status\\\");\\n\\n        if (status == PoolStatus.REMOVED) {\\n            require(POOLS[pid].status != PoolStatus.ACTIVE, \\\"Cannot remove active pool\\\");\\n            POOLS[pid].status = status;\\n            INACTIVE_POOLS.remove(pid);\\n            REMOVED_POOLS.add(pid);\\n        } else {\\n            POOLS[pid].status = status;\\n            if (status == PoolStatus.ACTIVE) {\\n                INACTIVE_POOLS.remove(pid);\\n                ACTIVE_POOLS.add(pid);\\n            } else {\\n                ACTIVE_POOLS.remove(pid);\\n                INACTIVE_POOLS.add(pid);\\n            }\\n            updatePoolsMultiplierTotal();\\n            updateAllPoolsLifetimeRewards();\\n        }\\n\\n        emit PoolStatusChanged(pid, status, block.timestamp);\\n    }\\n\\n    function addPool(\\n        AssetType assetType, uint multiplier, address asset, address assetVoucher, Rarity assetRarity, uint maxAssets\\n    ) public onlyRole(ADMIN) returns (uint)\\n    {\\n        uint newPoolId = CURRENT_POOL_ID + 1;\\n        POOLS[newPoolId] = Pool(\\n            newPoolId, assetType, multiplier,\\n            asset, assetVoucher, 0, assetRarity, maxAssets,\\n            address(0), address(0), 0, 0, 0,\\n            DEFAULT_LOCKUP_DURATION, DEFAULT_LOCKUP_PENALTY,\\n            18,\\n            PoolStatus.INACTIVE\\n        );\\n\\n        INACTIVE_POOLS.add(newPoolId);\\n        CURRENT_POOL_ID = newPoolId;\\n\\n        emit PoolAdded(newPoolId, block.timestamp);\\n        return newPoolId;\\n    }\\n\\n    function updatePoolDecimal(uint pid, uint decimal) public onlyRole(ADMIN) {\\n        updatePoolLifetimeRewards(pid, currentMoment(block.timestamp));\\n        POOLS[pid].decimal = decimal;\\n    }\\n\\n    function updatePoolBooster(\\n        uint pid, address booster, address boosterVoucher, uint boosterShares, uint maxBoosters\\n    ) public onlyRole(ADMIN) {\\n        updatePoolLifetimeRewards(pid, currentMoment(block.timestamp));\\n        POOLS[pid].booster = booster;\\n        POOLS[pid].boosterVoucher = boosterVoucher;\\n        POOLS[pid].boosterShares = boosterShares;\\n        POOLS[pid].maxBoosters = maxBoosters;\\n\\n        emit PoolBoosterUpdated(pid, block.timestamp);\\n    }\\n\\n    function addPoolWithBooster(\\n        AssetType assetType, uint multiplier, address asset, address assetVoucher, Rarity assetRarity, uint maxAssets,\\n        address booster, address boosterVoucher, uint boosterShares, uint maxBoosters\\n    ) external onlyRole(ADMIN) {\\n        uint _pid = addPool(assetType, multiplier, asset, assetVoucher, assetRarity, maxAssets);\\n        updatePoolBooster(_pid, booster, boosterVoucher, boosterShares, maxBoosters);\\n    }\\n\\n    function syncPoolsRewards() external onlyAdminAndOperator {\\n        updateAllPoolsLifetimeRewards();\\n    }\\n\\n    // --- CONTROLLER --- //\\n    function activatePoolManager(uint startTime) external onlyController {\\n        require(EMISSION_START == 0, \\\"Pool Manager already activated\\\");\\n        EMISSION_START = startTime;\\n\\n        emit PoolManagerActivated(_msgSender(), block.timestamp);\\n    }\\n\\n    function addPoolAssets(uint pid, uint amount) external onlyController {\\n        if (amount > 0) {\\n            updatePoolLifetimeRewards(pid, currentMoment(block.timestamp));\\n            POOLS[pid].totalAssets += amount;\\n        }\\n    }\\n\\n    function subtractPoolAssets(uint pid, uint amount) external onlyController {\\n        if (amount > 0) {\\n            updatePoolLifetimeRewards(pid, currentMoment(block.timestamp));\\n            if (amount > POOLS[pid].totalAssets) {\\n                POOLS[pid].totalAssets = 0;\\n            } else {\\n                POOLS[pid].totalAssets -= amount;\\n            }\\n        }\\n    }\\n\\n    function addPoolBoosters(uint pid, uint amount) external onlyController {\\n        if (amount > 0) {\\n            updatePoolLifetimeRewards(pid, currentMoment(block.timestamp));\\n            POOLS[pid].totalBoosters += amount;\\n        }\\n    }\\n\\n    function subtractPoolBoosters(uint pid, uint amount) external onlyController {\\n        if (amount > 0) {\\n            updatePoolLifetimeRewards(pid, currentMoment(block.timestamp));\\n            if (amount > POOLS[pid].totalBoosters) {\\n                POOLS[pid].totalBoosters = 0;\\n            } else {\\n                POOLS[pid].totalBoosters -= amount;\\n            }\\n        }\\n    }\\n\\n    // --- external/public --- //\\n    function getPoolRewards(uint pid) public view returns (PoolRewards memory) {\\n        CurrentMoment memory _currentMoment = currentMoment(block.timestamp);\\n        if (EMISSION_START == 0) {\\n            return PoolRewards({\\n                cMoment : _currentMoment,\\n                assetsLifetime : 0, assetsTotalPerSecond : 0, assetsPerItemPerSecond : 0,\\n                boostersLifetime : 0, boostersTotalPerSecond : 0, boostersPerItemPerSecond : 0\\n            });\\n        }\\n        Pool memory _pool = POOLS[pid];\\n        AccruedRewards memory _accruedLifetimeRewards = getAccruedLifetimeRewards(pid, _currentMoment);\\n\\n        uint _poolTotalRewardsPerSecond =\\n            ((getStandardYieldEmissionForWeek(_currentMoment.week) * _pool.multiplier) / MULTIPLIER_TOTAL) / WEEK_IN_SECONDS;\\n        uint _poolBoostersRewardsPerSecond = _pool.totalBoosters > 0 ? ((_pool.boosterShares * _poolTotalRewardsPerSecond) / 1e4) : 0;\\n        uint _poolAssetsRewardsPerSecond = _poolTotalRewardsPerSecond - _poolBoostersRewardsPerSecond;\\n\\n        uint _totalAssets = _pool.assetType == AssetType.NFT ? _pool.totalAssets : (_pool.totalAssets / (10 ** _pool.decimal));\\n        return PoolRewards({\\n            cMoment : _currentMoment,\\n            assetsLifetime : _accruedLifetimeRewards.assets,\\n            assetsTotalPerSecond : _poolAssetsRewardsPerSecond,\\n            assetsPerItemPerSecond : _totalAssets > 0 ? (_poolAssetsRewardsPerSecond / _totalAssets) : 0,\\n            boostersLifetime : _accruedLifetimeRewards.boosters,\\n            boostersTotalPerSecond : _poolBoostersRewardsPerSecond,\\n            boostersPerItemPerSecond : _pool.totalBoosters > 0 ? (_poolBoostersRewardsPerSecond / _pool.totalBoosters) : 0\\n        });\\n    }\\n\\n    function getPool(uint pid) public view returns (PoolData memory) {\\n        return PoolData({\\n            pool : POOLS[pid],\\n            rewards : getPoolRewards(pid),\\n            lastUpdate : POOL_LIFETIME_REWARDS_LAST_UPDATE[pid]\\n        });\\n    }\\n\\n    function getPoolWithoutRewards(uint pid) external view returns (Pool memory) {\\n        return POOLS[pid];\\n    }\\n\\n    function getPoolCollections(uint[] memory pids) external view returns (PoolData[] memory) {\\n        PoolData[] memory _allPools = new PoolData[](pids.length);\\n        for (uint _idx = 0; _idx < pids.length; _idx++) {\\n            _allPools[_idx] = getPool(pids[_idx]);\\n        }\\n        return _allPools;\\n    }\\n\\n    function getPoolCollectionsWithoutRewards(uint[] memory pids) external view returns (Pool[] memory) {\\n        Pool[] memory _allPools = new Pool[](pids.length);\\n        for (uint _idx = 0; _idx < pids.length; _idx++) {\\n            _allPools[_idx] = POOLS[pids[_idx]];\\n        }\\n        return _allPools;\\n    }\\n\\n    function getPoolsByStatus(PoolStatus status) public view returns (PoolData[] memory) {\\n        uint _poolsCount;\\n        if (status == PoolStatus.ACTIVE) {\\n            _poolsCount = ACTIVE_POOLS.length();\\n        } else if (status == PoolStatus.INACTIVE) {\\n            _poolsCount = INACTIVE_POOLS.length();\\n        } else {\\n            _poolsCount = REMOVED_POOLS.length();\\n        }\\n\\n        PoolData[] memory _pools;\\n        if (_poolsCount == 0) {\\n            return _pools;\\n        }\\n        _pools = new PoolData[](_poolsCount);\\n        for (uint idx = 0; idx < _poolsCount; idx++) {\\n            if (status == PoolStatus.ACTIVE) {\\n                _pools[idx] = getPool(ACTIVE_POOLS.at(idx));\\n            } else if (status == PoolStatus.INACTIVE) {\\n                _pools[idx] = getPool(INACTIVE_POOLS.at(idx));\\n            } else {\\n                _pools[idx] = getPool(REMOVED_POOLS.at(idx));\\n            }\\n        }\\n        return _pools;\\n    }\\n\\n    function getPoolsByStatusWithoutShares(PoolStatus status) public view returns (Pool[] memory) {\\n        uint _poolsCount;\\n        if (status == PoolStatus.ACTIVE) {\\n            _poolsCount = ACTIVE_POOLS.length();\\n        } else if (status == PoolStatus.INACTIVE) {\\n            _poolsCount = INACTIVE_POOLS.length();\\n        } else {\\n            _poolsCount = REMOVED_POOLS.length();\\n        }\\n\\n        Pool[] memory _pools;\\n        if (_poolsCount == 0) {\\n            return _pools;\\n        }\\n        _pools = new Pool[](_poolsCount);\\n        for (uint idx = 0; idx < _poolsCount; idx++) {\\n            if (status == PoolStatus.ACTIVE) {\\n                _pools[idx] = POOLS[ACTIVE_POOLS.at(idx)];\\n            } else if (status == PoolStatus.INACTIVE) {\\n                _pools[idx] = POOLS[INACTIVE_POOLS.at(idx)];\\n            } else {\\n                _pools[idx] = POOLS[REMOVED_POOLS.at(idx)];\\n            }\\n        }\\n        return _pools;\\n    }\\n\\n    function cData() external view returns (ContractData memory) {\\n        return ContractData(\\n            getPoolsByStatus(PoolStatus.ACTIVE),\\n            getPoolsByStatus(PoolStatus.INACTIVE),\\n            EMISSION_START,\\n            MULTIPLIER_TOTAL,\\n            DEFAULT_LOCKUP_DURATION,\\n            DEFAULT_LOCKUP_PENALTY\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/ApeHeroTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nenum AssetType {\\n    NFT, Fungible\\n}\\n\\nenum NFTType {\\n    NONE, Asset, Booster\\n}\\n\\nenum Rarity {\\n    NONE, COMMON, UNCOMMON, RARE, EPIC, LEGENDARY\\n}\\n\\nenum AccountType {\\n    FutureRoadmap,\\n    InitialLiquidity,\\n    Marketing,\\n    Staking,\\n    Team\\n}\\n\\nenum PoolStatus {\\n    INACTIVE,\\n    ACTIVE,\\n    REMOVED\\n}\\n\\nstruct CurrentMoment {\\n    uint timestamp;\\n    uint week;\\n    uint secondsSinceGenesis;\\n    uint secondsSinceWeekStarted;\\n    uint secondsUntilWeekEnds;\\n}\\n\\nstruct Pool {\\n    uint pid; AssetType assetType; uint multiplier;\\n    address asset; address assetVoucher; uint totalAssets; Rarity assetRarity; uint maxAssets;\\n    address booster; address boosterVoucher; uint totalBoosters; uint boosterShares; uint maxBoosters;\\n    uint lockupDuration; uint lockupPenalty; uint decimal;\\n    PoolStatus status;\\n}\\n\\nstruct PoolRewards {\\n    CurrentMoment cMoment;\\n    uint assetsLifetime;\\n    uint assetsTotalPerSecond;\\n    uint assetsPerItemPerSecond;\\n    uint boostersLifetime;\\n    uint boostersTotalPerSecond;\\n    uint boostersPerItemPerSecond;\\n}\\n\\nstruct PoolData {\\n    Pool pool;\\n    PoolRewards rewards;\\n\\n    uint lastUpdate;\\n}\\n\\nstruct Asset {\\n    address owner;\\n    address asset;\\n    uint tokenIdOrAmount;\\n    AssetType assetType;\\n    Rarity rarity;\\n    NFTType nftType;\\n\\n    // staked info\\n    uint pid; uint deposited;\\n}\\n\\nstruct ItemizedRewards {\\n    uint total;\\n    uint assets;\\n    uint boosters;\\n}\\n\\nstruct VestedRewards {\\n    uint total;\\n    uint vested;\\n    uint locked;\\n}\\n\\nstruct AccountRewards {\\n    VestedRewards rewards;\\n    ItemizedRewards pendingRewards;\\n    ItemizedRewards claimedRewards;\\n}\\n\\nstruct AccountPool {\\n    uint pid;\\n    uint totalAssets;\\n    uint totalBoosters;\\n    AccountRewards rewards;\\n}\\n\\nstruct VaultAccountData {\\n    uint balance;\\n    uint lockedBalance;\\n    uint unlockedBalance;\\n    uint lastWithdrawalWeek;\\n}\\n\\nstruct AccountData {\\n    Asset[] assets;\\n    AccountPool[] pools;\\n    AccountRewards rewards;\\n    VaultAccountData vault;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"powToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountMgr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolMgr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rarityMgr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum NFTType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIdsOrAmount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"affectedAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIdsOrAmount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EmergencyReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FundsDirectlyDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct VestedRewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardEmissionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum NFTType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIdsOrAmount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURNED_PENALTY_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTROLLER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIRST_CLIFF_EMISSION_TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIRST_CLIFF_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIRST_CLIFF_WEEKLY_EMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUTURE_ROADMAP_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENESIS_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_LIQUIDITY_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MAX_WEEKLY_EMISSION_SCHEDULE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONTHLY_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENALTY_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POW\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_CLIFF_EMISSION_TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_CLIFF_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_CLIFF_WEEKLY_EMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THIRD_CLIFF_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THIRD_CLIFF_WEEKLY_EMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_FULL_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UNLOCK_SCHEDULE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_START_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTED_FULL_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VESTED_SCHEDULE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WEEKLY_EMISSION_SCHEDULE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEKLY_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"enum Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"enum NFTType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"}],\"internalType\":\"struct Asset[]\",\"name\":\"assets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoosters\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"internalType\":\"struct VestedRewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosters\",\"type\":\"uint256\"}],\"internalType\":\"struct ItemizedRewards\",\"name\":\"pendingRewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosters\",\"type\":\"uint256\"}],\"internalType\":\"struct ItemizedRewards\",\"name\":\"claimedRewards\",\"type\":\"tuple\"}],\"internalType\":\"struct AccountRewards\",\"name\":\"rewards\",\"type\":\"tuple\"}],\"internalType\":\"struct AccountPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"internalType\":\"struct VestedRewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosters\",\"type\":\"uint256\"}],\"internalType\":\"struct ItemizedRewards\",\"name\":\"pendingRewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosters\",\"type\":\"uint256\"}],\"internalType\":\"struct ItemizedRewards\",\"name\":\"claimedRewards\",\"type\":\"tuple\"}],\"internalType\":\"struct AccountRewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalWeek\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultAccountData\",\"name\":\"vault\",\"type\":\"tuple\"}],\"internalType\":\"struct AccountData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPenaltyBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cData\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetVoucher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"enum Rarity\",\"name\":\"assetRarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"booster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boosterVoucher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBoosters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosterShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBoosters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"enum PoolStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Pool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsSinceGenesis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsSinceWeekStarted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsUntilWeekEnds\",\"type\":\"uint256\"}],\"internalType\":\"struct CurrentMoment\",\"name\":\"cMoment\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assetsLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsTotalPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsPerItemPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostersLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostersTotalPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostersPerItemPerSecond\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolRewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolData[]\",\"name\":\"activePools\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetVoucher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"enum Rarity\",\"name\":\"assetRarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"booster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boosterVoucher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBoosters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosterShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBoosters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"enum PoolStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Pool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsSinceGenesis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsSinceWeekStarted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsUntilWeekEnds\",\"type\":\"uint256\"}],\"internalType\":\"struct CurrentMoment\",\"name\":\"cMoment\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assetsLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsTotalPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsPerItemPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostersLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostersTotalPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostersPerItemPerSecond\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolRewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolData[]\",\"name\":\"inactivePools\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"defaultLockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultLockupPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositPerTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawPerTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnedPenaltyBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"POW\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"internalType\":\"struct ApeHeroStaking.ContractData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"afterInterval\",\"type\":\"uint256\"}],\"name\":\"checkAfter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllPoolsRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claimPoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"currentMoment\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsSinceGenesis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsSinceWeekStarted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsUntilWeekEnds\",\"type\":\"uint256\"}],\"internalType\":\"struct CurrentMoment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"}],\"name\":\"currentVestedForWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdsOrAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"enum NFTType\",\"name\":\"nftType\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"emergencyRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weekNum\",\"type\":\"uint256\"}],\"name\":\"getMaxStandardYieldEmissionForWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weekNum\",\"type\":\"uint256\"}],\"name\":\"getStandardYieldEmissionForWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastEmittedWeek\",\"type\":\"uint256\"}],\"name\":\"monthlyEmissionWeekFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxDepositPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxWithdrawPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRewardEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"wData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"enum Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"enum NFTType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"}],\"internalType\":\"struct Asset[]\",\"name\":\"assets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoosters\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"internalType\":\"struct VestedRewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosters\",\"type\":\"uint256\"}],\"internalType\":\"struct ItemizedRewards\",\"name\":\"pendingRewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosters\",\"type\":\"uint256\"}],\"internalType\":\"struct ItemizedRewards\",\"name\":\"claimedRewards\",\"type\":\"tuple\"}],\"internalType\":\"struct AccountRewards\",\"name\":\"rewards\",\"type\":\"tuple\"}],\"internalType\":\"struct AccountPool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"internalType\":\"struct VestedRewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosters\",\"type\":\"uint256\"}],\"internalType\":\"struct ItemizedRewards\",\"name\":\"pendingRewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosters\",\"type\":\"uint256\"}],\"internalType\":\"struct ItemizedRewards\",\"name\":\"claimedRewards\",\"type\":\"tuple\"}],\"internalType\":\"struct AccountRewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalWeek\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultAccountData\",\"name\":\"vault\",\"type\":\"tuple\"}],\"internalType\":\"struct AccountData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastEmittedWeek\",\"type\":\"uint256\"}],\"name\":\"weeklyEmissionWeekFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdsOrAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"enum NFTType\",\"name\":\"nftType\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ApeHeroStaking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "0000000000000000000000005ae5a6d4a950b5d909b337c23a80ece89147a605000000000000000000000000012749de7f24b58f6f20b5cdc2971ad0700b49f0000000000000000000000000bb88b52e8b7cd604f0a823fc3c385c5b6ae045d000000000000000000000000087a9525b74ed48064df5277d67237c51b4655742", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}