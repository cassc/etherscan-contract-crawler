{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: NLC@2021\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\ncontract Context {\\r\\n\\r\\n    /**\\r\\n     * @dev returns address executing the method\\r\\n     */\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns data passed into the method\\r\\n     */\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this;\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\"},\"NLC.sol\":{\"content\":\"// SPDX-License-Identifier: NLC@2021\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract NLC is Context {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    /**\\r\\n     * @dev initial private\\r\\n     */\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 constant _decimal = 8;\\r\\n    address private _Owner;\\r\\n\\r\\n    /**\\r\\n     * @dev Initial supply of 1100 million tokens \\r\\n     */\\r\\n    uint256 private _totalSupply = 11E16;\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    event Approval(\\r\\n        address indexed holder,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    constructor (address _own) {\\r\\n        _name = \\\"NoLimitCoin\\\";\\r\\n        _symbol = \\\"NLC\\\";\\r\\n        _Owner = _own;\\r\\n        _balances[_Owner] = _totalSupply;\\r\\n\\r\\n        emit Transfer(address(0x0), _Owner, _totalSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals of the token.\\r\\n     */\\r\\n    function decimals() external pure returns (uint8) {\\r\\n        return _decimal;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of NLC owner.\\r\\n     */\\r\\n    function getOwner() external view returns (address) {\\r\\n        return _Owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total supply of the token.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token balance of specific address.\\r\\n     */\\r\\n    function balanceOf(address _holder) external view returns (uint256) {\\r\\n        return _balances[_holder];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows to transfer tokens \\r\\n     */\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(\\r\\n            _msgSender(),\\r\\n            recipient,\\r\\n            amount\\r\\n        );\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns approved balance to be spent by another address\\r\\n     * by using transferFrom method\\r\\n     */\\r\\n    function allowance(\\r\\n        address holder,\\r\\n        address spender\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[holder][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the token allowance to another spender\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            amount\\r\\n        );\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows to transfer tokens on senders behalf\\r\\n     * based on allowance approved for the executer\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(sender,\\r\\n            _msgSender(), _allowances[sender][_msgSender()].sub(\\r\\n                amount\\r\\n            )\\r\\n        );\\r\\n\\r\\n        _transfer(\\r\\n            sender,\\r\\n            recipient,\\r\\n            amount\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows owner to burn supply\\r\\n     * @param _amount of tokens to burn for owner Address\\r\\n     */\\r\\n    function burnSupply(\\r\\n        uint256 _amount\\r\\n    )\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            msg.sender ==  _Owner,\\r\\n            \\u0027NLC: only owner can burn the tokens\\u0027\\r\\n        );\\r\\n\\r\\n        _burn(\\r\\n            _Owner,\\r\\n            _amount\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        require(\\r\\n            sender != address(0x0)\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            recipient != address(0x0)\\r\\n        );\\r\\n\\r\\n        _balances[sender] =\\r\\n        _balances[sender].sub(amount);\\r\\n\\r\\n        _balances[recipient] =\\r\\n        _balances[recipient].add(amount);\\r\\n\\r\\n        emit Transfer(\\r\\n            sender,\\r\\n            recipient,\\r\\n            amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `holder`s tokens.\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `holder` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address holder,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        require(\\r\\n            holder != address(0x0)\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            spender != address(0x0)\\r\\n        );\\r\\n\\r\\n        _allowances[holder][spender] = amount;\\r\\n\\r\\n        emit Approval(\\r\\n            holder,\\r\\n            spender,\\r\\n            amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        require(\\r\\n            account != address(0x0)\\r\\n        );\\r\\n\\r\\n        _balances[account] =\\r\\n        _balances[account].sub(amount);\\r\\n\\r\\n        _totalSupply =\\r\\n        _totalSupply.sub(amount);\\r\\n\\r\\n        emit Transfer(\\r\\n            account,\\r\\n            address(0x0),\\r\\n            amount\\r\\n        );\\r\\n    }\\r\\n    \\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: NLC@2021\\r\\n\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_own\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NLC", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000090615fba4878146aa425fff86251a9783e7a633", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ea242253eb78e70a2b6a7c4bff88d18d8fdd2666a47c2c8f735adca1249df032"}