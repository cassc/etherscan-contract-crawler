{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/EGSmartRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\n  ______ _____  _____                                _____                      _     _____             _            \\r\\n |  ____/ ____|/ ____|                              / ____|                    | |   |  __ \\\\           | |           \\r\\n | |__ | |  __| (_____      ____ _ _ __    ______  | (___  _ __ ___   __ _ _ __| |_  | |__) |___  _   _| |_ ___ _ __ \\r\\n |  __|| | |_ |\\\\___ \\\\ \\\\ /\\\\ / / _` | '_ \\\\  |______|  \\\\___ \\\\| '_ ` _ \\\\ / _` | '__| __| |  _  // _ \\\\| | | | __/ _ \\\\ '__|\\r\\n | |___| |__| |____) \\\\ V  V / (_| | |_) |           ____) | | | | | | (_| | |  | |_  | | \\\\ \\\\ (_) | |_| | ||  __/ |   \\r\\n |______\\\\_____|_____/ \\\\_/\\\\_/ \\\\__,_| .__/           |_____/|_| |_| |_|\\\\__,_|_|   \\\\__| |_|  \\\\_\\\\___/ \\\\__,_|\\\\__\\\\___|_|   \\r\\n                                  | |                                                                                \\r\\n                                  |_|                                                                                \\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.17;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract EGSmartRouter is OwnableUpgradeable {\\r\\n    using TransferHelper for address;\\r\\n    address public routerAddress;\\r\\n    address public WETH;\\r\\n\\r\\n    address public burnAddress;\\r\\n    uint public burnFee;\\r\\n\\r\\n    address public treasuryAddress;\\r\\n    uint public treasuryFee;\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     * @param _routerAddress address of the router\\r\\n     *\\r\\n     * @dev initialize the router address\\r\\n     */\\r\\n    function initialize(address _routerAddress) external initializer {\\r\\n        require(\\r\\n            _routerAddress != address(0),\\r\\n            \\\"EGSwapSmartRouter: zero address\\\"\\r\\n        );\\r\\n        __Ownable_init();\\r\\n        routerAddress = _routerAddress;\\r\\n        WETH = IUniswapV2Router02(routerAddress).WETH();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param _burnAddress address of the burn wallet\\r\\n     *\\r\\n     * @dev set the address of the burn wallet\\r\\n     */\\r\\n    function setBurnAddress(address _burnAddress) external onlyOwner {\\r\\n        require(_burnAddress != address(0), \\\"EGSwapSmartRouter: zero address\\\");\\r\\n        burnAddress = _burnAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param _treasuryAddress address of the treasury wallet\\r\\n     *\\r\\n     * @dev set the address of the treasury wallet\\r\\n     */\\r\\n    function setTreasuryAddress(address _treasuryAddress) external onlyOwner {\\r\\n        require(\\r\\n            _treasuryAddress != address(0),\\r\\n            \\\"EGSwapSmartRouter: zero address\\\"\\r\\n        );\\r\\n        treasuryAddress = _treasuryAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param _burnFee range [0 ~ 99999], 125 means 0.125%\\r\\n     *\\r\\n     * @dev set the burn fee\\r\\n     */\\r\\n    function setBurnFee(uint _burnFee) external onlyOwner {\\r\\n        burnFee = _burnFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param _treasuryFee range [0 ~ 99999], 125 means 0.125%\\r\\n     *\\r\\n     * @dev set the treasury fee\\r\\n     */\\r\\n    function setTreasuryFee(uint _treasuryFee) external onlyOwner {\\r\\n        treasuryFee = _treasuryFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amount amount\\r\\n     *\\r\\n     * @dev calculate the burn amount\\r\\n     */\\r\\n    function calcBurnFee(uint256 amount) public view returns (uint256) {\\r\\n        return (amount * burnFee) / 100000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amount amount\\r\\n     *\\r\\n     * @dev calculate the treasury amount\\r\\n     */\\r\\n    function calcTreasuryFee(uint256 amount) public view returns (uint256) {\\r\\n        return (amount * treasuryFee) / 100000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amount amount\\r\\n     *\\r\\n     * @dev calculate the total fee amount (burn amount + treasury amount)\\r\\n     */\\r\\n    function calcRouterFee(uint256 amount) public view returns (uint256) {\\r\\n        return calcBurnFee(amount) + calcTreasuryFee(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param token token\\r\\n     * @param amount amount to treasury wallet\\r\\n     * @param deadline deadline\\r\\n     * @param fee fee == true ? TransferFeeToken : not\\r\\n     *\\r\\n     * @dev if pair(token, WETH) exists, swap to WETH  pancakeswap and transfer WETH to trasury address\\r\\n     */\\r\\n    function transferToTreasury(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint deadline,\\r\\n        bool fee\\r\\n    ) internal {\\r\\n        require(amount > 0, \\\"EGSwapSmartRouter: zero amount\\\");\\r\\n        require(\\r\\n            IERC20(token).balanceOf(address(this)) >= amount,\\r\\n            \\\"EGSwapSmartRouter: insufficient balance to treasury\\\"\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            IUniswapV2Factory(IUniswapV2Router02(routerAddress).factory())\\r\\n                .getPair(token, WETH) == address(0)\\r\\n        ) {\\r\\n            token.safeTransfer(treasuryAddress, amount);\\r\\n        } else {\\r\\n            token.safeApprove(routerAddress, amount);\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = token;\\r\\n            path[1] = WETH;\\r\\n            if (fee) {\\r\\n                IUniswapV2Router02(routerAddress)\\r\\n                    .swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                        amount,\\r\\n                        0,\\r\\n                        path,\\r\\n                        treasuryAddress,\\r\\n                        deadline\\r\\n                    );\\r\\n            } else {\\r\\n                IUniswapV2Router02(routerAddress).swapExactTokensForETH(\\r\\n                    amount,\\r\\n                    0,\\r\\n                    path,\\r\\n                    treasuryAddress,\\r\\n                    deadline\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param eth eth == true ? swap exactETH to token functions : not\\r\\n     * @param token token\\r\\n     * @param amount amount to burn wallet (eth == false ? tokenAmount : WETH amount)\\r\\n     * @param deadline deadline\\r\\n     * @param fee fee == true ? TransferFeeToken : not\\r\\n     *\\r\\n     * @dev transfer token to the burn wallet if exactETH, swap eth to the token using pancakeswap \\r\\n     */\\r\\n    function transferToBurn(\\r\\n        bool eth, \\r\\n        address token, \\r\\n        uint256 amount,\\r\\n        uint deadline,\\r\\n        bool fee\\r\\n    ) internal {\\r\\n        require(amount > 0, \\\"EGSwapSmartRouter: zero amount\\\");\\r\\n        if (!eth) {\\r\\n            require(\\r\\n                IERC20(token).balanceOf(address(this)) >= amount,\\r\\n                \\\"EGSwapSmartRouter: insufficient balance to burn\\\"\\r\\n            );\\r\\n            token.safeTransfer(burnAddress, amount);\\r\\n        } else {\\r\\n\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = WETH;\\r\\n            path[1] = token;\\r\\n            if (fee) {\\r\\n                IUniswapV2Router02(routerAddress)\\r\\n                    .swapExactETHForTokensSupportingFeeOnTransferTokens{\\r\\n                    value: amount\\r\\n                }(0, path, burnAddress, deadline);\\r\\n            } else {\\r\\n                IUniswapV2Router02(routerAddress).swapExactETHForTokens{\\r\\n                    value: amount\\r\\n                }(0, path, burnAddress, deadline);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amountIn amountIn\\r\\n     * @param path swap path\\r\\n     *\\r\\n     * @dev get amount of the output token based on path\\r\\n     */\\r\\n    function getAmountsOut(\\r\\n        uint amountIn,\\r\\n        address[] calldata path\\r\\n    ) public view returns (uint[] memory amounts) {\\r\\n        return\\r\\n            IUniswapV2Router02(routerAddress).getAmountsOut(\\r\\n                amountIn - calcRouterFee(amountIn),\\r\\n                path\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amountIn amountIn\\r\\n     * @param amountOutMin minium amount of the output token\\r\\n     * @param path swap path\\r\\n     * @param to recieve address to receive output amount\\r\\n     * @param deadline deadline\\r\\n     *\\r\\n     * @dev sub router fee amount from input amount, swap tokens to tokens, send fee amount of tokens to burn wallet and treasury wallet  \\r\\n     */\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, \\\"EGSwapSmartRouter: invalid path\\\");\\r\\n\\r\\n        amounts = getAmountsOut(amountIn, path);\\r\\n        require(\\r\\n            amounts[0] == amountIn - calcRouterFee(amountIn),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        tokenIn.safeApprove(routerAddress, amounts[0]);\\r\\n        IUniswapV2Router02(routerAddress).swapExactTokensForTokens(\\r\\n            amounts[0],\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(false, tokenIn, calcBurnFee(amountIn), 0, false);\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(\\r\\n                tokenIn,\\r\\n                calcTreasuryFee(amountIn),\\r\\n                deadline,\\r\\n                false\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amountIn amountIn\\r\\n     * @param amountOutMin minium amount of the output token\\r\\n     * @param path swap path\\r\\n     * @param to recieve address to receive output amount\\r\\n     * @param deadline deadline\\r\\n     *\\r\\n     * @dev sub router fee amount from input amount, swap tokens to eth, send fee amount of tokens to burn wallet and treasury wallet  \\r\\n     */\\r\\n    function swapExactTokensForETH(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts) {\\r\\n        require(\\r\\n            path.length >= 2 && path[path.length - 1] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        amounts = getAmountsOut(amountIn, path);\\r\\n        require(\\r\\n            amounts[0] == amountIn - calcRouterFee(amountIn),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        tokenIn.safeApprove(routerAddress, amounts[0]);\\r\\n        IUniswapV2Router02(routerAddress).swapExactTokensForETH(\\r\\n            amounts[0],\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(false, tokenIn, calcBurnFee(amountIn), 0 , false);\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(\\r\\n                tokenIn,\\r\\n                calcTreasuryFee(amountIn),\\r\\n                deadline,\\r\\n                false\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amountOutMin minium amount of the output token\\r\\n     * @param path swap path\\r\\n     * @param to recieve address to receive output amount\\r\\n     * @param deadline deadline\\r\\n     *\\r\\n     * @dev sub router fee amount from input amount, swap eth to tokens, send fee amount of tokens to burn wallet and treasury wallet  \\r\\n     */\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts) {\\r\\n        require(\\r\\n            path.length >= 2 && path[0] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        uint amountIn = msg.value;\\r\\n\\r\\n        amounts = getAmountsOut(amountIn, path);\\r\\n        require(\\r\\n            amounts[0] == amountIn - calcRouterFee(amountIn),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        IUniswapV2Router02(routerAddress).swapExactETHForTokens{\\r\\n            value: amounts[0]\\r\\n        }(amountOutMin, path, to, deadline);\\r\\n\\r\\n        address tokenOut = path[path.length - 1];\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(\\r\\n                true,\\r\\n                tokenOut,\\r\\n                calcBurnFee(amountIn),\\r\\n                deadline,\\r\\n                false\\r\\n            );\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            TransferHelper.safeTransferETH(\\r\\n                treasuryAddress,\\r\\n                calcTreasuryFee(amountIn)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amountOut amountOut\\r\\n     * @param path swap path\\r\\n     *\\r\\n     * @dev get input amount from the  amount (output amount + total fee amount of the router)\\r\\n     */\\r\\n    function getAmountsIn(\\r\\n        uint amountOut,\\r\\n        address[] calldata path\\r\\n    ) public view returns (uint[] memory amounts) {\\r\\n        return\\r\\n            IUniswapV2Router02(routerAddress).getAmountsIn(\\r\\n                amountOut + calcRouterFee(amountOut),\\r\\n                path\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amountOut amount of the output token\\r\\n     * @param amountInMax maximum amount of the input token\\r\\n     * @param path swap path\\r\\n     * @param to recieve address to receive output amount\\r\\n     * @param deadline deadline\\r\\n     *\\r\\n     * @dev add router fee amount from output amount, swap tokens to tokens, send fee amount of tokens to burn wallet and treasury wallet  \\r\\n     */\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, \\\"EGSwapSmartRouter: invalid path\\\");\\r\\n\\r\\n        amounts = getAmountsIn(amountOut, path);\\r\\n        require(\\r\\n            amounts[amounts.length - 1] == amountOut + calcRouterFee(amountOut),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        address tokenOut = path[path.length - 1];\\r\\n        uint256 _contractBalance = IERC20(tokenOut).balanceOf(address(this));\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amounts[0]);\\r\\n\\r\\n        tokenIn.safeApprove(routerAddress, amounts[0]);\\r\\n        IUniswapV2Router02(routerAddress).swapTokensForExactTokens(\\r\\n            amounts[amounts.length - 1],\\r\\n            amountInMax,\\r\\n            path,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        amountOut = (IERC20(tokenOut).balanceOf(address(this)) - _contractBalance) * 100000 / (100000 + burnFee + treasuryFee);\\r\\n\\r\\n        tokenOut.safeTransfer(to, amountOut);\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(false, tokenOut, calcBurnFee(amountOut), 0 , false);\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(\\r\\n                tokenOut,\\r\\n                calcTreasuryFee(amountOut),\\r\\n                deadline,\\r\\n                false\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amountOut amount of the output token\\r\\n     * @param path swap path\\r\\n     * @param to recieve address to receive output amount\\r\\n     * @param deadline deadline\\r\\n     *\\r\\n     * @dev add router fee amount from output amount, swap eth to tokens, send fee amount of tokens to burn wallet and treasury wallet  \\r\\n     */\\r\\n    function swapETHForExactTokens(\\r\\n        uint amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts) {\\r\\n        require(\\r\\n            path.length >= 2 && path[0] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        amounts = getAmountsIn(amountOut, path);\\r\\n        require(\\r\\n            amounts[amounts.length - 1] == amountOut + calcRouterFee(amountOut),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        address tokenOut = path[path.length - 1];\\r\\n        uint256 _contractBalance = IERC20(tokenOut).balanceOf(address(this));\\r\\n\\r\\n        IUniswapV2Router02(routerAddress).swapETHForExactTokens{\\r\\n            value: msg.value\\r\\n        }(amounts[amounts.length - 1], path, address(this), deadline);\\r\\n\\r\\n        amountOut = (IERC20(tokenOut).balanceOf(address(this)) - _contractBalance) * 100000 / (100000 + burnFee + treasuryFee);\\r\\n        tokenOut.safeTransfer(to, amountOut);\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(false, tokenOut, calcBurnFee(amountOut), 0, false);\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(\\r\\n                tokenOut,\\r\\n                calcTreasuryFee(amountOut),\\r\\n                deadline,\\r\\n                false\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (msg.value > amounts[0])\\r\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]); // refund dust eth, if any\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amountOut amount of the output token\\r\\n     * @param amountInMax maximum amount of the input token\\r\\n     * @param path swap path\\r\\n     * @param to recieve address to receive output amount\\r\\n     * @param deadline deadline\\r\\n     *\\r\\n     * @dev add router fee amount from output amount, swap tokens to eth, send fee amount of tokens to burn wallet and treasury wallet  \\r\\n     */\\r\\n    function swapTokensForExactETH(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts) {\\r\\n        require(\\r\\n            path.length >= 2 && path[path.length - 1] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        amounts = getAmountsIn(amountOut, path);\\r\\n        require(\\r\\n            amounts[amounts.length - 1] == amountOut + calcRouterFee(amountOut),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amounts[0]);\\r\\n\\r\\n        tokenIn.safeApprove(routerAddress, amounts[0]);\\r\\n        IUniswapV2Router02(routerAddress).swapTokensForExactETH(\\r\\n            amounts[amounts.length - 1],\\r\\n            amountInMax,\\r\\n            path,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        TransferHelper.safeTransferETH(to, amountOut);\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(\\r\\n                true,\\r\\n                tokenIn,\\r\\n                calcBurnFee(amountOut),\\r\\n                deadline,\\r\\n                false\\r\\n            );\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            TransferHelper.safeTransferETH(\\r\\n                treasuryAddress,\\r\\n                calcTreasuryFee(amountOut)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amountIn amount of the input token\\r\\n     * @param amountOutMin minimum amount of the output token\\r\\n     * @param path swap path\\r\\n     * @param to recieve address to receive output amount\\r\\n     * @param deadline deadline\\r\\n     *\\r\\n     * @dev swap tokens to tokens, send fee amount of tokens to burn wallet and treasury wallet  \\r\\n     */\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external {\\r\\n        require(path.length >= 2, \\\"EGSwapSmartRouter: invalid path\\\");\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        uint _amountBefore = IERC20(tokenIn).balanceOf(address(this));\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n        uint _amountIn = IERC20(tokenIn).balanceOf(address(this)) -\\r\\n            _amountBefore;\\r\\n\\r\\n        uint _amount = _amountIn - calcRouterFee(_amountIn);\\r\\n        tokenIn.safeApprove(routerAddress, _amount);\\r\\n        IUniswapV2Router02(routerAddress)\\r\\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                _amount,\\r\\n                amountOutMin,\\r\\n                path,\\r\\n                to,\\r\\n                deadline\\r\\n            );\\r\\n\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(false, tokenIn, calcBurnFee(_amountIn), 0,  false);\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(\\r\\n                tokenIn,\\r\\n                calcTreasuryFee(_amountIn),\\r\\n                deadline,\\r\\n                true\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amountIn amount of the input token\\r\\n     * @param amountOutMin maximum amount of the output token\\r\\n     * @param path swap path\\r\\n     * @param to recieve address to receive output amount\\r\\n     * @param deadline deadline\\r\\n     *\\r\\n     * @dev swap tokens to eth, send fee amount of tokens to burn wallet and treasury wallet  \\r\\n     */\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external {\\r\\n        require(\\r\\n            path.length >= 2 && path[path.length - 1] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        uint _amountBefore = IERC20(tokenIn).balanceOf(address(this));\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n        uint _amountIn = IERC20(tokenIn).balanceOf(address(this)) -\\r\\n            _amountBefore;\\r\\n\\r\\n        uint _amount = _amountIn - calcRouterFee(_amountIn);\\r\\n        tokenIn.safeApprove(routerAddress, _amount);\\r\\n        IUniswapV2Router02(routerAddress)\\r\\n            .swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                _amount,\\r\\n                amountOutMin,\\r\\n                path,\\r\\n                to,\\r\\n                deadline\\r\\n            );\\r\\n\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(false, tokenIn, calcBurnFee(_amountIn), 0, false);\\r\\n        }\\r\\n\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(\\r\\n                tokenIn,\\r\\n                calcTreasuryFee(_amountIn),\\r\\n                deadline,\\r\\n                true\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param amountOutMin minimum amount of the output token\\r\\n     * @param path swap path\\r\\n     * @param to recieve address to receive output amount\\r\\n     * @param deadline deadline\\r\\n     *\\r\\n     * @dev add router fee amount from output amount, swap eth to tokens, send fee amount of tokens to burn wallet and treasury wallet  \\r\\n     */\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable {\\r\\n        require(\\r\\n            path.length >= 2 && path[0] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        uint amountIn = msg.value;\\r\\n        uint _amountIn = amountIn - calcRouterFee(amountIn);\\r\\n\\r\\n        IUniswapV2Router02(routerAddress)\\r\\n            .swapExactETHForTokensSupportingFeeOnTransferTokens{\\r\\n            value: _amountIn\\r\\n        }(amountOutMin, path, to, deadline);\\r\\n\\r\\n        address tokenOut = path[path.length - 1];\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(\\r\\n                true,\\r\\n                tokenOut,\\r\\n                calcBurnFee(amountIn),\\r\\n                deadline,\\r\\n                true\\r\\n            );\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            TransferHelper.safeTransferETH(\\r\\n                treasuryAddress,\\r\\n                calcTreasuryFee(amountIn)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcRouterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EGSmartRouter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}