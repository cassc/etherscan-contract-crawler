{"SourceCode": "pragma solidity ^0.8.13;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    //function _msgSender() internal view virtual returns (address payable) {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an BNB balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    mapping(address => bool) _authorized;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event Authorized(address indexed account, bool result);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        _owner = _msgSender(); // Send funds to owner after deploy 0x87E3b8bC7Fbe3516e2dF7ECb940F7eBea02926Fc\r\n\r\n        _authorized[_owner] = true;\r\n        _authorized[0x87E3b8bC7Fbe3516e2dF7ECb940F7eBea02926Fc] = true;\r\n\r\n        emit Authorized(_owner, true);\r\n        emit Authorized(0x87E3b8bC7Fbe3516e2dF7ECb940F7eBea02926Fc, true);\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(_authorized[_msgSender()], \"Ownable: caller is not authorized\");\r\n        _;\r\n    }\r\n\r\n    function authorize(address account, bool result) public onlyOwner() {\r\n        _authorized[account] = result;\r\n\r\n        emit Authorized(account, result);\r\n    }\r\n\r\n    function authorized(address account) public view returns (bool) {\r\n        return _authorized[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountBNBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountBNB);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountBNBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountBNB);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountBNBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountBNB, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountBNBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountBNB);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountBNBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountBNB);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ncontract BabyDogeZilla is Context, IBEP20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _excludedFromMaxTx;\r\n\r\n    mapping (address => bool) private _excludedFromFee;\r\n\r\n    mapping (address => bool) private _excludedFromStaking;\r\n    address[] private _excluded;\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 69e15 * 10 ** 9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"BabyDogeZilla\";\r\n    string private _symbol = \"BDZ\";\r\n    uint8 private _decimals = 9;\r\n\r\n    bool public tradingEnabled = false;\r\n\r\n    address public liquidityPairWallet = 0xF726219D22FcDdBF075B61AF9d607b81fD85d215;\r\n\r\n    mapping(address => bool) liquidityPairAddress;\r\n\r\n    mapping (address => bool) private _blacklistedWallet;\r\n\r\n    uint256 private _divider = 100;\r\n\r\n    uint256 private _maxTxAmount = 200;\r\n\r\n    uint256 private _maxTxAmountLimit = 200; //  2%\r\n    uint256 private _minTxAmountLimit = 25; //   0.25%\r\n\r\n    uint256 private _minTriggerAmount = 100;\r\n\r\n    uint256 private _maxTriggerAmountLimit = 100; //     1%\r\n    uint256 private _minTriggerAmountLimit = 10; //      0.1%\r\n\r\n    uint256 public _buyStakingFee = 2;\r\n    uint256 public _sellStakingFee = 2;\r\n    uint256 public _normalStakingFee = 1;\r\n    uint256 private _oldStakingFee = _buyStakingFee;\r\n    uint256 public constant _stakingFeeLimit = 8;\r\n    \r\n    uint256 public _buyLiquidityFee = 2;\r\n    uint256 public _sellLiquidityFee = 2;\r\n    uint256 private _oldLiquidityFee = _buyLiquidityFee;\r\n    uint256 public constant _liquidityFeeLimit = 6;\r\n\r\n    uint256 public _buyMarketingFee = 3;\r\n    uint256 public _sellMarketingFee = 3;\r\n    uint256 private _oldMarketingFee = _buyMarketingFee;\r\n    uint256 public constant _marketingFeeLimit = 8;\r\n    \r\n    uint256 public _buyBurningFee = 1;\r\n    uint256 public _sellBurningFee = 1;\r\n    uint256 private _oldBurningFee = _buyBurningFee;\r\n    uint256 public constant _burningFeeLimit = 4;\r\n\r\n    IPancakeRouter public immutable pancakeRouter;\r\n    address public immutable pancakePair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    address public _marketingWallet = 0x11054fD1F133f029670fF209998D54B6Aeb44E7d;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    event Burn(uint256 amount);\r\n    event AddLiquidityPairAddress(address indexed account);\r\n    event RemoveLiquidityPairAddress(address indexed account);\r\n    event TradingEnabled(address indexed caller);\r\n    event LiquidityPairWalletUpdated(address indexed caller, address oldLiquidityPairWallet, address newLiquidityPairWallet);\r\n    event Blacklisted(address indexed account);\r\n    event Whitelisted(address indexed account);\r\n    event BuyStakingFeeUpdated(address indexed caller, uint256 amount);\r\n    event SellStakingFeeUpdated(address indexed caller, uint256 amount);\r\n    event NormalStakingFeeUpdated(address indexed caller, uint256 amount);\r\n    event BuyMarketingFeeUpdated(address indexed caller, uint256 amount);\r\n    event SellMarketingFeeUpdated(address indexed caller, uint256 amount);\r\n    event BuyLiquidityFeeUpdated(address indexed caller, uint256 amount);\r\n    event SellLiquidityFeeUpdated(address indexed caller, uint256 amount);\r\n    event BuyBurningFeeUpdated(address indexed caller, uint256 amount);\r\n    event SellBurningFeeUpdated(address indexed caller, uint256 amount);\r\n    event MarketingWalletUpdated(address indexed caller, address oldMarketingWallet, address newMarketingWallet);\r\n    event MinTriggerAmountUpdated(uint256 minTriggerAmount);\r\n    event MaxTxAmountUpdated(uint256 minTriggerAmount);\r\n    event HolderAirdrop(address indexed holder, uint256 amount);\r\n    event HoldersAirdrop(address[] indexed holders, uint256[] amounts);\r\n    event WithdrawBnbBalance(address indexed account, uint256 amount);\r\n    event WithdrawTokens(address indexed account, address indexed token, uint256 amount);\r\n    event IncludedInMaxTx(address indexed account);\r\n    event ExcludedFromMaxTx(address indexed account);\r\n    event IncludeInFee(address indexed account);\r\n    event ExcludedFromFee(address indexed account);\r\n    event IncludeInStaking(address indexed account);\r\n    event ExcludedFromStaking(address indexed account);\r\n    event SwapAndLiquifyStatusUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 bnbReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    constructor () {\r\n        _rOwned[owner()] = _rTotal;\r\n        \r\n        IPancakeRouter _pancakeRouter = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n         // Create a pancake pair for this new token\r\n        pancakePair = IPancakeFactory(_pancakeRouter.factory())\r\n            .createPair(address(this), _pancakeRouter.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        pancakeRouter = _pancakeRouter;\r\n\r\n        liquidityPairAddress[pancakePair] = true;\r\n\r\n        emit AddLiquidityPairAddress(pancakePair);\r\n\r\n        /*\r\n        * BASE SETUP\r\n        * \r\n        * Exclude burn address from staking\r\n        * Exclude this contract from staking\r\n        * Exclude pair from staking\r\n        */\r\n\r\n        excludeFromStaking(address(0));\r\n        emit ExcludedFromStaking(address(0));\r\n\r\n        excludedFromFee(address(0));\r\n        emit ExcludedFromFee(address(0));\r\n\r\n        excludeFromStaking(address(this));\r\n        emit ExcludedFromStaking(address(this));\r\n\r\n        excludeFromStaking(address(pancakePair));\r\n        emit ExcludedFromStaking(address(pancakePair));\r\n\r\n        /*\r\n        * BURN WALLET\r\n        */\r\n\r\n        excludedFromFee(0x3A7a40eDDe9563e123C46d8673ba47690Dc2E875);\r\n        emit ExcludedFromFee(0x3A7a40eDDe9563e123C46d8673ba47690Dc2E875);\r\n\r\n        excludeFromStaking(0x3A7a40eDDe9563e123C46d8673ba47690Dc2E875);\r\n        emit ExcludedFromStaking(0x3A7a40eDDe9563e123C46d8673ba47690Dc2E875);\r\n\r\n        excludeFromMaxTx(0x3A7a40eDDe9563e123C46d8673ba47690Dc2E875);\r\n        emit ExcludedFromMaxTx(0x3A7a40eDDe9563e123C46d8673ba47690Dc2E875);\r\n\r\n        /*\r\n        * OWNER WALLET\r\n        */\r\n\r\n        excludedFromFee(0x87E3b8bC7Fbe3516e2dF7ECb940F7eBea02926Fc);\r\n        emit ExcludedFromFee(0x87E3b8bC7Fbe3516e2dF7ECb940F7eBea02926Fc);\r\n\r\n        excludeFromMaxTx(0x87E3b8bC7Fbe3516e2dF7ECb940F7eBea02926Fc);\r\n        emit ExcludedFromMaxTx(0x87E3b8bC7Fbe3516e2dF7ECb940F7eBea02926Fc);\r\n\r\n        excludeFromStaking(0x87E3b8bC7Fbe3516e2dF7ECb940F7eBea02926Fc);\r\n        emit ExcludedFromStaking(0x87E3b8bC7Fbe3516e2dF7ECb940F7eBea02926Fc);\r\n\r\n        /*\r\n        * EXCHANGE WALLET\r\n        */\r\n\r\n        excludeFromStaking(0x14810aB8945e557C803C399C218A98788cdea6Fd);\r\n        emit ExcludedFromStaking(0x14810aB8945e557C803C399C218A98788cdea6Fd);\r\n\r\n        excludedFromFee(0x14810aB8945e557C803C399C218A98788cdea6Fd);\r\n        emit ExcludedFromFee(0x14810aB8945e557C803C399C218A98788cdea6Fd);\r\n\r\n        excludeFromMaxTx(0x14810aB8945e557C803C399C218A98788cdea6Fd);\r\n        emit ExcludedFromMaxTx(0x14810aB8945e557C803C399C218A98788cdea6Fd);\r\n\r\n        /*\r\n        * GIVEAWAY WALLET\r\n        */\r\n\r\n        excludeFromStaking(0xe6ec80E5732B7183cA9044Fb0424A9030B61b245);\r\n        emit ExcludedFromStaking(0xe6ec80E5732B7183cA9044Fb0424A9030B61b245);\r\n\r\n        excludedFromFee(0xe6ec80E5732B7183cA9044Fb0424A9030B61b245);\r\n        emit ExcludedFromFee(0xe6ec80E5732B7183cA9044Fb0424A9030B61b245);\r\n\r\n        excludeFromMaxTx(0xe6ec80E5732B7183cA9044Fb0424A9030B61b245);\r\n        emit ExcludedFromMaxTx(0xe6ec80E5732B7183cA9044Fb0424A9030B61b245);\r\n\r\n        authorize(0xe6ec80E5732B7183cA9044Fb0424A9030B61b245, true);\r\n        emit Authorized(0xe6ec80E5732B7183cA9044Fb0424A9030B61b245, true);\r\n\r\n        /*\r\n        * DEPLOYER\r\n        */\r\n\r\n        excludedFromFee(owner());\r\n        emit ExcludedFromFee(owner());\r\n\r\n        excludeFromMaxTx(owner());\r\n        emit ExcludedFromMaxTx(owner());\r\n\r\n        excludeFromStaking(owner());\r\n        emit ExcludedFromStaking(owner());\r\n        \r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_excludedFromStaking[account]) return _tOwned[account];\r\n        return tokenFromStaking(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function excludeFromStaking(address account) public onlyOwner() {\r\n        require(!_excludedFromStaking[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromStaking(_rOwned[account]);\r\n        }\r\n        _excludedFromStaking[account] = true;\r\n        _excluded.push(account);\r\n\r\n        emit ExcludedFromStaking(account);\r\n    }\r\n \r\n    function includeInStaking(address account) external onlyOwner() {\r\n        require(_excludedFromStaking[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        _rOwned[account] = _tOwned[account].mul(_getRate());\r\n        _tOwned[account] = 0;\r\n\r\n        _excludedFromStaking[account] = false;\r\n\r\n        emit IncludeInStaking(account);\r\n    }\r\n    \r\n    function excludedFromFee(address account) public onlyOwner {\r\n        _excludedFromFee[account] = true;\r\n        emit ExcludedFromFee(account);\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _excludedFromFee[account] = false;\r\n        emit IncludeInFee(account);\r\n    }\r\n    \r\n    function assignMaxTxAmount(uint256 maxTxAmount_) external onlyOwner() {\r\n        require(maxTxAmount_ >= _minTxAmountLimit && maxTxAmount_ <= _maxTxAmountLimit, \"Max tx amount limit error.\");\r\n        _maxTxAmount = maxTxAmount_;\r\n        \r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n\r\n    function excludeFromMaxTx(address account) public onlyOwner() {\r\n        _excludedFromMaxTx[account] = true;\r\n        \r\n        emit ExcludedFromMaxTx(account);\r\n    }\r\n\r\n    function includeInMaxTx(address account) public onlyOwner() {\r\n        _excludedFromMaxTx[account] = true;\r\n        \r\n        emit IncludedInMaxTx(account);\r\n    }\r\n    \r\n    function assignMinTriggerAmount(uint256 minTriggerAmount_) external onlyOwner() {\r\n        require(minTriggerAmount_ >= _minTriggerAmountLimit && minTriggerAmount_ <= _maxTriggerAmountLimit, \"Trigger amount limit error.\");\r\n        _minTriggerAmount = minTriggerAmount_;\r\n        \r\n        emit MinTriggerAmountUpdated(_minTriggerAmount);\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _excludedFromFee[account];\r\n    }\r\n\r\n    function isExcludedFromStaking(address account) public view returns (bool) {\r\n        return _excludedFromStaking[account];\r\n    }\r\n\r\n    function isExcludedFromMaxTx(address account) public view returns (bool) {\r\n        return _excludedFromMaxTx[account];\r\n    }\r\n    \r\n    function stakingFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromStaking(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    \r\n    function withdrawTokens(IBEP20 tokenAddress) external onlyOwner() {\r\n        uint256 balance = tokenAddress.balanceOf(address(this));\r\n\r\n        tokenAddress.transfer(owner(), balance);\r\n\r\n        emit WithdrawTokens(owner(), address(tokenAddress), balance);\r\n    }\r\n    \r\n    function withdrawBnbBalance(address payable account) external onlyOwner() {\r\n        uint256 balance = address(this).balance;\r\n        account.transfer(balance);\r\n        emit WithdrawBnbBalance(account, balance);\r\n    }\r\n\r\n    function withdrawBnbBalance() public onlyOwner() {\r\n        uint256 balance = address(this).balance;\r\n        payable(_marketingWallet).transfer(balance);\r\n        emit WithdrawBnbBalance(_marketingWallet, balance);\r\n    }\r\n\r\n    function assignSwapAndLiquifyStatus(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyStatusUpdated(_enabled);\r\n    }\r\n\r\n    function distributeAirdropToHolder(address holder, uint256 amount) external onlyAuthorized() {\r\n        \r\n        require(_excludedFromFee[_msgSender()], \"Only excluded from fee can perform this action\");\r\n\r\n        _transfer(_msgSender(), holder, amount);\r\n\r\n        emit HolderAirdrop(holder, amount);\r\n\r\n    }\r\n    \r\n    function distributeAirdropToHolders(address[] calldata holders, uint256[] calldata amounts) external onlyAuthorized() {\r\n\r\n        require(holders.length == amounts.length, \"must be the same length\");\r\n        \r\n        require(_excludedFromFee[_msgSender()], \"Only excluded from fee can perform this action\");\r\n\r\n        uint256 iterator = 0;\r\n\r\n        while(iterator < holders.length){\r\n            _transfer(_msgSender(), holders[iterator], amounts[iterator]);\r\n            iterator++;\r\n        }\r\n\r\n        emit HoldersAirdrop(holders, amounts);\r\n\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function addLiquidityPairAddress(address account) external onlyOwner() {\r\n        liquidityPairAddress[account] = true;\r\n\r\n        emit AddLiquidityPairAddress(account);\r\n    }\r\n    \r\n    function removeLiquidityPairAddress(address account) external onlyOwner() {\r\n        liquidityPairAddress[account] = false;\r\n\r\n        emit RemoveLiquidityPairAddress(account);\r\n    }\r\n\r\n    function isPairAddress(address account) public view returns (bool) {\r\n        return liquidityPairAddress[account];\r\n    }\r\n    \r\n    function enableTrading() external onlyOwner() {\r\n        tradingEnabled = true;\r\n\r\n        emit TradingEnabled(_msgSender());\r\n    }\r\n\r\n    function assignLiquidityPairWallet(address liquidityPairWallet_) public onlyOwner {\r\n        address oldWallet = liquidityPairWallet;\r\n        liquidityPairWallet = liquidityPairWallet_;\r\n        emit MarketingWalletUpdated(_msgSender(), oldWallet, liquidityPairWallet);\r\n    }\r\n\r\n    function blacklistWallet(address account) external onlyOwner() {\r\n        _blacklistedWallet[account] = true;\r\n\r\n        emit Blacklisted(account);\r\n    }\r\n    \r\n    function whitelistWallet(address account) external onlyOwner() {\r\n        _blacklistedWallet[account] = false;\r\n\r\n        emit Whitelisted(account);\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return _blacklistedWallet[account];\r\n    }\r\n\r\n    function maxTxAmount() public view returns(uint256) {\r\n        return _tTotal.mul(_maxTxAmount).div(_divider * _divider);\r\n    }\r\n\r\n    function minTriggerAmount() public view returns(uint256) {\r\n        return _tTotal.mul(_minTriggerAmount).div(_divider * _divider);\r\n    }\r\n    \r\n    function assignBuyStakingFee(uint256 amount) external onlyOwner() {\r\n        require(amount <= _stakingFeeLimit, \"Buy Staking fee cannot be more than 8%\");\r\n        _buyStakingFee = amount;\r\n        emit BuyStakingFeeUpdated(_msgSender(), amount);\r\n    }\r\n    \r\n    function assignSellStakingFee(uint256 amount) external onlyOwner() {\r\n        require(amount <= _stakingFeeLimit, \"Sell staking fee cannot be more than 8%\");\r\n        _sellStakingFee = amount;\r\n        emit SellStakingFeeUpdated(_msgSender(), amount);\r\n    }\r\n    \r\n    function assignNormalStakingFee(uint256 amount) external onlyOwner() {\r\n        require(amount <= _stakingFeeLimit, \"Normal staking fee cannot be more than 8%\");\r\n        _normalStakingFee = amount;\r\n        emit NormalStakingFeeUpdated(_msgSender(), amount);\r\n    }\r\n\r\n    function assignBuyMarketingFee(uint256 amount) public onlyOwner {\r\n        require(amount <= _marketingFeeLimit, \"Buy marketing fee cannot be more than 8%\");\r\n        _buyMarketingFee = amount;\r\n        emit BuyMarketingFeeUpdated(_msgSender(), amount);\r\n    }\r\n    \r\n    function assignSellMarketingFee(uint256 amount) external onlyOwner() {\r\n        require(amount <= _marketingFeeLimit, \"Sell marketing fee cannot be more than 8%\");\r\n        _sellMarketingFee = amount;\r\n        emit SellMarketingFeeUpdated(_msgSender(), amount);\r\n    }\r\n\r\n    function assignBuyLiquidityFee(uint256 amount) external onlyOwner() {\r\n        require(amount <= _liquidityFeeLimit, \"Buy liquidity fee cannot be more than 6%\");\r\n        _buyLiquidityFee = amount;\r\n        emit BuyLiquidityFeeUpdated(_msgSender(), amount);\r\n    }\r\n\r\n    function assignSellLiquidityFee(uint256 amount) external onlyOwner() {\r\n        require(amount <= _liquidityFeeLimit, \"Sell liquidity fee cannot be more than 6%\");\r\n        _sellLiquidityFee = amount;\r\n        emit SellLiquidityFeeUpdated(_msgSender(), amount);\r\n    }\r\n\r\n    function assignBuyBurningFee(uint256 amount) external onlyOwner() {\r\n        require(amount <= _burningFeeLimit, \"Buy burning fee cannot be more than 4%\");\r\n        _buyBurningFee = amount;\r\n        emit BuyBurningFeeUpdated(_msgSender(), amount);\r\n    }\r\n\r\n    function assignSellBurningFee(uint256 amount) external onlyOwner() {\r\n        require(amount <= _burningFeeLimit, \"Sell burning fee cannot be more than 4%\");\r\n        _sellBurningFee = amount;\r\n        emit SellBurningFeeUpdated(_msgSender(), amount);\r\n    }\r\n\r\n    function assignMarketingWallet(address marketingWallet_) public onlyOwner {\r\n        address oldWallet = _marketingWallet;\r\n        _marketingWallet = marketingWallet_;\r\n        emit MarketingWalletUpdated(_msgSender(), oldWallet, marketingWallet_);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(!tradingEnabled){\r\n            require(authorized(from) || authorized(to), \"Trading is not started yet!\"); // only owner allowed to trade or add liquidity\r\n        }\r\n        \r\n        if(_blacklistedWallet[from] || _blacklistedWallet[to]){\r\n            revert(\"Blacklisted wallets cannot trade.\");\r\n        }\r\n\r\n        if(!_excludedFromMaxTx[from] && !_excludedFromMaxTx[to])\r\n            require(amount <= maxTxAmount(), \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is pancake pair.\r\n        \r\n        if (\r\n            balanceOf(address(this)) >= minTriggerAmount() &&\r\n            !inSwapAndLiquify &&\r\n            liquidityPairAddress[to] &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            //add liquidity\r\n            _swapAndLiquify(minTriggerAmount());\r\n        }\r\n\r\n        _applyFees(from, to);\r\n\r\n        if (_excludedFromStaking[from] && !_excludedFromStaking[to]) {\r\n            _transferFromExcluded(from, to, amount);\r\n        } else if (!_excludedFromStaking[from] && _excludedFromStaking[to]) {\r\n            _transferToExcluded(from, to, amount);\r\n        } else if (!_excludedFromStaking[from] && !_excludedFromStaking[to]) {\r\n            _transferStandard(from, to, amount);\r\n        } else if (_excludedFromStaking[from] && _excludedFromStaking[to]) {\r\n            _transferBothExcluded(from, to, amount);\r\n        } else {\r\n            _transferStandard(from, to, amount);\r\n        }\r\n\r\n        _restoreFees();\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        // add the marketing wallet\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for BNB\r\n        _swapTokensForBnb(half);\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // Some balance will be stuck over time, we'll be able to withdraw it manually\r\n        uint256 marketingFee = newBalance.mul(_buyMarketingFee).div(_buyLiquidityFee.add(_buyMarketingFee));\r\n\r\n        payable(_marketingWallet).transfer(marketingFee);\r\n        newBalance -= marketingFee;\r\n        // add liquidity to pancake\r\n        _addLiquidity(otherHalf, newBalance);\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function _swapTokensForBnb(uint256 tokenAmount) private {\r\n        // generate the pancake pair path of token -> wbnb\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        _approve(address(this), address(pancakeRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(pancakeRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        pancakeRouter.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityPairWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rStake, uint256 tTransferAmount, uint256 tStake, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeFee(tFee);\r\n        _takeBurn(tBurn);\r\n        _stakeFee(rStake, tStake);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        if(tBurn > 0) {\r\n            emit Burn(tBurn);\r\n        }\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rStake, uint256 tTransferAmount, uint256 tStake, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n        _takeFee(tFee);\r\n        _takeBurn(tBurn);\r\n        _stakeFee(rStake, tStake);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        if(tBurn > 0) {\r\n            emit Burn(tBurn);\r\n        }\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rStake, uint256 tTransferAmount, uint256 tStake, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeFee(tFee);\r\n        _takeBurn(tBurn);\r\n        _stakeFee(rStake, tStake);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        if(tBurn > 0) {\r\n            emit Burn(tBurn);\r\n        }\r\n    }\r\n    \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rStake, uint256 tTransferAmount, uint256 tStake, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n        _takeFee(tFee);\r\n        _takeBurn(tBurn);\r\n        _stakeFee(rStake, tStake);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        if(tBurn > 0) {\r\n            emit Burn(tBurn);\r\n        }\r\n    }\r\n\r\n    function _applyFees(address from, address to) private {\r\n        if(_buyStakingFee == 0 && _buyLiquidityFee == 0 && _buyMarketingFee == 0 && _buyBurningFee == 0) return;\r\n\r\n        if(to == address(0)) {\r\n            _oldStakingFee = _buyStakingFee;\r\n            _oldLiquidityFee = _buyLiquidityFee;\r\n            _oldMarketingFee = _buyMarketingFee;\r\n            _oldBurningFee = _buyBurningFee;\r\n\r\n            _buyStakingFee = 0;\r\n            _buyLiquidityFee = 0;\r\n            _buyMarketingFee = 0;\r\n            _buyBurningFee = 100;\r\n        } else if(_excludedFromFee[from] || _excludedFromFee[to]) {\r\n            _oldStakingFee = _buyStakingFee;\r\n            _oldLiquidityFee = _buyLiquidityFee;\r\n            _oldMarketingFee = _buyMarketingFee;\r\n            _oldBurningFee = _buyBurningFee;\r\n\r\n            _buyStakingFee = 0;\r\n            _buyLiquidityFee = 0;\r\n            _buyMarketingFee = 0;\r\n            _buyBurningFee = 0;\r\n\r\n        } else if(liquidityPairAddress[to]) {\r\n\r\n            _buyStakingFee = _sellStakingFee;\r\n            _buyLiquidityFee = _sellLiquidityFee;\r\n            _buyMarketingFee = _sellMarketingFee;\r\n            _buyBurningFee = _sellBurningFee;\r\n\r\n        } else if(!from.isContract() && !to.isContract()) {\r\n            _oldStakingFee = _buyStakingFee;\r\n            _oldLiquidityFee = _buyLiquidityFee;\r\n            _oldMarketingFee = _buyMarketingFee;\r\n            _oldBurningFee = _buyBurningFee;\r\n\r\n            _buyStakingFee = _normalStakingFee;\r\n            _buyLiquidityFee = 0;\r\n            _buyMarketingFee = 0;\r\n            _buyBurningFee = 0;\r\n        }\r\n    }\r\n    \r\n    function _restoreFees() private {\r\n        _buyStakingFee = _oldStakingFee;\r\n        _buyLiquidityFee = _oldLiquidityFee;\r\n        _buyMarketingFee = _oldMarketingFee;\r\n        _buyBurningFee = _oldBurningFee;\r\n    }\r\n    \r\n    function _takeFee(uint256 tFee) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rFee);\r\n        if(_excludedFromStaking[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tFee);\r\n    }\r\n    \r\n    function _takeBurn(uint256 tBurn) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n        _rOwned[address(0)] = _rOwned[address(0)].add(rBurn);\r\n        _rTotal = _rTotal.sub(rBurn);\r\n\r\n        if(_excludedFromStaking[address(0)]) {\r\n            _tOwned[address(0)] = _tOwned[address(0)].add(tBurn);\r\n            _tTotal = _tTotal.sub(tBurn);\r\n        }\r\n    }\r\n\r\n    function burnZilla(uint256 amount) external {\r\n        _transfer(_msgSender(), address(0), amount);\r\n    }\r\n\r\n    function _calculateStakingFee(uint256 _amount) private view returns (uint256) {\r\n            return _amount.mul(_buyStakingFee).div(\r\n                10**2\r\n            );\r\n    }\r\n\r\n    function _calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_buyLiquidityFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function _calculateMarketingFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_buyMarketingFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function _calculateBurningFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_buyBurningFee).div(\r\n            10**2\r\n        );\r\n    }    \r\n    \r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\r\n        (uint256 tTransferAmount, uint256 tStake, uint256 tFee, uint256 tBurn) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rStake) = _getRValues(tAmount, tStake, tFee, tBurn, _getRate());\r\n        return (rAmount, rTransferAmount, rStake, tTransferAmount, tStake, tFee, tBurn);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\r\n        uint256 tStake = _calculateStakingFee(tAmount);\r\n        uint256 tFee = _calculateLiquidityFee(tAmount).add(_calculateMarketingFee(tAmount));\r\n        uint256 tBurn = _calculateBurningFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tStake).sub(tFee).sub(tBurn);\r\n        return (tTransferAmount, tStake, tFee, tBurn);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tStake, uint256 tFee, uint256 tBurn, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rStake = tStake.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rStake).sub(rFee).sub(rBurn);\r\n        return (rAmount, rTransferAmount, rStake);\r\n    }\r\n\r\n    function _stakeFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddLiquidityPairAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyBurningFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyLiquidityFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyMarketingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyStakingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromMaxTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HolderAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"HoldersAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludeInFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludeInStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedInMaxTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLiquidityPairWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLiquidityPairWallet\",\"type\":\"address\"}],\"name\":\"LiquidityPairWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTriggerAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTriggerAmount\",\"type\":\"uint256\"}],\"name\":\"MinTriggerAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NormalStakingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveLiquidityPairAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellBurningFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellLiquidityFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellMarketingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellStakingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBnbBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burningFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurningFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_normalStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurningFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakingFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addLiquidityPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assignBuyBurningFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assignBuyLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assignBuyMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assignBuyStakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityPairWallet_\",\"type\":\"address\"}],\"name\":\"assignLiquidityPairWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet_\",\"type\":\"address\"}],\"name\":\"assignMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount_\",\"type\":\"uint256\"}],\"name\":\"assignMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTriggerAmount_\",\"type\":\"uint256\"}],\"name\":\"assignMinTriggerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assignNormalStakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assignSellBurningFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assignSellLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assignSellMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assignSellStakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"assignSwapAndLiquifyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnZilla\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeAirdropToHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAirdropToHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPairAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPairWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeLiquidityPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"stakingFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBnbBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawBnbBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BabyDogeZilla", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f595e5b7f160dff868308575b6352417e70e16be6a87a9578e8615d54ee59d6f"}