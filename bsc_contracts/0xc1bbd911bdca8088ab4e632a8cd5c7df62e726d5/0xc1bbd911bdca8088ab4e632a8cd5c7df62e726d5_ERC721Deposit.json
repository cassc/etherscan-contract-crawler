{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ERC721Deposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport '@openzeppelin/contracts/utils/Context.sol';\\r\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\r\\n\\r\\nimport './IERC721Deposit.sol';\\r\\nimport './library/Whitelist.sol';\\r\\nimport './library/LogReporting.sol';\\r\\n\\r\\ncontract ERC721Deposit is Context, AccessControl, IERC721Deposit {\\r\\n    bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\\r\\n\\r\\n    using ECDSA for bytes32;\\r\\n    using Whitelist for sWhitelist;\\r\\n    using LogReporting for sLogReporting;\\r\\n\\r\\n    sWhitelist private whitelist;\\r\\n    sLogReporting private logger;\\r\\n\\r\\n    uint64 unlockPeriod;\\r\\n    uint64 fastWithdrawDelay;\\r\\n    address fastWithdrawAuthority;\\r\\n\\r\\n    mapping(address => UserDepositState[]) tokensDepositedByUser;\\r\\n    mapping(address => mapping(uint256 => DepositState)) tokensDepositedByContract;\\r\\n\\r\\n    constructor(address _governor) {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(GOVERNOR_ROLE, _governor);\\r\\n        logger = sLogReporting('ERC721Deposit');\\r\\n        whitelist.init(logger);\\r\\n        unlockPeriod = 2 weeks;\\r\\n        fastWithdrawDelay = 1 hours;\\r\\n    }\\r\\n\\r\\n    modifier _onlyGovernor() {\\r\\n        require(\\r\\n            hasRole(GOVERNOR_ROLE, _msgSender()),\\r\\n            logger.reportError('You are not allowed to perform this operation')\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier _allContractWhitelisted(DepositRequest[] memory tokens) {\\r\\n        bool allWhitelisted = true;\\r\\n        for (uint256 i = 0; i > tokens.length; i++) {\\r\\n            require(\\r\\n                whitelist.isWhitelisted(tokens[i].contractAddr) == true,\\r\\n                logger.reportError(\\r\\n                    'Contract address not whitelisted',\\r\\n                    Strings.toHexString(uint160(tokens[i].contractAddr), 20)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getUnlockPeriod() public view returns (uint64) {\\r\\n        return unlockPeriod;\\r\\n    }\\r\\n\\r\\n    //Update of unlock period doesn't affect already deposited token\\r\\n    function updateUnlockPeriod(uint64 period) public _onlyGovernor {\\r\\n        require(period > 1 minutes, logger.reportError('Unlock period must be greater than 1 min'));\\r\\n        require(\\r\\n            period < 3 * 4 weeks,\\r\\n            logger.reportError('Unlock period must be less than 3 months')\\r\\n        );\\r\\n        unlockPeriod = period;\\r\\n    }\\r\\n\\r\\n    function getFastWithdrawDelay() public view returns (uint64) {\\r\\n        return fastWithdrawDelay;\\r\\n    }\\r\\n\\r\\n    function updateFastWithdrawDelay(uint64 delay) public _onlyGovernor {\\r\\n        require(delay > 0, logger.reportError('Delay must be greater than 0'));\\r\\n        require(delay < 1 days, logger.reportError('Delay must be less than 1 day'));\\r\\n        fastWithdrawDelay = delay;\\r\\n    }\\r\\n\\r\\n    function getFastWithdrawAuthority() public view returns (address) {\\r\\n        return fastWithdrawAuthority;\\r\\n    }\\r\\n\\r\\n    function updateFastWithdrawAuthority(address authority) public _onlyGovernor {\\r\\n        require(authority != address(0), logger.reportError(\\\"Authority can't be address 0x\\\"));\\r\\n        fastWithdrawAuthority = authority;\\r\\n    }\\r\\n\\r\\n    function getWhitelisted() public view returns (address[] memory) {\\r\\n        return whitelist.contracts;\\r\\n    }\\r\\n\\r\\n    function isWhitelisted(address contractAddr) public view returns (bool) {\\r\\n        return whitelist.isWhitelisted(contractAddr);\\r\\n    }\\r\\n\\r\\n    function getTokenDepositedByUser(address userAddr)\\r\\n        public\\r\\n        view\\r\\n        returns (UserDepositState[] memory)\\r\\n    {\\r\\n        return tokensDepositedByUser[userAddr];\\r\\n    }\\r\\n\\r\\n    function getDepositState(address contractAddr, uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (DepositState memory)\\r\\n    {\\r\\n        return tokensDepositedByContract[contractAddr][tokenId];\\r\\n    }\\r\\n\\r\\n    function addContract(address contractAddr) public _onlyGovernor {\\r\\n        whitelist.add(contractAddr);\\r\\n    }\\r\\n\\r\\n    function removeContract(address contractAddr) public _onlyGovernor {\\r\\n        whitelist.remove(contractAddr);\\r\\n    }\\r\\n\\r\\n    function depositTokens(DepositRequest[] memory tokens) public _allContractWhitelisted(tokens) {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            IERC721 tokenInstance = IERC721(tokens[i].contractAddr);\\r\\n            DepositState storage ds = tokensDepositedByContract[tokens[i].contractAddr][\\r\\n                tokens[i].tokenId\\r\\n            ];\\r\\n            require(\\r\\n                ds.owner == address(0),\\r\\n                logger.reportError('Token already deposited | ', depositRequestToString(tokens[i]))\\r\\n            );\\r\\n            tokenInstance.transferFrom(_msgSender(), address(this), tokens[i].tokenId);\\r\\n            ds.owner = _msgSender();\\r\\n            ds.lockedUntil = 0;\\r\\n            ds.unlockPeriod = unlockPeriod;\\r\\n            tokensDepositedByUser[_msgSender()].push(\\r\\n                UserDepositState(tokens[i].tokenId, tokens[i].contractAddr, ds)\\r\\n            );\\r\\n        }\\r\\n        emit TokenDeposited(_msgSender(), tokens);\\r\\n    }\\r\\n\\r\\n    function requestWithdraws(DepositRequest[] memory tokens) public {\\r\\n        UserDepositState[] memory tokenRequested = new UserDepositState[](tokens.length);\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            DepositState storage ds = tokensDepositedByContract[tokens[i].contractAddr][\\r\\n                tokens[i].tokenId\\r\\n            ];\\r\\n            require(\\r\\n                ds.owner == _msgSender(),\\r\\n                logger.reportError('Token not deposited | ', depositRequestToString(tokens[i]))\\r\\n            );\\r\\n            require(\\r\\n                ds.lockedUntil == 0,\\r\\n                logger.reportError('Token already requested | ', depositRequestToString(tokens[i]))\\r\\n            );\\r\\n            ds.lockedUntil = uint64(block.timestamp + ds.unlockPeriod);\\r\\n            for (uint256 j = 0; j < tokensDepositedByUser[_msgSender()].length; j++) {\\r\\n                if (tokensDepositedByUser[_msgSender()][j].tokenId == tokens[i].tokenId) {\\r\\n                    tokensDepositedByUser[_msgSender()][j].ds = ds;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            tokenRequested[i] = UserDepositState(tokens[i].tokenId, tokens[i].contractAddr, ds);\\r\\n        }\\r\\n        emit TokenWithdrawalRequest(_msgSender(), tokenRequested);\\r\\n    }\\r\\n\\r\\n    function withdraws(DepositRequest[] memory tokens) public {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            DepositState storage ds = tokensDepositedByContract[tokens[i].contractAddr][\\r\\n                tokens[i].tokenId\\r\\n            ];\\r\\n            require(\\r\\n                ds.owner == _msgSender(),\\r\\n                logger.reportError('Token not deposited | ', depositRequestToString(tokens[i]))\\r\\n            );\\r\\n            require(\\r\\n                ds.lockedUntil != 0,\\r\\n                logger.reportError(\\r\\n                    'Token not request for withdraw | ',\\r\\n                    depositRequestToString(tokens[i])\\r\\n                )\\r\\n            );\\r\\n            require(\\r\\n                uint64(block.timestamp) > ds.lockedUntil,\\r\\n                logger.reportError(\\r\\n                    'Token is still locked in time | ',\\r\\n                    depositRequestToString(tokens[i])\\r\\n                )\\r\\n            );\\r\\n            _baseWithdraw(tokens[i].tokenId, tokens[i].contractAddr, uint64(block.timestamp), ds);\\r\\n        }\\r\\n        emit TokenWithdrawal(_msgSender(), tokens);\\r\\n    }\\r\\n\\r\\n    function fastWithdraws(\\r\\n        DepositRequest[] memory tokens,\\r\\n        uint64 timestamp,\\r\\n        bytes memory signature\\r\\n    ) public {\\r\\n        require(\\r\\n            fastWithdrawAuthority != address(0),\\r\\n            logger.reportError('Unknow fast withdraw authority')\\r\\n        );\\r\\n        verifyFastWithdrawsHash(tokens, timestamp, signature);\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            DepositState storage ds = tokensDepositedByContract[tokens[i].contractAddr][\\r\\n                tokens[i].tokenId\\r\\n            ];\\r\\n            require(\\r\\n                ds.owner == _msgSender(),\\r\\n                logger.reportError('Token not deposited | ', depositRequestToString(tokens[i]))\\r\\n            );\\r\\n            require(\\r\\n                ds.lastWithdraw + fastWithdrawDelay < timestamp,\\r\\n                logger.reportError(\\r\\n                    'Need to wait before fast withdraw again | ',\\r\\n                    string(\\r\\n                        abi.encodePacked(depositRequestToString(tokens[i]), ' ', ds.lastWithdraw)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n            _baseWithdraw(tokens[i].tokenId, tokens[i].contractAddr, timestamp, ds);\\r\\n        }\\r\\n        emit TokenWithdrawal(_msgSender(), tokens);\\r\\n    }\\r\\n\\r\\n    function _baseWithdraw(\\r\\n        uint256 tokenId,\\r\\n        address contractAddr,\\r\\n        uint64 timestamp,\\r\\n        DepositState storage ds\\r\\n    ) internal {\\r\\n        IERC721 tokenInstance = IERC721(contractAddr);\\r\\n        tokenInstance.transferFrom(address(this), _msgSender(), tokenId);\\r\\n        ds.owner = address(0);\\r\\n        ds.lockedUntil = 0;\\r\\n        ds.unlockPeriod = 0;\\r\\n        ds.lastWithdraw = timestamp;\\r\\n        removeTokenFromStorage(tokenId, contractAddr);\\r\\n    }\\r\\n\\r\\n    function verifyFastWithdrawsHash(\\r\\n        DepositRequest[] memory tokens,\\r\\n        uint64 timestamp,\\r\\n        bytes memory signature\\r\\n    ) internal view {\\r\\n        bytes32[] memory tokensHash = new bytes32[](tokens.length);\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            tokensHash[i] = keccak256(abi.encodePacked(tokens[i].tokenId, tokens[i].contractAddr));\\r\\n        }\\r\\n        bytes32 digest = keccak256(abi.encodePacked(tokensHash, timestamp));\\r\\n        require(\\r\\n            digest.toEthSignedMessageHash().recover(signature) == fastWithdrawAuthority,\\r\\n            logger.reportError('Bad signer for message')\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function depositRequestToString(DepositRequest memory token)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    Strings.toString(token.tokenId),\\r\\n                    ' ',\\r\\n                    Strings.toHexString(uint160(token.contractAddr), 20)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function removeTokenFromStorage(uint256 tokenId, address contractAddr) internal {\\r\\n        for (uint256 i = 0; i < tokensDepositedByUser[_msgSender()].length; i++) {\\r\\n            if (\\r\\n                tokensDepositedByUser[_msgSender()][i].tokenId == tokenId &&\\r\\n                tokensDepositedByUser[_msgSender()][i].contractAddr == contractAddr\\r\\n            ) {\\r\\n                tokensDepositedByUser[_msgSender()][i] = tokensDepositedByUser[_msgSender()][\\r\\n                    tokensDepositedByUser[_msgSender()].length - 1\\r\\n                ];\\r\\n                tokensDepositedByUser[_msgSender()].pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IERC721Deposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the deposit contract for Chromia bridge standard\\r\\n *\\r\\n * This contract is use to deposit assets from EVM compatible chain to CHR\\r\\n * You could deposit any token that are whitelisted\\r\\n * You could withdraw any token even if the contract was remove from whitelist\\r\\n * You could request for a witdhraw, token will be locked for (`unlockPeriod`).\\r\\n *\\r\\n */\\r\\ninterface IERC721Deposit {\\r\\n    /**\\r\\n     * @dev DepositState is a storage for a tokenId where we could keep in memory\\r\\n     *\\r\\n     * - `address owner`: owner of the token\\r\\n     * - `uint64 lockedUntil`: period of lock after request withdraw\\r\\n     * - `uint64 unlockPeriod`: period of lock when deposit\\r\\n     * - `uint64 lastWithdraw`: period of lastWithdraw to prevent fastWithdraw abuse\\r\\n     *\\r\\n     */\\r\\n    struct DepositState {\\r\\n        address owner;\\r\\n        uint64 lockedUntil;\\r\\n        uint64 unlockPeriod;\\r\\n        uint64 lastWithdraw;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev DepositRequest is a struct use to call {depositToken}, {requestWithdraws}, {withdraws} & {fastWithdraws}\\r\\n     *\\r\\n     * - `uint256 tokenId`: tokenId of an ERC721\\r\\n     * - `address contractAddr`: Adress of the contract for the tokenId should be whitelisted for deposit only !\\r\\n     *\\r\\n     */\\r\\n    struct DepositRequest {\\r\\n        uint256 tokenId;\\r\\n        address contractAddr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev UserDepositState is a struct use to keep track in a mapping of all tokens deposited by a user\\r\\n     *\\r\\n     * - `uint256 tokenId`: tokenId of an ERC721\\r\\n     * - `address contractAddr`: Address of the ERC721 Contract\\r\\n     * - `DepositState ds`: Deposit state of a given token\\r\\n     *\\r\\n     */\\r\\n    struct UserDepositState {\\r\\n        uint256 tokenId;\\r\\n        address contractAddr;\\r\\n        DepositState ds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when (`from`) make an NFT deposit as an array of {DepositRequest} (`tokens`)\\r\\n     */\\r\\n    event TokenDeposited(address indexed from, DepositRequest[] tokens);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when (`from`) make an NFT withdrawal request as an array of {UserDepositState} (`tokens`)\\r\\n     * Will have info for each token about `unlockPeriod` and `lockedUntil`\\r\\n     */\\r\\n    event TokenWithdrawalRequest(address indexed from, UserDepositState[] tokens);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when (`from`) make an NFT withdrawal as an array of {DepositRequest} (`tokens`)\\r\\n     */\\r\\n    event TokenWithdrawal(address indexed from, DepositRequest[] tokens);\\r\\n\\r\\n    /**\\r\\n     * @dev return standard unlock period stored in contract\\r\\n     *\\r\\n     */\\r\\n    function getUnlockPeriod() external view returns (uint64);\\r\\n\\r\\n    /**\\r\\n     * @dev Use to update unlockPeriod, (`unlockPeriod`) need to be greater than 0 and lesser than 3 months\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Caller should be `GOVERNOR_ROLE`\\r\\n     *\\r\\n     */\\r\\n    function updateUnlockPeriod(uint64 unlockPeriod) external;\\r\\n\\r\\n    /**\\r\\n     * @dev return fast withdraw delay\\r\\n     */\\r\\n    function getFastWithdrawDelay() external view returns (uint64);\\r\\n\\r\\n    /**\\r\\n     * @dev Use to update fastWithdrawDelay, (`delay`) need to be greater than 0 and lesser than 1 day\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Caller should be `GOVERNOR_ROLE`\\r\\n     *\\r\\n     */\\r\\n    function updateFastWithdrawDelay(uint64 delay) external;\\r\\n\\r\\n    /**\\r\\n     * @dev return fast withdraw authority is the address that should sign message for fast withdraw\\r\\n     *\\r\\n     */\\r\\n    function getFastWithdrawAuthority() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Use to update fastWithdrawAuthority, (`authority`) should be different than address(0)\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Caller should be `GOVERNOR_ROLE`\\r\\n     *\\r\\n     */\\r\\n    function updateFastWithdrawAuthority(address authority) external;\\r\\n\\r\\n    /**\\r\\n     * @dev return list of contract addresses that are whitelisted\\r\\n     *\\r\\n     */\\r\\n    function getWhitelisted() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev return true or false if contract is whitelisted\\r\\n     *\\r\\n     */\\r\\n    function isWhitelisted(address contractAddr) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev return list of all tokens deposited by user address (`userAddr`) as {UserDepositState}\\r\\n     */\\r\\n    function getTokenDepositedByUser(address userAddr)\\r\\n        external\\r\\n        view\\r\\n        returns (UserDepositState[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev return {DepositState} for a given (`contractAddr`) and (`tokenId`)\\r\\n     */\\r\\n    function getDepositState(address contractAddr, uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (DepositState memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Use to add address of a contract in the whitelist to allow deposit\\r\\n     * address (`contractAddr`)\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Caller should be `GOVERNOR_ROLE`\\r\\n     *\\r\\n     */\\r\\n    function addContract(address contractAddr) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Use to remove address of a contract in the whitelist, token could still be withdrawns\\r\\n     * address (`contractAddr`)\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Caller should be `GOVERNOR_ROLE`\\r\\n     *\\r\\n     */\\r\\n    function removeContract(address contractAddr) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit an array of tokens and contract (`tokens`) in the deposit state\\r\\n     *\\r\\n     * ex: [[0, \\\"0x...\\\"], [1, \\\"0x...\\\"]]\\r\\n     *\\r\\n     * Emits a {TokenDeposited} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - All contracts should be whitelisted\\r\\n     * - {DepositState} shouldn't exist or owner should be address(0) it's set after a withdrawal\\r\\n     *\\r\\n     */\\r\\n    function depositTokens(DepositRequest[] memory tokens) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Request the withdraw of a tokens and contract array (`tokens`)\\r\\n     *\\r\\n     * ex: [[0, \\\"0x...\\\"], [1, \\\"0x...\\\"]]\\r\\n     *\\r\\n     * Emits a {TokenWithdrawalRequest} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - {DepositState} owner should be the message sender\\r\\n     * - {DepositState} lockedUntil should be 0 else token is already requested for withdraw\\r\\n     *\\r\\n     */\\r\\n    function requestWithdraws(DepositRequest[] memory tokens) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw an array of tokens and contract (`tokens`) if they are unlockable\\r\\n     * it will update `lastWithdraw` to prevent a {fastWithdraws} call\\r\\n     *\\r\\n     *  ex: [[0, \\\"0x...\\\"], [1, \\\"0x...\\\"]]\\r\\n     *\\r\\n     * Emits a {TokenWithdrawal} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - {DepositState} owner should be the message sender\\r\\n     * - {DepositState} lockedUntil should be != 0 else token is not requested for withdraw (lockedUntil is always greater or equal 0)\\r\\n     * - {DepositeState} lockedUntil should be greater than `block.timestamp`\\r\\n     *\\r\\n     */\\r\\n    function withdraws(DepositRequest[] memory tokens) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw an array of tokens and contract (`tokens`)\\r\\n     * regarding a `timestamp` and a `signature`\\r\\n     *\\r\\n     * It will use keccak256() to verify parameter and hash it on solidity side\\r\\n     * It use ECDSA to get back signer of signature\\r\\n     * It will update lastWithdraw regarding the passed timestamp\\r\\n     *\\r\\n     *  ex: [[0, \\\"0x...\\\"], [1, \\\"0x...\\\"]]\\r\\n     *\\r\\n     * Emits a {TokenWithdrawal} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - {DepositState} owner should be the message sender\\r\\n     * - `signature` should be signed by fastWithdrawAuthority. check {updateFastWithdrawAuthority} & {getFastWithrawAuthority}\\r\\n     * - {DepositState} lastWithdraw + fastWithdrawDelay should be greater than timestamp\\r\\n     *\\r\\n     * We could use timestamp safely here because message hash it's checked with timestamp and should come from the approved authority\\r\\n     *\\r\\n     */\\r\\n    function fastWithdraws(\\r\\n        DepositRequest[] memory tokens,\\r\\n        uint64 timestamp,\\r\\n        bytes memory signature\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./LogReporting.sol\\\";\\r\\n\\r\\nstruct sWhitelist {\\r\\n    sLogReporting logger;\\r\\n    address[] contracts;\\r\\n}\\r\\n\\r\\nlibrary Whitelist {\\r\\n    using LogReporting for sLogReporting;\\r\\n\\r\\n    function init(sWhitelist storage self, sLogReporting memory logger) public {\\r\\n        self.logger = logger;\\r\\n    }\\r\\n\\r\\n    function add(sWhitelist storage self, address contractAddr) public {\\r\\n        require(\\r\\n            contractAddr != address(0),\\r\\n            self.logger.reportError(\\\"Contract address can't be 0x\\\")\\r\\n        );\\r\\n        require(\\r\\n            isWhitelisted(self, contractAddr) == false,\\r\\n            self.logger.reportError(\\\"Contract address already whitelisted\\\")\\r\\n        );\\r\\n        self.contracts.push(contractAddr);\\r\\n    }\\r\\n\\r\\n    function remove(sWhitelist storage self, address contractAddr) public {\\r\\n        require(\\r\\n            contractAddr != address(0),\\r\\n            self.logger.reportError(\\\"Contract address can't be 0x\\\")\\r\\n        );\\r\\n        require(\\r\\n            isWhitelisted(self, contractAddr) != false,\\r\\n            self.logger.reportError(\\\"Contract address not whitelisted\\\")\\r\\n        );\\r\\n        for (uint256 i = 0; i < self.contracts.length; i++) {\\r\\n            if (self.contracts[i] == contractAddr) {\\r\\n                self.contracts[i] = self.contracts[self.contracts.length - 1];\\r\\n                self.contracts.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWhitelisted(sWhitelist storage self, address contractAddr)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i = 0; i < self.contracts.length; i++) {\\r\\n            if (self.contracts[i] == contractAddr) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/LogReporting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nstruct sLogReporting {\\r\\n    string contractName;\\r\\n}\\r\\n\\r\\nlibrary LogReporting {\\r\\n    function reportError(sLogReporting storage self, string memory error)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return string(abi.encodePacked(self.contractName, \\\" - [ERROR]: \\\", error));\\r\\n    }\\r\\n\\r\\n    function reportError(\\r\\n        sLogReporting storage self,\\r\\n        string memory error1,\\r\\n        string memory error2\\r\\n    ) public view returns (string memory) {\\r\\n        return string(abi.encodePacked(self.contractName, \\\" - [ERROR]: \\\", error1, error2));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/library/LogReporting.sol\": {\r\n        \"LogReporting\": \"0xa84a29c8ec180d959998f9ebbae35b88209b24c3\"\r\n      },\r\n      \"contracts/library/Whitelist.sol\": {\r\n        \"Whitelist\": \"0x466bd51ec2a4855f6fa3cabc7bdb61095d47030d\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IERC721Deposit.DepositRequest[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IERC721Deposit.DepositRequest[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastWithdraw\",\"type\":\"uint64\"}],\"internalType\":\"struct IERC721Deposit.DepositState\",\"name\":\"ds\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct IERC721Deposit.UserDepositState[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"TokenWithdrawalRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"addContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"internalType\":\"struct IERC721Deposit.DepositRequest[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"internalType\":\"struct IERC721Deposit.DepositRequest[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fastWithdraws\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDepositState\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastWithdraw\",\"type\":\"uint64\"}],\"internalType\":\"struct IERC721Deposit.DepositState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFastWithdrawAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFastWithdrawDelay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getTokenDepositedByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastWithdraw\",\"type\":\"uint64\"}],\"internalType\":\"struct IERC721Deposit.DepositState\",\"name\":\"ds\",\"type\":\"tuple\"}],\"internalType\":\"struct IERC721Deposit.UserDepositState[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelisted\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"removeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"internalType\":\"struct IERC721Deposit.DepositRequest[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"requestWithdraws\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"updateFastWithdrawAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"delay\",\"type\":\"uint64\"}],\"name\":\"updateFastWithdrawDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"period\",\"type\":\"uint64\"}],\"name\":\"updateUnlockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"internalType\":\"struct IERC721Deposit.DepositRequest[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"withdraws\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721Deposit", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000073580e7bb63d8acfd0ac9bfa736b8d3911cbece5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}