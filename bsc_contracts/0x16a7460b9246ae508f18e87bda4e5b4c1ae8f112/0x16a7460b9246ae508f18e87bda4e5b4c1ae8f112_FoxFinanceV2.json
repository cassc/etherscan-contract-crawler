{"SourceCode": "/*\r\n    Fox.finance V2\r\n*/  \r\n\r\n// Code written by MrGreenCrypto\r\n// SPDX-License-Identifier: None\r\npragma solidity 0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {_setOwner(_msgSender());}\r\n    function owner() public view virtual returns (address) {return _owner;}\r\n    modifier onlyOwner() {require(owner() == _msgSender(), \"Ownable: caller is not the owner\");_;}\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {_setOwner(newOwner);}\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract FoxFinanceV2 is Context, IERC20, Ownable {\r\n\r\n    string private constant _name = \"FoxFinanceV2\";\r\n    string private constant _symbol = \"FOXV2\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant MAX = type(uint256).max;\r\n\r\n    uint256 private _tTotal = 1_000_000_000 * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n\r\n    address[] private _excluded;\r\n    address[] public pairs;\r\n    \r\n    bool public tradingEnabled = false;\r\n    bool public swapEnabled = false;\r\n    bool private swapping;\r\n\r\n    IRouter public router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public pair;\r\n    \r\n\r\n    uint256 public swapThreshold = 200_000 * 10**_decimals;\r\n    uint256 public maxSwapAmount = 300_000 * 10**_decimals;\r\n    \r\n    address public burnAddress = 0x0000000000000000000000000000000000000001;\r\n    address public marketingAddress = 0x20dAC28ED4c51F3dFBCFbB989dB91e16fe8EDD58;\r\n    address public devAddress = 0xe6497e1F2C5418978D5fC2cD32AA23315E7a41Fb;\r\n    address public charityAddress = 0x6BA9882203F896335A1f1A8ac509d6839Ca57B62;\r\n    address public stakingAddress;\r\n    address public reserveAddress;\r\n    address public teamAddress = 0xef948Fbf3Ef54BB4b4061AEd2928a5cA94628053;\r\n    address public deployerAddress = 0x6A4D3Fe038eaB7F3EEf5a3db51A931bcf8aff152;\r\n    address public foxV1 = 0xFAd8E46123D7b4e77496491769C167FF894d2ACB;\r\n    address public migratorContractAddress = 0xC68FFF25b5A33844BBbF73d96BADc9c9f967A39f;\r\n    \r\n    // Migration from FoxV1 to FoxV2 \r\n    bool public migrationEnabled = false;\r\n    uint256 public totalTokenAvailableForMigration;\r\n    uint256 public totalV1TokenMigrated;\r\n    uint256 public totalWalletsMigrated;\r\n    uint256 public ratioV1V2 = 1_000_000;\r\n    mapping (address => uint256) public oldToken;\r\n    mapping (address => uint256) public newToken;\r\n\r\n    struct Taxes {\r\n      uint256 rfi;\r\n      uint256 tokenTax;\r\n      uint256 bnbTax;\r\n    }\r\n\r\n    Taxes public transferTaxes = Taxes(0,0,0);\r\n    Taxes public buyTaxes = Taxes(4,0,5);\r\n    Taxes public sellTaxes = Taxes(4,0,5);\r\n\r\n    struct bnbDistribution {\r\n      uint256 liquidityPercentage;\r\n      uint256 marketingPercentage;\r\n      uint256 teamPercentage;\r\n      uint256 devPercentage;\r\n      uint256 charityPercentage;\r\n      uint256 stakingPercentage;\r\n      uint256 reservePercentage;\r\n    }\r\n    \r\n    bnbDistribution public howAreTheBnbsFromTaxesDistributed = bnbDistribution(40,20,20,0,20,0,0);\r\n    \r\n    struct tokenDistribution {\r\n      uint256 burnPercentage;\r\n      uint256 marketingPercentage;\r\n      uint256 teamPercentage;\r\n      uint256 devPercentage;\r\n      uint256 charityPercentage;\r\n      uint256 stakingPercentage;\r\n      uint256 reservePercentage;\r\n    }\r\n\r\n    tokenDistribution public howAreTheTokensFromTaxesDistributed = tokenDistribution(20,20,20,20,20,0,0);\r\n\r\n    struct TotFeesPaidStruct{\r\n        uint256 rfi;\r\n        uint256 tokenTax;\r\n        uint256 bnbTax;\r\n    }\r\n    TotFeesPaidStruct public totFeesPaid;\r\n\r\n    struct valuesFromGetValues{\r\n      uint256 rAmount;\r\n      uint256 rTransferAmount;\r\n      uint256 rRfi;\r\n      uint256 rTokenTax;\r\n      uint256 rBnbTax;\r\n      uint256 tTransferAmount;\r\n      uint256 tRfi;\r\n      uint256 tTokenTax;\r\n      uint256 tBnbTax;\r\n    }\r\n\r\n    event FeesChanged(\r\n        Taxes transferTaxes,\r\n        Taxes buyTaxes,\r\n        Taxes sellTaxes,\r\n        bnbDistribution howAreTheBnbsFromTaxesDistributed,\r\n        tokenDistribution howAreTheTokensFromTaxesDistributed\r\n    );\r\n\r\n    event MigrationSuccessful(address tokenHolder, uint256 oldTokenMigrated, uint256 newTokensSentOut);\r\n\r\n    modifier lockTheSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor () {\r\n        //set up the addresses for PancakeSwap\r\n        IRouter _router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n        router = _router;\r\n        pair = _pair;\r\n        pairs.push(pair);\r\n        excludeFromReward(pair);\r\n\r\n        excludeFromEverything(marketingAddress);\r\n        excludeFromEverything(charityAddress);\r\n        excludeFromEverything(teamAddress);\r\n        excludeFromEverything(migratorContractAddress);\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _rOwned[owner()] = _rTotal;\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    receive() external payable{}\r\n\r\n////////////////////////////////////////////////////////////////////// Basic token functions\r\n    function name() public pure returns (string memory) { return _name; }\r\n    function symbol() public pure returns (string memory) { return _symbol; }\r\n    function decimals() public pure returns (uint8) { return _decimals; }\r\n    function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; }\r\n    function totalSupply() public view override returns (uint256) { return _tTotal; }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        _approve(_msgSender(), spender, MAX);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n////////////////////////////////////////////////////////////////////// Basic token functions end\r\n\r\n////////////////////////////////////////////////////////////////////// Reflection functions\r\n    function isExcludedFromReward(address account) public view returns (bool) {return _isExcluded[account];}\r\n    function isExcludedFromFee(address account) public view returns(bool) {return _isExcludedFromFee[account];}\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi, Taxes memory temp) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferRfi) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true, temp);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true, temp);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount/currentRate;\r\n    }\r\n\r\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\r\n        _rTotal -=rRfi;\r\n        totFeesPaid.rfi +=tRfi;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, bool takeFee, Taxes memory temp) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee, temp);\r\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rRfi, to_return.rTokenTax, to_return.rBnbTax) = _getRValues(to_return, tAmount, takeFee, _getRate());\r\n        return to_return;\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, bool takeFee, Taxes memory temp) private pure returns (valuesFromGetValues memory s) {\r\n        if(!takeFee) {\r\n          s.tTransferAmount = tAmount;\r\n          return s;\r\n        }\r\n        s.tRfi = tAmount*temp.rfi/100;\r\n        s.tTokenTax = tAmount*temp.tokenTax/100;\r\n        s.tBnbTax = tAmount*temp.bnbTax/100;\r\n        s.tTransferAmount = tAmount-s.tRfi-s.tTokenTax-s.tBnbTax;\r\n        return s;\r\n    }\r\n\r\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rRfi,uint256 rTokenTax, uint256 rBnbTax) {\r\n        rAmount = tAmount*currentRate;\r\n        if(!takeFee) {\r\n          return(rAmount, rAmount, 0,0,0);\r\n        }\r\n        rRfi = s.tRfi*currentRate;\r\n        rTokenTax = s.tTokenTax*currentRate;\r\n        rBnbTax = s.tBnbTax*currentRate;\r\n        rTransferAmount =  rAmount-rRfi-rTokenTax-rBnbTax;\r\n        return (rAmount, rTransferAmount, rRfi,rTokenTax,rBnbTax);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply/tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply-_rOwned[_excluded[i]];\r\n            tSupply = tSupply-_tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal/_tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n////////////////////////////////////////////////////////////////////// Reflection functions end\r\n\r\n////////////////////////////////////////////////////////////////////// Transfer functions\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount <= balanceOf(from),\"You are trying to transfer more than your balance\");\r\n        \r\n        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\r\n            require(tradingEnabled, \"Trading not active\");\r\n        }\r\n\r\n       \r\n        bool canSwap = balanceOf(address(this)) >= swapThreshold;\r\n        if(!swapping && swapEnabled && canSwap && from != pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\r\n            swapAndLiquify();\r\n        }\r\n        Taxes memory temp; \r\n\r\n        if(isPair(from)) temp = buyTaxes;\r\n        else if(isPair(to)) temp = sellTaxes;\r\n        else temp = transferTaxes;\r\n\r\n        _tokenTransfer(from, to, amount, !(_isExcludedFromFee[from] || _isExcludedFromFee[to]), temp);\r\n    }\r\n\r\n    function isPair(address addressToCheckIfPair) internal view returns (bool) {\r\n        address[] memory liqPairs = pairs;\r\n        for (uint256 i = 0; i < liqPairs.length; i++) {\r\n            if (addressToCheckIfPair == liqPairs[i] ) {\r\n            return true;\r\n\t\t    }\r\n        }\r\n        return false;     \r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee, Taxes memory temp) private {\r\n\r\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee, temp);\r\n\r\n        if (_isExcluded[sender] ) {  //from excluded\r\n                _tOwned[sender] = _tOwned[sender]-tAmount;\r\n        }\r\n        if (_isExcluded[recipient]) { //to excluded\r\n                _tOwned[recipient] = _tOwned[recipient]+s.tTransferAmount;\r\n        }\r\n\r\n        _rOwned[sender] = _rOwned[sender]-s.rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient]+s.rTransferAmount;\r\n        \r\n        if(s.rRfi > 0 || s.tRfi > 0) {\r\n            _reflectRfi(s.rRfi, s.tRfi);\r\n        }\r\n\r\n        if(s.rBnbTax > 0 || s.tBnbTax > 0) {\r\n            _takeBnbTax(s.rBnbTax,s.tBnbTax);\r\n            emit Transfer(sender, address(this), s.tBnbTax);\r\n        }\r\n\r\n        if(s.rTokenTax > 0 || s.tTokenTax > 0){\r\n            _takeTokenTax(sender, s.rTokenTax, s.tTokenTax);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n        \r\n    }\r\n////////////////////////////////////////////////////////////////////// Transfer functions end\r\n\r\n////////////////////////////////////////////////////////////////////// Taking and distributing taxes\r\n    function _takeBnbTax(uint256 rBnbTax, uint256 tBnbTax) private {\r\n        totFeesPaid.bnbTax +=tBnbTax;\r\n        _tOwned[address(this)]+=tBnbTax;\r\n        _rOwned[address(this)] +=rBnbTax;\r\n    }\r\n\r\n    function _takeTokenTax(address sender, uint256 rTokenTax, uint256 tTokenTax) private {\r\n        totFeesPaid.tokenTax +=tTokenTax;\r\n\r\n        transferTokenTax(sender, burnAddress, rTokenTax, tTokenTax, howAreTheTokensFromTaxesDistributed.burnPercentage);\r\n        transferTokenTax(sender, marketingAddress, rTokenTax, tTokenTax, howAreTheTokensFromTaxesDistributed.marketingPercentage);\r\n        transferTokenTax(sender, teamAddress, rTokenTax, tTokenTax, howAreTheTokensFromTaxesDistributed.teamPercentage);\r\n        transferTokenTax(sender, devAddress, rTokenTax, tTokenTax, howAreTheTokensFromTaxesDistributed.devPercentage);\r\n        transferTokenTax(sender, charityAddress, rTokenTax, tTokenTax, howAreTheTokensFromTaxesDistributed.charityPercentage);\r\n        transferTokenTax(sender, stakingAddress, rTokenTax, tTokenTax, howAreTheTokensFromTaxesDistributed.stakingPercentage);\r\n        transferTokenTax(sender, reserveAddress, rTokenTax, tTokenTax, howAreTheTokensFromTaxesDistributed.reservePercentage);\r\n    }\r\n\r\n    function transferTokenTax(address sender, address receiver, uint256 rAmount, uint256 tAmount, uint256 percent) internal {\r\n        if(percent == 0 || rAmount == 0 || tAmount == 0) return;\r\n        if(_isExcluded[receiver]) _tOwned[receiver] += tAmount * percent / 100;\r\n        _rOwned[receiver] += rAmount * percent / 100;\r\n        emit Transfer(sender,receiver, rAmount * percent / 100);\r\n    }\r\n\r\n    function swapAndLiquify() private lockTheSwap{\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if(contractBalance > maxSwapAmount){\r\n            contractBalance = maxSwapAmount;\r\n        }\r\n    \r\n        uint256 tokensToLiquidity = contractBalance * howAreTheBnbsFromTaxesDistributed.liquidityPercentage / 200;\r\n\r\n        uint256 tokensToSwapToBnb = contractBalance - tokensToLiquidity;\r\n\r\n        swapTokensForBNB(tokensToSwapToBnb);\r\n\r\n        if(tokensToLiquidity > 0 && address(this).balance > 0){\r\n            addLiquidity(tokensToLiquidity, address(this).balance);\r\n        }\r\n\r\n        uint256 onePercentOfBNBTaxes = address(this).balance / (100 - howAreTheBnbsFromTaxesDistributed.liquidityPercentage);\r\n\r\n        transferBNBPercent(marketingAddress, onePercentOfBNBTaxes, howAreTheBnbsFromTaxesDistributed.marketingPercentage);\r\n        transferBNBPercent(devAddress, onePercentOfBNBTaxes, howAreTheBnbsFromTaxesDistributed.devPercentage);\r\n        transferBNBPercent(charityAddress, onePercentOfBNBTaxes, howAreTheBnbsFromTaxesDistributed.charityPercentage);\r\n        transferBNBPercent(stakingAddress, onePercentOfBNBTaxes, howAreTheBnbsFromTaxesDistributed.stakingPercentage);\r\n        transferBNBPercent(reserveAddress, onePercentOfBNBTaxes, howAreTheBnbsFromTaxesDistributed.reservePercentage);\r\n        \r\n        //Send rest to teamWallet, to ensure no failed tx because of miscalculations \r\n        //(normally the amount sent here is the teamPercentage, in case of miscalculations, the amount might be slightly more or less)\r\n        payable(teamAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function transferBNBPercent(address receiver, uint256 onePercent, uint256 howManyPercent) internal {\r\n        payable(receiver).transfer(onePercent * howManyPercent);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        _approve(address(this), address(router), MAX);\r\n\r\n        router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            deployerAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), MAX);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n////////////////////////////////////////////////////////////////////// Taking and distributing taxes end\r\n\r\n////////////////////////////////////////////////////////////////////// Admin functions\r\n    function setTaxes(\r\n        uint256 selectTaxToChange,\r\n        uint256 _rfi,\r\n        uint256 _tokenTax,\r\n        uint256 _bnbTax\r\n    ) external onlyOwner {\r\n        // selectTaxToChange\r\n        // 0: transferTaxes\r\n        // 1: buyTaxes\r\n        // 2: sellTaxes\r\n\r\n        require(\r\n            selectTaxToChange == 0 ||\r\n            selectTaxToChange == 1 ||\r\n            selectTaxToChange == 2,\r\n            \"Please specify selectTaxToChange: 0 for transferTaxes, 1 for buyTaxes or 2 for sellTaxes\"\r\n        );\r\n        require(_rfi + _tokenTax + _bnbTax <= 20, \"Taxes are limited to a maximum of 20%\");\r\n\r\n        if(selectTaxToChange == 0){\r\n            transferTaxes.rfi = _rfi;\r\n            transferTaxes.tokenTax = _tokenTax;\r\n            transferTaxes.bnbTax = _bnbTax;\r\n        } else if(selectTaxToChange == 1){\r\n            buyTaxes.rfi = _rfi;\r\n            buyTaxes.tokenTax = _tokenTax;\r\n            buyTaxes.bnbTax = _bnbTax;\r\n        } else if(selectTaxToChange == 2){\r\n            sellTaxes.rfi = _rfi;\r\n            sellTaxes.tokenTax = _tokenTax;\r\n            sellTaxes.bnbTax = _bnbTax;\r\n        } else{\r\n            return;\r\n        }\r\n\r\n        emit FeesChanged(\r\n            transferTaxes,\r\n            buyTaxes,\r\n            sellTaxes,\r\n            howAreTheBnbsFromTaxesDistributed,\r\n            howAreTheTokensFromTaxesDistributed\r\n        );\r\n    }\r\n\r\n    function setBNBDistribution(uint256 newLiquidity, uint256 newMarketing, uint256 newTeam, uint256 newDev, uint256 newCharity, uint256 newStaking, uint256 newReserve) external onlyOwner {\r\n        require(newLiquidity + newMarketing + newTeam + newDev + newCharity + newStaking + newReserve == 100, \"The total distribution has to add up to 100%\");\r\n        \r\n        howAreTheBnbsFromTaxesDistributed = bnbDistribution(newLiquidity, newMarketing, newTeam, newDev, newCharity, newStaking, newReserve);\r\n        \r\n        emit FeesChanged(\r\n            transferTaxes,\r\n            buyTaxes,\r\n            sellTaxes,\r\n            howAreTheBnbsFromTaxesDistributed,\r\n            howAreTheTokensFromTaxesDistributed\r\n        );\r\n    }\r\n\r\n    function setTokenDistribution(uint256 newBurn, uint256 newMarketing, uint256 newTeam, uint256 newDev, uint256 newCharity, uint256 newStaking, uint256 newReserve) external onlyOwner {\r\n        require(newBurn + newMarketing + newTeam + newDev + newCharity + newStaking + newReserve == 100, \"The total distribution has to add up to 100%\");\r\n        \r\n        howAreTheTokensFromTaxesDistributed = tokenDistribution(newBurn, newMarketing, newTeam, newDev, newCharity, newStaking, newReserve);\r\n        \r\n        emit FeesChanged(\r\n            transferTaxes,\r\n            buyTaxes,\r\n            sellTaxes,\r\n            howAreTheBnbsFromTaxesDistributed,\r\n            howAreTheTokensFromTaxesDistributed\r\n        );\r\n    }\r\n    \r\n    function updateTaxWallets(\r\n        address newMarketingAddress, \r\n        address newCharityAddress, \r\n        address newStakingAddress, \r\n        address newTeamAddress,\r\n        address newReserveAddress\r\n        ) \r\n        external onlyOwner {\r\n            marketingAddress = newMarketingAddress;\r\n            charityAddress = newCharityAddress;\r\n            stakingAddress = newStakingAddress;\r\n            teamAddress = newTeamAddress;\r\n            reserveAddress = newReserveAddress;\r\n\r\n            excludeFromEverything(marketingAddress);\r\n            excludeFromEverything(charityAddress);\r\n            excludeFromEverything(teamAddress);\r\n            excludeFromEverything(stakingAddress);\r\n            excludeFromEverything(reserveAddress);\r\n    }\r\n\r\n    function setSwapSettings(bool set, uint256 minimumSwap, uint256 maximumSwap) external onlyOwner {\r\n\t\tswapEnabled = set;\r\n        require(minimumSwap <= maximumSwap, \"Duh?!\");\r\n        swapThreshold = minimumSwap * 10**_decimals;\r\n        maxSwapAmount = maximumSwap * 10**_decimals;\r\n    }\r\n\r\n    function addPair(address newPair) external onlyOwner {\r\n        pairs.push(newPair);\r\n        excludeFromReward(newPair);\r\n    }\r\n    \r\n    function removeLastPair() external onlyOwner {\r\n        pairs.pop();\r\n    }\r\n    \r\n    function openTrading() external onlyOwner {\r\n        tradingEnabled = true;\r\n        swapEnabled = true;\r\n        migrationEnabled = true;\r\n    }\r\n\r\n    function startMigration() public onlyOwner {\r\n        migrationEnabled = true;\r\n        totalTokenAvailableForMigration = balanceOf(migratorContractAddress);\r\n    }\r\n        \r\n////////////////////////////////////////////////////////////////////// Admin functions end\r\n\r\n////////////////////////////////////////////////////////////////////// Include and exclude wallets from taxes and reflections\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        if(_isExcluded[account]){\r\n            return;\r\n        }\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function excludeFromEverything(address account) public onlyOwner {\r\n        excludeFromFee(account);\r\n        excludeFromReward(account);\r\n    }\r\n////////////////////////////////////////////////////////////////////// Include and exclude wallets from taxes and reflections end\r\n\r\n////////////////////////////////////////////////////////////////////// Migration from FoxV1\r\n    function _migrationPreview(address account) public view returns(uint256, uint256) {\r\n        uint256 oldTokenPreview = IERC20(foxV1).balanceOf(account);\r\n        uint256 newTokenPreview = oldTokenPreview / ratioV1V2;\r\n        return (oldTokenPreview, newTokenPreview);\r\n    }\r\n\r\n    function _migrateFoxTokenToFoxV2() external {\r\n        // record balance of V1 token and calculate V2 token amount\r\n        (oldToken[msg.sender], newToken[msg.sender])  = _migrationPreview(msg.sender);\r\n        \r\n        // make sure the migratorContract has enough V2 tokens\r\n        require(totalTokenAvailableForMigration >= newToken[msg.sender], \"MigratorContract is out of tokens, please ask the team to refill it\");\r\n        \r\n        // check if migration has started already\r\n        require(migrationEnabled, \"Migration hasn't started yet, please wait for the team\");\r\n        \r\n        //collect V1\r\n        IERC20(foxV1).transferFrom(msg.sender, deployerAddress, oldToken[msg.sender]);\r\n        \r\n        // send V2\r\n        _tokenTransfer(migratorContractAddress, msg.sender, newToken[msg.sender], false, transferTaxes);\r\n\r\n        // update migration statistics\r\n        totalTokenAvailableForMigration = balanceOf(migratorContractAddress);\r\n        totalV1TokenMigrated += oldToken[msg.sender];\r\n        totalWalletsMigrated++;\r\n\r\n        emit MigrationSuccessful(msg.sender, oldToken[msg.sender], newToken[msg.sender]);\r\n    }\r\n\r\n    function rescueV2TokensFromMigratorContract() external onlyOwner {\r\n        _tokenTransfer(migratorContractAddress, msg.sender, balanceOf(migratorContractAddress), false, transferTaxes);\r\n    }\r\n////////////////////////////////////////////////////////////////////// Migration from FoxV1 end\r\n\r\n////////////////////////////////////////////////////////////////////// Emergency functions \r\n    function rescueBNB() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n    \r\n    function rescueAnyBEP20Tokens(address _tokenAddr) external onlyOwner {\r\n        IERC20(_tokenAddr).transfer(owner(), IERC20(_tokenAddr).balanceOf(address(this)));\r\n    }\r\n////////////////////////////////////////////////////////////////////// Emergency functions end \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbTax\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FoxFinanceV2.Taxes\",\"name\":\"transferTaxes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbTax\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FoxFinanceV2.Taxes\",\"name\":\"buyTaxes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbTax\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FoxFinanceV2.Taxes\",\"name\":\"sellTaxes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePercentage\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FoxFinanceV2.bnbDistribution\",\"name\":\"howAreTheBnbsFromTaxesDistributed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePercentage\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FoxFinanceV2.tokenDistribution\",\"name\":\"howAreTheTokensFromTaxesDistributed\",\"type\":\"tuple\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTokenMigrated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTokensSentOut\",\"type\":\"uint256\"}],\"name\":\"MigrationSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_migrateFoxTokenToFoxV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_migrationPreview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromEverything\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foxV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"howAreTheBnbsFromTaxesDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"howAreTheTokensFromTaxesDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migratorContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioV1V2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbTax\",\"type\":\"uint256\"}],\"internalType\":\"struct FoxFinanceV2.Taxes\",\"name\":\"temp\",\"type\":\"tuple\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLastPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"rescueAnyBEP20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueV2TokensFromMigratorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newCharity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserve\",\"type\":\"uint256\"}],\"name\":\"setBNBDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minimumSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumSwap\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"selectTaxToChange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bnbTax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newCharity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserve\",\"type\":\"uint256\"}],\"name\":\"setTokenDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenAvailableForMigration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalV1TokenMigrated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWalletsMigrated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newCharityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTeamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newReserveAddress\",\"type\":\"address\"}],\"name\":\"updateTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FoxFinanceV2", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2500ad0521ed349f26fc7bec5916831eb65837edc38bdf8a5a9e20f25458bd13"}