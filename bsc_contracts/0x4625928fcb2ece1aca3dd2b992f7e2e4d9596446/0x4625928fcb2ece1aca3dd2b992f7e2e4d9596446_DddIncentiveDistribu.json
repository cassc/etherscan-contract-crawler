{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"DddIncentiveDistributor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IDotDotVoting.sol\\\";\\nimport \\\"IIncentiveVoting.sol\\\";\\nimport \\\"ITokenLocker.sol\\\";\\n\\n\\ncontract DddIncentiveDistributor is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct StreamData {\\n        uint256 start;\\n        uint256 amount;\\n        uint256 claimed;\\n    }\\n\\n    // lp token -> bribe token -> week -> total amount received that week\\n    mapping(address => mapping(address => uint256[65535])) public weeklyIncentiveAmounts;\\n    // user -> lp token -> bribe token -> data about the active stream\\n    mapping(address => mapping(address => mapping(address => StreamData))) activeUserStream;\\n\\n    // lp token -> array of all fee tokens that have been added\\n    mapping(address => address[]) public incentiveTokens;\\n    // private mapping for tracking which addresses were added to `feeTokens`\\n    mapping(address => mapping(address => bool)) seenTokens;\\n\\n    // account earning rewards => receiver of rewards for this account\\n    // if receiver is set to address(0), rewards are paid to the earner\\n    // this is used to aid 3rd party contract integrations\\n    mapping (address => address) public claimReceiver;\\n\\n    // when set to true, other accounts cannot call `claim` on behalf of an account\\n    mapping(address => bool) public blockThirdPartyActions;\\n\\n    IIncentiveVoting public immutable epsVoter;\\n\\n    ITokenLocker public dddLocker;\\n    IDotDotVoting public dddVoter;\\n\\n    // depending on the situation, this contract tracks weeks using\\n    // the periods from `TokenLocker` (starting Monday 00:00:00 UTC)\\n    // and `DotDotVoting` (starting Thursday 00:00:00 UTC)\\n    uint256 immutable public lockingStartTime;\\n    uint256 immutable public votingStartTime;\\n\\n    uint256 constant WEEK = 86400 * 7;\\n\\n    event IncentiveReceived(\\n        address caller,\\n        address indexed lpToken,\\n        address indexed token,\\n        uint256 indexed week,\\n        uint256 amount\\n    );\\n    event IncentiveClaimed(\\n        address caller,\\n        address indexed account,\\n        address receiver,\\n        address indexed lpToken,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    constructor(IIncentiveVoting _epsVoter) {\\n        epsVoter = _epsVoter;\\n        uint256 start = _epsVoter.startTime();\\n        votingStartTime = start;\\n        lockingStartTime = start - 86400 * 3;\\n    }\\n\\n    function setAddresses(ITokenLocker _dddLocker, IDotDotVoting _dddVoter) external onlyOwner {\\n        dddLocker = _dddLocker;\\n        dddVoter = _dddVoter;\\n\\n        renounceOwnership();\\n    }\\n\\n    function setClaimReceiver(address _receiver) external {\\n        claimReceiver[msg.sender] = _receiver;\\n    }\\n\\n    function setBlockThirdPartyActions(bool _block) external {\\n        blockThirdPartyActions[msg.sender] = _block;\\n    }\\n\\n    function getLockingWeek() public view returns (uint256) {\\n        return (block.timestamp - lockingStartTime) / 604800;\\n    }\\n\\n    function getVotingWeek() public view returns (uint256) {\\n        return (block.timestamp - votingStartTime) / 604800;\\n    }\\n\\n    function incentiveTokensLength(address _lpToken) external view returns (uint) {\\n        return incentiveTokens[_lpToken].length;\\n    }\\n\\n    /**\\n        @notice Deposit incentives into the contract\\n        @dev Incentives received in a week will be paid out the following week. An\\n             incentive can be given to all DDD lockers (a \\\"fee\\\"), or to lockers that\\n             voted for a specific LP token in the current week (a \\\"bribe\\\").\\n        @param _lpToken The LP token to incentivize voting for. Set to address(0) if\\n                        you are depositing a fee to distribute to all token lockers.\\n        @param _incentive Address of the incentive token\\n        @param _amount Amount of the token to deposit\\n        @return bool Success\\n     */\\n    function depositIncentive(address _lpToken, address _incentive, uint256 _amount)\\n        external\\n        returns (bool)\\n    {\\n        if (!seenTokens[_lpToken][_incentive]) {\\n            if (_lpToken != address(0)) {\\n                require(epsVoter.isApproved(_lpToken), \\\"lpToken not approved for incentives\\\");\\n            }\\n            if (_amount > 0) {\\n                seenTokens[_lpToken][_incentive] = true;\\n                incentiveTokens[_lpToken].push(_incentive);\\n            }\\n        }\\n        if (_amount > 0) {\\n            uint256 received = IERC20(_incentive).balanceOf(address(this));\\n            IERC20(_incentive).safeTransferFrom(msg.sender, address(this), _amount);\\n            received = IERC20(_incentive).balanceOf(address(this)) - received;\\n            uint256 week = _lpToken == address(0) ? getLockingWeek() : getVotingWeek();\\n            weeklyIncentiveAmounts[_lpToken][_incentive][week] += received;\\n            emit IncentiveReceived(msg.sender, _lpToken, _incentive, week, received);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n        @notice Get an array of claimable amounts of different tokens accrued from protocol fees\\n        @param _user Address to query claimable amounts for\\n        @param _tokens List of tokens to query claimable amounts of\\n     */\\n    function claimable(address _user, address _lpToken, address[] calldata _tokens)\\n        external\\n        view\\n        returns (uint256[] memory amounts)\\n    {\\n        amounts = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            (amounts[i], ) = _getClaimable(_user, _lpToken, _tokens[i]);\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n        @notice Claim an available fee or bribe.\\n        @dev Incentives are claimable up to the end of the previous week. Incentives earned more\\n             than one week ago are released immediately, those from the previous week are streamed.\\n        @param _user Address to claim for\\n        @param _lpToken LP token that was voted on to earn the incentive. Set to address(0)\\n                        to claim general fees for all token lockers.\\n        @param _tokens Array of tokens to claim\\n        @return claimedAmounts Array of amounts claimed\\n     */\\n    function claim(address _user, address _lpToken, address[] calldata _tokens)\\n        external\\n        returns (uint256[] memory claimedAmounts)\\n    {\\n        if (msg.sender != _user) {\\n            require(!blockThirdPartyActions[_user], \\\"Cannot claim on behalf of this account\\\");\\n        }\\n        address receiver = claimReceiver[_user];\\n        if (receiver == address(0)) receiver = _user;\\n        claimedAmounts = new uint256[](_tokens.length);\\n        StreamData memory stream;\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            (claimedAmounts[i], stream) = _getClaimable(_user, _lpToken, token);\\n            activeUserStream[_user][_lpToken][token] = stream;\\n            IERC20(token).safeTransfer(receiver, claimedAmounts[i]);\\n            emit IncentiveClaimed(msg.sender, _user, receiver, _lpToken, token, claimedAmounts[i]);\\n        }\\n        return claimedAmounts;\\n    }\\n\\n    function _getClaimable(address _user, address _lpToken, address _token)\\n        internal\\n        view\\n        returns (uint256, StreamData memory)\\n    {\\n        uint256 claimableWeek = _lpToken == address(0) ? getLockingWeek() : getVotingWeek();\\n        uint256 start = _lpToken == address(0) ? lockingStartTime : votingStartTime;\\n\\n        if (claimableWeek == 0) {\\n            // the first full week hasn't completed yet\\n            return (0, StreamData({start: start, amount: 0, claimed: 0}));\\n        }\\n\\n        // the previous week is the claimable one\\n        claimableWeek -= 1;\\n        StreamData memory stream = activeUserStream[_user][_lpToken][_token];\\n        uint256 lastClaimWeek;\\n        if (stream.start == 0) {\\n            lastClaimWeek = 0;\\n        } else {\\n            lastClaimWeek = (stream.start - start) / WEEK;\\n        }\\n\\n        uint256 amount;\\n        if (claimableWeek == lastClaimWeek) {\\n            // special case: claim is happening in the same week as a previous claim\\n            uint256 previouslyClaimed = stream.claimed;\\n            stream = _buildStreamData(_user, _lpToken, _token, claimableWeek);\\n            amount = stream.claimed - previouslyClaimed;\\n            return (amount, stream);\\n        }\\n\\n        if (stream.start > 0) {\\n            // if there is a partially claimed week, get the unclaimed amount and increment\\n            // `lastClaimWeeek` so we begin iteration on the following week\\n            amount = stream.amount - stream.claimed;\\n            lastClaimWeek += 1;\\n        }\\n\\n        // iterate over weeks that have passed fully without any claims\\n        for (uint256 i = lastClaimWeek; i < claimableWeek; i++) {\\n            (uint256 userWeight, uint256 totalWeight) = _getWeights(_user, _lpToken, i);\\n            if (userWeight == 0) continue;\\n            amount += weeklyIncentiveAmounts[_lpToken][_token][i] * userWeight / totalWeight;\\n        }\\n\\n        // add a partial amount for the active week\\n        stream = _buildStreamData(_user, _lpToken, _token, claimableWeek);\\n\\n        return (amount + stream.claimed, stream);\\n    }\\n\\n    function _buildStreamData(\\n        address _user,\\n        address _lpToken,\\n        address _token,\\n        uint256 _week\\n    ) internal view returns (StreamData memory) {\\n        uint256 start = _lpToken == address(0) ? lockingStartTime : votingStartTime;\\n        start += _week * WEEK;\\n        (uint256 userWeight, uint256 totalWeight) = _getWeights(_user, _lpToken, _week);\\n        uint256 amount;\\n        uint256 claimed;\\n        if (userWeight > 0) {\\n            amount = weeklyIncentiveAmounts[_lpToken][_token][_week] * userWeight / totalWeight;\\n            claimed = amount * (block.timestamp - 604800 - start) / WEEK;\\n        }\\n        return StreamData({start: start, amount: amount, claimed: claimed});\\n    }\\n\\n    function _getWeights(address _user, address _lpToken, uint256 _week)\\n        internal\\n        view\\n        returns (uint256 userWeight, uint256 totalWeight)\\n    {\\n        if (_lpToken == address(0)) {\\n            return dddLocker.weeklyWeight(_user, _week);\\n        } else {\\n            return dddVoter.weeklyVotes(_user, _lpToken, _week);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/**\\n * Based on the OpenZeppelin IER20 interface:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n *\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IDotDotVoting.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\ninterface IDotDotVoting {\\n    function startTime() external view returns (uint256);\\n    function weeklyVotes(address _user, address _token, uint256 _week) external view returns (uint256, uint256);\\n}\"\r\n    },\r\n    \"IIncentiveVoting.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\ninterface IIncentiveVoting {\\n\\n    function NEW_TOKEN_APPROVAL_VOTE_MIN_WEIGHT() external view returns (uint256);\\n    function startTime() external view returns (uint256);\\n    function availableVotes(address _user) external view returns (uint256);\\n    function availableTokenApprovalVotes(address _user, uint256 _voteIndex) external view returns (uint256);\\n    function isApproved(address _token) external view returns (bool);\\n    function approvedTokensLength() external view returns (uint256);\\n    function approvedTokens(uint256) external view returns (address);\\n\\n    /**\\n        @notice Allocate votes toward LP tokens to receive emissions in the following week\\n        @param _tokens List of addresses of LP tokens to vote for\\n        @param _votes Votes to allocate to `_tokens`\\n     */\\n    function vote(address[] calldata _tokens, uint256[] calldata _votes) external;\\n\\n    /**\\n        @notice Create a new vote to enable protocol emissions on a given token\\n        @param _token Token address to create a vote for\\n        @return _voteIndex uint Index value used to reference the vote\\n     */\\n    function createTokenApprovalVote(address _token) external returns (uint256 _voteIndex);\\n\\n    /**\\n        @notice Vote in favor of approving a new token for protocol emissions\\n        @param _voteIndex Array index referencing the vote\\n     */\\n    function voteForTokenApproval(uint256 _voteIndex, uint256 _yesVotes) external;\\n\\n}\\n\"\r\n    },\r\n    \"ITokenLocker.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\n\\ninterface ITokenLocker {\\n\\n    function MAX_LOCK_WEEKS() external view returns (uint256);\\n    function getWeek() external view returns (uint256);\\n    function userWeight(address _user) external view returns (uint256);\\n    function totalWeight() external view returns (uint256);\\n    function weeklyWeight(address _user, uint256 _week) external view returns (uint256, uint256);\\n    function startTime() external view returns (uint256);\\n    function weeklyTotalWeight(uint256 week) external view returns (uint256);\\n    function weeklyWeightOf(address user, uint256 week) external view returns (uint256);\\n\\n    /**\\n        @notice Get data on a user's active token locks\\n        @param _user Address to query data for\\n        @return lockData dynamic array of [weeks until expiration, balance of lock]\\n     */\\n    function getActiveUserLocks(address _user) external view returns (uint256[2][] memory lockData);\\n\\n    /**\\n        @notice Allow or block third-party calls to deposit, withdraw\\n                or claim rewards on behalf of the caller\\n     */\\n    function setBlockThirdPartyActions(bool _block) external;\\n\\n    /**\\n        @notice Deposit tokens into the contract to create a new lock.\\n        @param _user Address to create a new lock for (does not have to be the caller)\\n        @param _amount Amount of tokens to lock. This balance transfered from the caller.\\n        @param _weeks The number of weeks for the lock.\\n     */\\n    function lock(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _weeks\\n    ) external returns (bool);\\n\\n    /**\\n        @notice Extend the length of an existing lock.\\n        @param _amount Amount of tokens to extend the lock for.\\n        @param _weeks The number of weeks for the lock that is being extended.\\n        @param _newWeeks The number of weeks to extend the lock until.\\n     */\\n    function extendLock(\\n        uint256 _amount,\\n        uint256 _weeks,\\n        uint256 _newWeeks\\n    ) external returns (bool);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"DddIncentiveDistributor.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IIncentiveVoting\",\"name\":\"_epsVoter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockThirdPartyActions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claimedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dddLocker\",\"outputs\":[{\"internalType\":\"contract ITokenLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dddVoter\",\"outputs\":[{\"internalType\":\"contract IDotDotVoting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incentive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositIncentive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epsVoter\",\"outputs\":[{\"internalType\":\"contract IIncentiveVoting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockingWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"incentiveTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"incentiveTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenLocker\",\"name\":\"_dddLocker\",\"type\":\"address\"},{\"internalType\":\"contract IDotDotVoting\",\"name\":\"_dddVoter\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_block\",\"type\":\"bool\"}],\"name\":\"setBlockThirdPartyActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setClaimReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyIncentiveAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DddIncentiveDistributor", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004695e50a38e33ea09d1f623ba8a8db24219bb06a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}