{"SourceCode": "// SPDX-License-Identifier: NOLICENSE\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\nlibrary EnumerableSet {\r\n\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                set._indexes[lastvalue] = valueIndex;\r\n            }\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function addic(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ncontract DXHUB is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    mapping(address => bool) private _admin;\r\n    event AdminAdded(address indexed newAdmin);\r\n    event AdminRemoved(address indexed oldAdmin);\r\n\r\n\r\n    EnumerableSet.AddressSet private tokenHoldersEnumSet;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint) public walletToPurchaseTime;\r\n\tmapping (address => uint) public walletToSellime;\t\r\n    mapping (address => bool) private _isFreeFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n\r\n    address[] private _excluded;\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private _tTotal = 10_000_000 * 10 **_decimals;     // Supply do Token = 100m\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n\tuint256 public _maxWallet = 300_000 * 10**_decimals;     // 300k - Initial max Wallet 3%\r\n\r\n    uint256 public _maxInAmount  = 300_000 * 10**_decimals;    // 300K - Initial max buy\r\n    uint256 public _maxOutAmount = 300_000 * 10**_decimals;    // 300k  - Initial max sell / WITHDRAW by useer \r\n\r\n    uint256 public numTokensToSwap = 10_000 * 10**_decimals; // 10k - Swap marketing balance wallet\r\n    uint256 public numTokensToSwapLiquidity = 5_000 * 10**_decimals; // 10k - Swap Liquidity balance wallet\r\n    \r\n    uint256 private ONE_TENTH_SUPPLY = (_rTotal / 100) * 1;\r\n\tuint public sellTime = 0; // 0 s per transaciton\r\n    uint public buyTime = 0; // 0 s per transaciton\r\n\r\n    TotFeesPaidStruct public totFeesPaid;\r\n    string private constant _name = \"DEXHUB\";\r\n    string private constant _symbol = \"DXHUB\";\r\n\r\n\tstruct TotFeesPaidStruct{\r\n        uint256 rfi;\r\n        uint256 marketing;\r\n        uint256 liquidity;\r\n        uint256 burn;\r\n    }\r\n    \r\n    \r\n    struct feeRatesStruct {\r\n        uint256 rfi;  \r\n        uint256 marketing;  \r\n        uint256 liquidity; \r\n        uint256 burn; \r\n    }\r\n\r\n    struct balances {\r\n        uint256 marketing_balance;\r\n        uint256 lp_balance;\r\n    }\r\n\r\n    balances public contractBalance; \r\n    \r\n    feeRatesStruct public buyRates = feeRatesStruct(\r\n     {rfi: 0,\r\n      marketing: 285,\r\n      liquidity: 5,\r\n      burn: 10\r\n    });\r\n    \r\n    feeRatesStruct public sellRates = feeRatesStruct(\r\n     {rfi: 0,\r\n      marketing: 285,\r\n      liquidity: 5,\r\n      burn: 10\r\n    });\r\n\r\n    feeRatesStruct private appliedFees;\r\n\r\n    struct valuesFromGetValues{\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rRfi;\r\n        uint256 rMarketing;\r\n        uint256 rLiquidity;\r\n        uint256 rBurn;\r\n        uint256 tTransferAmount;\r\n        uint256 tRfi;\r\n        uint256 tMarketing;\r\n        uint256 tLiquidity;\r\n        uint256 tBurn;\r\n    }\r\n\r\n    IUniswapV2Router02 public PancakeSwapV2Router;\r\n    address public pancakeswapV2Pair;\r\n    address payable private projectAddress;\r\n    address  private address_dex;\r\n    address  private address_pv;\r\n    bool public Trading = false;\r\n    bool public change_sw = true;\r\n    bool inSwapAndLiquify;\r\n    bool private _transferForm = true;\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event LiquidityAdded(uint256 tokenAmount, uint256 bnbAmount);\r\n    event EventBurnSupply( address from, uint256 amount);\r\n    event ChangeMxIn( uint256 maxInPercent);\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n        constructor (\r\n            address _address_m1,\r\n            address _address_m2,\r\n            address _address_m3,\r\n            address _address_dx1, \r\n            address _address_dx2, \r\n            address _address_dx3, \r\n            address _address_dx4, \r\n            address _address_dx5, \r\n            address _address_cx, \r\n            address _address_pv,\r\n            uint256 _nSwapM,\r\n            uint256 _nSwapL\r\n            ) \r\n             {\r\n            numTokensToSwap = _nSwapM * 10**_decimals;  \r\n            numTokensToSwapLiquidity = _nSwapL * 10**_decimals; \r\n            address_dex = _address_dx1; _isFreeFromFee[address_dex] = true;\r\n            projectAddress = payable(_address_m1); _isFreeFromFee[projectAddress] = true;\r\n            _rOwned[address(_address_m1)] = _rOwned[address(_address_m1)] + ONE_TENTH_SUPPLY*1;_isFreeFromFee[_address_m1] = true;\r\n            _rOwned[address(_address_m2)] = _rOwned[address(_address_m2)] + ONE_TENTH_SUPPLY*1;_isFreeFromFee[_address_m2] = true;\r\n            _rOwned[address(_address_m3)] = _rOwned[address(_address_m3)] + ONE_TENTH_SUPPLY*3;_isFreeFromFee[_address_m3] = true;\r\n            _rOwned[address(_address_dx1)]  = _rOwned[address(_address_dx1)] + ONE_TENTH_SUPPLY*2;_isFreeFromFee[_address_dx1] = true;\r\n            _rOwned[address(_address_dx2)]  = _rOwned[address(_address_dx2)] + ONE_TENTH_SUPPLY*2;_isFreeFromFee[_address_dx2] = true;\r\n            _rOwned[address(_address_dx3)]  = _rOwned[address(_address_dx3)] + ONE_TENTH_SUPPLY*2;_isFreeFromFee[_address_dx3] = true;\r\n            _rOwned[address(_address_dx4)]  = _rOwned[address(_address_dx4)] + ONE_TENTH_SUPPLY*2;_isFreeFromFee[_address_dx4] = true;\r\n            _rOwned[address(_address_dx5)]  = _rOwned[address(_address_dx5)] + ONE_TENTH_SUPPLY*2;_isFreeFromFee[_address_dx5] = true;\r\n\r\n            _rOwned[address(_address_cx)]  = _rOwned[address(_address_cx)] + ONE_TENTH_SUPPLY*10;_isFreeFromFee[_address_cx] = true;\r\n            _rOwned[address(_address_pv)]  = _rOwned[address(_address_pv)] + ONE_TENTH_SUPPLY*75;_isFreeFromFee[_address_pv] = true;\r\n\r\n        IUniswapV2Router02 _PancakeSwapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //BSC mainnet\r\n \r\n        pancakeswapV2Pair = IUniswapV2Factory(_PancakeSwapV2Router.factory())\r\n            .createPair(address(this), _PancakeSwapV2Router.WETH());\r\n        PancakeSwapV2Router = _PancakeSwapV2Router;\r\n        _isFreeFromFee[owner()] = true;             \r\n        _isFreeFromFee[address(this)] = true;       \r\n        _isFreeFromFee[address(0xDead)] = true;\r\n        _isExcluded[address(this)] = true;\r\n        _excluded.push(address(this));\r\n        _isExcluded[pancakeswapV2Pair] = true;\r\n        _excluded.push(pancakeswapV2Pair);\r\n    }\r\n\r\n    function getFromLastBuy(address wallet) public view returns (uint) {\r\n        return walletToPurchaseTime[wallet];\r\n    }\r\n\t\r\n    function getFromLastSell(address walletSell) public view returns (uint) {\r\n        return walletToSellime[walletSell];\r\n    }\r\n\r\n            modifier onlyOwnerOrAdmin() {\r\n            require(owner() == _msgSender() || isAdmin(_msgSender()), \"caller is not the owner or the admin\");\r\n            _;\r\n        }\r\n\r\n    function isAdmin(address account) public view returns (bool) {\r\n        return _admin[account];\r\n    }\r\n\r\n    function addAdmin(address account) public onlyOwnerOrAdmin {\r\n        _admin[account] = true;\r\n        _isFreeFromFee[account] = true;\r\n        emit AdminAdded(account);\r\n    }\r\n\r\n    function removeAdmin(address account) public onlyOwnerOrAdmin {\r\n        _admin[account] = false;\r\n        _isFreeFromFee[account] = false;\r\n        emit AdminRemoved(account);\r\n    }\r\n    \r\n    function setBuyRates(uint256 rfi, uint256 marketing, uint256 liquidity, uint256 burn) public onlyOwnerOrAdmin {\r\n        buyRates.rfi = rfi;\r\n        buyRates.marketing = marketing;\r\n        buyRates.liquidity = liquidity;\r\n        buyRates.burn = burn;\r\n    }\r\n    \r\n    function setSellRates(uint256 rfi, uint256 marketing, uint256 liquidity, uint256 burn) public onlyOwnerOrAdmin {\r\n        sellRates.rfi = rfi;\r\n        sellRates.marketing = marketing;\r\n        sellRates.liquidity = liquidity;\r\n        sellRates.burn = burn;\r\n    }\r\n\t\r\n    function setprojectAddress(address payable  _projectAddress) public onlyOwnerOrAdmin {\r\n        _isFreeFromFee[projectAddress] = false;\r\n        removeAdmin(projectAddress);\r\n        projectAddress = _projectAddress;\r\n        addAdmin(projectAddress);\r\n        _isFreeFromFee[projectAddress] = true;\r\n    }\r\n\r\n    function getprojectAddress() public view returns (address) {\r\n        return projectAddress;\r\n    }\r\n\r\n\r\n    function setdexAddress(address payable  _dexAddress) public onlyOwnerOrAdmin {\r\n        _isFreeFromFee[address_dex] = false;\r\n        address_dex = _dexAddress;\r\n        _isFreeFromFee[address_dex] = true;\r\n\r\n    }\r\n    function getdexAddress() public view returns (address) {\r\n        return address_dex;\r\n    }\r\n\r\n\r\n    function lockToBuyOrSellForTime(uint256 lastBuyOrSellTime, uint256 lockTime) public view returns (bool) {\r\n        \r\n        if( lastBuyOrSellTime == 0 ) return true;\r\n        \r\n        uint256 crashTime = block.timestamp - lastBuyOrSellTime;\r\n        \r\n        if( crashTime >= lockTime ) return true;\r\n        \r\n        return false;\r\n    }\r\n\r\n    function setBuyTime(uint timeBetweenPurchases) public onlyOwnerOrAdmin {\r\n        buyTime = timeBetweenPurchases;\r\n    }\r\n\r\n    function setSellTime(uint timeBetween) public onlyOwnerOrAdmin {\r\n        sellTime = timeBetween;\r\n    }\t\t\r\n    \r\n    function setTokenToSwap(uint256 top) public onlyOwnerOrAdmin { \r\n        numTokensToSwap = top * 10**_decimals; \r\n    }\r\n   \r\n   function setTokenToSwapLiquidity(uint256 top) public onlyOwnerOrAdmin { \r\n        numTokensToSwapLiquidity = top * 10**_decimals; \r\n    }\r\n    \r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return Trading;\r\n    }\r\n    \r\n    function TrandingOn(bool _enable) public onlyOwnerOrAdmin {\r\n        Trading = _enable;\r\n    }\r\n    function changeSW(bool _enable) public onlyOwnerOrAdmin {\r\n        change_sw = _enable;\r\n    }\r\n    \r\n    function settransform(bool _enable) public onlyOwnerOrAdmin {\r\n        _transferForm = _enable;\r\n    }\r\n    \r\n    function setMaxInPercent(uint256 maxInPercent) public onlyOwnerOrAdmin {\r\n        _maxInAmount = maxInPercent * 10**_decimals;\r\n        emit ChangeMxIn(maxInPercent);\r\n    }\r\n\r\n    function setMaxOutPercent(uint256 maxOutPercent) public onlyOwnerOrAdmin {\r\n        _maxOutAmount = maxOutPercent * 10**_decimals;\r\n    }\r\n\t\r\n    function setMaxWallet(uint256 maxWalletPercent) public onlyOwnerOrAdmin {\r\n        _maxWallet = maxWalletPercent * 10**_decimals;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return _transferForm;\t\t\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender]+addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferRfi) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount/currentRate;\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwnerOrAdmin() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function excludeFromAll(address account) public onlyOwnerOrAdmin() {\r\n        if(!_isExcluded[account])\r\n        {\r\n        _isExcluded[account] = true;\r\n         if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _excluded.push(account);\r\n        }\r\n        _isFreeFromFee[account] = true;\r\n        tokenHoldersEnumSet.remove(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwnerOrAdmin {\r\n        _isFreeFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwnerOrAdmin {\r\n        _isFreeFromFee[account] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isFreeFromFee[account];\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwnerOrAdmin {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee);\r\n\r\n        (to_return.rAmount,to_return.rTransferAmount,to_return.rRfi,to_return.rMarketing,to_return.rLiquidity,to_return.rBurn) = _getRValues(to_return, tAmount, takeFee, _getRate());\r\n\r\n        return to_return;\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory s) {\r\n\r\n        if(!takeFee) {\r\n          s.tTransferAmount = tAmount;\r\n          return s;\r\n        }\r\n        s.tRfi = tAmount*appliedFees.rfi/1000;\r\n        s.tMarketing = tAmount*appliedFees.marketing/1000;\r\n        s.tLiquidity = tAmount*appliedFees.liquidity/1000;\r\n        s.tBurn = tAmount*appliedFees.burn/1000;\r\n        s.tTransferAmount = tAmount-s.tRfi -s.tMarketing -s.tLiquidity -s.tBurn; \r\n        return s;\r\n    }\r\n\r\n    function burnSupply(uint256 amount) public onlyOwnerOrAdmin {\r\n        address from =  _msgSender();\r\n        require(amount <= balanceOf(from),\"You are trying to transfer more than you balance\");\r\n        totFeesPaid.burn+=amount;\r\n        _tTotal = _tTotal-amount;\r\n        _rTotal = _rTotal-amount;   \r\n        _rOwned[_msgSender()] = _rOwned[_msgSender()]-amount;\r\n        emit EventBurnSupply(from, amount); \r\n\r\n    }\r\n\r\n\r\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rRfi, uint256 rMarketing, uint256 rLiquidity, uint256 rBurn) {\r\n        rAmount = tAmount*currentRate;\r\n\r\n        if(!takeFee) {\r\n          return(rAmount, rAmount, 0,0,0,0);\r\n        }\r\n\r\n        rRfi= s.tRfi*currentRate;\r\n        rMarketing= s.tMarketing*currentRate;\r\n        rLiquidity= s.tLiquidity*currentRate;\r\n        rBurn= s.tBurn*currentRate;\r\n\r\n        rTransferAmount= rAmount- rRfi-rMarketing-rLiquidity-rBurn;\r\n\r\n        return ( rAmount,  rTransferAmount,  rRfi,  rMarketing,  rLiquidity,  rBurn);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply/tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply-_rOwned[_excluded[i]];\r\n            tSupply = tSupply-_tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal/_tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\r\n        _rTotal = _rTotal-rRfi;\r\n        totFeesPaid.rfi+=tRfi;\r\n    }\r\n\r\n    function _takeMarketing(uint256 rMarketing, uint256 tMarketing) private {\r\n        contractBalance.marketing_balance+=tMarketing;\r\n        totFeesPaid.marketing+=tMarketing;\r\n        _rOwned[address(this)] = _rOwned[address(this)]+rMarketing;\r\n        if(_isExcluded[address(this)])\r\n        {\r\n            _tOwned[address(this)] = _tOwned[address(this)]+tMarketing;\r\n        }\r\n    }\r\n    \r\n    function _takeLiquidity(uint256 rLiquidity,uint256 tLiquidity) private {\r\n        contractBalance.lp_balance+=tLiquidity;\r\n        totFeesPaid.liquidity+=tLiquidity;\r\n        \r\n        _rOwned[address(this)] = _rOwned[address(this)]+rLiquidity;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)]+tLiquidity;\r\n    }\r\n\r\n    function _takeBurn(uint256 rBurn, uint256 tBurn) private {\r\n        totFeesPaid.burn+=tBurn;\r\n        _tTotal = _tTotal-tBurn;\r\n        _rTotal = _rTotal-rBurn;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount <= balanceOf(from),\"You are trying to transfer more than you balance\");\r\n        \r\n\t\tif(Trading || from == owner())\r\n        {\r\n            if(from != owner() && to != owner() && to != address(1) && to != pancakeswapV2Pair){\r\n                uint256 contractBalanceTo = balanceOf(to);\r\n                require(contractBalanceTo + amount <= _maxWallet, \"Transfer amount exceeds the maxWallet\"); \r\n            }\r\n\r\n            if (contractBalance.lp_balance>= numTokensToSwapLiquidity && !inSwapAndLiquify && from != pancakeswapV2Pair && swapAndLiquifyEnabled) {\r\n                swapAndLiquify(numTokensToSwapLiquidity);\r\n            }\r\n\r\n            if (contractBalance.marketing_balance>= numTokensToSwap && !inSwapAndLiquify && from != pancakeswapV2Pair && swapAndLiquifyEnabled) {\r\n                if(change_sw) \r\n                 { swapAndSendToMarketing(contractBalance.marketing_balance-1);}\r\n                else{ swapAndSendToMarketing(numTokensToSwap);}\r\n            }       \r\n            \r\n            _tokenTransfer(from, to, amount, !(_isFreeFromFee[from] || _isFreeFromFee[to]));\r\n        } else {\r\n            // If any holder tries to make a sale or transfer before enabling the contract, the transferred tokens fail. This function will be disabled after launch\r\n            //   and ensures tokens can be transferred in the pre-sale phase\r\n        \tif(from != owner() || to != owner() || to != address_dex || from != address_dex || from != address_pv ||  to != address(1))\r\n            {\t\r\n                        require(Trading, \"DXHUB: Trade off\");\r\n            }\r\n            else \r\n            {\r\n\t    \t    _tokenTransfer(from, to, amount, !(_isFreeFromFee[from] || _isFreeFromFee[to]));\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private {\r\n        if(takeFee) {\r\n                if(sender == pancakeswapV2Pair) {\r\n                \r\n                if(sender != owner() && recipient != owner() && recipient != address(1)){\r\n\t\t\t\t\trequire(tAmount <= _maxInAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n                    bool blockedTimeLimitB = lockToBuyOrSellForTime(getFromLastBuy(sender),buyTime);\r\n                    require(blockedTimeLimitB, \"blocked Time Limit\");\r\n                    walletToPurchaseTime[recipient] = block.timestamp;\t\t\t\t\t\r\n                }\r\n                appliedFees = buyRates;\r\n            } else {\r\n                if(sender != owner() && recipient != owner() && recipient != address(1)){\r\n\t\t\t\t    require(tAmount <= _maxOutAmount, \"Transfer amount exceeds the maxRxAmount.\");\r\n                    //Check time limit for in-game withdrawals\r\n                    bool blockedTimeLimitS = lockToBuyOrSellForTime(getFromLastSell(sender), sellTime);\r\n                    require(blockedTimeLimitS, \"blocked Time Limit\");\r\n                    walletToSellime[sender] = block.timestamp;\t\t\t\t\t\r\n                }\r\n\r\n                appliedFees = sellRates;\r\n                appliedFees.liquidity = appliedFees.liquidity;\r\n                                \r\n            }\r\n\r\n        }\r\n\r\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n                _tOwned[sender] = _tOwned[sender]-tAmount;\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n                _tOwned[recipient] = _tOwned[recipient]+s.tTransferAmount;\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n                _tOwned[sender] = _tOwned[sender]-tAmount;\r\n                _tOwned[recipient] = _tOwned[recipient]+s.tTransferAmount;\r\n        }\r\n\r\n        _rOwned[sender] = _rOwned[sender]-s.rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient]+s.rTransferAmount;\r\n\r\n        if(takeFee)\r\n        {\r\n        _reflectRfi(s.rRfi, s.tRfi);\r\n        _takeMarketing(s.rMarketing,s.tMarketing);\r\n        _takeLiquidity(s.rLiquidity,s.tLiquidity);\r\n        _takeBurn(s.rBurn,s.tBurn);\r\n        \r\n        emit Transfer(sender, address(this), s.tMarketing+s.tLiquidity);\r\n        \r\n        }\r\n      \r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n        tokenHoldersEnumSet.addic(recipient);\r\n\r\n        if(balanceOf(sender)==0)\r\n        tokenHoldersEnumSet.remove(sender);\r\n\t\t\r\n    }\r\n\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        \r\n        uint256 toSwap = contractTokenBalance/2;\r\n        uint256 tokensToAddLiquidityWith = contractTokenBalance-toSwap;\r\n        \r\n        uint256 tokensBalance = balanceOf(address(this));\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForBNB(toSwap);\r\n\r\n        uint256 bnbToAddLiquidityWith = address(this).balance-initialBalance;\r\n        \r\n        addLiquidity(tokensToAddLiquidityWith, bnbToAddLiquidityWith);\r\n        uint256 tokensSwapped = tokensBalance - balanceOf(address(this));\r\n        contractBalance.lp_balance-=tokensSwapped;\r\n        \r\n    }\r\n\r\n    function swapAndSendToMarketing(uint256 tokenAmount) private lockTheSwap {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = PancakeSwapV2Router.WETH();\r\n\r\n        if(allowance(address(this), address(PancakeSwapV2Router)) < tokenAmount) {\r\n          _approve(address(this), address(PancakeSwapV2Router), ~uint256(0));\r\n        }\r\n        contractBalance.marketing_balance-=tokenAmount;\r\n        PancakeSwapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            projectAddress,\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = PancakeSwapV2Router.WETH();\r\n\r\n        if(allowance(address(this), address(PancakeSwapV2Router)) < tokenAmount) {\r\n          _approve(address(this), address(PancakeSwapV2Router), ~uint256(0));\r\n        }\r\n\r\n        PancakeSwapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n\r\n        PancakeSwapV2Router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        emit LiquidityAdded(tokenAmount, bnbAmount);\r\n    }\r\n    \r\n    function withdraw() onlyOwner public {\r\n      uint256 balance = address(this).balance;\r\n      payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_m1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address_m2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address_m3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address_dx1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address_dx2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address_dx3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address_dx4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address_dx5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address_cx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address_pv\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nSwapM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nSwapL\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxInPercent\",\"type\":\"uint256\"}],\"name\":\"ChangeMxIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventBurnSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PancakeSwapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Trading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"TrandingOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxInAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxOutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"changeSW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"change_sw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getFromLastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSell\",\"type\":\"address\"}],\"name\":\"getFromLastSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getdexAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getprojectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastBuyOrSellTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"lockToBuyOrSellForTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToSwapLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"name\":\"setBuyRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeBetweenPurchases\",\"type\":\"uint256\"}],\"name\":\"setBuyTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxInPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxInPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxOutPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxOutPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"name\":\"setSellRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeBetween\",\"type\":\"uint256\"}],\"name\":\"setSellTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"top\",\"type\":\"uint256\"}],\"name\":\"setTokenToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"top\",\"type\":\"uint256\"}],\"name\":\"setTokenToSwapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dexAddress\",\"type\":\"address\"}],\"name\":\"setdexAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_projectAddress\",\"type\":\"address\"}],\"name\":\"setprojectAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"settransform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToPurchaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToSellime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DXHUB", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001f1bf529ab1d5bf6758dc410034331a73f3c5a0100000000000000000000000066bc1225d859d68a5c7a655053f90d7304b7a2ec0000000000000000000000003c1ff19935cbcde08574152200ebccbf86954e9d000000000000000000000000ad9733e8bb2574085bfe95187f9a46c664d5dc6a0000000000000000000000001c430702dd503251ad1ecff46569552659850962000000000000000000000000a956a53f01672f2416a30430d47c6c5eb6c50d680000000000000000000000001e529232b01d337900f3b00a8085ce7b0b738593000000000000000000000000f2205f7af081f75e8d63a4ace6121a075c527f09000000000000000000000000baf0cb0266f792f6ec844563a0e7e447abe9f53d000000000000000000000000f86110d4c6c6928a730487929349d1153f42d03d000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000009c4", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b3f2ece76a5a62969e4070b7836d064e62dfa84341a6f51779f18baf5bcb04c8"}