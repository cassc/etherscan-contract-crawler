{"SourceCode": "/**\r\n* This smart contract will initially hold 20% of Tweetcoin supply. 50 weeks to release all tokens (0.4% of total supply each week). Once that is depleted we will reward our TweetToEarn program with other currency.\r\n* 0.2% will be used to reward community members who take part of our TweetToEarn program. The remaining 0.2% will be used exclusively for centralized exchange listings, bridges, liquidity pools in the future.\r\n* This contract can only withdraw tokens once per week and can't be modified after vesting have began. \r\n* Creator: Yoshiki // Website: https://Tweetcoin.us // Main social: https://t.me/tweetcoinofficial\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract TweetToEarn {\r\n    address public token;  // Address of the token contract\r\n    address public owner;  // Address of the contract owner\r\n    \r\n    uint256 private totalTokens;  // Total number of tokens sent to the contract\r\n    uint256 public startTime;  // Start time of the vesting period in Unix (https://www.unixtimestamp.com/)\r\n    uint256 public releaseInterval;  // Time interval between releases in seconds\r\n    uint256 public numReleases;  // Total number of releases\r\n    uint256 public releasedWeeks;  // Number of releases / weeks released so far\r\n    \r\n    uint256 private constant ONE_WEEK = 1 weeks;\r\n    uint256 private constant DECIMALS = 18;  // Number of decimal places for the token\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function.\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function setTokenAddress(address _token) external onlyOwner {\r\n        require(token == address(0), \"Token address has already been set.\");\r\n        require(_token != address(0), \"Invalid token address.\");\r\n        \r\n        token = _token;\r\n        \r\n        // Approve maximum token allowance on deployment\r\n        IERC20(_token).approve(address(this), type(uint256).max);\r\n    }\r\n    \r\n    function startVesting() external onlyOwner {\r\n        require(totalTokens == 0, \"Vesting has already started.\");\r\n        require(token != address(0), \"Token address has not been set.\");\r\n        \r\n        totalTokens = IERC20(token).balanceOf(address(this));  // Retrieve token balance of the contract\r\n        startTime = block.timestamp;\r\n        releaseInterval = ONE_WEEK;\r\n        numReleases = 50;  // 50 weeks until all tokens have been released\r\n        releasedWeeks = 0; // Starting on week 0\r\n        \r\n        require(totalTokens > 0, \"No tokens available for vesting.\");\r\n    }\r\n\r\n    // Withdraw released tokens (Total tokens / total weeks)\r\n    function withdrawTokens() external onlyOwner {\r\n    require(totalTokens > 0, \"Vesting has not started yet.\");\r\n\r\n    uint256 currentRelease = (block.timestamp - startTime) / releaseInterval;\r\n    uint256 tokensToRelease = totalTokens / numReleases;\r\n\r\n    // Ensure there are tokens to release and the release is due\r\n    require(currentRelease > releasedWeeks, \"No tokens available for release.\");\r\n\r\n    uint256 tokensAvailable;\r\n    if (currentRelease >= numReleases) {\r\n        // Vesting period has ended, withdraw remaining tokens\r\n        tokensAvailable = IERC20(token).balanceOf(address(this));\r\n    } else {\r\n        tokensAvailable = (currentRelease - releasedWeeks) * tokensToRelease;\r\n    }\r\n\r\n    require(tokensAvailable > 0, \"No tokens available for withdrawal.\");\r\n\r\n    require(IERC20(token).transfer(owner, tokensAvailable), \"Token transfer failed.\");\r\n\r\n    releasedWeeks = currentRelease;\r\n}\r\n\r\n\r\n    \r\n    function getContractBalance() external view returns (uint256) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n    \r\n    function getNextReleaseTime() external view returns (uint256) {\r\n        require(totalTokens > 0, \"Vesting has not started yet.\");\r\n        \r\n        uint256 currentRelease = (block.timestamp - startTime) / releaseInterval;\r\n        uint256 nextRelease = (currentRelease + 1) * releaseInterval + startTime;\r\n        \r\n        return nextRelease;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numReleases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasedWeeks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TweetToEarn", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://57342153fa7d14ae18d2e91bfe31d64662b7df31907f5226f73f779dae801d07"}