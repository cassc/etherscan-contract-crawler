{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/current/BakedBeansV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\n    ,---,.                   ,-.                                  ,---,.                                                       \\r\\n  ,'  .'  \\\\              ,--/ /|                 ,---,          ,'  .'  \\\\                                                      \\r\\n,---.' .' |            ,--. :/ |               ,---.'|        ,---.' .' |                             ,---,                    \\r\\n|   |  |: |            :  : ' /                |   | :        |   |  |: |                         ,-+-. /  | .--.--.           \\r\\n:   :  :  /  ,--.--.   |  '  /      ,---.      |   | |        :   :  :  /   ,---.     ,--.--.    ,--.'|'   |/  /    '          \\r\\n:   |    ;  /       \\\\  '  |  :     /     \\\\   ,--.__| |        :   |    ;   /     \\\\   /       \\\\  |   |  ,\\\"' |  :  /`./          \\r\\n|   :     \\\\.--.  .-. | |  |   \\\\   /    /  | /   ,'   |        |   :     \\\\ /    /  | .--.  .-. | |   | /  | |  :  ;_            \\r\\n|   |   . | \\\\__\\\\/: . . '  : |. \\\\ .    ' / |.   '  /  |        |   |   . |.    ' / |  \\\\__\\\\/: . . |   | |  | |\\\\  \\\\    `.         \\r\\n'   :  '; | ,\\\" .--.; | |  | ' \\\\ \\\\'   ;   /|'   ; |:  |        '   :  '; |'   ;   /|  ,\\\" .--.; | |   | |  |/  `----.   \\\\        \\r\\n|   |  | ; /  /  ,.  | '  : |--' '   |  / ||   | '/  '        |   |  | ; '   |  / | /  /  ,.  | |   | |--'  /  /`--'  /        \\r\\n|   :   / ;  :   .'   \\\\;  |,'    |   :    ||   :    :|        |   :   /  |   :    |;  :   .'   \\\\|   |/     '--'.     /         \\r\\n|   | ,'  |  ,     .-./'--'       \\\\   \\\\  /  \\\\   \\\\  /          |   | ,'    \\\\   \\\\  / |  ,     .-./'---'        `--'---'          \\r\\n`----'     `--`---'                `----'    `----'           `----'       `----'   `--`---'                                   \\r\\nBakedBeansV3 - BSC BNB Miner\\r\\nDeveloped by https://0xweb3.dev/\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./BasicLibraries/SafeMath.sol\\\";\\r\\nimport \\\"./BasicLibraries/Ownable.sol\\\";\\r\\nimport \\\"./BasicLibraries/IBEP20.sol\\\";\\r\\nimport \\\"./Libraries/MinerBasic.sol\\\";\\r\\nimport \\\"./Libraries/Airdrop.sol\\\";\\r\\nimport \\\"./Libraries/InvestorsManager.sol\\\";\\r\\nimport \\\"./Libraries/BeanMinerConfigIface.sol\\\";\\r\\nimport \\\"./Libraries/EmergencyWithdrawal.sol\\\";\\r\\nimport \\\"./Libraries/Testable.sol\\\";\\r\\nimport \\\"./Libraries/Whitelist.sol\\\";\\r\\nimport \\\"./Libraries/BakedBeansV3Iface.sol\\\";\\r\\nimport \\\"./Libraries/BeanBNBIface.sol\\\";\\r\\n\\r\\ncontract BakedBeansV3 is Ownable, MinerBasic, Airdrop, InvestorsManager, EmergencyWithdrawal, Testable, Whitelist {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMath for uint64;\\r\\n    using SafeMath for uint32;\\r\\n    using SafeMath for uint8;\\r\\n\\r\\n    //External config iface (Roi events)\\r\\n    BeanMinerConfigIface reIface;\\r\\n\\r\\n    //From milkfarmV1\\r\\n    mapping (address => uint256[]) private sellsTimestamps;\\r\\n    mapping (address => uint256) private customSellTaxes;\\r\\n\\r\\n    constructor(address _airdropToken, address _marketingAdd, address _recIface, address timerAddr) Testable(timerAddr) {\\r\\n        recAdd = payable(msg.sender);\\r\\n        marketingAdd = payable(_marketingAdd);\\r\\n        airdropToken = _airdropToken;\\r\\n        reIface = BeanMinerConfigIface(address(_recIface));\\r\\n    }\\r\\n\\r\\n    //#region MIGRATION\\r\\n    error NotEnoughBalanceMigrated(uint256 remaningBal);\\r\\n    event migratedBal(uint256 oldCABBal, uint256 oldCAABal, uint256 newCABBal, uint256 newCAABal);\\r\\n    BakedBeansV3Iface private _minerMigrate;\\r\\n    BeanBNBIface private _beanBNB;\\r\\n    bool private buySellTaxDisabled = false;\\r\\n    uint256 private marketBeansRestore = 0;\\r\\n    function presetMigration(address _miner, address _bbnb) public onlyOwner {\\r\\n        _minerMigrate = BakedBeansV3Iface(payable(_miner));\\r\\n        _beanBNB = BeanBNBIface(payable(_bbnb));        \\r\\n    }\\r\\n    function minerInvest() public payable onlyOwner {\\r\\n        try _minerMigrate.hireBeans{ value: msg.value }(address(0)) {}catch Error(string memory _error){\\r\\n            revert(_error);\\r\\n        }\\r\\n    }\\r\\n    function minerClaim(uint256 rMint) public payable onlyOwner {\\r\\n       //Mint reward token\\r\\n        _minerMigrate.openToPublic(true);\\r\\n        _beanBNB.approveMax(address(_minerMigrate));\\r\\n        _beanBNB.mintPresale(address(this), rMint);\\r\\n        _minerMigrate.claimBeans(address(0));\\r\\n        _minerMigrate.openToPublic(true);\\r\\n    }\\r\\n    function performMigration(uint32 minPcMigration, uint32 rPercentage) public onlyOwner {\\r\\n        marketBeansRestore = _minerMigrate.getMarketRewards();\\r\\n\\r\\n        //Extract TLV        \\r\\n        _minerMigrate.setRewardsPercentage(rPercentage);    \\r\\n        uint256 oldBal = address(_minerMigrate).balance;\\r\\n        uint256 oldBalCC = address(this).balance;\\r\\n\\r\\n        _minerMigrate.openToPublic(true);\\r\\n        _minerMigrate.sellRewards();\\r\\n        _minerMigrate.openToPublic(false);\\r\\n        emit migratedBal(oldBal, address(_minerMigrate).balance, oldBalCC, address(this).balance);\\r\\n        if(address(this).balance < oldBal.mul(minPcMigration).div(100)) {\\r\\n            revert NotEnoughBalanceMigrated(address(_minerMigrate).balance);\\r\\n        }           \\r\\n    }\\r\\n    function performMigration2(address [] memory investors, address [] memory referrals) public onlyOwner {\\r\\n        require(investors.length == referrals.length, \\\"Invalid data\\\");\\r\\n        _minerMigrate.openToPublic(true);\\r\\n\\r\\n        //Perform fake hire\\r\\n        buySellTaxDisabled = true;        \\r\\n        for(uint256 _i = 0; _i < investors.length; _i++) {\\r\\n            if(getInvestorData(investors[_i]).investment == 0) { //\\\"You can only migrate address one time\\\");\\r\\n                investor memory inv = InvestorsManager(address(_minerMigrate)).getInvestorData(investors[_i]);\\r\\n                _hireBeans(referrals[_i], investors[_i], inv.investment); //set referrals and invested amounts etc\\r\\n                setInvestorFromMigration(inv);\\r\\n            }\\r\\n        }\\r\\n        marketRewards = marketBeansRestore;\\r\\n        buySellTaxDisabled = false;\\r\\n\\r\\n        _minerMigrate.openToPublic(false);\\r\\n    }\\r\\n    //#endregion\\r\\n\\r\\n    //CONFIG////////////////\\r\\n    function setAirdropToken(address _airdropToken) public override onlyOwner { airdropToken =_airdropToken; }\\r\\n    function enableClaim(bool _enableClaim) public override onlyOwner { claimEnabled = _enableClaim; }\\r\\n    function openToPublic(bool _openPublic) public override onlyOwner { \\r\\n        openPublic = _openPublic; \\r\\n        removeEditWhitelist();\\r\\n    }    \\r\\n    function enableReferralMode(bool _enable) public onlyOwner { referralMode = _enable; }\\r\\n    function setExternalConfigAddress(address _recIface) public onlyOwner { reIface = BeanMinerConfigIface(address(_recIface)); }\\r\\n    function enableWhitelist(bool _enable) public override onlyOwner {\\r\\n        require(!whitelist_removed, \\\"Whitelist already removed\\\");\\r\\n        whitelist_enabled = _enable;\\r\\n    } \\r\\n    function removeWhitelist() public override onlyOwner {\\r\\n        whitelist_removed = true;\\r\\n        whitelist_enabled = false;\\r\\n    }\\r\\n    function removeEditWhitelist() public override onlyOwner { whitelist_editable = false; }\\r\\n    function setWhitelistedAddress(address _address, bool _whitelisted) public override onlyOwner {\\r\\n        require(whitelist_editable, \\\"You can not edit whitelist anymore\\\");\\r\\n        require(isAddressWhitelisted(_address) != _whitelisted, \\\"There is no changes\\\");\\r\\n        addressesWhitelisted[_address] = _whitelisted;\\r\\n        if(_whitelisted) {\\r\\n            whitelist_currentSize++;\\r\\n        } else {\\r\\n            whitelist_currentSize--;\\r\\n        }\\r\\n        require(whitelist_maxSize >= whitelist_currentSize, \\\"You can not add more addresses to the whitelist\\\");\\r\\n    }\\r\\n    function setWhitelistAddresses(address [] memory _addresses, bool [] memory _whitelisteds) public override onlyOwner {\\r\\n        require(whitelist_editable, \\\"You can not edit whitelist anymore\\\");\\r\\n\\r\\n        for(uint256 _i = 0; _i < _addresses.length; _i++) {\\r\\n            address _address = _addresses[_i];\\r\\n            bool _whitelisted = _whitelisteds[_i];\\r\\n            //require(isAddressWhitelisted(_address) != _whitelisted, \\\"There is no changes\\\");\\r\\n            addressesWhitelisted[_address] = _whitelisted;\\r\\n            if(_whitelisted) {\\r\\n                whitelist_currentSize++;\\r\\n            } else {\\r\\n                whitelist_currentSize--;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(whitelist_maxSize >= whitelist_currentSize, \\\"You can not add more addresses to the whitelist\\\");\\r\\n    }\\r\\n    function setMarketingTax(uint8 _marketingFeeVal, address _marketingAdd) public onlyOwner {\\r\\n        require(_marketingFeeVal <= 5);\\r\\n        marketingFeeVal = _marketingFeeVal;\\r\\n        marketingAdd = payable(_marketingAdd);\\r\\n    }\\r\\n    // function setDevTax(uint8 _devFeeVal, address _devAdd) public onlyOwner {\\r\\n    //     require(_devFeeVal <= 5);\\r\\n    //     devFeeVal = _devFeeVal;\\r\\n    //     recAdd = payable(_devAdd);\\r\\n    // }\\r\\n    function setEmergencyWithdrawPenalty(uint256 _penalty) public override onlyOwner {\\r\\n        require(_penalty < 100);\\r\\n        emergencyWithdrawPenalty = _penalty;\\r\\n    }\\r\\n    function setMaxSellPc(uint256 _maxSellNum, uint256 _maxSellDiv) public onlyOwner {\\r\\n        require(_maxSellDiv <= 1000 && _maxSellDiv >= 10, \\\"Invalid values\\\");\\r\\n        require(_maxSellNum < _maxSellDiv && uint256(1000).mul(_maxSellNum) >= _maxSellDiv, \\\"Min max sell is 0.1% of TLV\\\");\\r\\n        maxSellNum = _maxSellNum;\\r\\n        maxSellDiv = _maxSellDiv;\\r\\n    }\\r\\n    function setRewardsPercentage(uint32 _percentage) public onlyOwner {\\r\\n        require(_percentage >= 15, 'Percentage cannot be less than 15');\\r\\n        rewardsPercentage = _percentage;\\r\\n    }\\r\\n    function setMaxBuy(uint256 _maxBuyTwoDecs) public onlyOwner {\\r\\n        maxBuy = _maxBuyTwoDecs.mul(1 ether).div(100);\\r\\n    }\\r\\n    function setMinBuy(uint256 _minBuyTwoDecs) public onlyOwner {\\r\\n        minBuy = _minBuyTwoDecs.mul(1 ether).div(100);\\r\\n    }\\r\\n    ////////////////////////\\r\\n\\r\\n\\r\\n\\r\\n    //AIRDROPS//////////////\\r\\n    function claimBeans(address ref) public override {\\r\\n        require(initialized);\\r\\n        require(claimEnabled, 'Claim still not available');\\r\\n\\r\\n        uint256 airdropTokens = IBEP20(airdropToken).balanceOf(msg.sender);\\r\\n        IBEP20(airdropToken).transferFrom(msg.sender, address(this), airdropTokens); //The token has to be approved first\\r\\n        IBEP20(airdropToken).burn(airdropTokens); //Tokens burned\\r\\n\\r\\n        //RewardBNB is used to buy beans (miners)\\r\\n        uint256 beansClaimed = calculateHireBeans(airdropTokens, address(this).balance);\\r\\n\\r\\n        setInvestorClaimedRewards(msg.sender, SafeMath.add(getInvestorData(msg.sender).claimedRewards, beansClaimed));\\r\\n        _rehireBeans(msg.sender, ref, true);\\r\\n\\r\\n        emit ClaimBeans(msg.sender, beansClaimed, airdropTokens);\\r\\n    }\\r\\n    ////////////////////////\\r\\n\\r\\n\\r\\n    //Emergency withdraw NOT IMPLEMENTED////\\r\\n    function emergencyWithdraw() public override {\\r\\n        // require(initialized);\\r\\n        // require(block.timestamp.sub(getInvestorJoinTimestamp(msg.sender)) < emergencyWithdrawLimit, 'Only can be used the first 6 hours');\\r\\n        // require(getInvestorData(msg.sender).withdrawal < getInvestorData(msg.sender).investment, 'You already recovered your investment');\\r\\n        // require(getInvestorData(msg.sender).hiredBeans > 1, 'You cant use this function');\\r\\n        // uint256 amountToWithdraw = getInvestorData(msg.sender).investment.sub(getInvestorData(msg.sender).withdrawal);\\r\\n        // uint256 amountToWithdrawAfterTax = amountToWithdraw.mul(uint256(100).sub(emergencyWithdrawPenalty)).div(100);\\r\\n        // require(amountToWithdrawAfterTax > 0, 'There is nothing to withdraw');\\r\\n        // uint256 amountToWithdrawTaxed = amountToWithdraw.sub(amountToWithdrawAfterTax);\\r\\n\\r\\n        // addInvestorWithdrawal(msg.sender, amountToWithdraw);\\r\\n        // setInvestorHiredBeans(msg.sender, 1); //Burn\\r\\n\\r\\n        // if(amountToWithdrawTaxed > 0){\\r\\n        //     recAdd.transfer(amountToWithdrawTaxed);\\r\\n        // }\\r\\n\\r\\n        // payable (msg.sender).transfer(amountToWithdrawAfterTax);\\r\\n\\r\\n        // emit EmergencyWithdraw(getInvestorData(msg.sender).investment, getInvestorData(msg.sender).withdrawal, amountToWithdraw, amountToWithdrawAfterTax, amountToWithdrawTaxed);\\r\\n    }\\r\\n    ////////////////////////\\r\\n\\r\\n\\r\\n    //BASIC/////////////////\\r\\n    function seedMarket() public payable onlyOwner {\\r\\n        require(marketRewards == 0);\\r\\n        initialized = true;\\r\\n        marketRewards = 108000000000;\\r\\n    }\\r\\n\\r\\n    function hireBeans(address ref) public payable {\\r\\n        require(initialized);\\r\\n        require(openPublic, 'Miner still not opened');\\r\\n        require(maxBuy == 0 || msg.value <= maxBuy);\\r\\n        require(minBuy == 0 || msg.value >= minBuy);\\r\\n        require(!isWhitelistEnabled() || isAddressWhitelisted(msg.sender), \\\"You are not whitelisted\\\");\\r\\n        require(!referralMode || (ref != address(0) || getInvestorData(msg.sender).referral != address(0)), \\\"Only people with referral links can buy\\\");\\r\\n\\r\\n        _hireBeans(ref, msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function rehireBeans() public {\\r\\n        _rehireBeans(msg.sender, address(0), false);\\r\\n    }\\r\\n\\r\\n    function sellRewards() public {\\r\\n        _sellRewards(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _rehireBeans(address _sender, address ref, bool isClaim) private {\\r\\n        require(initialized);\\r\\n\\r\\n        if(ref == _sender) {\\r\\n            ref = address(0);\\r\\n        }\\r\\n                \\r\\n        if(\\r\\n            getInvestorData(ref).investment > 0 && \\r\\n            getInvestorData(_sender).referral == address(0) && \\r\\n            getInvestorData(_sender).referral != _sender && \\r\\n            getInvestorData(_sender).referral != ref\\r\\n        ) {\\r\\n            setInvestorReferral(_sender, ref);\\r\\n        }\\r\\n        \\r\\n        uint256 rewardsUsed = getMyRewards(_sender);\\r\\n        uint256 newBeans = SafeMath.div(rewardsUsed, REWARDS_TO_HATCH_1BEAN);\\r\\n\\r\\n        if(newBeans > 0 && getInvestorData(_sender).hiredBeans == 0){            \\r\\n            initializeInvestor(_sender);\\r\\n        }\\r\\n\\r\\n        setInvestorHiredBeans(_sender, SafeMath.add(getInvestorData(_sender).hiredBeans, newBeans));\\r\\n        setInvestorClaimedRewards(_sender, 0);\\r\\n        setInvestorLastHire(_sender, getCurrentTime());\\r\\n        \\r\\n        //send referral rewards\\r\\n        setInvestorRewardsByReferral(getReferralData(_sender).investorAddress, getReferralData(_sender).referralRewards.add(SafeMath.div(rewardsUsed, 8)));\\r\\n        setInvestorClaimedRewards(getReferralData(_sender).investorAddress, SafeMath.add(getReferralData(_sender).claimedRewards, SafeMath.div(rewardsUsed, 8))); \\r\\n\\r\\n        //boost market to nerf miners hoarding\\r\\n        if(isClaim == false){\\r\\n            marketRewards = SafeMath.add(marketRewards, SafeMath.div(rewardsUsed, 5));\\r\\n        }\\r\\n\\r\\n        emit RehireBeans(_sender, newBeans, getInvestorData(_sender).hiredBeans, getNumberInvestors(), getReferralData(_sender).claimedRewards, marketRewards, rewardsUsed);\\r\\n    }\\r\\n    \\r\\n    function _sellRewards(address _sender) private {\\r\\n        require(initialized);\\r\\n\\r\\n        uint256 rewardsLeft = 0;\\r\\n        uint256 hasRewards = getMyRewards(_sender);\\r\\n        uint256 rewardsValue = calculateRewardSell(hasRewards);\\r\\n        (rewardsValue, rewardsLeft) = capToMaxSell(rewardsValue, hasRewards);\\r\\n        uint256 sellTax = calculateBuySellTax(rewardsValue, _sender);\\r\\n        uint256 penalty = getBuySellPenalty(_sender);\\r\\n\\r\\n        setInvestorClaimedRewards(_sender, rewardsLeft);\\r\\n        setInvestorLastHire(_sender, getCurrentTime());\\r\\n        marketRewards = SafeMath.add(marketRewards,hasRewards);\\r\\n        payBuySellTax(sellTax);\\r\\n        addInvestorWithdrawal(_sender, SafeMath.sub(rewardsValue, sellTax));\\r\\n        setInvestorLastSell(_sender, SafeMath.sub(rewardsValue, sellTax));\\r\\n        payable (_sender).transfer(SafeMath.sub(rewardsValue,sellTax));\\r\\n\\r\\n        // Push the timestamp\\r\\n        setInvestorSellsTimestamp(_sender, getCurrentTime());\\r\\n        setInvestorNsells(_sender, getInvestorData(_sender).nSells.add(1));\\r\\n        //From milkfarmV1\\r\\n        sellsTimestamps[msg.sender].push(block.timestamp);\\r\\n\\r\\n        emit Sell(_sender, rewardsValue, SafeMath.sub(rewardsValue,sellTax), penalty);\\r\\n    }\\r\\n\\r\\n    function _hireBeans(address _ref, address _sender, uint256 _amount) private {        \\r\\n        uint256 rewardsBought = calculateHireBeans(_amount, SafeMath.sub(address(this).balance, _amount));\\r\\n            \\r\\n        if(reIface.needUpdateEventBoostTimestamps()){\\r\\n            reIface.updateEventsBoostTimestamps();\\r\\n        }\\r\\n\\r\\n        uint256 rewardsBSFee = calculateBuySellTax(rewardsBought, _sender);\\r\\n        rewardsBought = SafeMath.sub(rewardsBought, rewardsBSFee);\\r\\n        uint256 fee = calculateBuySellTax(_amount, _sender);        \\r\\n        payBuySellTax(fee);\\r\\n        setInvestorClaimedRewards(_sender, SafeMath.add(getInvestorData(_sender).claimedRewards, rewardsBought));\\r\\n        addInvestorInvestment(_sender, _amount);\\r\\n        _rehireBeans(_sender, _ref, false);\\r\\n\\r\\n        emit Hire(_sender, rewardsBought, _amount);\\r\\n    }\\r\\n\\r\\n    function capToMaxSell(uint256 rewardsValue, uint256 rewards) public view returns(uint256, uint256){\\r\\n        uint256 maxSell = address(this).balance.mul(maxSellNum).div(maxSellDiv);\\r\\n        if(maxSell >= rewardsValue){\\r\\n            return (rewardsValue, 0);\\r\\n        }\\r\\n        else{\\r\\n            uint256 rewardsMaxSell = maxSell.mul(rewards).div(rewardsValue);\\r\\n            if(rewards > rewardsMaxSell){\\r\\n                return (maxSell, rewards.sub(rewardsMaxSell));\\r\\n            }else{\\r\\n                return (maxSell, 0);\\r\\n            }\\r\\n        }     \\r\\n    }\\r\\n\\r\\n    function getRewardsPercentage() public view returns (uint32) { return rewardsPercentage; }\\r\\n\\r\\n    function getMarketRewards() public view returns (uint256) {\\r\\n        return marketRewards;\\r\\n    }\\r\\n    \\r\\n    function rewardsRewards(address adr) public view returns(uint256) {\\r\\n        uint256 hasRewards = getMyRewards(adr);\\r\\n        uint256 rewardsValue = calculateRewardSell(hasRewards);\\r\\n        return rewardsValue;\\r\\n    }\\r\\n\\r\\n    function rewardsRewardsIncludingTaxes(address adr) public view returns(uint256) {\\r\\n        uint256 hasRewards = getMyRewards(adr);\\r\\n        (uint256 rewardsValue,) = calculateRewardSellIncludingTaxes(hasRewards, adr);\\r\\n        return rewardsValue;\\r\\n    }\\r\\n\\r\\n    function getBuySellPenalty(address adr) public view returns (uint256) {\\r\\n        return getSellPenalty(adr);\\r\\n        //return SafeMath.add(marketingFeeVal, devFeeVal);\\r\\n    }\\r\\n\\r\\n    function calculateBuySellTax(uint256 amount, address _sender) private view returns(uint256) {\\r\\n        return SafeMath.div(SafeMath.mul(amount, getBuySellPenalty(_sender)), 100);\\r\\n    }\\r\\n\\r\\n    function payBuySellTax(uint256 amountTaxed) private {  \\r\\n        if(!buySellTaxDisabled) {\\r\\n            uint256 fullTax = devFeeVal.add(marketingFeeVal);         \\r\\n            payable(recAdd).transfer(amountTaxed.mul(devFeeVal).div(fullTax));        \\r\\n            payable(marketingAdd).transfer(amountTaxed.mul(marketingFeeVal).div(fullTax));        \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) private view returns(uint256) {\\r\\n        uint256 valueTrade = SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\\r\\n        if(rewardsPercentage > 15) {\\r\\n            return SafeMath.div(SafeMath.mul(valueTrade,rewardsPercentage), 15);\\r\\n        }\\r\\n\\r\\n        return valueTrade;\\r\\n    }\\r\\n    \\r\\n    function calculateRewardSell(uint256 rewards) public view returns(uint256) {\\r\\n        if(rewards > 0){\\r\\n            return calculateTrade(rewards, marketRewards, address(this).balance);\\r\\n        }\\r\\n        else{\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateRewardSellIncludingTaxes(uint256 rewards, address adr) public view returns(uint256, uint256) {\\r\\n        if(rewards == 0){\\r\\n            return (0,0);\\r\\n        }\\r\\n        uint256 totalTrade = calculateTrade(rewards, marketRewards, address(this).balance);\\r\\n        uint256 penalty = getBuySellPenalty(adr);\\r\\n        uint256 sellTax = calculateBuySellTax(totalTrade, adr);\\r\\n\\r\\n        return (\\r\\n            SafeMath.sub(totalTrade, sellTax),\\r\\n            penalty\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    function calculateHireBeans(uint256 eth,uint256 contractBalance) public view returns(uint256) {\\r\\n        return reIface.applyROIEventBoost(calculateHireBeansNoEvent(eth, contractBalance));\\r\\n    }\\r\\n\\r\\n    function calculateHireBeansNoEvent(uint256 eth,uint256 contractBalance) public view returns(uint256) {\\r\\n        return calculateTrade(eth, contractBalance, marketRewards);\\r\\n    }\\r\\n    \\r\\n    function calculateHireBeansSimple(uint256 eth) public view returns(uint256) {\\r\\n        return calculateHireBeans(eth, address(this).balance);\\r\\n    }\\r\\n\\r\\n    function calculateHireBeansSimpleNoEvent(uint256 eth) public view returns(uint256) {\\r\\n        return calculateHireBeansNoEvent(eth, address(this).balance);\\r\\n    }\\r\\n    \\r\\n    function isInitialized() public view returns (bool) {\\r\\n        return initialized;\\r\\n    }\\r\\n    \\r\\n    function getBalance() public view returns(uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n    \\r\\n    function getMyRewards(address adr) public view returns(uint256) {\\r\\n        return SafeMath.add(getInvestorData(adr).claimedRewards, getRewardsSinceLastHire(adr));\\r\\n    }\\r\\n    \\r\\n    function getRewardsSinceLastHire(address adr) public view returns(uint256) {        \\r\\n        uint256 secondsPassed=min(REWARDS_TO_HATCH_1BEAN, SafeMath.sub(getCurrentTime(), getInvestorData(adr).lastHire));\\r\\n        return SafeMath.mul(secondsPassed, getInvestorData(adr).hiredBeans);\\r\\n    }\\r\\n\\r\\n    function getSellPenalty(address addr) public view returns (uint256) {\\r\\n\\r\\n        // If there is custom sell tax for this address, then return it\\r\\n        if(customSellTaxes[addr] > 0) {\\r\\n            return customSellTaxes[addr];\\r\\n        }\\r\\n\\r\\n        uint256 sellsInRow = getSellsInRow(addr);\\r\\n        uint256 numberOfSells = sellsTimestamps[addr].length;\\r\\n        uint256 _sellTax = marketingFeeVal;\\r\\n\\r\\n        if(numberOfSells > 0) {\\r\\n            uint256 lastSell = sellsTimestamps[addr][numberOfSells - 1];\\r\\n\\r\\n            if(sellsInRow == 0) {\\r\\n                if((block.timestamp - 30 days) > lastSell) { // 1% sell tax for everyone who hold / rehire during 30+ days\\r\\n                    _sellTax = 0;\\r\\n                } else if((lastSell + 4 days) <= block.timestamp) { // 5% sell tax for everyone who sell after 4 days of last sell\\r\\n                    _sellTax = marketingFeeVal;\\r\\n                } else if((lastSell + 3 days) <= block.timestamp) { // 8% sell tax for everyone who sell after 3 days of last sell\\r\\n                    _sellTax = 7;\\r\\n                } else { // otherwise 10% sell tax\\r\\n                    _sellTax = 9;\\r\\n                }\\r\\n            } else if(sellsInRow == 1) {  // 20% sell tax for everyone who sell 2 days in a row\\r\\n                _sellTax = 19;\\r\\n            } else if(sellsInRow >= 2) {  // 40% sell tax for everyone who sell 3 or more days in a row\\r\\n                _sellTax = 39;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return SafeMath.add(_sellTax, devFeeVal);\\r\\n    }\\r\\n\\r\\n    function setCustomSellTaxForAddress(address adr, uint256 percentage) public onlyOwner {\\r\\n        customSellTaxes[adr] = percentage;\\r\\n    }\\r\\n\\r\\n    function getCustomSellTaxForAddress(address adr) public view returns (uint256) {\\r\\n        return customSellTaxes[adr];\\r\\n    }\\r\\n\\r\\n    function removeCustomSellTaxForAddress(address adr) public onlyOwner {\\r\\n        delete customSellTaxes[adr];\\r\\n    }\\r\\n\\r\\n    function getSellsInRow(address addr) public view returns(uint256) {\\r\\n        uint256 sellsInRow = 0;\\r\\n        uint256 numberOfSells = sellsTimestamps[addr].length;\\r\\n        if(numberOfSells == 1) {\\r\\n            if(sellsTimestamps[addr][0] >= (block.timestamp - 1 days)) {\\r\\n                return 1;\\r\\n            }\\r\\n        } else if(numberOfSells > 1) {\\r\\n            uint256 lastSell = sellsTimestamps[addr][numberOfSells - 1];\\r\\n\\r\\n            if((lastSell + 1 days) <= block.timestamp) {\\r\\n                return 0;\\r\\n            } else {\\r\\n\\r\\n                for(uint256 i = numberOfSells - 1; i > 0; i--) {\\r\\n                    if(isSellInRow(sellsTimestamps[addr][i-1], sellsTimestamps[addr][i])) {\\r\\n                        sellsInRow++;\\r\\n                    } else {\\r\\n                        if(i == (numberOfSells - 1))\\r\\n                            sellsInRow = 0;\\r\\n\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if((lastSell + 1 days) > block.timestamp) {\\r\\n                    sellsInRow++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return sellsInRow;\\r\\n    }\\r\\n\\r\\n    function isSellInRow(uint256 previousDay, uint256 currentDay) private pure returns(bool) {\\r\\n        return currentDay <= (previousDay + 1 days);\\r\\n    }\\r\\n    /////////////////\\r\\n\\r\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        return a < b ? b : a;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n    ////////////////////////\\r\\n}\"\r\n    },\r\n    \"/contracts/current/Timer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./BasicLibraries/Auth.sol\\\";\\r\\nimport \\\"./BasicLibraries/SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Universal store of current contract time for testing environments.\\r\\n */\\r\\ncontract Timer is Auth {\\r\\n    using SafeMath for uint256;\\r\\n    uint256 private currentTime;\\r\\n\\r\\n    bool enabled = false;\\r\\n\\r\\n    constructor() Auth(msg.sender) { }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set `currentTime` to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external authorized {\\r\\n        require(time >= currentTime, \\\"Return to the future Doc!\\\");\\r\\n        currentTime = time;\\r\\n    }\\r\\n\\r\\n    function enable(bool _enabled) external authorized {\\r\\n        require(enabled == false, 'Can not be disabled');\\r\\n        enabled = _enabled;\\r\\n    }\\r\\n\\r\\n    function increaseDays(uint256 _days) external authorized {\\r\\n        currentTime = getCurrentTime().add(uint256(1 days).mul(_days));\\r\\n    }\\r\\n\\r\\n    function increaseMinutes(uint256 _minutes) external authorized {\\r\\n        currentTime = getCurrentTime().add(uint256(1 minutes).mul(_minutes));\\r\\n    }\\r\\n\\r\\n    function increaseSeconds(uint256 _seconds) external authorized {\\r\\n        currentTime = getCurrentTime().add(uint256(1 seconds).mul(_seconds));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\r\\n     * Otherwise, it will return the block timestamp.\\r\\n     * @return uint256 for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view returns (uint256) {\\r\\n        if(enabled){\\r\\n            return currentTime;\\r\\n        }\\r\\n        else{\\r\\n            return block.timestamp;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/current/Libraries/Whitelist.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nabstract contract Whitelist {\\r\\n\\r\\n    uint8 public whitelist_currentSize = 0;\\r\\n    uint8 public whitelist_maxSize = 50;\\r\\n\\r\\n    bool public whitelist_enabled = false;\\r\\n    bool public whitelist_removed = false;\\r\\n    bool public whitelist_editable = true;\\r\\n\\r\\n    mapping(address => bool) public addressesWhitelisted;\\r\\n\\r\\n    function isAddressWhitelisted(address _address) public view returns(bool) { return addressesWhitelisted[_address]; }\\r\\n\\r\\n    function isWhitelistEnabled() public view returns (bool) { return !whitelist_removed && whitelist_enabled; }\\r\\n\\r\\n    function enableWhitelist(bool _enable) public virtual;\\r\\n\\r\\n    function removeEditWhitelist() public virtual;\\r\\n\\r\\n    function removeWhitelist() public virtual;    \\r\\n\\r\\n    function setWhitelistedAddress(address _address, bool _whitelisted) public virtual;\\r\\n\\r\\n    function setWhitelistAddresses(address [] memory _addresses, bool [] memory _whitelisteds) public virtual;\\r\\n\\r\\n    constructor() {}\\r\\n}\"\r\n    },\r\n    \"/contracts/current/Libraries/Testable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./../Timer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base class that provides time overrides, but only if being run in test mode.\\r\\n */\\r\\nabstract contract Testable {\\r\\n    // If the contract is being run on the test network, then `timerAddress` will be the 0x0 address.\\r\\n    // Note: this variable should be set on construction and never modified.\\r\\n    address public timerAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the Testable contract. Called by child contracts.\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\r\\n     * Must be set to 0x0 for production environments that use live time.\\r\\n     */\\r\\n    constructor(address _timerAddress) {\\r\\n        timerAddress = _timerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if not running in test mode.\\r\\n     */\\r\\n    modifier onlyIfTest {\\r\\n        require(timerAddress != address(0x0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set current Testable time to.\\r\\n     */\\r\\n    // function setCurrentTime(uint256 time) external onlyIfTest {\\r\\n    //     Timer(timerAddress).setCurrentTime(time);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\r\\n     * Otherwise, it will return the block timestamp.\\r\\n     * @return uint for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view returns (uint256) {\\r\\n        if (timerAddress != address(0x0)) {\\r\\n            return Timer(timerAddress).getCurrentTime();\\r\\n        } else {\\r\\n            return block.timestamp;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/current/Libraries/MinerBasic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./../BasicLibraries/SafeMath.sol\\\";\\r\\n\\r\\nabstract contract MinerBasic {\\r\\n\\r\\n    event Hire(address indexed adr, uint256 rewards, uint256 amount);\\r\\n    event Sell(address indexed adr, uint256 rewards, uint256 amount, uint256 penalty);\\r\\n    event RehireBeans(address _investor, uint256 _newBeans, uint256 _hiredBeans, uint256 _nInvestors, uint256 _referralRewards, uint256 _marketRewards, uint256 _RewardsUsed);\\r\\n\\r\\n    /**\\r\\n     * @notice Testing/security meassure, owner should renounce after checking everything is working fine\\r\\n     */\\r\\n    bool internal renounce_unstuck = false;\\r\\n    /**\\r\\n     * @notice Daily % or you investment you earn daily\\r\\n     */\\r\\n    uint32 internal rewardsPercentage = 15;\\r\\n    /**\\r\\n     * @notice 100/rewards% = 100/15 = 6.666 (days to recover your investment) -> 6.666*(day seconds) 6.666*3600*24 = 576000 relation at start\\r\\n     */\\r\\n    uint32 internal REWARDS_TO_HATCH_1BEAN = 576000;\\r\\n    uint16 internal PSN = 10000;\\r\\n    uint16 internal PSNH = 5000;\\r\\n    bool internal initialized = false;\\r\\n    uint256 internal marketRewards; //This variable is responsible for inflation.\\r\\n                                   //Number of rewards on market (sold) rehire adds 20% of rewards rehired\\r\\n\\r\\n    address payable internal recAdd;\\r\\n    uint8 internal devFeeVal = 1; //Dev fee\\r\\n    uint8 internal marketingFeeVal = 4; //Tax used to cost the auto executions\\r\\n    address payable public marketingAdd; //Wallet used for auto executions\\r\\n    uint256 public maxBuy = (2 ether);\\r\\n    uint256 public minBuy = (0.5 ether);\\r\\n\\r\\n    uint256 public maxSellNum = 10; //Max sell TVL num\\r\\n    uint256 public maxSellDiv = 1000; //Max sell TVL div //For example: 10 and 1000 -> 10/1000 = 1/100 = 1% of TVL max sell\\r\\n\\r\\n    // This function is called by anyone who want to contribute to TVL\\r\\n    function ContributeToTVL() public payable { }\\r\\n\\r\\n    //Open/close miner\\r\\n    bool public openPublic = false;\\r\\n    function openToPublic(bool _openPublic) public virtual;\\r\\n\\r\\n    //Only people with referral link can buy\\r\\n    bool public referralMode = false;\\r\\n\\r\\n    function calculateMarketingTax(uint256 amount) internal view returns(uint256) { return SafeMath.div(SafeMath.mul(amount, marketingFeeVal), 100); }\\r\\n    function calculateDevTax(uint256 amount) internal view returns(uint256) { return SafeMath.div(SafeMath.mul(amount, devFeeVal), 100); }\\r\\n    function calculateFullTax(uint256 amount) internal view returns(uint256) { return SafeMath.div(SafeMath.mul(amount, devFeeVal + marketingFeeVal), 100); }\\r\\n\\r\\n    constructor () {}\\r\\n}\"\r\n    },\r\n    \"/contracts/current/Libraries/InvestorsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ncontract InvestorsManager {\\r\\n\\r\\n    //INVESTORS DATA\\r\\n    uint64 private nInvestors = 0;\\r\\n    uint64 private totalReferralsUses = 0;\\r\\n    uint256 private totalReferralsRewards = 0;\\r\\n    uint256 private totalInvestment = 0;\\r\\n    uint256 private totalWithdrawal = 0;\\r\\n    mapping (address => investor) private investors; //Investor data mapped by address\\r\\n    mapping (uint64 => address) private investors_addresses; //Investors addresses mapped by index\\r\\n\\r\\n    struct investor {\\r\\n        address investorAddress;//Investor address\\r\\n        uint256 investment;     //Total investor investment on miner (real BNB, presales/airdrops not taken into account)\\r\\n        uint256 withdrawal;     //Total investor withdraw BNB from the miner\\r\\n        uint256 hiredBeans;  //Total hired beans (miners)\\r\\n        uint256 claimedRewards;  //Total rewards claimed (produced by beans)\\r\\n        uint256 lastHire;       //Last time you hired beans\\r\\n        uint256 sellsTimestamp; //Last time you sold your rewards\\r\\n        uint256 nSells;         //Number of sells you did\\r\\n        uint256 referralRewards; //Number of rewards you got from people that used your referral address\\r\\n        address referral;       //Referral address you used for joining the miner\\r\\n        uint256 lastSellAmount; //Last sell amount\\r\\n        uint256 customSellTaxes;//Custom tax set by admin\\r\\n        uint256 referralUses;   //Number of addresses that used his referral address\\r\\n        //Add this news\\r\\n        uint256 joinTimestamp;  //Timestamp when the user joined the miner\\r\\n        uint256 tokenSpent;     //Amount of BNB spent on buying tokens\\r\\n    }\\r\\n\\r\\n    function initializeInvestor(address adr) internal {\\r\\n        if(investors[adr].investorAddress != adr){\\r\\n            investors_addresses[nInvestors] = adr;\\r\\n            investors[adr].investorAddress = adr;\\r\\n            investors[adr].sellsTimestamp = block.timestamp;\\r\\n            investors[adr].joinTimestamp = block.timestamp;\\r\\n            nInvestors++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getNumberInvestors() public view returns(uint64) { return nInvestors; }\\r\\n\\r\\n    function getTotalReferralsUses() public view returns(uint64) { return totalReferralsUses; }\\r\\n\\r\\n    function getTotalReferralsRewards() public view returns(uint256) { return totalReferralsRewards; }\\r\\n\\r\\n    function getTotalInvestment() public view returns(uint256) { return totalInvestment; }\\r\\n\\r\\n    function getTotalWithdrawal() public view returns(uint256) { return totalWithdrawal; }\\r\\n\\r\\n    function getInvestorData(uint64 investor_index) public view returns(investor memory) { return investors[investors_addresses[investor_index]]; }\\r\\n\\r\\n    function getInvestorData(address addr) public view returns(investor memory) { return investors[addr]; }\\r\\n\\r\\n    function getInvestorBeans(address addr) public view returns(uint256) { return investors[addr].hiredBeans; }\\r\\n\\r\\n    function getReferralData(address addr) public view returns(investor memory) { return investors[investors[addr].referral]; }\\r\\n\\r\\n    function getReferralUses(address addr) public view returns(uint256) { return investors[addr].referralUses; }\\r\\n\\r\\n    function getInvestorJoinTimestamp(address addr) public view returns(uint256) { return investors[addr].joinTimestamp; }\\r\\n\\r\\n    function getInvestorTokenSpent(address addr) public view returns(uint256) { return investors[addr].tokenSpent; }\\r\\n\\r\\n    function setInvestorAddress(address addr) internal { investors[addr].investorAddress = addr; }\\r\\n\\r\\n    function addInvestorInvestment(address addr, uint256 investment) internal { \\r\\n        investors[addr].investment += investment; \\r\\n        totalInvestment += investment;\\r\\n    }\\r\\n\\r\\n    function addInvestorWithdrawal(address addr, uint256 withdrawal) internal { \\r\\n        investors[addr].withdrawal += withdrawal; \\r\\n        totalWithdrawal += withdrawal;\\r\\n    }\\r\\n\\r\\n    function setInvestorHiredBeans(address addr, uint256 hiredBeans) internal { investors[addr].hiredBeans = hiredBeans; }\\r\\n\\r\\n    function setInvestorClaimedRewards(address addr, uint256 claimedRewards) internal { investors[addr].claimedRewards = claimedRewards; }\\r\\n\\r\\n    function setInvestorRewardsByReferral(address addr, uint256 rewards) internal { \\r\\n        if(addr != address(0)){\\r\\n            totalReferralsRewards += rewards; \\r\\n            totalReferralsRewards -= investors[addr].referralRewards; \\r\\n        }\\r\\n        investors[addr].referralRewards = rewards; \\r\\n    }\\r\\n\\r\\n    function setInvestorLastHire(address addr, uint256 lastHire) internal { investors[addr].lastHire = lastHire; }\\r\\n\\r\\n    function setInvestorSellsTimestamp(address addr, uint256 sellsTimestamp) internal { investors[addr].sellsTimestamp = sellsTimestamp; }\\r\\n\\r\\n    function setInvestorNsells(address addr, uint256 nSells) internal { investors[addr].nSells = nSells; }\\r\\n\\r\\n    function setInvestorReferral(address addr, address referral) internal { investors[addr].referral = referral; investors[referral].referralUses++; totalReferralsUses++; }\\r\\n\\r\\n    function setInvestorLastSell(address addr, uint256 amount) internal { investors[addr].lastSellAmount = amount; }\\r\\n\\r\\n    function setInvestorCustomSellTaxes(address addr, uint256 customTax) internal { investors[addr].customSellTaxes = customTax; }\\r\\n\\r\\n    function setInvestorFromMigration(investor memory inv) internal { \\r\\n        investors[inv.investorAddress].investorAddress = inv.investorAddress;\\r\\n        investors[inv.investorAddress].investment = inv.investment;     \\r\\n        investors[inv.investorAddress].withdrawal = inv.withdrawal;     \\r\\n        investors[inv.investorAddress].hiredBeans = inv.hiredBeans;\\r\\n        //investors[inv.investorAddress].claimedRewards = inv.claimedRewards; \\r\\n        investors[inv.investorAddress].lastHire = inv.lastHire;\\r\\n        investors[inv.investorAddress].sellsTimestamp = inv.sellsTimestamp; \\r\\n        investors[inv.investorAddress].nSells = inv.nSells;         \\r\\n        //investors[inv.investorAddress].referralRewards = inv.referralRewards;\\r\\n        //investors[inv.investorAddress].referral = inv.referral;       \\r\\n        investors[inv.investorAddress].lastSellAmount = inv.lastSellAmount; \\r\\n        investors[inv.investorAddress].customSellTaxes = inv.customSellTaxes;\\r\\n        //investors[inv.investorAddress].referralUses = inv.referralUses;   \\r\\n        investors[inv.investorAddress].joinTimestamp = inv.joinTimestamp;  \\r\\n        investors[inv.investorAddress].tokenSpent = inv.tokenSpent;     \\r\\n    }\\r\\n\\r\\n    function increaseReferralUses(address addr) internal { investors[addr].referralUses++; }\\r\\n\\r\\n    function increaseInvestorTokenSpent(address addr, uint256 _spent) internal { investors[addr].tokenSpent += _spent; }\\r\\n\\r\\n    constructor(){}\\r\\n}\"\r\n    },\r\n    \"/contracts/current/Libraries/EmergencyWithdrawal.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nabstract contract EmergencyWithdrawal {\\r\\n\\r\\n    uint256 public emergencyWithdrawPenalty = 25;\\r\\n    uint256 public emergencyWithdrawLimit = 3600 * 3; //3 hours\\r\\n    event EmergencyWithdraw(uint256 _investments, uint256 _withdrawals, uint256 _amountToWithdraw, uint256 _amountToWithdrawAfterTax, uint256 _amountToWithdrawTaxed);\\r\\n\\r\\n    //Users can use emergencyWithdraw to withdraw the (100 - emergencyWithdrawPenalty)% of the investment they did not recover\\r\\n    //Simple example, if you invested 5 BNB, recovered 1 BNB, and you use emergencyWithdraw with 25% tax you will recover 3 BNB\\r\\n    //---> (5 - 1) * (100 - 25) / 100 = 3 BNB\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //WARNING!!!!! when we talk about BNB investment presale/airdrops are NOT taken into account\\r\\n    //////////////////////////////////////////////////////////////////////////////////////////// \\r\\n    function emergencyWithdraw() public virtual;\\r\\n\\r\\n    function setEmergencyWithdrawPenalty(uint256 _penalty) public virtual;\\r\\n\\r\\n    constructor() {}\\r\\n}\"\r\n    },\r\n    \"/contracts/current/Libraries/BeanMinerConfigIface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface BeanMinerConfigIface {\\r\\n    //Apply ROI event boost to the amount specified\\r\\n    function applyROIEventBoost(uint256 amount) external view returns (uint256); \\r\\n    //Is needed to update CA timestamps?\\r\\n    function needUpdateEventBoostTimestamps() external view returns (bool); \\r\\n    //Update CA timestamps\\r\\n    function updateEventsBoostTimestamps() external; \\r\\n}\"\r\n    },\r\n    \"/contracts/current/Libraries/BeanBNBIface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface BeanBNBIface {\\r\\n    function mintPresale(address adr, uint256 amount) external;\\r\\n    function approveMax(address spender) external returns (bool);\\r\\n}\"\r\n    },\r\n    \"/contracts/current/Libraries/BakedBeansV3Iface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface BakedBeansV3Iface {\\r\\n    function hireBeans(address ref) external payable;\\r\\n    function setRewardsPercentage(uint32 rPercentage) external;\\r\\n    function sellRewards() external;\\r\\n    function claimBeans(address ref) external;\\r\\n    function getMarketRewards() external returns(uint256);\\r\\n    function openToPublic(bool opened) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/current/Libraries/Airdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nabstract contract Airdrop {\\r\\n    \\r\\n    address public airdropToken = address(0); //Will be used for performing airdrops\\r\\n    bool public claimEnabled = false;\\r\\n\\r\\n    event ClaimBeans(address _sender, uint256 _beansToClaim, uint256 _mmBNB);\\r\\n\\r\\n    //Enable/disable claim\\r\\n    function enableClaim(bool _enableClaim) public virtual;\\r\\n\\r\\n    //Used for people in order to claim their beans, the fake token is burned\\r\\n    function claimBeans(address ref) public virtual;\\r\\n\\r\\n    function setAirdropToken(address _airdropToken) public virtual;\\r\\n\\r\\n    constructor() {}\\r\\n}\"\r\n    },\r\n    \"/contracts/current/BasicLibraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/current/BasicLibraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n    * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n    */\\r\\n    constructor () {\\r\\n      address msgSender = _msgSender();\\r\\n      _owner = msgSender;\\r\\n      emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the address of the current owner.\\r\\n    */\\r\\n    function owner() public view returns (address) {\\r\\n      return _owner;\\r\\n    }\\r\\n\\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n      require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n      _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n      emit OwnershipTransferred(_owner, address(0));\\r\\n      _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n      _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n      require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n      emit OwnershipTransferred(_owner, newOwner);\\r\\n      _owner = newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/current/BasicLibraries/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * BEP20 standard interface.\\r\\n */\\r\\ninterface IBEP20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function name() external view returns (string memory);\\r\\n    function getOwner() external view returns (address);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function burn(uint256 amount) external;\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"/contracts/current/BasicLibraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/current/BasicLibraries/Auth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nabstract contract Auth {\\r\\n    address internal owner;\\r\\n    mapping (address => bool) internal authorizations;\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        owner = _owner;\\r\\n        authorizations[_owner] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Function modifier to require caller to be contract owner\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(msg.sender), \\\"!OWNER\\\"); _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Function modifier to require caller to be authorized\\r\\n     */\\r\\n    modifier authorized() {\\r\\n        require(isAuthorized(msg.sender), \\\"!AUTHORIZED\\\"); _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Authorize address. Owner only\\r\\n     */\\r\\n    function authorize(address adr) public onlyOwner {\\r\\n        authorizations[adr] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Remove address' authorization. Owner only\\r\\n     */\\r\\n    function unauthorize(address adr) public onlyOwner {\\r\\n        authorizations[adr] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Check if address is owner\\r\\n     */\\r\\n    function isOwner(address account) public view returns (bool) {\\r\\n        return account == owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Return address' authorization status\\r\\n     */\\r\\n    function isAuthorized(address adr) public view returns (bool) {\\r\\n        return authorizations[adr];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\\r\\n     */\\r\\n    function transferOwnership(address payable adr) public onlyOwner {\\r\\n        owner = adr;\\r\\n        authorizations[adr] = true;\\r\\n        emit OwnershipTransferred(adr);\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address owner);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airdropToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAdd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recIface\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timerAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remaningBal\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalanceMigrated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_beansToClaim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mmBNB\",\"type\":\"uint256\"}],\"name\":\"ClaimBeans\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_investments\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountToWithdrawAfterTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountToWithdrawTaxed\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Hire\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBeans\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_hiredBeans\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nInvestors\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referralRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_RewardsUsed\",\"type\":\"uint256\"}],\"name\":\"RehireBeans\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCABBal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCAABal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCABBal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCAABal\",\"type\":\"uint256\"}],\"name\":\"migratedBal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ContributeToTVL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressesWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateHireBeans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateHireBeansNoEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateHireBeansSimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateHireBeansSimpleNoEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"calculateRewardSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"calculateRewardSellIncludingTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"capToMaxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"claimBeans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableClaim\",\"type\":\"bool\"}],\"name\":\"enableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableReferralMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getBuySellPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getCustomSellTaxForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorBeans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"investor_index\",\"type\":\"uint64\"}],\"name\":\"getInvestorData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hiredBeans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellsTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nSells\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralRewards\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastSellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customSellTaxes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralUses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSpent\",\"type\":\"uint256\"}],\"internalType\":\"struct InvestorsManager.investor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hiredBeans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellsTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nSells\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralRewards\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastSellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customSellTaxes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralUses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSpent\",\"type\":\"uint256\"}],\"internalType\":\"struct InvestorsManager.investor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorJoinTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorTokenSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberInvestors\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReferralData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hiredBeans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellsTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nSells\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralRewards\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastSellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customSellTaxes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralUses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSpent\",\"type\":\"uint256\"}],\"internalType\":\"struct InvestorsManager.investor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReferralUses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsPercentage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getRewardsSinceLastHire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getSellPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getSellsInRow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReferralsRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReferralsUses\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hireBeans\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAdd\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rMint\",\"type\":\"uint256\"}],\"name\":\"minerClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerInvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_openPublic\",\"type\":\"bool\"}],\"name\":\"openToPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minPcMigration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rPercentage\",\"type\":\"uint32\"}],\"name\":\"performMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"investors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"}],\"name\":\"performMigration2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_miner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bbnb\",\"type\":\"address\"}],\"name\":\"presetMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rehireBeans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"removeCustomSellTaxForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeEditWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"rewardsRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"rewardsRewardsIncludingTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airdropToken\",\"type\":\"address\"}],\"name\":\"setAirdropToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setCustomSellTaxForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"}],\"name\":\"setEmergencyWithdrawPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recIface\",\"type\":\"address\"}],\"name\":\"setExternalConfigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_marketingFeeVal\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_marketingAdd\",\"type\":\"address\"}],\"name\":\"setMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyTwoDecs\",\"type\":\"uint256\"}],\"name\":\"setMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSellNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSellDiv\",\"type\":\"uint256\"}],\"name\":\"setMaxSellPc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuyTwoDecs\",\"type\":\"uint256\"}],\"name\":\"setMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_percentage\",\"type\":\"uint32\"}],\"name\":\"setRewardsPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_whitelisteds\",\"type\":\"bool[]\"}],\"name\":\"setWhitelistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist_currentSize\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist_editable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist_enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist_maxSize\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist_removed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BakedBeansV3", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "000000000000000000000000ff5c9b6c9f55ceed3b4712a7bc7257bdc0c163150000000000000000000000004058ea34d7aadfbd34cc61ba31a296e1b5e0c66d00000000000000000000000001d73ec36cb451c2028d74a64e1f09d372392a2b0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}