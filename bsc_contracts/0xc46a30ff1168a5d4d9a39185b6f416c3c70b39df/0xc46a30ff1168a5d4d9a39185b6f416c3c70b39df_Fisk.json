{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/common/configuration/AddressProvider/IAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAddressesProvider {\\r\\n  /***************************************************** */\\r\\n  /*********************GETTERS************************* */\\r\\n  /***************************************************** */\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  function getSpent() external view returns (address);\\r\\n\\r\\n  function getSpentLP() external view returns (address);\\r\\n\\r\\n  function getEusd() external view returns (address);\\r\\n\\r\\n  function getZapContract() external view returns (address);\\r\\n\\r\\n  function getBscViaDuctContract() external returns (address);\\r\\n\\r\\n  function getBarterRouter() external view returns (address);\\r\\n\\r\\n  function getBarterFactory() external view returns (address);\\r\\n\\r\\n  function getUpRightContract() external view returns (address);\\r\\n\\r\\n  function getCropYardContract() external view returns (address);\\r\\n\\r\\n  function getPrimeContract() external view returns (address);\\r\\n\\r\\n  function getFiskContract() external view returns (address);\\r\\n\\r\\n  function getWhitelistContract() external view returns (address);\\r\\n\\r\\n  function getUprightStableContract() external view returns (address);\\r\\n\\r\\n  function getUprightLpContract() external view returns (address);\\r\\n\\r\\n  function getUprightSwapTokenContract() external view returns (address);\\r\\n\\r\\n  function getUprightBstContract() external view returns (address);\\r\\n\\r\\n  function getBorrowLendContract() external view returns (address);\\r\\n\\r\\n  function getTokenomicsContract() external view returns (address);\\r\\n\\r\\n  function getManagerContract() external view returns (address);\\r\\n\\r\\n  function getManager() external view returns (address);\\r\\n\\r\\n  /***************************************************** */\\r\\n  /*********************SETTERS************************* */\\r\\n  /***************************************************** */\\r\\n\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/common/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n// FIXME: seggregate errors\\r\\nlibrary Errors {\\r\\n  /*********************************************************** */\\r\\n  /****************************RBAC*************************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant CALLER_NOT_ADMIN = \\\"CALLER_NOT_ADMIN\\\"; // 'The caller of the function is not a pool admin'\\r\\n  string public constant CALLER_NOT_OWNER = \\\"CALLER_NOT_OWNER\\\"; // 'The caller of the function is not a pool admin'\\r\\n  string public constant CALLER_NOT_MODERATOR = \\\"CALLER_NOT_MODERATOR\\\"; // 'The caller of the function is not a pool admin'\\r\\n  string public constant CALLER_NOT_SWAP = \\\"CALLER_NOT_SWAP\\\"; // 'The caller of the function is not a pool admin'\\r\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = \\\"ACL_ADMIN_CANNOT_BE_ZERO\\\";\\r\\n\\r\\n  /*********************************************************** */\\r\\n  /*************************WHITELISTING********************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant ALREADY_WHITELISTED = \\\"ALREADY_WHITELISTED\\\";\\r\\n  string public constant CALLER_OR_POOL_NOT_WHITELISTED = \\\"CALLER_OR_POOL_NOT_WHITELISTED\\\";\\r\\n  string public constant REF_NOT_WHITELISTED = \\\"REF_NOT_WHITELISTED\\\";\\r\\n  string public constant CANNOT_BE_CALLED_BY_MEMBER = \\\"CANNOT_BE_CALLED_BY_MEMBER\\\";\\r\\n  string public constant WRONG_LOACTION = \\\"WRONG_LOACTION\\\";\\r\\n  /*********************************************************** */\\r\\n  /****************************ERC20************************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant AMOUNT_ZERO = \\\"AMOUNT_ZERO\\\";\\r\\n  string public constant LOW_ALLOWANCE = \\\"LOW_ALLOWANCE\\\";\\r\\n  string public constant INSUFFICIENT_AMOUNT = \\\"INSUFFICIENT_AMOUNT\\\";\\r\\n  string public constant LOW_BALANCE = \\\"LOW_BALANCE\\\";\\r\\n  /*********************************************************** */\\r\\n  /*************************ZERO_ERROR************************ */\\r\\n  /*********************************************************** */\\r\\n  string public constant LP_AMOUNT_INVALID = \\\"LP_AMOUNT_INVALID\\\";\\r\\n  string public constant AMOUNT_INVALID = \\\"AMOUNT_INVALID\\\";\\r\\n  string public constant NO_TOKEN_IN_CONTRACT = \\\"NO_TOKEN_IN_CONTRACT\\\";\\r\\n  /*********************************************************** */\\r\\n  /**************************LOCKED*************************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant LP_NOT_UNLOCABLE_YET = \\\"LP_NOT_UNLOCABLE_YET\\\";\\r\\n  /*********************************************************** */\\r\\n  /**************************STAKE*************************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant WRONG_LP = \\\"WRONG_LP\\\";\\r\\n  string public constant NOT_CLAIMABLE_YET = \\\"NOT_CLAIMABLE_YET\\\";\\r\\n  string public constant NOT_UNSTAKABLE_YET = \\\"NOT_UNSTAKABLE_YET\\\";\\r\\n  string public constant LOW_LOCK_DURATION = \\\"LOW_LOCK_DURATION\\\";\\r\\n  /*********************************************************** */\\r\\n  /**************************TRANSACTION************************ */\\r\\n  /************************************************************ */\\r\\n  string public constant TRANSACTION_FAILED = \\\"TRANSACTION_FAILED\\\";\\r\\n  /*********************************************************** */\\r\\n  /**************************VIA-DUCT************************* */\\r\\n  /*********************************************************** */\\r\\n  string public constant ZERO_AFTER_DEDUCTIONS = \\\"ZERO_AFTER_DEDUCTIONS\\\";\\r\\n  string public constant ZERO_AFTER_VALUATIONS = \\\"ZERO_AFTER_VALUATIONS\\\";\\r\\n  string public constant LOW_eUSD_BALANCE_IN_CONTRACT = \\\"LOW_eUSD_BALANCE_IN_CONTRACT\\\";\\r\\n  /*********************************************************** */\\r\\n  /**************************ACL****************************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant CALLER_NOT_PRIME_CONTRACT = \\\"CALLER_NOT_PRIME_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_WHITELIST_CONTRACT = \\\"CALLER_NOT_WHITELIST_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_CROP_YARD_CONTRACT = \\\"CALLER_NOT_CROP_YARD_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_BORROW_LEND_CONTRACT = \\\"CALLER_NOT_BORROW_LEND_CONTRACT\\\";\\r\\n\\r\\n  string public constant CALLER_NOT_UPRIGHT_STABLE_CONTRACT = \\\"CALLER_NOT_UPRIGHT_STABLE_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_UPRIGHT_LP_CONTRACT = \\\"CALLER_NOT_UPRIGHT_LP_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_UPRIGHT_SWAP_TOKEN_CONTRACT = \\\"CALLER_NOT_UPRIGHT_SWAP_TOKEN_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_UPRIGHT_BST_CONTRACT = \\\"CALLER_NOT_UPRIGHT_BST_CONTRACT\\\";\\r\\n\\r\\n  string public constant CALLER_NOT_MANAGER_CONTRACT = \\\"CALLER_NOT_MANAGER_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_MANAGER = \\\"CALLER_NOT_MANAGER\\\";\\r\\n\\r\\n  string public constant CALLER_NOT_CROP_YARD_OR_UPRIGHT_CONTRACT = \\\"CALLER_NOT_CROP_YARD_OR_UPRIGHT_CONTRACT\\\";\\r\\n\\r\\n  string public constant CALLER_NOT_BSC_VIADUCT_CONTRACT = \\\"CALLER_NOT_BSC_VIADUCT_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_ROUTER_CONTRACT = \\\"CALLER_NOT_ROUTER_CONTRACT\\\";\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/Fisk/Fisk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport { IFisk } from \\\"./interface/IFisk.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport { Errors } from \\\"../../common/libraries/helpers/Errors.sol\\\";\\r\\nimport { IAddressesProvider } from \\\"../../common/configuration/AddressProvider/IAddressesProvider.sol\\\";\\r\\n\\r\\ncontract Fisk is IFisk, ReentrancyGuard {\\r\\n  using SafeERC20 for IERC20;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  IAddressesProvider public immutable ADDRESSES_PROVIDER;\\r\\n\\r\\n  // token_address => (account_address => amount)\\r\\n  mapping(address => mapping(address => uint256)) private _allowance; // claim allowance\\r\\n  mapping(address => uint256) private _game_amount; // game amount of user\\r\\n\\r\\n  constructor(IAddressesProvider provider) {\\r\\n    ADDRESSES_PROVIDER = provider;\\r\\n  }\\r\\n\\r\\n  uint256 public _total_farm_fees;\\r\\n  uint256 public _total_whitelist_fees;\\r\\n  /********************************** */\\r\\n  uint256 public _total_bst_fees;\\r\\n  uint256 public _total_stable_token_fees;\\r\\n  uint256 public _total_swap_lp_fees;\\r\\n  uint256 public _total_swap_token_fees;\\r\\n  uint256 public _total_borrow_lend_fees;\\r\\n  uint256 public _total_crop_yard_performance_fees;\\r\\n\\r\\n  /********************************************* */\\r\\n  modifier onlyPrime() {\\r\\n    _onlyPrime();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyPrime() internal view virtual {\\r\\n    require(ADDRESSES_PROVIDER.getPrimeContract() == msg.sender, Errors.CALLER_NOT_PRIME_CONTRACT);\\r\\n  }\\r\\n\\r\\n  modifier onlyWhitelist() {\\r\\n    _onlyWhitelist();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyWhitelist() internal view virtual {\\r\\n    require(ADDRESSES_PROVIDER.getWhitelistContract() == msg.sender, Errors.CALLER_NOT_WHITELIST_CONTRACT);\\r\\n  }\\r\\n\\r\\n  modifier onlyCropYard() {\\r\\n    _onlyCropYard();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyCropYard() internal view virtual {\\r\\n    require(ADDRESSES_PROVIDER.getCropYardContract() == msg.sender, Errors.CALLER_NOT_CROP_YARD_CONTRACT);\\r\\n  }\\r\\n\\r\\n  modifier onlyBorrowLend() {\\r\\n    _onlyBorrowLend();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyBorrowLend() internal view virtual {\\r\\n    require(ADDRESSES_PROVIDER.getBorrowLendContract() == msg.sender, Errors.CALLER_NOT_BORROW_LEND_CONTRACT);\\r\\n  }\\r\\n\\r\\n  modifier onlyUprightStableContract() {\\r\\n    _onlyUprightStableContract();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyUprightStableContract() internal view virtual {\\r\\n    require(ADDRESSES_PROVIDER.getUprightStableContract() == msg.sender, Errors.CALLER_NOT_UPRIGHT_STABLE_CONTRACT);\\r\\n  }\\r\\n\\r\\n  modifier onlyUprightLpContract() {\\r\\n    _onlyUprightLpContract();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyUprightLpContract() internal view virtual {\\r\\n    require(ADDRESSES_PROVIDER.getUprightLpContract() == msg.sender, Errors.CALLER_NOT_UPRIGHT_LP_CONTRACT);\\r\\n  }\\r\\n\\r\\n  modifier onlyUprightSwapTokenContract() {\\r\\n    _onlyUprightSwapTokenContract();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyUprightSwapTokenContract() internal view virtual {\\r\\n    require(ADDRESSES_PROVIDER.getUprightSwapTokenContract() == msg.sender, Errors.CALLER_NOT_UPRIGHT_SWAP_TOKEN_CONTRACT);\\r\\n  }\\r\\n\\r\\n  modifier onlyUprightBstContract() {\\r\\n    _onlyUprightBstContract();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyUprightBstContract() internal view virtual {\\r\\n    require(ADDRESSES_PROVIDER.getUprightBstContract() == msg.sender, Errors.CALLER_NOT_UPRIGHT_BST_CONTRACT);\\r\\n  }\\r\\n\\r\\n  modifier onlyManagerContract() {\\r\\n    _onlyManagerContract();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyManagerContract() internal view virtual {\\r\\n    require(ADDRESSES_PROVIDER.getManagerContract() == msg.sender, Errors.CALLER_NOT_MANAGER_CONTRACT);\\r\\n  }\\r\\n\\r\\n  modifier onlyCropYardOrUpright() {\\r\\n    _onlyCropYardOrUpright();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyCropYardOrUpright() internal view virtual {\\r\\n    require(\\r\\n      ADDRESSES_PROVIDER.getCropYardContract() == msg.sender ||\\r\\n        ADDRESSES_PROVIDER.getUprightStableContract() == msg.sender ||\\r\\n        ADDRESSES_PROVIDER.getUprightLpContract() == msg.sender ||\\r\\n        ADDRESSES_PROVIDER.getUprightSwapTokenContract() == msg.sender ||\\r\\n        ADDRESSES_PROVIDER.getUprightBstContract() == msg.sender,\\r\\n      Errors.CALLER_NOT_CROP_YARD_OR_UPRIGHT_CONTRACT\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /********************************************* */\\r\\n  // OK\\r\\n  function addCropYardFees(uint256 amount) public override nonReentrant onlyCropYard returns (bool) {\\r\\n    _total_farm_fees += amount;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // OK\\r\\n  function addWhitelistFees(uint256 amount) public override nonReentrant onlyWhitelist returns (bool) {\\r\\n    _total_whitelist_fees += amount;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // OK\\r\\n  function addCropYardPerformanceFees(uint256 amount) public override nonReentrant onlyCropYard returns (bool) {\\r\\n    _total_crop_yard_performance_fees += amount;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /*************************************************** */\\r\\n  function addBorrowStakeTokenFees(uint256 amount) public override nonReentrant onlyUprightBstContract returns (bool) {\\r\\n    _total_bst_fees += amount;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function addStableTokensFees(uint256 amount) public override nonReentrant onlyUprightStableContract returns (bool) {\\r\\n    _total_stable_token_fees += amount;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function addSwapLpTokensFees(uint256 amount) public override nonReentrant onlyUprightLpContract returns (bool) {\\r\\n    _total_swap_lp_fees += amount;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function addSwapTokensFees(uint256 amount) public override nonReentrant onlyUprightSwapTokenContract returns (bool) {\\r\\n    _total_swap_token_fees += amount;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function addBorrowLendFees(uint256 amount) public override nonReentrant onlyBorrowLend returns (bool) {\\r\\n    _total_borrow_lend_fees += amount;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /******************************************************** */\\r\\n  // from master for users\\r\\n  function claim(address account, address token) public override nonReentrant onlyPrime returns (bool) {\\r\\n    require(_allowance[token][account] > 0, Errors.LOW_ALLOWANCE);\\r\\n\\r\\n    require(IERC20(token).balanceOf(address(this)) > _allowance[token][account], Errors.LOW_BALANCE);\\r\\n\\r\\n    IERC20(token).transfer(account, _allowance[token][account]);\\r\\n\\r\\n    emit claimedFisk(_allowance[token][account], account);\\r\\n\\r\\n    _allowance[token][account] = 0;\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // for contracts , only\\r\\n  function claimV2(address to, address token, uint256 amount) public override nonReentrant returns (bool) {\\r\\n    require(_allowance[token][msg.sender] > 0, Errors.LOW_ALLOWANCE);\\r\\n\\r\\n    require(IERC20(token).balanceOf(address(this)) > amount, Errors.LOW_BALANCE);\\r\\n\\r\\n    IERC20(token).transfer(to, amount);\\r\\n\\r\\n    emit claimedV2Fisk(amount, to);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /******************************************************** */\\r\\n  function allowance(address account, address token) public view virtual override returns (uint256) {\\r\\n    return _allowance[token][account];\\r\\n  }\\r\\n\\r\\n  function approve(address account, uint256 amount, address token) public override nonReentrant onlyManagerContract returns (bool) {\\r\\n    _allowance[token][account] += amount;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function approvalRest(address account, address token) public override nonReentrant onlyManagerContract returns (bool) {\\r\\n    _allowance[token][account] = 0;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // send spent from here\\r\\n  // callable from only , cropyard, and upright\\r\\n\\r\\n  /********************************************************* */\\r\\n  // NOTE: add RBCA ( stake , master, mod)\\r\\n  // ok , cropyard\\r\\n  function addGameAmount(address account, uint256 amount) public override nonReentrant onlyCropYardOrUpright returns (bool) {\\r\\n    _game_amount[account] += amount;\\r\\n\\r\\n    emit GameAmountAdded(account, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // NOTE: add RBCA\\r\\n  function subGameAmount(address account, uint256 amount) public override nonReentrant onlyManagerContract returns (bool) {\\r\\n    _game_amount[account] -= amount;\\r\\n\\r\\n    emit GameAmountSub(account, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function getGameAmount(address account) public view virtual override returns (uint256) {\\r\\n    return _game_amount[account];\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/Fisk/interface/IFisk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IFisk {\\r\\n  event claimedFisk(uint256 amount, address account);\\r\\n  event claimedV2Fisk(uint256 amount, address account);\\r\\n  event GameAmountAdded(address account, uint256 amount);\\r\\n  event GameAmountSub(address account, uint256 amount);\\r\\n\\r\\n  /********************************************************** */\\r\\n\\r\\n  function addCropYardFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addWhitelistFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addCropYardPerformanceFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  /***********************STAKE*********************** */\\r\\n  function addBorrowStakeTokenFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addStableTokensFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addSwapLpTokensFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addSwapTokensFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addBorrowLendFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  /*************************************************** */\\r\\n\\r\\n  function claim(address account, address token) external returns (bool);\\r\\n\\r\\n  function claimV2(address to, address token, uint256 amount) external returns (bool);\\r\\n\\r\\n  function allowance(address account, address token) external returns (uint256);\\r\\n\\r\\n  function approve(address account, uint256 amount, address token) external returns (bool);\\r\\n\\r\\n  function approvalRest(address account, address token) external returns (bool);\\r\\n\\r\\n  /****************************************************** */\\r\\n\\r\\n  function addGameAmount(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n  function subGameAmount(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n  function getGameAmount(address account) external returns (uint256);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GameAmountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GameAmountSub\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimedFisk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimedV2Fisk\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total_borrow_lend_fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total_bst_fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total_crop_yard_performance_fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total_farm_fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total_stable_token_fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total_swap_lp_fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total_swap_token_fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total_whitelist_fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBorrowLendFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBorrowStakeTokenFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCropYardFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCropYardPerformanceFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addGameAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addStableTokensFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addSwapLpTokensFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addSwapTokensFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addWhitelistFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approvalRest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getGameAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"subGameAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Fisk", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "00000000000000000000000013ed3ac9199ab184f6bafe8453a847d4223867b7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}