{"SourceCode": "// \u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2003\u2003\u2003\u2003\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2003\u2003\r\n    // \u2588\u2588\u2551\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2003\u2003\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2588\u2588\u2554\u255d\u2003\u2003\r\n    // \u2588\u2588\u2588\u2588\u2588\u2550\u255d\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2003\u2003\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2550\u255d\u2591\u2003\u2003\r\n    // \u2588\u2588\u2554\u2550\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2003\u2003\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2588\u2588\u2557\u2591\u2003\u2003\r\n    // \u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u2003\u2003\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2557\u2003\u2003\r\n    // \u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u2003\u2003\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2003\u2003\r\n\r\n    // \u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\r\n    // \u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\r\n    // \u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\r\n    // \u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\r\n    // \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n    // \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\r\n\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract KISSAN_TOKEN_LOCK_V2 is ReentrancyGuard, Ownable {\r\n\r\n    event Lockup(\r\n        uint256 _order_id,\r\n        address indexed _creator,\r\n        address indexed _beneficiary,\r\n        uint256 indexed _amount,\r\n        uint256 _lockedUntil,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    event LockupReverted(\r\n        uint256 _order_id,\r\n        address indexed _creator,\r\n        address indexed _beneficiary,\r\n        uint256 indexed _amount,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    event Withdraw(\r\n        uint256 _order_id,\r\n        address indexed _beneficiary,\r\n        address indexed _caller\r\n    );\r\n\r\n    event lockAdminAdd(address indexed _account);\r\n\r\n    struct TimeLock {\r\n        uint256 order_id;\r\n        address creator;\r\n        address beneficiary;\r\n        uint256 amount;\r\n        uint256 lockedUntil;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    IERC20 public token;\r\n\r\n    mapping(uint256 => TimeLock) public beneficiaryToTimeLock;\r\n    mapping(address => bool) public lockAdmin;\r\n\r\n    modifier onlyLockAdmin(address _account) {\r\n        require(lockAdmin[_account] == true);\r\n        _;\r\n    }\r\n\r\n    constructor(IERC20 _token) {\r\n        token = _token;\r\n        setLockAdmin(msg.sender);\r\n    }\r\n\r\n    function setLockAdmin(address _account) public onlyOwner {\r\n        lockAdmin[_account] = true;\r\n        emit lockAdminAdd(_account);\r\n    }\r\n\r\n    function unsetLockAdmin(address _account) public onlyOwner {\r\n        lockAdmin[_account] = false;\r\n        emit lockAdminAdd(_account);\r\n    }\r\n\r\n    function lock(address _beneficiary, uint256 _amount, uint256 _lockedUntil, uint256 _order_id) public nonReentrant onlyLockAdmin(msg.sender) {\r\n        require(_order_id > 0, \"Order Required for Lock Transaction!\");\r\n        require(_beneficiary != address(0), \"You cannot lock up tokens for the zero address!\");\r\n        require(_amount > 0, \"Lock up amount of zero tokens is invalid!\");\r\n        require(beneficiaryToTimeLock[_order_id].amount == 0, \"Tokens have already been locked up for the given order id!\");\r\n        require(token.allowance(msg.sender, address(this)) >= _amount, \"The contract does not have enough of an allowance to escrow!\");\r\n\r\n        beneficiaryToTimeLock[_order_id] = TimeLock({\r\n            order_id : _order_id,\r\n            creator : msg.sender,\r\n            beneficiary : _beneficiary,\r\n            amount : _amount,\r\n            lockedUntil : _lockedUntil,\r\n            timestamp : block.timestamp\r\n            \r\n        });\r\n\r\n        bool transferSuccess = token.transferFrom(msg.sender, address(this), _amount);\r\n        require(transferSuccess, \"Failed to escrow tokens into the contract\");\r\n\r\n        emit Lockup(_order_id, msg.sender, _beneficiary, _amount, _lockedUntil, block.timestamp);\r\n    }\r\n\r\n    function revertLock(address _beneficiary, uint256 _order_id) public nonReentrant onlyLockAdmin(msg.sender) {\r\n        require(_order_id > 0, \"Order Required for Rewert Transaction!\");\r\n        TimeLock storage lockup = beneficiaryToTimeLock[_order_id];\r\n        require(lockup.creator == msg.sender, \"Cannot revert a lock unless you are the creator\");\r\n        require(lockup.beneficiary == _beneficiary, \"Invaild Locker Address!\");\r\n        require(lockup.amount > 0, \"There are no tokens left to revert lock up for this address\");\r\n        uint256 transferAmount = lockup.amount;\r\n        lockup.amount = 0;\r\n\r\n        bool transferSuccess = token.transfer(lockup.creator, transferAmount);\r\n        require(transferSuccess, \"Failed to send tokens back to lock creator\");\r\n\r\n        emit LockupReverted(_order_id,msg.sender, _beneficiary, transferAmount, block.timestamp);\r\n    }\r\n\r\n    function withdraw(uint256 _order_id) public nonReentrant {\r\n        require(_order_id > 0, \"Order Required for Rewert Transaction!\");\r\n        TimeLock storage lockup = beneficiaryToTimeLock[_order_id];\r\n        require(lockup.beneficiary == msg.sender, \"Invaild Wallet Address, You can't withdraw another wallet balance!\");\r\n        require(lockup.amount > 0, \"There are no tokens locked up for this address\");\r\n        require(block.timestamp >= lockup.lockedUntil, \"Tokens are still locked up\");\r\n        uint256 transferAmount = lockup.amount;\r\n        lockup.amount = 0;\r\n        bool transferSuccess = token.transfer(msg.sender, transferAmount);\r\n        require(transferSuccess, \"Failed to send tokens to the beneficiary\");\r\n        emit Withdraw(_order_id,msg.sender, msg.sender);\r\n    }\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_order_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Lockup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_order_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"LockupReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_order_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"lockAdminAdd\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaryToTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_order_id\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_order_id\",\"type\":\"uint256\"}],\"name\":\"revertLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setLockAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unsetLockAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_order_id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KISSAN_TOKEN_LOCK_V2", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c8a11f433512c16ed895245f34bcc2ca44eb06bd", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://63128adc32733cb70ed6f629875106e172553cbd47ec70f478ff163fa35b9eac"}