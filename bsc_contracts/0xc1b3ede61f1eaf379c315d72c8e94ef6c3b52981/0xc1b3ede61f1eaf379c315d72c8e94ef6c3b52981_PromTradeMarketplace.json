{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/trade-marketplace/trade-marketplace/PromTradeMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.7;\\n\\nimport \\\"./TradeMarketplaceCore.sol\\\";\\n\\ncontract PromTradeMarketplace is TradeMarketplaceCore {\\n  constructor(\\n    address _addressRegistry,\\n    address _promToken,\\n    address _pauser,\\n    address _oracle,\\n    uint16 _promFeeDiscount\\n  ) {\\n    _setupRole(ADMIN_SETTER, msg.sender);\\n    _setupRole(PAUSER, _pauser);\\n    addressRegistry = IPromAddressRegistry(_addressRegistry);\\n    promToken = _promToken;\\n    oracle = IPromOracle(_oracle);\\n    promFeeDiscount = _promFeeDiscount;\\n  }\\n\\n  function multicallList(\\n    address[] memory _nftAddresses,\\n    uint256[] memory _tokenIds,\\n    uint256[] memory _quantities,\\n    address[] memory _payTokens,\\n    uint256[] memory _pricePerItems,\\n    uint256[] memory _startingTimes,\\n    uint256[] memory _endTimes\\n  ) public {\\n    for (uint256 i = 0; i < _nftAddresses.length; i++) {\\n      listItem(\\n        _nftAddresses[i],\\n        _tokenIds[i],\\n        _quantities[i],\\n        _payTokens[i],\\n        _pricePerItems[i],\\n        _startingTimes[i],\\n        _endTimes[i]\\n      );\\n    }\\n  }\\n\\n  function multicallBuy(\\n    address[] calldata _nftAddresses,\\n    uint256[] calldata _tokenIds,\\n    address[] calldata _owners,\\n    uint256[] calldata _nonces\\n  ) public payable {\\n    for (uint256 i = 0; i < _nftAddresses.length; i++) {\\n      buyItem(_nftAddresses[i], _tokenIds[i], _owners[i], _nonces[i]);\\n    }\\n  }\\n\\n  function multicallBuyWithFeeInProm(\\n    address[] calldata _nftAddresses,\\n    uint256[] calldata _tokenIds,\\n    address[] calldata _owners,\\n    uint256[] calldata _nonces\\n  ) public payable {\\n    for (uint256 i = 0; i < _nftAddresses.length; i++) {\\n      buyItemWithFeeInProm(\\n        _nftAddresses[i],\\n        _tokenIds[i],\\n        _owners[i],\\n        _nonces[i]\\n      );\\n    }\\n  }\\n\\n  function multicallCancel(\\n    address[] calldata _nftAddresses,\\n    uint256[] calldata _tokenIds\\n  ) public {\\n    for (uint256 i = 0; i < _nftAddresses.length; i++) {\\n      cancelListing(_nftAddresses[i], _tokenIds[i]);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/trade-marketplace/trade-marketplace/TradeMarketplaceCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./TradeMarketplaceOffers.sol\\\";\\n\\ncontract TradeMarketplaceCore is ReentrancyGuard, TradeMarketplaceOffers {\\n  /** \\n   @notice Method for listing NFT\\n   @param _nftAddress Address of NFT token for sale\\n   @param _tokenId Token ID of NFT token for sale\\n   @param _quantity token amount to list (needed for ERC-1155 NFTs, set as 1 for ERC-721)\\n   @param _payToken Paying token\\n   @param _pricePerItem sale price for an iteam\\n   @param _startingTime starting timestamp after which item may be bought\\n   @param _endTime end timestamp after which item after which item may not be bough anymore\\n  */\\n  function listItem(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    uint256 _quantity,\\n    address _payToken,\\n    uint256 _pricePerItem,\\n    uint256 _startingTime,\\n    uint256 _endTime\\n  ) public onlyAssetOwner(_nftAddress, _tokenId, _quantity) {\\n    _checkListing(_nftAddress, _tokenId, msg.sender, _payToken, _quantity);\\n\\n    listings[_nftAddress][_tokenId][msg.sender] = Listing({\\n      quantity: _quantity,\\n      payToken: _payToken,\\n      pricePerItem: _pricePerItem,\\n      startingTime: _startingTime,\\n      endTime: _endTime,\\n      nonce: block.number\\n    });\\n    emit ItemListed(\\n      msg.sender,\\n      _nftAddress,\\n      _tokenId,\\n      _quantity,\\n      _payToken,\\n      _pricePerItem,\\n      _startingTime,\\n      _endTime\\n    );\\n  }\\n\\n  /// @notice Method for canceling listed NFT\\n  function cancelListing(address _nftAddress, uint256 _tokenId)\\n    public\\n    isListed(_nftAddress, _tokenId, msg.sender)\\n    onlyAssetOwner(\\n      _nftAddress,\\n      _tokenId,\\n      listings[_nftAddress][_tokenId][msg.sender].quantity\\n    )\\n  {\\n    delete (listings[_nftAddress][_tokenId][msg.sender]);\\n    emit ItemCanceled(msg.sender, _nftAddress, _tokenId);\\n  }\\n\\n  /** \\n   @notice Method for updating listed NFT for sale\\n   @param _nftAddress Address of NFT token for sale\\n   @param _tokenId Token ID of NFT token for sale\\n   @param _payToken payment token\\n   @param _newPricePerItem New sale price for the item\\n  */\\n\\n  function updateListing(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _payToken,\\n    uint256 _newPricePerItem\\n  )\\n    external\\n    isListed(_nftAddress, _tokenId, msg.sender)\\n    onlyAssetOwner(\\n      _nftAddress,\\n      _tokenId,\\n      listings[_nftAddress][_tokenId][msg.sender].quantity\\n    )\\n  {\\n    Listing storage listedItem = listings[_nftAddress][_tokenId][msg.sender];\\n\\n    _validPayToken(_payToken);\\n\\n    listedItem.payToken = _payToken;\\n    listedItem.pricePerItem = _newPricePerItem;\\n    listedItem.nonce = block.number;\\n    emit ItemUpdated(\\n      msg.sender,\\n      _nftAddress,\\n      _tokenId,\\n      _payToken,\\n      _newPricePerItem\\n    );\\n  }\\n\\n  /** \\n   @notice Method for buying listed NFT\\n   @param _nftAddress Address of NFT token for sale\\n   @param _tokenId Token Id of NFT token for sale\\n   @param _owner listing's creator (owner of the item)\\n   @param _nonce nonce of the listing. Can be found by calling listings mapping\\n  */\\n  function buyItem(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _owner,\\n    uint256 _nonce\\n  )\\n    public\\n    payable\\n    whenNotPaused\\n    nonReentrant\\n    isListed(_nftAddress, _tokenId, _owner)\\n    validListing(_nftAddress, _tokenId, _owner)\\n  {\\n    Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n\\n    _handleListingPayment(listedItem, _owner, _nftAddress);\\n\\n    _transferNft(\\n      _nftAddress,\\n      _owner,\\n      msg.sender,\\n      _tokenId,\\n      listedItem.quantity\\n    );\\n\\n    require(\\n      listings[_nftAddress][_tokenId][_owner].nonce == _nonce,\\n      \\\"listing was updated\\\"\\n    );\\n\\n    emit ItemSold(\\n      _owner,\\n      msg.sender,\\n      _nftAddress,\\n      _tokenId,\\n      listedItem.quantity,\\n      listedItem.payToken,\\n      listedItem.pricePerItem\\n    );\\n    delete (listings[_nftAddress][_tokenId][_owner]);\\n  }\\n\\n  /** \\n   @notice Method for buying listed NFT. This method takes payment in a PROM token instead of listing paymentToken\\n   @param _nftAddress Address of NFT token for sale\\n   @param _tokenId Token Id of NFT token for sale\\n   @param _owner listing's creator (owner of the item)\\n   @param _nonce nonce of the listing. Can be found by calling listings mapping\\n  */\\n  function buyItemWithFeeInProm(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _owner,\\n    uint256 _nonce\\n  )\\n    public\\n    payable\\n    nonReentrant\\n    whenNotPaused\\n    isListed(_nftAddress, _tokenId, _owner)\\n    validListing(_nftAddress, _tokenId, _owner)\\n  {\\n    require(promToken != address(0), \\\"prom fees not enabled\\\");\\n    Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n\\n    _handleListingPaymentProm(listedItem, _owner, _nftAddress);\\n\\n    _transferNft(\\n      _nftAddress,\\n      _owner,\\n      msg.sender,\\n      _tokenId,\\n      listedItem.quantity\\n    );\\n\\n    require(\\n      listings[_nftAddress][_tokenId][_owner].nonce == _nonce,\\n      \\\"listing was updated\\\"\\n    );\\n\\n    emit ItemSold(\\n      _owner,\\n      msg.sender,\\n      _nftAddress,\\n      _tokenId,\\n      listedItem.quantity,\\n      listedItem.payToken,\\n      listedItem.pricePerItem\\n    );\\n    delete (listings[_nftAddress][_tokenId][_owner]);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/trade-marketplace/trade-marketplace/TradeMarketplaceOffers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.7;\\n\\nimport \\\"./TradeMarketplaceUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract TradeMarketplaceOffers is TradeMarketplaceUtils, ReentrancyGuard {\\n  /** \\n   @notice Method for offering item\\n   @param _nftAddress NFT contract address\\n   @param _tokenId TokenId\\n   @param _payToken Paying token\\n   @param _quantity Quantity of items\\n   @param _pricePerItem Price per item\\n   @param _deadline Offer expiration\\n  */\\n  function createOffer(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    IERC20 _payToken,\\n    uint256 _quantity,\\n    uint256 _pricePerItem,\\n    uint256 _deadline\\n  ) external offerNotExists(_nftAddress, _tokenId, msg.sender) {\\n    require(\\n      IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721) ||\\n        IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155),\\n      \\\"invalid nft address\\\"\\n    );\\n\\n    require(_deadline > block.timestamp, \\\"invalid expiration\\\");\\n\\n    _validPayToken(address(_payToken));\\n    require(\\n      address(_payToken) != address(0),\\n      \\\"only erc20 supported for offers\\\"\\n    );\\n    require(\\n      _payToken.allowance(msg.sender, address(this)) >=\\n        _pricePerItem * _quantity,\\n      \\\"allowance is too smal\\\"\\n    );\\n\\n    offers[_nftAddress][_tokenId][msg.sender] = Offer(\\n      _payToken,\\n      _quantity,\\n      _pricePerItem,\\n      _deadline,\\n      block.timestamp\\n    );\\n\\n    emit OfferCreated(\\n      msg.sender,\\n      _nftAddress,\\n      _tokenId,\\n      _quantity,\\n      address(_payToken),\\n      _pricePerItem,\\n      _deadline\\n    );\\n  }\\n\\n  /** \\n  @notice Method for canceling the offer\\n  @param _nftAddress NFT contract address\\n  @param _tokenId TokenId\\n  */\\n  function cancelOffer(address _nftAddress, uint256 _tokenId)\\n    external\\n    offerExists(_nftAddress, _tokenId, msg.sender)\\n  {\\n    delete (offers[_nftAddress][_tokenId][msg.sender]);\\n    emit OfferCanceled(msg.sender, _nftAddress, _tokenId);\\n  }\\n\\n  /** \\n   @notice Method for accepting the offer\\n   @param _nftAddress NFT contract address\\n   @param _tokenId TokenId\\n   @param _creator Offer creator address\\n  */\\n  function acceptOffer(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _creator,\\n    uint256 _offerNonce\\n  )\\n    external\\n    offerExists(_nftAddress, _tokenId, _creator)\\n    onlyAssetOwner(\\n      _nftAddress,\\n      _tokenId,\\n      offers[_nftAddress][_tokenId][_creator].quantity\\n    )\\n    nonReentrant\\n  {\\n    Offer memory offer = offers[_nftAddress][_tokenId][_creator];\\n    uint16 fee = _checkCollection(_nftAddress);\\n    _handleOfferPayment(offer, _creator, _nftAddress, fee);\\n\\n    _transferNft(_nftAddress, msg.sender, _creator, _tokenId, offer.quantity);\\n\\n    require(offer.offerNonce == _offerNonce, \\\"offer was changed\\\");\\n    emit ItemSold(\\n      msg.sender,\\n      _creator,\\n      _nftAddress,\\n      _tokenId,\\n      offer.quantity,\\n      address(offer.payToken),\\n      offer.pricePerItem\\n    );\\n    emit OfferCanceled(_creator, _nftAddress, _tokenId);\\n\\n    delete (listings[_nftAddress][_tokenId][msg.sender]);\\n    delete (offers[_nftAddress][_tokenId][_creator]);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/trade-marketplace/trade-marketplace/TradeMarketplaceUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./TradeMarketplaceValidator.sol\\\";\\n\\ncontract TradeMarketplaceUtils is TradeMarketplaceValidator {\\n  using SafeERC20 for IERC20;\\n\\n  ////////////////////////////\\n  /// Internal and Private ///\\n  ////////////////////////////\\n\\n  function _transferNft(\\n    address _nftAddress,\\n    address _from,\\n    address _to,\\n    uint256 _tokenId,\\n    uint256 _quantity\\n  ) internal {\\n    if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n      IERC721(_nftAddress).safeTransferFrom(_from, _to, _tokenId);\\n    } else {\\n      IERC1155(_nftAddress).safeTransferFrom(\\n        _from,\\n        _to,\\n        _tokenId,\\n        _quantity,\\n        bytes(\\\"0x\\\")\\n      );\\n    }\\n  }\\n\\n  function _validPayToken(address _payToken) internal view {\\n    require(\\n      (IPromAddressRegistry(addressRegistry).isTokenEligible(_payToken)),\\n      \\\"invalid pay token\\\"\\n    );\\n  }\\n\\n  function _getFees(\\n    uint256 price,\\n    address _nftAddress,\\n    uint16 _collectionFee\\n  )\\n    internal\\n    view\\n    returns (\\n      uint256 royaltyFee,\\n      uint256 totalFeeAmount,\\n      address royaltyFeeReceiver\\n    )\\n  {\\n    if (_collectionFee != 10000) {\\n      totalFeeAmount = (price * _collectionFee) / 1e4;\\n    }\\n    royaltyFee =\\n      ((price - totalFeeAmount) * collectionRoyalties[_nftAddress].royalty) /\\n      1e4;\\n    totalFeeAmount = totalFeeAmount + royaltyFee;\\n    royaltyFeeReceiver = collectionRoyalties[_nftAddress].feeRecipient;\\n  }\\n\\n  function _handleOfferPayment(\\n    Offer memory _offer,\\n    address _creator,\\n    address _nftAddress,\\n    uint16 _collectionFee\\n  ) internal {\\n    uint256 price = _offer.pricePerItem * _offer.quantity;\\n    (\\n      uint256 royaltyFee,\\n      uint256 feeAmount,\\n      address royaltyFeeReceiver\\n    ) = _getFees(price, _nftAddress, _collectionFee);\\n\\n    _handlePayment(\\n      _nftAddress,\\n      address(_offer.payToken),\\n      _creator,\\n      msg.sender,\\n      price,\\n      royaltyFee,\\n      feeAmount,\\n      royaltyFeeReceiver\\n    );\\n  }\\n\\n  function _handleListingPayment(\\n    Listing memory _listing,\\n    address _owner,\\n    address _nftAddress\\n  ) internal {\\n    uint256 price = _listing.pricePerItem * _listing.quantity;\\n    uint16 fee = _checkCollection(_nftAddress);\\n    (\\n      uint256 royaltyFee,\\n      uint256 feeAmount,\\n      address royaltyFeeReceiver\\n    ) = _getFees(price, _nftAddress, fee);\\n\\n    _handlePayment(\\n      _nftAddress,\\n      _listing.payToken,\\n      msg.sender,\\n      _owner,\\n      price,\\n      royaltyFee,\\n      feeAmount,\\n      royaltyFeeReceiver\\n    );\\n  }\\n\\n  function _checkCollection(address _collectionAddress)\\n    internal\\n    view\\n    returns (uint16 collectionFee)\\n  {\\n    collectionFee = addressRegistry.isTradeCollectionEnabled(\\n      _collectionAddress\\n    );\\n    require(collectionFee != 0, \\\"collection not enabled\\\");\\n  }\\n\\n  function _handleListingPaymentProm(\\n    Listing memory _listing,\\n    address _owner,\\n    address _nftAddress\\n  ) internal {\\n    uint256 price = _listing.pricePerItem * _listing.quantity;\\n    uint16 fee = _checkCollection(_nftAddress);\\n    (\\n      uint256 royaltyFee,\\n      uint256 feeAmount,\\n      address royaltyFeeReceiver\\n    ) = _getFees(price, _nftAddress, fee);\\n\\n    if (royaltyFee > 0) {\\n      _transfer(msg.sender, royaltyFeeReceiver, royaltyFee, _listing.payToken);\\n      emit RoyaltyPayed(_nftAddress, royaltyFee);\\n    }\\n\\n    _handlePromPayment(_listing.payToken, _owner, price, royaltyFee, feeAmount);\\n  }\\n\\n  function _handlePromPayment(\\n    address _paymentToken,\\n    address _receiver,\\n    uint256 _price,\\n    uint256 _royaltyFee,\\n    uint256 _totalFee\\n  ) internal {\\n    uint256 promFee = oracle.convertTokenValue(\\n      _paymentToken,\\n      _totalFee - _royaltyFee,\\n      promToken\\n    );\\n    if (promFee > promFeeDiscount) {\\n      promFee = promFee - promFeeDiscount;\\n      _totalFee = _totalFee - promFeeDiscount;\\n    }\\n    _transfer(\\n      msg.sender,\\n      addressRegistry.tradeMarketplaceFeeReceiver(),\\n      promFee,\\n      promToken\\n    );\\n\\n    _transfer(msg.sender, _receiver, _price - _totalFee, _paymentToken);\\n  }\\n\\n  function _handlePayment(\\n    address _nftAddress,\\n    address _paymentToken,\\n    address _from, // msg.sender for buy, offer create for accepting offers\\n    address _receiver,\\n    uint256 _price,\\n    uint256 _royaltyFee,\\n    uint256 _totalFee,\\n    address royaltyFeeReceiver\\n  ) internal {\\n    if (_royaltyFee > 0) {\\n      _transfer(_from, royaltyFeeReceiver, _royaltyFee, _paymentToken);\\n      emit RoyaltyPayed(_nftAddress, _royaltyFee);\\n    }\\n\\n    _transfer(\\n      _from,\\n      addressRegistry.tradeMarketplaceFeeReceiver(),\\n      _totalFee - _royaltyFee,\\n      _paymentToken\\n    );\\n\\n    _transfer(_from, _receiver, _price - _totalFee, _paymentToken);\\n  }\\n\\n  function _checkIfListed(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _seller\\n  ) internal view {\\n    require(\\n      listings[_nftAddress][_tokenId][_seller].quantity == 0,\\n      \\\"already listed\\\"\\n    );\\n  }\\n\\n  function _checkListing(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _seller,\\n    address _payToken,\\n    uint256 _quantity\\n  ) internal view {\\n    _checkIfListed(_nftAddress, _tokenId, _seller);\\n    _checkCollection(_nftAddress);\\n    _validPayToken(_payToken);\\n\\n    require(_quantity > 0, \\\"invalid quantity\\\");\\n\\n    if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n      require(_quantity == 1, \\\"invalid quantity\\\");\\n    } else {\\n      require(_quantity > 0, \\\"invalid _quantity\\\");\\n    }\\n  }\\n\\n  function _transfer(\\n    address _from,\\n    address _to,\\n    uint256 _amount,\\n    address _paymentToken\\n  ) internal {\\n    if (_paymentToken == address(0)) {\\n      require(msg.value >= _amount, \\\"not enough value\\\");\\n      (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n      require(success, \\\"Should transfer ethers\\\");\\n    } else {\\n      if (_from == address(this)) {\\n        IERC20(_paymentToken).safeTransfer(_to, _amount);\\n      } else {\\n        IERC20(_paymentToken).safeTransferFrom(_from, _to, _amount);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/trade-marketplace/trade-marketplace/TradeMarketplaceValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.7;\\n\\nimport \\\"./TradeMarketplaceGuard.sol\\\";\\n\\ncontract TradeMarketplaceValidator is TradeMarketplaceGuard {\\n  /**\\n    @notice Validate and cancel listing\\n    @dev Only bundle marketplace can access\\n    @param _nftAddress address of the NFT which will be sold\\n    @param _tokenId token id of the NFT which will be sold\\n    @param _seller address of the seller\\n   */\\n  function validateItemSold(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _seller\\n  ) external onlyBundleMarketplace {\\n    Listing memory item = listings[_nftAddress][_tokenId][_seller];\\n    if (item.quantity > 0) {\\n      delete (listings[_nftAddress][_tokenId][_seller]);\\n      emit ItemSoldInBundle(msg.sender, _nftAddress, _tokenId);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/trade-marketplace/trade-marketplace/TradeMarketplaceGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.7;\\n\\nimport \\\"./TradeMarketplaceStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract TradeMarketplaceGuard is\\n  TradeMarketplaceStorage,\\n  Pausable,\\n  AccessControl\\n{\\n  modifier onlyBundleMarketplace() {\\n    require(\\n      address(addressRegistry.bundleMarketplace()) == msg.sender,\\n      \\\"sender must be bundle marketplace\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyAssetOwner(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    uint256 _quantity\\n  ) {\\n    if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n      IERC721 nft = IERC721(_nftAddress);\\n      require(nft.ownerOf(_tokenId) == msg.sender, \\\"not owning item\\\");\\n      require(\\n        nft.isApprovedForAll(msg.sender, address(this)) ||\\n          IERC721(_nftAddress).getApproved(_tokenId) == address(this),\\n        \\\"item not approved\\\"\\n      );\\n    } else if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)) {\\n      IERC1155 nft = IERC1155(_nftAddress);\\n      require(\\n        nft.balanceOf(msg.sender, _tokenId) >= _quantity,\\n        \\\"must hold enough nfts\\\"\\n      );\\n      require(\\n        nft.isApprovedForAll(msg.sender, address(this)),\\n        \\\"item not approved\\\"\\n      );\\n    } else {\\n      revert(\\\"invalid nft address\\\");\\n    }\\n    _;\\n  }\\n\\n  // TODO: Change\\n  modifier validListing(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _owner\\n  ) {\\n    Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n\\n    _validOwner(_nftAddress, _tokenId, _owner, listedItem.quantity);\\n\\n    require(\\n      block.timestamp >= listedItem.startingTime &&\\n        block.timestamp <= listedItem.endTime,\\n      \\\"item not buyable\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier offerExists(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _creator\\n  ) {\\n    Offer memory offer = offers[_nftAddress][_tokenId][_creator];\\n    require(\\n      offer.quantity > 0 && offer.deadline > block.timestamp,\\n      \\\"offer not exists or expired\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier offerNotExists(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _creator\\n  ) {\\n    Offer memory offer = offers[_nftAddress][_tokenId][_creator];\\n    require(\\n      offer.quantity == 0 || offer.deadline <= block.timestamp,\\n      \\\"offer already created\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier isListed(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _owner\\n  ) {\\n    Listing memory listing = listings[_nftAddress][_tokenId][_owner];\\n    require(listing.quantity > 0, \\\"not listed item\\\");\\n    _;\\n  }\\n\\n  function _validOwner(\\n    address _nftAddress,\\n    uint256 _tokenId,\\n    address _owner,\\n    uint256 _quantity\\n  ) internal view {\\n    if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n      IERC721 nft = IERC721(_nftAddress);\\n      require(nft.ownerOf(_tokenId) == _owner, \\\"not owning item\\\");\\n    } else if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)) {\\n      IERC1155 nft = IERC1155(_nftAddress);\\n      require(nft.balanceOf(_owner, _tokenId) >= _quantity, \\\"not owning item\\\");\\n    } else {\\n      revert(\\\"invalid nft address\\\");\\n    }\\n  }\\n\\n  /**\\n     @notice Update PromAddressRegistry contract\\n     @dev Only admin\\n     @param _registry new adress to be set for AdressRegistry\\n     */\\n  function updateAddressRegistry(address _registry)\\n    external\\n    onlyRole(ADMIN_SETTER)\\n  {\\n    addressRegistry = IPromAddressRegistry(_registry);\\n  }\\n\\n  /** \\n  @notice Method for setting royalty\\n  @param _nftAddress NFT contract address\\n  @param _royalty Royalty\\n  @param _feeRecipient address where the fees will be sent to\\n  */\\n  function registerCollectionRoyalty(\\n    address _nftAddress,\\n    uint16 _royalty,\\n    address _feeRecipient\\n  ) external onlyRole(ADMIN_SETTER) {\\n    require(_royalty <= 10000, \\\"invalid royalty\\\");\\n    require(_feeRecipient != address(0), \\\"invalid fee recipient address\\\");\\n\\n    collectionRoyalties[_nftAddress] = CollectionRoyalty(\\n      _royalty,\\n      _feeRecipient\\n    );\\n  }\\n\\n  function updatePromFeeDiscount(uint16 _newFee)\\n    external\\n    onlyRole(ADMIN_SETTER)\\n  {\\n    promFeeDiscount = _newFee;\\n  }\\n\\n  function updateOracle(address _newOracle) external onlyRole(ADMIN_SETTER) {\\n    oracle = IPromOracle(_newOracle);\\n  }\\n\\n  function togglePause() external onlyRole(PAUSER) {\\n    if (paused()) {\\n      _unpause();\\n    } else {\\n      _pause();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/trade-marketplace/trade-marketplace/TradeMarketplaceStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPromAddressRegistry {\\n  function bundleMarketplace() external view returns (address);\\n\\n  function isTokenEligible(address) external view returns (bool);\\n\\n  function isTradeCollectionEnabled(address) external view returns (uint16);\\n\\n  function tradeMarketplaceFeeReceiver() external view returns (address);\\n}\\n\\ninterface IPromOracle {\\n  function convertTokenValue(\\n    address,\\n    uint256,\\n    address\\n  ) external returns (uint256);\\n}\\n\\ncontract TradeMarketplaceStorage {\\n  bytes32 internal constant ADMIN_SETTER = keccak256(\\\"ADMIN_SETTER\\\");\\n  bytes32 internal constant PAUSER = keccak256(\\\"PAUSER\\\");\\n\\n  /// @notice Structure for listed items\\n  struct Listing {\\n    uint256 quantity;\\n    address payToken;\\n    uint256 pricePerItem;\\n    uint256 startingTime;\\n    uint256 endTime;\\n    uint256 nonce;\\n  }\\n\\n  /// @notice Structure for offer\\n  struct Offer {\\n    IERC20 payToken;\\n    uint256 quantity;\\n    uint256 pricePerItem;\\n    uint256 deadline;\\n    uint256 offerNonce;\\n  }\\n\\n  struct CollectionRoyalty {\\n    uint16 royalty;\\n    address feeRecipient;\\n  }\\n\\n  uint16 public promFeeDiscount; // % of discount from 0 to 10000\\n\\n  /// @notice NftAddress -> Token ID -> Owner -> Listing item\\n  mapping(address => mapping(uint256 => mapping(address => Listing)))\\n    public listings;\\n\\n  /// @notice NftAddress -> Token ID -> Offerer -> Offer\\n  mapping(address => mapping(uint256 => mapping(address => Offer)))\\n    public offers;\\n\\n  /// @notice NftAddress -> Royalty\\n  mapping(address => CollectionRoyalty) public collectionRoyalties;\\n\\n  address public promToken;\\n  IPromOracle public oracle;\\n\\n  /// @notice Address registry\\n  IPromAddressRegistry public addressRegistry;\\n\\n  bytes4 internal constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n  bytes4 internal constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n  /// @notice Events for the contract\\n  event ItemListed(\\n    address indexed owner,\\n    address indexed nft,\\n    uint256 tokenId,\\n    uint256 quantity,\\n    address payToken,\\n    uint256 pricePerItem,\\n    uint256 startingTime,\\n    uint256 endTime\\n  );\\n  event ItemSold(\\n    address indexed seller,\\n    address indexed buyer,\\n    address indexed nft,\\n    uint256 tokenId,\\n    uint256 quantity,\\n    address payToken,\\n    uint256 pricePerItem\\n  );\\n  event ItemSoldInBundle(\\n    address indexed seller,\\n    address indexed nft,\\n    uint256 tokenId\\n  );\\n  event ItemUpdated(\\n    address indexed owner,\\n    address indexed nft,\\n    uint256 tokenId,\\n    address payToken,\\n    uint256 newPrice\\n  );\\n  event ItemCanceled(\\n    address indexed owner,\\n    address indexed nft,\\n    uint256 tokenId\\n  );\\n  event OfferCreated(\\n    address indexed creator,\\n    address indexed nft,\\n    uint256 tokenId,\\n    uint256 quantity,\\n    address payToken,\\n    uint256 pricePerItem,\\n    uint256 deadline\\n  );\\n  event OfferCanceled(\\n    address indexed creator,\\n    address indexed nft,\\n    uint256 tokenId\\n  );\\n  event UpdatePlatformFee(uint16 platformFee);\\n  event RoyaltyPayed(address collection, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_promToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_promFeeDiscount\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemSoldInBundle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"ItemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OfferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"platformFee\",\"type\":\"uint16\"}],\"name\":\"UpdatePlatformFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerNonce\",\"type\":\"uint256\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract IPromAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"buyItemWithFeeInProm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionRoyalties\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"royalty\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"createOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nonces\",\"type\":\"uint256[]\"}],\"name\":\"multicallBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nonces\",\"type\":\"uint256[]\"}],\"name\":\"multicallBuyWithFeeInProm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"multicallCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_payTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pricePerItems\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startingTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endTimes\",\"type\":\"uint256[]\"}],\"name\":\"multicallList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPromOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promFeeDiscount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royalty\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"registerCollectionRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newPricePerItem\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"updatePromFeeDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"validateItemSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PromTradeMarketplace", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000caa3e21f488f723e7212ba564466abb8841cc058000000000000000000000000c0824f1e587ead573e56ea8deab827ebc8e623ec000000000000000000000000a4e179a1522ebcae512bd8df5fc986c444e8e11c000000000000000000000000a4e179a1522ebcae512bd8df5fc986c444e8e11c0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}