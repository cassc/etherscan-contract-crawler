{"SourceCode": "{\"Address.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC165.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\nimport { IERC165 } from \\\"./IERC165.sol\\\" ;\\r\\n\\r\\ncontract ERC165 is IERC165 {\\r\\n\\r\\n    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    mapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\r\\n\\r\\n    constructor() internal {\\r\\n        _registerInterface(_InterfaceId_ERC165);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\r\\n        return _supportedInterfaces[interfaceId];\\r\\n    }\\r\\n\\r\\n    function _registerInterface(bytes4 interfaceId) internal {\\r\\n        require(interfaceId != 0xffffffff);\\r\\n        _supportedInterfaces[interfaceId] = true;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC721.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport { ERC165 } from \\\"./ERC165.sol\\\" ;\\r\\nimport { IERC721 } from \\\"./IERC721.sol\\\" ;\\r\\n\\r\\ncontract IERC721Receiver {\\r\\n\\r\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes memory  _data) public returns(bytes4);\\r\\n}\\r\\n\\r\\ncontract ERC721 is ERC165, IERC721 {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\r\\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\\r\\n\\r\\n    mapping (uint256 =\\u003e address) private _tokenOwner;\\r\\n    mapping (uint256 =\\u003e address) private _tokenApprovals;\\r\\n    mapping (address =\\u003e uint256) private _ownedTokensCount;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e bool)) private _operatorApprovals;\\r\\n\\r\\n    constructor() public {\\r\\n        _registerInterface(_InterfaceId_ERC721);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view returns (uint256) {\\r\\n        require(owner != address(0));\\r\\n        return _ownedTokensCount[owner];\\r\\n    }\\r\\n\\r\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\r\\n        address owner = _tokenOwner[tokenId];\\r\\n        require(owner != address(0));\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function approve(address to, uint256 tokenId) public {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        require(to != owner);\\r\\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\\r\\n\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function getApproved(uint256 tokenId) public view returns (address) {\\r\\n        require(_exists(tokenId));\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address to, bool approved) public {\\r\\n        require(to != msg.sender);\\r\\n        _operatorApprovals[msg.sender][to] = approved;\\r\\n        emit ApprovalForAll(msg.sender, to, approved);\\r\\n    }\\r\\n\\r\\n    function isApprovedForAll(address owner,address operator) public view returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from,address to,uint256 tokenId) public {\\r\\n        require(_isApprovedOrOwner(msg.sender, tokenId));\\r\\n        require(to != address(0));\\r\\n\\r\\n        _clearApproval(from, tokenId);\\r\\n        _removeTokenFrom(from, tokenId);\\r\\n        _addTokenTo(to, tokenId);\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from,address to,uint256 tokenId) public {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from,address to,uint256 tokenId,bytes memory _data) public {\\r\\n        transferFrom(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data));\\r\\n    }\\r\\n\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        address owner = _tokenOwner[tokenId];\\r\\n        return owner != address(0);\\r\\n    }\\r\\n\\r\\n    function _isApprovedOrOwner(address spender,uint256 tokenId) internal view returns (bool) {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 tokenId) internal {\\r\\n        require(to != address(0));\\r\\n        _addTokenTo(to, tokenId);\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _burn(address owner, uint256 tokenId) internal {\\r\\n        _clearApproval(owner, tokenId);\\r\\n        _removeTokenFrom(owner, tokenId);\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    function _addTokenTo(address to, uint256 tokenId) internal {\\r\\n        require(_tokenOwner[tokenId] == address(0));\\r\\n        _tokenOwner[tokenId] = to;\\r\\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\\r\\n    }\\r\\n\\r\\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\\r\\n        require(ownerOf(tokenId) == from);\\r\\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\\r\\n        _tokenOwner[tokenId] = address(0);\\r\\n    }\\r\\n\\r\\n    function _checkOnERC721Received(address from,address to,uint256 tokenId,bytes memory _data) internal returns (bool) {\\r\\n        if (!to.isContract()) {\\r\\n          return true;\\r\\n        }\\r\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\\r\\n        return (retval == _ERC721_RECEIVED);\\r\\n    }\\r\\n\\r\\n    function _clearApproval(address owner, uint256 tokenId) private {\\r\\n        require(ownerOf(tokenId) == owner);\\r\\n        if (_tokenApprovals[tokenId] != address(0)) {\\r\\n          _tokenApprovals[tokenId] = address(0);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"ERC721Enumerable.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\nimport { IERC721 } from \\\"./IERC721.sol\\\" ;\\r\\nimport { ERC721 } from \\\"./ERC721.sol\\\" ;\\r\\nimport { ERC165 } from \\\"./ERC165.sol\\\" ;\\r\\n\\r\\ncontract IERC721Enumerable is IERC721 {\\r\\n  function totalSupply() public view returns (uint256);\\r\\n  function tokenOfOwnerByIndex(address owner,uint256 index) public view returns (uint256 tokenId);\\r\\n  function tokenByIndex(uint256 index) public view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\\r\\n    mapping(address =\\u003e uint256[]) private _ownedTokens;\\r\\n    mapping(uint256 =\\u003e uint256) private _ownedTokensIndex;\\r\\n    uint256[] private _allTokens;\\r\\n    mapping(uint256 =\\u003e uint256) private _allTokensIndex;\\r\\n\\r\\n    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\\r\\n\\r\\n    constructor() public {\\r\\n        _registerInterface(_InterfaceId_ERC721Enumerable);\\r\\n    }\\r\\n\\r\\n    function tokenOfOwnerByIndex(address owner,uint256 index) public view returns (uint256) {\\r\\n        require(index \\u003c balanceOf(owner));\\r\\n        return _ownedTokens[owner][index];\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _allTokens.length;\\r\\n    }\\r\\n\\r\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\r\\n        require(index \\u003c totalSupply());\\r\\n        return _allTokens[index];\\r\\n    }\\r\\n\\r\\n    function _addTokenTo(address to, uint256 tokenId) internal {\\r\\n        super._addTokenTo(to, tokenId);\\r\\n        uint256 length = _ownedTokens[to].length;\\r\\n        _ownedTokens[to].push(tokenId);\\r\\n        _ownedTokensIndex[tokenId] = length;\\r\\n    }\\r\\n\\r\\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\\r\\n        super._removeTokenFrom(from, tokenId);\\r\\n\\r\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\r\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\r\\n        uint256 lastToken = _ownedTokens[from][lastTokenIndex];\\r\\n\\r\\n        _ownedTokens[from][tokenIndex] = lastToken;\\r\\n        _ownedTokens[from].length--;\\r\\n\\r\\n        _ownedTokensIndex[tokenId] = 0;\\r\\n        _ownedTokensIndex[lastToken] = tokenIndex;\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 tokenId) internal {\\r\\n        super._mint(to, tokenId);\\r\\n\\r\\n        _allTokensIndex[tokenId] = _allTokens.length;\\r\\n        _allTokens.push(tokenId);\\r\\n    }\\r\\n\\r\\n    function _burn(address owner, uint256 tokenId) internal {\\r\\n        super._burn(owner, tokenId);\\r\\n\\r\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\r\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\r\\n        uint256 lastToken = _allTokens[lastTokenIndex];\\r\\n\\r\\n        _allTokens[tokenIndex] = lastToken;\\r\\n        _allTokens[lastTokenIndex] = 0;\\r\\n\\r\\n        _allTokens.length--;\\r\\n        _allTokensIndex[tokenId] = 0;\\r\\n        _allTokensIndex[lastToken] = tokenIndex;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC721Metadata.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\nimport { IERC721 } from \\\"./IERC721.sol\\\" ;\\r\\nimport { ERC721 } from \\\"./ERC721.sol\\\" ;\\r\\nimport { ERC165 } from \\\"./ERC165.sol\\\" ;\\r\\n\\r\\ncontract IERC721Metadata is IERC721 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    mapping(uint256 =\\u003e string) private _tokenURIs;\\r\\n\\r\\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\\r\\n\\r\\n    constructor(string memory name, string memory symbol) public {\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _registerInterface(InterfaceId_ERC721Metadata);\\r\\n    }\\r\\n\\r\\n    function name() external view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() external view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\r\\n        require(_exists(tokenId));\\r\\n        return _tokenURIs[tokenId];\\r\\n    }\\r\\n\\r\\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\\r\\n        require(_exists(tokenId));\\r\\n        _tokenURIs[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    function _burn(address owner, uint256 tokenId) internal {\\r\\n        super._burn(owner, tokenId);\\r\\n\\r\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n            delete _tokenURIs[tokenId];\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"IERC165.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\n// ERC165\\r\\ninterface IERC165 {\\r\\n  \\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"},\"IERC721.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\nimport { IERC165 } from \\\"./IERC165.sol\\\" ;\\r\\n\\r\\ncontract IERC721 is IERC165 {\\r\\n\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\r\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance);\\r\\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\\r\\n\\r\\n    function approve(address _to, uint256 _tokenId) public;\\r\\n    function getApproved(uint256 _tokenId) public view returns (address operator);\\r\\n    function setApprovalForAll(address _operator, bool _approved) public;\\r\\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\\r\\n\\r\\n    function safeTransferFrom(address _from,address _to,uint256 _tokenId,bytes memory _data) public;\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\\r\\n}\\r\\n\"},\"MagicNFT.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\nimport { ERC721 } from \\\"./ERC721.sol\\\" ;\\r\\nimport { ERC721Enumerable } from \\\"./ERC721Enumerable.sol\\\" ;\\r\\nimport { ERC721Metadata } from \\\"./ERC721Metadata.sol\\\" ;\\r\\nimport { MinterRole } from \\\"./MinterRole.sol\\\" ;\\r\\n\\r\\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\\r\\n\\r\\n    constructor(string memory name, string memory symbol) ERC721Metadata(name, symbol) public{}\\r\\n}\\r\\n\\r\\ncontract ERC721Mintable is ERC721, MinterRole {\\r\\n\\r\\n    function mint(address to,uint256 tokenId) public onlyMinter returns (bool) {\\r\\n        _mint(to, tokenId);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\n// Deploy Contract\\r\\ncontract MagicNFT is ERC721Full, ERC721Mintable {\\r\\n\\r\\n    constructor() ERC721Full(\\\"Magic NFTs\\\", \\\"Magic NFT\\\") public {}\\r\\n\\r\\n    // mintNFT\\r\\n    function mintToken(address to, uint256 tokenId, string memory uri) public {\\r\\n        mint(to, tokenId);\\r\\n        require(_exists(tokenId));\\r\\n        _setTokenURI(tokenId, uri);\\r\\n    }\\r\\n\\r\\n    // burnNFT\\r\\n    function burnToken(address owner, uint256 tokenId) public {\\r\\n        _burn(owner, tokenId);\\r\\n    }\\r\\n\\r\\n    // batchNFT\\r\\n    function batchNFT(address to,uint256 num) public {\\r\\n        uint256 nowTokenId = totalSupply();\\r\\n        for(uint256 i=1;i\\u003c=num;i++){\\r\\n            mint(to, nowTokenId.add(i));\\r\\n            require(_exists(nowTokenId.add(i)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"MinterRole.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\nlibrary Roles {\\r\\n\\r\\n    struct Role {\\r\\n        mapping (address =\\u003e bool) bearer;\\r\\n    }\\r\\n\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(account != address(0));\\r\\n        require(!has(role, account));\\r\\n\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(account != address(0));\\r\\n        require(has(role, account));\\r\\n\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0));\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MinterRole {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event MinterAdded(address indexed account);\\r\\n    event MinterRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private minters;\\r\\n\\r\\n    constructor() internal {\\r\\n        _addMinter(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(isMinter(msg.sender));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isMinter(address account) public view returns (bool) {\\r\\n        return minters.has(account);\\r\\n    }\\r\\n\\r\\n    function addMinter(address account) public onlyMinter {\\r\\n        _addMinter(account);\\r\\n    }\\r\\n\\r\\n    function renounceMinter() public {\\r\\n        _removeMinter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addMinter(address account) internal {\\r\\n        minters.add(account);\\r\\n        emit MinterAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeMinter(address account) internal {\\r\\n        minters.remove(account);\\r\\n        emit MinterRemoved(account);\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"batchNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "ContractName": "MagicNFT", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e300f2dff293ac2455affb92d9cf2f25ef24f7725e152f5c0d87a8f5cf0b8a22"}