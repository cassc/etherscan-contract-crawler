{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set & change owner\r\n */\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier onlyOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract MAXIStaking is Ownable, IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Staking Token\r\n    IERC20 public immutable token;\r\n\r\n    // Staking Protocol Token Info\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private immutable _decimals;\r\n\r\n    // Trackable User Info\r\n    struct UserInfo {\r\n        uint256 balance;\r\n        uint256 unlockBlock;\r\n        uint256 totalStaked;\r\n        uint256 totalWithdrawn;\r\n    }\r\n    // User -> UserInfo\r\n    mapping ( address => UserInfo ) public userInfo;\r\n\r\n    // Unstake Early Fee\r\n    uint256 public leaveEarlyFee;\r\n\r\n    // Unstake Early Fee Recipient\r\n    address public leaveEarlyFeeRecipient;\r\n\r\n    // Timer For Leave Early Fee\r\n    uint256 public leaveEarlyFeeTimer;\r\n\r\n    // total supply of MAXI\r\n    uint256 private _totalSupply;\r\n\r\n    // Swapper To Purchase Token From BNB\r\n    address public tokenSwapper;\r\n\r\n    // precision factor\r\n    uint256 private constant precision = 10**18;\r\n\r\n    // Reentrancy Guard\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"Reentrancy Guard call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    // Events\r\n    event Deposit(address depositor, uint256 amountToken);\r\n    event Withdraw(address withdrawer, uint256 amountToken);\r\n    event FeeTaken(uint256 fee);\r\n\r\n    constructor(\r\n        address token_, \r\n        string memory name_, \r\n        string memory symbol_,\r\n        address leaveEarlyFeeRecipient_,\r\n        address tokenSwapper_,\r\n        uint256 leaveEarlyFee_,\r\n        uint256 leaveEarlyFeeTimer_\r\n    ) {\r\n\r\n        require(token_ != address(0), 'Zero Address');\r\n        require(tokenSwapper_ != address(0), 'Zero Address');\r\n        require(leaveEarlyFeeRecipient_ != address(0), 'Zero Address');\r\n        require(leaveEarlyFee_ <= 100, 'Fee Too High');\r\n        require(leaveEarlyFeeTimer_ <= 10**7, 'Fee Timer Too Long');\r\n\r\n        // pair token data\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = IERC20(token_).decimals();\r\n\r\n        // staking data\r\n        leaveEarlyFeeRecipient = leaveEarlyFeeRecipient_;\r\n        leaveEarlyFee = leaveEarlyFee_;\r\n        leaveEarlyFeeTimer = leaveEarlyFeeTimer_;\r\n        tokenSwapper = tokenSwapper_;\r\n\r\n        // pair staking token\r\n        token = IERC20(token_);\r\n\r\n        // set reentrancy\r\n        _status = _NOT_ENTERED;\r\n        \r\n        // emit transfer so bscscan registers contract as token\r\n        emit Transfer(address(0), msg.sender, 0);\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() external view override returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /** Shows The Value Of Users' Staked Token */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return ReflectionsFromContractBalance(userInfo[account].balance);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        if (recipient == msg.sender) {\r\n            withdraw(amount);\r\n        }\r\n        return true;\r\n    }\r\n    function transferFrom(address, address recipient, uint256 amount) external override returns (bool) {\r\n        if (recipient == msg.sender) {\r\n            withdraw(amount);\r\n        }        \r\n        return true;\r\n    }\r\n\r\n    function setLeaveEarlyFee(uint256 newLeaveEarlyFee) external onlyOwner {\r\n        require(\r\n            newLeaveEarlyFee <= 100,\r\n            'Early Fee Too High'\r\n        );\r\n        leaveEarlyFee = newLeaveEarlyFee;\r\n    }\r\n    function setLeaveEarlyFeeRecipient(address newLeaveEarlyFeeRecipient) external onlyOwner {\r\n        require(\r\n            newLeaveEarlyFeeRecipient != address(0),\r\n            'Zero Address'\r\n        );\r\n        leaveEarlyFeeRecipient = newLeaveEarlyFeeRecipient;\r\n    }\r\n    function setLeaveEarlyFeeTimer(uint256 newLeaveEarlyFeeTimer) external onlyOwner {\r\n        require(\r\n            newLeaveEarlyFeeTimer <= 10**7,\r\n            'Fee Timer Too High'\r\n        );\r\n        leaveEarlyFeeTimer = newLeaveEarlyFeeTimer;\r\n    }\r\n    function setTokenSwapper(address newTokenSwapper) external onlyOwner {\r\n        require(\r\n            newTokenSwapper != address(0),\r\n            'Zero Address'\r\n        );\r\n        tokenSwapper = newTokenSwapper;\r\n    }\r\n\r\n    function withdrawBNB() external onlyOwner {\r\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(s, 'Error On BNB Withdrawal');\r\n    }\r\n\r\n    function recoverForeignToken(IERC20 _token) external onlyOwner {\r\n        require(\r\n            address(_token) != address(token),\r\n            'Cannot Withdraw Staking Tokens'\r\n        );\r\n        require(\r\n            _token.transfer(msg.sender, _token.balanceOf(address(this))),\r\n            'Error Withdrawing Foreign Token'\r\n        );\r\n    }\r\n\r\n    /** Native Sent To Contract Will Buy And Stake Token\r\n        Standard Token Purchase Rates Still Apply\r\n     */\r\n    receive() external payable {\r\n        require(msg.value > 0, 'Zero Value');\r\n\r\n        // Track Balance Before Deposit\r\n        uint previousBalance = token.balanceOf(address(this));\r\n\r\n        // Purchase Staking Token\r\n        uint received = _buyToken(msg.value);\r\n\r\n        if (_totalSupply == 0 || previousBalance == 0) {\r\n            _registerFirstPurchase(received);\r\n        } else {\r\n            _mintTo(msg.sender, received, previousBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n        Transfers in `amount` of Token From Sender\r\n        And Locks In Contract, Minting MAXI Tokens\r\n     */\r\n    function deposit(uint256 amount) external nonReentrant {\r\n\r\n        // Track Balance Before Deposit\r\n        uint previousBalance = token.balanceOf(address(this));\r\n\r\n        // Transfer In Token\r\n        uint received = _transferIn(amount);\r\n\r\n        if (_totalSupply == 0 || previousBalance == 0) {\r\n            _registerFirstPurchase(received);\r\n        } else {\r\n            _mintTo(msg.sender, received, previousBalance);\r\n        }        \r\n    }\r\n\r\n    /**\r\n        Redeems `amount` of Underlying Tokens, As Seen From BalanceOf()\r\n     */\r\n    function withdraw(uint256 amount) public nonReentrant returns (uint256) {\r\n\r\n        // Token Amount Into Contract Balance Amount\r\n        uint MAXI_Amount = amount == balanceOf(msg.sender) ? userInfo[msg.sender].balance : TokenToContractBalance(amount);\r\n\r\n        require(\r\n            userInfo[msg.sender].balance > 0 &&\r\n            userInfo[msg.sender].balance >= MAXI_Amount &&\r\n            balanceOf(msg.sender) >= amount &&\r\n            amount > 0 &&\r\n            MAXI_Amount > 0,\r\n            'Insufficient Funds'\r\n        );\r\n\r\n        // burn MAXI Tokens From Sender\r\n        _burn(msg.sender, MAXI_Amount, amount);\r\n\r\n        // increment total withdrawn\r\n        userInfo[msg.sender].totalWithdrawn += amount;\r\n\r\n        // Take Fee If Withdrawn Before Timer\r\n        uint fee = remainingLockTime(msg.sender) == 0 ? 0 : _takeFee(amount.mul(leaveEarlyFee).div(1000));\r\n\r\n        // send amount less fee\r\n        uint256 sendAmount = amount.sub(fee);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        if (sendAmount > balance) {\r\n            sendAmount = balance;\r\n        }\r\n        \r\n        // transfer token to sender\r\n        require(\r\n            token.transfer(msg.sender, sendAmount),\r\n            'Error On Token Transfer'\r\n        );\r\n\r\n        emit Withdraw(msg.sender, sendAmount);\r\n        return sendAmount;\r\n    }\r\n\r\n    function donate() external payable nonReentrant {\r\n        // buy staking token\r\n        _buyToken(address(this).balance);\r\n    }\r\n\r\n    /**\r\n        Registers the First Stake\r\n     */\r\n    function _registerFirstPurchase(uint received) internal {\r\n        \r\n        // increment total staked\r\n        userInfo[msg.sender].totalStaked += received;\r\n\r\n        // mint MAXI Tokens To Sender\r\n        _mint(msg.sender, received, received);\r\n\r\n        emit Deposit(msg.sender, received);\r\n    }\r\n\r\n\r\n    function _takeFee(uint256 fee) internal returns (uint256) {\r\n        require(\r\n            token.transfer(leaveEarlyFeeRecipient, fee),\r\n            'Failure On Fee Transfer'\r\n        );\r\n        emit FeeTaken(fee);\r\n        return fee;\r\n    }\r\n\r\n    function _mintTo(address sender, uint256 received, uint256 previousBalance) internal {\r\n        // Number Of Maxi Tokens To Mint\r\n        uint nToMint = _totalSupply.mul(received).div(previousBalance);\r\n        require(\r\n            nToMint > 0,\r\n            'Zero To Mint'\r\n        );\r\n\r\n        // increment total staked\r\n        userInfo[sender].totalStaked += received;\r\n\r\n        // mint MAXI Tokens To Sender\r\n        _mint(sender, nToMint, received);\r\n\r\n        emit Deposit(sender, received);\r\n    }\r\n\r\n    function _buyToken(uint amount) internal returns (uint256) {\r\n        require(\r\n            amount > 0,\r\n            'Zero Amount'\r\n        );\r\n        uint before = token.balanceOf(address(this));\r\n        (bool s,) = payable(tokenSwapper).call{value: amount}(\"\");\r\n        require(s, 'Failure On Token Purchase');\r\n        uint received = token.balanceOf(address(this)).sub(before);\r\n        require(received > 0, 'Zero Received');\r\n        return received;\r\n    }\r\n\r\n    function _transferIn(uint256 amount) internal returns (uint256) {\r\n        uint before = token.balanceOf(address(this));\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), amount),\r\n            'Failure On TransferFrom'\r\n        );\r\n        uint received = token.balanceOf(address(this)).sub(before);\r\n        require(\r\n            received <= amount && received > 0,\r\n            'Error On Transfer In'\r\n        );\r\n        return received;\r\n    }\r\n\r\n    /**\r\n     * Burns `amount` of Contract Balance Token\r\n     */\r\n    function _burn(address from, uint256 amount, uint256 amountToken) private {\r\n        userInfo[from].balance = userInfo[from].balance.sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(from, address(0), amountToken);\r\n    }\r\n\r\n    /**\r\n     * Mints `amount` of Contract Balance Token\r\n     */\r\n    function _mint(address to, uint256 amount, uint256 stablesWorth) private {\r\n        // allocate\r\n        userInfo[to].balance = userInfo[to].balance.add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        // update locker info\r\n        userInfo[msg.sender].unlockBlock = block.number + leaveEarlyFeeTimer;\r\n        emit Transfer(address(0), to, stablesWorth);\r\n    }\r\n\r\n\r\n    /**\r\n        Converts A Staking Token Amount Into A MAXI Amount\r\n     */\r\n    function TokenToContractBalance(uint256 amount) public view returns (uint256) {\r\n        return amount.mul(precision).div(_calculatePrice());\r\n    }\r\n\r\n    /**\r\n        Converts A MAXI Amount Into An Token Amount\r\n     */\r\n    function ReflectionsFromContractBalance(uint256 amount) public view returns (uint256) {\r\n        return amount.mul(_calculatePrice()).div(precision);\r\n    }\r\n\r\n    /** Conversion Ratio For MAXI -> Token */\r\n    function calculatePrice() external view returns (uint256) {\r\n        return _calculatePrice();\r\n    }\r\n\r\n    /**\r\n        Lock Time Remaining For Stakers\r\n     */\r\n    function remainingLockTime(address user) public view returns (uint256) {\r\n        return userInfo[user].unlockBlock < block.number ? 0 : userInfo[user].unlockBlock - block.number;\r\n    }\r\n\r\n    /** Returns Total Profit for User In Token From MAXI */\r\n    function getTotalProfits(address user) external view returns (uint256) {\r\n        uint top = balanceOf(user) + userInfo[user].totalWithdrawn;\r\n        return top <= userInfo[user].totalStaked ? 0 : top - userInfo[user].totalStaked;\r\n    }\r\n    \r\n    /** Conversion Ratio For MAXI -> Token */\r\n    function _calculatePrice() internal view returns (uint256) {\r\n        uint256 backingValue = token.balanceOf(address(this));\r\n        return (backingValue.mul(precision)).div(_totalSupply);\r\n    }\r\n\r\n    /** function has no use in contract */\r\n    function allowance(address, address) external pure override returns (uint256) { \r\n        return 0;\r\n    }\r\n    /** function has no use in contract */\r\n    function approve(address spender, uint256) public override returns (bool) {\r\n        emit Approval(msg.sender, spender, 0);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"leaveEarlyFeeRecipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSwapper_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leaveEarlyFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leaveEarlyFeeTimer_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReflectionsFromContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenToContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveEarlyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveEarlyFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveEarlyFeeTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"remainingLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLeaveEarlyFee\",\"type\":\"uint256\"}],\"name\":\"setLeaveEarlyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLeaveEarlyFeeRecipient\",\"type\":\"address\"}],\"name\":\"setLeaveEarlyFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLeaveEarlyFeeTimer\",\"type\":\"uint256\"}],\"name\":\"setLeaveEarlyFeeTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenSwapper\",\"type\":\"address\"}],\"name\":\"setTokenSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MAXIStaking", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000557a288a93ed0df218785f2787dac1cd077f8f300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000511dead182a47c60034fedf36ea0714972625e850000000000000000000000005eb3c596bfc39287fb37860b7b5245620931fceb0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000002328000000000000000000000000000000000000000000000000000000000000000084d4442204d4158490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004534d444200000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d9e35b9632512f5e1acc24d8cf80387ab9766d4062edaf3c365520e9d319d6cb"}