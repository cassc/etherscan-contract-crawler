{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity <0.8.0;\\r\\npragma abicoder v2;\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./hardworkInterface/IUnderlyingPool.sol\\\";\\r\\nimport \\\"./hardworkInterface/IController.sol\\\";\\r\\nimport \\\"./hardworkInterface/IStrategyV2.sol\\\";\\r\\nimport \\\"./hardworkInterface/IVault.sol\\\";\\r\\nimport \\\"./Governable.sol\\\";\\r\\n\\r\\ncontract Controller is IController, Governable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping(address => bool) public override greyList;\\r\\n\\r\\n    mapping(address => bool) public override vaults;\\r\\n    address[] public vaultAddresses;\\r\\n\\r\\n    mapping(address => bool) public override rebalancer;\\r\\n\\r\\n    modifier validVault(address _vault) {\\r\\n        require(vaults[_vault], \\\"vault does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyHardWorkerOrGovernance() {\\r\\n        require(\\r\\n            rebalancer[msg.sender] || (msg.sender == governance()),\\r\\n            \\\"only hard worker can call this\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _storage) Governable(_storage) {}\\r\\n\\r\\n    function getAllVaults() external view returns (address[] memory) {\\r\\n        address[] memory addresses = new address[](vaultAddresses.length);\\r\\n        for (uint i = 0; i < vaultAddresses.length; i++) {\\r\\n            if (vaults[vaultAddresses[i]]) {\\r\\n                addresses[i] = vaultAddresses[i];\\r\\n            } else {\\r\\n                addresses[i] = address(0);\\r\\n            }\\r\\n        }\\r\\n        return addresses;\\r\\n    }\\r\\n\\r\\n    function addHardWorker(address _worker) public override onlyGovernance {\\r\\n        require(_worker != address(0), \\\"_worker must be defined\\\");\\r\\n        rebalancer[_worker] = true;\\r\\n    }\\r\\n\\r\\n    function removeHardWorker(address _worker) public override onlyGovernance {\\r\\n        require(_worker != address(0), \\\"_worker must be defined\\\");\\r\\n        rebalancer[_worker] = false;\\r\\n    }\\r\\n\\r\\n    // Only smart contracts will be affected by the greyList.\\r\\n    function addToGreyList(address _target) public override onlyGovernance {\\r\\n        greyList[_target] = true;\\r\\n    }\\r\\n\\r\\n    function removeFromGreyList(\\r\\n        address _target\\r\\n    ) public override onlyGovernance {\\r\\n        greyList[_target] = false;\\r\\n    }\\r\\n\\r\\n    function addVaultAndStrategy(\\r\\n        address _vault,\\r\\n        address _strategy,\\r\\n        uint256 _periodAbleToRebalance,\\r\\n        uint256 _sharingProfitFeeNumerator,\\r\\n        uint256 _sharingProfitFeeDenominator,\\r\\n        uint256 _depositFeeNumerator,\\r\\n        uint256 _depositFeeDenominator,\\r\\n        uint256 _periodToTakeProfit,\\r\\n        address _depositPool\\r\\n    ) external override onlyGovernance {\\r\\n        require(_vault != address(0), \\\"new vault shouldn't be empty\\\");\\r\\n        require(!vaults[_vault], \\\"vault already exists\\\");\\r\\n        require(_strategy != address(0), \\\"new strategy shouldn't be empty\\\");\\r\\n\\r\\n        vaults[_vault] = true;\\r\\n        vaultAddresses.push(_vault);\\r\\n        IVault(_vault).setStrategy(_strategy);\\r\\n        IVault(_vault).initializeParameters(\\r\\n            _periodAbleToRebalance,\\r\\n            _sharingProfitFeeNumerator,\\r\\n            _sharingProfitFeeDenominator,\\r\\n            _depositFeeNumerator,\\r\\n            _depositFeeDenominator,\\r\\n            _periodToTakeProfit,\\r\\n            _depositPool\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function rebalanceWithParameters(\\r\\n        address _vault,\\r\\n        uint256 _toInvestNumerator,\\r\\n        uint256 _toInvestDenominator,\\r\\n        uint256 _gasUnitRequired,\\r\\n        uint256 _pricePerGasUnit\\r\\n    ) external override onlyHardWorkerOrGovernance {\\r\\n        IVault(_vault).setVaultFractionToInvest(\\r\\n            _toInvestNumerator,\\r\\n            _toInvestDenominator\\r\\n        );\\r\\n        IStrategyV2(IVault(_vault).strategy()).setPricePerGasUnit(\\r\\n            _gasUnitRequired\\r\\n        );\\r\\n        IStrategyV2(IVault(_vault).strategy()).setGasUnitRequired(\\r\\n            _pricePerGasUnit\\r\\n        );\\r\\n        IVault(_vault).rebalance(msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdrawAll(\\r\\n        address _vault\\r\\n    ) external override onlyGovernance validVault(_vault) {\\r\\n        IVault(_vault).withdrawAll();\\r\\n    }\\r\\n\\r\\n    function setStrategy(\\r\\n        address _vault,\\r\\n        address strategy\\r\\n    ) external override onlyGovernance validVault(_vault) {\\r\\n        IVault(_vault).setStrategy(strategy);\\r\\n    }\\r\\n\\r\\n    // transfers token in the controller contract to the governance\\r\\n    function salvage(\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external override onlyGovernance {\\r\\n        IERC20(_token).safeTransfer(governance(), _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawalProfit(\\r\\n        uint256 _amount,\\r\\n        address _vault\\r\\n    ) external override onlyGovernance validVault(_vault) {\\r\\n        require(_amount > 0);\\r\\n        IUnderlyingPool(IVault(_vault).underlyingPool()).withdrawalProfit(\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setNextTimeAbleToRebalance(\\r\\n        address _vault,\\r\\n        uint256 _period\\r\\n    ) external override onlyGovernance validVault(_vault) {\\r\\n        IVault(_vault).setNextTimeAbleToRebalance(_period);\\r\\n    }\\r\\n\\r\\n    function setSharingProfitFraction(\\r\\n        address _vault,\\r\\n        uint256 _numerator,\\r\\n        uint256 _denominator\\r\\n    ) external override onlyGovernance validVault(_vault) {\\r\\n        IVault(_vault).setVaultFractionToTakeProfit(_numerator, _denominator);\\r\\n    }\\r\\n\\r\\n    function setDepositFeeFraction(\\r\\n        address _vault,\\r\\n        uint256 _numerator,\\r\\n        uint256 _denominator\\r\\n    ) external override onlyGovernance validVault(_vault) {\\r\\n        IVault(_vault).setDepositFee(_numerator, _denominator);\\r\\n    }\\r\\n\\r\\n    function setNextTimeToTakeProfit(\\r\\n        address _vault,\\r\\n        uint256 _period\\r\\n    ) external override onlyGovernance validVault(_vault) {\\r\\n        IVault(_vault).setNextTimeToTakeProfit(_period);\\r\\n    }\\r\\n\\r\\n    function setFeePool(\\r\\n        address _vault,\\r\\n        address _pool\\r\\n    ) external override onlyGovernance validVault(_vault) {\\r\\n        require(\\r\\n            address(IUnderlyingPool(_pool).underlying()) ==\\r\\n                IVault(_vault).underlyingPool(),\\r\\n            \\\"pool must for underlying\\\"\\r\\n        );\\r\\n        IVault(_vault).setFeePool(_pool);\\r\\n    }\\r\\n\\r\\n    function removeVault(\\r\\n        address _vault\\r\\n    ) public onlyGovernance validVault(_vault) {\\r\\n        vaults[_vault] = false;\\r\\n    }\\r\\n\\r\\n    function lockDepositVault(address _vault, bool _lock) external onlyGovernance validVault(_vault) {\\r\\n        IVault(_vault).setLockDeposit(_lock); \\r\\n    } \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity <0.8.0;\\r\\npragma abicoder v2;\\r\\nimport \\\"./Storage.sol\\\";\\r\\n\\r\\ncontract Governable {\\r\\n    Storage public store;\\r\\n\\r\\n    constructor(address _store) {\\r\\n        require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\r\\n        store = Storage(_store);\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance() {\\r\\n        require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setStorage(address _store) public onlyGovernance {\\r\\n        require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\r\\n        store = Storage(_store);\\r\\n    }\\r\\n\\r\\n    function governance() public view returns (address) {\\r\\n        return store.governance();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/hardworkInterface/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity <0.8.0;\\r\\npragma abicoder v2;\\r\\ninterface IController {\\r\\n    function greyList(address) external view returns (bool);\\r\\n\\r\\n    function vaults(address) external view returns (bool);\\r\\n\\r\\n    function rebalancer(address) external view returns (bool);\\r\\n\\r\\n    function addHardWorker(address _worker) external;\\r\\n\\r\\n    function removeHardWorker(address _worker) external;\\r\\n\\r\\n    function addToGreyList(address _target) external;\\r\\n\\r\\n    function removeFromGreyList(address _target) external;\\r\\n\\r\\n    function addVaultAndStrategy(\\r\\n        address _vault,\\r\\n        address _strategy,\\r\\n        uint256 _periodAbleToRebalance,\\r\\n        uint256 _sharingProfitFeeNumerator,\\r\\n        uint256 _sharingProfitFeeDenominator,\\r\\n        uint256 _depositFeeNumerator,\\r\\n        uint256 _depositFeeDenominator,\\r\\n        uint256 _periodToTakeProfit,\\r\\n        address _depositPool\\r\\n    ) external;\\r\\n\\r\\n    function rebalanceWithParameters(\\r\\n        address _vault,\\r\\n        uint256 _toInvestNumerator,\\r\\n        uint256 _toInvestDenominator,\\r\\n        uint256 _gasUnitRequired,\\r\\n        uint256 _pricePerGasUnit\\r\\n    ) external;\\r\\n\\r\\n    // function doHardWorkWithParameters(\\r\\n    //     address _vault,\\r\\n    //     uint256 _toInvestNumerator,\\r\\n    //     uint256 _toInvestDenominator,\\r\\n    //     uint256 _gasUnitRequired,\\r\\n    //     uint256 _pricePerGasUnit\\r\\n    // ) external;\\r\\n\\r\\n    function withdrawAll(address _vault) external;\\r\\n\\r\\n    function setStrategy(address _vault, address strategy) external;\\r\\n\\r\\n    function salvage(address _token, uint256 _amount) external;\\r\\n\\r\\n    function withdrawalProfit(uint256 _amount, address _vault) external;\\r\\n\\r\\n    function setNextTimeAbleToRebalance(\\r\\n        address _vault,\\r\\n        uint256 _period\\r\\n    ) external;\\r\\n\\r\\n    function setSharingProfitFraction(\\r\\n        address _vault,\\r\\n        uint256 _numerator,\\r\\n        uint256 _denominator\\r\\n    ) external;\\r\\n\\r\\n    function setDepositFeeFraction(\\r\\n        address _vault,\\r\\n        uint256 _numerator,\\r\\n        uint256 _denominator\\r\\n    ) external;\\r\\n\\r\\n    function setNextTimeToTakeProfit(address _vault, uint256 _period) external;\\r\\n\\r\\n    function setFeePool(address _vault, address _pool) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/hardworkInterface/IStrategyV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity <0.8.0;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface IStrategyV2 {\\r\\n    function virtualPrice() external view returns (uint256);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function withdrawAllToVault() external;\\r\\n\\r\\n    function withdrawToVault(\\r\\n        uint256 correspondingShares,\\r\\n        uint256 totalShares\\r\\n    ) external;\\r\\n\\r\\n    function withdrawInUnderlying(uint256 amount) external;\\r\\n\\r\\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\\r\\n\\r\\n    function doHardWork() external;\\r\\n\\r\\n    function depositArbCheck() external view returns (bool);\\r\\n\\r\\n    function calculateFeeForRebalance() external view returns (uint256);\\r\\n\\r\\n    function setPricePerGasUnit(uint256 _price) external;\\r\\n\\r\\n    function setGasUnitRequired(uint256 _price) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/hardworkInterface/IUnderlyingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity <0.8.0;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface IUnderlyingPool {\\r\\n    function rebalancer(address) external view returns (uint256);\\r\\n\\r\\n    // function depositFeeForSharingProfit(uint256 amount) external;\\r\\n\\r\\n    function withdrawForFulfillReturn(uint256 _amount) external;\\r\\n\\r\\n    function withdrawalProfit(uint256 _amount) external;\\r\\n\\r\\n    function underlying() external returns (address);\\r\\n\\r\\n    function getBalance() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/hardworkInterface/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity <0.8.0;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface IVault {\\r\\n    function depositPool() external view returns (address);\\r\\n\\r\\n    function setLockDeposit(bool lock) external;\\r\\n\\r\\n    function lockDepositToMigrate() external view returns (bool);\\r\\n\\r\\n    function withdrawOrder(address) external view returns (uint256);\\r\\n\\r\\n    function depositOrder(address) external view returns (uint256);\\r\\n\\r\\n    function totalShareToWithdraw() external view returns (uint256);\\r\\n\\r\\n    function totalUnderlyingDeposit() external view returns (uint256);\\r\\n\\r\\n    function latestSharePrice() external view returns (uint256);\\r\\n\\r\\n    function nextTimeAbleToRebalance() external view returns (uint256);\\r\\n\\r\\n    function periodAbleToRebalance() external view returns (uint256);\\r\\n\\r\\n    function sharingProfitFeeNumerator() external view returns (uint256);\\r\\n\\r\\n    function sharingProfitFeeDenominator() external view returns (uint256);\\r\\n\\r\\n    function depositFeeNumerator() external view returns (uint256);\\r\\n\\r\\n    function depositFeeDenominator() external view returns (uint256);\\r\\n\\r\\n    function nextTimeToTakeProfit() external view returns (uint256);\\r\\n\\r\\n    function periodToTakeProfit() external view returns (uint256);\\r\\n\\r\\n    function initializeParameters(\\r\\n        uint256 _periodAbleToRebalance,\\r\\n        uint256 _sharingProfitFeeNumerator,\\r\\n        uint256 _sharingProfitFeeDenominator,\\r\\n        uint256 _depositFeeNumerator,\\r\\n        uint256 _depositFeeDenominator,\\r\\n        uint256 _periodToTakeProfit,\\r\\n        address _depositPool\\r\\n    ) external;\\r\\n\\r\\n    function setNextTimeToTakeProfit(uint256 _period) external;\\r\\n\\r\\n    function setNextTimeAbleToRebalance(uint256 _period) external;\\r\\n\\r\\n    function setDepositFee(uint256 numerator, uint256 denominator) external;\\r\\n\\r\\n    function setFeePool(address _feePool) external;\\r\\n\\r\\n    function setVaultFractionToInvest(\\r\\n        uint256 numerator,\\r\\n        uint256 denominator\\r\\n    ) external;\\r\\n\\r\\n    function setVaultFractionToTakeProfit(\\r\\n        uint256 numerator,\\r\\n        uint256 denominator\\r\\n    ) external;\\r\\n\\r\\n    function strategy() external view returns (address);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function underlyingUnit() external view returns (uint256);\\r\\n\\r\\n    function vaultFractionToInvestNumerator() external view returns (uint256);\\r\\n\\r\\n    function vaultFractionToInvestDenominator() external view returns (uint256);\\r\\n\\r\\n    function underlyingPool() external view returns (address);\\r\\n\\r\\n    function underlyingBalanceInVault() external view returns (uint256);\\r\\n\\r\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n    function getEstimatedWithdrawalAmount(\\r\\n        uint256 numberOfShares\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function underlyingBalanceWithInvestmentForHolder(\\r\\n        address holder\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function setStrategy(address _strategy) external;\\r\\n\\r\\n    // function doHardWork(address hardWorker) external;\\r\\n\\r\\n    function rebalance(address hardWorker) external;\\r\\n\\r\\n    function shouldWithdrawBack() external view returns (uint256);\\r\\n\\r\\n    function availableToInvestOut() external view returns (uint256);\\r\\n\\r\\n    function newDepositOrder(uint256 amount) external;\\r\\n\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    function newWithdrawOrder(uint256 numberOfShares) external;\\r\\n\\r\\n    // function resetWithdrawDeposit() external;\\r\\n    function takeProfitSharePrice() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity <0.8.0;\\r\\npragma abicoder v2;\\r\\n\\r\\ncontract Storage {\\r\\n    address public governance;\\r\\n    address public controller;\\r\\n\\r\\n    constructor() {\\r\\n        governance = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance() {\\r\\n        require(isGovernance(msg.sender), \\\"Not governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setGovernance(address _governance) public onlyGovernance {\\r\\n        require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\r\\n        governance = _governance;\\r\\n    }\\r\\n\\r\\n    function setController(address _controller) public onlyGovernance {\\r\\n        require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\r\\n        controller = _controller;\\r\\n    }\\r\\n\\r\\n    function isGovernance(address account) public view returns (bool) {\\r\\n        return account == governance;\\r\\n    }\\r\\n\\r\\n    function isController(address account) public view returns (bool) {\\r\\n        return account == controller;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"addHardWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"addToGreyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodAbleToRebalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharingProfitFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharingProfitFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodToTakeProfit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositPool\",\"type\":\"address\"}],\"name\":\"addVaultAndStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"lockDepositVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toInvestNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toInvestDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasUnitRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerGasUnit\",\"type\":\"uint256\"}],\"name\":\"rebalanceWithParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"removeFromGreyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"removeHardWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"removeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setDepositFeeFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setFeePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setNextTimeAbleToRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setNextTimeToTakeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setSharingProfitFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"withdrawalProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Controller", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007829fa63e178f6bd202e3ee5e03d037fcfb80f13", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}