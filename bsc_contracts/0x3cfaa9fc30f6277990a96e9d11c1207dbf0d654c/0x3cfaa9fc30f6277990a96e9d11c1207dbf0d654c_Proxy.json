{"SourceCode": "/*\r\n* Oikos - Proxy.sol\r\n*\r\n* https://github.com/oikos-cash/oikos\r\n* https://oikos.cash\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2021 Oikos\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n/* ===============================================\r\n* Flattened with Solidifier by Coinage\r\n* \r\n* https://solidifier.coina.ge\r\n* ===============================================\r\n*/\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       Owned.sol\r\nversion:    1.1\r\nauthor:     Anton Jurisevic\r\n            Dominic Romanowski\r\n\r\ndate:       2018-2-26\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nAn Owned contract, to be inherited by other contracts.\r\nRequires its owner to be explicitly set in the constructor.\r\nProvides an onlyOwner access modifier.\r\n\r\nTo change owner, the current owner must nominate the next owner,\r\nwho then has to accept the nomination. The nomination can be\r\ncancelled before it is accepted by the new owner by having the\r\nprevious owner change the nomination (setting it to 0).\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title A contract with an owner.\r\n * @notice Contract ownership can be transferred by first nominating the new owner,\r\n * who must then accept the ownership, which prevents accidental incorrect ownership transfers.\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    /**\r\n     * @dev Owned Constructor\r\n     */\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Nominate a new owner of this contract.\r\n     * @dev Only the current owner may nominate a new owner.\r\n     */\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Accept the nomination to be owner.\r\n     */\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       Proxyable.sol\r\nversion:    1.1\r\nauthor:     Anton Jurisevic\r\n\r\ndate:       2018-05-15\r\n\r\nchecked:    Mike Spain\r\napproved:   Samuel Brooks\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nA proxyable contract that works hand in hand with the Proxy contract\r\nto allow for anyone to interact with the underlying contract both\r\ndirectly and through the proxy.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\n// This contract should be treated like an abstract contract\r\ncontract Proxyable is Owned {\r\n    /* The proxy this contract exists behind. */\r\n    Proxy public proxy;\r\n    Proxy public integrationProxy;\r\n\r\n    /* The caller of the proxy, passed through to this contract.\r\n     * Note that every function using this member must apply the onlyProxy or\r\n     * optionalProxy modifiers, otherwise their invocations can use stale values. */\r\n    address public messageSender;\r\n\r\n    constructor(address _proxy, address _owner) public Owned(_owner) {\r\n        proxy = Proxy(_proxy);\r\n        emit ProxyUpdated(_proxy);\r\n    }\r\n\r\n    function setProxy(address _proxy) external onlyOwner {\r\n        proxy = Proxy(_proxy);\r\n        emit ProxyUpdated(_proxy);\r\n    }\r\n\r\n    function setIntegrationProxy(address _integrationProxy) external onlyOwner {\r\n        integrationProxy = Proxy(_integrationProxy);\r\n    }\r\n\r\n    function setMessageSender(address sender) external onlyProxy {\r\n        messageSender = sender;\r\n    }\r\n\r\n    modifier onlyProxy {\r\n        require(Proxy(msg.sender) == proxy || Proxy(msg.sender) == integrationProxy, \"Only the proxy can call\");\r\n        _;\r\n    }\r\n\r\n    modifier optionalProxy {\r\n        if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy && messageSender != msg.sender) {\r\n            messageSender = msg.sender;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier optionalProxy_onlyOwner {\r\n        if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy && messageSender != msg.sender) {\r\n            messageSender = msg.sender;\r\n        }\r\n        require(messageSender == owner, \"Owner only function\");\r\n        _;\r\n    }\r\n\r\n    event ProxyUpdated(address proxyAddress);\r\n}\r\n\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       Proxy.sol\r\nversion:    1.3\r\nauthor:     Anton Jurisevic\r\n\r\ndate:       2018-05-29\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nA proxy contract that, if it does not recognise the function\r\nbeing called on it, passes all value and call data to an\r\nunderlying target contract.\r\n\r\nThis proxy has the capacity to toggle between DELEGATECALL\r\nand CALL style proxy functionality.\r\n\r\nThe former executes in the proxy's context, and so will preserve \r\nmsg.sender and store data at the proxy address. The latter will not.\r\nTherefore, any contract the proxy wraps in the CALL style must\r\nimplement the Proxyable interface, in order that it can pass msg.sender\r\ninto the underlying contract as the state parameter, messageSender.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\ncontract Proxy is Owned {\r\n    Proxyable public target;\r\n    bool public useDELEGATECALL;\r\n\r\n    constructor(address _owner) public Owned(_owner) {}\r\n\r\n    function setTarget(Proxyable _target) external onlyOwner {\r\n        target = _target;\r\n        emit TargetUpdated(_target);\r\n    }\r\n\r\n    function setUseDELEGATECALL(bool value) external onlyOwner {\r\n        useDELEGATECALL = value;\r\n    }\r\n\r\n    function _emit(bytes callData, uint numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)\r\n        external\r\n        onlyTarget\r\n    {\r\n        uint size = callData.length;\r\n        bytes memory _callData = callData;\r\n\r\n        assembly {\r\n            /* The first 32 bytes of callData contain its length (as specified by the abi). \r\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\r\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\r\n             * This means moving call_data across 32 bytes guarantees we correctly access\r\n             * the data itself. */\r\n            switch numTopics\r\n                case 0 {\r\n                    log0(add(_callData, 32), size)\r\n                }\r\n                case 1 {\r\n                    log1(add(_callData, 32), size, topic1)\r\n                }\r\n                case 2 {\r\n                    log2(add(_callData, 32), size, topic1, topic2)\r\n                }\r\n                case 3 {\r\n                    log3(add(_callData, 32), size, topic1, topic2, topic3)\r\n                }\r\n                case 4 {\r\n                    log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\r\n                }\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        if (useDELEGATECALL) {\r\n            assembly {\r\n                /* Copy call data into free memory region. */\r\n                let free_ptr := mload(0x40)\r\n                calldatacopy(free_ptr, 0, calldatasize)\r\n\r\n                /* Forward all gas and call data to the target contract. */\r\n                let result := delegatecall(gas, sload(target_slot), free_ptr, calldatasize, 0, 0)\r\n                returndatacopy(free_ptr, 0, returndatasize)\r\n\r\n                /* Revert if the call failed, otherwise return the result. */\r\n                if iszero(result) {\r\n                    revert(free_ptr, returndatasize)\r\n                }\r\n                return(free_ptr, returndatasize)\r\n            }\r\n        } else {\r\n            /* Here we are as above, but must send the messageSender explicitly \r\n             * since we are using CALL rather than DELEGATECALL. */\r\n            target.setMessageSender(msg.sender);\r\n            assembly {\r\n                let free_ptr := mload(0x40)\r\n                calldatacopy(free_ptr, 0, calldatasize)\r\n\r\n                /* We must explicitly forward ether to the underlying contract as well. */\r\n                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\r\n                returndatacopy(free_ptr, 0, returndatasize)\r\n\r\n                if iszero(result) {\r\n                    revert(free_ptr, returndatasize)\r\n                }\r\n                return(free_ptr, returndatasize)\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier onlyTarget {\r\n        require(Proxyable(msg.sender) == target, \"Must be proxy target\");\r\n        _;\r\n    }\r\n\r\n    event TargetUpdated(Proxyable newTarget);\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callData\",\"type\":\"bytes\"},{\"name\":\"numTopics\",\"type\":\"uint256\"},{\"name\":\"topic1\",\"type\":\"bytes32\"},{\"name\":\"topic2\",\"type\":\"bytes32\"},{\"name\":\"topic3\",\"type\":\"bytes32\"},{\"name\":\"topic4\",\"type\":\"bytes32\"}],\"name\":\"_emit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"useDELEGATECALL\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setUseDELEGATECALL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"TargetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a4fa6487f91641e846f1748770f3574375a8c41d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d819f2a4f32e3abd08fe74166e3263ab3c764f65a7b325eb848e807fbf62f1f5"}