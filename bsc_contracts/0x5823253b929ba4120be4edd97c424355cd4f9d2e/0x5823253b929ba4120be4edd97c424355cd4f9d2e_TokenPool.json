{"SourceCode": "/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/1_Storage.sol\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\ninterface ITokenPool {\r\n    struct Stake {\r\n        address user;\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 finalReward;\r\n        bool claimed;\r\n    }\r\n\r\n    struct User {\r\n        uint256[] stakedIds;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @dev is emitted when a stake is successful\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 tenure,\r\n        uint256 id,\r\n        uint256 startTime\r\n    );\r\n\r\n    /// @dev is emitted when an unstake is successful\r\n    event Unstaked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 rewardClaimed,\r\n        uint256 id,\r\n        uint256 claimTime\r\n    );\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        EXTERNAL FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @dev allows users to stake their tokens for any of the three periods\r\n    /// 3 months, 6 months & 12 months\r\n    /// @param amount_ is the amount of tokens to stake\r\n    /// @param tenure_ is the stake tenure in months\r\n    /// @return id is the stake identifier\r\n    /// @notice tenure_ should be 3,6,12\r\n    function stake(\r\n        uint256 amount_,\r\n        uint256 tenure_\r\n    ) external returns (uint256 id);\r\n\r\n    /// @dev allows user to claim their rewards + stake at the end of staking period\r\n    /// @param id_ is the unique id of the stake\r\n    function unstake(uint256 id_) external;\r\n}\r\n\r\ncontract TokenPool is ITokenPool, Ownable {\r\n    /*//////////////////////////////////////////////////////////////\r\n                        STATE VARIABLES\r\n    //////////////////////////////////////////////////////////////*/\r\n    IERC20 public immutable POOL_TOKEN;\r\n\r\n    uint256 public rewardPool = 100 * 10e18;\r\n    uint256 public nextStakeId;\r\n\r\n    mapping(uint256 => Stake) public stakeInfo;\r\n    mapping(uint256 => uint256) public rewardPercent; // 2 decimal; eg: 8% = 800\r\n    mapping(address => uint256) public userStaked;\r\n    mapping(address => uint256) public pendingYield;\r\n    mapping(address => uint256) public totalEarnings;\r\n\r\n    constructor(address mct_, address owner_) {\r\n        POOL_TOKEN = IERC20(mct_);\r\n        \r\n        /// Preset APY\r\n        rewardPercent[3] = 1420;\r\n        rewardPercent[6] = 2850;\r\n        rewardPercent[12] = 5710;\r\n\r\n        /// @dev transfer ownership\r\n        _transferOwnership(owner_);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        EXTERNAL FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @dev see IStaking-{stake}\r\n    function stake(\r\n        uint256 amount_,\r\n        uint256 tenure_\r\n    ) external override returns (uint256 id) {\r\n        require(\r\n            tenure_ == 3 || tenure_ == 6 || tenure_ == 12,\r\n            \"TokenPool: Invalid Tenure\"\r\n        );\r\n\r\n        /// @dev transfers staking token into contract custody\r\n        require(\r\n            POOL_TOKEN.transferFrom(msg.sender, address(this), amount_),\r\n            \"TokenPool: Transfer From Failed\"\r\n        );\r\n\r\n        uint256 reward = (rewardPercent[tenure_] * amount_) / 10e4;\r\n        require(rewardPool >= reward, \"TokenPool: Reward Pool Exhausted\");\r\n        rewardPool -= reward;\r\n\r\n        /// @dev initiates staking info\r\n        nextStakeId++;\r\n\r\n        id = nextStakeId;\r\n        stakeInfo[nextStakeId] = Stake(\r\n            msg.sender,\r\n            amount_,\r\n            block.timestamp,\r\n            block.timestamp + (tenure_ * 30 seconds), /// @FIXME: change to days on mainnet\r\n            reward,\r\n            false\r\n        );\r\n\r\n        userStaked[msg.sender] += amount_;\r\n        pendingYield[msg.sender] += reward;\r\n\r\n        emit Staked(msg.sender, amount_, tenure_, id, block.timestamp);\r\n    }\r\n\r\n    /// @dev see IStaking-{unstake}\r\n    function unstake(uint256 id_) external override {\r\n        require(id_ <= nextStakeId, \"TokenPool: Invalid ID\");\r\n\r\n        Stake storage s = stakeInfo[id_];\r\n        require(s.user == msg.sender, \"TokenPool: Invalid Claimer\");\r\n        require(!s.claimed, \"TokenPool: Already Claimed\");\r\n        require(block.timestamp >= s.endTime, \"TokenPool: Immature Claim\");\r\n\r\n        s.claimed = true;\r\n\r\n        uint256 finalSettlement = s.amount + s.finalReward;\r\n        userStaked[msg.sender] -= s.amount;\r\n        pendingYield[msg.sender] -= s.finalReward;\r\n\r\n        totalEarnings[msg.sender] += s.finalReward;\r\n\r\n        POOL_TOKEN.transfer(msg.sender, finalSettlement);\r\n\r\n        emit Unstaked(\r\n            msg.sender,\r\n            s.amount,\r\n            s.finalReward,\r\n            id_,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @dev allows admin to set the apy for different tenures\r\n    /// @param apys_ represent the apy for 3,6 and 12 months respectively\r\n    function setAPY(uint256[] memory apys_) external onlyOwner {\r\n        uint256 len = apys_.length;\r\n        require(len == 3, \"TokenPool: Invalid Length\");\r\n\r\n        rewardPercent[3] = apys_[0];\r\n        rewardPercent[6] = apys_[1];\r\n        rewardPercent[12] = apys_[2];\r\n    }\r\n\r\n    /// @dev allows admin to withdraw the reward pool tokens added\r\n    /// @notice cannot withdraw staked user funds and their allocated rewards\r\n    /// @param amount_ is the token amount to be withdrawn\r\n    function emergencyWithdraw(uint256 amount_) external onlyOwner {\r\n        require(amount_ <= rewardPool, \"TokenPool: Invalid Withdraw Amount\");\r\n\r\n        rewardPool -= amount_;\r\n        POOL_TOKEN.transfer(owner(), amount_);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mct_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tenure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStakeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"apys_\",\"type\":\"uint256[]\"}],\"name\":\"setAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tenure_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenPool", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034af6175559aa0efd594db3cc75628d554ddf4c1000000000000000000000000c866ad63d5f0c63751b130f6cd2c0e98eda74c86", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7e004a2040c0a35f516a5f946f24d7efdd48e220a4c3cbb18f494861d84d6d8d"}