{"SourceCode": "pragma solidity ^0.4.26; // solhint-disable-line\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract theczoven {    \r\n    address busd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Mainnet\r\n    uint256 public EGGS_TO_HATCH_1MINERS=4320000; // 2% daily\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n\taddress addr0 = address(0x0);\r\n\taddress private owner;\r\n    address public ceoAddress;\r\n    address public devAddress;\r\n    address public marAddress;\r\n    mapping (address => uint256) public hatcheryMiners;\r\n    mapping (address => uint256) public claimedEggs;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\t\r\n\tmapping(address => bool) private whitelisted; \r\n    uint256 public marketEggs;   \r\n    uint public startTime = 1666652100; // Mainnet - Monday, October 24, 2022 10:55:00 PM   \r\n\tbool public whitelistActive = true; // enabled at launch\r\n    uint256 public whitelistMaxInvest = 500 ether; /** 500 BUSD  **/\r\n    uint256 public minInvest = 1 ether; /** 1 BUSD  **/\r\n\t\r\n    constructor() public{\r\n        owner = msg.sender;\r\n        devAddress = msg.sender;\r\n        ceoAddress = address(0x40978F49DaA36ab1F43ce6c2cd86D54D9Ff76ab0); // c\r\n        marAddress = address(0xA60013A3389447d8b61A9390cB6a8868844A9177); // w\r\n        marketEggs = 432000000000;        \r\n    }\r\n\t\r\n    function hatchEggs(address ref) public {\r\n        require(block.timestamp > startTime);\r\n        if(ref == msg.sender) {\r\n            ref = 0;\r\n        }\r\n       if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender && hatcheryMiners[ref] > 0) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 eggsUsed=getMyEggs();\r\n        uint256 newMiners=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1MINERS);\r\n        hatcheryMiners[msg.sender]=SafeMath.add(hatcheryMiners[msg.sender],newMiners);\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n\t\t\r\n\t\tif(!whitelistActive){ //referrals will only be enabled after whitelist period\r\n\r\n            //send referral eggs\r\n            address ref1 = referrals[msg.sender];\r\n            if (ref1 != addr0) {\r\n                claimedEggs[ref1] = SafeMath.add(\r\n                    claimedEggs[ref1],\r\n                    SafeMath.div(SafeMath.mul(eggsUsed, 10), 100)\r\n                );\r\n                address ref2 = referrals[ref1];\r\n                if (ref2 != addr0 && ref2 != msg.sender) {\r\n                    claimedEggs[ref2] = SafeMath.add(\r\n                        claimedEggs[ref2],\r\n                        SafeMath.div(SafeMath.mul(eggsUsed, 2), 100)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        \r\n        //boost market to nerf miners hoarding\r\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,5));\r\n    }\r\n    function sellEggs() public {\r\n        require(block.timestamp > startTime);\r\n        uint256 hasEggs=getMyEggs();\r\n        uint256 eggValue=calculateEggSell(hasEggs);\r\n        uint256 fee=devFee(eggValue);\r\n        uint256 fee2=fee/3;\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\r\n        ERC20(busd).transfer(devAddress, fee2);\r\n        ERC20(busd).transfer(ceoAddress, fee2);\r\n\t\tERC20(busd).transfer(marAddress, fee2);\r\n        ERC20(busd).transfer(address(msg.sender), SafeMath.sub(eggValue,fee));\r\n    }\r\n    function buyEggs(address ref, uint256 amount) public {\r\n        require(block.timestamp > startTime);\r\n        require(amount >= minInvest, \"Mininum investment not met.\");\r\n\t\t//if whitelist is active, only whitelisted addresses can invest in the project. \r\n        if (whitelistActive) {\r\n            require(whitelisted[msg.sender], \"Address is not Whitelisted.\");\r\n            require(amount <= whitelistMaxInvest, \"Maxium investment exceeded.\");\r\n        }\r\n\r\n        ERC20(busd).transferFrom(address(msg.sender), address(this), amount);\r\n        \r\n        uint256 balance = ERC20(busd).balanceOf(address(this));\r\n        uint256 eggsBought=calculateEggBuy(amount,SafeMath.sub(balance,amount));\r\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\r\n        uint256 fee=devFee(amount);\r\n        uint256 fee2=fee/3;\r\n        ERC20(busd).transfer(devAddress, fee2);\r\n        ERC20(busd).transfer(ceoAddress, fee2);\r\n\t\tERC20(busd).transfer(marAddress, fee2);\r\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\r\n        hatchEggs(ref);\r\n    }\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256) {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256) {\r\n        return calculateTrade(eggs,marketEggs,ERC20(busd).balanceOf(address(this)));\r\n    }\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketEggs);\r\n    }\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth,ERC20(busd).balanceOf(address(this)));\r\n    }\r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,5),100);\r\n    }\r\n    function seedMarket(uint256 amount) public {\r\n        ERC20(busd).transferFrom(address(msg.sender), address(this), amount);\r\n    }\r\n    function getBalance() public view returns(uint256) {\r\n        return ERC20(busd).balanceOf(address(this));\r\n    }\r\n    function getMyMiners() public view returns(uint256) {\r\n        return hatcheryMiners[msg.sender];\r\n    }\r\n    function getMyEggs() public view returns(uint256) {\r\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\r\n    }\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1MINERS,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryMiners[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\t\r\n\t// change ownership.\r\n    function changeOwnership(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        owner = value;\r\n    }    \r\n\r\n     //enable/disable whitelist.\r\n    function setWhitelistActive(bool isActive) public {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        whitelistActive = isActive;\r\n    }\r\n\r\n    //single entry.\r\n    function whitelistAddress(address addr, bool value) public {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        whitelisted[addr] = value;\r\n    }  \r\n\r\n    //multiple entry.\r\n    function whitelistAddresses(address[] memory addr, bool whitelist) public {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        for(uint256 i = 0; i < addr.length; i++){\r\n            whitelisted[addr[i]] = whitelist;\r\n        }\r\n    }\r\n\r\n    //check if whitelisted.\r\n    function isWhitelisted(address Wallet) public view returns(bool whitelist){\r\n        whitelist = whitelisted[Wallet];\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Wallet\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"whitelist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1MINERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setWhitelistActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistMaxInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "theczoven", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://553fae07067ac3c6c63656a49901075c8343cef7cba090f8623b7dbe474a8b79"}