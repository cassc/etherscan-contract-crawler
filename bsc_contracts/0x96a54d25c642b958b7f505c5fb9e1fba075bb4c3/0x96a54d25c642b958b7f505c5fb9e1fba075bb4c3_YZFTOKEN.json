{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{ value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function waiveOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = owner;\r\n        owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime, \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(owner, _previousOwner);\r\n        owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ncontract YZFTOKEN is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    address payable marketAddress;\r\n    address payable marketingAddress;\r\n    address payable teamWalletAddress;\r\n    address payable ecologyWalletAddress;\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 _totalTax = 10;\r\n    uint256 _taxSpreadlv = 1;//*3\r\n    uint256 _taxPoollv = 3;\r\n    uint256 _burnlv = 2;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public isExcludedFromFee;\r\n    mapping (address => bool) public isMarketPair;\r\n\r\n    mapping (address => address[]) spreads;\r\n\r\n    mapping (address => uint256) pollAmount;\r\n    mapping (address => uint256) usdtAmount;\r\n    mapping (address => bool) ifPoolAddress;\r\n\r\n    mapping (address => uint256) public pollOnTime;\r\n\r\n    address[] public pollAddress;\r\n\r\n    address public newPollAddress;\r\n\r\n    IUniswapV2Router01 public uniswapV2Router;\r\n    address public uniswapPair;\r\n\r\n    address usdtToken = 0x55d398326f99059fF775485246999027B3197955;\r\n    address technologyAddress;\r\n    address pollWalletAddress;\r\n\r\n    event getReservesData(\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast,\r\n        uint256 pollUsdt\r\n    );\r\n\r\n    uint256 public monthAmount = 300000;\r\n\r\n    uint256 public sendMonthTime = 0;\r\n\r\n    uint256 public sendMarketInterval = 7;\r\n\r\n    uint256 public burnDayTime = 0;\r\n\r\n    uint256 public burnDayAmount = 0;\r\n\r\n    uint256 public burnMinAmount = 100000;\r\n\r\n    uint256 public burnDayLv = 2;\r\n\r\n    uint256 public dayLong = 86400;\r\n\r\n    uint8 private usdtWay = 0;\r\n\r\n    event BurnUniswapPair(address sender, uint256 amount0);\r\n\r\n    constructor (\r\n        string memory coinName,\r\n        string memory coinSymbol,\r\n        address _owner\r\n    ) payable {\r\n        _name = coinName;\r\n        _symbol = coinSymbol;\r\n        _decimals = 6;\r\n        owner = _owner;\r\n        _totalSupply = 1000000000 * 10 ** _decimals;\r\n\r\n        IUniswapV2Router01 _uniswapV2Router = IUniswapV2Router01(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), usdtToken);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        address token0 = IUniswapV2Pair(uniswapPair).token0();\r\n        if(token0 == address(usdtToken)){\r\n            usdtWay = 1;\r\n        }\r\n\r\n        burnDayTime = block.timestamp;\r\n\r\n        sendMonthTime = block.timestamp.add(sendMarketInterval*dayLong);\r\n\r\n        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\r\n        isMarketPair[address(uniswapPair)] = true;\r\n\r\n        technologyAddress = payable(0xC2Bc43797F73c802C0C55E9F4eA57324E7BA6169);\r\n        pollWalletAddress = payable(0xc0add561f8B7FF73edFeE5bBf3f8D0B57F545804);\r\n        ecologyWalletAddress = payable(0xCa2878f41f244093D10719E26b0C040C7cce106b);\r\n        marketAddress = payable(0xD3F6DC6ab7F975dD279e6B17686a09D1657E1094);\r\n        teamWalletAddress = payable(0x0c7ED9378f233980431a1BD4BcA2025Bc1b18183);\r\n        marketingAddress = payable(0x39459c384d19e7d68434202f464df5920DD3369c);\r\n\r\n        isExcludedFromFee[owner] = true;\r\n        isExcludedFromFee[address(uniswapPair)] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[technologyAddress] = true;\r\n        isExcludedFromFee[pollWalletAddress] = true;\r\n        isExcludedFromFee[ecologyWalletAddress] = true;\r\n        isExcludedFromFee[marketAddress] = true;\r\n        isExcludedFromFee[marketingAddress] = true;\r\n        isExcludedFromFee[teamWalletAddress] = true;\r\n\r\n        _balances[technologyAddress] = _totalSupply.mul(20).div(100);\r\n        _balances[pollWalletAddress] = _totalSupply.mul(20).div(100);\r\n        _balances[ecologyWalletAddress] = _totalSupply.mul(10).div(100);\r\n        _balances[marketAddress] = _totalSupply.mul(30).div(100);\r\n        _balances[teamWalletAddress] = _totalSupply.mul(20).div(100);\r\n\r\n        emit Transfer(address(0), technologyAddress, _totalSupply.mul(20).div(100));\r\n        emit Transfer(address(0), pollWalletAddress, _totalSupply.mul(20).div(100));\r\n        emit Transfer(address(0), ecologyWalletAddress, _totalSupply.mul(10).div(100));\r\n        emit Transfer(address(0), marketAddress, _totalSupply.mul(30).div(100));\r\n        emit Transfer(address(0), teamWalletAddress, _totalSupply.mul(20).div(100));\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function getPollInfo(address _address) public view returns (uint, uint256, bool, bool,uint256,uint256) {\r\n        IERC20 pairContent = IERC20(uniswapPair);\r\n        bool onTime = false;\r\n        if(sendMonthTime >= pollOnTime[_address].add(sendMarketInterval * dayLong)){\r\n            onTime = true;\r\n        }\r\n        return (\r\n            pairContent.balanceOf(_address),\r\n            pollAmount[_address],\r\n            ifPoolAddress[_address],\r\n            onTime,\r\n            sendMonthTime > pollOnTime[_address]?sendMonthTime.sub(pollOnTime[_address]):0,\r\n            sendMarketInterval * dayLong\r\n        );\r\n    }\r\n\r\n    function getSpreadFirst(address _address) public view returns (address) {\r\n        if(spreads[_address].length ==0){\r\n            return address(0);\r\n        }else{\r\n            return spreads[_address][0];\r\n        }\r\n    }\r\n\r\n    function getSpread(address _address) public view returns (address[] memory) {\r\n        return spreads[_address];\r\n    }\r\n\r\n    function getSpreadLength(address _address) private view returns (uint) {\r\n        return spreads[_address].length;\r\n    }\r\n\r\n    function setSpread(address _to, address _up) private returns (uint) {\r\n        if(spreads[_to].length == 0){\r\n            spreads[_to].push(_up);\r\n            if(spreads[_up].length>0){\r\n                for (uint i = 0; i < spreads[_up].length; i++) {\r\n                    if(i < 2){\r\n                        spreads[_to].push(spreads[_up][i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return spreads[_to].length;\r\n    }\r\n\r\n    function sendMonth() public{\r\n        require(block.timestamp > sendMonthTime, \"time not reached\");\r\n        require(owner == _msgSender(), \"caller is not the markket\");\r\n        uint256 onTimeAmount = 0;\r\n        for (uint i = 0; i < pollAddress.length; i++) {\r\n            if( sendMonthTime >= pollOnTime[pollAddress[i]].add(sendMarketInterval * dayLong)){\r\n                onTimeAmount = onTimeAmount.add(pollAmount[pollAddress[i]]);\r\n            }\r\n        }\r\n        uint256 amount = 0;\r\n        if(onTimeAmount>0){\r\n            for (uint i = 0; i < pollAddress.length; i++) {\r\n                if( sendMonthTime >= pollOnTime[pollAddress[i]].add(sendMarketInterval * dayLong)){\r\n                    uint256 myAmount = pollAmount[pollAddress[i]].mul(10**_decimals).div(onTimeAmount).mul(monthAmount);\r\n                    if(myAmount>0){\r\n                        _balances[pollAddress[i]] = _balances[pollAddress[i]].add(myAmount);\r\n                        emit Transfer(marketAddress, pollAddress[i], myAmount);\r\n                        amount = amount.add(myAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _balances[marketAddress] = _balances[marketAddress].sub(amount);\r\n        sendMonthTime = sendMonthTime.add(sendMarketInterval * dayLong);\r\n        if(sendMonthTime<block.timestamp){\r\n            sendMonthTime = block.timestamp.add(sendMarketInterval * dayLong);\r\n        }\r\n    }\r\n\r\n    function setBurnDayLv(uint256 _val) public{\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        burnDayLv = _val;\r\n    }\r\n\r\n    function setBurnDayLong(uint256 _val) public{\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        dayLong = _val;\r\n    }\r\n\r\n    function setBurnMinAmount(uint256 _val) public{\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        burnMinAmount = _val;\r\n    }\r\n\r\n    function setSendMonthTime(uint256 _val) public{\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        sendMonthTime = _val;\r\n    }\r\n\r\n    function setBurnDayTime(uint256 _val) public{\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        burnDayTime = _val;\r\n    }\r\n\r\n    function setMonthAmount(uint256 _val) public{\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        monthAmount = _val;\r\n    }\r\n\r\n    function nextDayBurnTime() public view returns(uint256){\r\n        return burnDayTime.add(dayLong).sub(block.timestamp);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        if(address(uniswapPair) != recipient && address(uniswapPair) != sender){\r\n            setSpread(recipient, sender);\r\n        }\r\n        if(amount == 0) return true;\r\n\r\n        IUniswapV2Pair pairContent = IUniswapV2Pair(uniswapPair);\r\n\r\n        if(newPollAddress != address(0)){\r\n            pollAmount[newPollAddress] = pairContent.balanceOf(newPollAddress);\r\n            delete newPollAddress;\r\n        }\r\n\r\n        uint112 reserve0 = 0;\r\n        uint112 reserve1 = 0;\r\n        uint32 blockTimestampLast = 0;\r\n        (reserve0, reserve1, blockTimestampLast) = pairContent.getReserves();\r\n        uint pollUsdt = IUniswapV2Pair(usdtToken).balanceOf(uniswapPair);\r\n        emit getReservesData(reserve0, reserve1, blockTimestampLast, pollUsdt);\r\n        uint256 reserve = usdtWay==1 ? reserve0 : reserve1;\r\n\r\n        if(isMarketPair[recipient]) {\r\n            uint pollNumber = pairContent.balanceOf(sender);\r\n            if(reserve < pollUsdt){\r\n                if(ifPoolAddress[sender] == false) {\r\n                    ifPoolAddress[sender] = true;\r\n                    pollAddress.push(sender);\r\n                }\r\n                if(pollOnTime[sender]==0){\r\n                    pollOnTime[sender] = block.timestamp;\r\n                }\r\n                newPollAddress = sender;\r\n                dayBurn(0);\r\n            }else{\r\n                dayBurn(amount);\r\n                if(isExcludedFromFee[sender]==false){\r\n                    uint256 finalAmount = amount;\r\n                    address _sender = sender;\r\n                    uint256 feeAmount = amount.mul(_totalTax).div(100);\r\n                    swapAndLiquify(finalAmount, feeAmount, _sender, _sender);\r\n                    amount = finalAmount.sub(feeAmount);\r\n                }\r\n            }\r\n            pollAmount[sender] = pollNumber;\r\n        }else if(isMarketPair[sender]){\r\n            uint pollNumber = pairContent.balanceOf(recipient);\r\n            if(pollNumber < pollAmount[recipient]){\r\n                newPollAddress = recipient;\r\n                pollOnTime[recipient] = 0;\r\n                dayBurn(0);\r\n            }else{\r\n                dayBurn(amount);\r\n            }\r\n            if(isExcludedFromFee[recipient] == false){\r\n                uint256 feeAmount = amount.mul(_totalTax).div(100);\r\n                swapAndLiquify(amount, feeAmount, sender, recipient);\r\n                amount = amount.sub(feeAmount);\r\n            }\r\n            pollAmount[recipient] = pollNumber;\r\n        }else{\r\n            dayBurn(0);\r\n        }\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function dayBurn(uint256 _addAmount) private{\r\n        if(block.timestamp > burnDayTime.add(dayLong)){\r\n            if(burnDayAmount >= burnMinAmount * 10 ** _decimals){\r\n                uint256 burnDay = burnDayAmount.mul(burnDayLv*100000).div(100*100000);\r\n                if(_balances[pollWalletAddress] > burnDay){\r\n                    _balances[pollWalletAddress] = _balances[pollWalletAddress].sub(burnDay);\r\n                    _totalSupply = _totalSupply.sub(burnDay);\r\n                    emit Transfer(pollWalletAddress, address(0), burnDay);\r\n                }\r\n            }\r\n            burnDayTime = burnDayTime.add(dayLong);\r\n            if(burnDayTime < block.timestamp){\r\n                burnDayTime = block.timestamp;\r\n            }\r\n            burnDayAmount = _addAmount;\r\n        }else{\r\n            if(_addAmount>0){\r\n                burnDayAmount = burnDayAmount.add(_addAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 amount, uint256 tAmount, address _from, address _to) private returns (uint256) {\r\n        uint256 divPollAmount = amount.mul(_taxPoollv).div(100);\r\n        uint256 spreadAmount = amount.mul(_taxSpreadlv).div(100);\r\n        uint256 burnAmount = amount.mul(_burnlv).div(100);\r\n        uint256 pollAmountTotal = IERC20(uniswapPair).totalSupply();\r\n        uint256 usdt_decimals = 18;\r\n        //item 1 -> 3%\r\n        uint256 spreadDeep = getSpreadLength(_to);\r\n        if(spreadDeep>0 && _taxSpreadlv>0 && spreadAmount>0){\r\n            address[] memory upAddress = getSpread(_to);\r\n            for (uint i = 0; i < spreadDeep; i++) {\r\n                _balances[upAddress[i]] = _balances[upAddress[i]].add(spreadAmount);\r\n                emit Transfer(_from, upAddress[i], spreadAmount);\r\n                tAmount = tAmount.sub(spreadAmount);\r\n            }\r\n        }\r\n        //item 2 -> 3%\r\n        if(pollAmountTotal > 0){\r\n            for (uint i = 0; i < pollAddress.length; i++) {\r\n                uint256 myAmount = pollAmount[pollAddress[i]].mul(10**usdt_decimals).div(pollAmountTotal).mul(divPollAmount).div(10**usdt_decimals);\r\n                if(myAmount>0){\r\n                    _balances[pollAddress[i]] = _balances[pollAddress[i]].add(myAmount);\r\n                    emit Transfer(_from, pollAddress[i], myAmount);\r\n                    tAmount = tAmount.sub(myAmount);\r\n                }\r\n            }\r\n        }\r\n        //item 3 -> 2%\r\n        if(burnAmount > 0){\r\n            tAmount = tAmount.sub(burnAmount);\r\n            _totalSupply = _totalSupply.sub(burnAmount);\r\n            emit Transfer(_from, address(0), burnAmount);\r\n        }\r\n        //item 4 shengyu\r\n        _balances[marketingAddress] = _balances[marketingAddress].add(tAmount);\r\n        emit Transfer(_from, marketingAddress, tAmount);\r\n        return tAmount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"coinName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coinSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"}],\"name\":\"BurnUniswapPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pollUsdt\",\"type\":\"uint256\"}],\"name\":\"getReservesData\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnDayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnDayLv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnDayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPollInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getSpread\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getSpreadFirst\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newPollAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDayBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pollAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pollOnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendMarketInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendMonth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendMonthTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setBurnDayLong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setBurnDayLv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setBurnDayTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setBurnMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setMonthAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setSendMonthTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YZFTOKEN", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000004d03655e3244e2291080579eb2b3fea95140962a00000000000000000000000000000000000000000000000000000000000000084d6574616c696e6b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003595a460000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fcf46957080d2cb1365b731575fcac9b8b763f946ca3b78222dfd5d41ed8f613"}