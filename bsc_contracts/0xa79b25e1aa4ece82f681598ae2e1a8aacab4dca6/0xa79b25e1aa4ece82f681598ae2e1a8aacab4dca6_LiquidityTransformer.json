{"SourceCode": "{\"LiquidityInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: -- \ud83e\udd89 % \ud83e\udd5e --\\r\\n\\r\\npragma solidity =0.7.5;\\r\\n\\r\\ninterface IWiseTokenLT {\\r\\n\\r\\n    function currentWiseDay()\\r\\n        external view\\r\\n        returns (uint64);\\r\\n\\r\\n    function approve(\\r\\n        address _spender,\\r\\n        uint256 _value\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    function mintSupply(\\r\\n        address _investorAddress,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function giveStatus(\\r\\n        address _referrer\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface ISyntheticBNBToken {\\r\\n\\r\\n    function approve(\\r\\n        address _spender,\\r\\n        uint256 _value\\r\\n    )\\r\\n        external\\r\\n        returns (bool success);\\r\\n\\r\\n    function liquidityDeposit()\\r\\n        external\\r\\n        payable;\\r\\n\\r\\n    function formLiquidity()\\r\\n        external\\r\\n        returns (uint256 coverAmount);\\r\\n}\\r\\n\\r\\ninterface PancakeSwapRouterLT {\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (\\r\\n        uint256 amountTokenA,\\r\\n        uint256 amountTokenB,\\r\\n        uint256 liquidity\\r\\n    );\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (\\r\\n        uint256 amountB\\r\\n    );\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (\\r\\n        uint256[] memory amounts\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface PancakeSwapV2PairLT {\\r\\n\\r\\n    function getReserves() external view returns (\\r\\n        uint112 reserve0,\\r\\n        uint112 reserve1,\\r\\n        uint32 blockTimestampLast\\r\\n    );\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IBEP20TokenLT {\\r\\n\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    )  external returns (\\r\\n        bool success\\r\\n    );\\r\\n\\r\\n    function approve(\\r\\n        address _spender,\\r\\n        uint256 _value\\r\\n    )  external returns (\\r\\n        bool success\\r\\n    );\\r\\n}\"},\"LiquidityTransformer.sol\":{\"content\":\"// SPDX-License-Identifier: -- \ud83e\udd89 % \ud83e\udd5e --\\r\\n\\r\\npragma solidity =0.7.5;\\r\\n\\r\\nimport \\u0027./LiquidityInterfaces.sol\\u0027;\\r\\n\\r\\ncontract LiquidityTransformer {\\r\\n\\r\\n    using SafeMathLT for uint256;\\r\\n    using SafeMathLT for uint128;\\r\\n\\r\\n    IWiseTokenLT public WISE_CONTRACT;\\r\\n    ISyntheticBNBToken public SBNB_CONTRACT;\\r\\n    PancakeSwapV2PairLT public PANCAKE_PAIR;\\r\\n\\r\\n    PancakeSwapRouterLT public PANCAKE_ROUTER = PancakeSwapRouterLT(\\r\\n        0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n    );\\r\\n\\r\\n    address constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n\\r\\n    uint8 public constant INVESTMENT_DAYS = 15;\\r\\n    uint128 public constant MAX_SUPPLY = 264000000E18;\\r\\n    uint128 public constant MAX_INVEST = 200000E18;\\r\\n    uint128 public constant TOKEN_COST = MAX_INVEST / (MAX_SUPPLY / 1E18);\\r\\n    uint256 public constant REFUND_CAP = 400E18;\\r\\n\\r\\n    struct Globals {\\r\\n        uint256 cashBackTotal;\\r\\n        uint256 investorCount;\\r\\n        uint256 totalTransferTokens;\\r\\n        uint256 totalBNBContributed;\\r\\n        bool pancakeSwaped;\\r\\n    }\\r\\n\\r\\n    Globals public g;\\r\\n\\r\\n    mapping(address =\\u003e uint256) public investorBalance;\\r\\n    mapping(address =\\u003e uint256) public purchasedTokens;\\r\\n    mapping(uint256 =\\u003e address) public uniqueInvestors;\\r\\n\\r\\n    event WiseReservation(\\r\\n        address indexed senderAddress,\\r\\n        uint256 investmentAmount,\\r\\n        uint256 tokenAmount,\\r\\n        uint64 indexed currentWiseDay,\\r\\n        uint8 indexed investmentMode\\r\\n    );\\r\\n\\r\\n    event PancakeSwapResult(\\r\\n        uint256 indexed amountTokenA,\\r\\n        uint256 indexed amountTokenB,\\r\\n        uint256 indexed liquidity\\r\\n    );\\r\\n\\r\\n    event CashBackIssued(\\r\\n        address indexed investorAddress,\\r\\n        uint256 indexed senderValue,\\r\\n        uint256 indexed cashBackAmount\\r\\n    );\\r\\n\\r\\n    event RefundIssued(\\r\\n        address indexed investorAddress,\\r\\n        uint256 indexed refundAmount\\r\\n    );\\r\\n\\r\\n    modifier afterInvestmentDays() {\\r\\n        require(\\r\\n            _currentWiseDay() \\u003e INVESTMENT_DAYS,\\r\\n            \\u0027WISE: ongoing investment phase\\u0027\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier afterPancakeSwapTransfer() {\\r\\n        require (\\r\\n            g.pancakeSwaped == true,\\r\\n            \\u0027WISE: forward liquidity first\\u0027\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier belowMaximumInvest() {\\r\\n        require(\\r\\n            g.totalTransferTokens \\u003c MAX_SUPPLY,\\r\\n            \\u0027reserveWise_MAX_SUPPLY_REACHED\\u0027\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier belowMaximumDay() {\\r\\n        require(\\r\\n            _currentWiseDay() \\u003e 0 \\u0026\\u0026\\r\\n            _currentWiseDay() \\u003c= INVESTMENT_DAYS,\\r\\n            \\u0027reserveWise_WRONG_INVESTMENT_DAY\\u0027\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyKeeper() {\\r\\n        require(\\r\\n            msg.sender == settingsKeeper\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n    }\\r\\n\\r\\n    address payable settingsKeeper;\\r\\n\\r\\n    constructor(\\r\\n        address _wiseToken,\\r\\n        address _pancakeSwapPair,\\r\\n        address _syntheticBNB\\r\\n    )\\r\\n        payable\\r\\n    {\\r\\n        settingsKeeper = msg.sender;\\r\\n        WISE_CONTRACT = IWiseTokenLT(_wiseToken);\\r\\n        SBNB_CONTRACT = ISyntheticBNBToken(_syntheticBNB);\\r\\n        PANCAKE_PAIR = PancakeSwapV2PairLT(_pancakeSwapPair);\\r\\n    }\\r\\n\\r\\n    function setSettings(\\r\\n        address _wiseToken,\\r\\n        address _syntheticBNB,\\r\\n        address _pancakeSwapPair,\\r\\n        address _pancakeSwapRouter\\r\\n    )\\r\\n        external\\r\\n        onlyKeeper\\r\\n    {\\r\\n        WISE_CONTRACT = IWiseTokenLT(_wiseToken);\\r\\n        SBNB_CONTRACT = ISyntheticBNBToken(_syntheticBNB);\\r\\n        PANCAKE_PAIR = PancakeSwapV2PairLT(_pancakeSwapPair);\\r\\n        PANCAKE_ROUTER = PancakeSwapRouterLT(_pancakeSwapRouter);\\r\\n    }\\r\\n\\r\\n    function changeKeeper(\\r\\n        address payable _newKeeper\\r\\n    )\\r\\n        external\\r\\n        onlyKeeper\\r\\n    {\\r\\n        settingsKeeper = _newKeeper;\\r\\n    }\\r\\n\\r\\n    function renounceKeeper()\\r\\n        external\\r\\n        onlyKeeper\\r\\n    {\\r\\n        settingsKeeper = address(0x0);\\r\\n    }\\r\\n\\r\\n    //  WISE RESERVATION (EXTERNAL FUNCTIONS)  //\\r\\n    //  -------------------------------------  //\\r\\n\\r\\n    /** @dev Performs reservation of WISE tokens with BNB\\r\\n      */\\r\\n    function reserveWise(\\r\\n        uint8 _invesmentMode\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        belowMaximumDay\\r\\n        belowMaximumInvest\\r\\n    {\\r\\n        require(\\r\\n            msg.value \\u003e= TOKEN_COST,\\r\\n            \\u0027reserveWise_MIN_INVEST\\u0027\\r\\n        );\\r\\n\\r\\n        _reserveWise(\\r\\n            msg.sender,\\r\\n            msg.value,\\r\\n            _invesmentMode\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** @notice Allows reservation of WISE tokens with other BEP20 tokens\\r\\n      * @dev this will require LT contract to be approved as spender\\r\\n      * @param _tokenAddress address of an BEP20 token to use\\r\\n      * @param _tokenAmount amount of tokens to use for reservation\\r\\n      */\\r\\n    function reserveWiseWithToken(\\r\\n        address _tokenAddress,\\r\\n        uint256 _tokenAmount,\\r\\n        uint8 _invesmentMode\\r\\n    )\\r\\n        external\\r\\n        belowMaximumDay\\r\\n        belowMaximumInvest\\r\\n    {\\r\\n        IBEP20TokenLT _token = IBEP20TokenLT(\\r\\n            _tokenAddress\\r\\n        );\\r\\n\\r\\n        _token.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _tokenAmount\\r\\n        );\\r\\n\\r\\n        _token.approve(\\r\\n            address(PANCAKE_ROUTER),\\r\\n            _tokenAmount\\r\\n        );\\r\\n\\r\\n        address[] memory _path = preparePath(\\r\\n            _tokenAddress\\r\\n        );\\r\\n\\r\\n        uint256[] memory amounts =\\r\\n        PANCAKE_ROUTER.swapExactTokensForETH(\\r\\n            _tokenAmount,\\r\\n            0,\\r\\n            _path,\\r\\n            address(this),\\r\\n            block.timestamp.add(2 hours)\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            amounts[1] \\u003e= TOKEN_COST,\\r\\n            \\u0027WISE: investment below minimum\\u0027\\r\\n        );\\r\\n\\r\\n        _reserveWise(\\r\\n            msg.sender,\\r\\n            amounts[1],\\r\\n            _invesmentMode\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //  WISE RESERVATION (INTERNAL FUNCTIONS)  //\\r\\n    //  -------------------------------------  //\\r\\n\\r\\n    function _reserveWise(\\r\\n        address _senderAddress,\\r\\n        uint256 _senderValue,\\r\\n        uint8 _invesmentMode\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        require(\\r\\n            _invesmentMode \\u003c 6,\\r\\n            \\u0027reserveWise_WRONG_MODE\\u0027\\r\\n        );\\r\\n\\r\\n        if (investorBalance[_senderAddress] == 0) {\\r\\n            uniqueInvestors[\\r\\n            g.investorCount] = _senderAddress;\\r\\n            g.investorCount++;\\r\\n        }\\r\\n\\r\\n        (\\r\\n            uint256 _senderTokens,\\r\\n            uint256 _returnAmount\\r\\n        ) =\\r\\n\\r\\n        _getTokenAmount(\\r\\n            g.totalBNBContributed,\\r\\n            g.totalTransferTokens,\\r\\n            _senderValue\\r\\n        );\\r\\n\\r\\n        g.totalBNBContributed += _senderValue;\\r\\n        g.totalTransferTokens += _senderTokens;\\r\\n\\r\\n        investorBalance[_senderAddress] += _senderValue;\\r\\n        purchasedTokens[_senderAddress] += _senderTokens;\\r\\n\\r\\n        if (\\r\\n            _invesmentMode == 0 \\u0026\\u0026\\r\\n            g.cashBackTotal \\u003c REFUND_CAP \\u0026\\u0026\\r\\n            _returnAmount \\u003c _senderValue\\r\\n        ) {\\r\\n            uint256 cashBackAmount = _senderValue\\r\\n                .sub(_returnAmount)\\r\\n                .div(100);\\r\\n\\r\\n            uint256 CASH_BACK = g.cashBackTotal\\r\\n                .add(cashBackAmount);\\r\\n\\r\\n            cashBackAmount = CASH_BACK \\u003c REFUND_CAP\\r\\n                ? cashBackAmount\\r\\n                : REFUND_CAP.sub(g.cashBackTotal);\\r\\n\\r\\n            g.cashBackTotal =\\r\\n            g.cashBackTotal.add(cashBackAmount);\\r\\n\\r\\n            msg.sender.transfer(\\r\\n                cashBackAmount\\r\\n            );\\r\\n\\r\\n            emit CashBackIssued(\\r\\n                _senderAddress,\\r\\n                _senderValue,\\r\\n                cashBackAmount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (_returnAmount \\u003e 0) {\\r\\n            msg.sender.transfer(\\r\\n                _returnAmount\\r\\n            );\\r\\n\\r\\n            emit RefundIssued(\\r\\n                msg.sender,\\r\\n                _returnAmount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit WiseReservation(\\r\\n            _senderAddress,\\r\\n            _senderValue,\\r\\n            _senderTokens,\\r\\n            _currentWiseDay(),\\r\\n            _invesmentMode\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getTokenAmount(\\r\\n        uint256 _totalBNBContributed,\\r\\n        uint256 _totalTransferTokens,\\r\\n        uint256 _senderValue\\r\\n    )\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 tokenAmount,\\r\\n            uint256 returnAmount\\r\\n        )\\r\\n    {\\r\\n        tokenAmount = _senderValue\\r\\n            .div(TOKEN_COST)\\r\\n            .mul(1E18);\\r\\n\\r\\n        uint256 NEW_SUPPLY = _totalTransferTokens\\r\\n            .add(tokenAmount);\\r\\n\\r\\n        if (NEW_SUPPLY \\u003e MAX_SUPPLY) {\\r\\n\\r\\n            tokenAmount = MAX_SUPPLY\\r\\n                .sub(_totalTransferTokens);\\r\\n\\r\\n            uint256 availableValue = MAX_INVEST\\r\\n                .sub(_totalBNBContributed);\\r\\n\\r\\n            returnAmount = _senderValue\\r\\n                .sub(availableValue);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //  LIQUIDITY GENERATION FUNCTION  //\\r\\n    //  -----------------------------  //\\r\\n\\r\\n    /** @notice Creates initial liquidity on PancakeSwap by forwarding\\r\\n      * reserved tokens equivalent to BNB contributed to the contract\\r\\n      * @dev check addLiquidity documentation\\r\\n      */\\r\\n    function forwardLiquidity(/*\ud83e\udd5e*/)\\r\\n        external\\r\\n        afterInvestmentDays\\r\\n    {\\r\\n        require (\\r\\n            g.pancakeSwaped == false,\\r\\n            \\u0027forwardLiquidity: swaped\\u0027\\r\\n        );\\r\\n\\r\\n        uint256 sbnbTokensAmount = g.totalBNBContributed;\\r\\n        uint256 wiseTokensAmount = g.totalTransferTokens;\\r\\n\\r\\n        SBNB_CONTRACT.liquidityDeposit{\\r\\n            value: g.totalBNBContributed\\r\\n        }();\\r\\n\\r\\n        SBNB_CONTRACT.formLiquidity();\\r\\n\\r\\n        SBNB_CONTRACT.approve(\\r\\n            address(PANCAKE_ROUTER),\\r\\n            sbnbTokensAmount\\r\\n        );\\r\\n\\r\\n        WISE_CONTRACT.mintSupply(\\r\\n            address(this),\\r\\n            wiseTokensAmount\\r\\n        );\\r\\n\\r\\n        WISE_CONTRACT.approve(\\r\\n            address(PANCAKE_ROUTER),\\r\\n            wiseTokensAmount\\r\\n        );\\r\\n\\r\\n        (\\r\\n            uint256 amountTokenA,\\r\\n            uint256 amountTokenB,\\r\\n            uint256 liquidity\\r\\n        ) =\\r\\n\\r\\n        PANCAKE_ROUTER.addLiquidity(\\r\\n            address(WISE_CONTRACT),\\r\\n            address(SBNB_CONTRACT),\\r\\n            wiseTokensAmount,\\r\\n            sbnbTokensAmount,\\r\\n            0,\\r\\n            0,\\r\\n            address(0x0),\\r\\n            block.timestamp.add(2 hours)\\r\\n        );\\r\\n\\r\\n        g.pancakeSwaped = true;\\r\\n\\r\\n        emit PancakeSwapResult(\\r\\n            amountTokenA,\\r\\n            amountTokenB,\\r\\n            liquidity\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //  WISE TOKEN PAYOUT FUNCTIONS (INDIVIDUAL)  //\\r\\n    //  ----------------------------------------  //\\r\\n\\r\\n    /** @notice Allows to mint all the tokens\\r\\n      * from investor and referrer perspectives\\r\\n      * @dev can be called after forwardLiquidity()\\r\\n      */\\r\\n    function $getMyTokens(/*\ud83d\udcb0*/)\\r\\n        external\\r\\n        afterPancakeSwapTransfer\\r\\n    {\\r\\n        payoutInvestorAddress(\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** @notice Allows to mint tokens for specific investor address\\r\\n      * @dev aggregades investors tokens across all investment days\\r\\n      * and uses WISE_CONTRACT instance to mint all the WISE tokens\\r\\n      * @param _investorAddress requested investor calculation address\\r\\n      * @return _payout amount minted to the investors address\\r\\n      */\\r\\n    function payoutInvestorAddress(\\r\\n        address _investorAddress\\r\\n    )\\r\\n        public\\r\\n        afterPancakeSwapTransfer\\r\\n        returns (\\r\\n            uint256 _payout\\r\\n        )\\r\\n    {\\r\\n        _payout =\\r\\n        purchasedTokens[_investorAddress];\\r\\n        purchasedTokens[_investorAddress] = 0;\\r\\n\\r\\n        if (_payout \\u003e 0) {\\r\\n            WISE_CONTRACT.mintSupply(\\r\\n                _investorAddress,\\r\\n                _payout\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //  HELPER FUNCTIONS (PURE)  //\\r\\n    //  -----------------------  //\\r\\n\\r\\n    /** @notice prepares path variable for pancakeswap to exchange tokens\\r\\n      * @dev used in reserveWiseWithToken() swapExactTokensForTokens call\\r\\n      * @param _tokenAddress BEP20 token address to be swapped for BNB\\r\\n      * @return _path that is used to swap tokens for BNB on pancakeswap\\r\\n      */\\r\\n    function preparePath(\\r\\n        address _tokenAddress\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            address[] memory _path\\r\\n        )\\r\\n    {\\r\\n        _path = new address[](2);\\r\\n        _path[0] = _tokenAddress;\\r\\n        _path[1] = WBNB;\\r\\n    }\\r\\n\\r\\n    //  TIMING FUNCTIONS  //\\r\\n    //  ----------------  //\\r\\n\\r\\n    /** @notice shows current day of WiseToken\\r\\n      * @dev value is fetched from WISE_CONTRACT\\r\\n      * @return iteration day since WISE inception\\r\\n      */\\r\\n    function _currentWiseDay()\\r\\n        public\\r\\n        view\\r\\n        returns (uint64)\\r\\n    {\\r\\n        return WISE_CONTRACT.currentWiseDay();\\r\\n    }\\r\\n\\r\\n    //  EMERGENCY REFUND FUNCTIONS  //\\r\\n    //  --------------------------  //\\r\\n\\r\\n    /** @notice allows refunds if funds are stuck\\r\\n      */\\r\\n    function requestRefund()\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amount,\\r\\n            uint256 tokens\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            g.pancakeSwaped == false  \\u0026\\u0026\\r\\n            investorBalance[msg.sender] \\u003e 0 \\u0026\\u0026\\r\\n            purchasedTokens[msg.sender] \\u003e 0 \\u0026\\u0026\\r\\n            _currentWiseDay() \\u003e INVESTMENT_DAYS + 10,\\r\\n           unicode\\u0027WISE: refund not possible \ud83e\udd5e\\u0027\\r\\n        );\\r\\n\\r\\n        amount =\\r\\n        investorBalance[msg.sender];\\r\\n        investorBalance[msg.sender] = 0;\\r\\n\\r\\n        tokens =\\r\\n        purchasedTokens[msg.sender];\\r\\n        purchasedTokens[msg.sender] = 0;\\r\\n\\r\\n        g.totalTransferTokens =\\r\\n        g.totalTransferTokens.sub(\\r\\n            tokens\\r\\n        );\\r\\n\\r\\n        if (amount \\u003e 0) {\\r\\n            msg.sender.transfer(\\r\\n                amount\\r\\n            );\\r\\n\\r\\n            emit RefundIssued(\\r\\n                msg.sender,\\r\\n                amount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMathLT {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\u0027WISE: addition overflow\\u0027);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\u0027WISE: subtraction overflow\\u0027);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\u0027WISE: multiplication overflow\\u0027);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\u0027WISE: division by zero\\u0027);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\u0027WISE: modulo by zero\\u0027);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wiseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeSwapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_syntheticBNB\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"senderValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cashBackAmount\",\"type\":\"uint256\"}],\"name\":\"CashBackIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountTokenA\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountTokenB\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"PancakeSwapResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"currentWiseDay\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"investmentMode\",\"type\":\"uint8\"}],\"name\":\"WiseReservation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"$getMyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVESTMENT_DAYS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INVEST\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANCAKE_PAIR\",\"outputs\":[{\"internalType\":\"contract PancakeSwapV2PairLT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANCAKE_ROUTER\",\"outputs\":[{\"internalType\":\"contract PancakeSwapRouterLT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFUND_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SBNB_CONTRACT\",\"outputs\":[{\"internalType\":\"contract ISyntheticBNBToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_COST\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WISE_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IWiseTokenLT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentWiseDay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newKeeper\",\"type\":\"address\"}],\"name\":\"changeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwardLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cashBackTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTransferTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBNBContributed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pancakeSwaped\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"}],\"name\":\"payoutInvestorAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_invesmentMode\",\"type\":\"uint8\"}],\"name\":\"reserveWise\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_invesmentMode\",\"type\":\"uint8\"}],\"name\":\"reserveWiseWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wiseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_syntheticBNB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeSwapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeSwapRouter\",\"type\":\"address\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueInvestors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LiquidityTransformer", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001ca39bcf7b0399e1149622b9524541a02e70a4a900000000000000000000000016e5d8a4b0a0b97be03bbc8063ff2ae19f2444530000000000000000000000006f7c37ac5712d94cce927fa864454f3627b02e34", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7eb8c36c96de9f38d880ce3279a9d5fe64ef2fcd6284394e70db39b92d4b4116"}