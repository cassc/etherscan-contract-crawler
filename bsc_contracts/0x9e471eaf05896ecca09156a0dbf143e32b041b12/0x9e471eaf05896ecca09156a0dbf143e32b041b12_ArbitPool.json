{"SourceCode": "pragma solidity 0.5.10;\r\n\r\ninterface IBEP20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract ArbitPool {\r\n    struct User {\r\n        uint256 id;\r\n        uint256 cycle;\r\n        address upline;\r\n        uint256 referrals;\r\n        uint256 payouts;\r\n        uint256 direct_bonus;\r\n        uint256 match_bonus;\r\n        uint256 deposit_amount;\r\n        uint256 deposit_payouts;\r\n        uint40 deposit_time;\r\n        uint256 total_deposits;\r\n        uint256 total_payouts;\r\n        uint256 total_structure;\r\n        address[] userReferrals;\r\n        uint40 ref_countfor_reward;\r\n    }\r\n\r\n    address payable public owner;\r\n    uint8 platform_fee = 5;\r\n    uint8 arbit_sniper_bot_amount = 40;\r\n    address payable public arbit_sniper_bot;\r\n    uint256 public currId = 1;\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public usersList;\r\n    uint256 public min_deposit = 50 ether; // 50 USDT\r\n    uint8[] public ref_bonuses;\r\n    uint8[] public referrals_need;\r\n\r\n    uint256 public total_users = 1;\r\n    uint256 public total_deposited;\r\n    uint256 public total_withdraw;\r\n    event Upline(address indexed addr, address indexed upline);\r\n    event NewDeposit(address indexed addr, uint256 amount);\r\n    event DirectPayout(\r\n        address indexed addr,\r\n        address indexed from,\r\n        uint256 amount\r\n    );\r\n    event MatchPayout(\r\n        address indexed addr,\r\n        address indexed from,\r\n        uint256 amount\r\n    );\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n    event LimitReached(address indexed addr, uint256 amount);\r\n    IBEP20 tokenContract;\r\n\r\n    constructor(address payable _owner,address payable _arbit_sniper_bot, address _contractAddress) public {\r\n        owner = _owner;\r\n        arbit_sniper_bot = _arbit_sniper_bot;\r\n        tokenContract = IBEP20(_contractAddress);\r\n        ref_bonuses.push(50);\r\n        ref_bonuses.push(40);\r\n        ref_bonuses.push(30);\r\n        ref_bonuses.push(20);\r\n        ref_bonuses.push(10);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(5);\r\n\r\n        referrals_need.push(1);\r\n        referrals_need.push(2);\r\n        referrals_need.push(2);\r\n        referrals_need.push(3);\r\n        referrals_need.push(3);\r\n        referrals_need.push(3);\r\n        referrals_need.push(3);\r\n        referrals_need.push(3);\r\n        referrals_need.push(3);\r\n        referrals_need.push(3);\r\n        referrals_need.push(4);\r\n        referrals_need.push(4);\r\n        referrals_need.push(4);\r\n        referrals_need.push(4);\r\n        referrals_need.push(4);\r\n        referrals_need.push(5);\r\n        referrals_need.push(5);\r\n        referrals_need.push(5);\r\n        referrals_need.push(5);\r\n        referrals_need.push(5);\r\n        referrals_need.push(5);\r\n        referrals_need.push(5);\r\n        referrals_need.push(5);\r\n        referrals_need.push(5);\r\n        referrals_need.push(5);\r\n\r\n        usersList[currId] = owner;\r\n        users[owner].id = currId;\r\n        currId++;\r\n    }\r\n\r\n    function _setUpline(address _addr, address _upline) private {\r\n        if (\r\n            users[_addr].upline == address(0) &&\r\n            _upline != _addr &&\r\n            _addr != owner &&\r\n            (users[_upline].deposit_time > 0 || _upline == owner)\r\n        ) {\r\n            users[_addr].upline = _upline;\r\n            users[_upline].referrals++;\r\n            if (users[_addr].id == 0) {\r\n                users[_addr].id = currId;\r\n                usersList[currId] = _addr;\r\n                currId++;\r\n                users[users[_addr].upline].userReferrals.push(_addr);\r\n            }\r\n            emit Upline(_addr, _upline);\r\n\r\n            total_users++;\r\n\r\n            for (uint8 i = 0; i < ref_bonuses.length; i++) {\r\n                if (_upline == address(0)) break;\r\n                users[_upline].total_structure++;\r\n                _upline = users[_upline].upline;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _deposit(address _addr, uint256 _amount) private {\r\n        require(\r\n            users[_addr].upline != address(0) || _addr == owner,\r\n            \"No upline\"\r\n        );\r\n        require(\r\n            tokenContract.transferFrom(_addr, address(this), _amount),\r\n            \"Amount transfer failed\"\r\n        );\r\n        if (users[_addr].deposit_time > 0) {\r\n            users[_addr].cycle++;\r\n            require(users[_addr].payouts >= this.maxPayoutOf(users[_addr].deposit_amount, _addr),\"Deposit already exists\");\r\n            require(_amount >= users[_addr].deposit_amount,\"Amount Must be greater or equal to your previous deposit\");\r\n        } else {\r\n            require(_amount >= min_deposit, \"Min Deposit 50 USDT\");\r\n            require(_amount % 50 == 0, \"Amount must be multiples of 50 USDT\");\r\n        }\r\n        users[_addr].payouts = 0;\r\n        users[_addr].deposit_amount = _amount;\r\n        users[_addr].deposit_payouts = 0;\r\n        users[_addr].deposit_time = uint40(block.timestamp);\r\n        users[_addr].total_deposits += _amount;\r\n        users[_addr].ref_countfor_reward = 0;\r\n        total_deposited += _amount;\r\n        emit NewDeposit(_addr, _amount);\r\n        if (users[_addr].upline != address(0)) {\r\n            address cref = users[_addr].upline;\r\n            if (cref == address(0)) cref = owner;\r\n            if (_amount >= users[cref].deposit_amount) {\r\n                if (\r\n                    uint40(block.timestamp) <=\r\n                    users[cref].deposit_time + (15 days)\r\n                ) {\r\n                    users[cref].ref_countfor_reward += 1;\r\n                }\r\n            }\r\n            uint256 direct_bonus_amount = 0;\r\n            if(_amount <= 500 ether){\r\n                direct_bonus_amount = (_amount * 5) / 100;\r\n            } else if(_amount > 500 ether && _amount <= 1000 ether){\r\n                direct_bonus_amount = (_amount * 6) / 100;\r\n            } else if(_amount > 1000 ether && _amount <= 5000 ether){\r\n                direct_bonus_amount = (_amount * 7) / 100;\r\n            } else if(_amount > 5000 ether){\r\n                direct_bonus_amount = (_amount * 10) / 100;\r\n            }   \r\n            users[cref].direct_bonus += direct_bonus_amount;\r\n            emit DirectPayout(cref, _addr, direct_bonus_amount);         \r\n        }\r\n        tokenContract.transfer(owner, (_amount * platform_fee) / 100);\r\n        tokenContract.transfer(arbit_sniper_bot, (_amount * arbit_sniper_bot_amount) / 100);\r\n    }\r\n\r\n    function _refPayout(address _addr, uint256 _amount) private {\r\n        address up = users[_addr].upline;\r\n        for (uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if (up == address(0)) break;\r\n\r\n            if (users[up].referrals >= referrals_need[i]) {\r\n                uint256 bonus = (_amount * (ref_bonuses[i] / 10)) / 100;\r\n                users[up].match_bonus += bonus;\r\n                emit MatchPayout(up, _addr, bonus);\r\n            }\r\n            up = users[up].upline;\r\n        }\r\n    }\r\n\r\n    function deposit(address _upline, uint256 _amount) external payable {\r\n        _setUpline(msg.sender, _upline);\r\n        _deposit(msg.sender, _amount);\r\n    }\r\n\r\n    function withdraw() external {\r\n        (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);\r\n\r\n        require(users[msg.sender].payouts < max_payout, \"Full payouts\");\r\n\r\n        // Deposit payout\r\n        if (to_payout > 0) {\r\n            if (users[msg.sender].payouts + to_payout > max_payout) {\r\n                to_payout = max_payout - users[msg.sender].payouts;\r\n            }\r\n\r\n            users[msg.sender].deposit_payouts += to_payout;\r\n            users[msg.sender].payouts += to_payout;\r\n\r\n            _refPayout(msg.sender, to_payout);\r\n        }\r\n\r\n        // Direct payout\r\n        if (\r\n            users[msg.sender].payouts < max_payout &&\r\n            users[msg.sender].direct_bonus > 0\r\n        ) {\r\n            uint256 direct_bonus = users[msg.sender].direct_bonus;\r\n            if (users[msg.sender].payouts + direct_bonus > max_payout) {\r\n                direct_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n            users[msg.sender].direct_bonus -= direct_bonus;\r\n            users[msg.sender].payouts += direct_bonus;\r\n            to_payout += direct_bonus;\r\n        }\r\n\r\n        // Match payout\r\n        if (\r\n            users[msg.sender].payouts < max_payout &&\r\n            users[msg.sender].match_bonus > 0\r\n        ) {\r\n            uint256 match_bonus = users[msg.sender].match_bonus;\r\n            if (users[msg.sender].payouts + match_bonus > max_payout) {\r\n                match_bonus = max_payout - users[msg.sender].payouts;\r\n            }\r\n            users[msg.sender].match_bonus -= match_bonus;\r\n            users[msg.sender].payouts += match_bonus;\r\n            to_payout += match_bonus;\r\n        }\r\n        require(to_payout > 0, \"Zero payout\");\r\n\r\n        users[msg.sender].total_payouts += to_payout;\r\n        total_withdraw += to_payout;\r\n\r\n        tokenContract.transfer(msg.sender, to_payout);\r\n        emit Withdraw(msg.sender, to_payout);\r\n\r\n        if (users[msg.sender].payouts >= max_payout) {\r\n            emit LimitReached(msg.sender, users[msg.sender].payouts);\r\n        }\r\n    }\r\n\r\n    function viewUserReferrals(address user)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return users[user].userReferrals;\r\n    }\r\n\r\n    function maxPayoutOf(uint256 _amount, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (users[_user].ref_countfor_reward >= 5) {\r\n            return _amount * 3;\r\n        } else return _amount * 2;\r\n    }\r\n\r\n    function payoutOf(address _addr)\r\n        external\r\n        view\r\n        returns (uint256 payout, uint256 max_payout)\r\n    {\r\n        max_payout = this.maxPayoutOf(users[_addr].deposit_amount, _addr);\r\n\r\n        if (users[_addr].deposit_payouts < max_payout) {\r\n            payout = ((users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 43200 / 2)) / 100) - users[_addr].deposit_payouts; // 86400\r\n\r\n            if (users[_addr].deposit_payouts + payout > max_payout) {\r\n                payout = max_payout - users[_addr].deposit_payouts;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n        Only external call\r\n    */\r\n    function userInfo(address _addr)\r\n        external\r\n        view\r\n        returns (\r\n            address upline,\r\n            uint40 deposit_time,\r\n            uint256 deposit_amount,\r\n            uint256 payouts,\r\n            uint256 direct_bonus,\r\n            uint256 match_bonus\r\n        )\r\n    {\r\n        return (\r\n            users[_addr].upline,\r\n            users[_addr].deposit_time,\r\n            users[_addr].deposit_amount,\r\n            users[_addr].payouts,\r\n            users[_addr].direct_bonus,\r\n            users[_addr].match_bonus\r\n        );\r\n    }\r\n\r\n    function userInfoTotals(address _addr)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 referrals,\r\n            uint256 total_deposits,\r\n            uint256 total_payouts,\r\n            uint256 total_structure\r\n        )\r\n    {\r\n        return (\r\n            users[_addr].referrals,\r\n            users[_addr].total_deposits,\r\n            users[_addr].total_payouts,\r\n            users[_addr].total_structure\r\n        );\r\n    }\r\n\r\n    function contractInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _total_users,\r\n            uint256 _total_deposited,\r\n            uint256 _total_withdraw\r\n        )\r\n    {\r\n        return (total_users, total_deposited, total_withdraw);\r\n    }\r\n\r\n    function transferOwnerShip(address payable newOwner) external {\r\n        require(msg.sender == owner, \"Permission denied\");\r\n        owner = newOwner;\r\n    }\r\n    function changeArbitSniperbot(address payable _newbot) external {\r\n        require(msg.sender == owner, \"Permission denied\");\r\n        arbit_sniper_bot = _newbot;\r\n    }\r\n\r\n    function setPlatformFee(uint8 _fee) external {\r\n        require(msg.sender == owner, \"Permission denied\");\r\n        platform_fee = _fee;\r\n    }\r\n    function setArbitSniperBotAmount(uint8 _amount) external {\r\n        require(msg.sender == owner, \"Permission denied\");\r\n        arbit_sniper_bot_amount = _amount;\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint8\"}],\"name\":\"setArbitSniperBotAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"name\":\"_total_users\",\"type\":\"uint256\"},{\"name\":\"_total_deposited\",\"type\":\"uint256\"},{\"name\":\"_total_withdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"name\":\"upline\",\"type\":\"address\"},{\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"name\":\"payouts\",\"type\":\"uint256\"},{\"name\":\"direct_bonus\",\"type\":\"uint256\"},{\"name\":\"match_bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"maxPayoutOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upline\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newbot\",\"type\":\"address\"}],\"name\":\"changeArbitSniperbot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"max_payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfoTotals\",\"outputs\":[{\"name\":\"referrals\",\"type\":\"uint256\"},{\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"name\":\"total_payouts\",\"type\":\"uint256\"},{\"name\":\"total_structure\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint8\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbit_sniper_bot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrals_need\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"cycle\",\"type\":\"uint256\"},{\"name\":\"upline\",\"type\":\"address\"},{\"name\":\"referrals\",\"type\":\"uint256\"},{\"name\":\"payouts\",\"type\":\"uint256\"},{\"name\":\"direct_bonus\",\"type\":\"uint256\"},{\"name\":\"match_bonus\",\"type\":\"uint256\"},{\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"name\":\"deposit_payouts\",\"type\":\"uint256\"},{\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"name\":\"total_payouts\",\"type\":\"uint256\"},{\"name\":\"total_structure\",\"type\":\"uint256\"},{\"name\":\"ref_countfor_reward\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewUserReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_arbit_sniper_bot\",\"type\":\"address\"},{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DirectPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MatchPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LimitReached\",\"type\":\"event\"}]", "ContractName": "ArbitPool", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006c3b9f1867cd4fdde3232203a07fe09a734ac86a0000000000000000000000005bf09995665de25d5ba0d41433829ccc14598df200000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://122cfc20c8048e121687ac146165f8b4c79b176b1a4713df9d3ba3cc668b5958"}