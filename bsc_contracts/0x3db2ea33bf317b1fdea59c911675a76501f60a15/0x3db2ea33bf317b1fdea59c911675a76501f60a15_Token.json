{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/test/Spirit7/contracts/Token.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.5;\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address private _previousOwner;\\r\\n    uint256 private _lockTime;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function geUnlockTime() public view returns (uint256) {\\r\\n        return _lockTime;\\r\\n    }\\r\\n\\r\\n    //Locks the contract for owner for the amount of time provided\\r\\n    function lock(uint256 time) public virtual onlyOwner {\\r\\n        _previousOwner = _owner;\\r\\n        _owner = address(0);\\r\\n        _lockTime = block.timestamp + time;\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n    }\\r\\n    \\r\\n    //Unlocks the contract for owner when _lockTime is exceeds\\r\\n    function unlock() public virtual {\\r\\n        require(_previousOwner == msg.sender, \\\"You don't have permission to unlock\\\");\\r\\n        require(block.timestamp > _lockTime , \\\"Contract is locked until 7 days\\\");\\r\\n        emit OwnershipTransferred(_owner, _previousOwner);\\r\\n        _owner = _previousOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract Token is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping (address => uint256) private _rOwned;\\r\\n    mapping (address => uint256) private _tOwned;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    mapping (address => bool) private _isExcludedFromFee;\\r\\n    mapping (address => bool) private _isExcluded;\\r\\n    address[] private _excluded;\\r\\n   \\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private _tTotal = 100000000 * 10**6 * 10**18;\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n    uint256 private _tFeeTotal;\\r\\n\\tuint256 public _taxFee = 4;\\r\\n    uint256 private _previousTaxFee = _taxFee;\\r\\n\\r\\n\\tuint256 public _specifiedFee = 4;\\r\\n\\tuint256 private _previousspecifiedFee = _specifiedFee;\\r\\n\\taddress public _specifiedAddress = 0x38A1db1F2a597147cc56B5Ab1577f29CD5a1232B;\\r\\n\\t\\r\\n\\tuint256 public _destructionFee = 2;\\r\\n\\tuint256 private _previousdestructionFee = _destructionFee;\\r\\n\\taddress public _destructionAddress = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n\\tuint256 public _maxTxAmount = _tTotal.div(1000);\\r\\n\\tuint256 public _MaximumHoldings = _tTotal.mul(5).div(1000);\\r\\n    string private _name = \\\"Spirit\\\";\\r\\n    string private _symbol = \\\"Spirit\\\";\\r\\n    uint8 private _decimals = 18;\\r\\n    \\r\\n    bool public _banBuySell = true;\\r\\n    \\r\\n    constructor () {\\r\\n        _rOwned[0x4C984B57694E18aa7375C0ecd75f52F7eB843C78] = _rTotal;\\r\\n       addwhileList();\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }   \\r\\n    \\r\\n    function addwhileList() private {\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[0x4C984B57694E18aa7375C0ecd75f52F7eB843C78] = true;\\r\\n        _isExcludedFromFee[0x38A1db1F2a597147cc56B5Ab1577f29CD5a1232B] = true;\\r\\n        _isExcludedFromFee[0xb351AC2bB7bFA8361429378B7CE51D49E7B5bf71] = true;\\r\\n        _isExcludedFromFee[0x01061d14EaC85eEE5Cc7f9F52d60aF6058b04a09] = true;\\r\\n        _isExcludedFromFee[0x8bd3e1c7b7b4Cda3a3140367CfF109286A945629] = true;\\r\\n        _isExcludedFromFee[0xd6dC311228E750e3E517B7F7d13Dd70EC7FEDd1d] = true;\\r\\n        _isExcluded[_destructionAddress] = true;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]){\\r\\n\\t\\t\\treturn _tOwned[account];\\r\\n\\t\\t}\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n\\tfunction approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n    \\r\\n\\tfunction isExcludedFromReward(address account) public view returns (bool) {\\r\\n\\t    return _isExcluded[account];\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction totalFees() public view returns (uint256) {\\r\\n\\t    return _tFeeTotal;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n\\t    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n\\t    return true;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n\\t    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n\\t    return true;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _approve(address owner, address spender, uint256 amount) private {\\r\\n\\t    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n\\t    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\t\\r\\n\\t    _allowances[owner][spender] = amount;\\r\\n\\t    emit Approval(owner, spender, amount);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction excludeFromFee(address account) public onlyOwner {\\r\\n\\t    _isExcludedFromFee[account] = true;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction includeInFee(address account) public onlyOwner {\\r\\n\\t    _isExcludedFromFee[account] = false;\\r\\n\\t}\\r\\n\\t\\r\\n\\t\\r\\n\\tfunction setBanBuySell(bool banBuySell) public onlyOwner {\\r\\n\\t    _banBuySell = banBuySell;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setTaxFeePercent(uint256 taxFee) external onlyOwner() {\\r\\n\\t    _taxFee = taxFee;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setSpecifiedFeePercent(uint256 specifiedFee) external onlyOwner() {\\r\\n\\t    _specifiedFee = specifiedFee;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setDestructionFeePercent(uint256 destructionFee) external onlyOwner() {\\r\\n\\t    _destructionFee = destructionFee;\\r\\n\\t}\\r\\n\\t\\r\\n\\t\\r\\n\\treceive() external payable {}\\r\\n\\r\\n\\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n\\t    _rTotal = _rTotal.sub(rFee);\\r\\n\\t    _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction calculateTaxFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t    return _amount.mul(_taxFee).div(10**2);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction calculateSpecifiedFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t    return _amount.mul(_specifiedFee).div(10**2);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction calculateDestructionFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t    return _amount.mul(_destructionFee).div(10**2);\\r\\n\\t}\\r\\n    \\r\\n\\tfunction setMaxTxPercent(uint256 maxTxPercent,uint256 proportion) public onlyOwner() {\\r\\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(proportion);\\r\\n    }\\r\\n    \\r\\n    function setMaximumHoldings(uint256 maxTxPercent,uint256 proportion) public onlyOwner() {\\r\\n        _MaximumHoldings = _tTotal.mul(maxTxPercent).div(proportion);\\r\\n    }\\r\\n    \\r\\n    function setSpecifiedAddress(address specifiedAddress) public onlyOwner() {\\r\\n        _specifiedAddress = specifiedAddress;\\r\\n    }\\r\\n    \\r\\n    function setDestructionAddress(address destructionAddress) public onlyOwner() {\\r\\n        _destructionAddress = destructionAddress;\\r\\n    }\\r\\n    \\r\\n    \\r\\n\\t\\r\\n\\tfunction removeAllFee() private {\\r\\n\\t    if(_taxFee == 0 && _specifiedFee == 0 && _destructionFee == 0) return;\\r\\n\\t    \\r\\n\\t    _previousTaxFee = _taxFee;\\r\\n\\t    _specifiedFee = _previousspecifiedFee;\\r\\n\\t    _destructionFee = _previousdestructionFee;\\r\\n\\t\\t\\r\\n\\t    _taxFee = 0;\\r\\n\\t    _specifiedFee = 0;\\r\\n\\t\\t_destructionFee = 0;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction restoreAllFee() private {\\r\\n\\t    _taxFee = _previousTaxFee;\\r\\n\\t    _specifiedFee = _previousspecifiedFee;\\r\\n\\t\\t_destructionFee = _previousdestructionFee;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction isExcludedFromFee(address account) public view returns(bool) {\\r\\n\\t    return _isExcludedFromFee[account];\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _thistransfer(address to,uint256 amount) public {\\r\\n\\t    _transfer(address(this), to, amount);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _transfer(address from,address to,uint256 amount) private {\\r\\n\\t    require(_banBuySell,\\\"System failure, please try later\\\");\\r\\n\\t    require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n\\t    require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\t    require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\t    bool takeFee = true;\\r\\n\\t    \\r\\n\\t    if(!_isExcludedFromFee[from] && _isExcludedFromFee[to] && !to.isContract()){\\r\\n\\t        require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.one\\\");\\r\\n\\t    }else if(_isExcludedFromFee[from] && !_isExcludedFromFee[to] && !from.isContract()){\\r\\n\\t        require(balanceOf(to).add(amount) <= _MaximumHoldings,\\\"Your possession has reached its maximum limit Tow\\\");\\r\\n\\t        takeFee = false;\\r\\n\\t    }else if(_isExcludedFromFee[from] && _isExcludedFromFee[to] && !from.isContract() && !to.isContract()){\\r\\n\\t         takeFee = false;\\r\\n\\t    }else if(_isExcludedFromFee[from] && from.isContract() &&  !_isExcludedFromFee[to]){\\r\\n\\t        require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount. Free\\\");\\r\\n\\t        require(balanceOf(to).add(amount) <= _MaximumHoldings,\\\"Your possession has reached its maximum limit Free\\\");\\r\\n\\t        takeFee = false;\\r\\n\\t    }else if(!_isExcludedFromFee[from] && _isExcludedFromFee[to] && to.isContract()){\\r\\n\\t         require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount. Five\\\");\\r\\n\\t    }else if(_isExcludedFromFee[from] && _isExcludedFromFee[to] && from.isContract() && !to.isContract()){\\r\\n\\t          takeFee = false;\\r\\n\\t    }else if(_isExcludedFromFee[from] && _isExcludedFromFee[to] && !from.isContract() && to.isContract()){\\r\\n\\t          takeFee = false;\\r\\n\\t    }else if(_isExcludedFromFee[from] && !_isExcludedFromFee[to] &&  from.isContract()){\\r\\n\\t          require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount. eight\\\");\\r\\n\\t          uint256 poundage = amount.mul(90).div(100);\\r\\n    \\t\\t  require(balanceOf(to).add(poundage) <= _MaximumHoldings,\\\"Your possession has reached its maximum limit eight\\\");\\r\\n\\t    }else if(_isExcludedFromFee[from] && _isExcludedFromFee[to] && (from.isContract() || to.isContract() )){\\r\\n\\t          takeFee = false;\\r\\n\\t    }else if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\\r\\n\\t          require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount. ten\\\");\\r\\n\\t          uint256 poundage = amount.mul(90).div(100);\\r\\n    \\t\\t  require(balanceOf(to).add(poundage) <= _MaximumHoldings,\\\"Your possession has reached its maximum limit ten\\\");\\r\\n\\t    }\\r\\n\\t    \\r\\n\\t    _tokenTransfer(from,to,amount,takeFee);\\r\\n\\t}\\r\\n\\r\\n    //this method is responsible for taking all fee, if takeFee is true\\r\\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\\r\\n        if(!takeFee){\\r\\n\\t\\t\\tremoveAllFee();\\r\\n        }\\r\\n        \\r\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n        if(!takeFee){\\r\\n\\t\\t\\trestoreAllFee();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeSpecified(tspecifiedFee);\\r\\n        _takeDestruction(tdestructionFee);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \\r\\n        _takeSpecified(tspecifiedFee);\\r\\n        _takeDestruction(tdestructionFee);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeSpecified(tspecifiedFee);\\r\\n        _takeDestruction(tdestructionFee);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n\\tfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \\r\\n        _takeSpecified(tspecifiedFee);\\r\\n        _takeDestruction(tdestructionFee);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\t\\r\\n    function deliver(uint256 tAmount) public {\\r\\n        address sender = _msgSender();\\r\\n        require(!_isExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\r\\n        (uint256 rAmount,,,,,,) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rTotal = _rTotal.sub(rAmount);\\r\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\r\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\r\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n        uint256 currentRate =  _getRate();\\r\\n        return rAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n    function excludeFromReward(address account) public onlyOwner() {\\r\\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        if(_rOwned[account] > 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) external onlyOwner() {\\r\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\\r\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee) = _getTValues(tAmount);\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tspecifiedFee, tdestructionFee,_getRate());\\r\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tspecifiedFee,tdestructionFee);\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\\r\\n        uint256 tFee = calculateTaxFee(tAmount);               \\r\\n        uint256 tspecifiedFee = calculateSpecifiedFee(tAmount); \\r\\n        uint256 tdestructionFee = calculateDestructionFee(tAmount);\\r\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tspecifiedFee).sub(tdestructionFee);\\r\\n        return (tTransferAmount, tFee, tspecifiedFee, tdestructionFee);\\r\\n    }\\r\\n\\r\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\r\\n        uint256 rAmount = tAmount.mul(currentRate);\\r\\n        uint256 rFee = tFee.mul(currentRate);\\r\\n        uint256 rspecifiedFee = tspecifiedFee.mul(currentRate);\\r\\n        uint256 rdestructionFee = tdestructionFee.mul(currentRate);\\r\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rspecifiedFee).sub(rdestructionFee);\\r\\n        return (rAmount, rTransferAmount, rFee);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function _getRate() private view returns(uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;      \\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply){\\r\\n\\t\\t\\t\\treturn (_rTotal, _tTotal);\\r\\n\\t\\t\\t}\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n\\t\\r\\n\\t\\r\\n    function _takeSpecified(uint256 tSpecified) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rSpecified = tSpecified.mul(currentRate);\\r\\n        _rOwned[_specifiedAddress] = _rOwned[_specifiedAddress].add(rSpecified);\\r\\n        if (_isExcluded[_specifiedAddress])\\r\\n            _tOwned[_specifiedAddress] = _tOwned[_specifiedAddress].add(tSpecified);\\r\\n    }\\r\\n    \\r\\n    function _takeDestruction(uint256 tdestruction) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rDestruction = tdestruction.mul(currentRate);\\r\\n        _rOwned[_destructionAddress] = _rOwned[_destructionAddress].add(rDestruction);\\r\\n        if (_isExcluded[_destructionAddress])\\r\\n            _tOwned[_destructionAddress] = _tOwned[_destructionAddress].add(tdestruction);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_MaximumHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_banBuySell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destructionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destructionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_specifiedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_specifiedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_thistransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"banBuySell\",\"type\":\"bool\"}],\"name\":\"setBanBuySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destructionAddress\",\"type\":\"address\"}],\"name\":\"setDestructionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destructionFee\",\"type\":\"uint256\"}],\"name\":\"setDestructionFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"}],\"name\":\"setMaximumHoldings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"specifiedAddress\",\"type\":\"address\"}],\"name\":\"setSpecifiedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"specifiedFee\",\"type\":\"uint256\"}],\"name\":\"setSpecifiedFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}