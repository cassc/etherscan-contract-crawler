{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nlibrary ChainId {\r\n\tfunction get() internal view returns (uint256 chainId) {\r\n\t\tassembly {\r\n\t\t\tchainId := chainid()\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/libs/IERC20Metadata.sol\r\ninterface IERC20Metadata is IERC20 {\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\tthis;\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\tconstructor () {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\n// File: contracts/libs/Address.sol\r\nlibrary Address {\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\tuint256 size;\r\n\t\tassembly { size := extcodesize(account) }\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t  return functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\t\t(bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\tfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\t}\r\n\r\n\tfunction functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\tfunction _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: contracts/libs/SafeERC20.sol\r\nlibrary SafeERC20 {\r\n\tusing Address for address;\r\n\r\n\tfunction safeTransfer(\r\n\t\tIERC20 token,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\t}\r\n\r\n\tfunction safeTransferFrom(\r\n\t\tIERC20 token,\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\t}\r\n\r\n\tfunction safeApprove(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\trequire(\r\n\t\t\t(value == 0) || (token.allowance(address(this), spender) == 0),\r\n\t\t\t\"SafeERC20: approve from non-zero to non-zero allowance\"\r\n\t\t);\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\t}\r\n\r\n\tfunction safeIncreaseAllowance(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender) + value;\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\tfunction safeDecreaseAllowance(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\tunchecked {\r\n\t\t\tuint256 oldAllowance = token.allowance(address(this), spender);\r\n\t\t\trequire(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n\t\t\tuint256 newAllowance = oldAllowance - value;\r\n\t\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t\t}\r\n\t}\r\n\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\tbytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n\t\tif (returndata.length > 0) {\r\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: contracts/libs/TakeableV2.sol\r\nabstract contract TakeableV2 is Ownable {\r\n\tusing Address for address;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tevent CfoTakedToken(address caller, address token, address to,uint256 amount);\r\n\tevent CfoTakedETH(address caller,address to,uint256 amount);\r\n\r\n\taddress public cfo;\r\n\r\n\tmodifier onlyCfoOrOwner {\r\n\t\trequire(msg.sender == owner(), \"onlyCfo: forbidden\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(){\r\n\t\tcfo = msg.sender;\r\n\t}\r\n\r\n\tfunction takeToken(address token,address to,uint256 amount) public onlyCfoOrOwner {\r\n\t\trequire(token != address(0),\"invalid token\");\r\n\t\trequire(amount > 0,\"amount can not be 0\");\r\n\t\trequire(to != address(0),\"invalid to address\");\r\n\t\tIERC20(token).safeTransfer(to, amount);\r\n\t\temit CfoTakedToken(msg.sender,token,to, amount);\r\n\t}\r\n\r\n\tfunction takeETH(address to,uint256 amount) public onlyCfoOrOwner {\r\n\t\trequire(amount > 0,\"amount can not be 0\");\r\n\t\trequire(address(this).balance>=amount,\"insufficient balance\");\r\n\t\trequire(to != address(0),\"invalid to address\");\t\t\r\n\t\tpayable(to).transfer(amount);\r\n\t\temit CfoTakedETH(msg.sender,to,amount);\r\n\t}\r\n\r\n\tfunction takeAllToken(address token, address to) public {\r\n\t\tuint balance = IERC20(token).balanceOf(address(this));\r\n\t\tif(balance > 0){\r\n\t\t\ttakeToken(token, to, balance);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction takeAllTokenToSelf(address token) external {\r\n\t\ttakeAllToken(token,msg.sender);\r\n\t}\r\n\r\n\tfunction takeAllETH(address to) public {\r\n\t\tuint balance = address(this).balance;\r\n\t\tif(balance > 0){\r\n\t\t\ttakeETH(to, balance);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction takeAllETHToSelf() external {\r\n\t\ttakeAllETH(msg.sender);\r\n\t}\r\n\r\n\tfunction setCfo(address _cfo) external onlyOwner {\r\n\t\trequire(_cfo != address(0), \"_cfo can not be address 0\");\r\n\t\tcfo = _cfo;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\t\treturn c;\r\n\t}\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\t\treturn c;\r\n\t}\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n// File: contracts/ipp-token.sol\r\ncontract WDZD is TakeableV2, IERC20Metadata {\r\n\tusing Address for address;\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tstring private constant _name = \"WDZD\";\r\n\tstring private constant _symbol = \"WDZD\";\r\n\tuint256 private constant _totalSupply = 14672831*10**18;\r\n\r\n\tmapping (address => bool) public SwapPair;\r\n\r\n\tuint private constant RATE_PERCISION = 10000;\r\n\tuint public buyFeeRate = 100;\r\n\tuint public sellFeeRate = 100;\r\n\tuint public sendFeeRate = 0;\r\n\taddress public feeTo = 0x9FdC32e84526A4017E16C17FD494c49B57c06072;\r\n\taddress public deadAdd = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\tconstructor(\r\n\t\taddress _initHolder\r\n\t){\r\n\t\taddress holder = _initHolder == address(0) ? msg.sender : _initHolder;\r\n\t\t_balances[holder] = _totalSupply;\r\n\t\temit Transfer(address(0), holder, _totalSupply);\r\n\t}\r\n\r\n\tfunction name() public pure override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public pure override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public pure override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\tfunction totalSupply() public pure override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\tuint256 currentAllowance = _allowances[sender][_msgSender()];\r\n\t\trequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n\t\tunchecked {\r\n\t\t\t_approve(sender, _msgSender(), currentAllowance - amount);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n\t\tuint256 currentAllowance = _allowances[_msgSender()][spender];\r\n\t\trequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\t\tunchecked {\r\n\t\t\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\t\trequire(_balances[sender] >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\tuint recipientAmount = amount;\r\n\t\tuint feeRate = _takeFee(sender, recipient);\r\n\t\tif (feeRate>0 && feeRate<=RATE_PERCISION){\r\n\t\t\tuint feeAmount = amount.mul(feeRate) / RATE_PERCISION;\r\n\t\t\trecipientAmount -= feeAmount;\r\n\t\t\t_balances[feeTo] = _balances[feeTo].add(feeAmount);\r\n\t\t\temit Transfer(sender, feeTo, feeAmount);\r\n\t\t}\t\t\r\n\t\t_balances[sender] = _balances[sender].sub(amount);\r\n\t\t_balances[recipient] = _balances[recipient].add(recipientAmount);\r\n\t\temit Transfer(sender, recipient, recipientAmount);\r\n\t\t_afterTokenTransfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _takeFee(address _from, address _to) internal view returns (uint) {\r\n\t\tuint feeRate = 0;\r\n\t\tif (SwapPair[_from]){\r\n\t\t\tfeeRate = buyFeeRate;\r\n\t\t}\r\n\t\tif(SwapPair[_to]){\r\n\t\t\tfeeRate = sellFeeRate;\r\n\t\t}\r\n\t\tif (feeRate==0 && _to != address(0) && _to != deadAdd){\r\n\t\t\tfeeRate = sendFeeRate;\r\n\t\t}\r\n\t\treturn feeRate;\r\n\t}\r\n\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal {}\r\n\r\n\tfunction _afterTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal {}\r\n\r\n\tfunction isSwapPair(address pair) public view returns(bool){\r\n\t\treturn SwapPair[pair];\r\n\t}\r\n\r\n\tfunction addSwapPair(address _swapPair) external onlyOwner {\r\n\t\trequire(_swapPair != address(0),\"_swapPair can not be address 0\");\r\n\t\tSwapPair[_swapPair] = true;\r\n\t}\r\n\r\n\tfunction removeSwapPair(address _swapPair) external onlyOwner {\r\n\t\trequire(_swapPair != address(0),\"_swapPair can not be address 0\");\r\n\t\tSwapPair[_swapPair] = false;\r\n\t}\r\n\r\n\tfunction setBuyFeeRate(uint _rate) external onlyOwner {\r\n\t\trequire(_rate <= RATE_PERCISION,\"rate too large\");\r\n\t\tbuyFeeRate = _rate;\r\n\t}\r\n\r\n\tfunction setSellFeeRate(uint _rate) external onlyOwner {\r\n\t\trequire(_rate <= RATE_PERCISION,\"rate too large\");\r\n\t\tsellFeeRate = _rate;\r\n\t}\r\n\r\n\tfunction setSendFeeRate(uint _rate) external onlyOwner {\r\n\t\trequire(_rate <= RATE_PERCISION,\"rate too large\");\r\n\t\tsendFeeRate = _rate;\r\n\t}\r\n\r\n\tfunction setFeeTo(address _feeTo) external onlyOwner {\r\n\t\tfeeTo = _feeTo;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CfoTakedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CfoTakedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SwapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"addSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAdd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"isSwapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"removeSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cfo\",\"type\":\"address\"}],\"name\":\"setCfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setSellFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setSendFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"takeAllETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAllETHToSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"takeAllToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"takeAllTokenToSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WDZD", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ed9a7384d141799fa283d01647f8d23c56b0e4d9", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d58615a3992332b1483bb826868827b74a08ed6a9c1766aac303df698f767501"}