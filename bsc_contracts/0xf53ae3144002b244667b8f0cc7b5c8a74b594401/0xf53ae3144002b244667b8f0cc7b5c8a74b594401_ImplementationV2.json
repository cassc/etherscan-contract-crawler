{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\ninterface ERC1155_Interface {\r\n  function balanceOf( address account, uint256 id ) external view returns( uint256 );\r\n  function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external;\r\n  function gift_mint( uint256 amount, string memory uri, address owner ) external;\r\n}\r\n\r\ninterface ERC721_Interface {\r\n  function ownerOf(uint256 tokenId) view external returns (address);\r\n  function safeTransferFrom(address from,address to,uint256 tokenId) external;\r\n  function gift_mint(string memory tokenUri, address owner) external returns(uint256);\r\n}\r\n\r\ninterface ERC20_Interface {\r\n  function transferFrom( address from, address to, uint256 amount ) external returns ( bool );\t\r\n}\r\n\r\ninterface Common_Interface {\r\n  function isApprovedForAll(address account, address operator) view external returns( bool );\r\n}\r\n\r\n\r\n\r\n// This `Split_payment` struct\r\n// hold a single address and how much percentage to send\r\n// in this address. Say we have set 3 account for split payment\r\n// this struct will hold 1 account address and how much % to send\r\n// to this address.\r\nstruct Split_Payment {\r\n\taddress addr;\r\n\tuint per;\r\n}\r\n\r\nstruct Token_Details {\r\n  address owner;\r\n  uint chain_id;\r\n  uint price;\r\n  uint standard; // 721,1155\r\n  uint total_split_payment_accounts;\r\n  uint amount;\r\n  bool is_listed;\r\n  bool is_exist;\r\n  bool has_split_payment;\r\n  mapping( uint => Split_Payment ) index_to_split_payment;\r\n}\r\n\r\nstruct STORAGE {\r\n\tmapping( address => mapping( address => mapping( uint256 => Token_Details ) ) ) con_user_id_details;\r\n\tmapping( address => mapping( uint256 => uint256 ) ) con_id_royalty;\r\n\tmapping( address => mapping( uint256 => address ) ) con_id_creator;\r\n\tmapping( address => mapping( address => mapping( uint256 => bool ) ) ) con_user_id_secondSale;\r\n}\r\n\r\n\r\ncontract ImplementationV2 {\r\n  STORAGE S; \r\n\r\n  function list_for_sale (\r\n\taddress[] memory _params0, // 0.contract_address, 1.creator_address, 2.split_payment_addresses_from_index_2\r\n\tuint256[] memory _params1, // 0.token_id, 1.chain_id, 2.price, 3.royalty_percentage, 4.standard, 5.amount, 6.split_payment_percentages_from_index_6\r\n\tbool[] memory _params2 \t   // 0.has_split_payment, 1.has_royalty\r\n  ) public payable \r\n\tonly_owner( _params0[0], msg.sender, _params1[0], _params1[4], _params1[5] )\r\n\tmarket_need_access( _params0[0], msg.sender )\r\n  {\r\n\t//STORE DATA\r\n\tS.con_user_id_details[ _params0[0] ][ msg.sender ][ _params1[0] ].owner = msg.sender;\r\n\tS.con_user_id_details[ _params0[0] ][ msg.sender ][ _params1[0] ].chain_id = _params1[1];\r\n\tS.con_user_id_details[ _params0[0] ][ msg.sender ][ _params1[0] ].price = _params1[2];\r\n\tS.con_user_id_details[ _params0[0] ][ msg.sender ][ _params1[0] ].standard = _params1[4];\r\n\tS.con_user_id_details[ _params0[0] ][ msg.sender ][ _params1[0] ].is_listed = true;\r\n\tS.con_user_id_details[ _params0[0] ][ msg.sender ][ _params1[0] ].is_exist = true;\r\n\tS.con_user_id_details[ _params0[0] ][ msg.sender ][ _params1[0] ].has_split_payment = _params2[0];\r\n\tS.con_user_id_details[ _params0[0] ][ msg.sender ][ _params1[0] ].amount = _params1[5];\r\n\r\n\r\n\t//ADD ROYALITY AND CREATOR IF NOT SET ALREADY\r\n\tif( S.con_id_royalty[ _params0[0] ][ _params1[0] ] == 0 ) {\r\n\t\t S.con_id_royalty[ _params0[0] ][ _params1[0] ] = _params1[3];\r\n\t}\r\n\tif( S.con_id_creator[ _params0[0] ][ _params1[0] ] == address(0) ) {\r\n\t\t S.con_id_creator[ _params0[0] ][ _params1[0] ] = _params0[1];\r\n\t}\r\n\r\n\r\n\t//SET SPLIT PAYMENT IF HAS\r\n\tif( _params2[0] == true ) {\r\n\t\tuint256 i;\r\n\t\t//set addresses\r\n\t\tfor( i = 0;  i < _params0.length; i++ ) {\r\n\t\t\tif( i >= 2 ) {\r\n\t\t\t\tS.con_user_id_details[ _params0[0] ][ msg.sender ][ _params1[0] ].index_to_split_payment[ i - 1 ].addr = _params0[i];\r\n\t\t\t\tS.con_user_id_details[ _params0[0] ][ msg.sender ][ _params1[0] ].total_split_payment_accounts += 1; \r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//set percentage\r\n\t\tfor( i = 0;  i < _params1.length; i++ ) {\r\n\t\t\tif( i >= 6 ) {\r\n\t\t\t\tS.con_user_id_details[ _params0[0] ][ msg.sender ][ _params1[0] ].index_to_split_payment[ i - 5 ].per = _params1[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n  }\r\n\r\n\r\n  function unlist_for_sale( address con, uint256 token_id ) public {\r\n\trequire(\r\n\t\tS.con_user_id_details[con][ msg.sender ][token_id].owner == msg.sender,\r\n\t\t\"O O\" //only owner\r\n\t);\r\n\r\n\tS.con_user_id_details[con][ msg.sender ][token_id].is_listed = false;\r\n  }\r\n\r\n\r\n\r\n  function buy (\r\n\taddress[3] memory _params0, // contract_address, owner_address, erc20Contractaddress \r\n\tuint256[4] memory _params1, // token_id, standard, amount, listingFee\r\n\tbool[1] memory _params2     // is_erc_20\r\n  ) public payable\r\n  {\r\n\t      require(\r\n\t      \tS.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].owner != msg.sender,\r\n\t      \t\"A O\" //already owner\r\n\t      );\r\n\r\n\t      require(\r\n\t      \tS.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].is_listed == true,\r\n\t      \t\"N L\" //not listed\r\n\t      );\r\n\r\n\t\t  uint256 _price = S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].price * _params1[2] ;\r\n\t\t  if( _params2[0]  != true ) {\r\n\t\t  \t\trequire( msg.value == _price , \"P N C\" ); //price not correct\r\n\t\t\t\t_price = msg.value - _params1[3]; // [3] listingFee\r\n\t\t  }\r\n\r\n\t\t  uint256 _royality;\r\n\t\t  uint256 standard = S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].standard; \r\n\t\t  address _token_creator =  S.con_id_creator[ _params0[0] ][ _params1[0] ];\r\n\r\n\t\t  //CHECK IF TOKEN HAS ANY ROYALTY AND ITS SECONDARY SALE.\r\n\t\t  if( S.con_id_royalty[ _params0[0] ][ _params1[0] ] != 0 && S.con_user_id_secondSale[ _params0[0] ][ _params0[1] ][ _params1[0] ] ) {\r\n\r\n\t\t\t\t //ROYALTY PAYMENT ( TOTAL ROYALTY )\r\n\t\t\t\t _royality = calc_percentage( _price, S.con_id_royalty[ _params0[0] ][ _params1[0] ]  );\r\n\r\n\t\t\t\t  //IF SPLIT PAYMENT IS SET THEN SEND THE ROYALTY IN DIFFERENT ACCOUNT\t\r\n\t\t\t\t  if( S.con_user_id_details[ _params0[0] ][ _token_creator ][ _params1[0] ].has_split_payment == true ) {\r\n\t\t\t\t\t\t  if( _params2[0] ) {\r\n\t\t\t\t\t\t\t\tprocess_split_payment( _params0[0], _token_creator, _params1[0], S.con_user_id_details[ _params0[0] ][ _token_creator ][ _params1[0] ].total_split_payment_accounts, _royality, _params0[2] );\t\t\r\n\t\t\t\t\t\t  }else{\r\n\t\t\t\t\t\t\t\tprocess_split_payment( _params0[0], _token_creator, _params1[0], S.con_user_id_details[ _params0[0] ][ _token_creator ][ _params1[0] ].total_split_payment_accounts, _royality, address(0) );\t\t\r\n\t\t\t\t\t\t  }\r\n\r\n\t\t\t\t  } else {\r\n\t\t\t\t  //SPLIT PAYMENT NOT SET SEND ROYALTY IN SINGLE ACCOUNT\r\n\t\t\t\t\t\t  if( _params2[0] ) {\r\n\t\t\t\t  \t\t\tsend_money( _params0[2], _token_creator, _royality, 20);\r\n\t\t\t\t\t\t  }else{\r\n\t\t\t\t  \t\t\tsend_money( _params0[0], _token_creator, _royality, standard );\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t  }\r\n\r\n\t\t\t\t  //PRICE MONEY PAYMENT ( SUBTRACT ROYALTY FROM PRICE )\r\n\r\n\t\t\t\t  //IF SPLIT PAYMENT IS SET THEN SEND THE PRICE MONEY IN DIFFERENT ACCOUNT\t\r\n\t\t\t\t  if( S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].has_split_payment == true ) {\r\n\t\t\t\t\t\t  if( _params2[0] ) {\r\n\t\t\t\t\t\t\t\tprocess_split_payment( _params0[0], _params0[1], _params1[0], S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].total_split_payment_accounts, ( _price - _royality ), _params0[2] );\t\t\r\n\t\t\t\t\t\t  }else {\r\n\t\t\t\t\t\t\t\tprocess_split_payment( _params0[0], _params0[1], _params1[0], S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].total_split_payment_accounts, ( _price - _royality ), address(0) );\t\t\r\n\t\t\t\t\t\t  }\r\n\r\n\t\t\t\t  } else {\r\n\t\t\t\t  //SPLIT PAYMENT NOT SET SEND PRICE MONEY  IN SINGLE ACCOUNT\r\n\t\t\t\t\t\tif( _params2[0] ) {\r\n\t\t\t\t  \t\t\tsend_money( _params0[2], _params0[1], ( _price - _royality ), 20);\r\n\t\t\t\t\t\t}else {\r\n\t\t\t\t  \t\t\tsend_money( _params0[0], _params0[1], ( _price - _royality ), standard );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t  }\r\n\r\n\r\n\t\t  } else{\r\n\t\t  //DONT HAVE ANY ROYALTY, NO NEED TO SUBTRACT ROYALTY FROM PRICE\r\n\r\n\t\t\t\t  //IF SPLIT PAYMENT IS SET THEN SEND THE PRICE MONEY IN DIFFERENT ACCOUNT\t\r\n\t\t\t\t  if( S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].has_split_payment == true ) {\r\n\t\t\t\t\t\t  if( _params2[0] ) {\r\n\t\t\t\t\t\t\t\tprocess_split_payment( _params0[0], _params0[1], _params1[0], S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].total_split_payment_accounts, _price, _params0[2] );\t\t\r\n\t\t\t\t\t\t  }else{\r\n\t\t\t\t\t\t\t\tprocess_split_payment( _params0[0], _params0[1], _params1[0], S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].total_split_payment_accounts, _price, address(0) );\t\t\r\n\t\t\t\t\t\t  }\r\n\r\n\t\t\t\t  } else {\r\n\t\t\t\t  //SPLIT PAYMENT NOT SET SEND PRICE MONEY  IN SINGLE ACCOUNT\r\n\t\t\t\t\t\tif( _params2[0] ) {\r\n\t\t\t\t  \t\t\tsend_money( _params0[2], _params0[1], _price , 20 );\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t  \t\t\tsend_money( _params0[0], _params0[1], _price , standard );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t  }\r\n\r\n\t\t  }\r\n\r\n\t\t  // BUY COMPLEATE TRANSFER THE TOKEN\r\n\t\t  if( standard == 721 ) {\r\n\t\t\t\tERC721_Interface( _params0[0] ).safeTransferFrom( S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].owner, msg.sender, _params1[0] );\r\n\r\n\t\t  \t\t// BUY COMPLEATE UPDATE SOME DATA\r\n\t\t\t\tS.con_user_id_details[ _params0[0] ][ S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].owner ][ _params1[0] ].is_listed = false;\r\n\t\t  }\r\n\r\n\t\t  if( standard == 1155 ) {\r\n    \t\t   ERC1155_Interface( _params0[0] ).safeTransferFrom( S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].owner, msg.sender, _params1[0], _params1[2], \"0x0\" );\r\n\t\t  \t   // BUY COMPLEATE UPDATE SOME DATA\r\n\t\t\t   uint256 _left = S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].amount - _params1[2];\r\n\t\t\t   S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].amount = _left;\r\n\t\t\t   S.con_user_id_details[ _params0[0] ][ _params0[1] ][ _params1[0] ].is_listed = _left > 0 ;\r\n\t\t  }\r\n\r\n\t\t  S.con_user_id_secondSale[ _params0[0] ][ msg.sender ][ _params1[0] ] = true;\r\n\r\n  }\r\n\r\n  function lazy_mint (\r\n\taddress[] memory _params_one, //contract_address, token_creator, erc20Con, _split_payment_accounts_from_index_3\r\n\tuint256[] memory _params_two, //chain_id, price_of_one_copy, royalty_percentage, token_id, amount, standard, buy_amount, listingFee,  _split_payment_percentages_from_index_8\r\n\tbool[4] memory _params_three, //is_erc_1155, has_split_payment, has_royalty, is_erc_20\r\n\tstring memory tokenUri\r\n  ) public payable \r\n  {\r\n\t//error check \r\n\tif( _params_three[3] != true ) {\r\n\t\t  require( ( _params_two[1] * _params_two[6] )  == msg.value, \"S C P\" ); //send correct price\r\n\t}\r\n\r\n\t/*address erc20Con = address(0);*/\r\n\t/*if( _params_three[3] ){ erc20Con = _params_one[2]; }*/\r\n\r\n\t//ADD ROYALITY AND CREATOR IF NOT SET ALREADY\r\n\tif( S.con_id_royalty[ _params_one[0] ][ _params_two[3] ] == 0 ) {\r\n\t\t S.con_id_royalty[ _params_one[0] ][ _params_two[3] ] = _params_two[2];\r\n\t}\r\n\tif( S.con_id_creator[ _params_one[0] ][ _params_two[3] ] == address(0) ) {\r\n\t\t S.con_id_creator[ _params_one[0] ][ _params_two[3] ] = _params_one[1];\r\n\t}\r\n\r\n\t//STORE DATA FOR CREATOR\r\n\tS.con_user_id_details[ _params_one[0] ][ _params_one[1] ][ _params_two[3] ].owner = _params_one[1];\r\n\tS.con_user_id_details[ _params_one[0] ][ _params_one[1] ][ _params_two[3] ].chain_id = _params_two[0];\r\n\tS.con_user_id_details[ _params_one[0] ][ _params_one[1] ][ _params_two[3] ].price = _params_two[1];\r\n\tS.con_user_id_details[ _params_one[0] ][ _params_one[1] ][ _params_two[3] ].standard = _params_two[5];\r\n\tS.con_user_id_details[ _params_one[0] ][ _params_one[1] ][ _params_two[3] ].is_listed = true;\r\n\tS.con_user_id_details[ _params_one[0] ][ _params_one[1] ][ _params_two[3] ].is_exist = true;\r\n\tS.con_user_id_details[ _params_one[0] ][ _params_one[1] ][ _params_two[3] ].amount = _params_two[4] - _params_two[6];\r\n\tS.con_user_id_details[ _params_one[0] ][ _params_one[1] ][ _params_two[3] ].has_split_payment = _params_three[1];\r\n\r\n\t//SET SPLIT PAYMENT IF HAS\r\n\tif( _params_three[1] == true ) {\r\n\t\tuint256 i;\r\n\t\t//set addresses\r\n\t\tfor( i = 0;  i < _params_one.length; i++ ) {\r\n\t\t\tif( i >= 3 ) {\r\n\t\t\t\tS.con_user_id_details[ _params_one[0] ][ _params_one[1] ][ _params_two[3] ].index_to_split_payment[ i - 2 ].addr = _params_one[i];\r\n\t\t\t\tS.con_user_id_details[ _params_one[0] ][ _params_one[1] ][ _params_two[3] ].total_split_payment_accounts += 1; \r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//set percentage\r\n\t\tfor( i = 0;  i < _params_two.length; i++ ) {\r\n\t\t\tif( i >= 8 ) {\r\n\t\t\t\tS.con_user_id_details[ _params_one[0] ][ _params_one[1] ][ _params_two[3] ].index_to_split_payment[ i - 7 ].per = _params_two[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//1155 standard\r\n\tif(_params_three[0]){\r\n\t\t//mint the token\t\r\n\t\tERC1155_Interface(_params_one[0]).gift_mint( _params_two[4], tokenUri, _params_one[1] );\r\n\t\r\n\t//721 standard\r\n\t}else{\r\n\t\t//mint the token\r\n\t\tERC721_Interface( _params_one[0] ).gift_mint( tokenUri, _params_one[1] );\r\n\t}\r\n\r\n\tbuy( \r\n\t\t[ _params_one[0], _params_one[1], _params_one[2] ],\r\n\t\t[ _params_two[3], _params_two[5], _params_two[6], _params_two[7] ],\r\n\t\t[ _params_three[3] ]\r\n\t);\r\n\r\n  }\r\n\r\n\r\n  //HELPER FUNCTION\r\n  function process_split_payment ( address con, address user, uint256 token_id, uint256 total_accounts, uint256 money, address erc20Con ) private {\r\n\r\n\t\t\r\n\t\t// LOOP THROW ALL ADDRESS AND ROYALTY\r\n\t\tfor( uint256 i = 1;  i <= total_accounts; i++  ) {\r\n\r\n\t\t  \t// CHECK ADDRESS AND PERCENTAGE ARE NOT BLANK\t\r\n\t\t  \tif(\r\n\t\t  \t\tS.con_user_id_details[ con ][ user ][ token_id ].index_to_split_payment[ i ].addr != address(0) &&\r\n\t\t  \t\tS.con_user_id_details[ con ][ user ][ token_id ].index_to_split_payment[ i ].per != 0 \r\n\t\t  \t  )\r\n\t\t\t  {\r\n\r\n\t\t  \t\t    //SEND ROYALTY\r\n\t\t\t\t\tuint256 payment = calc_percentage( money, S.con_user_id_details[ con ][ user ][ token_id ].index_to_split_payment[ i ].per );\r\n\t\t\t\t\tif( erc20Con == address(0) ) {\r\n\t\t\t\t\t\t\tsend_money(\r\n\t\t\t\t\t\t\t\terc20Con,\r\n\t\t\t\t\t\t\t\tS.con_user_id_details[ con ][ user ][ token_id ].index_to_split_payment[ i ].addr,\r\n\t\t\t\t\t\t\t\tpayment,\r\n\t\t\t\t\t\t\t\tS.con_user_id_details[ con ][ user ][ token_id ].standard \r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tsend_money(\r\n\t\t\t\t\t\t\t\terc20Con,\r\n\t\t\t\t\t\t\t\tS.con_user_id_details[ con ][ user ][ token_id ].index_to_split_payment[ i ].addr,\r\n\t\t\t\t\t\t\t\tpayment,\r\n\t\t\t\t\t\t\t\t20\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t \r\n\t\t     }\r\n\r\n\t\t}\r\n\r\n  }\r\n\r\n  function send_money ( address con, address receiver, uint256 amount, uint256 standard ) private {\r\n\r\n\t\t//CHECK CONTRACT STANDARD AND SEND MONEY THAT WAY\t\r\n\t\tif( standard == 721 ) {\r\n\t\t   //SEND MONEY\r\n\t\t   payable( receiver ).transfer( amount );\r\n\r\n\t\t}\r\n\r\n\t\tif( standard == 1155 ) {\r\n\t\t   //SEND MONEY\r\n\t\t   payable( receiver ).transfer( amount );\r\n\t\t}\r\n\r\n\t\tif( standard == 20 ) {\r\n\t\t   bool success = ERC20_Interface( con ).transferFrom( msg.sender, receiver, amount );\r\n\t\t   require( success, \"ERC20 T T F.\" ); // erc20 token transfer fail\r\n\t\t}\r\n\r\n\t  require( standard == 721 || standard == 1155 || standard == 20, \"I S\" ); //invalid standard\r\n\r\n  }\r\n\r\n\r\n  function calc_percentage( uint256 _amount, uint256 _percentage ) private pure returns ( uint256 ) {\r\n  \t//_percentage is send by multiplying with 100\r\n  \t//to get the percentage we devide the percentage with 10000\r\n  \treturn _amount * _percentage / 10000;\r\n  }\r\n\r\n  //MODIFIER\r\n   modifier only_owner ( address _contract_add, address _user_add, uint256 _token_id, uint256 _standard, uint256 amount ) {\r\n\t  if( _standard == 721 ) {\r\n\t\t\trequire(\r\n\t\t\t  ERC721_Interface( _contract_add ).ownerOf( _token_id ) == msg.sender,\r\n\t\t\t  \"O O\" //only owner\r\n\t\t\t);\r\n\t  }\r\n\r\n\t  if( _standard == 1155 ) {\r\n\t\t   require(\r\n\t\t\t  ERC1155_Interface( _contract_add ).balanceOf( _user_add, _token_id ) >= amount,\r\n\t\t\t  \"O O\" //only owner\r\n\t\t   );\r\n\t  }\r\n\r\n\t  require( _standard == 721 || _standard == 1155, \"I S\" ); // invalid standard\r\n\r\n\t  _;\r\n  }\r\n\r\n  modifier market_need_access ( address _contract_add, address _user_add ) {\r\n\t  require(\r\n\t  \t  Common_Interface( _contract_add ).isApprovedForAll( _user_add, address(this) ),\r\n\t\t  \"M N A\" // market need access\r\n\t  );\r\n\r\n\t  _;\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[3]\",\"name\":\"_params0\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_params1\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool[1]\",\"name\":\"_params2\",\"type\":\"bool[1]\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_params_one\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_params_two\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[4]\",\"name\":\"_params_three\",\"type\":\"bool[4]\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"lazy_mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_params0\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_params1\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_params2\",\"type\":\"bool[]\"}],\"name\":\"list_for_sale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"con\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"}],\"name\":\"unlist_for_sale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ImplementationV2", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://002c6f69074054adf7c52c74c10227ec020c322827bb13173530a80634b2f89d"}