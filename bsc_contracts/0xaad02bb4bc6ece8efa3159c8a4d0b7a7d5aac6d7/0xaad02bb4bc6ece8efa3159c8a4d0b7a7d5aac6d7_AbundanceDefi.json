{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.18;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IPancakeRouter {\r\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n    constructor () {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n      require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n      _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n}\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract AbundanceDefi is Ownable, ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n    address private BUSD_address = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address private WealthToken_address = 0xa9d398823B2CEb247cB47C5CB22be03Fb7c73ACb;\r\n    \r\n    IERC20 public BUSDToken;\r\n    IERC20 public WealthToken;\r\n    IPancakeRouter public pancakeRouter;\r\n\r\n    uint256 public constant PERCENTS_DIVIDER = 1000;\r\n    uint256 public constant ADMIN_FEE = 40;\r\n    uint256 public constant ORIGIN_REFERRER_FEE = 750;\r\n    uint256 public  REFERRAL_BREAK_STEP = 4;\r\n    uint256 public  ADD_LIQUIDITY_STEP = 50 ether;\r\n    bool public  ADD_LIQUIDITY_ENABLED = true;\r\n    uint256[] public REFERRAL_PERCENTS = [\r\n        390,\r\n        120,\r\n        75,\r\n        40,\r\n        35,\r\n        30,\r\n        25,\r\n        20,\r\n        15,\r\n        10\r\n    ];\r\n    uint256[] public LEVEL_PRICE = [\r\n        2.5 ether,\r\n        5 ether,\r\n        10 ether,\r\n        25 ether,\r\n        50 ether,\r\n        100 ether,\r\n        250 ether,\r\n        500 ether,\r\n        1000 ether,\r\n        2500 ether  \r\n    ];\r\n    uint256[] public UNLOCK_TOKEN_DISTRIBUTION = [\r\n        250 ether,\r\n        500 ether,\r\n        1_000 ether,\r\n        2_500 ether,\r\n        5_000 ether,\r\n        10_000 ether,\r\n        25_000 ether,\r\n        50_000 ether,\r\n        100_000 ether,\r\n        250_000 ether\r\n    ];\r\n    \r\n    uint256[] public REFERRAL_TOKEN_DISTRIBUTION = [\r\n        15 ether,\r\n        25 ether,\r\n        50 ether,\r\n        100 ether,\r\n        200 ether,\r\n        500 ether,\r\n        1_250 ether,\r\n        2_000 ether,\r\n        4_000 ether,\r\n        10_000 ether\r\n    ];\r\n    \r\n\r\n    uint256 public totalParticipate;\r\n    uint256 public totalBUSDReferral;\r\n    uint256 public totalWealthTokenReferral;\r\n    uint256 public totalWealthTokenJoinReward;\r\n    uint256 public totalMissedBUSD;\r\n    uint256 public totalUser;\r\n    \r\n\r\n    struct User {\r\n        uint256 start;\r\n        address referrer;\r\n        address originReferrer;\r\n        uint256 currentLevel;\r\n        uint256 totalDeposit;\r\n        uint256 directReferralCount;\r\n        uint256 breakCount;\r\n        uint256 totalJoinReward;\r\n        uint256 totalTokenDirectReward;\r\n        uint256 totalTokenRewardPayed;\r\n        mapping(uint256 => address) directReferrals;\r\n        uint256[10] levels;\r\n        uint256[10] commissionsBUSD;\r\n        uint256[10] teamTurnover;\r\n        uint256[10] MissedBUSD;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    address payable public projectWallet;\r\n    address payable public FeeWallet;\r\n    address payable public marketingWallet;\r\n\r\n    bool public init = false;\r\n\r\n    event Newbie(address user);\r\n    event NewParticipate(address indexed user, uint256 time);\r\n    event NewReward(\r\n        address indexed user,\r\n        uint256 totalDeposit,\r\n        uint256 reward,\r\n        uint256 round,\r\n        uint256 time\r\n    );\r\n    event RefBonus(\r\n        address indexed referrer,\r\n        address indexed referral,\r\n        uint256 indexed level,\r\n        uint256 amount\r\n    );\r\n     event referralTokenReward(\r\n        address indexed referrer,\r\n        address indexed referral,\r\n        uint256 amount\r\n    );\r\n    event FeePayed(address indexed user, uint256 amount);\r\n    event unlockTokenReward(address indexed user, uint256 amount);\r\n\r\n    constructor() {\r\n        projectWallet = payable(0xefeA72adfB19b8e83718cE8846a94B08ee08e5a4);\r\n        marketingWallet = payable(0x035735Bb4C8496d5C4B8637F06326f6D6D47ebaf);\r\n        FeeWallet = payable(0x3AAb43608c86983e852C2129d24c2E9c5ccD9E7d);\r\n\r\n        BUSDToken = IERC20(BUSD_address);\r\n        WealthToken = IERC20(WealthToken_address);\r\n    }\r\n\r\n    // initialized the Project\r\n    function launch() public {\r\n        require(msg.sender == projectWallet, \"Only owner\");\r\n        require(init == false, \"Only once\");\r\n        init = true;\r\n        users[projectWallet].start = block.timestamp;\r\n        users[projectWallet].currentLevel = 9;\r\n        pancakeRouter = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    }\r\n\r\n    function unlockLevel(address _upline, uint256 _level, uint256 _amount) public noReentrant {\r\n        require(init, \"Not Started Yet\");\r\n\r\n        User storage user = users[msg.sender];\r\n        require(_level >= 0 && _level <= 9, \"Enter correct level\");\r\n\r\n        if(user.totalDeposit > 0){\r\n            require(user.currentLevel < _level, \"you activated this level\");\r\n        }\r\n        \r\n        require(_amount + user.totalDeposit == LEVEL_PRICE[_level], \"Wrong activate amount\");\r\n        require(_amount <= BUSDToken.allowance(msg.sender, address(this)),\"Low allowance for BUSD\");\r\n        BUSDToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        user.currentLevel = _level;\r\n\r\n        _setUpline(_upline, _amount);\r\n        _updateUplineTurnover(user.referrer, _amount);\r\n        _payCommission(_amount);\r\n\r\n        uint256 MarketingFee = _amount * ADMIN_FEE / PERCENTS_DIVIDER;\r\n        BUSDToken.safeTransfer(marketingWallet, MarketingFee);\r\n        emit FeePayed(msg.sender, MarketingFee);\r\n\r\n\r\n        uint256 tokenJoinReward = UNLOCK_TOKEN_DISTRIBUTION[_level] - user.totalJoinReward;\r\n        user.totalJoinReward += tokenJoinReward;\r\n        totalWealthTokenJoinReward += tokenJoinReward;\r\n        WealthToken.safeTransfer(msg.sender, tokenJoinReward);\r\n        emit unlockTokenReward(msg.sender, tokenJoinReward);\r\n\r\n        if(getContractBUSDBalance() >= ADD_LIQUIDITY_STEP && ADD_LIQUIDITY_ENABLED){\r\n            _handleAddLiquidity(getContractBUSDBalance());\r\n        }\r\n\r\n        totalUser++;\r\n        if(user.start == 0){\r\n            user.start = block.timestamp;\r\n            emit Newbie(msg.sender);\r\n        }\r\n        user.totalDeposit += _amount;\r\n        \r\n        totalParticipate += _amount;\r\n        emit NewParticipate(msg.sender, block.timestamp);\r\n    }\r\n\r\n    function _setUpline(address _upline, uint256 _amount) private {\r\n        User storage user = users[msg.sender];\r\n        User storage uplineUser = users[_upline];\r\n        if (user.referrer == address(0)) {\r\n            if((_upline != address(0) && uplineUser.start > 0) || _upline == projectWallet){\r\n                uplineUser.directReferralCount++;\r\n                if(user.originReferrer == address(0)){\r\n                    user.originReferrer = _upline;\r\n                }\r\n                if(uplineUser.directReferralCount % REFERRAL_BREAK_STEP == 0){\r\n                    address newUpline;\r\n                    newUpline = uplineUser.directReferrals[uplineUser.breakCount];\r\n                    uplineUser.breakCount++;\r\n                    if(newUpline == address(0)){\r\n                        uplineUser.breakCount++;\r\n                        newUpline = uplineUser.directReferrals[uplineUser.breakCount];\r\n                    }\r\n                    if(newUpline != address(0)){\r\n                        _setUpline(newUpline, _amount);\r\n                    }else{\r\n                        _setUpline(projectWallet, _amount);\r\n                    }\r\n                }else{\r\n                    user.referrer = _upline;\r\n                    uplineUser.directReferrals[uplineUser.directReferralCount - 1] = msg.sender;\r\n                    address uplineAddress = user.referrer;\r\n                    for (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {\r\n                        if (uplineAddress != address(0)) {\r\n                            users[uplineAddress].levels[i] += 1;\r\n                            uplineAddress = users[uplineAddress].referrer;\r\n                        } else break;\r\n                    }\r\n                }\r\n            }else{\r\n                revert(\"Invalid referrer address\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updateUplineTurnover(address upline, uint256 depositAmount) internal {\r\n        for (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {\r\n            if (upline != address(0)) {\r\n                users[upline].teamTurnover[i] += depositAmount;\r\n                upline = users[upline].referrer;\r\n            } else break;\r\n        }\r\n    }\r\n\r\n    function manualAddLiquidity() public onlyOwner {\r\n        if(getContractBUSDBalance() >= ADD_LIQUIDITY_STEP && ADD_LIQUIDITY_ENABLED){\r\n            _handleAddLiquidity(getContractBUSDBalance());\r\n        }\r\n    }\r\n\r\n    function _handleAddLiquidity(uint256 contractBUSDBalance) private {\r\n        uint256 amountBusdToSpend = contractBUSDBalance / 2;\r\n        BUSDToken.approve(address(pancakeRouter), amountBusdToSpend);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(BUSD_address);\r\n        path[1] = address(WealthToken_address);\r\n\r\n        uint[] memory amounts = pancakeRouter.swapExactTokensForTokens(amountBusdToSpend, 0, path, address(this), block.timestamp + 10 minutes);\r\n        \r\n        uint256 amountToken = amounts[1];\r\n\r\n        uint256 amountBusd = BUSDToken.balanceOf(address(this));\r\n        WealthToken.approve(address(pancakeRouter), amountToken);\r\n        BUSDToken.approve(address(pancakeRouter), amountBusd);\r\n\r\n        pancakeRouter.addLiquidity(address(WealthToken_address), address(BUSD_address), amountToken, amountBusd, 0, 0, address(this), block.timestamp + 10 minutes);\r\n    }\r\n\r\n    function _payCommission(uint256 _amount) internal {\r\n        User storage user = users[msg.sender];\r\n        address upline = user.referrer;\r\n        address originUpline = user.originReferrer;\r\n        uint256 resCommission;\r\n        uint256 amountRef;\r\n        uint256 finalOriginBUSDCommission;\r\n        for (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {\r\n            finalOriginBUSDCommission = _amount;\r\n            if(upline != address(0) && user.currentLevel > users[upline].currentLevel && LEVEL_PRICE[users[upline].currentLevel] > user.totalDeposit){\r\n                finalOriginBUSDCommission = LEVEL_PRICE[users[upline].currentLevel] - user.totalDeposit;\r\n            }\r\n            amountRef = finalOriginBUSDCommission * REFERRAL_PERCENTS[i] / PERCENTS_DIVIDER;\r\n            if (upline != address(0) && LEVEL_PRICE[users[upline].currentLevel] > user.totalDeposit) {\r\n                if(i == 0){\r\n                    uint256 WealthTokenCommission = REFERRAL_TOKEN_DISTRIBUTION[user.currentLevel] - user.totalTokenDirectReward;\r\n                    if(user.currentLevel > users[upline].currentLevel){\r\n                        WealthTokenCommission = REFERRAL_TOKEN_DISTRIBUTION[users[upline].currentLevel] - user.totalTokenDirectReward;\r\n                    }\r\n                    if(upline != originUpline){\r\n                        uint256 WealthTokenCommissionOrigin = WealthTokenCommission * ORIGIN_REFERRER_FEE / PERCENTS_DIVIDER;\r\n                        WealthTokenCommission = WealthTokenCommission - WealthTokenCommissionOrigin;\r\n                        user.totalTokenDirectReward += WealthTokenCommissionOrigin;\r\n                        users[originUpline].totalTokenRewardPayed += WealthTokenCommissionOrigin;\r\n                        totalWealthTokenReferral += WealthTokenCommissionOrigin;\r\n                        WealthToken.safeTransfer(originUpline, WealthTokenCommissionOrigin);\r\n                        emit referralTokenReward(originUpline, msg.sender, WealthTokenCommissionOrigin);\r\n                    }\r\n                    user.totalTokenDirectReward +=  WealthTokenCommission;\r\n                    users[upline].totalTokenRewardPayed += WealthTokenCommission;\r\n                    WealthToken.safeTransfer(upline, WealthTokenCommission);\r\n                    totalWealthTokenReferral += WealthTokenCommission;\r\n                    emit referralTokenReward(upline, msg.sender, WealthTokenCommission);\r\n                }\r\n                users[upline].commissionsBUSD[i] += amountRef;\r\n                BUSDToken.safeTransfer(upline, amountRef);\r\n                totalBUSDReferral += amountRef;\r\n                emit RefBonus(upline, msg.sender, i, amountRef);\r\n\r\n                if(user.currentLevel > users[upline].currentLevel){\r\n                    uint256 restLevelAmount = (_amount * REFERRAL_PERCENTS[i] / PERCENTS_DIVIDER) - amountRef;\r\n                    totalMissedBUSD += restLevelAmount;\r\n                    users[upline].MissedBUSD[i] += restLevelAmount;\r\n                    resCommission += restLevelAmount;\r\n                }\r\n                \r\n                upline = users[upline].referrer;\r\n            }else{\r\n                totalMissedBUSD += amountRef;\r\n                users[upline].MissedBUSD[i] += amountRef;\r\n                resCommission += amountRef;\r\n                \r\n                if(upline != address(0)){\r\n                    upline = users[upline].referrer;\r\n                }\r\n            }\r\n        }\r\n        if(resCommission > 0){\r\n            BUSDToken.safeTransfer(FeeWallet, resCommission);\r\n        }\r\n    }\r\n\r\n    function getContractBUSDBalance() public view returns (uint256) {\r\n        return BUSDToken.balanceOf(address(this));\r\n    }\r\n\r\n    function getContractWealthTokenBalance() public view returns (uint256) {\r\n        return WealthToken.balanceOf(address(this));\r\n    }\r\n\r\n    function getUserTotalBUSDEarn(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n         uint256 totalBUSDCommissions;\r\n        for(uint256 i = 0; i < 10; i++) {\r\n            totalBUSDCommissions += users[userAddress].commissionsBUSD[i];\r\n        }\r\n        return totalBUSDCommissions;\r\n    }\r\n\r\n    function getUserTotalMissedBUSD(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n         uint256 totalBUSDMissed;\r\n        for(uint256 i = 0; i < 10; i++) {\r\n            totalBUSDMissed += users[userAddress].MissedBUSD[i];\r\n        }\r\n        return totalBUSDMissed;\r\n    }\r\n\r\n    function getUserTotalWealthTokenEarn(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].totalTokenRewardPayed;\r\n    }\r\n\r\n    function getUserTotalTeamTurnover(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n         uint256 teamTurnover;\r\n        for(uint256 i = 0; i < 10; i++) {\r\n            teamTurnover += users[userAddress].teamTurnover[i];\r\n        }\r\n        return teamTurnover;\r\n    }\r\n\r\n    function getUserReferrer(address userAddress)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserDirectReferralMapping(address userAddress, uint256 _index)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return users[userAddress].directReferrals[_index];\r\n    }\r\n\r\n    function getUserDownlineCount(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256[10] memory referrals)\r\n    {\r\n        return (users[userAddress].levels);\r\n    }\r\n\r\n    function getUserMissedBUSD(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256[10] memory missed)\r\n    {\r\n        return (users[userAddress].MissedBUSD);\r\n    }\r\n\r\n    function getUserTeamTurnover(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256[10] memory turnover)\r\n    {\r\n        return (users[userAddress].teamTurnover);\r\n    }\r\n\r\n    function getUserBUSDCommissions(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256[10] memory commissions)\r\n    {\r\n        return (users[userAddress].commissionsBUSD);\r\n    }\r\n\r\n    function getUserTotalReferrals(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].levels[0];\r\n    }\r\n    function getUserTotalReferralsCount(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256[10] memory count)\r\n    {\r\n        return users[userAddress].levels;\r\n    }\r\n    function getUserTotalDownline(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 downlineCount;\r\n        for(uint256 i = 0; i < 10; i++) {\r\n            downlineCount += users[userAddress].levels[i];\r\n        }\r\n        return downlineCount;\r\n    }\r\n\r\n    function getSiteInfo()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _totalInvested,\r\n            uint256 _totalBUSDBonus,\r\n            uint256 _totalWealthTokenBonus,\r\n            uint256 _totalUser,\r\n            uint256 _contractBUSDBalance,\r\n            uint256 _contractWealthTokenBalance,\r\n            uint256 _totalMissedBUSD,\r\n            uint256 _totalWealthTokenJoinReward,\r\n            uint256 _totalWealthTokenReward\r\n        )\r\n    {\r\n        return (totalParticipate, totalBUSDReferral,totalWealthTokenReferral, totalUser, getContractBUSDBalance(), getContractWealthTokenBalance(), totalMissedBUSD, totalWealthTokenJoinReward, (totalWealthTokenReferral + totalWealthTokenJoinReward));\r\n    }\r\n\r\n    function getUserInfo(address userAddress)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 startCheckpoint,\r\n            uint256 downlineCount,\r\n            uint256 userTotalBUSDCommissions,\r\n            uint256 userTotalWealthTokenCommissions,\r\n            uint256 userTotalMissedBUSD,\r\n            uint256 currentLevel,\r\n            uint256 totalDeposit\r\n        )\r\n    {\r\n        return (\r\n            users[userAddress].start,\r\n            getUserTotalDownline(userAddress),\r\n            getUserTotalBUSDEarn(userAddress),\r\n            getUserTotalWealthTokenEarn(userAddress),\r\n            getUserTotalMissedBUSD(userAddress),\r\n            users[userAddress].currentLevel,\r\n            users[userAddress].totalDeposit\r\n        );\r\n    }\r\n\r\n    function getUserTotalWealthTokenReward(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return getUserTotalWealthTokenEarn(userAddress) + users[userAddress].totalJoinReward;\r\n    }\r\n\r\n    function getRequireAmountToActivate(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 amount;\r\n        User storage user = users[userAddress];\r\n        amount =  LEVEL_PRICE[user.currentLevel] - user.totalDeposit;\r\n        return amount;\r\n    }\r\n\r\n    function setAddLiquidityStep(uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        ADD_LIQUIDITY_STEP = amount;\r\n    }\r\n\r\n    function setAddLiquidityStatus(bool status)\r\n        public\r\n        onlyOwner\r\n    {\r\n        ADD_LIQUIDITY_ENABLED = status;\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewParticipate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"referralTokenReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockTokenReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADD_LIQUIDITY_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADD_LIQUIDITY_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSDToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORIGIN_REFERRER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_BREAK_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_TOKEN_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UNLOCK_TOKEN_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WealthToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBUSDBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractWealthTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getRequireAmountToActivate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBUSDBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWealthTokenBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractBUSDBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractWealthTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalMissedBUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWealthTokenJoinReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWealthTokenReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserBUSDCommissions\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"commissions\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserDirectReferralMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"referrals\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startCheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downlineCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTotalBUSDCommissions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTotalWealthTokenCommissions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTotalMissedBUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMissedBUSD\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"missed\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTeamTurnover\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"turnover\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalBUSDEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDownline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalMissedBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferralsCount\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"count\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalTeamTurnover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWealthTokenEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWealthTokenReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAddLiquidityStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAddLiquidityStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBUSDReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMissedBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalParticipate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWealthTokenJoinReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWealthTokenReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlockLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originReferrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directReferralCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breakCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalJoinReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenDirectReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenRewardPayed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AbundanceDefi", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://61b619f7fe4d034adafef912ebc4e01d309561213d6d05af35a766b80fdff9f9"}