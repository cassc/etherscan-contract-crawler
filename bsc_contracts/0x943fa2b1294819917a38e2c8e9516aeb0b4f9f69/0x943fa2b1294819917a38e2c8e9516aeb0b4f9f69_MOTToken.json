{"SourceCode": "{\"AddressSetLib.sol\":{\"content\":\"pragma solidity 0.5.8;\\n\\n\\nlibrary AddressSetLib {\\n    struct AddressSet {\\n        address[] elements;\\n        mapping(address =\\u003e uint) indices;\\n    }\\n\\n    function contains(AddressSet storage set, address candidate) internal view returns (bool) {\\n        if (set.elements.length == 0) {\\n            return false;\\n        }\\n        uint index = set.indices[candidate];\\n        return index != 0 || set.elements[0] == candidate;\\n    }\\n\\n    function getPage(\\n        AddressSet storage set,\\n        uint index,\\n        uint pageSize\\n    ) internal view returns (address[] memory) {\\n        // NOTE: This implementation should be converted to slice operators if the compiler is updated to v0.6.0+\\n        uint endIndex = index + pageSize; // The check below that endIndex \\u003c= index handles overflow.\\n\\n        // If the page extends past the end of the list, truncate it.\\n        if (endIndex \\u003e set.elements.length) {\\n            endIndex = set.elements.length;\\n        }\\n        if (endIndex \\u003c= index) {\\n            return new address[](0);\\n        }\\n\\n        uint n = endIndex - index; // We already checked for negative overflow.\\n        address[] memory page = new address[](n);\\n        for (uint i; i \\u003c n; i++) {\\n            page[i] = set.elements[i + index];\\n        }\\n        return page;\\n    }\\n\\n    function add(AddressSet storage set, address element) internal {\\n        // Adding to a set is an idempotent operation.\\n        if (!contains(set, element)) {\\n            set.indices[element] = set.elements.length;\\n            set.elements.push(element);\\n        }\\n    }\\n\\n    function remove(AddressSet storage set, address element) internal {\\n        require(contains(set, element), \\\"Element not in set.\\\");\\n        // Replace the removed element with the last element of the list.\\n        uint index = set.indices[element];\\n        uint lastIndex = set.elements.length - 1; // We required that element is in the list, so it is not empty.\\n        if (index != lastIndex) {\\n            // No need to shift the last element if it is the one we want to delete.\\n            address shiftedElement = set.elements[lastIndex];\\n            set.elements[index] = shiftedElement;\\n            set.indices[shiftedElement] = index;\\n        }\\n        set.elements.pop();\\n        delete set.indices[element];\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n    * @dev Destroys `amount` tokens from `account`, reducing the\\n    * total supply.\\n    *\\n    * Emits a {Transfer} event with `to` set to the zero address.\\n    *\\n    * Requirements\\n    *\\n    * - `account` cannot be the zero address.\\n    * - `account` must have at least `amount` tokens.\\n    */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller\\u0027s allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\\n    }\\n}\"},\"ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.8;\\n\\n/**\\n * @title TRC20 interface\\n */\\ninterface IERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address who) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IRefer.sol\":{\"content\":\"pragma solidity 0.5.8;\\n\\n\\ninterface IRefer {\\n    function submitRefer(address referrer) external returns (bool);\\n    function getReferLength(address usr) external view returns (uint256);\\n    function isReferContains(address usr, address referrer) external view returns (bool);\\n    function getReferrer(address usr) external view returns (address);\\n}\"},\"ITRC20.sol\":{\"content\":\"pragma solidity 0.5.8;\\n\\n/**\\n * @title TRC20 interface\\n */\\ninterface ITRC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address who) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"MOTToken.sol\":{\"content\":\"pragma solidity 0.5.8;\\n\\nimport \\\"./ITRC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract MOTToken is ITRC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"MOT\\\";\\n    string private _symbol = \\\"MOT\\\";\\n    uint8 private _decimals = 18;\\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n    uint256 private _totalSupply;\\n\\n    mapping (address =\\u003e bool) private _isIncludedFromFee;\\n\\n    address public burnPool = 0x000000000000000000000000000000000000dEaD;\\n    address public fixedWallet;\\n\\n    constructor (address recipient) public {\\n        _mint(recipient, 54500000e18);\\n        fixedWallet = msg.sender;\\n    }\\n\\n    function setBurnPool(address _pool) public onlyOwner {\\n        burnPool = _pool;\\n    }\\n\\n    function excludeFromFee(address account) public onlyOwner {\\n        _isIncludedFromFee[account] = false;\\n    }\\n\\n    function includeInFee(address account) public onlyOwner {\\n        _isIncludedFromFee[account] = true;\\n    }\\n\\n    function isIncludedFromFee(address account) public view returns(bool) {\\n        return _isIncludedFromFee[account];\\n    }\\n\\n    function calculateTaxFee(uint256 _amount) private view returns (uint256 burnAmount, uint256 fixedAmount, uint256 leftover) {\\n        burnAmount = _amount.mul(5).div(100);\\n        fixedAmount = _amount.mul(3).div(100);\\n        leftover = _amount.sub(burnAmount).sub(fixedAmount);\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    function burn(address _from, uint256 _amount) public onlyOwner {\\n        _burn(_from, _amount);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        if(!_isIncludedFromFee[recipient]) { // no fee\\n            _balances[sender] = _balances[sender].sub(amount);\\n            _balances[recipient] = _balances[recipient].add(amount);\\n            emit Transfer(sender, recipient, amount);\\n        } else {\\n            uint256 leftover;\\n            uint256 burnAmount;\\n            uint256 fixedAmount;\\n            (burnAmount, fixedAmount, leftover) = calculateTaxFee(amount);\\n\\n            _balances[sender] = _balances[sender].sub(amount);\\n            _balances[recipient] = _balances[recipient].add(leftover);\\n            _balances[fixedWallet] = _balances[fixedWallet].add(fixedAmount);\\n            _balances[burnPool] = _balances[burnPool].add(burnAmount);\\n\\n            emit Transfer(sender, recipient, leftover);\\n            emit Transfer(sender, fixedWallet, fixedAmount);\\n            emit Transfer(sender, burnPool, burnAmount);\\n        }\\n    }\\n\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\\n    }\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity 0.5.8;\\n\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n    * @dev Initializes the contract setting the deployer as the initial owner.\\n    */\\n    constructor() internal {\\n        address msgSender = msg.sender;\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"Rank.sol\":{\"content\":\"pragma solidity 0.5.8;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n\\ncontract Rank is Ownable {\\n    mapping(address =\\u003e uint256)  balances;\\n    mapping(address =\\u003e address)  _nextAddress;\\n    uint256 public listSize;\\n    address constant GUARD = address(1);\\n\\n    constructor() public {\\n        _nextAddress[GUARD] = GUARD;\\n    }\\n\\n    function addRankAddress(address addr, uint256 balance) internal {\\n        if (_nextAddress[addr] != address(0)) {\\n            return;\\n        }\\n\\n        address index = _findIndex(balance);\\n        balances[addr] = balance;\\n        _nextAddress[addr] = _nextAddress[index];\\n        _nextAddress[index] = addr;\\n        listSize++;\\n    }\\n\\n    function removeRankAddress(address addr) internal {\\n        if (_nextAddress[addr] == address(0)) {\\n            return;\\n        }\\n\\n        address prevAddress = _findPrevAddress(addr);\\n        _nextAddress[prevAddress] = _nextAddress[addr];\\n\\n        _nextAddress[addr] = address(0);\\n        balances[addr] = 0;\\n        listSize--;\\n    }\\n\\n    function isContains(address addr) internal view returns (bool) {\\n        return _nextAddress[addr] != address(0);\\n    }\\n\\n    function getRank(address addr) public view returns (uint256) {\\n        if (!isContains(addr)) {\\n            return 0;\\n        }\\n\\n        uint idx = 0;\\n        address currentAddress = GUARD;\\n        while(_nextAddress[currentAddress] != GUARD) {\\n            if (addr != currentAddress) {\\n                currentAddress = _nextAddress[currentAddress];\\n                idx++;\\n            } else {\\n                break;\\n            }\\n        }\\n        return idx;\\n    }\\n\\n    function getRankBalance(address addr) internal view returns (uint256) {\\n        return balances[addr];\\n    }\\n\\n    function getTop(uint256 k) public view returns (address[] memory) {\\n        if (k \\u003e listSize) {\\n            k = listSize;\\n        }\\n\\n        address[] memory addressLists = new address[](k);\\n        address currentAddress = _nextAddress[GUARD];\\n        for (uint256 i = 0; i \\u003c k; ++i) {\\n            addressLists[i] = currentAddress;\\n            currentAddress = _nextAddress[currentAddress];\\n        }\\n\\n        return addressLists;\\n    }\\n\\n    function updateRank(address addr, uint256 newBalance) internal {\\n        if (!isContains(addr)) {\\n            // \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\\n            addRankAddress(addr, newBalance);\\n        } else {\\n            // \u5df2\u5b58\u5728\uff0c\u5219\u66f4\u65b0\\n            address prevAddress = _findPrevAddress(addr);\\n            address nextAddress = _nextAddress[addr];\\n            if (_verifyIndex(prevAddress, newBalance, nextAddress)) {\\n                balances[addr] = newBalance;\\n            } else {\\n                removeRankAddress(addr);\\n                addRankAddress(addr, newBalance);\\n            }\\n        }\\n    }\\n\\n    function _isPrevAddress(address addr, address prevAddress) internal view returns (bool) {\\n        return _nextAddress[prevAddress] == addr;\\n    }\\n\\n    // \u7528\u4e8e\u9a8c\u8bc1\u8be5\u503c\u5728\u5de6\u53f3\u5730\u5740\u4e4b\u95f4\\n    // \u5982\u679c \u5de6\u8fb9\u7684\u503c \u2265 \u65b0\u503c \\u003e \u53f3\u8fb9\u7684\u503c\u5c06\u8fd4\u56de true(\u5982\u679c\u6211\u4eec\u4fdd\u6301\u964d\u5e8f\uff0c\u5e76\u4e14\u5982\u679c\u503c\u7b49\u4e8e\uff0c\u5219\u65b0\u503c\u5e94\u8be5\u5728\u65e7\u503c\u7684\u540e\u9762)\\n    function _verifyIndex(address prevAddress, uint256 newValue, address nextAddress)\\n    internal\\n    view\\n    returns (bool) {\\n        return (prevAddress == GUARD || balances[prevAddress] \\u003e= newValue) \\u0026\\u0026\\n        (nextAddress == GUARD || newValue \\u003e balances[nextAddress]);\\n    }\\n\\n    // \u7528\u4e8e\u67e5\u627e\u65b0\u503c\u5e94\u8be5\u63d2\u5165\u5728\u54ea\u4e00\u4e2a\u5730\u5740\u540e\u9762\\n    function _findIndex(uint256 newValue) internal view returns (address) {\\n        address candidateAddress = GUARD;\\n        while(true) {\\n            if (_verifyIndex(candidateAddress, newValue, _nextAddress[candidateAddress]))\\n                return candidateAddress;\\n\\n            candidateAddress = _nextAddress[candidateAddress];\\n        }\\n    }\\n\\n    function _findPrevAddress(address addr) internal view returns (address) {\\n        address currentAddress = GUARD;\\n        while(_nextAddress[currentAddress] != GUARD) {\\n            if (_isPrevAddress(addr, currentAddress))\\n                return currentAddress;\\n\\n            currentAddress = _nextAddress[currentAddress];\\n        }\\n        return address(0);\\n    }\\n}\"},\"Refer.sol\":{\"content\":\"pragma solidity 0.5.8;\\n\\nimport \\\"./AddressSetLib.sol\\\";\\n\\n\\ncontract Refer {\\n    using AddressSetLib for AddressSetLib.AddressSet;\\n\\n    mapping (address =\\u003e address) public referrers; // \u63a8\u8350\u5173\u7cfb\\n    mapping (address =\\u003e address[]) public referList; // \u63a8\u8350\u5217\u8868\\n\\n    AddressSetLib.AddressSet internal addressSet;\\n\\n    event NewReferr(address indexed usr, address refer);\\n\\n    // \u63d0\u4ea4\u63a8\u8350\u5173\u7cfb\\n    function submitRefer(address usr, address referrer) public returns (bool) {\\n        require(usr == tx.origin, \\\"usr must be tx origin\\\");\\n        require(usr != referrer, \\\"can\\u0027t invite your self\\\");\\n\\n        // \u8bb0\u5f55\u63a8\u8350\u5173\u7cfb\\n        if (referrers[usr] == address(0)) {\\n            referrers[usr] = referrer;\\n            emit NewReferr(usr, referrer);\\n\\n            addressSet.add(referrer);\\n\\n            if (!isReferContains(usr, referrer)) {\\n                referList[referrer].push(usr);\\n            }\\n        }\\n        return true;\\n    }\\n\\n    // \u67e5\u8be2\u63a8\u8350\u7684\u603b\u4eba\u6570\\n    function getReferLength(address referrer) public view returns (uint256) {\\n        return referList[referrer].length;\\n    }\\n\\n    // \u67e5\u8be2\u7528\u6237\u662f\u5426\u5728\u6307\u5b9a\u5730\u5740\u7684\u63a8\u8350\u5217\u8868\u4e2d\\n    function isReferContains(address usr, address referrer) public view returns (bool) {\\n        address[] memory addrList = referList[referrer];\\n        bool found = false;\\n        for (uint256 i = 0; i \\u003c addrList.length; i++) {\\n            if (usr == addrList[i]) {\\n                found = true;\\n                break;\\n            }\\n        }\\n        return found;\\n    }\\n\\n    // \u67e5\u8be2\u63a8\u8350\u4eba\u5730\u5740\\n    function getReferrer(address usr) public view returns (address) {\\n        return referrers[usr];\\n    }\\n\\n    // \u67e5\u8be2\u6240\u6709\u7684\u63a8\u8350\u4eba\uff0c\u53ef\u6307\u5b9aindex\u4f4d\u7f6e\u548c\u8fd4\u56de\u6570\u91cf\\n    function getReferrers(uint256 index, uint256 pageSize) public view returns (address[] memory) {\\n        return addressSet.getPage(index, pageSize);\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.5.8;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n\\n    /**\\n     * @dev Multiplies two unsigned integers, reverts on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath#mul: OVERFLOW\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, \\\"SafeMath#div: DIVISION_BY_ZERO\\\");\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath#sub: UNDERFLOW\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two unsigned integers, reverts on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath#add: OVERFLOW\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n     * reverts when dividing by zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath#mod: DIVISION_BY_ZERO\\\");\\n        return a % b;\\n    }\\n\\n}\"},\"TransferHelper.sol\":{\"content\":\"pragma solidity 0.5.8;\\n\\n// helper methods for interacting with TRC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: APPROVE_FAILED\\u0027);\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success, \\u0027TransferHelper: TRANSFER_FAILED\\u0027);\\n        //        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FAILED\\u0027);\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success, \\u0027TransferHelper: TRANSFER_FROM_FAILED\\u0027);\\n        //        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FROM_FAILED\\u0027);\\n    }\\n\\n    function safeTransferTRX(address to, uint value) internal {\\n        (bool success,) = to.call.value(value)(new bytes(0));\\n        require(success, \\u0027TransferHelper: TRX_TRANSFER_FAILED\\u0027);\\n    }\\n}\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fixedWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setBurnPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIncludedFromFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "MOTToken", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000074ff45cc06d3bf812c6f5b7077f1079ae0306281", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://17e910aabecac45fb997f13390bb7515861cf8720696aa1a9708d4baf492c2a5"}