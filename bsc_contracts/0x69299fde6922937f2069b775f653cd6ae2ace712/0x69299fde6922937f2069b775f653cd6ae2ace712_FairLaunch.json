{"SourceCode": "// Sources flattened with hardhat v2.8.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/mondayclub/IRewardVault.sol\r\n\r\n\r\npragma solidity 0.8.12;\r\ninterface IRewardVault {\r\n    function rewardToken() external view returns (IERC20);\r\n    function transferReward(address _to, uint256 _amount) external;\r\n    function transferNative(address payable _to, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/staking/FairLaunch.sol\r\n\r\n\r\npragma solidity 0.8.12;\r\n// FairLaunch is a smart contract for distributing MONDAY by asking user to stake the ERC20-based token.\r\ncontract FairLaunch is Ownable, ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // Info of each user.\r\n  struct UserInfo {\r\n    uint256 amount; // How many Staking tokens the user has provided.\r\n    uint256 rewardDebt; // Reward debt. See explanation below.\r\n    address fundedBy; // Funded by who?\r\n    uint256 lockStart;\r\n    uint256 lockEnd;\r\n    uint256 lockBonus;\r\n  }\r\n\r\n  // Info of each pool.\r\n  struct PoolInfo {\r\n    address stakeToken; // Address of Staking token contract.\r\n    uint256 allocPoint; // How many allocation points assigned to this pool. MONDAYs to distribute per block.\r\n    uint256 lastRewardBlock; // Last block number that MONDAYs distribution occurs.\r\n    uint256 accMondayPerShare; // Accumulated MONDAYs per share, times 1e12. See below.\r\n    uint256 totalSupply;\r\n    uint256 totalBonus;\r\n  }\r\n\r\n  uint256 LOCK_DURATION_STEP = 2592000;\r\n  uint256 MAX_LOCK_STEP = 3;\r\n\r\n  address public rewardVault;\r\n\r\n  // MONDAY reward per block\r\n  uint256 public mondayPerBlock;\r\n\r\n  // Info of each pool.\r\n  PoolInfo[] public poolInfo;\r\n  // Info of each user that stakes Staking tokens.\r\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n  // Total allocation points. Must be the sum of all allocation points in all pools.\r\n  uint256 public totalAllocPoint;\r\n  // The block number when MONDAY mining starts.\r\n  uint256 public startBlock;\r\n\r\n  event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 lockDuration);\r\n  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n  event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n  event SetMondayPerBlock(uint256 _mondayPerBlock);\r\n  event AddPool(uint256 pid);\r\n  event SetPool(uint256 pid);\r\n\r\n  constructor(\r\n    address _rewardVault,\r\n    uint256 _mondayPerBlock,\r\n    uint256 _startBlock\r\n  ) {\r\n    rewardVault = _rewardVault;\r\n    totalAllocPoint = 0;\r\n    mondayPerBlock = _mondayPerBlock;\r\n    startBlock = _startBlock;\r\n  }\r\n\r\n  /*\r\n  \u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00c7\u00e2\u0393\u00c7\u00e2\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\r\n  \u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00c7\u00e2\u0393\u00c7\u00e2\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\r\n  \u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00c7\u00e2\u0393\u00c7\u00e2\u0393\u00f2\u00dc\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\r\n  \u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00f2\u00dc\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00c7\u00e2\u0393\u00c7\u00e2\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\r\n  \u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00c7\u00e2\u0393\u00c7\u00e2\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\r\n  \u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00c7\u00e2\u0393\u00c7\u00e2\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\r\n  */\r\n\r\n  function setMondayPerBlock(uint256 _mondayPerBlock) external onlyOwner {\r\n    mondayPerBlock = _mondayPerBlock;\r\n    emit SetMondayPerBlock(_mondayPerBlock);\r\n  }\r\n\r\n  // Add a new lp to the pool. Can only be called by the owner.\r\n  function addPool(\r\n    uint256 _allocPoint,\r\n    address _stakeToken\r\n    ) external onlyOwner {\r\n    require(_stakeToken != address(0), \"add: not stakeToken addr\");\r\n    require(!isDuplicatedPool(_stakeToken), \"add: stakeToken dup\");\r\n    massUpdatePools();\r\n    uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n    totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n    poolInfo.push(\r\n      PoolInfo({\r\n        stakeToken: _stakeToken,\r\n        allocPoint: _allocPoint,\r\n        lastRewardBlock: lastRewardBlock,\r\n        accMondayPerShare: 0,\r\n        totalSupply: 0,\r\n        totalBonus: 0\r\n      })\r\n    );\r\n    emit AddPool(poolInfo.length - 1);\r\n  }\r\n\r\n  // Update the given pool's MONDAY allocation point. Can only be called by the owner.\r\n  function setPool(\r\n    uint256 _pid,\r\n    uint256 _allocPoint\r\n  ) external onlyOwner {\r\n    massUpdatePools();\r\n    totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n    poolInfo[_pid].allocPoint = _allocPoint;\r\n    emit SetPool(_pid);\r\n  }\r\n\r\n  /*\r\n  \u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\r\n  \u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\r\n  \u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\r\n  \u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\r\n  \u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\r\n  \u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\r\n  */\r\n\r\n  function isDuplicatedPool(address _stakeToken) public view returns (bool) {\r\n    uint256 length = poolInfo.length;\r\n    for (uint256 _pid = 0; _pid < length; _pid++) {\r\n      if (poolInfo[_pid].stakeToken == _stakeToken) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function poolLength() external view returns (uint256) {\r\n    return poolInfo.length;\r\n  }\r\n\r\n  // View function to see pending MONDAY on frontend.\r\n  function pendingMonday(uint256 _pid, address _user) external view returns (uint256) {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][_user];\r\n    uint256 accMondayPerShare = pool.accMondayPerShare;\r\n    if (block.number > pool.lastRewardBlock && pool.totalSupply != 0) {\r\n      uint256 multiplier = block.number.sub(pool.lastRewardBlock);\r\n      uint256 mondayReward = multiplier.mul(mondayPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n      uint256 totalShare = pool.totalSupply.add(pool.totalBonus);\r\n      accMondayPerShare = accMondayPerShare.add(mondayReward.mul(1e12).div(totalShare));\r\n    }\r\n    uint256 userShare = user.amount.add(user.lockBonus);\r\n    return userShare.mul(accMondayPerShare).div(1e12).sub(user.rewardDebt);\r\n  }\r\n\r\n  // Update reward vairables for all pools. Be careful of gas spending!\r\n  function massUpdatePools() public {\r\n    uint256 length = poolInfo.length;\r\n    for (uint256 pid = 0; pid < length; ++pid) {\r\n      updatePool(pid);\r\n    }\r\n  }\r\n\r\n  // Update reward variables of the given pool to be up-to-date.\r\n  function updatePool(uint256 _pid) public {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    if (block.number <= pool.lastRewardBlock) {\r\n      return;\r\n    }\r\n    if (pool.totalSupply == 0) {\r\n      pool.lastRewardBlock = block.number;\r\n      return;\r\n    }\r\n    uint256 multiplier = block.number.sub(pool.lastRewardBlock);\r\n    uint256 mondayReward = multiplier.mul(mondayPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n    IRewardVault(rewardVault).transferReward(address(this), mondayReward);\r\n    uint256 totalShare = pool.totalSupply.add(pool.totalBonus);\r\n    pool.accMondayPerShare = pool.accMondayPerShare.add(mondayReward.mul(1e12).div(totalShare));\r\n    pool.lastRewardBlock = block.number;\r\n  }\r\n\r\n  // Deposit Staking tokens to FairLaunchToken for MONDAY allocation.\r\n  function deposit(\r\n    address _for,\r\n    uint256 _pid,\r\n    uint256 _amount,\r\n    uint256 _lockDuration\r\n  ) external nonReentrant {\r\n    require(_lockDuration.div(LOCK_DURATION_STEP) <= MAX_LOCK_STEP, \"too long\");\r\n    require(_lockDuration.mod(LOCK_DURATION_STEP) == 0, \"invalid duration\");\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][_for];\r\n    if (user.fundedBy != address(0)) require(user.fundedBy == msg.sender, \"bad sof\");\r\n    require(pool.stakeToken != address(0), \"deposit: not accept deposit\");\r\n\r\n    if(block.timestamp < user.lockEnd){\r\n      require(block.timestamp + _lockDuration >= user.lockEnd, \"increase duration\");\r\n    }\r\n\r\n    updatePool(_pid);\r\n    if (user.amount > 0) _harvest(_for, _pid);\r\n    if (user.fundedBy == address(0)) user.fundedBy = msg.sender;\r\n    IERC20(pool.stakeToken).safeTransferFrom(address(msg.sender), address(this), _amount);\r\n    user.amount = user.amount.add(_amount);\r\n\r\n    pool.totalBonus = pool.totalBonus.sub(user.lockBonus); // remove old bonus point\r\n\r\n    uint256 newBonus = user.amount.mul(getLockMultipiler(_lockDuration)).div(10);\r\n    uint256 totalShare = user.amount.add(newBonus);\r\n    user.lockBonus = newBonus;\r\n    user.rewardDebt = totalShare.mul(pool.accMondayPerShare).div(1e12);\r\n    user.lockStart = block.timestamp;\r\n    user.lockEnd = block.timestamp + _lockDuration;\r\n    pool.totalSupply = pool.totalSupply.add(_amount);\r\n\r\n    pool.totalBonus = pool.totalBonus.add(newBonus); // add new bonus point\r\n    emit Deposit(msg.sender, _pid, _amount,_lockDuration);\r\n  }\r\n  \r\n  function getLockMultipiler(uint256 duration) internal view returns (uint256) {\r\n    return duration.div(LOCK_DURATION_STEP);\r\n  }\r\n\r\n\r\n  // Withdraw Staking tokens from FairLaunchToken.\r\n  function withdraw(\r\n    address _for,\r\n    uint256 _pid,\r\n    uint256 _amount\r\n  ) external nonReentrant {\r\n    _withdraw(_for, _pid, _amount);\r\n  }\r\n\r\n  function withdrawAll(address _for, uint256 _pid) external nonReentrant {\r\n    _withdraw(_for, _pid, userInfo[_pid][_for].amount);\r\n  }\r\n\r\n  function _withdraw(\r\n    address _for,\r\n    uint256 _pid,\r\n    uint256 _amount\r\n  ) internal {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][_for];\r\n    require(user.fundedBy == msg.sender, \"only funder\");\r\n    require(user.amount >= _amount, \"withdraw: not good\");\r\n    require(block.timestamp >= user.lockEnd, \"too soon\");\r\n\r\n    updatePool(_pid);\r\n    _harvest(_for, _pid);\r\n    if (pool.stakeToken != address(0)) {\r\n      IERC20(pool.stakeToken).safeTransfer(address(msg.sender), _amount);\r\n    }\r\n\r\n    if(user.lockBonus != 0) {\r\n      uint256 toBeRemoveBonus = _amount.mul(user.lockBonus).div(user.amount);\r\n      user.lockBonus = user.lockBonus.sub(toBeRemoveBonus);\r\n      pool.totalBonus = pool.totalBonus.sub(toBeRemoveBonus);\r\n    }\r\n\r\n    user.amount = user.amount.sub(_amount);\r\n    pool.totalSupply = pool.totalSupply.sub(_amount);\r\n    if (user.amount == 0) {\r\n      user.fundedBy = address(0);\r\n      user.lockBonus = 0;\r\n    }\r\n\r\n    uint256 totalShare = user.amount.add(user.lockBonus);\r\n    user.rewardDebt = totalShare.mul(pool.accMondayPerShare).div(1e12);\r\n    emit Withdraw(msg.sender, _pid, _amount);\r\n  }\r\n\r\n  // Harvest Mondays earn from the pool.\r\n  function harvest(uint256 _pid) external nonReentrant {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][msg.sender];\r\n    updatePool(_pid);\r\n    _harvest(msg.sender, _pid);\r\n    uint256 totalShare = user.amount.add(user.lockBonus);\r\n    user.rewardDebt = totalShare.mul(pool.accMondayPerShare).div(1e12);\r\n  }\r\n\r\n  function _harvest(address _to, uint256 _pid) internal {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][_to];\r\n    require(user.amount > 0, \"nothing to harvest\");\r\n    uint256 totalShare = user.amount.add(user.lockBonus);\r\n    uint256 pending = totalShare.mul(pool.accMondayPerShare).div(1e12).sub(user.rewardDebt);\r\n    require(pending <= IRewardVault(rewardVault).rewardToken().balanceOf(address(this)), \"not enough monday\");\r\n    safeMondayTransfer(_to, pending);\r\n  }\r\n\r\n  // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n  function emergencyWithdraw(uint256 _pid) external nonReentrant {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][msg.sender];\r\n    require(block.timestamp >= user.lockEnd, \"lock period\");\r\n    require(user.fundedBy == msg.sender, \"only funder\");\r\n    \r\n    pool.totalSupply = pool.totalSupply.sub(user.amount);\r\n    pool.totalBonus = pool.totalBonus.sub(user.lockBonus);\r\n    IERC20(pool.stakeToken).safeTransfer(address(msg.sender), user.amount);\r\n    emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n    user.amount = 0;\r\n    user.rewardDebt = 0;\r\n    user.fundedBy = address(0);\r\n    user.lockBonus = 0;\r\n  }\r\n\r\n  // Safe monday transfer function, just in case if rounding error causes pool to not have enough MONDAYs.\r\n  function safeMondayTransfer(address _to, uint256 _amount) internal {\r\n    IERC20 rewardToken = IRewardVault(rewardVault).rewardToken();\r\n    uint256 mondayBal = rewardToken.balanceOf(address(this));\r\n    if (_amount > mondayBal) {\r\n      require(rewardToken.transfer(_to, mondayBal), \"failed to transfer MONDAY\");\r\n    } else {\r\n      require(rewardToken.transfer(_to, _amount), \"failed to transfer MONDAY\");\r\n    }\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mondayPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mondayPerBlock\",\"type\":\"uint256\"}],\"name\":\"SetMondayPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"isDuplicatedPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mondayPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingMonday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMondayPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mondayPerBlock\",\"type\":\"uint256\"}],\"name\":\"setMondayPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fundedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FairLaunch", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009d1f4a82831addc17d05fa7feef13aa1d56a718600000000000000000000000000000000000000000000000010a741a4627800000000000000000000000000000000000000000000000000000000000000ffd3e0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://83aa29ac40bceee17510615675b834ff8ab9cbdbeed9b0874d8c4e3f0adf9e9e"}