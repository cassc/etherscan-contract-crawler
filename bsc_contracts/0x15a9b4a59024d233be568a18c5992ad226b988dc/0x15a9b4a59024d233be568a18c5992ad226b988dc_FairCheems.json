{"SourceCode": "/**\r\nTG: https://t.me/FairCheems\r\nWebsite: https://www.faircheems.com/\r\nAuthor: @MrAjax_dev\r\n */\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * BEP20 standard\r\n */\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * Basic access control mechanism\r\n */\r\nabstract contract Ownable {\r\n    address internal owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!You are not the OWNER\"); _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * Router Interfaces\r\n */\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * Rewards Interface & Contract\r\n */\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IBEP20 BTC = IBEP20(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c);\r\n    \r\n    IDEXRouter router;\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1 * (10 ** 8);\r\n\r\n    uint256 currentIndex;\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor (address _router) {\r\n        router = _router != address(0)\r\n            ? IDEXRouter(_router)\r\n            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        _token = msg.sender;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares-(shares[shareholder].amount)+(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = BTC.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(BTC);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = BTC.balanceOf(address(this))-(balanceBefore);\r\n\r\n        totalDividends = totalDividends+(amount);\r\n        dividendsPerShare = dividendsPerShare+(dividendsPerShareAccuracyFactor*(amount)/(totalShares));\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed+(gasLeft-(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed+(amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised+(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n            BTC.transfer(shareholder, amount);\r\n        }\r\n    }\r\n\r\n    function claimDividend(address shareholder) external onlyToken{\r\n        distributeDividend(shareholder);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends-(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share*(dividendsPerShare)/(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\n/**\r\n * Contract Implementation\r\n */\r\ncontract FairCheems is IBEP20, Ownable {\r\n\r\n    // Events\r\n    event Launch(uint256 Time);\r\n    event SetMaxBuyAmount(uint256 percentageBase100, uint256 Time);\r\n    event SetMaxSellAmount(uint256 percentageBase100, uint256 Time);\r\n    event SetMaxWalletSize(uint256 percentageBase100, uint256 Time);\r\n    event SetSellFees(uint256 marketing, uint256 dev, uint256 rewards, uint256 liquidity, uint256 Time);\r\n    event SetBuyFees(uint256 marketing, uint256 dev, uint256 rewards, uint256 liquidity, uint256 Time);\r\n    event SetDevWallet(address indexed oldDevWallet, address indexed newDevWallet);\r\n    event SetMarketingWallet(address indexed oldMarketingWallet, address indexed newMarketingWallet);\r\n    event SetSwapDetails(uint256 swapThreshold, uint256 maxSwapSize);\r\n    event SetIsDividendExempt(address account, bool exempt, uint256 Time);\r\n    event SetIsFeeExempt(address account, bool exempt, uint256 Time);\r\n    event SetDistributionCriteria(uint256 minPeriod, uint256 minDistribution);\r\n    event SetNewAMM(address indexed AutomaticMarketMaker);\r\n\r\n    // Mappings\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) _excludeFromFees;\r\n    mapping (address => bool) _excludeFromRewards;\r\n    mapping (address => bool) _automatedMarketMakers;\r\n\r\n    // Basic Contract Info\r\n    string constant _name = \"FAIR CHEEMS\";\r\n    string constant _symbol = \"$FC\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    // Supply\r\n    uint256 constant _totalSupply = 100000000000000 * 10 ** _decimals;\r\n    \r\n    // Buy, Sell & Wallet limits\r\n    uint256 public _maxBuyAmount = _totalSupply / 100 * 3;\r\n    uint256 public _maxSellAmount = _totalSupply / 100 * 1;\r\n    uint256 public _maxWalletSize = _totalSupply / 100 * 4; \r\n\r\n    // Fees\r\n        // Sell Fees\r\n    uint256 _sellMarketingFee = 5;\r\n    uint256 _sellDevFee = 5;\r\n    uint256 _sellRewardsFee = 4;\r\n    uint256 _sellLiquidityFee;\r\n    uint256 _sellTotalFee = _sellMarketingFee+_sellDevFee+_sellRewardsFee;\r\n        // Buy Fees\r\n    uint256 _buyMarketingFee = 3;\r\n    uint256 _buyDevFee = 2;\r\n    uint256 _buyRewardsFee = 3;\r\n    uint256 _buyLiquidityFee;\r\n    uint256 _buyTotalFee = _buyMarketingFee+_buyDevFee+_buyRewardsFee;\r\n\r\n    // Team Wallet & Dead address\r\n    address private devFeeReceiver = 0xd5ED03EB2450f0c24827a08888A593A24B0D9d30;\r\n    address private marketingFeeReceiver = 0xFdA2172Be502d264dc9DC844F30cD51aa9Dca6c4;\r\n    address private DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // Router\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    // Boolean variables\r\n    bool private _addingLP;\r\n    bool private _tradingEnabled;\r\n    bool public _swapEnabled = true;\r\n    uint256 public _launchedAt;\r\n\r\n    // Rewards distributor settings\r\n    DividendDistributor distributor;\r\n    uint256 distributorGas = 500000;\r\n\r\n    // Swap details\r\n    uint256 public swapThreshold = _totalSupply / 1000 * 1; // 0.1%\r\n    uint256 public _maxSwapSize = _maxSellAmount;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Ownable(msg.sender) {\r\n        // Initialize Pancake Pair\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        _automatedMarketMakers[pair]=true;\r\n        // Initialize Rewards Distributor\r\n        distributor = new DividendDistributor(address(router));\r\n        // Exclude from fees & rewards\r\n        _excludeFromFees[owner] = true;\r\n        _excludeFromRewards[pair] = _excludeFromRewards[address(this)] = _excludeFromRewards[DEAD] = true;\r\n        // Mint _totalSupply to owner address\r\n        _updateBalance(owner, _totalSupply);\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    // Internal Functions\r\n    function _transfer(address sender,address recipient,uint256 amount) private{\r\n        require(sender!=address(0)&&recipient!=address(0),\"Cannot be address(0).\");\r\n        bool isBuy=_automatedMarketMakers[sender]; // Buy - Take fees\r\n        bool isSell=_automatedMarketMakers[recipient]; // Sell - Take fees\r\n        bool isExcluded=_excludeFromFees[sender]||_excludeFromFees[recipient]||_addingLP; // Transfers, Exempts addresses & Adding LP - Without fees\r\n        if(isExcluded)_transferExcluded(sender,recipient,amount);\r\n        else {\r\n            require(_tradingEnabled, \"Cannot trade yet, wait until launch\");\r\n            if(isBuy)_buyTokens(sender,recipient,amount);\r\n            else if(isSell) {\r\n                // Swap & Liquify\r\n                if(shouldSwapBack()){ swapBack();}\r\n                _distributeRewards();\r\n                _sellTokens(sender,recipient,amount);\r\n            } else {\r\n                // P2P Transfer\r\n                require(_balances[recipient]+amount<=_maxWalletSize); // Check if actual held amount + amount buyed is higher than maximum wallet allowed\r\n                _transferExcluded(sender,recipient,amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _buyTokens(address sender, address recipient, uint256 amount) private{ // Buy transaction - Check limits and calculate fees\r\n        require(_balances[recipient]+amount<=_maxWalletSize,\"Total amount exceeds the bag size\"); // Check if actual held amount + amount buyed is higher than maximum wallet allowed\r\n        require(amount<=_maxBuyAmount,\"Amount exceeds the max buy\"); // Check if amount is higher than maximum buy allowed\r\n        uint256 tokenTax = amount*_buyTotalFee/100; // Calculate fees\r\n        _transferIncluded(sender,recipient,amount,tokenTax);\r\n    }\r\n\r\n    function _sellTokens(address sender, address recipient, uint256 amount) private{ // Sell transaction - Check limits and calculate fees\r\n        require(amount<=_maxSellAmount,\"Amount exceeds the max sell\"); // Check if amount is higher than maximum sell allowed\r\n        uint256 tokenTax = amount*_sellTotalFee/100; // Calculate fees\r\n        _transferIncluded(sender,recipient,amount,tokenTax);\r\n    }\r\n\r\n    function _transferIncluded(address sender,address recipient,uint256 amount,uint256 tokenTax) private{ // Used for - Transfer with fees\r\n        uint256 newAmount=amount-tokenTax; // Calculate token amount\r\n        _updateBalance(sender,_balances[sender]-amount); // Substrate tokens from sender address\r\n        _updateBalance(address(this),_balances[address(this)]+tokenTax); // Add fees taken to contract address\r\n        _updateBalance(recipient,_balances[recipient]+newAmount); // Add tokens to recipient address\r\n        emit Transfer(sender,recipient,newAmount);\r\n    }\r\n\r\n    function _transferExcluded(address sender, address recipient, uint256 amount) private{ // Used for - Transfer without fees\r\n        _updateBalance(sender,_balances[sender]-amount); // Substrate tokens from sender address\r\n        _updateBalance(recipient,_balances[recipient]+amount); // Add tokens to recipient address\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _distributeRewards() private{\r\n        try distributor.process(distributorGas) {} catch {}\r\n    }\r\n\r\n    function _updateBalance(address account,uint256 newBalance) private{ // Update accounts balances\r\n        _balances[account]=newBalance;\r\n        if(!_excludeFromRewards[account]){ try distributor.setShare(account,_balances[account]) {} catch {} }\r\n        else return;\r\n    }\r\n\r\n    function shouldSwapBack() private view returns (bool) {\r\n        return !inSwap && _swapEnabled && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() private swapping {\r\n        uint256 liquidity = _buyLiquidityFee + _sellLiquidityFee;\r\n        uint256 totalFee = _buyTotalFee + _sellTotalFee;\r\n        uint256 tokensToSell;\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this)); // Check total token amount held in contract\r\n            if(contractTokenBalance >= _maxSwapSize){ tokensToSell = _maxSwapSize;} // If token amount is higher than maxSwapSize, swap maxSwapSize amount\r\n            else{ tokensToSell = contractTokenBalance; } // If token amount is lower, swap total amount\r\n\r\n        uint256 totalLPTokens=tokensToSell*liquidity/totalFee;\r\n        uint256 tokensLeft=tokensToSell-totalLPTokens;\r\n        uint256 LPTokens=totalLPTokens/2;\r\n        uint256 LPBNBTokens=totalLPTokens-LPTokens;\r\n        uint256 toSwap=tokensLeft+LPBNBTokens;\r\n        _swapTokensForBNB(toSwap); // Swap fees to BNB\r\n        uint256 newBNB=address(this).balance;\r\n        uint256 LPBNB=(newBNB*LPBNBTokens)/toSwap;\r\n        _addLiquidity(LPTokens,LPBNB); // Add liquidity from fees\r\n        uint256 remainingBNB=address(this).balance;\r\n        _distributeBNB(remainingBNB); // Distribute BNB from fees\r\n    }\r\n\r\n    function _swapTokensForBNB(uint256 amount) private {\r\n        address[] memory path=new address[](2);\r\n        path[0]=address(this);\r\n        path[1] = router.WETH();\r\n        \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _distributeBNB(uint256 amountBNB) private {\r\n        uint256 marketing = _buyMarketingFee + _sellMarketingFee;\r\n        uint256 dev = _buyDevFee + _sellDevFee;\r\n        uint256 rewards = _buyRewardsFee + _sellRewardsFee;\r\n        uint256 totalFee = marketing + dev + rewards;\r\n        \r\n        uint256 BNBRewards = amountBNB*(rewards)/(totalFee); // Calculate BNB amount for rewards\r\n        uint256 BNBMarketing = amountBNB*(marketing)/(totalFee); // Calculate BNB amount for marketing\r\n        uint256 BNBDev = amountBNB*(dev)/(totalFee); // Calculate BNB amount for developer\r\n\r\n        try distributor.deposit{value: BNBRewards}() {} catch {} // Swap rewards BNB to BTC\r\n        (bool marketingSuccess, /* bytes memory data */) = payable(marketingFeeReceiver).call{value: BNBMarketing, gas: 30000}(\"\");\r\n        require(marketingSuccess, \"Marketing wallet rejected ETH transfer\"); // Send marketing BNB to marketing wallet\r\n        (bool devSuccess, /* bytes memory data */) = payable(devFeeReceiver).call{value: BNBDev, gas: 30000}(\"\");\r\n        require(devSuccess, \"Dev wallet rejected ETH transfer\"); // Send dev BNB to developer wallet\r\n    }\r\n\r\n    function _addLiquidity (uint256 amountToLiquify, uint256 amountBNBLiquidity) private{\r\n        if(amountToLiquify > 0){ // Check if there is liquidity from fees\r\n        _addingLP = true;\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                devFeeReceiver, // Dev receive additional LP tokens\r\n                block.timestamp\r\n            ); }\r\n        _addingLP = false;\r\n    }\r\n\r\n    // Owner Functions\r\n    function launch() external onlyOwner { // Used to initialize trading\r\n        require (_launchedAt == 0, \"Already launched\");\r\n        _tradingEnabled = true;\r\n        _launchedAt = block.timestamp;\r\n        emit Launch(block.timestamp);\r\n    }\r\n\r\n    function setMaxBuyAmount(uint256 percentageBase100) external onlyOwner { // Owner can set limits - Minimum allowed is 1%\r\n        require (percentageBase100 > 0, \"Cannot set 0 percentage\");\r\n        _maxBuyAmount = (_totalSupply * percentageBase100) / 100;\r\n        emit SetMaxBuyAmount(percentageBase100, block.timestamp);\r\n    }\r\n\r\n    function setMaxSellAmount(uint256 percentageBase100) external onlyOwner { // Owner can set limits - Minimum allowed is 1%\r\n        require (percentageBase100 > 0, \"Cannot set 0 percentage\");\r\n        _maxSellAmount = (_totalSupply * percentageBase100) / 100;\r\n        emit SetMaxSellAmount(percentageBase100, block.timestamp);\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 percentageBase100) external onlyOwner { // Owner can set limits - Minimum allowed is 1%\r\n        require (percentageBase100 > 0, \"Cannot set 0 percentage\");\r\n        _maxWalletSize = (_totalSupply * percentageBase100) / 100;\r\n        emit SetMaxWalletSize(percentageBase100, block.timestamp);\r\n    }\r\n\r\n    function setSellFees(uint256 marketing, uint256 dev, uint256 rewards, uint256 liquidity) external onlyOwner { // Owner can set sell fees - Maximum allowed is 25%\r\n        require(_tradingEnabled,\"Trading not enabled\");\r\n        require(marketing + dev + rewards + liquidity <= 25, \"Cannot set Sell Fees higher than 25%\");\r\n        _sellMarketingFee = marketing;\r\n        _sellDevFee = dev;\r\n        _sellRewardsFee = rewards;\r\n        _sellLiquidityFee = liquidity;\r\n        _sellTotalFee = marketing + dev + rewards + liquidity;\r\n        emit SetSellFees(marketing,dev,rewards,liquidity,block.timestamp);\r\n    }\r\n\r\n    function setBuyFees(uint256 marketing, uint256 dev, uint256 rewards, uint256 liquidity) external onlyOwner { // Owner can set buy fees - Maximum allowed is 20%\r\n        require(_tradingEnabled,\"Trading not enabled\");\r\n        require(marketing + dev + rewards + liquidity <= 20, \"Cannot set Buy Fees higher than 20%\");\r\n        _buyMarketingFee = marketing;\r\n        _buyDevFee = dev;\r\n        _buyRewardsFee = rewards;\r\n        _buyLiquidityFee = liquidity;\r\n        _buyTotalFee = marketing + dev + rewards + liquidity;\r\n        emit SetBuyFees(marketing,dev,rewards,liquidity,block.timestamp);\r\n    }\r\n\r\n    function setDevWallet(address devWallet) external onlyOwner { // Owner can set new Dev Fee receiver\r\n        require(devFeeReceiver != devWallet,\"This address is already DevWallet\");\r\n        address oldWallet = devFeeReceiver;\r\n        devFeeReceiver = devWallet;\r\n        emit SetDevWallet(oldWallet, devWallet);\r\n    }\r\n\r\n    function setMarketingWallet(address marketingWallet) external onlyOwner { // Owner can set new Marketing Fee receiver\r\n        require(marketingFeeReceiver != marketingWallet,\"This address is already MarketingWallet\");\r\n        address oldWallet = marketingFeeReceiver;\r\n        marketingFeeReceiver = marketingWallet;\r\n        emit SetMarketingWallet(oldWallet, marketingWallet);\r\n    }\r\n\r\n    function setSwapDetails(bool enabled, uint256 threshold, uint256 maxSwap) external onlyOwner { // Set SwapBack details\r\n        _swapEnabled = enabled;\r\n        swapThreshold = threshold * 10 ** _decimals; // Add token amount without decimals\r\n        _maxSwapSize = maxSwap * 10 ** _decimals; // Add token amount without decimals\r\n        emit SetSwapDetails(threshold, maxSwap);\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner { // Set Included (false) or Excluded (true) wallets from fees\r\n        require(holder != address(this) && holder != pair, \"Cannot include pair or token contract\");\r\n        _excludeFromFees[holder] = exempt;\r\n        emit SetIsFeeExempt(holder, exempt, block.timestamp);\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner { // Set Included (false) or Excluded (true) wallets from rewards\r\n        require(holder != address(this) && holder != pair, \"Cannot include pair or token contract\");\r\n        _excludeFromRewards[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShare(holder, 0);\r\n        }else{\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n        emit SetIsDividendExempt(holder, exempt, block.timestamp);\r\n    }\r\n\r\n    function setNewAMM(address AMM) external onlyOwner { // Add new pairs/CEX\r\n        require(!_automatedMarketMakers[AMM], \"Address is already added as automated market maker\");\r\n        _automatedMarketMakers[AMM]=true;\r\n        emit SetNewAMM(AMM);\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external onlyOwner { // Min period = Seconds before next rewards distribution\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n        emit SetDistributionCriteria(_minPeriod,_minDistribution);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external onlyOwner { \r\n        require(gas < 750000);\r\n        distributorGas = gas;\r\n    }\r\n\r\n    // User Callable Functions\r\n    function claimDividend() external { // Manual claim rewards, if you are allowed to claim\r\n        distributor.claimDividend(msg.sender);\r\n    }\r\n\r\n    // IBEP20 \r\n    receive() external payable { }\r\n\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]-(amount);\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"Launch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"SetBuyFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDevWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"SetDevWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDistribution\",\"type\":\"uint256\"}],\"name\":\"SetDistributionCriteria\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"SetIsDividendExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"SetIsFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"SetMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentageBase100\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"SetMaxBuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentageBase100\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"SetMaxSellAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentageBase100\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"SetMaxWalletSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"AutomaticMarketMaker\",\"type\":\"address\"}],\"name\":\"SetNewAMM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"SetSellFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSwapSize\",\"type\":\"uint256\"}],\"name\":\"SetSwapDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSwapSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentageBase100\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentageBase100\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentageBase100\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AMM\",\"type\":\"address\"}],\"name\":\"setNewAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"}],\"name\":\"setSwapDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FairCheems", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cee4a0175c67a73da89246cef8c3087ea586d76b20558b742a4fa3bb1389b585"}