{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-06-02\r\n*/\r\n\r\n/**\r\n    Token Shared\r\n    Founder  20,000,000 LFC\r\n    Advisor 5,000,000 LFC\r\n    Invester   3,000,000 LFC\r\n    Liquility  30,000,000 LFC\r\n    Token fan for claim  42,000,000 LFC\r\n   \r\n   \r\n    Max Supply 100,000,000.00 LFC\r\n    \r\n    Affaliate Bonust 10%\r\n    \r\n   \r\n    WEBSITE: https://liverpoolfantoken.io/\r\n    \r\n    \r\n    \r\n  */\r\n\r\n\r\npragma solidity ^0.4.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    function getHolder() external view returns(uint256);\r\n    function getRef(address _adr) external view returns(uint256);\r\n    function SupplyClam() external view returns(uint256);\r\n    function Rounded() external view returns(uint8);\r\n    function getTx() external view returns(uint256);\r\n    function claim(address _adr,address _ref) external returns(bool);\r\n    function activeState(address _adr) external view returns(bool);\r\n    \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Token {\r\n    \r\n    \r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n\r\ncontract RegularToken is Token {\r\n     uint256 c_transfer;\r\n   \r\n    \r\n    function transfer(address _to, uint _value) returns (bool) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            c_transfer = c_transfer+1;\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n             c_transfer = c_transfer+1;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint _value) returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    uint public totalSupply;\r\n}\r\n\r\ncontract UnboundedRegularToken is RegularToken {\r\n\r\n    uint constant MAX_UINT = 2**256 - 1;\r\n    \r\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited amount.\r\n    /// @param _from Address to transfer from.\r\n    /// @param _to Address to transfer to.\r\n    /// @param _value Amount to transfer.\r\n    /// @return Success of transfer.\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint allowance = allowed[_from][msg.sender];\r\n        if (balances[_from] >= _value\r\n            && allowance >= _value\r\n            && balances[_to] + _value >= balances[_to]\r\n        ) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            if (allowance < MAX_UINT) {\r\n                allowed[_from][msg.sender] -= _value;\r\n            }\r\n             c_transfer = c_transfer+1;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract LFCToken is UnboundedRegularToken {\r\n\r\n    uint public totalSupply = 58000000*10**18;\r\n    uint256 public totalLiqulity = 30000000*10**18;\r\n    uint8 constant public decimals = 18;\r\n    string constant public name = \"FC Liverpool Fan Token\";\r\n    string constant public symbol = \"LFC\";\r\n\r\n    mapping(address=>bool) public holders;\r\n    mapping(address=>uint256) public memref;\r\n     \r\n    uint256 allmem;\r\n    uint256 supply_claim;\r\n    address ownnner;\r\n    uint8 rouned;\r\n    \r\n    address public refund = 0x885bc2Ef9899198c4B763f45C4d2Fa3f1BB600ca; //For Refund And Promotions\r\n    \r\n    function LFCToken() {\r\n        ownnner = msg.sender;\r\n        balances[msg.sender] = totalSupply;\r\n        c_transfer = c_transfer+1;\r\n        allmem = allmem +1;\r\n        Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    \r\n    function getHolder() external view returns(uint256){\r\n        return allmem;\r\n    }\r\n    \r\n    function activeState(address _adr) external view returns(bool){\r\n        return holders[_adr];\r\n    }\r\n    \r\n    function getRef(address _adr) external view returns(uint256){\r\n        return memref[_adr];\r\n    }\r\n    \r\n    function SupplyClam() external view returns(uint256){\r\n        return supply_claim;\r\n    }\r\n    function Rounded() external view returns(uint8){\r\n        return rouned;\r\n    }\r\n    function getTx() external view returns(uint256){\r\n        return c_transfer;\r\n    }\r\n    \r\n    function claim(address _adr,address _ref) public returns(bool){\r\n        require(msg.sender==_adr,\"Private Claim\");\r\n        require(holders[_adr]==false,\"Get Error!\");\r\n        // require(_adr!=_ref,\"Ref!\");\r\n        require(allmem<=47925,\"Airdrop Finish\");\r\n        require(totalSupply<=(100000000*10**18),\"Max supply\");\r\n        holders[_adr] = true;\r\n        memref[_adr] = memref[_adr]+1;\r\n        \r\n        \r\n        uint256  airdrop;\r\n        uint256  airdrop_ref;\r\n        \r\n        if(allmem<15300){\r\n            airdrop = 1000*10**18;\r\n            airdrop_ref = 100*10**18;\r\n            rouned = 1;\r\n        }else if(allmem>=15301 && allmem<=29925){\r\n            airdrop = 800*10**18;\r\n            airdrop_ref = 80*10**18;\r\n            rouned = 2;\r\n        }else if(allmem>=29926 && allmem<=47925){\r\n            airdrop = 600*10**18;\r\n            airdrop_ref = 60*10**18;\r\n            rouned = 3;\r\n        }\r\n        \r\n        \r\n        balances[_adr]  = balances[_adr]+airdrop;\r\n        totalSupply = totalSupply+airdrop;\r\n        \r\n        \r\n        if(_ref==_adr){\r\n            totalSupply = totalSupply+airdrop_ref;\r\n            balances[refund] = balances[refund]+airdrop_ref;\r\n            Transfer(address(0),refund, airdrop_ref);\r\n             allmem = allmem+1;\r\n            \r\n        }else{\r\n          \r\n            balances[_ref]  = balances[_ref]+airdrop_ref;\r\n            totalSupply = totalSupply+airdrop_ref;\r\n             allmem = allmem+1;\r\n            Transfer(address(0), _ref, airdrop_ref);\r\n        }\r\n          c_transfer = c_transfer+2;\r\n          \r\n         \r\n        \r\n        supply_claim =  supply_claim + airdrop + airdrop_ref;\r\n        Transfer(address(0), _adr, airdrop);\r\n        \r\n        \r\n        return true;\r\n        \r\n    }\r\n    \r\n    \r\n}\r\n//we will never walk alone", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"SupplyClam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"activeState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getRef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"memref\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLiqulity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Rounded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "LFCToken", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://15d96d34495831f00b3fa38815758a57b9954d0d6c4080190967d749ca0c1605"}