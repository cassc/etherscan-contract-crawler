{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity 0.8.13;\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function removeLiquidityETH(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external returns (uint amountToken, uint amountETH);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract FirmSeed is Context, IERC20, Ownable {\r\n    \r\n    string constant private _name = \"FirmSeed\";\r\n    string constant private _symbol = \"FIRM\";\r\n    uint8 constant private _decimals = 9;\r\n\r\n    address public constant  deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address payable public marketingFeeReceiver = payable(0x9E3F27194E0f9F5bcBF5407401A61F5444F83F71); // Marketing Address\r\n    \r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowances;\r\n    \r\n    mapping (address => bool) public isMarketPair;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isExcludedFromFee;\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n\r\n    bool public txLimitsEnabled = true;\r\n\r\n    uint256 public buyTax = 60;\r\n    uint256 public sellTax = 60;\r\n\r\n    uint256 constant private _totalSupply = 50 * 10**6 * 10**_decimals;\r\n    uint256 public swapThreshold = 1000 * 10**_decimals; \r\n\r\n    uint256 public txMax = 250000 * 10**_decimals;\r\n    uint256 public walletMax = 500000 * 10**_decimals;\r\n\r\n    IDexRouter public dexRouter;\r\n    address public lpPair;\r\n    \r\n    bool private isInSwap;\r\n    bool public swapEnabled = true;\r\n    bool public swapByLimitOnly = false;\r\n    bool public launched = false;\r\n    bool public checkWalletLimit = true;\r\n\r\n    event SwapTokensForBNB(uint256 amountIn, address[] path);\r\n    event MaxTxAmountChanged(uint256 maxTx_);\r\n    event MarketPairUpdated(address account, bool isMarketPair_);\r\n    event TaxesChanged(uint256 buyTax_, uint256 sellTax_);\r\n    event SwapSettingsUpdated(bool swapEnabled_, uint256 swapThreshold_, bool swapByLimitOnly_);\r\n    event AccountWhitelisted(address account, bool feeExempt, bool walletLimitExempt, bool txLimitExempt);\r\n\r\n    modifier lockTheSwap {\r\n        isInSwap = true;\r\n        _;\r\n        isInSwap = false;\r\n    }\r\n    \r\n    constructor () {\r\n        \r\n        dexRouter = IDexRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n        lpPair = IDexFactory(dexRouter.factory()).createPair(address(this), dexRouter.WETH());\r\n\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n\r\n        isTxLimitExempt[owner()] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n\r\n        isWalletLimitExempt[owner()] = true;\r\n        isWalletLimitExempt[address(lpPair)] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        \r\n        isMarketPair[address(lpPair)] = true;\r\n\r\n        allowances[address(this)][address(dexRouter)] = _totalSupply;\r\n        balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n     //to receive BNB from dexRouter when swapping\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function circulatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(deadAddress);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function allowance(address owner_, address spender) public view override returns (uint256) {\r\n        return allowances[owner_][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner_, address spender, uint256 amount) private {\r\n        require(owner_ != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[owner_][spender] = amount;\r\n        emit Approval(owner_, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function openTrading() public onlyOwner {\r\n        launched = true;\r\n    }\r\n\r\n    function changeMarketPairStatus(address account, bool isMarketPair_) public onlyOwner {\r\n        isMarketPair[account] = isMarketPair_;\r\n        emit MarketPairUpdated(account, isMarketPair_);\r\n    }\r\n    \r\n    function setTaxes(uint256 buyTax_, uint256 sellTax_) external onlyOwner {\r\n        require(buyTax_ <= 100, \"Cannot exceed 10%\");\r\n        require(sellTax_ <= 250, \"Cannot exceed 25%\");\r\n        buyTax = buyTax_;\r\n        sellTax = sellTax_;\r\n        emit TaxesChanged(buyTax_, sellTax_);\r\n    }\r\n\r\n    function changeTxLimits(uint256 maxTx_, bool txLimitsEnabled_) external onlyOwner {\r\n        require(maxTx_ >= (5000 * 10**_decimals), \"Cannot be lower than 0.01%\");\r\n        txMax = maxTx_;\r\n        txLimitsEnabled = txLimitsEnabled_;\r\n        emit MaxTxAmountChanged(maxTx_);\r\n    }\r\n\r\n    function changeWalletLimits(bool checkWalletLimit_, uint256 walletMax_) external onlyOwner {\r\n        require(walletMax_ >= (25000 * 10**_decimals), \"Cannot be lower than 0.05%\");\r\n        checkWalletLimit = checkWalletLimit_;\r\n        walletMax  = walletMax_;\r\n    }\r\n\r\n    function whitelistAccounts(address[] memory wallets, bool feeExempt, bool walletLimitExempt, bool txLimitExempt) public onlyOwner {\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            isExcludedFromFee[wallets[i]] = feeExempt;\r\n            isWalletLimitExempt[wallets[i]] = walletLimitExempt;\r\n            isTxLimitExempt[wallets[i]] = txLimitExempt;\r\n            emit AccountWhitelisted(wallets[i], feeExempt, walletLimitExempt, txLimitExempt);\r\n        }\r\n    }\r\n\r\n    function changeSwapSettings(bool swapEnabled_, uint256 swapThreshold_, bool swapByLimitOnly_) public onlyOwner {\r\n        swapEnabled = swapEnabled_;\r\n        swapThreshold = swapThreshold_;\r\n        swapByLimitOnly = swapByLimitOnly_;\r\n        emit SwapSettingsUpdated(swapEnabled_, swapThreshold_, swapByLimitOnly_);\r\n    }\r\n\r\n    function changeMarketingFeeReceiver(address marketingFeeReceiver_) external onlyOwner {\r\n        require(marketingFeeReceiver_ != address(0), \"New address cannot be zero address\");\r\n        marketingFeeReceiver = payable(marketingFeeReceiver_);\r\n    }\r\n\r\n    function transferBNB(address payable recipient, uint256 amount) private {\r\n        bool success;\r\n        (success,) = address(recipient).call{value: amount}(\"\");\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n        if(isInSwap) { \r\n            return _basicTransfer(sender, recipient, amount); \r\n        } else {\r\n            require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n            require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n            if(!isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\r\n                require(launched, \"Not Launched.\");\r\n\r\n                if(txLimitsEnabled) {\r\n                    require(amount <= txMax, \"Transfer amount exceeds the max limit.\");\r\n                }\r\n            }\r\n\r\n            bool isTaxFree = (isExcludedFromFee[sender] || isExcludedFromFee[recipient]);\r\n\r\n            if (!isTaxFree && !isMarketPair[sender] && swapEnabled) \r\n            {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                bool overMinimumTokenBalance = contractTokenBalance >= swapThreshold;\r\n                if(overMinimumTokenBalance) {\r\n                    if(swapByLimitOnly)\r\n                        contractTokenBalance = swapThreshold;\r\n                    swapAndLiquify(contractTokenBalance);    \r\n                }\r\n            }\r\n\r\n            balances[sender] = balances[sender] - amount;\r\n\r\n            uint256 finalAmount = isTaxFree ? amount : takeFee(sender, recipient, amount);\r\n\r\n            if(checkWalletLimit && !isWalletLimitExempt[recipient])\r\n                require((balanceOf(recipient) + finalAmount) <= walletMax);\r\n\r\n            balances[recipient] = balances[recipient] + finalAmount;\r\n\r\n            emit Transfer(sender, recipient, finalAmount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        balances[sender] = balances[sender] - amount;\r\n        balances[recipient] = balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n        if(tAmount > 0) {\r\n            swapTokensForEth(tAmount);\r\n            uint256 bnbForMarketing = address(this).balance;\r\n\r\n            if(bnbForMarketing > 0) {\r\n                transferBNB(marketingFeeReceiver, bnbForMarketing);\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n        \r\n        emit SwapTokensForBNB(tokenAmount, path);\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n\r\n        uint256 feeAmount = 0;   \r\n\r\n        if(isMarketPair[recipient]) {\r\n            feeAmount = (amount * sellTax) / 1000; \r\n        } else if(isMarketPair[sender]) {\r\n            feeAmount = (amount * buyTax) / 1000; \r\n        }\r\n        \r\n        if(feeAmount > 0) {\r\n            balances[address(this)] = balances[address(this)] + feeAmount;\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount - feeAmount;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"feeExempt\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"walletLimitExempt\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"txLimitExempt\",\"type\":\"bool\"}],\"name\":\"AccountWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarketPair_\",\"type\":\"bool\"}],\"name\":\"MarketPairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTx_\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapEnabled_\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapThreshold_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapByLimitOnly_\",\"type\":\"bool\"}],\"name\":\"SwapSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTax_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTax_\",\"type\":\"uint256\"}],\"name\":\"TaxesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMarketPair_\",\"type\":\"bool\"}],\"name\":\"changeMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFeeReceiver_\",\"type\":\"address\"}],\"name\":\"changeMarketingFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"swapThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"swapByLimitOnly_\",\"type\":\"bool\"}],\"name\":\"changeSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTx_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"txLimitsEnabled_\",\"type\":\"bool\"}],\"name\":\"changeTxLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"checkWalletLimit_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"walletMax_\",\"type\":\"uint256\"}],\"name\":\"changeWalletLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax_\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapByLimitOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLimitsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"feeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"walletLimitExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"txLimitExempt\",\"type\":\"bool\"}],\"name\":\"whitelistAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FirmSeed", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7eb55b5c0d2c8529d2589663e9e2c3b841e251898a897bdfb5bd8fbbcc364b04"}