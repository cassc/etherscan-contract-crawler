{"SourceCode": "{\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address who) external view returns (uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n    event Transfer(address indexed from,address indexed to,uint256 value);\\r\\n    event Approval(address indexed owner,address indexed spender,uint256 value);\\r\\n}\\r\\n\"},\"IPancakeFactory.sol\":{\"content\":\"pragma solidity ^0.5.4;\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\"},\"IPancakeRouter.sol\":{\"content\":\"pragma solidity ^0.5.4;\\r\\n\\r\\ninterface IPancakeRouter {\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.4;\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"TokenTemplate.sol\":{\"content\":\"pragma solidity ^0.5.4;\\r\\n\\r\\nimport \\u0027./IPancakeRouter.sol\\u0027;\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./IPancakeFactory.sol\\u0027;\\r\\n\\r\\n\\r\\ncontract ERC20 is IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    mapping (address =\\u003e uint256) public _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public _allowed;\\r\\n    uint256 public _totalSupply;\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view returns (uint256) {\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    function allowance(address owner,address spender) public view returns (uint256) {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        require(spender != address(0));\\r\\n        _allowed[msg.sender][spender] = value;\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender,uint256 addedValue) public returns (bool) {\\r\\n        require(spender != address(0));\\r\\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\\r\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender,uint256 subtractedValue) public returns (bool) {\\r\\n        require(spender != address(0));\\r\\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\\r\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 value) internal {\\r\\n        require(to != address(0));\\r\\n        require(value \\u003c= _balances[from]);\\r\\n        _balances[from] = _balances[from].sub(value);\\r\\n        _balances[to] = _balances[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n}\\r\\ncontract Context {\\r\\n    constructor () internal { }\\r\\n\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view  returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract TokenTemplate is ERC20,Ownable {\\r\\n    string  private _name = \\\"LLT\\\";\\r\\n    string  private _symbol = \\\"LLT\\\";\\r\\n    uint8   private _decimals = 18;\\r\\n    address public pancakeToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\r\\n    address public usdtToken = 0x55d398326f99059fF775485246999027B3197955;\\r\\n    address public pancakePair;\\r\\n    address public feeAddress1;\\r\\n    address public feeAddress2;\\r\\n    uint256 public feenumberMR;\\r\\n    uint256 public feenumberMC;\\r\\n    uint256 public burnnumberMC;\\r\\n    uint256 public MAXSTOPTOTAL;\\r\\n    constructor (uint256 _initialAmount, uint256 _MAXSTOPTOTAL, address _feeAddress1, address _feeAddress2, uint256 _feenumberMR, uint256 _feenumberMC, uint256 _burnnumberMC) public {\\r\\n        _totalSupply = _initialAmount.mul(10 ** uint256(_decimals));\\r\\n        MAXSTOPTOTAL = _MAXSTOPTOTAL * 10 ** uint256(_decimals);\\r\\n        feeAddress1 = _feeAddress1;\\r\\n        feeAddress2 = _feeAddress2;\\r\\n        feenumberMR = _feenumberMR;\\r\\n        feenumberMC = _feenumberMC;\\r\\n        burnnumberMC = _burnnumberMC;\\r\\n        _balances[msg.sender] = _initialAmount.mul(10 ** uint256(_decimals));\\r\\n        IPancakeRouter router =  IPancakeRouter(pancakeToken);\\r\\n        pancakePair =  IPancakeFactory(router.factory()).createPair(address(this), usdtToken);\\r\\n    }\\r\\n    function MAXSTOPTOTALTS(uint256 _MAXSTOPTOTAL) public onlyOwner returns(bool){\\r\\n        MAXSTOPTOTAL = _MAXSTOPTOTAL * 10 ** uint256(_decimals);\\r\\n        return true;\\r\\n    }\\r\\n    function updatefeenumberMR(uint256 _feenumberMR) public onlyOwner returns(bool){\\r\\n        feenumberMR = _feenumberMR;\\r\\n        return true;\\r\\n    }\\r\\n    function updatefeenumberMC(uint256 _feenumberMC) public onlyOwner returns(bool){\\r\\n        feenumberMC = _feenumberMC;\\r\\n        return true;\\r\\n    }\\r\\n    function updateburnnumberMC(uint256 _burnnumberMC) public onlyOwner returns(bool){\\r\\n        burnnumberMC = _burnnumberMC;\\r\\n        return true;\\r\\n    }\\r\\n    function transfer(address to, uint256 value) public returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n     function transferFrom(address from, address to, uint256 value) public returns (bool) {\\r\\n        require(value \\u003c= _allowed[from][msg.sender]);\\r\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n     function _transfer(address from, address to, uint256 value) internal {\\r\\n        require(to != address(0));\\r\\n        require(value \\u003c= _balances[from]);\\r\\n\\r\\n        if (from == pancakePair) {\\r\\n\\r\\n            uint256 feeAmount1 = value.mul(feenumberMR).div(100);\\r\\n            _balances[from] = _balances[from].sub(value);\\r\\n            _balances[to] = _balances[to].add(value.sub(feeAmount1));\\r\\n            _balances[feeAddress1] = _balances[feeAddress1].add(feeAmount1);\\r\\n            emit Transfer(from, feeAddress1, feeAmount1);\\r\\n            emit Transfer(from, to, value.sub(feeAmount1));\\r\\n        } else if(to == pancakePair) {\\r\\n            uint256 XHAmount = value.mul(burnnumberMC).div(100);\\r\\n            uint256 feeAmount2 = value.mul(feenumberMC).div(100);\\r\\n            if(_totalSupply \\u003e MAXSTOPTOTAL){\\r\\n                _balances[from] = _balances[from].sub(value + feeAmount2 + XHAmount);\\r\\n                _balances[to] = _balances[to].add(value);\\r\\n                _balances[feeAddress2] = _balances[feeAddress2].add(feeAmount2);\\r\\n                _burn(from, XHAmount);\\r\\n                emit Transfer(from, feeAddress2, feeAmount2);\\r\\n                emit Transfer(from, to, value);\\r\\n            }else{\\r\\n                _balances[from] = _balances[from].sub(value + feeAmount2);\\r\\n                _balances[to] = _balances[to].add(value);\\r\\n                _balances[feeAddress2] = _balances[feeAddress2].add(feeAmount2);\\r\\n                emit Transfer(from, feeAddress2, feeAmount2);\\r\\n                emit Transfer(from, to, value);\\r\\n            }\\r\\n            \\r\\n        }else {\\r\\n            _balances[from] = _balances[from].sub(value);\\r\\n            _balances[to] = _balances[to].add(value);\\r\\n            emit Transfer(from, to, value);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0));\\r\\n        // _balances[account] = _balances[account].sub(amount);\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n        require(account != address(0));\\r\\n    }\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MAXSTOPTOTAL\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feenumberMR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feenumberMC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnnumberMC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXSTOPTOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAXSTOPTOTAL\",\"type\":\"uint256\"}],\"name\":\"MAXSTOPTOTALTS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnnumberMC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feenumberMC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feenumberMR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pancakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnnumberMC\",\"type\":\"uint256\"}],\"name\":\"updateburnnumberMC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feenumberMC\",\"type\":\"uint256\"}],\"name\":\"updatefeenumberMC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feenumberMR\",\"type\":\"uint256\"}],\"name\":\"updatefeenumberMR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenTemplate", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000002c673000000000000000000000000000000000000000000000000000000000000071ac0000000000000000000000009ca590b63a046fec42306eeb67f4f4b9f739c286000000000000000000000000fb92967976bbb7be79c5218507c745faeac3f2fb000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://229c92736bdd6c1c82d22b115d96c6e9a266826ddb1117f70b34f287e63c7b10"}