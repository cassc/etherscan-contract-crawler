{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor() {\r\n        _name = \"FILY\";\r\n        _symbol = \"FILY\";\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;            \r\n            _totalSupply -= amount;\r\n        }\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IPancakeSwapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IPancakeSwapV2Router01 {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ncontract FILYMaster is ERC20 {\r\n    address public USDT;\r\n    address public Operator;\r\n    address public BOSS; \r\n    address public Admin;\r\n    uint256 public LastPrice; \r\n    uint256 public EnableBuyTime; \r\n    uint256 public BuyCD; \r\n\r\n    mapping(address => bool) public Manager; \r\n    mapping(address => bool) public BlackList; \r\n    uint256 public ManagerAmount; \r\n\r\n    bool public FarmEnabled; \r\n    bool public TaxEnabled; \r\n    bool public BuyFreeze;\r\n    bool public StopDex; \r\n    bool public StopBuy; \r\n    uint256 public PriceUpLimit; \r\n\r\n    IERC20 public LPInstance;\r\n    address public uniswapV2Pair;\r\n    IPancakeSwapV2Router01 public uniswapV2Router;\r\n\r\n    mapping(address => uint256) public UserStakeAmount; \r\n    mapping(address => uint256) public TEAMStakeAmount; \r\n    mapping(address => bool) public UserHasTEAM; \r\n    mapping(address => uint256) public SonsAmount; \r\n\r\n    mapping(address => uint256) public UserLastStakeWithDrawTimestamp; \r\n    mapping(address => uint256) public UserLastTEAMWithDrawTimestamp; \r\n    mapping(address => uint256) public UserTEAMRewardNoPaid; \r\n\r\n    mapping(address => address) public Upper; \r\n    mapping(address => address[]) public Son; \r\n    mapping(address => uint256) private UserTopLPAmount; \r\n    uint256 public totalFarmAmount; \r\n    uint256 public totalStakeAmount; \r\n    uint256 public AccFarmReward; \r\n    mapping(address => uint256) public ManagerFarmRewardPaid; \r\n\r\n    uint256 public FarmAmountLimit; \r\n    uint256 public totalStakeReward; \r\n    uint256 public StakeRewardSpeed; \r\n    uint256 public TopPrice24H; \r\n\r\n    struct TEAMLimit {\r\n        uint256 StakeAmount;\r\n        uint256 TEAMStakeAmount;\r\n        uint256 SonAmount;\r\n    }\r\n\r\n    TEAMLimit[] public TEAMLimitList;\r\n    modifier EOA() {\r\n        require(tx.origin == msg.sender, \"EOA Only\");\r\n        address account = msg.sender;\r\n        require(account.code.length == 0, \"msg.sender.code.length == 0\");\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        require(size == 0, \"extcodesize == 0\");\r\n        _;\r\n    }\r\n\r\n    modifier OnlyOperator() {\r\n        require(msg.sender == Operator, \"FILY : Only Operator\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        TopPrice24H = 1e18; \r\n        LastPrice = 1e18; \r\n        BOSS = address(0xb59839711A3925eaC4f2CbeC7E32cF0326f50F4A); \r\n        Admin = address(0xb59839711A3925eaC4f2CbeC7E32cF0326f50F4A);\r\n        Operator = msg.sender;\r\n        BuyCD = 86400;\r\n        BuyFreeze = true;\r\n        StopBuy = true;\r\n        PriceUpLimit = 130;\r\n        FarmAmountLimit = 4800 * 1e4 * 1e18; \r\n        EnableBuyTime = block.timestamp;\r\n        USDT = address(0x55d398326f99059fF775485246999027B3197955);\r\n        uniswapV2Router = IPancakeSwapV2Router01(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        uniswapV2Pair = IPancakeSwapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), USDT);\r\n        LPInstance = IERC20(uniswapV2Pair);\r\n        _approve(BOSS, address(uniswapV2Router), type(uint256).max);\r\n        _mint(address(BOSS), 60 * 1e4 * 1e18);\r\n        TEAMLimitList.push(\r\n            TEAMLimit({\r\n                StakeAmount: 1200 * 1e18,\r\n                TEAMStakeAmount: 500000 * 1e18,\r\n                SonAmount: 20 \r\n            })\r\n        );\r\n        TEAMLimitList.push(\r\n            TEAMLimit({\r\n                StakeAmount: 800 * 1e18,\r\n                TEAMStakeAmount: 300000 * 1e18,\r\n                SonAmount: 16\r\n            })\r\n        );\r\n        TEAMLimitList.push(\r\n            TEAMLimit({\r\n                StakeAmount: 400 * 1e18,\r\n                TEAMStakeAmount: 200000 * 1e18,\r\n                SonAmount: 12\r\n            })\r\n        );\r\n        TEAMLimitList.push(\r\n            TEAMLimit({\r\n                StakeAmount: 200 * 1e18,\r\n                TEAMStakeAmount: 50000 * 1e18,\r\n                SonAmount: 8\r\n            })\r\n        );\r\n        TEAMLimitList.push(\r\n            TEAMLimit({\r\n                StakeAmount: 10 * 1e18,\r\n                TEAMStakeAmount: 10000 * 1e18,\r\n                SonAmount: 4\r\n            })\r\n        );\r\n    }\r\n\r\n    function setTax() external OnlyOperator {\r\n        TaxEnabled = !TaxEnabled;\r\n    }\r\n\r\n    function setDex() external OnlyOperator {\r\n        StopDex = !StopDex;\r\n    }\r\n\r\n    function setFarmEnable() external OnlyOperator {\r\n        FarmEnabled = !FarmEnabled;\r\n    }\r\n\r\n    function setBuyEnable() external OnlyOperator {\r\n        StopBuy = !StopBuy;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256) {\r\n        if (\r\n            IERC20(address(this)).balanceOf(address(uniswapV2Pair)) > 0 &&\r\n            IERC20(USDT).balanceOf(address(uniswapV2Pair)) > 0\r\n        ) {\r\n            return\r\n                (IERC20(USDT).balanceOf(address(uniswapV2Pair)) * 1e18) /\r\n                IERC20(address(this)).balanceOf(address(uniswapV2Pair));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function priceLimit() internal {\r\n        uint256 nowPrice = getPrice();\r\n        if (nowPrice > TopPrice24H) {\r\n            TopPrice24H = nowPrice;\r\n        }\r\n\r\n        if (nowPrice > (LastPrice * PriceUpLimit) / 100 && !BuyFreeze) {\r\n            EnableBuyTime = block.timestamp + BuyCD; \r\n            BuyFreeze = true;\r\n        }\r\n\r\n        if (block.timestamp >= EnableBuyTime && BuyFreeze) {\r\n            LastPrice = nowPrice;\r\n            BuyFreeze = false;\r\n        }\r\n    }\r\n\r\n    function priceRate() external view returns (uint256) {\r\n        return (getPrice() * 1e18) / LastPrice;\r\n    }\r\n    \r\n    function checkLP(address account) internal {\r\n        require(!BlackList[account], \"checkLP : You are blacklisted\");\r\n        if (\r\n            account == Admin ||\r\n            account == Operator ||\r\n            account == BOSS ||\r\n            account == address(uniswapV2Router) ||\r\n            account == address(uniswapV2Pair) ||\r\n            !Manager[account] \r\n        ) {\r\n            return;\r\n        }\r\n\r\n        if (LPInstance.balanceOf(account) > UserTopLPAmount[account]) {\r\n            UserTopLPAmount[account] = LPInstance.balanceOf(account);\r\n        }\r\n\r\n        if (\r\n            LPInstance.balanceOf(account) < UserTopLPAmount[account] &&\r\n            !BlackList[account]\r\n        ) {\r\n            ClearReward_AddBlackList(account);\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        checkLP(from);\r\n        checkLP(to);\r\n        \r\n        if (from == address(uniswapV2Pair)) {\r\n            require(!StopBuy, \"Stop PancakeSwap Buy\");\r\n            require(block.timestamp >= EnableBuyTime, \"Stop Buy\");\r\n        }\r\n\r\n        if (\r\n            from == Admin &&\r\n            to != address(uniswapV2Pair) &&\r\n            amount == 200 * 1e18\r\n        ) {\r\n            super._transfer(from, to, amount);\r\n            if (!Manager[to]) {\r\n                ManagerAmount += 1;\r\n                Manager[to] = true; \r\n            }\r\n            return;\r\n        }\r\n\r\n        if (from == address(this) || to == address(this) || !TaxEnabled) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n        \r\n        if (from != address(uniswapV2Pair) && to != address(uniswapV2Pair)) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n        \r\n        if (from == address(uniswapV2Pair) && TaxEnabled) {\r\n            require(!StopDex, \"Stop Pancakeswap!\"); \r\n            if (totalSupply() > 60 * 1e4 * 1e18) {\r\n                _burn(tx.origin, amount / 100);\r\n            }\r\n            super._transfer(tx.origin, BOSS, amount / 20); \r\n            super._transfer(from, to, (amount * 19) / 20); \r\n            priceLimit(); \r\n            return;\r\n        }\r\n        \r\n        if (to == address(uniswapV2Pair) && TaxEnabled) {\r\n            require(amount <= (balanceOf(from) * 9) / 10, \"Only sell 90%\");\r\n            uint256 _burnAmount;\r\n            if (totalSupply() > 60 * 1e4 * 1e18) {\r\n                _burnAmount = amount / 50;\r\n                _burn(tx.origin, _burnAmount);\r\n            }\r\n            super._transfer(tx.origin, BOSS, (amount * 8) / 100); \r\n            super._transfer(from, to, (amount * 92) / 100 - _burnAmount); \r\n            priceLimit();\r\n            return;\r\n        }\r\n\r\n        require(false, \"what this?\");\r\n    }\r\n\r\n    function ClearReward_AddBlackList(address account) private {\r\n        BlackList[account] = true; \r\n        Manager[account] = false; \r\n        ManagerAmount -= 1; \r\n        UserStakeAmount[account] = 0;\r\n        super._burn(account, super.balanceOf(account));\r\n    }\r\n\r\n    function Admin_ClearReward_AddBlackList(address account)\r\n        external\r\n        OnlyOperator\r\n    {\r\n        ClearReward_AddBlackList(account);\r\n    }\r\n\r\n    function getTEAMLevel(address account) public view returns (uint256) {\r\n        if (BlackList[account]) return 0;\r\n        for (uint256 i = 0; i < TEAMLimitList.length; i++) {\r\n            if (\r\n                UserStakeAmount[account] >= TEAMLimitList[i].StakeAmount &&\r\n                SonsAmount[account] >= TEAMLimitList[i].SonAmount &&\r\n                TEAMStakeAmount[account] >= TEAMLimitList[i].TEAMStakeAmount\r\n            ) {\r\n                return TEAMLimitList.length - i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function farm(uint256 USDTAmount) external EOA {\r\n        require(\r\n            USDTAmount % (100 * 1e18) == 0 && FarmEnabled,\r\n            \"USDT must be >= 100 and Farm Enabled\"\r\n        );\r\n        require(\r\n            totalFarmAmount <= FarmAmountLimit,\r\n            \"totalFarmAmount <= FarmAmountLimit\"\r\n        );\r\n        \r\n        IERC20(USDT).transferFrom(msg.sender, BOSS, USDTAmount);\r\n        uint256 FILYAmount = (USDTAmount * 1e18) / getPrice();\r\n        _mint(msg.sender, FILYAmount); \r\n        _mint(address(this), (FILYAmount * 13) / 100); \r\n        \r\n        totalFarmAmount += FILYAmount; \r\n        AccFarmReward += (FILYAmount * 13) / 100 / ManagerAmount; \r\n    }\r\n    \r\n    function getFarmReward(address account) public view EOA returns (uint256) {\r\n        if (BlackList[account] || !Manager[account]) return 0;\r\n        return AccFarmReward - ManagerFarmRewardPaid[account];\r\n    }\r\n\r\n    function WithdrawFarmReward() external EOA {\r\n        require(\r\n            Manager[msg.sender] && !BlackList[msg.sender],\r\n            \"You are not a manager or in BlackList\"\r\n        );\r\n        uint256 _reward = getFarmReward(msg.sender); \r\n        if (_reward != 0) {\r\n            ManagerFarmRewardPaid[msg.sender] += AccFarmReward; \r\n            super._transfer(address(this), msg.sender, _reward); \r\n        }\r\n    }\r\n    \r\n    function updateTEAMAndReward(\r\n        address account,\r\n        uint256 stakeAmount,\r\n        bool UpDown\r\n    ) internal {\r\n        address _upper = Upper[account]; \r\n        address _account = account;\r\n        uint256 LevelGap;\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            if (getTEAMLevel(_upper) > getTEAMLevel(_account)) {\r\n                LevelGap = getTEAMLevel(_upper) - getTEAMLevel(_account);\r\n            } else {\r\n                LevelGap = 0;\r\n            }\r\n            if (_upper != address(0) && !BlackList[_upper] ) {\r\n                UserTEAMRewardNoPaid[_upper] +=\r\n                (block.timestamp - UserLastTEAMWithDrawTimestamp[_account]) \r\n                * (TEAMStakeAmount[_account] + UserStakeAmount[_account])\r\n                * LevelGap  \r\n                * 11574074074074\r\n                / 1000\r\n                / 1e18;\r\n                if (UpDown) {\r\n                    TEAMStakeAmount[_upper] += stakeAmount;\r\n                } else {\r\n                    TEAMStakeAmount[_upper] -= stakeAmount;\r\n                }\r\n                UserLastTEAMWithDrawTimestamp[_account] = block.timestamp; \r\n                _account = _upper;\r\n                _upper = Upper[_upper];\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function updateStakeReward(address account) internal {\r\n        UserTEAMRewardNoPaid[account] +=\r\n            ((block.timestamp - UserLastStakeWithDrawTimestamp[account]) *\r\n                UserStakeAmount[account] *\r\n                getTEAMLevel(account) *\r\n                11574074074074) /\r\n            1e18;\r\n        UserLastStakeWithDrawTimestamp[account] = block.timestamp; \r\n    }\r\n    \r\n    function getTEAMStakeReward(address account) public view returns (uint256) {\r\n        return UserTEAMRewardNoPaid[account]; \r\n    }\r\n\r\n    function getUserStakeReward(address account) public view returns (uint256) {\r\n        uint level;\r\n        for (uint256 i = 0; i < TEAMLimitList.length; i++) {\r\n            if (\r\n                UserStakeAmount[account] >= TEAMLimitList[i].StakeAmount\r\n            ) {\r\n                level = TEAMLimitList.length - i;\r\n                break;\r\n            }\r\n        }\r\n        uint256 _stakeReward = UserStakeAmount[account] *\r\n            (block.timestamp - UserLastStakeWithDrawTimestamp[account])\r\n            *level \r\n            *11574074074074\r\n            /1000\r\n            /1e18; \r\n        return _stakeReward;\r\n    }\r\n\r\n    function getSonStakeAmount(address account) public view returns (uint256) {\r\n        uint256 _amount;\r\n        for (uint256 i = 0; i < Son[account].length; i++) {\r\n            _amount += TEAMStakeAmount[Son[account][i]]; \r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    function stake(address _upper, uint256 amount) external EOA {\r\n        require(\r\n            !BlackList[msg.sender] &&\r\n                _upper != address(0) &&\r\n                _upper != msg.sender,\r\n            \"amount must be > 0, upper != yourself != blackhole\"\r\n        );\r\n        if (UserLastStakeWithDrawTimestamp[msg.sender] == 0) {\r\n            UserLastStakeWithDrawTimestamp[msg.sender] = block.timestamp;\r\n        }\r\n        if (UserLastTEAMWithDrawTimestamp[msg.sender] == 0) {\r\n            UserLastTEAMWithDrawTimestamp[msg.sender] = block.timestamp;\r\n        }\r\n        if (Upper[msg.sender] == address(0)) {\r\n            Upper[msg.sender] = _upper;\r\n            Son[_upper].push(msg.sender);\r\n        }\r\n        totalStakeAmount += amount;\r\n        updateStakeReward(msg.sender); \r\n        super._transfer(msg.sender, address(this), amount);\r\n        UserStakeAmount[msg.sender] += amount;\r\n        if (\r\n            UserStakeAmount[msg.sender] >= 50 * 1e18 &&\r\n            Upper[msg.sender] != address(0) &&\r\n            !UserHasTEAM[msg.sender]\r\n        ) {\r\n            SonsAmount[Upper[msg.sender]] += 1; \r\n            UserHasTEAM[msg.sender] = true; \r\n        }\r\n        updateTEAMAndReward(msg.sender, amount, true); \r\n    }\r\n\r\n    function unStake(uint256 amount) external EOA {\r\n        require(\r\n            amount > 0 &&\r\n                !BlackList[msg.sender] &&\r\n                UserStakeAmount[msg.sender] >= amount,\r\n            \"amount must be > 0\"\r\n        );\r\n        updateStakeReward(msg.sender); \r\n        UserStakeAmount[msg.sender] -= amount;\r\n        super._transfer(address(this), msg.sender, amount);\r\n        if (\r\n            UserStakeAmount[msg.sender] < 50 * 1e18 &&\r\n            Upper[msg.sender] != address(0) &&\r\n            UserHasTEAM[msg.sender]\r\n        ) {\r\n            SonsAmount[Upper[msg.sender]] -= 1;\r\n            UserHasTEAM[msg.sender] = false;\r\n        }\r\n        updateTEAMAndReward(msg.sender, amount, false); \r\n        totalStakeAmount -= amount; \r\n    }\r\n\r\n    function WithdrawStakeReward() external EOA {\r\n        updateTEAMAndReward(msg.sender, 0, true); \r\n        uint256 reward = getUserStakeReward(msg.sender);\r\n        uint256 _teamReward = UserTEAMRewardNoPaid[msg.sender];\r\n        UserTEAMRewardNoPaid[msg.sender] = 0; \r\n        UserLastStakeWithDrawTimestamp[msg.sender] = block.timestamp; \r\n        \r\n        require(\r\n            totalStakeReward <= 6000 * 1e4 * 1e18 - FarmAmountLimit,\r\n            \"totalSupply < 1200w\"\r\n        ); \r\n        super._mint(msg.sender, reward + _teamReward);\r\n        totalStakeReward += reward + _teamReward;\r\n    }\r\n\r\n    function WithdrawBOSS(address token) external {\r\n        IERC20(token).transfer(BOSS, IERC20(token).balanceOf(address(this)));\r\n        payable(BOSS).transfer(address(this).balance);\r\n    }\r\n\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n    \r\n    function getSonAmount(address account) public view returns (uint256) {\r\n        return Son[account].length;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function getSon(address account) public view returns (address[] memory) {\r\n        address[] memory _address = new address[](Son[account].length);\r\n        for (uint256 i = 0; i < Son[account].length; i++) {\r\n            _address[i] = Son[account][i];\r\n        }\r\n        return _address;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AccFarmReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Admin_ClearReward_AddBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOSS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyCD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyFreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnableBuyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FarmAmountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FarmEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPInstance\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Manager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ManagerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ManagerFarmRewardPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PriceUpLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Son\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SonsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakeRewardSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StopBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StopDex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TEAMLimitList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"StakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TEAMStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SonAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TEAMStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TaxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TopPrice24H\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Upper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserHasTEAM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserLastStakeWithDrawTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserLastTEAMWithDrawTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserTEAMRewardNoPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"WithdrawBOSS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawFarmReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawStakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmount\",\"type\":\"uint256\"}],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFarmReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getSon\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getSonAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getSonStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTEAMLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTEAMStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBuyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFarmEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFarmAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FILYMaster", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8c286b7145863944f23cb5e8498f86eeecb5fe017966410c2a15afefc27ae5e1"}