{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Marketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.19;\\n\\nimport \\\"./SellMarket.sol\\\";\\nimport \\\"./BuyMarket.sol\\\";\\nimport {Fee} from \\\"./Fee.sol\\\";\\n\\ncontract Marketplace is Fee, SellMarket, BuyMarket {\\n    mapping(address => uint256) public lastTimeListItem;\\n\\n    constructor(address _u) Owned(msg.sender) Fee(_u) {}\\n\\n    function listItem(address _token, uint256 _amount, uint256 _price, bool _sell)\\n        external\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        require(_amount > 0, \\\"_amount>0\\\");\\n        require(_price > 0, \\\"_price>0\\\");\\n\\n        require((lastTimeListItem[msg.sender] + 5 seconds) <= block.timestamp, \\\"5m\\\");\\n        lastTimeListItem[msg.sender] = block.timestamp;\\n\\n        if (_sell) {\\n            return listSell(_token, _amount, _price);\\n        } else {\\n            return listBuy(_token, _amount, _price);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/SellMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.19;\\n\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\nimport {Fee} from \\\"./Fee.sol\\\";\\nimport {Pausable} from \\\"./Pausable.sol\\\";\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\nabstract contract SellMarket is Pausable, Fee {\\n    struct ListingSell {\\n        address token;\\n        uint256 price;\\n        address seller;\\n        uint256 amount;\\n        uint256 index;\\n    }\\n\\n    event SellItemListed(address indexed seller, address indexed token, uint256 amount, uint256 price);\\n    event SellItemCanceled(address indexed seller, uint256 id, uint256 amount);\\n    event ItemBuy(address indexed buyer, uint256 id, uint256 amount);\\n\\n    ListingSell[] public sellItems;\\n\\n    function listSell(address _token, uint256 _amount, uint256 _price) internal returns (uint256 id) {\\n        uint256 i = sellItems.length;\\n\\n        ListingSell memory order;\\n        order.token = _token;\\n        order.seller = msg.sender;\\n        order.amount = _amount;\\n        order.price = _price;\\n        order.index = i;\\n\\n        sellItems.push(order);\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        emit SellItemListed(msg.sender, _token, _amount, _price);\\n        return i;\\n    }\\n\\n    function canceSelllListing(uint256 id) external whenNotPaused {\\n        ListingSell memory delItem = sellItems[id];\\n        require(msg.sender == delItem.seller, \\\"not seller\\\");\\n        require(delItem.amount > 0, \\\">0\\\");\\n\\n        uint256 length = sellItems.length;\\n        ListingSell storage lastOne = sellItems[length - 1];\\n        sellItems[id] = lastOne;\\n        sellItems.pop();\\n\\n        IERC20(delItem.token).transfer(msg.sender, delItem.amount);\\n        emit SellItemCanceled(msg.sender, id, delItem.amount);\\n    }\\n\\n    function buyItem(uint256 id, uint256 _amount) external whenNotPaused {\\n        require(_amount > 0, \\\">0\\\");\\n        ListingSell storage listedItem = sellItems[id];\\n\\n        listedItem.amount -= _amount;\\n\\n        IERC20(listedItem.token).transfer(msg.sender, _amount);\\n\\n        uint256 uamount = _amount * listedItem.price / 10_000;\\n        IERC20(IERC20(usdt)).transferFrom(msg.sender, address(this), uamount);\\n        uint256 fee = uamount * feeRate / 10000;\\n        IERC20(usdt).transfer(Fund, fee);\\n        IERC20(usdt).transfer(listedItem.seller, uamount - fee);\\n\\n        emit ItemBuy(msg.sender, listedItem.index, _amount);\\n    }\\n\\n    function cleanSelllListing(uint256 id) external whenNotPaused {\\n        require(sellItems[id].amount == 0, \\\"=0\\\");\\n\\n        uint256 length = sellItems.length;\\n        ListingSell storage lastOne = sellItems[length - 1];\\n        sellItems[id] = lastOne;\\n        sellItems.pop();\\n    }\\n\\n    function allSellItems() external view returns (ListingSell[] memory) {\\n        uint256 length = sellItems.length;\\n        ListingSell[] memory nitem = new ListingSell[](length);\\n        for (uint256 i = 1; i < length; i++) {\\n            nitem[i] = sellItems[i];\\n        }\\n        return nitem;\\n    }\\n\\n    function allSellItemsWithLength(uint256 start, uint256 end) external view returns (ListingSell[] memory) {\\n        ListingSell[] memory nitem = new ListingSell[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            nitem[i] = sellItems[i];\\n        }\\n        return nitem;\\n    }\\n\\n    function sellItemCount() public view returns (uint256 length) {\\n        length = sellItems.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/BuyMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.19;\\n\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\nimport {Fee} from \\\"./Fee.sol\\\";\\nimport {Pausable} from \\\"./Pausable.sol\\\";\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\nabstract contract BuyMarket is Pausable, Fee {\\n    struct ListingBuy {\\n        address token;\\n        uint256 price;\\n        address buyer;\\n        uint256 amount;\\n        uint256 index;\\n    }\\n\\n    event BuyItemListed(address indexed buyer, address indexed token, uint256 amount, uint256 price);\\n    event BuyItemCanceled(address indexed buyer, uint256 id, uint256 amount);\\n    event ItemSell(address indexed seller, uint256 id, uint256 amount);\\n\\n    ListingBuy[] public buyItems;\\n\\n    function listBuy(address _token, uint256 _amount, uint256 _price) internal returns (uint256 id) {\\n        uint256 i = buyItems.length;\\n\\n        ListingBuy memory order;\\n        order.token = _token;\\n        order.buyer = msg.sender;\\n        order.amount = _amount;\\n        order.price = _price;\\n        order.index = i;\\n\\n        buyItems.push(order);\\n        IERC20(usdt).transferFrom(msg.sender, address(this), _amount * _price / 10_000);\\n        emit BuyItemListed(msg.sender, _token, _amount, _price);\\n        return i;\\n    }\\n\\n    function canceBuylListing(uint256 id) external whenNotPaused {\\n        ListingBuy memory delItem = buyItems[id];\\n        require(msg.sender == delItem.buyer, \\\"not Buyer\\\");\\n        require(delItem.amount > 0, \\\">0\\\");\\n\\n        uint256 length = buyItems.length;\\n        ListingBuy storage lastOne = buyItems[length - 1];\\n        buyItems[id] = lastOne;\\n        buyItems.pop();\\n\\n        uint256 returnUSD = delItem.amount * delItem.price / 10_000;\\n        IERC20(usdt).transfer(msg.sender, returnUSD);\\n        emit BuyItemCanceled(msg.sender, id, returnUSD);\\n    }\\n\\n    function sellItem(uint256 id, uint256 _amount) external whenNotPaused {\\n        require(_amount > 0, \\\">0\\\");\\n        ListingBuy storage listedItem = buyItems[id];\\n\\n        listedItem.amount -= _amount;\\n\\n        uint256 uamount = _amount * listedItem.price / 10_000;\\n        uint256 fee = uamount * feeRate / 10000;\\n        IERC20(usdt).transfer(Fund, fee);\\n        IERC20(usdt).transfer(msg.sender, uamount - fee);\\n\\n        IERC20(listedItem.token).transferFrom(msg.sender, listedItem.buyer, _amount);\\n\\n        emit ItemSell(msg.sender, listedItem.index, _amount);\\n    }\\n\\n    function cleanBuylListing(uint256 id) external whenNotPaused {\\n        require(buyItems[id].amount == 0, \\\"=0\\\");\\n\\n        uint256 length = buyItems.length;\\n        ListingBuy storage lastOne = buyItems[length - 1];\\n        buyItems[id] = lastOne;\\n        buyItems.pop();\\n    }\\n\\n    function allbuyItems() external view returns (ListingBuy[] memory) {\\n        uint256 length = buyItems.length;\\n        ListingBuy[] memory nitem = new ListingBuy[](length);\\n        for (uint256 i = 1; i < length; i++) {\\n            nitem[i] = buyItems[i];\\n        }\\n        return nitem;\\n    }\\n\\n    function allbuyItemsWithLength(uint256 start, uint256 end) external view returns (ListingBuy[] memory) {\\n        ListingBuy[] memory nitem = new ListingBuy[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            nitem[i] = buyItems[i];\\n        }\\n        return nitem;\\n    }\\n\\n    function buyItemCount() public view returns (uint256 length) {\\n        length = buyItems.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Fee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.19;\\n\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\n\\nabstract contract Fee is Owned {\\n    uint256 public feeRate = 500;\\n    address immutable usdt;\\n\\n    constructor(address _u) {\\n        usdt = _u;\\n    }\\n\\n    function setFeeRate(uint256 _feeRate) external onlyOwner {\\n        require(_feeRate <= 10_000, \\\"<=10_000\\\");\\n        feeRate = _feeRate;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.19;\\n\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\n\\nabstract contract Pausable is Owned {\\n    bool public paused;\\n\\n    error ExpectedPause();\\n\\n    modifier whenNotPaused() {\\n        require(!paused || msg.sender == owner, \\\"paused\\\");\\n        _;\\n    }\\n\\n    function pause() external onlyOwner {\\n        paused = true;\\n    }\\n\\n    function unpause() external onlyOwner {\\n        paused = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.19;\\n\\naddress constant Fund = 0xFCC6Bb27D1c0B5e79A25e84E208864458936fEB2;\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_u\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BuyItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SellItemListed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allSellItems\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct SellMarket.ListingSell[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"allSellItemsWithLength\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct SellMarket.ListingSell[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allbuyItems\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct BuyMarket.ListingBuy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"allbuyItemsWithLength\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct BuyMarket.ListingBuy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyItemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyItems\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"canceBuylListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"canceSelllListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cleanBuylListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cleanSelllListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTimeListItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_sell\",\"type\":\"bool\"}],\"name\":\"listItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellItemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellItems\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}