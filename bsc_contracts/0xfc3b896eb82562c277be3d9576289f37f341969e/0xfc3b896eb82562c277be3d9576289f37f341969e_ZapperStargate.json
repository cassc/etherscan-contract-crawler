{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.12;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IStargateRouter {\r\n    function addLiquidity(\r\n        uint256 _poolId,\r\n        uint256 _amountLD,\r\n        address _to\r\n    ) external;\r\n\r\n    function instantRedeemLocal(\r\n        uint16 _srcPoolId,\r\n        uint256 _amountLP,\r\n        address _to\r\n    ) external returns (uint256 amountSD);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IStargateChef {\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n\r\n    function pendingStargate(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of STGs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accStargatePerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accStargatePerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    function userInfo(uint256 _pid, address _userAddress)\r\n        external\r\n        view\r\n        returns (UserInfo memory _userInfo);\r\n\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. STGs to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that STGs distribution occurs.\r\n        uint256 accStargatePerShare; // Accumulated STGs per share, times 1e12. See below.\r\n    }\r\n\r\n    function poolInfo(uint256 _index)\r\n        external\r\n        view\r\n        returns (PoolInfo memory _poolInfo);\r\n}\r\n\r\ninterface IStargatePool {\r\n  function totalLiquidity() external view returns (uint256);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IVaultRegistry {\r\n    function isVault(address _vault) external view returns (bool);\r\n}\r\n\r\ninterface IStrategy {\r\n  function balanceOfPool() external view returns (uint256);\r\n\r\n  function balanceOfWant() external view returns (uint256);\r\n\r\n  function totalAssets() external view returns (uint256);\r\n\r\n  function deposit() external;\r\n\r\n  function withdraw(uint256 _amount) external;\r\n\r\n  function want() external returns (address want);\r\n\r\n  function retire() external;\r\n\r\n  function unirouter() external view returns (address); // ONLY FOR DUALSIDEDS!\r\n\r\n  function publicHarvest() external view returns (bool);\r\n}\r\n\r\ninterface IVault is IERC20 {\r\n  function deposit(uint256 _amount) external returns (uint256 sharesMinted);\r\n\r\n  function withdraw(uint256 _shares) external returns (uint256 wantWithdrawn);\r\n\r\n  function want() external view returns (IERC20 _want);\r\n\r\n  function strategy() external view returns (IStrategy strategy);\r\n\r\n  function approve(address _spender, uint256 _amount) external returns (bool);\r\n\r\n  function balanceOf(address _user) external view returns (uint256);\r\n\r\n  function balance() external view returns (uint256);\r\n\r\n  function setNewStrategy(address _newStrategy) external;\r\n\r\n  function available() external returns (uint256);\r\n\r\n  function getPricePerFullShare() external returns (uint256);\r\n\r\n  function initializeVault(\r\n    IStrategy _strategy,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    address _zapper,\r\n    IERC20 _want,\r\n    address owner_\r\n  ) external;\r\n}\r\n\r\ninterface ILocker {\r\n  function getTier(address user) external view returns (uint256);\r\n}\r\n\r\nlibrary Checks {\r\n  function validateAmount(uint256 amount) internal pure {\r\n    require(amount != 0, \"Zero amount\");\r\n  }\r\n\r\n  function validateAddress(address _address) internal pure {\r\n    require(_address != address(0), \"Zero address\");\r\n  }\r\n\r\n  function validateWantOrNot(address want, address isWant) internal pure {\r\n    require(want == isWant, \"Given address is not want\");\r\n  }\r\n}\r\n\r\nabstract contract BaseZapper is Ownable, Pausable {\r\n  using Checks for *;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // Constants and immutables //\r\n  uint256 internal constant DEPOSIT_FEE_CAP = 100000; // 10%\r\n\r\n  uint256 internal constant FEE_DENOMINATOR = 1_000_000;\r\n\r\n  ILocker public immutable locker;\r\n\r\n  // Storage variables //\r\n\r\n  // Vault registry for validating vaults\r\n  IVaultRegistry public vaultRegistry;\r\n\r\n  // Default deposit fee, it can be set by governance later\r\n  uint256 public defaultDepositFee = 100; // denominated by 1_000_000, 0.01%\r\n\r\n  // Smart wallet contract that will take the fee on user deposits\r\n  address public smartWallet;\r\n\r\n  // Tier ==> deposit fee (1 silver, 2 gold)\r\n  mapping(uint256 => uint256) public tierDepositFees;\r\n\r\n  event DepositFeesUpdated(\r\n    uint256 newDefaultDepositFee,\r\n    uint256 newSilverDepositFee,\r\n    uint256 newGoldDepositFee\r\n  );\r\n  event SmartWalletUpdated(address newSmartWallet);\r\n  event FeeTaken(address from, address token, uint256 amount);\r\n\r\n  constructor(\r\n    address _vaultRegistry,\r\n    address _smartWallet,\r\n    address _locker\r\n  ) {\r\n    _locker.validateAddress();\r\n    _vaultRegistry.validateAddress();\r\n    _smartWallet.validateAddress();\r\n\r\n    locker = ILocker(_locker);\r\n    vaultRegistry = IVaultRegistry(_vaultRegistry);\r\n    smartWallet = _smartWallet;\r\n  }\r\n\r\n  // ================== Fee and smart wallet functions ==================\r\n  function setFees(\r\n    uint256 _defaultDepositFee,\r\n    uint256 _silverTierDepositFee,\r\n    uint256 _goldTierDepositFee\r\n  ) external onlyOwner {\r\n    require(\r\n      _defaultDepositFee <= DEPOSIT_FEE_CAP &&\r\n        _silverTierDepositFee <= DEPOSIT_FEE_CAP &&\r\n        _goldTierDepositFee <= DEPOSIT_FEE_CAP,\r\n      \"DEPOSIT_FEE_CAP\"\r\n    );\r\n\r\n    defaultDepositFee = _defaultDepositFee;\r\n\r\n    tierDepositFees[1] = _silverTierDepositFee;\r\n    tierDepositFees[2] = _goldTierDepositFee;\r\n\r\n    emit DepositFeesUpdated(\r\n      _defaultDepositFee,\r\n      _silverTierDepositFee,\r\n      _goldTierDepositFee\r\n    );\r\n  }\r\n\r\n  function setNewSmartWallet(address _smartWallet) external onlyOwner {\r\n    _smartWallet.validateAddress();\r\n\r\n    smartWallet = _smartWallet;\r\n    emit SmartWalletUpdated(_smartWallet);\r\n  }\r\n\r\n  // ================== Internal check for a vault legicimacy ==================\r\n  function validateVault(address vault) internal view {\r\n    require(vaultRegistry.isVault(vault), \"Invalid vault\");\r\n  }\r\n\r\n  // ================== Emergency pause functions to use in zappers ==================\r\n  function pause() external onlyOwner {\r\n    _pause();\r\n  }\r\n\r\n  function unpause() external onlyOwner {\r\n    _unpause();\r\n  }\r\n\r\n  // ================== Popular functions to use in zappers ==================\r\n  function _safeTransfer(address token, uint256 amount) internal {\r\n    amount.validateAmount();\r\n    IERC20(token).safeTransfer(msg.sender, amount);\r\n  }\r\n\r\n  function _approveToken(\r\n    address token,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal {\r\n    IERC20(token).safeApprove(spender, 0);\r\n    IERC20(token).safeApprove(spender, amount);\r\n  }\r\n\r\n  // If the fee taking process is different than implemented here, override this function\r\n  function _takeFee(address token, uint256 fullAmount)\r\n    internal\r\n    virtual\r\n    returns (uint256)\r\n  {\r\n    // get the tier of the user from locker\r\n    // 1 silver, 2 gold, rest is bronze\r\n    uint256 userTier = locker.getTier(msg.sender);\r\n\r\n    uint256 discountedFee;\r\n    if (userTier != 1 && userTier != 2) {\r\n      // user is either bronze or does not have a lock\r\n      discountedFee = defaultDepositFee;\r\n    } else {\r\n      discountedFee = tierDepositFees[userTier];\r\n    }\r\n\r\n    uint256 feeTaken = (fullAmount * discountedFee) / FEE_DENOMINATOR;\r\n\r\n    // due to math roundings on small amounts fee can be 0\r\n    if (feeTaken == 0) {\r\n      emit FeeTaken(msg.sender, token, 0);\r\n      return 0;\r\n    }\r\n\r\n    // funds are already taken from user to address(this) let's send the fee to smart wallet\r\n    IERC20(token).safeTransfer(smartWallet, feeTaken);\r\n    emit FeeTaken(msg.sender, token, feeTaken);\r\n\r\n    return feeTaken;\r\n  }\r\n}\r\n\r\ncontract ZapperStargate is BaseZapper, ReentrancyGuard {\r\n  using SafeERC20 for IERC20;\r\n  using Checks for *;\r\n\r\n  IStargateRouter private constant stargateRouter =\r\n    IStargateRouter(0x4a364f8c717cAAD9A442737Eb7b8A55cc6cf18D8);\r\n  IStargateChef private constant stargateChef =\r\n    IStargateChef(0x3052A0F6ab15b4AE1df39962d5DdEFacA86DaB47);\r\n  address private constant sBUSD = 0x98a5737749490856b401DB5Dc27F522fC314A4e1; // pool => 5   chef => 1\r\n  address private constant sUSDT = 0x9aA83081AA06AF7208Dcc7A4cB72C94d057D2cda; // pool => 2    chef => 0\r\n  address private constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n  address private constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n  struct AssetInfo {\r\n    address lpToken;\r\n    uint16 poolId;\r\n    uint256 chefId;\r\n  }\r\n  // stargate might add new assets to their protocol and we give important allowances to\r\n  // this contract. So ideally, we should not deploy new one. We should be making this\r\n  // as flexible as we can. This mapping will save us hopefully!\r\n  mapping(address => AssetInfo) public underlyingAssets;\r\n\r\n  event ZappedIn(address sender, address vault, uint256 sharesZappedIn);\r\n  event ZappedOut(address sender, address vault, uint256 sharesZappedOut);\r\n  event PoolAdded(address _pool);\r\n  event PoolDeleted(address _pool);\r\n\r\n  constructor(\r\n    address _vaultRegistry,\r\n    address _smartWallet,\r\n    address _locker\r\n  ) BaseZapper(_vaultRegistry, _smartWallet, _locker) {\r\n    underlyingAssets[BUSD] = AssetInfo(sBUSD, 5, 1);\r\n    underlyingAssets[USDT] = AssetInfo(sUSDT, 2, 0);\r\n\r\n    // default values\r\n    tierDepositFees[1] = 50; // 0.0050%\r\n    tierDepositFees[2] = 25; // 0.0025%\r\n  }\r\n\r\n  function _addLiquidityToStargate(\r\n    address _fromToken,\r\n    uint256 _amount,\r\n    AssetInfo memory _assetInfo\r\n  ) internal returns (uint256) {\r\n    _approveToken(_fromToken, address(stargateRouter), _amount);\r\n\r\n    uint256 _balance = IERC20(_assetInfo.lpToken).balanceOf(address(this));\r\n    stargateRouter.addLiquidity(\r\n      uint256(_assetInfo.poolId),\r\n      _amount,\r\n      address(this)\r\n    );\r\n    _balance = IERC20(_assetInfo.lpToken).balanceOf(address(this)) - _balance;\r\n    _balance.validateAmount();\r\n    return _balance;\r\n  }\r\n\r\n  function _removeLiquidityFromStargate(\r\n    address _toToken,\r\n    uint256 _amount,\r\n    AssetInfo memory _assetInfo\r\n  ) internal returns (uint256) {\r\n    _approveToken(_assetInfo.lpToken, address(stargateRouter), _amount);\r\n    uint256 _redeemed = IERC20(_toToken).balanceOf(address(this));\r\n    // this returns something different so we use old school way\r\n    // check before and after\r\n    stargateRouter.instantRedeemLocal(\r\n      _assetInfo.poolId,\r\n      _amount,\r\n      address(this)\r\n    );\r\n    _redeemed = IERC20(_toToken).balanceOf(address(this)) - _redeemed;\r\n    _redeemed.validateAmount();\r\n    return _redeemed;\r\n  }\r\n\r\n  function zapIn(\r\n    address _fromToken,\r\n    address _vault,\r\n    uint256 _fromTokenAmount\r\n  ) external whenNotPaused nonReentrant returns (uint256 _sharesZapped) {\r\n    validateVault(_vault);\r\n    _fromTokenAmount.validateAmount();\r\n    require(\r\n      underlyingAssets[_fromToken].lpToken != address(0),\r\n      \"WRONG_FROM_TOKEN\"\r\n    );\r\n\r\n    IERC20(_fromToken).safeTransferFrom(\r\n      msg.sender,\r\n      address(this),\r\n      _fromTokenAmount\r\n    );\r\n\r\n    uint256 fee = _takeFee(_fromToken, _fromTokenAmount);\r\n    _fromTokenAmount = _fromTokenAmount - fee;\r\n    _fromTokenAmount.validateAmount();\r\n\r\n    AssetInfo memory _assetInfo = underlyingAssets[_fromToken];\r\n\r\n    uint256 _lpReceived;\r\n    if (_fromToken == _assetInfo.lpToken) {\r\n      _lpReceived = _fromTokenAmount;\r\n    } else {\r\n      _lpReceived = _addLiquidityToStargate(\r\n        _fromToken,\r\n        _fromTokenAmount,\r\n        _assetInfo\r\n      );\r\n    }\r\n\r\n    _approveToken(_assetInfo.lpToken, _vault, _lpReceived);\r\n    _sharesZapped = IVault(_vault).deposit(_lpReceived);\r\n    _safeTransfer(_vault, _sharesZapped);\r\n\r\n    emit ZappedIn(msg.sender, _vault, _sharesZapped);\r\n  }\r\n\r\n  function zapOut(\r\n    address _toToken,\r\n    address _vault,\r\n    uint256 _sharesAmount\r\n  ) external nonReentrant returns (uint256 _toTokenSent) {\r\n    validateVault(_vault);\r\n    _sharesAmount.validateAmount();\r\n    require(underlyingAssets[_toToken].lpToken != address(0), \"WRONG_TO_TOKEN\");\r\n\r\n    IERC20(_vault).safeTransferFrom(msg.sender, address(this), _sharesAmount);\r\n\r\n    uint256 _lpReceived = IVault(_vault).withdraw(_sharesAmount);\r\n    _lpReceived.validateAmount();\r\n\r\n    AssetInfo memory _assetInfo = underlyingAssets[_toToken];\r\n\r\n    if (_toToken == _assetInfo.lpToken) {\r\n      _toTokenSent = _lpReceived;\r\n    } else {\r\n      uint256 should = calculateWithdrawal(\r\n        _lpReceived,\r\n        underlyingAssets[_toToken].lpToken\r\n      );\r\n      _toTokenSent = _removeLiquidityFromStargate(\r\n        _toToken,\r\n        _lpReceived,\r\n        _assetInfo\r\n      );\r\n      // if user gets lesser than the normal withdrawal then revert\r\n      // User can always zap out to LP token\r\n      require(should <= _toTokenSent, \"Stargate is not liquid\");\r\n    }\r\n\r\n    _safeTransfer(_toToken, _toTokenSent);\r\n\r\n    emit ZappedOut(msg.sender, _vault, _sharesAmount);\r\n  }\r\n\r\n  // @dev This is the amount the user should receive considering pool is liquid\r\n  function calculateWithdrawal(uint256 amount, address lpToken)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    IStargatePool _lpToken = IStargatePool(lpToken);\r\n\r\n    return ((amount * _lpToken.totalLiquidity()) / _lpToken.totalSupply()) - 1;\r\n  }\r\n\r\n  function deletePool(address _token) external onlyOwner {\r\n    delete underlyingAssets[_token];\r\n    emit PoolDeleted(_token);\r\n  }\r\n\r\n  function addNewPool(address _token, AssetInfo memory _assetInfo)\r\n    external\r\n    onlyOwner\r\n  {\r\n    underlyingAssets[_token] = _assetInfo;\r\n    emit PoolAdded(_token);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDefaultDepositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSilverDepositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGoldDepositFee\",\"type\":\"uint256\"}],\"name\":\"DepositFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"PoolDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSmartWallet\",\"type\":\"address\"}],\"name\":\"SmartWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesZappedIn\",\"type\":\"uint256\"}],\"name\":\"ZappedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesZappedOut\",\"type\":\"uint256\"}],\"name\":\"ZappedOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"chefId\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperStargate.AssetInfo\",\"name\":\"_assetInfo\",\"type\":\"tuple\"}],\"name\":\"addNewPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"calculateWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deletePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"contract ILocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultDepositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_silverTierDepositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goldTierDepositFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartWallet\",\"type\":\"address\"}],\"name\":\"setNewSmartWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierDepositFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"chefId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRegistry\",\"outputs\":[{\"internalType\":\"contract IVaultRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTokenAmount\",\"type\":\"uint256\"}],\"name\":\"zapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesZapped\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_toTokenSent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZapperStargate", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000007747632361be5514e8da05469d9ea1dc24c1da3000000000000000000000000ab9ae9dbaab892552ab2f12a1e3a2d92d2e4f24500000000000000000000000031401ff5563c5ea19b9584583194617f613222cd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://82c88fd71e787dad1e44a4fe26b308292031070063e242383ce492627a0a42ec"}