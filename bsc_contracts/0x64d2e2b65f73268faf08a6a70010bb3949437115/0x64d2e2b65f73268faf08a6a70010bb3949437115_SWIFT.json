{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-11-04\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface BEP20 {\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    address internal potentialOwner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    event Authorize_Wallet(address Wallet, bool Status);\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    function authorize(address adr) external onlyOwner {\r\n        authorizations[adr] = true;\r\n        emit Authorize_Wallet(adr,true);\r\n    }\r\n\r\n    function unauthorize(address adr) external onlyOwner {\r\n        require(adr != owner, \"OWNER cant be unauthorized\");\r\n        authorizations[adr] = false;\r\n        emit Authorize_Wallet(adr,false);\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) external onlyOwner {\r\n        require(adr != owner, \"Already the owner\");\r\n        require(adr != address(0), \"Can not be zero address.\");\r\n        potentialOwner = adr;\r\n        emit OwnershipNominated(adr);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == potentialOwner, \"You must be nominated as potential owner before you can accept the role.\");\r\n        authorizations[owner] = false;\r\n        authorizations[potentialOwner] = true;\r\n\r\n        emit Authorize_Wallet(owner,false);\r\n        emit Authorize_Wallet(potentialOwner,true);\r\n        \r\n        owner = potentialOwner;\r\n        potentialOwner = address(0);\r\n        emit OwnershipTransferred(owner);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n    event OwnershipNominated(address potentialOwner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract SWIFT is BEP20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address immutable WBNB;\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string public constant name = \"SwiftCo\";\r\n    string public constant symbol = \"SWIFT\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant totalSupply = 100000000 * 10**decimals;\r\n\r\n    uint256 public _maxTxAmount = (totalSupply / 10000) * 3;\r\n    uint256 public _maxWalletToken = (totalSupply / 10000) * 3;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n\r\n    uint256 public liquidityFee = 10;\r\n    uint256 public marketingFee = 20;\r\n    uint256 public developmentFee = 20;\r\n    uint256 public totalFee = marketingFee + liquidityFee +  developmentFee;\r\n    uint256 public constant feeDenominator = 1000;\r\n\r\n    uint256 sellMultiplier = 120;\r\n    uint256 buyMultiplier = 100;\r\n    uint256 transferMultiplier = 120;\r\n\r\n    address public marketingFeeReceiver = 0x17572eFB4f6fF0EfbFc3526845ef7e26BC296b5c;\r\n    address public developmentFeeReceiver = 0x17572eFB4f6fF0EfbFc3526845ef7e26BC296b5c;\r\n\r\n    IDEXRouter public router;\r\n    address public immutable pair;\r\n\r\n    bool public tradingOpen = false;\r\n    bool public launchMode = true;\r\n\r\n    bool public swapEnabled = false;\r\n    uint256 public swapThreshold = totalSupply / 500;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        WBNB = router.WETH();\r\n\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[DEAD] = true;\r\n        isTxLimitExempt[ZERO] = true;\r\n\r\n        isWalletLimitExempt[msg.sender] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        isWalletLimitExempt[DEAD] = true;\r\n\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function setMaxWalletPercent_base1000(uint256 maxWallPercent_base1000) external onlyOwner {\r\n        require(maxWallPercent_base1000 >= 1,\"Cannot set max wallet less than 0.1%\");\r\n        _maxWalletToken = (totalSupply * maxWallPercent_base1000 ) / 1000;\r\n        emit config_MaxWallet(_maxWalletToken);\r\n    }\r\n    function setMaxTxPercent_base1000(uint256 maxTXPercentage_base1000) external onlyOwner {\r\n        require(maxTXPercentage_base1000 >= 1,\"Cannot set max transaction less than 0.1%\");\r\n        _maxTxAmount = (totalSupply * maxTXPercentage_base1000 ) / 1000;\r\n        emit config_MaxTransaction(_maxTxAmount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(!_isBlacklisted[sender] && !_isBlacklisted[recipient], \"Blacklisted address\");\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(!authorizations[sender] && !authorizations[recipient]){\r\n            require(tradingOpen,\"Trading not open yet\");\r\n        }\r\n\r\n        if (!authorizations[sender] && !isWalletLimitExempt[sender] && !isWalletLimitExempt[recipient] && recipient != pair) {\r\n            require((balanceOf[recipient] + amount) <= _maxWalletToken,\"max wallet limit reached\");\r\n        }\r\n    \r\n        // Checks max transaction limit\r\n        require((amount <= _maxTxAmount) || isTxLimitExempt[sender] || isTxLimitExempt[recipient], \"Max TX Limit Exceeded\");\r\n\r\n        if(shouldSwapBack()){ swapBack(); }\r\n\r\n        balanceOf[sender] = balanceOf[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = (isFeeExempt[sender] || isFeeExempt[recipient]) ? amount : takeFee(sender, amount, recipient);\r\n\r\n        balanceOf[recipient] = balanceOf[recipient].add(amountReceived);\r\n\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        balanceOf[sender] = balanceOf[sender].sub(amount, \"Insufficient Balance\");\r\n        balanceOf[recipient] = balanceOf[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount, address recipient) internal returns (uint256) {\r\n        if(amount == 0 || totalFee == 0){\r\n            return amount;\r\n        }\r\n\r\n        uint256 multiplier = transferMultiplier;\r\n\r\n        if(recipient == pair) {\r\n            multiplier = sellMultiplier;\r\n        } else if(sender == pair) {\r\n            multiplier = buyMultiplier;\r\n        }\r\n\r\n        uint256 feeAmount = amount.mul(totalFee).mul(multiplier).div(feeDenominator * 100);\r\n\r\n        if(feeAmount > 0){\r\n            balanceOf[address(this)] = balanceOf[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && balanceOf[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage) external onlyOwner {\r\n        require(amountPercentage < 101, \"Max 100%\");\r\n        uint256 amountBNB = address(this).balance;\r\n        uint256 amountToClear = ( amountBNB * amountPercentage ) / 100;\r\n        payable(msg.sender).transfer(amountToClear);\r\n        emit BalanceClear(amountToClear);\r\n    }\r\n\r\n    function clearStuckToken(address tokenAddress, uint256 tokens) external onlyOwner returns (bool success) {\r\n        require(tokenAddress != address(this), \"tokenAddress can not be the native token\");\r\n\r\n        if(tokens == 0){\r\n            tokens = BEP20(tokenAddress).balanceOf(address(this));\r\n        }\r\n\r\n        emit clearToken(tokenAddress, tokens);\r\n\r\n        return BEP20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    // switch Trading\r\n    function tradingStatus(bool _status) external onlyOwner {\r\n        if(!_status){\r\n            require(launchMode,\"Cannot stop trading after launch is done\");\r\n        }\r\n        tradingOpen = _status;\r\n        emit config_TradingStatus(tradingOpen);\r\n    }\r\n\r\n    function tradingStatus_launchmode(uint256 confirm) external onlyOwner {\r\n        require(confirm == 123123,\"Accidental Press\");\r\n        require(tradingOpen,\"Cant close launch mode when trading is disabled\");\r\n        launchMode = false;\r\n        emit config_LaunchMode(launchMode);\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n\r\n        uint256 totalBNBFee = totalFee;\r\n\r\n        uint256 amountToLiquify = (swapThreshold * liquidityFee)/(totalBNBFee * 2);\r\n        uint256 amountToSwap = swapThreshold - amountToLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance;\r\n\r\n         totalBNBFee = totalBNBFee - (liquidityFee / 2);\r\n        \r\n        uint256 amountBNBLiquidity = (amountBNB * liquidityFee) / (totalBNBFee * 2);\r\n        uint256 amountBNBMarketing = (amountBNB * marketingFee) / totalBNBFee;\r\n        uint256 amountBNBDevelopment = (amountBNB * developmentFee) / totalBNBFee;\r\n\r\n        payable(marketingFeeReceiver).transfer(amountBNBMarketing);\r\n        payable(developmentFeeReceiver).transfer(amountBNBDevelopment);\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n    function manage_FeeExempt(address[] calldata addresses, bool status) external authorized {\r\n        require(addresses.length < 501,\"GAS Error: max limit is 500 addresses\");\r\n        for (uint256 i=0; i < addresses.length; ++i) {\r\n            isFeeExempt[addresses[i]] = status;\r\n            emit Wallet_feeExempt(addresses[i], status);\r\n        }\r\n    }\r\n\r\n    function manage_TxLimitExempt(address[] calldata addresses, bool status) external authorized {\r\n        require(addresses.length < 501,\"GAS Error: max limit is 500 addresses\");\r\n        for (uint256 i=0; i < addresses.length; ++i) {\r\n            isTxLimitExempt[addresses[i]] = status;\r\n            emit Wallet_txExempt(addresses[i], status);\r\n        }\r\n    }\r\n\r\n    function manage_WalletLimitExempt(address[] calldata addresses, bool status) external authorized {\r\n        require(addresses.length < 501,\"GAS Error: max limit is 500 addresses\");\r\n        for (uint256 i=0; i < addresses.length; ++i) {\r\n            isWalletLimitExempt[addresses[i]] = status;\r\n            emit Wallet_holdingExempt(addresses[i], status);\r\n        }\r\n    }\r\n\r\n    function update_fees() internal {\r\n        if(!launchMode){\r\n            require(totalFee.mul(buyMultiplier).div(100) <= 100, \"Buy tax cannot be more than 10%\");\r\n            require(totalFee.mul(sellMultiplier).div(100) <= 150, \"Sell tax cannot be more than 15%\");\r\n            require(totalFee.mul(transferMultiplier).div(100) <= 100, \"Transfer Tax cannot be more than 10%\");    \r\n        }\r\n\r\n        emit UpdateFee( uint8(totalFee.mul(buyMultiplier).div(100)),\r\n            uint8(totalFee.mul(sellMultiplier).div(100)),\r\n            uint8(totalFee.mul(transferMultiplier).div(100))\r\n            );\r\n    }\r\n\r\n    function setMultipliers(uint256 _buy, uint256 _sell, uint256 _trans) external authorized {\r\n        sellMultiplier = _sell;\r\n        buyMultiplier = _buy;\r\n        transferMultiplier = _trans;\r\n\r\n        update_fees();\r\n    }\r\n\r\n    function setFees_base1000(uint256 _liquidityFee,  uint256 _marketingFee,  uint256 _developmentFee) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        developmentFee = _developmentFee;\r\n        totalFee = _liquidityFee + _marketingFee  + _developmentFee;\r\n        \r\n        update_fees();\r\n    } \r\n\r\n    function setFeeReceivers(address _marketingFeeReceiver,  address _developmentFeeReceiver) external onlyOwner {\r\n        require(_marketingFeeReceiver != address(0),\"Marketing fee address cannot be zero address\");\r\n        require(_developmentFeeReceiver != address(0),\"Development fee address cannot be zero address\");\r\n\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        developmentFeeReceiver = _developmentFeeReceiver;\r\n\r\n        emit Set_Wallets(marketingFeeReceiver,  developmentFeeReceiver);\r\n    }\r\n\r\n    function blacklistAddress(address account, bool value) external onlyOwner{\r\n        _isBlacklisted[account] = value;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        require(_amount < (totalSupply/10), \"Amount too high\");\r\n\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n\r\n        emit config_SwapSettings(swapThreshold, swapEnabled);\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (totalSupply - balanceOf[DEAD] - balanceOf[ZERO]);\r\n    }\r\n\r\n\r\nfunction multiTransfer(address from, address[] calldata addresses, uint256[] calldata tokens) external authorized {\r\n    if(msg.sender != from){\r\n        require(launchMode,\"Cannot execute this after launch is done\");\r\n    }\r\n\r\n    require(addresses.length < 501,\"GAS Error: max limit is 500 addresses\");\r\n    require(addresses.length == tokens.length,\"Mismatch between address and token count\");\r\n\r\n    uint256 SCCC = 0;\r\n\r\n    for(uint i=0; i < addresses.length; i++){\r\n        SCCC = SCCC + tokens[i];\r\n    }\r\n\r\n    require(balanceOf[from] >= SCCC, \"Not enough tokens in wallet\");\r\n\r\n    for(uint i=0; i < addresses.length; i++){\r\n        _basicTransfer(from,addresses[i],tokens[i]);\r\n    }\r\n}\r\n\r\nevent AutoLiquify(uint256 amountBNB, uint256 amountTokens);\r\nevent UpdateFee(uint8 Buy, uint8 Sell, uint8 Transfer);\r\nmapping(address => bool) public _isBlacklisted;\r\nevent Wallet_feeExempt(address Wallet, bool Status);\r\nevent Wallet_txExempt(address Wallet, bool Status);\r\nevent Wallet_holdingExempt(address Wallet, bool Status);\r\n\r\nevent BalanceClear(uint256 amount);\r\nevent clearToken(address TokenAddressCleared, uint256 Amount);\r\n\r\nevent Set_Wallets(address MarketingWallet,  address DevelopmentWallet);\r\nevent Set_Wallets_Dev(address DevWallet);\r\n\r\nevent config_MaxWallet(uint256 maxWallet);\r\nevent config_MaxTransaction(uint256 maxWallet);\r\nevent config_TradingStatus(bool Status);\r\nevent config_LaunchMode(bool Status);\r\nevent config_SwapSettings(uint256 Amount, bool Enabled);\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Status\",\"type\":\"bool\"}],\"name\":\"Authorize_Wallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceClear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"potentialOwner\",\"type\":\"address\"}],\"name\":\"OwnershipNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"MarketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DevelopmentWallet\",\"type\":\"address\"}],\"name\":\"Set_Wallets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DevWallet\",\"type\":\"address\"}],\"name\":\"Set_Wallets_Dev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Buy\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Sell\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Transfer\",\"type\":\"uint8\"}],\"name\":\"UpdateFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Status\",\"type\":\"bool\"}],\"name\":\"Wallet_feeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Status\",\"type\":\"bool\"}],\"name\":\"Wallet_holdingExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Status\",\"type\":\"bool\"}],\"name\":\"Wallet_txExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"TokenAddressCleared\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"clearToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Status\",\"type\":\"bool\"}],\"name\":\"config_LaunchMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"config_MaxTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"config_MaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Enabled\",\"type\":\"bool\"}],\"name\":\"config_SwapSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Status\",\"type\":\"bool\"}],\"name\":\"config_TradingStatus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_FeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_TxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_WalletLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developmentFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developmentFee\",\"type\":\"uint256\"}],\"name\":\"setFees_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTXPercentage_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"tradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"confirm\",\"type\":\"uint256\"}],\"name\":\"tradingStatus_launchmode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SWIFT", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c4da568c0d53d3872b7103d9d4d7c94582cadff1a8c0f1f4be5269e3c9890901"}