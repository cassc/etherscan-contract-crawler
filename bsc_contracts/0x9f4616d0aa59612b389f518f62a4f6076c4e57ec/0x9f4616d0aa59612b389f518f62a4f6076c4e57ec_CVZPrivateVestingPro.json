{"SourceCode": "// Sources flattened with hardhat v2.6.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.3.1\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.1\r\n\r\n//\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.1\r\n\r\n//\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.1\r\n\r\n//\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/MultiLinearVesting.sol\r\n\r\ncontract MultiLinearVesting is Ownable {\r\n    address public immutable token;\r\n    IERC20 private tokenContract;\r\n\r\n    uint256 public constant interval = 1 * 30 days;  // Delays between each unlock\r\n    uint256 public cliff;\r\n    uint256 public cycles;\r\n    uint256 public tgePercent;\r\n    uint256 public vestingStartTime;\r\n    uint256 public unlockEnd;\r\n    uint256 PERCENTAGE_FACTOR = 1000;\r\n\r\n    uint256 [] public distributionPerMonthPercentage;\r\n    mapping (address => VestingTerms) public vestingData;\r\n\r\n    event Distribute(address to, uint256 amount);\r\n\r\n    struct InitialVestingData {\r\n        address beneficiary;\r\n        uint256 totalVestedTokens;\r\n    }\r\n\r\n    struct VestingTerms {\r\n        uint256 totalVestedTokens;\r\n        uint256 totalClaimed;\r\n        uint256 monthlyRelease;\r\n        uint256 amountOnTGE;\r\n    }\r\n\r\n    modifier isValid {\r\n        require(msg.sender == tx.origin);\r\n        require(vestingStartTime > 0, \"Vesting start time not set yet\");\r\n        require(block.timestamp > vestingStartTime, \"Vesting not started yet\");\r\n        require(vestingData[msg.sender].totalVestedTokens > 0, \"The account does not have any vested tokens.\");\r\n        require(vestingData[msg.sender].totalVestedTokens > vestingData[msg.sender].totalClaimed, \"Already claimed all tokens\");\r\n        _;\r\n        require(vestingData[msg.sender].totalVestedTokens >= vestingData[msg.sender].totalClaimed, \"Claim more tokens than vested\");\r\n    }\r\n    /* tgePercent_ - the amount % to be released on TGE */\r\n    /* cliff_ - the number of intervals before linear / non-linear vesting starts */\r\n    /* tgePercent_ value between 0-1000 */\r\n    /* cycles_ - amount of linear cycles after TGE + cliff */\r\n    constructor(\r\n        address token_,\r\n        uint256 cliff_,\r\n        uint256 cycles_,\r\n        uint256 tgePercent_) {\r\n        token = token_;\r\n        cycles = cycles_;\r\n        tgePercent = tgePercent_;\r\n        tokenContract = IERC20(token_);\r\n        cliff = cliff_;\r\n        vestingStartTime = 0;\r\n        unlockEnd = vestingStartTime + cliff * interval + cycles * interval;\r\n    }\r\n\r\n    function addVestingPolicy(InitialVestingData [] memory initialVestingData_) internal {\r\n        for (uint i = 0; i < initialVestingData_.length; i++){\r\n            uint256 amountOnTGE = (initialVestingData_[i].totalVestedTokens * tgePercent) / PERCENTAGE_FACTOR;\r\n            uint256 remainingAmount = initialVestingData_[i].totalVestedTokens - amountOnTGE;\r\n            uint256 monthlyRelease = remainingAmount / cycles;\r\n            vestingData[initialVestingData_[i].beneficiary] = VestingTerms(\r\n                initialVestingData_[i].totalVestedTokens,\r\n                0,\r\n                monthlyRelease,\r\n                amountOnTGE\r\n            );\r\n        }\r\n    }\r\n\r\n    // Claims all available tokens up to now\r\n    function claim() public isValid {\r\n        uint256 amountToSend = getClaimableTokens(msg.sender, block.timestamp);\r\n        require(amountToSend > 0, \"No tokens to claim\");\r\n        vestingData[msg.sender].totalClaimed += amountToSend;\r\n\r\n        safeWithdraw(msg.sender, amountToSend);\r\n    }\r\n\r\n    // Safety function to recover any leftover tokens that may be left in the contract (e.g because of rounding errors).\r\n    // @note this function can only be called after the entire vesting period has ended\r\n    function recoverLeftOvers() external isValid {\r\n        require(block.timestamp > unlockEnd, \"Unlock end have not reached yet\");\r\n\r\n        uint256 amountToSend = vestingData[msg.sender].totalVestedTokens - vestingData[msg.sender].totalClaimed;\r\n        // effect\r\n        vestingData[msg.sender].totalClaimed = vestingData[msg.sender].totalVestedTokens;\r\n\r\n        // interact\r\n        safeWithdraw(msg.sender, amountToSend);\r\n\r\n    }\r\n\r\n    function getTotalAllocation(address investor) public view returns(uint256){\r\n        return vestingData[investor].totalVestedTokens;\r\n    }\r\n\r\n    function getAmountOfClaimedTokens(address investor) public view returns(uint256){\r\n        return vestingData[investor].totalClaimed;\r\n    }\r\n\r\n    // Returns the number of tokens that the investor is able to claim at the given date\r\n    function getUnlockedTokens(address investor, uint256 blockTimestamp) public view returns(uint256) {\r\n\r\n        if(blockTimestamp < vestingStartTime || vestingStartTime == 0){\r\n            return 0;\r\n        }\r\n        if (vestingData[investor].totalVestedTokens == 0){\r\n            return 0;\r\n        }\r\n\r\n        uint256 unlocksSinceTGE = (blockTimestamp - vestingStartTime) / interval;\r\n        uint256 amount = 0;\r\n\r\n        if (unlocksSinceTGE <= cliff) {\r\n            amount = vestingData[investor].amountOnTGE;\r\n        }\r\n        else {\r\n            amount = vestingData[investor].monthlyRelease * (unlocksSinceTGE - cliff) + vestingData[investor].amountOnTGE;\r\n        }\r\n\r\n        if (amount > vestingData[investor].totalVestedTokens) {\r\n            amount = vestingData[investor].totalVestedTokens;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function getClaimableTokens(address investor, uint256 blockTimestamp) public view returns(uint256) {\r\n        return getUnlockedTokens(investor, blockTimestamp) - vestingData[investor].totalClaimed;\r\n    }\r\n\r\n    function getAmountOfTokensOnTGE(address investor) external view returns(uint256){\r\n        return vestingData[investor].amountOnTGE;\r\n    }\r\n\r\n    // After this date, all tokens should be unlocked\r\n    function getVestingEndTimestamp() external view returns(uint256){\r\n        return unlockEnd;\r\n    }\r\n\r\n    // TGE date\r\n    function getVestingStartTimestamp() external view returns(uint256){\r\n        return vestingStartTime;\r\n    }\r\n\r\n    // Number of tokens that are released each month for the investor\r\n    function getMonthlyRelease(address investor) external view returns(uint256){\r\n        return vestingData[investor].monthlyRelease;\r\n    }\r\n\r\n    function setVestingStartTime(uint256 timestamp) external onlyOwner {\r\n        require(vestingStartTime == 0, \"Vesting start time is already set\");\r\n        vestingStartTime = timestamp;\r\n        unlockEnd = vestingStartTime + cliff * interval + cycles * interval;\r\n    }\r\n\r\n    function safeWithdraw(address to, uint256 amount) internal {\r\n        uint256 initialTokenBalance = tokenContract.balanceOf(to);\r\n        tokenContract.transfer(to, amount);\r\n        uint256 afterTokenBalance = tokenContract.balanceOf(to);\r\n        require(afterTokenBalance - initialTokenBalance > 0, \"failed to send tokens\");\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/For Client/CVZ/CVZPrivateVestingProd.sol\r\n\r\ncontract CVZPrivateVestingProd is MultiLinearVesting{\r\n    /* This array is the amount of % of the total allocation to be released in the month */\r\n    uint256 cliff_ = 1; // 1 month cliff after tge\r\n    uint256 tgePercent_ = 75; // 7.5% on TGE\r\n    uint256 cycles_ = 9; // liner vesting over 9 months after cliff.\r\n    InitialVestingData [] initialVestingData_;\r\n\r\n    constructor(address tokenAddress) MultiLinearVesting(tokenAddress, cliff_, cycles_,  tgePercent_){\r\n        InitialVestingData [98] memory tmp = [\r\n        InitialVestingData(0x6dF11cdC51c2251Cb2A75517f9D372bE23967F1E, 533333 ether),\r\n        InitialVestingData(0x9f7b75c2205d10f6F1FFc73C33dDb805167D27D5, 1000000 ether),\r\n        InitialVestingData(0xdF585DcE0DE45b79991015F600aFD7Ac12f91107, 1333333 ether),\r\n        InitialVestingData(0x54D07CFa91F05Fe3B45d8810feF05705117AFe53, 1000000 ether),\r\n        InitialVestingData(0x82Ba7508f7F1995AB1623258D66Cb4E2B2b8F467, 666666 ether),\r\n        InitialVestingData(0xB3bC9A509558BB32cB3345492C87144543522cd8, 2666666 ether),\r\n        InitialVestingData(0x5fAFeC436B45a12Ff430804A644E68Cb012E5bD6, 666666 ether),\r\n        InitialVestingData(0x887b4B08BA619D629FFf17DC74380640BF55702F, 666666 ether),\r\n        InitialVestingData(0x924db8a0fC37ec7dC1051Fa7Cf9F75824CC66E07, 666666 ether),\r\n        InitialVestingData(0x11EfF19DC599ee676b6D65bae0A60479a87e889A, 666666 ether),\r\n        InitialVestingData(0x81DC6F15eE72F6E6d49CB6Ca44C0Bf8E63770027, 666666 ether),\r\n        InitialVestingData(0xb14025f7eB7717cFF43e7a33b66d86eaBd6bC7d7, 666666 ether),\r\n        InitialVestingData(0xFE932efB9dbB8E563E95CEe05ce106509cF06905, 666666 ether),\r\n        InitialVestingData(0x79Ce8Bcc8b0B88e8C96C76D6521B49d7A24EBcfB, 2000000 ether),\r\n        InitialVestingData(0x0F69c006Ec83D4C9A78a8dd8d113C4fA7E6F7a96, 4666666 ether),\r\n        InitialVestingData(0xE4b66cdb467ECA64e282cF1dF88347ad9Cb3b2e9, 3333333 ether),\r\n        InitialVestingData(0x41E3FE77DE1EcA115902eB058b1FB57395358d62, 3333333 ether),\r\n        InitialVestingData(0x0ab827bd2E6C8F5D292ACFEcff61c143C3926581, 1333333 ether),\r\n        InitialVestingData(0xE337c828d39dd4962f4F80512d07907E815314d5, 2333333 ether),\r\n        InitialVestingData(0x3ED0a033Ed89761BbACc06ba6eE7B7A76A27a47D, 1333333 ether),\r\n        InitialVestingData(0x4D30922f14fD6149D06994FFc08D042Dc09bbd42, 2000000 ether),\r\n        InitialVestingData(0xceEBCEdd14b38c4827D6586221B2907072766666, 1333333 ether),\r\n        InitialVestingData(0xE2Dd7a0854D703E71E3c9e4f632D17ddB1C84237, 2000000 ether),\r\n        InitialVestingData(0x9fe553de68865F425d8071C81640855A7C9613eb, 266666 ether),\r\n        InitialVestingData(0x87Bb1f1723ac6c6B341a5Df432f5a852d49ad12D, 1000000 ether),\r\n        InitialVestingData(0x3830119cb52E7A3Ade67f0DCDbF68AE757f0382f, 1333333 ether),\r\n        InitialVestingData(0x71d1f0a05F82c0EBd02b8704E3d2337b517a6B3A, 2000000 ether),\r\n        InitialVestingData(0x99ea5B28f2cf27D53558a7b4A66C45164f9f99EB, 333333 ether),\r\n        InitialVestingData(0xa787A56c43847A3B5a0110d0B5E004E47F57B22e, 1000000 ether),\r\n        InitialVestingData(0x0051437667689B36f9cFec31E4F007f1497c0F98, 2000000 ether),\r\n        InitialVestingData(0x93f99d41CDD698C19C5D4baA978970977A223938, 2000000 ether),\r\n        InitialVestingData(0xaC6dE9f16c7b9B44C4e5C9073C3a10fA45aB4d5a, 1666666 ether),\r\n        InitialVestingData(0xfb4334A5704e29DF37efc9F16255759670018D9A, 1000000 ether),\r\n        InitialVestingData(0x4553eD5d8d3731E629f67BD86abd021175F31848, 666666 ether),\r\n        InitialVestingData(0x505Ffa6194f6e443b86F2028b2a97A588c17b962, 1333333 ether),\r\n        InitialVestingData(0xcDA462A1231aca6dc29a61fd6c431046d8389129, 666666 ether),\r\n        InitialVestingData(0xBd4f0237593DB678638633B72D2A2C3fDB0e0494, 666666 ether),\r\n        InitialVestingData(0x570213d68fc2A6e11eCa3b66510EE1Ed2D0ae8Af, 66666 ether),\r\n        InitialVestingData(0x28FfE8f3906C937199360a0493C863168E088915, 666666 ether),\r\n        InitialVestingData(0xB18f5c11E4AA3AA4223EF0d0D03e20A0aC63226e, 2666666 ether),\r\n        InitialVestingData(0xac28AbC63E4c9367aBF4Cb3331802267622162C8, 2666666 ether),\r\n        InitialVestingData(0x7a05CE29a44cA8dD49D967367F98D3F07E204faC, 2000000 ether),\r\n        InitialVestingData(0x6c037691acc0749456EF77DC54A5763A194dF6F7, 1333333 ether),\r\n        InitialVestingData(0xa20dFb89A753cbF01Cf0baE822B0F39573C98424, 666666 ether),\r\n        InitialVestingData(0x4a5BB1c9347A0d4F7e06a29239162f03647d9232, 3333333 ether),\r\n        InitialVestingData(0x6ae8e6797122Fbbe316530090a550583bd9775ba, 666666 ether),\r\n        InitialVestingData(0x05656fC8cc2ef5aD7abE729B4fa313883205aeFB, 666666 ether),\r\n        InitialVestingData(0x3228dFEe65aa55EaD834be0D2B690D2a9B19E10B, 2666666 ether),\r\n        InitialVestingData(0xC6B4165C6DEa0cdD5C311c52d35E66d941Ce18DB, 666666 ether),\r\n        InitialVestingData(0x3c3ebEEa1A66Dd996eF73C8Af093529982287A23, 1000000 ether),\r\n        InitialVestingData(0xBA0397CF81D02D1D109D9C5d046c66AcD762bC90, 2000000 ether),\r\n        InitialVestingData(0x734E6A82B1111EFDbAc6fb8a50A9981F56D268b2, 666666 ether),\r\n        InitialVestingData(0x14528cC30f914d6EF521a4EE385511b24bd21348, 666666 ether),\r\n        InitialVestingData(0x29b10Dda29f3Bf2e1A2d200ac36A968EFdC761A3, 666666 ether),\r\n        InitialVestingData(0x15029491E0c048707CF4729c8e16A0B6C4A1178e, 666666 ether),\r\n        InitialVestingData(0xc60607CEFE68a50B358190278389811133011Aa0, 666666 ether),\r\n        InitialVestingData(0x674784761C4789B78cB92a3CE559885a222d1693, 1000000 ether),\r\n        InitialVestingData(0x529C9428572fFd389b031f7bd5bdC44b3F471D8e, 666666 ether),\r\n        InitialVestingData(0xAE83297759AAb210eb2fA3C7cF42a77d0bD2B07e, 333333 ether),\r\n        InitialVestingData(0xa50f89381301Decb11F1918586f98c5f2077e3Ca, 1333333 ether),\r\n        InitialVestingData(0x9D6730dda3c3300Dc913A508a419481B004911Eb, 666666 ether),\r\n        InitialVestingData(0x8175fbBADEBb294FE4e8175e180943A86008b06B, 666666 ether),\r\n        InitialVestingData(0xE6482e79faB5b44d6CaEE1dD981A024b82C70867, 666666 ether),\r\n        InitialVestingData(0xF6ABcD04cFdF6775160f5EaE30b799e4a396fC97, 1333333 ether),\r\n        InitialVestingData(0x4552226D913F5b27dE6883f0da6287eAD7A8E32d, 1333333 ether),\r\n        InitialVestingData(0x9464152CdFA7069C84fc5426A3887E22bf9DF0c8, 266666 ether),\r\n        InitialVestingData(0x637E21Ac11F0E0Cf95D926d6bd2737b059A2858a, 1333333 ether),\r\n        InitialVestingData(0xA7981dFa3059A86539766CcF2136DCd9e5E1B55a, 666666 ether),\r\n        InitialVestingData(0x1bB05AC6f7807928D7F5eb436F9b3ea3B4899886, 666666 ether),\r\n        InitialVestingData(0x3D0C582dbeA03bf019A0FF661Dd51B18275839b5, 333333 ether),\r\n        InitialVestingData(0x247DB61277d6959405Aa08CF3b6556Cda9A0BEC8, 1333333 ether),\r\n        InitialVestingData(0xA4c660D1317714fDaEE6138A30538763159B806B, 133333 ether),\r\n        InitialVestingData(0x996131EEd1fc6f83F8245602c8D171227311ceAf, 66666 ether),\r\n        InitialVestingData(0x81fBf4102e16F090846823409BA129D9F706294E, 200000 ether),\r\n        InitialVestingData(0x399b282c17F8ed9F542C2376917947d6B79E2Cc6, 166666 ether),\r\n        InitialVestingData(0x60Fe962b1a4358A19132e9eF31D94640eb82ffC4, 100000 ether),\r\n        InitialVestingData(0x61C98F7110DdcE29680CD7EB6E1cd77a81D7587A, 200000 ether),\r\n        InitialVestingData(0x039255900459494dfc2CA8710801e06c2c870097, 100000 ether),\r\n        InitialVestingData(0x2938b2a7EbF9a59645E39d51ec5eCA2869D6C53D, 200000 ether),\r\n        InitialVestingData(0xF2385811df9dCd791a9Aaf0586d8082680e6C163, 200000 ether),\r\n        InitialVestingData(0xf44ec09221653db5691265bA587e196257DA5F53, 66666 ether),\r\n        InitialVestingData(0xbC627254fa9e73117cb70E1D4Eed610Ba0a9DE0D, 166666 ether),\r\n        InitialVestingData(0x48b13E82468875f59a7582549cb8ebE07D599454, 66666 ether),\r\n        InitialVestingData(0x96F719d836C263eDD20F0d749a6f81fb74973b9F, 66666 ether),\r\n        InitialVestingData(0x5790E868b2B93a6A0738CFD8fEe501c7D8F3706E, 66666 ether),\r\n        InitialVestingData(0x405D4397DF7Cce6D269BD9bDe35DD5DF1884edCa, 133333 ether),\r\n        InitialVestingData(0x8c0424fe114B7Af1B0aAC8c99Eda6486F1Fc65D3, 100000 ether),\r\n        InitialVestingData(0xdF17c6402312Dfae82bCAFbaE0F3b1A14905202f, 133333 ether),\r\n        InitialVestingData(0x2b7FEf409d28650934007a3C863C2b245d20eDd9, 166666 ether),\r\n        InitialVestingData(0xcCCBB51d608046431F63817aD9605174614cf7C9, 200000 ether),\r\n        InitialVestingData(0xB67e49A45858F3CBf2bC2026A4347B5518279798, 100000 ether),\r\n        InitialVestingData(0x252f29F275Ccd311d10A80734988DEC15ac83F64, 333333 ether),\r\n        InitialVestingData(0x3728beb9E250875242BcfaABdEC1c3Be9Fc2BAF7, 133333 ether),\r\n        InitialVestingData(0x184c85CE8D06538Ea0eB7a2B53f63E6656cB2e96, 133333 ether),\r\n        InitialVestingData(0x503D5dd77E2Cf24Db70F713aAA9cf7f4Fbe2284c, 300000 ether),\r\n        InitialVestingData(0x979E094F2771D0624Eb707638439aE98863807Ef, 333333 ether),\r\n        InitialVestingData(0xe3930aF80af2BF72C5Cb5Fc8F1B0d871cE144D23, 10000000 ether),\r\n        InitialVestingData(0x0ab827bd2E6C8F5D292ACFEcff61c143C3926581, 10000000 ether)\r\n        ];\r\n        for (uint i = 0; i < tmp.length; i++) {\r\n            initialVestingData_.push(tmp[i]);\r\n        }\r\n        addVestingPolicy(initialVestingData_);\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionPerMonthPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getAmountOfClaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getAmountOfTokensOnTGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getMonthlyRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getTotalAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getUnlockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverLeftOvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setVestingStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVestedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOnTGE\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CVZPrivateVestingProd", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006fbb278c4eaa5218495a1858447b26d905ac0010", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8dbf1e72ff2c172a6444b9bce9969344752866664a65662fd448c41fa2a5e991"}