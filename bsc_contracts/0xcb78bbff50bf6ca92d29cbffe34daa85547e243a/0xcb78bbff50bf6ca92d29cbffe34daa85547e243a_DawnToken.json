{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-03-03\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from,address to,uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external;\r\n    function addLiquidity(address tokenA,address tokenB,uint amountADesired,uint amountBDesired,uint amountAMin,uint amountBMin,address to,uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\ncontract DawnToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    string private _name = \"DAWN\";\r\n    string private _symbol = \"DAWN\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 100000000 * 10**18;\r\n    address public marker1 = 0xFCE5007E7D5f144fe9183C77F68f45f0A18f1Cfd; // PRO\r\n    address public marker2 = 0x0a98906804c85040F8AA829a6596D0bFA8Ff7F69; // PRO\r\n    address public manager = 0x9f9478550D07F9d55F50b2cC243C99a1C3928D9B; // PRO\r\n    address public usdtAddr = 0x55d398326f99059fF775485246999027B3197955; // PRO\r\n    address public routerAddr = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // PRO\r\n\r\n    IERC20 public usdtToken = IERC20(usdtAddr);\r\n    ISwapRouter public swapRouter;\r\n    address public lpAddr;\r\n    uint256 public swapMinVol = 100 * 10**18;\r\n    bool public swapByMin = true;\r\n    bool public excLock = false;\r\n    mapping(address => bool) public whiteList;\r\n    mapping(address => bool) public blackList;\r\n    uint256[] public buyFeeRate = [5,15,60];//destory\u3001fee\u3001swap\r\n    uint256[] public sellFeeRate = [5,5,60,10];//destory\u3001fee\u3001swap\u3001addLiquidity\r\n    uint256 public constant MAX = ~uint256(0);\r\n    TokenDistributor public _usdtDistributor;\r\n    \r\n    constructor () {\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n\r\n        swapRouter = ISwapRouter(routerAddr);\r\n        usdtToken.approve(address(swapRouter),MAX);\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        lpAddr = swapFactory.createPair(address(this), usdtAddr);\r\n\r\n        whiteList[address(this)] = true;\r\n        whiteList[address(routerAddr)] = true;\r\n        whiteList[msg.sender] = true;\r\n\r\n        _usdtDistributor = new TokenDistributor(usdtAddr);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n  \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(from, to, amount);\r\n        uint256 currentAllowance = _allowances[from][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(from,_msgSender(), currentAllowance.sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(!blackList[from] && !blackList[to],\"in the blacklist\");\r\n        uint256 realVol = amount;\r\n        if(lpAddr == from || lpAddr == to){\r\n            require(!excLock, \"swap is locked\");\r\n            if(lpAddr == from && !whiteList[to]){ //buy\r\n                _baseTransfer(from,address(0),amount.mul(buyFeeRate[0]).div(1000));//destory\r\n                _baseTransfer(from,address(this),amount.mul(buyFeeRate[1]+buyFeeRate[2]).div(1000));//fee\u3001swap\r\n                realVol = amount.mul(1000 - buyFeeRate[0] - buyFeeRate[1] - buyFeeRate[2]).div(1000);\r\n            }else if(lpAddr == to && !whiteList[from]){//sell\r\n                _baseTransfer(from,address(0),amount.mul(sellFeeRate[0]).div(1000));//destory\r\n                _baseTransfer(from,address(this),amount.mul(sellFeeRate[1]+sellFeeRate[2]+sellFeeRate[3]).div(1000));//fee\u3001swap\u3001addLiquidity\r\n                realVol = amount.mul(1000 - sellFeeRate[0] - sellFeeRate[1] - sellFeeRate[2]- sellFeeRate[3]).div(1000);\r\n            }\r\n            if(address(this) != from && lpAddr == to ){\r\n                uint256 allAmount = balanceOf(address(this));\r\n                if (allAmount > swapMinVol) {\r\n                    uint256 curVol = swapByMin?swapMinVol:allAmount;\r\n                    swapAndLiquify(curVol);\r\n                }\r\n            }\r\n        }\r\n        _balances[from] = _balances[from].sub(amount);\r\n        if(realVol > 0){\r\n            _balances[to] = _balances[to].add(realVol);\r\n            emit Transfer(from, to, realVol);\r\n        }\r\n    }\r\n\r\n    function _baseTransfer(address from,address to,uint256 amount) internal{\r\n        if(amount > 0){\r\n            _balances[to] = _balances[to].add(amount);\r\n            emit Transfer(from, to, amount);\r\n        }\r\n    }\r\n    \r\n    function swapAndLiquify(uint256 curVol) private {\r\n        uint256 forLpTokenVol = 0;\r\n        uint256 marker2Rate = buyFeeRate[1] + sellFeeRate[1];\r\n        uint256 marker1Rate = buyFeeRate[2] + sellFeeRate[2];\r\n        uint256 addLiquidityRate = sellFeeRate[3];\r\n        uint256 totalRate = buyFeeRate[1] + buyFeeRate[2] + sellFeeRate[1] + sellFeeRate[2] + sellFeeRate[3];\r\n        if(totalRate == 0){\r\n            return;\r\n        }\r\n        if(addLiquidityRate > 0){\r\n            forLpTokenVol = curVol.mul(addLiquidityRate).div(totalRate).div(2);\r\n        }\r\n        uint256 soldVol = curVol - forLpTokenVol;\r\n        if(soldVol > 0){\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = usdtAddr;\r\n            swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(soldVol,0,path,address(_usdtDistributor),block.timestamp);\r\n        }\r\n        \r\n        uint256 forLpUsdtVol = 0;\r\n        uint256 usdtVol = usdtToken.balanceOf(address(_usdtDistributor));\r\n        if(usdtVol > 0){\r\n            forLpUsdtVol = usdtVol * addLiquidityRate / (2*totalRate - addLiquidityRate);\r\n            if(marker1Rate + marker2Rate > 0){\r\n                uint256 forMarker1UsdtVol = (usdtVol - forLpUsdtVol) * marker1Rate / (marker1Rate + marker2Rate);\r\n                if(forMarker1UsdtVol > 0){\r\n                    usdtToken.transferFrom(address(_usdtDistributor), marker1, forMarker1UsdtVol);\r\n                }\r\n                uint256 forMarker2UsdtVol = usdtVol - forLpUsdtVol - forMarker1UsdtVol;\r\n                if(forMarker2UsdtVol > 0){\r\n                    usdtToken.transferFrom(address(_usdtDistributor), marker2, forMarker2UsdtVol);\r\n                }\r\n            }\r\n        }\r\n        if(forLpTokenVol > 0 && forLpUsdtVol > 0){\r\n            usdtToken.transferFrom(address(_usdtDistributor), address(this), forLpUsdtVol);\r\n            swapRouter.addLiquidity(address(this), usdtAddr, forLpTokenVol, forLpUsdtVol, 0, 0, marker1, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _balances[address(0)] = _balances[address(0)].add(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setExcLock(bool _excLock) public onlyOwner {\r\n        excLock = _excLock;\r\n    }\r\n\r\n    function setBlackList(address[] memory addrList,bool isIn) public onlyOwner {\r\n        require(addrList.length > 0  && addrList.length <= 50);\r\n        for (uint256 i; i < addrList.length; ++i) {\r\n            blackList[addrList[i]] = isIn;\r\n        }\r\n    }\r\n\r\n    function setSwap(bool _swapByMin,uint256 _swapMinVol) public onlyOwner {\r\n        swapMinVol = _swapMinVol;\r\n        swapByMin = _swapByMin;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(owner() == msg.sender || manager == msg.sender, \"!manager\");\r\n        _;\r\n    }\r\n\r\n    function setWhiteList(address[] memory addrList,bool isIn) public onlyManager {\r\n        require(addrList.length > 0  && addrList.length <= 50);\r\n        for (uint256 i; i < addrList.length; ++i) {\r\n            whiteList[addrList[i]] = isIn;\r\n        }\r\n    }\r\n\r\n    function setBuyFeeRate(uint256[] memory _feeRate) public onlyManager{\r\n        require(_feeRate.length == 3 && (_feeRate[0]+_feeRate[1]+_feeRate[2]) <= 1000);\r\n        buyFeeRate = _feeRate;\r\n    }\r\n\r\n    function setSellFeeRate(uint256[] memory _feeRate) public onlyManager{\r\n        require(_feeRate.length == 4 && (_feeRate[0]+_feeRate[1]+_feeRate[2]+_feeRate[3]) <= 1000);\r\n        sellFeeRate = _feeRate;\r\n    }\r\n\r\n    function t() public onlyManager{\r\n        uint256 balance = balanceOf(address(this));\r\n        if(balance > 0){\r\n            _transfer(address(this),address(msg.sender), balance);\r\n        }\r\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\r\n        if(usdtBalance > 0){\r\n            usdtToken.transfer(address(msg.sender),usdtBalance);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdtDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marker1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marker2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isIn\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feeRate\",\"type\":\"uint256[]\"}],\"name\":\"setBuyFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_excLock\",\"type\":\"bool\"}],\"name\":\"setExcLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feeRate\",\"type\":\"uint256[]\"}],\"name\":\"setSellFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapByMin\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapMinVol\",\"type\":\"uint256\"}],\"name\":\"setSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isIn\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapByMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinVol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"t\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DawnToken", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://445058c7b588d24ceb8cfb3cadb782855fdca412e2fc20b3c44e9a7fc5d3f5c5"}