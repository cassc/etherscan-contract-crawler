{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity ^0.8.8;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint roundId,\r\n      uint answer,\r\n      uint startedAt,\r\n      uint updatedAt,\r\n      uint answeredInRound\r\n    );\r\n    \r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint roundId,\r\n      uint answer,\r\n      uint startedAt,\r\n      uint updatedAt,\r\n      uint answeredInRound\r\n    );\r\n\r\n}\r\ncontract PriceConsumerV3 {\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    constructor() {\r\n        priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE); // Mainnet BNB/USD\r\n        //priceFeed = AggregatorV3Interface(0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526); // Testnet BNB/USD\r\n    }\r\n\r\n\r\n    function getThePrice() public view returns (uint) {\r\n        (\r\n            uint roundID, \r\n            uint price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n}\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint theTotalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract RelishGoldIDOUpgradeV2{\r\n\r\n    PriceConsumerV3 priceConsumerV3 = new PriceConsumerV3();\r\n    uint public priceOfBNB = priceConsumerV3.getThePrice();\r\n\r\n  struct Tariff {\r\n    uint time;\r\n    uint percent;\r\n  }\r\n  \r\n  struct Deposit {\r\n    uint tariff;\r\n    uint amount;\r\n    bytes32 opType;\r\n    uint at;\r\n  }\r\n  \r\n  struct Investor {\r\n    bool registered;\r\n    uint totalRef;\r\n    Deposit[] deposits;\r\n    uint tokenInvested;\r\n    uint busdInvested;\r\n    uint bnbInvested;\r\n    uint paidAt;\r\n    uint withdrawn;\r\n  }\r\n   \r\n  address public buyTokenAddr = 0x3f5241b0f8949e123728a6246e655698F6398f42; // mainnet \r\n  \r\n\r\n\r\n  uint public tokenBuyPrice         = 67;\r\n  uint public tokenBuyPriceDecimal  = 100;\r\n\r\n\r\n  uint public tokenSellPrice         = 68;\r\n  uint public tokenSellPriceDecimal  = 100;\r\n\r\n\r\n  event OwnershipTransferred(address);\r\n  \r\n  address public owner = msg.sender;\r\n  \r\n  Tariff[] public tariffs;\r\n  uint[] public refRewards;\r\n  uint public totalInvestors;\r\n  uint public totalInvested;\r\n  uint public totalWithdrawal;\r\n  uint public totalRefRewards;\r\n  address public contractAddr = address(this);\r\n  \r\n  mapping (address => Investor) public investors;\r\n\r\n  event DepositAt(address user, uint tariff, uint amount, bytes32 opType);\r\n  event Reinvest(address user, uint tariff, uint amount);\r\n  event Withdraw(address user, uint amount);\r\n  \r\n    function register() internal {\r\n      \r\n        if (!investors[msg.sender].registered) {\r\n            investors[msg.sender].registered = true;\r\n            totalInvestors++;\r\n        }\r\n    }\r\n \r\n    constructor() {\r\n        tariffs.push(Tariff(300 * 28800, 300));\r\n    }\r\n  \r\n    function buyOrSellWithWithBUSD(uint inputAmount,bytes32 opType) external {\r\n        require(opType==\"buy\" || opType==\"sell\",\"Invalid Operation\");\r\n        // 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 - mainnet busd\r\n        // 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee -  testnet busd \r\n        BEP20 outputToken    = (opType==\"buy\") ?  BEP20(buyTokenAddr) : BEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n        BEP20 inputToken = (opType==\"buy\") ? BEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56) : BEP20(buyTokenAddr);/// mainnet\r\n        \r\n        uint tariff = 0;\r\n        require(inputAmount>0,\"Minimum 1 required\");\r\n        require(tariff < tariffs.length);\r\n        inputAmount = inputAmount*(10**18);\r\n    \tuint outputAmount = (opType==\"buy\") ? (inputAmount*tokenBuyPriceDecimal)/tokenBuyPrice :  (inputAmount*tokenSellPrice)/tokenSellPriceDecimal ;\r\n    \trequire(outputToken.balanceOf(address(this)) >= outputAmount, \"Insufficient contract balance\");\r\n    \trequire(inputToken.balanceOf(msg.sender) >= inputAmount, \"Insufficient user balance\");\r\n\t\tregister();\r\n\t\tinputToken.transferFrom(msg.sender, contractAddr, inputAmount);\r\n        if(opType==\"buy\") {\r\n            investors[msg.sender].tokenInvested += outputAmount;\r\n        }\r\n        else {\r\n            investors[msg.sender].busdInvested += outputAmount;\r\n        }\r\n\t\t  \r\n\t\tinvestors[msg.sender].deposits.push(Deposit(tariff, outputAmount, opType, block.number));\r\n\t\toutputToken.transfer(msg.sender, outputAmount);\r\n\t\temit DepositAt(msg.sender, tariff, outputAmount,opType);\r\n\t} \r\n\r\n    \r\n    function tokenBuyInBusd(uint amount) public view returns (uint) {\r\n        \r\n        uint tokenVal = (amount*tokenBuyPrice*(10**18))/(tokenBuyPriceDecimal);\r\n        return (tokenVal);\r\n    }\r\n    \r\n    function tokenSellInBusd(uint amount) public view returns (uint) {\r\n        \r\n        uint tokenVal = (amount*tokenSellPrice*(10**18))/(tokenSellPriceDecimal);\r\n        return (tokenVal);\r\n    }\r\n\r\n    /*\r\n    like tokenBuyPrice = 0.0000000001\r\n    setBuyPrice = 1 \r\n    tokenBuyPriceDecimal= 10\r\n    */\r\n    // Set buy price  \r\n    function setBuyPrice(uint _price, uint _decimal) external {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      tokenBuyPrice        = _price;\r\n      tokenBuyPriceDecimal = _decimal;\r\n    }\r\n\r\n\r\n    /*\r\n    like tokenSellPrice = 0.0000000001\r\n    setBuyPrice = 1 \r\n    tokenSellPriceDecimal= 10\r\n    */\r\n    // Set buy price  \r\n    function setSellPrice(uint _price, uint _decimal) external {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      tokenSellPrice        = _price;\r\n      tokenSellPriceDecimal = _decimal;\r\n    }\r\n\r\n\r\n    // Owner Token Withdraw    \r\n    // Only owner can withdraw token \r\n    function withdrawToken(address tokenAddress, address to, uint amount) external {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        BEP20 _token = BEP20(tokenAddress);\r\n        _token.transfer(to, amount);\r\n    }\r\n    \r\n    // Owner BNB Withdraw\r\n    // Only owner can withdraw BNB from contract\r\n    function withdrawBNB(address payable to, uint amount) external {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        to.transfer(amount);\r\n    }\r\n    \r\n    // Ownership Transfer\r\n    // Only owner can call this function\r\n    function transferOwnership(address to) external {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot transfer ownership to zero address\");\r\n        owner = to;\r\n        emit OwnershipTransferred(to);\r\n    }\r\n    receive() external payable {\r\n   \r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"opType\",\"type\":\"bytes32\"}],\"name\":\"DepositAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"opType\",\"type\":\"bytes32\"}],\"name\":\"buyOrSellWithWithBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"busdInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOfBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setBuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setSellPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tariffs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenBuyInBusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuyPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenSellInBusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSellPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RelishGoldIDOUpgradeV2", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9df7d502aba37cb5197e3d7c8b7f5efe743570480f22071d39b417f9c10d1941"}