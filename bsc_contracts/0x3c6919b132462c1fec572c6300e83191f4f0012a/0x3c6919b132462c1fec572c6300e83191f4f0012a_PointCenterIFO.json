{"SourceCode": "// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash =\r\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                \"SafeBEP20: decreased allowance below zero\"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(\r\n                data,\r\n                \"SafeBEP20: low-level call failed\"\r\n            );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeBEP20: BEP20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/IFO.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract IFO is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many tokens the user has provided.\r\n        bool claimed; // default false\r\n    }\r\n\r\n    // admin address\r\n    address public adminAddress;\r\n    // The raising token\r\n    IBEP20 public lpToken;\r\n    // The offering token\r\n    IBEP20 public offeringToken;\r\n    // The block number when IFO starts\r\n    uint256 public startBlock;\r\n    // The block number when IFO ends\r\n    uint256 public endBlock;\r\n    // total amount of raising tokens need to be raised\r\n    uint256 public raisingAmount;\r\n    // total amount of offeringToken that will offer\r\n    uint256 public offeringAmount;\r\n    // total amount of raising tokens that have already raised\r\n    uint256 public totalAmount;\r\n    // address => amount\r\n    mapping(address => UserInfo) public userInfo;\r\n    // participators\r\n    address[] public addressList;\r\n\r\n    event Deposit(address indexed user, uint256 amount);\r\n\r\n    event Harvest(\r\n        address indexed user,\r\n        uint256 offeringAmount,\r\n        uint256 excessAmount\r\n    );\r\n\r\n    constructor(\r\n        IBEP20 _lpToken,\r\n        IBEP20 _offeringToken,\r\n        uint256 _startBlock,\r\n        uint256 _endBlock,\r\n        uint256 _offeringAmount,\r\n        uint256 _raisingAmount,\r\n        address _adminAddress\r\n    ) public {\r\n        lpToken = _lpToken;\r\n        offeringToken = _offeringToken;\r\n        startBlock = _startBlock;\r\n        endBlock = _endBlock;\r\n        offeringAmount = _offeringAmount;\r\n        raisingAmount = _raisingAmount;\r\n        totalAmount = 0;\r\n        adminAddress = _adminAddress;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"admin: wut?\");\r\n        _;\r\n    }\r\n\r\n    function setOfferingAmount(uint256 _offerAmount) public onlyAdmin {\r\n        require(block.number < startBlock, \"no\");\r\n        offeringAmount = _offerAmount;\r\n    }\r\n\r\n    function setRaisingAmount(uint256 _raisingAmount) public onlyAdmin {\r\n        require(block.number < startBlock, \"no\");\r\n        raisingAmount = _raisingAmount;\r\n    }\r\n\r\n    function deposit(uint256 _amount) public {\r\n        require(\r\n            block.number > startBlock && block.number < endBlock,\r\n            \"not ifo time\"\r\n        );\r\n        require(_amount > 0, \"need _amount > 0\");\r\n        lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        if (userInfo[msg.sender].amount == 0) {\r\n            addressList.push(address(msg.sender));\r\n        }\r\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount.add(_amount);\r\n        totalAmount = totalAmount.add(_amount);\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    function harvest() public nonReentrant {\r\n        require(block.number > endBlock, \"not harvest time\");\r\n        require(userInfo[msg.sender].amount > 0, \"have you participated?\");\r\n        require(!userInfo[msg.sender].claimed, \"nothing to harvest\");\r\n        uint256 offeringTokenAmount = getOfferingAmount(msg.sender);\r\n        uint256 refundingTokenAmount = getRefundingAmount(msg.sender);\r\n        offeringToken.safeTransfer(address(msg.sender), offeringTokenAmount);\r\n        if (refundingTokenAmount > 0) {\r\n            lpToken.safeTransfer(address(msg.sender), refundingTokenAmount);\r\n        }\r\n        userInfo[msg.sender].claimed = true;\r\n        emit Harvest(msg.sender, offeringTokenAmount, refundingTokenAmount);\r\n    }\r\n\r\n    function hasHarvest(address _user) external view returns (bool) {\r\n        return userInfo[_user].claimed;\r\n    }\r\n\r\n    // allocation 100000 means 0.1(10%), 1 meanss 0.000001(0.0001%), 1000000 means 1(100%)\r\n    function getUserAllocation(address _user) public view returns (uint256) {\r\n        return userInfo[_user].amount.mul(1e12).div(totalAmount).div(1e6);\r\n    }\r\n\r\n    // get the amount of IFO token you will get\r\n    function getOfferingAmount(address _user) public view returns (uint256) {\r\n        if (totalAmount > raisingAmount) {\r\n            uint256 allocation = getUserAllocation(_user);\r\n            return offeringAmount.mul(allocation).div(1e6);\r\n        } else {\r\n            // userInfo[_user] / (raisingAmount / offeringAmount)\r\n            return\r\n                userInfo[_user].amount.mul(offeringAmount).div(raisingAmount);\r\n        }\r\n    }\r\n\r\n    // get the amount of lp token you will be refunded\r\n    function getRefundingAmount(address _user) public view returns (uint256) {\r\n        if (totalAmount <= raisingAmount) {\r\n            return 0;\r\n        }\r\n        uint256 allocation = getUserAllocation(_user);\r\n        uint256 payAmount = raisingAmount.mul(allocation).div(1e6);\r\n        return userInfo[_user].amount.sub(payAmount);\r\n    }\r\n\r\n    function getAddressListLength() external view returns (uint256) {\r\n        return addressList.length;\r\n    }\r\n\r\n    function finalWithdraw(uint256 _lpAmount, uint256 _offerAmount)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            _lpAmount < lpToken.balanceOf(address(this)),\r\n            \"not enough token 0\"\r\n        );\r\n        require(\r\n            _offerAmount < offeringToken.balanceOf(address(this)),\r\n            \"not enough token 1\"\r\n        );\r\n        lpToken.safeTransfer(address(msg.sender), _lpAmount);\r\n        offeringToken.safeTransfer(address(msg.sender), _offerAmount);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IPancakeProfile.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/** @title IPancakeProfile.\r\n */\r\ninterface IPancakeProfile {\r\n    function createProfile(\r\n        uint256 _teamId,\r\n        address _nftAddress,\r\n        uint256 _tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev To pause user profile. It releases the NFT.\r\n     * Callable only by registered users.\r\n     */\r\n    function pauseProfile() external;\r\n\r\n    /**\r\n     * @dev To update user profile.\r\n     * Callable only by registered users.\r\n     */\r\n    function updateProfile() external;\r\n\r\n    /**\r\n     * @dev To reactivate user profile.\r\n     * Callable only by registered users.\r\n     */\r\n    function reactivateProfile(address _nftAddress, uint256 _tokenId) external;\r\n\r\n    /**\r\n     * @dev To increase the number of points for a user.\r\n     * Callable only by point admins\r\n     */\r\n    function increaseUserPoints(\r\n        address _userAddress,\r\n        uint256 _numberPoints,\r\n        uint256 _campaignId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev To increase the number of points for a set of users.\r\n     * Callable only by point admins\r\n     */\r\n    function increaseUserPointsMultiple(\r\n        address[] calldata _userAddresses,\r\n        uint256 _numberPoints,\r\n        uint256 _campaignId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev To increase the number of points for a team.\r\n     * Callable only by point admins\r\n     */\r\n\r\n    function increaseTeamPoints(\r\n        uint256 _teamId,\r\n        uint256 _numberPoints,\r\n        uint256 _campaignId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev To remove the number of points for a user.\r\n     * Callable only by point admins\r\n     */\r\n    function removeUserPoints(address _userAddress, uint256 _numberPoints)\r\n        external;\r\n\r\n    /**\r\n     * @dev To remove a set number of points for a set of users.\r\n     */\r\n    function removeUserPointsMultiple(\r\n        address[] calldata _userAddresses,\r\n        uint256 _numberPoints\r\n    ) external;\r\n\r\n    /**\r\n     * @dev To remove the number of points for a team.\r\n     * Callable only by point admins\r\n     */\r\n\r\n    function removeTeamPoints(uint256 _teamId, uint256 _numberPoints) external;\r\n\r\n    /**\r\n     * @dev To add a NFT contract address for users to set their profile.\r\n     * Callable only by owner admins.\r\n     */\r\n    function addNftAddress(address _nftAddress) external;\r\n\r\n    /**\r\n     * @dev Add a new teamId\r\n     * Callable only by owner admins.\r\n     */\r\n    function addTeam() external;\r\n\r\n    /**\r\n     * @dev Function to change team.\r\n     * Callable only by special admins.\r\n     */\r\n    function changeTeam(address _userAddress, uint256 _newTeamId) external;\r\n\r\n    /**\r\n     * @dev Claim CAKE to burn later.\r\n     * Callable only by owner admins.\r\n     */\r\n    function claimFee(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Make a team joinable again.\r\n     * Callable only by owner admins.\r\n     */\r\n    function makeTeamJoinable(uint256 _teamId) external;\r\n\r\n    /**\r\n     * @dev Make a team not joinable.\r\n     * Callable only by owner admins.\r\n     */\r\n    function makeTeamNotJoinable(uint256 _teamId) external;\r\n\r\n    /**\r\n     * @dev Rename a team\r\n     * Callable only by owner admins.\r\n     */\r\n    function renameTeam() external;\r\n\r\n    /**\r\n     * @dev Update the number of CAKE to register\r\n     * Callable only by owner admins.\r\n     */\r\n    function updateNumberCake() external;\r\n\r\n    /**\r\n     * @dev Check the user's profile for a given address\r\n     */\r\n    function getUserProfile(address _userAddress)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            bool\r\n        );\r\n\r\n    /**\r\n     * @dev Check the user's status for a given address\r\n     */\r\n    function getUserStatus(address _userAddress) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Check a team's profile\r\n     */\r\n    function getTeamProfile(uint256 _teamId)\r\n        external\r\n        view\r\n        returns (\r\n            string memory,\r\n            string memory,\r\n            uint256,\r\n            uint256,\r\n            bool\r\n        );\r\n}\r\n\r\n// File: contracts/PointCenterIFO.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/** @title PointCenterIFO.\r\n@dev It is a contract for users to collect points\r\nfor IFOs they participated in.\r\n*/\r\ncontract PointCenterIFO is Ownable {\r\n    IPancakeProfile pancakeProfile;\r\n\r\n    uint256 public maxViewLength;\r\n\r\n    mapping(address => IFOs) public ifos;\r\n    mapping(address => mapping(address => bool)) private _users;\r\n\r\n    event IFOAdd(\r\n        address indexed contractAddress,\r\n        uint256 thresholdToClaim,\r\n        uint256 indexed campaignId,\r\n        uint256 numberPoints\r\n    );\r\n\r\n    struct IFOs {\r\n        uint256 thresholdToClaim;\r\n        uint256 campaignId;\r\n        uint256 numberPoints;\r\n    }\r\n\r\n    constructor(address _pancakeProfileAddress, uint256 _maxViewLength) public {\r\n        pancakeProfile = IPancakeProfile(_pancakeProfileAddress);\r\n        maxViewLength = _maxViewLength;\r\n    }\r\n\r\n    function getPoints(address _contractAddress) external {\r\n        address senderAddress = _msgSender();\r\n\r\n        // 1. Check if IFO is valid\r\n        require(\r\n            (ifos[_contractAddress].campaignId > 0) &&\r\n                (ifos[_contractAddress].numberPoints > 0),\r\n            \"not valid\"\r\n        );\r\n\r\n        // 2. Check if he has claimed\r\n        require(\r\n            !_users[senderAddress][_contractAddress],\r\n            \"has claimed for this IFO\"\r\n        );\r\n\r\n        // 3. Check if he is active\r\n        bool isUserActive = pancakeProfile.getUserStatus(senderAddress);\r\n        require(isUserActive, \"not active\");\r\n\r\n        // 4. Check if he can claim\r\n        IFO currentIfo = IFO(_contractAddress);\r\n\r\n        uint256 amountUser;\r\n        bool hasUserClaimed;\r\n\r\n        // Read user info\r\n        (amountUser, hasUserClaimed) = currentIfo.userInfo(senderAddress);\r\n\r\n        require(hasUserClaimed, \"has not claimed\");\r\n        require(\r\n            amountUser > ifos[_contractAddress].thresholdToClaim,\r\n            \"too small\"\r\n        );\r\n\r\n        // 5. Update the status\r\n        _users[senderAddress][_contractAddress] = true;\r\n\r\n        // 6. Increase user points of sender\r\n        pancakeProfile.increaseUserPoints(\r\n            senderAddress,\r\n            ifos[_contractAddress].numberPoints,\r\n            ifos[_contractAddress].campaignId\r\n        );\r\n    }\r\n\r\n    function addIFOAddress(\r\n        address _contractAddress,\r\n        uint256 _thresholdToClaim,\r\n        uint256 _campaignId,\r\n        uint256 _numberPoints\r\n    ) external onlyOwner {\r\n        // Add data to the struct for ifos\r\n        ifos[_contractAddress] = IFOs({\r\n            thresholdToClaim: _thresholdToClaim,\r\n            campaignId: _campaignId,\r\n            numberPoints: _numberPoints\r\n        });\r\n\r\n        emit IFOAdd(\r\n            _contractAddress,\r\n            _thresholdToClaim,\r\n            _campaignId,\r\n            _numberPoints\r\n        );\r\n    }\r\n\r\n    function updateMaxViewLength(uint256 _newMaxViewLength) external onlyOwner {\r\n        maxViewLength = _newMaxViewLength;\r\n    }\r\n\r\n    function checkClaimStatus(address _userAddress, address _contractAddress)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        bool status = _checkClaimStatus(_userAddress, _contractAddress);\r\n        return status;\r\n    }\r\n\r\n    function checkClaimStatuses(\r\n        address _userAddress,\r\n        address[] memory _contractAddresses\r\n    ) external view returns (bool[] memory) {\r\n        bool[] memory responses = new bool[](_contractAddresses.length);\r\n\r\n        require(\r\n            _contractAddresses.length <= maxViewLength,\r\n            \"Length must be <= maxViewLength\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _contractAddresses.length; i++) {\r\n            bool status =\r\n                _checkClaimStatus(_userAddress, _contractAddresses[i]);\r\n            responses[i] = status;\r\n        }\r\n\r\n        return responses;\r\n    }\r\n\r\n    function _checkClaimStatus(address _userAddress, address _contractAddress)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        IFO currentIfo = IFO(_contractAddress);\r\n\r\n        uint256 amountUser;\r\n        bool hasUserClaimed;\r\n\r\n        // read user info\r\n        (amountUser, hasUserClaimed) = currentIfo.userInfo(_userAddress);\r\n\r\n        if (\r\n            (!hasUserClaimed) ||\r\n            (amountUser < ifos[_contractAddress].thresholdToClaim)\r\n        ) {\r\n            // 1. Check if user has claimed funds from IFO AND match threshold\r\n            return false;\r\n        } else if (_users[_userAddress][_contractAddress]) {\r\n            // 2. Check if user has already claimed points for this IFO\r\n            return false;\r\n        } else if (\r\n            // 3. Check if a campaignId AND numberPoints were set\r\n            (ifos[_contractAddress].campaignId < 1) ||\r\n            (ifos[_contractAddress].numberPoints < 1)\r\n        ) {\r\n            return false;\r\n        } else {\r\n            // 4. Can claim\r\n            return true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeProfileAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxViewLength\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdToClaim\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberPoints\",\"type\":\"uint256\"}],\"name\":\"IFOAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberPoints\",\"type\":\"uint256\"}],\"name\":\"addIFOAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"checkClaimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_contractAddresses\",\"type\":\"address[]\"}],\"name\":\"checkClaimStatuses\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"getPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ifos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxViewLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxViewLength\",\"type\":\"uint256\"}],\"name\":\"updateMaxViewLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PointCenterIFO", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000df4dbf6536201370f95e06a0f8a7a70fe40e388a000000000000000000000000000000000000000000000000000000000000000a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b9bf5e3d956712e958d2288b37ba808a647e2452ab3d10c378e9793cba75978"}