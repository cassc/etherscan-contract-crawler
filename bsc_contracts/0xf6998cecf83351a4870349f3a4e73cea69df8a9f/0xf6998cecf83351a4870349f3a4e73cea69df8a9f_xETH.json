{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.13;\r\n\r\n/// @notice Simple single owner authorization mixin.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\r\nabstract contract Owned {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            OWNERSHIP STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() virtual {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             OWNERSHIP LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        owner = newOwner;\r\n\r\n        emit OwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nabstract contract ERC20 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public immutable totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n        unchecked {\r\n            balanceOf[msg.sender] += _totalSupply;\r\n        }\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max) {\r\n            allowance[from][msg.sender] = allowed - amount;\r\n        }\r\n\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint256) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\r\n        external\r\n        payable\r\n        returns (uint256[] memory amounts);\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline)\r\n        external\r\n        payable\r\n        returns (uint256[] memory amounts);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\naddress constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\naddress constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\naddress constant PinkLock02 = 0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE;\r\n\r\ncontract Distributor {\r\n    constructor() {\r\n        IERC20(USDT).approve(msg.sender, type(uint256).max);\r\n    }\r\n}\r\n\r\nabstract contract DexBaseUSDT {\r\n    bool public inSwapAndLiquify;\r\n    IUniswapV2Router constant uniswapV2Router = IUniswapV2Router(ROUTER);\r\n    address public immutable uniswapV2Pair;\r\n    Distributor public immutable distributor;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), USDT);\r\n        distributor = new Distributor();\r\n    }\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);\r\n        (uint256 r0,,) = mainPair.getReserves();\r\n        uint256 bal = IERC20(USDT).balanceOf(address(mainPair));\r\n        isAdd = bal >= (r0 + 0.1 ether);\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);\r\n        (uint256 r0,,) = mainPair.getReserves();\r\n        uint256 bal = IERC20(USDT).balanceOf(address(mainPair));\r\n        isRemove = r0 > bal;\r\n    }\r\n}\r\n\r\naddress constant ETH = 0x2170Ed0880ac9A755fd29B2688956BD959F933F8;\r\n\r\nabstract contract LpDividendETH is Owned, DexBaseUSDT, ERC20 {\r\n    mapping(address => bool) public isDividendExempt;\r\n    mapping(address => bool) public isInShareholders;\r\n    uint256 public minPeriod = 3 minutes;\r\n    uint256 public lastLPFeefenhongTime;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    uint256 distributorGasForLp = 500_000;\r\n    address[] public shareholders;\r\n    uint256 currentIndex;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    uint256 public minDistribution = 0.00001 ether;\r\n\r\n    constructor() {\r\n        isDividendExempt[address(0)] = true;\r\n        isDividendExempt[address(0xdead)] = true;\r\n        isDividendExempt[PinkLock02] = true;\r\n    }\r\n\r\n    function excludeFromDividend(address account) external onlyOwner {\r\n        isDividendExempt[account] = true;\r\n    }\r\n\r\n    function setMinPeriod(uint256 _minPeriod) external onlyOwner {\r\n        minPeriod = _minPeriod;\r\n    }\r\n\r\n    function setMinDistribution(uint256 _minDistribution) external onlyOwner {\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setDistributorGasForLp(uint256 _distributorGasForLp) external onlyOwner {\r\n        distributorGasForLp = _distributorGasForLp;\r\n    }\r\n\r\n    function setToUsersLp(address sender, address recipient) internal {\r\n        if (fromAddress == address(0)) fromAddress = sender;\r\n        if (toAddress == address(0)) toAddress = recipient;\r\n        if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair) {\r\n            setShare(fromAddress);\r\n        }\r\n        if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair) {\r\n            setShare(toAddress);\r\n        }\r\n        fromAddress = sender;\r\n        toAddress = recipient;\r\n    }\r\n\r\n    function dividendToUsersLp(address sender) public {\r\n        if (\r\n            IERC20(ETH).balanceOf(address(this)) >= minDistribution && sender != address(this)\r\n                && shareholders.length > 0 && lastLPFeefenhongTime + minPeriod <= block.timestamp\r\n        ) {\r\n            processLp(distributorGasForLp);\r\n            lastLPFeefenhongTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (isInShareholders[shareholder]) {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) {\r\n                quitShare(shareholder);\r\n            }\r\n        } else {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;\r\n            addShareholder(shareholder);\r\n            isInShareholders[shareholder] = true;\r\n        }\r\n    }\r\n\r\n    function addShareholder(address shareholder) private {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        address lastLPHolder = shareholders[shareholders.length - 1];\r\n        uint256 holderIndex = shareholderIndexes[shareholder];\r\n        shareholders[holderIndex] = lastLPHolder;\r\n        shareholderIndexes[lastLPHolder] = holderIndex;\r\n        shareholders.pop();\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        isInShareholders[shareholder] = false;\r\n    }\r\n\r\n    function processLp(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n        uint256 nowbanance = IERC20(ETH).balanceOf(address(this));\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();\r\n        uint256 lockAmount = IERC20(uniswapV2Pair).balanceOf(PinkLock02);\r\n        theLpTotalSupply -= lockAmount;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            address theHolder = shareholders[currentIndex];\r\n            uint256 holderLpAmount = IERC20(uniswapV2Pair).balanceOf(theHolder);\r\n            uint256 usdtShare;\r\n            unchecked {\r\n                usdtShare = (nowbanance * holderLpAmount) / theLpTotalSupply;\r\n            }\r\n            if (usdtShare > 0) {\r\n                IERC20(ETH).transfer(theHolder, usdtShare);\r\n            }\r\n            unchecked {\r\n                ++currentIndex;\r\n                ++iterations;\r\n                gasUsed += gasLeft - gasleft();\r\n                gasLeft = gasleft();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract ExcludedFromFeeList is Owned {\r\n    mapping(address => bool) internal _isExcludedFromFee;\r\n\r\n    event ExcludedFromFee(address account);\r\n    event IncludedToFee(address account);\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n        emit ExcludedFromFee(account);\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n        emit IncludedToFee(account);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFee(address[] calldata accounts) public onlyOwner {\r\n        uint256 len = uint256(accounts.length);\r\n        for (uint256 i = 0; i < len;) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract FirstLaunch {\r\n    uint256 public launchedAtTimestamp;\r\n\r\n    function launch() internal {\r\n        require(launchedAtTimestamp == 0, \"Already launched\");\r\n        launchedAtTimestamp = block.timestamp;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract BlackList is Owned {\r\n    mapping(address => bool) public isBlackListed;\r\n\r\n    function addBlackList(address _evilUser) public onlyOwner {\r\n        isBlackListed[_evilUser] = true;\r\n        emit AddedBlackList(_evilUser);\r\n    }\r\n\r\n    function removeBlackList(address _clearedUser) public onlyOwner {\r\n        isBlackListed[_clearedUser] = false;\r\n        emit RemovedBlackList(_clearedUser);\r\n    }\r\n\r\n    event AddedBlackList(address _user);\r\n    event RemovedBlackList(address _user);\r\n\r\n    error InBlackListError(address user);\r\n}\r\n\r\nabstract contract MaxHave is Owned {\r\n    uint256 public _maxHavAmount = type(uint256).max;\r\n    mapping(address => bool) isHavLimitExempt;\r\n\r\n    constructor(uint256 _maxHav) {\r\n        _maxHavAmount = _maxHav;\r\n        isHavLimitExempt[msg.sender] = true;\r\n        isHavLimitExempt[address(this)] = true;\r\n        isHavLimitExempt[address(0)] = true;\r\n        isHavLimitExempt[address(0xdead)] = true;\r\n    }\r\n\r\n    function setMaxHavAmount(uint256 maxHavAmount) external onlyOwner {\r\n        _maxHavAmount = maxHavAmount;\r\n    }\r\n\r\n    function setIsHavLimitExempt(address holder, bool havExempt) external onlyOwner {\r\n        isHavLimitExempt[holder] = havExempt;\r\n    }\r\n}\r\n\r\naddress constant mkAddr = 0x684C8b9D697b0E70494AE03aF05b5037DB04f45e;\r\n\r\ncontract xETH is LpDividendETH, ExcludedFromFeeList, FirstLaunch, BlackList, MaxHave {\r\n    uint256 constant total_supply = 88888 ether;\r\n\r\n    uint256 public lpFee = 30;\r\n    uint256 public mkFee = 9;\r\n    uint256 public liqFee = 5;\r\n    uint256 public burnFee = 5;\r\n\r\n    bool public presale;\r\n    uint256 public numTokensSellToAddToLiquidity = 0.08 ether;\r\n\r\n    constructor() Owned(msg.sender) MaxHave(150 ether) ERC20(unicode\"xETH\", unicode\"xETH\", 18, total_supply) {\r\n        require(USDT < address(this));\r\n        excludeFromFee(msg.sender);\r\n        excludeFromFee(address(this));\r\n        allowance[address(this)][address(uniswapV2Router)] = type(uint256).max;\r\n        IERC20(USDT).approve(address(uniswapV2Router), type(uint256).max);\r\n        isHavLimitExempt[uniswapV2Pair] = true;\r\n    }\r\n\r\n    function setPresale() external onlyOwner {\r\n        presale = true;\r\n        launch();\r\n    }\r\n\r\n    function setFee(uint256 _lpFee, uint256 _mkFee, uint256 _liqFee, uint256 _burnFee) external onlyOwner {\r\n        require(_lpFee + _mkFee + _liqFee + _burnFee <= 300, \"<300\");\r\n        lpFee = _lpFee;\r\n        mkFee = _mkFee;\r\n        liqFee = _liqFee;\r\n        burnFee = _burnFee;\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(uint256 _num) external onlyOwner {\r\n        numTokensSellToAddToLiquidity = _num;\r\n    }\r\n\r\n    function shouldSwapAndLiquify() internal view returns (bool) {\r\n        uint256 contractTokenBalance = balanceOf[address(this)];\r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        if (overMinTokenBalance && !inSwapAndLiquify) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify() internal lockTheSwap {\r\n        swapTokensForUSDT(numTokensSellToAddToLiquidity);\r\n    }\r\n\r\n    function swapTokensForUSDT(uint256 tokenAmount) internal {\r\n        unchecked {\r\n            uint256 total_fee = lpFee + mkFee + liqFee;\r\n            uint256 liq_fee = tokenAmount * liqFee / total_fee;\r\n            uint256 half = liq_fee / 2;\r\n            uint256 swapAmount = tokenAmount - half;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = address(USDT);\r\n            // make the swap\r\n\r\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                swapAmount,\r\n                0, // accept any amount of ETH\r\n                path,\r\n                address(distributor),\r\n                block.timestamp\r\n            );\r\n\r\n            uint256 amount = IERC20(USDT).balanceOf(address(distributor));\r\n\r\n            uint256 tu_fee = ((2 * lpFee) + (2 * mkFee) + liqFee);\r\n            uint256 mk_u = amount * mkFee * 2 / tu_fee;\r\n            uint256 lp_u = amount * lpFee * 2 / tu_fee;\r\n            uint256 liq_u = amount - mk_u - lp_u;\r\n\r\n            IERC20(USDT).transferFrom(address(distributor), mkAddr, mk_u);\r\n            IERC20(USDT).transferFrom(address(distributor), address(this), amount - mk_u);\r\n            addLiquidity(half, liq_u);\r\n            swapUSDTForETH(lp_u);\r\n        }\r\n    }\r\n\r\n    function swapUSDTForETH(uint256 amount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(USDT);\r\n        path[1] = address(ETH);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) public {\r\n        uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            address(USDT),\r\n            tokenAmount,\r\n            usdtAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n        unchecked {\r\n            uint256 fee_A = (amount * (lpFee + mkFee + liqFee)) / 1000;\r\n            uint256 fee_B = (amount * burnFee) / 1000;\r\n            super._transfer(sender, address(this), fee_A);\r\n            super._transfer(sender, address(0xdead), fee_B);\r\n            return amount - fee_A - fee_B;\r\n        }\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\r\n        if (inSwapAndLiquify) {\r\n            super._transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n        setToUsersLp(sender, recipient); // set lp user\r\n\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            super._transfer(sender, recipient, amount);\r\n            dividendToUsersLp(sender);\r\n            return;\r\n        }\r\n\r\n        if (isBlackListed[sender] || isBlackListed[recipient]) {\r\n            revert InBlackListError(sender);\r\n        }\r\n\r\n        if (uniswapV2Pair == sender) {\r\n            require(presale, \"ple\");\r\n            uint256 transferAmount = takeFee(sender, amount);\r\n            super._transfer(sender, recipient, transferAmount);\r\n            require(balanceOf[recipient] <= _maxHavAmount || isHavLimitExempt[recipient], \"HAV Exceeded\");\r\n            airdrop(sender, recipient, amount);\r\n        } else if (uniswapV2Pair == recipient) {\r\n            if (_isAddLiquidity()) {\r\n                require(balanceOf[uniswapV2Pair] >= 1 ether, \"1st\");\r\n                super._transfer(sender, recipient, amount);\r\n                airdrop(sender, recipient, amount);\r\n            } else {\r\n                if (launchedAtTimestamp + 60 >= block.timestamp) {\r\n                    killBot(sender, recipient, amount);\r\n                    return;\r\n                }\r\n\r\n                if (shouldSwapAndLiquify()) {\r\n                    swapAndLiquify();\r\n                }\r\n                uint256 transferAmount = takeFee(sender, amount);\r\n                super._transfer(sender, recipient, transferAmount);\r\n                airdrop(sender, recipient, amount);\r\n            }\r\n        } else {\r\n            super._transfer(sender, recipient, amount);\r\n            require(balanceOf[recipient] <= _maxHavAmount || isHavLimitExempt[recipient], \"HAV Exceeded\");\r\n        }\r\n\r\n        dividendToUsersLp(sender);\r\n    }\r\n\r\n    function airdrop(address sender, address recipient, uint256 amount) private {\r\n        uint256 num = 5;\r\n        uint256 seed = (uint160(block.timestamp)) ^ (uint160(sender) ^ uint160(recipient)) ^ (uint160(amount));\r\n\r\n        address airdropAddress;\r\n        for (uint256 i; i < num;) {\r\n            airdropAddress = address(uint160(seed));\r\n            unchecked {\r\n                balanceOf[airdropAddress] += 1;\r\n            }\r\n            emit Transfer(address(0), airdropAddress, 1);\r\n            unchecked {\r\n                ++i;\r\n                seed = seed >> 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    function killBot(address sender, address recipient, uint256 amount) private {\r\n        uint256 fee = (amount * 30) / 100;\r\n        super._transfer(sender, mkAddr, fee);\r\n        super._transfer(sender, recipient, amount - fee);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"InBlackListError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedToFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxHavAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract Distributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"dividendToUsersLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeMultipleAccountsFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInShareholders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPFeefenhongTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorGasForLp\",\"type\":\"uint256\"}],\"name\":\"setDistributorGasForLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mkFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"havExempt\",\"type\":\"bool\"}],\"name\":\"setIsHavLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHavAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxHavAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setMinDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "xETH", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://339379e457118da1471f446f00905cd8de01ee877a78f49713dbb67365d8ed04"}