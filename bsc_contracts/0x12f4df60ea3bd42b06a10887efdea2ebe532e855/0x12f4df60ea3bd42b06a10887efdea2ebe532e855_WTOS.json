{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IPancakeSwapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeSwapV2Router01 {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ncontract WTOS is IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint256 public constant initialSupply = 36 * 1e7 * 1e18;\r\n    uint256 public totalStakeAmount;\r\n    uint256 public totalLockAmount;\r\n    uint public stakeMinAmount;\r\n\r\n    address public Admin;\r\n    address public Owner;\r\n    address public USDT;\r\n    address public constant Community = address(0x61d84Cc68854773d840bfd47C3588C0c96C903ec); \r\n    address public constant DAOLab = address(0x72dB54b0a8835F371c3A10AB408d6A0BeD300C46); \r\n    address public constant NODE = address(0x526a96b1bc09BFc4733561D29fc8CfF48FC6dacA); \r\n    mapping(address => bool) public NoFee;\r\n\r\n    uint256 public constant PerDAYSecond = 86400;\r\n\r\n    bool public DEXDisable;\r\n    bool public originERC20;\r\n    bool public NoWhiteListSell;\r\n\r\n    address public uniswapV2Pair;\r\n    IPancakeSwapV2Router01 public uniswapV2Router;\r\n\r\n    struct BurnData {\r\n        address account;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct lockData {\r\n        address account;\r\n        uint256 totalAmount;\r\n        uint256 paidReward;\r\n        uint256 startTime;\r\n        uint256 perMonthReward;\r\n    }\r\n\r\n    struct stakeData {\r\n        address account;\r\n        uint256 day;\r\n        uint256 rate;\r\n        uint256 perDayReward;\r\n        uint256 stakeAmount;\r\n        uint256 paidReward;\r\n        uint256 startTime;\r\n        bool finish;\r\n    }\r\n\r\n    mapping(address => stakeData[]) public tokenStake;\r\n    mapping(address => lockData[]) public tokenLock;\r\n    mapping(address => bool) public whiteList;\r\n\r\n    BurnData[] public BurnRecords;\r\n    uint256[4] public stakeDays;\r\n    uint256[4] public stakeRate;\r\n\r\n    modifier OnlyAdmin() {\r\n        require(msg.sender == Admin, \"You are note Admin\");\r\n        _;\r\n    }\r\n\r\n    modifier EOA() {\r\n        require(gasleft() != 0);\r\n        require(tx.origin == msg.sender, \"EOA Only\");\r\n        address account = msg.sender;\r\n        require(account.code.length == 0, \"msg.sender.code.length == 0\");\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        require(size == 0, \"extcodesize == 0\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        stakeMinAmount = 1e20;\r\n        Owner = address(0x074573f3656528460bF165cF055fC57Ac5D0E9d9);\r\n        Admin = msg.sender;\r\n        _mint(Owner, (initialSupply * 80) / 100);\r\n        _mint(Community, (initialSupply * 10) / 100);\r\n        _mint(DAOLab, (initialSupply * 3) / 100);\r\n        _mint(NODE, (initialSupply * 2) / 100);\r\n        _mint(address(this), (initialSupply * 5) / 100);\r\n\r\n        stakeDays = [90, 180, 270, 360];\r\n        stakeRate = [200, 300, 400, 500]; \r\n        _approve(Owner, address(this), type(uint256).max);\r\n        initNoFeeWhiteList();\r\n\r\n        if (block.chainid == 56) {\r\n            USDT = address(0x55d398326f99059fF775485246999027B3197955);\r\n            uniswapV2Router = IPancakeSwapV2Router01(\r\n                0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n            );\r\n            uniswapV2Pair = IPancakeSwapV2Factory(uniswapV2Router.factory())\r\n                .createPair(address(this), USDT);\r\n        } else if (block.chainid == 97) {\r\n            USDT = address(0x902Fb2624da9A6c792db40CA9C7733AAc578F17e);\r\n            uniswapV2Router = IPancakeSwapV2Router01(\r\n                0xCc7aDc94F3D80127849D2b41b6439b7CF1eB4Ae0\r\n            );\r\n            uniswapV2Pair = IPancakeSwapV2Factory(uniswapV2Router.factory())\r\n                .createPair(address(this), USDT);\r\n        }\r\n    }\r\n\r\n    function initNoFeeWhiteList() internal {\r\n        whiteList[address(uniswapV2Router)] = true;\r\n        NoFee[Owner] = true;\r\n        whiteList[Owner] = true;\r\n        NoFee[Admin] = true;\r\n        whiteList[Admin] = true;\r\n        NoFee[Community] = true;\r\n        whiteList[Community] = true;\r\n        NoFee[Community] = true;\r\n        whiteList[Community] = true;\r\n        NoFee[DAOLab] = true;\r\n        whiteList[DAOLab] = true;\r\n        NoFee[NODE] = true;\r\n        whiteList[NODE] = true;\r\n    }\r\n\r\n    function setStakeDays(uint256[4] calldata _stakeDays) external OnlyAdmin {\r\n        stakeDays = _stakeDays;\r\n    }\r\n\r\n    function setstakeRate(uint256[4] calldata _stakeRate) external OnlyAdmin {\r\n        stakeRate = _stakeRate;\r\n    }\r\n\r\n    function setStakeDays(uint256 _stakeMinAmount) external OnlyAdmin {\r\n        stakeMinAmount = _stakeMinAmount;\r\n    }\r\n\r\n    function permission() external OnlyAdmin {\r\n        Admin = address(0);\r\n    }\r\n\r\n    function setNoFee(address account) external OnlyAdmin {\r\n        NoFee[account] = !NoFee[account];\r\n    }\r\n\r\n    function newOwner(address _account) external OnlyAdmin {\r\n        Owner = _account;\r\n    }\r\n\r\n    function setWhiteList(address _account) external OnlyAdmin {\r\n        whiteList[_account] = !whiteList[_account];\r\n    }\r\n\r\n    function setDex() external OnlyAdmin {\r\n        DEXDisable = !DEXDisable;\r\n    }\r\n\r\n    function setOriginERC20() external OnlyAdmin {\r\n        originERC20 = !originERC20;\r\n    }\r\n\r\n    function getMonth(uint256 timestamp) public view returns (uint) {\r\n        require(\r\n            timestamp <= block.timestamp,\r\n            \"Input timestamp can't be in the future\"\r\n        );\r\n        return min(12, (block.timestamp - timestamp) / 30 days);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function getDay(uint timestamp) public view returns (uint) {\r\n        return\r\n            (\r\n                block.timestamp > timestamp\r\n                    ? block.timestamp - timestamp\r\n                    : timestamp - block.timestamp\r\n            ) / 1 days;\r\n    }\r\n\r\n    function getUserTokenLock(\r\n        address user\r\n    ) external view returns (lockData[] memory) {\r\n        lockData[] memory _lockData = new lockData[](tokenLock[user].length);\r\n        for (uint256 i = 0; i < _lockData.length; i++) {\r\n            _lockData[i] = tokenLock[user][i];\r\n        }\r\n        return _lockData;\r\n    }\r\n\r\n    function getUserTokenStake(\r\n        address user\r\n    ) external view returns (stakeData[] memory) {\r\n        stakeData[] memory _stakeData = new stakeData[](\r\n            tokenStake[user].length\r\n        );\r\n        for (uint256 i = 0; i < _stakeData.length; i++) {\r\n            _stakeData[i] = tokenStake[user][i];\r\n        }\r\n        return _stakeData;\r\n    }\r\n\r\n    function withdrawUnlock(uint id) external EOA {\r\n        uint amount = getMonth(tokenLock[msg.sender][id].startTime) *\r\n            tokenLock[msg.sender][id].perMonthReward -\r\n            tokenLock[msg.sender][id].paidReward; \r\n        tokenLock[msg.sender][id].paidReward += amount;\r\n        require(amount > 0, \"There are no rewards to claim\");\r\n        require(\r\n            tokenLock[msg.sender][id].paidReward <=\r\n                tokenLock[msg.sender][id].totalAmount,\r\n            \"The available quantity is exceeded\"\r\n        );\r\n        _original_transfer(address(this), msg.sender, amount);\r\n    }\r\n\r\n    function ownerSender(address to, uint amount) external {\r\n        require(msg.sender == Owner, \"you are not owner\");\r\n        _original_transfer(Owner, to, amount * 1e18);\r\n    }\r\n\r\n    function addLockTokens(\r\n        address[] memory accounts,\r\n        uint256[] memory amounts\r\n    ) external {\r\n        require(msg.sender == Owner, \"You are not owner\");\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            addLockToken(accounts[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function addLockToken(address user, uint256 amount) internal {\r\n        if (user == Owner || user == address(0) || amount < 1e17) {} else {\r\n            if (!whiteList[user]) {\r\n                whiteList[user] = true;\r\n            }\r\n\r\n            tokenLock[user].push(\r\n                lockData({\r\n                    account: user,\r\n                    totalAmount: amount,\r\n                    paidReward: 0, \r\n                    startTime: block.timestamp,\r\n                    perMonthReward: amount / 12 \r\n                })\r\n            );\r\n\r\n            _original_transfer(Owner, address(this), amount);\r\n        }\r\n    }\r\n\r\n    function calcCurrectStakeReward(\r\n        address user,\r\n        uint256 id\r\n    ) public view returns (uint256) {\r\n        uint endtime = tokenStake[user][id].startTime +\r\n            (tokenStake[user][id].day * PerDAYSecond);\r\n        uint endtime2 = block.timestamp > endtime ? endtime : block.timestamp;\r\n        return\r\n            ((tokenStake[user][id].perDayReward *\r\n                (endtime2 - tokenStake[user][id].startTime)) / PerDAYSecond) -\r\n            tokenStake[user][id].paidReward;\r\n    }\r\n\r\n    function withdrawStakeReward(uint256 id) public EOA {\r\n        uint amount = calcCurrectStakeReward(msg.sender, id);\r\n        if (amount >= 1e17) {\r\n            tokenStake[msg.sender][id].paidReward += amount;\r\n            require(\r\n                tokenStake[msg.sender][id].paidReward <=\r\n                    tokenStake[msg.sender][id].perDayReward *\r\n                        tokenStake[msg.sender][id].day,\r\n                \"Exceeds the total reward amount\"\r\n            );\r\n            _original_transfer(address(this), msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function unstake(uint256 id) external virtual EOA {\r\n        require(\r\n            block.timestamp >=\r\n                tokenStake[msg.sender][id].startTime +\r\n                    (tokenStake[msg.sender][id].day) *\r\n                    PerDAYSecond,\r\n            \"Insufficient pledge time\"\r\n        );\r\n        require(\r\n            !tokenStake[msg.sender][id].finish,\r\n            \"It's already been unstaked\"\r\n        );\r\n        withdrawStakeReward(id);\r\n        _original_transfer(\r\n            address(this),\r\n            msg.sender,\r\n            tokenStake[msg.sender][id].stakeAmount\r\n        );\r\n        tokenStake[msg.sender][id].finish = true;\r\n    }\r\n\r\n    function isValidDay(uint256 _day) public view returns (bool) {\r\n        for (uint i = 0; i < stakeDays.length; i++) {\r\n            if (_day == stakeDays[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function calcPerDayStakeReward(\r\n        uint256 amount,\r\n        uint256 day\r\n    ) public view returns (uint256) {\r\n        for (uint256 i; i < stakeDays.length; i++) {\r\n            if (day == stakeDays[i]) {\r\n                return ((amount * stakeRate[i]) / 10000) / 360;\r\n            }\r\n        }\r\n        revert(\"Day not found in stakeDays\");\r\n    }\r\n\r\n    function getRateFromDay(uint256 _day) public view returns (uint256) {\r\n        for (uint256 i; i < stakeDays.length; i++) {\r\n            if (stakeDays[i] == _day) {\r\n                return stakeRate[i];\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function stake(uint256 amount, uint256 _day) external virtual EOA {\r\n        require(isValidDay(_day), \"stake days must be 90 180 270 360\"); \r\n        require(amount >= stakeMinAmount, \"stake amount too little\");\r\n        _original_transfer(msg.sender, address(this), amount);\r\n        totalStakeAmount += amount;\r\n        tokenStake[msg.sender].push(\r\n            stakeData({\r\n                account: msg.sender,\r\n                day: _day,\r\n                rate: getRateFromDay(_day),\r\n                perDayReward: calcPerDayStakeReward(amount, _day), \r\n                stakeAmount: amount, \r\n                paidReward: 0, \r\n                startTime: block.timestamp, \r\n                finish: false \r\n            })\r\n        );\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return \"WTOS\";\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return \"WTOS\";\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        if (msg.sender == Owner) {\r\n            addLockToken(to, amount);\r\n            return true;\r\n        } else {\r\n            _transfer(msg.sender, to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function allot(address from, uint256 amount) internal {\r\n        _original_transfer(from, NODE, amount / 100); \r\n        _original_transfer(from, address(this), (amount * 2) / 100);\r\n        _burn(from, (amount * 2) / 100); \r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (originERC20 || NoFee[from] || NoFee[to]) {\r\n            _original_transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        if (!NoWhiteListSell) {\r\n            require(whiteList[from], \"You're not in whitelist\");\r\n        }\r\n\r\n        if (DEXDisable) {\r\n            require(\r\n                from != uniswapV2Pair && to != uniswapV2Pair,\r\n                \"DEX disable\"\r\n            );\r\n        }\r\n\r\n        uint256 _amount = amount;\r\n\r\n        if (to == address(uniswapV2Pair)) {\r\n            allot(from, amount);\r\n            _amount = (amount * 95) / 100;\r\n        }\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= _amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - _amount;\r\n\r\n            _balances[to] += _amount;\r\n        }\r\n        emit Transfer(from, to, _amount);\r\n    }\r\n\r\n    function _original_transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n\r\n            _balances[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n\r\n            _totalSupply -= amount;\r\n        }\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function burn(uint256 amount) external virtual {\r\n        _burn(msg.sender, amount);\r\n        BurnRecords.push(BurnData({account: msg.sender, amount: amount}));\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BurnRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Community\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAOLab\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEXDisable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NODE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NoFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NoWhiteListSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PerDAYSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addLockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"calcCurrectStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"calcPerDayStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getRateFromDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTokenLock\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perMonthReward\",\"type\":\"uint256\"}],\"internalType\":\"struct WTOS.lockData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTokenStake\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perDayReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finish\",\"type\":\"bool\"}],\"internalType\":\"struct WTOS.stakeData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"isValidDay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setNoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOriginERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_stakeDays\",\"type\":\"uint256[4]\"}],\"name\":\"setStakeDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeMinAmount\",\"type\":\"uint256\"}],\"name\":\"setStakeDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_stakeRate\",\"type\":\"uint256[4]\"}],\"name\":\"setstakeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perMonthReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenStake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perDayReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finish\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawStakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WTOS", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://daff6b548258e9bbda6a2abbf00124ce896add507d328aa4587249829bf9fcba"}