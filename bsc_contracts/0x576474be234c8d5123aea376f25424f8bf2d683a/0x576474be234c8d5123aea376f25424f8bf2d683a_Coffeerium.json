{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n// Telegram : https://t.me/Coffeerium\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\ncontract Coffeerium is Context, IERC20 { \r\n    address public _owner;\r\n    address public Wallet_Liquidity;\r\n    address payable public Wallet_Marketing;\r\n    address public constant Wallet_Burn = 0x000000000000000000000000000000000000dEaD;\r\n    string private  _name;\r\n    string private  _symbol;\r\n    uint256 private _decimals;\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    string private _website;\r\n    string private _telegram;\r\n    string private _lplock;\r\n    uint256 private max_Hold;\r\n    uint256 private max_Tran;\r\n    uint8 public _fee__Buy_Liquidity;\r\n    uint8 public _fee__Buy_Marketing;\r\n    uint8 public _fee__Buy_Reflection;\r\n    uint8 public _fee__Buy_Burn;\r\n    uint8 public _fee__Sell_Liquidity;\r\n    uint8 public _fee__Sell_Marketing;\r\n    uint8 public _fee__Sell_Reflection;\r\n    uint8 public _fee__Sell_Burn;\r\n    uint8 private _SwapFeeTotal_Buy;\r\n    uint8 private _SwapFeeTotal_Sell;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    constructor (string memory      _TokenName, \r\n                 string memory      _TokenSymbol,  \r\n                 uint256            _TotalSupply, \r\n                 uint256            _Decimals,\r\n                 address payable    _OwnerWallet) {\r\n        emit TokenCreated(address(this));\r\n        _name               = _TokenName;\r\n        _symbol             = _TokenSymbol;\r\n        _decimals           = _Decimals;\r\n        _tTotal             = _TotalSupply * 10**_Decimals;\r\n        _rTotal             = (MAX - (MAX % _tTotal));\r\n        max_Hold            = _tTotal;\r\n        max_Tran            = _tTotal;\r\n        _owner = _OwnerWallet;\r\n        Wallet_Liquidity = _owner;\r\n        Wallet_Marketing = payable(_owner);\r\n        _isWhiteListed[_owner] = true;\r\n        _isLimitExempt[_owner] = true;\r\n        _isLimitExempt[address(this)] = true;\r\n        _isLimitExempt[Wallet_Burn] = true;\r\n        _isExcludedFromFee[_owner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[Wallet_Burn] = true;\r\n        _isExcludedFromRewards[Wallet_Burn] = true;\r\n        _isExcludedFromRewards[address(this)] = true;\r\n        _excluded.push(Wallet_Burn);\r\n        _excluded.push(address(this));\r\n        _rOwned[_owner] = _rTotal; \r\n        emit Transfer(address(0), _owner, _tTotal);\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event updated_Wallet_Limits(uint256 max_Tran, uint256 max_Hold);\r\n    event updated_Buy_fees(uint8 Marketing, uint8 Liquidity, uint8 Reflection, uint8 Burn);\r\n    event updated_Sell_fees(uint8 Marketing, uint8 Liquidity, uint8 Reflection, uint8 Burn);\r\n    event updated_SwapAndLiquify_Enabled(bool Swap_and_Liquify_Enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event TokenCreated(address indexed Token_CA);\r\n    event LiquidityAdded(uint256 Tokens_Amount, uint256 BNB_Amount);\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    mapping (address => uint256) private _tOwned;                               \r\n    mapping (address => uint256) private _rOwned;                               \r\n    mapping (address => mapping (address => uint256)) private _allowances;      \r\n    mapping (address => bool) public _isExcludedFromFee;                        \r\n    mapping (address => bool) public _isExcludedFromRewards;                    \r\n    mapping (address => bool) public _isWhiteListed;                            \r\n    mapping (address => bool) public _isLimitExempt;                            \r\n    mapping (address => bool) public _isPair;                                   \r\n    address[] private _excluded;                                                \r\n    uint256 private swapTrigger = 11; \r\n    uint256 private swapCounter = 1;    \r\n    bool public processingFees;\r\n    bool public feeProcessingEnabled; \r\n    bool public Trade_Open;\r\n    bool public no_Fee_Transfers = true;   \r\n    bool public burnFromSupply;            \r\n    bool private takeFee;\r\n    function Project_Information() external view returns(address Owner_Wallet,\r\n                                                       uint256 Transaction_Limit,\r\n                                                       uint256 Max_Wallet,\r\n                                                       uint256 Fee_When_Buying,\r\n                                                       uint256 Fee_When_Selling,\r\n                                                       string memory Website,\r\n                                                       string memory Telegram,\r\n                                                       string memory Liquidity_Lock) {\r\n        uint256 Total_buy =  _fee__Buy_Liquidity    +\r\n                             _fee__Buy_Reflection   +\r\n                             _fee__Buy_Marketing    +\r\n                             _fee__Buy_Burn;\r\n        uint256 Total_sell = _fee__Sell_Liquidity   +\r\n                             _fee__Sell_Reflection  +\r\n                             _fee__Sell_Marketing   +\r\n                             _fee__Sell_Burn;\r\n        uint256 _max_Hold = max_Hold / 10 ** _decimals;\r\n        uint256 _max_Tran = max_Tran / 10 ** _decimals;\r\n        if (_max_Tran > _max_Hold) {\r\n            _max_Tran = _max_Hold;\r\n        }\r\n        return (_owner,\r\n                _max_Tran,\r\n                _max_Hold,\r\n                Total_buy,\r\n                Total_sell,\r\n                _website,\r\n                _telegram,\r\n                _lplock);\r\n    }\r\n    function Set_Presale_CA(address Presale_CA) external onlyOwner {\r\n        _isExcludedFromFee[Presale_CA] = true; \r\n        _isLimitExempt[Presale_CA] = true;\r\n        _isWhiteListed[Presale_CA] = true;\r\n    }\r\n    function Set_Fees(\r\n        uint8 Marketing_on_BUY, \r\n        uint8 Liquidity_on_BUY, \r\n        uint8 Reflection_on_BUY,\r\n        uint8 Burn_on_BUY,\r\n        uint8 Marketing_on_SELL,\r\n        uint8 Liquidity_on_SELL,\r\n        uint8 Reflection_on_SELL,\r\n        uint8 Burn_on_SELL\r\n        ) external onlyOwner {\r\n        require (Marketing_on_BUY + Liquidity_on_BUY + Reflection_on_BUY + Burn_on_BUY <= 15, \"FEE1\");  \r\n        require (Marketing_on_SELL + Liquidity_on_SELL + Reflection_on_SELL + Burn_on_SELL <= 15, \"FEE2\");  \r\n        _fee__Buy_Marketing   = Marketing_on_BUY;\r\n        _fee__Buy_Liquidity   = Liquidity_on_BUY;\r\n        _fee__Buy_Reflection  = Reflection_on_BUY;\r\n        _fee__Buy_Burn        = Burn_on_BUY;\r\n        _fee__Sell_Marketing   = Marketing_on_SELL;\r\n        _fee__Sell_Liquidity   = Liquidity_on_SELL;\r\n        _fee__Sell_Reflection  = Reflection_on_SELL;\r\n        _fee__Sell_Burn        = Burn_on_SELL;\r\n        _SwapFeeTotal_Sell   = _fee__Sell_Marketing + _fee__Sell_Liquidity;\r\n        _SwapFeeTotal_Buy    = _fee__Buy_Marketing + _fee__Buy_Liquidity;\r\n        emit updated_Buy_fees(_fee__Buy_Marketing, _fee__Buy_Liquidity, _fee__Buy_Reflection, _fee__Buy_Burn);\r\n        emit updated_Sell_fees(_fee__Sell_Marketing, _fee__Sell_Liquidity, _fee__Sell_Reflection, _fee__Sell_Burn);\r\n    }\r\n    function Set_Wallet_Limits(\r\n        uint256 Max_Transaction_Percent,\r\n        uint256 Max_Wallet_Percent\r\n        ) external onlyOwner {\r\n        if (Max_Transaction_Percent < 1){\r\n            max_Tran = _tTotal / 200;\r\n        } else {\r\n            max_Tran = _tTotal * Max_Transaction_Percent / 100;\r\n        }\r\n        if (Max_Wallet_Percent < 1){\r\n            max_Hold = _tTotal / 200;\r\n        } else {\r\n            max_Hold = _tTotal * Max_Wallet_Percent / 100;\r\n        }\r\n        emit updated_Wallet_Limits(max_Tran, max_Hold);\r\n    }\r\n    function Open_Trade() external onlyOwner {\r\n        require(!Trade_Open, \"TradeOpen\"); \r\n        feeProcessingEnabled = true;\r\n        Trade_Open = true;\r\n        if (uniswapV2Router == IUniswapV2Router02(0x0000000000000000000000000000000000000000)){\r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n            uniswapV2Router = _uniswapV2Router;\r\n        }\r\n        if (uniswapV2Pair == address(0x0000000000000000000000000000000000000000)) {\r\n            address pairCreated = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(this), uniswapV2Router.WETH());\r\n                if (pairCreated == address(0x0000000000000000000000000000000000000000)){\r\n                    uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n                } else {\r\n                    uniswapV2Pair = pairCreated;\r\n                }\r\n        }\r\n        if (!_isPair[uniswapV2Pair]){_isPair[uniswapV2Pair] = true;} \r\n        if (!_isLimitExempt[uniswapV2Pair]){_isLimitExempt[uniswapV2Pair] = true;}\r\n        if (!_isExcludedFromRewards[uniswapV2Pair]){\r\n            if(_rOwned[uniswapV2Pair] > 0) {\r\n                _tOwned[uniswapV2Pair] = tokenFromReflection(_rOwned[uniswapV2Pair]);\r\n            }\r\n            _isExcludedFromRewards[uniswapV2Pair] = true;\r\n            _excluded.push(uniswapV2Pair);\r\n            }\r\n    }\r\n    function addLiquidityPair(\r\n        address Wallet_Address,\r\n        bool true_or_false)\r\n        external onlyOwner {\r\n        _isPair[Wallet_Address] = true_or_false;\r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    } \r\n    function burnFromTotalSupply(bool true_or_false) external onlyOwner {\r\n        burnFromSupply = true_or_false;\r\n    }\r\n    function noFeeWalletTransfers(bool true_or_false) external onlyOwner {\r\n        no_Fee_Transfers = true_or_false;\r\n    }\r\n    function swapAndLiquifySwitch(bool true_or_false) external onlyOwner {\r\n        feeProcessingEnabled = true_or_false;\r\n        emit updated_SwapAndLiquify_Enabled(true_or_false);\r\n    }\r\n    function swapTriggerCount(uint256 Transaction_Count) external onlyOwner {\r\n        swapTrigger = Transaction_Count + 1; \r\n    }\r\n    function swapAndLiquifyNow(uint256 Percent_of_Tokens_to_Process) external onlyOwner {\r\n        require(!processingFees, \"E15\"); \r\n        if (Percent_of_Tokens_to_Process > 100){Percent_of_Tokens_to_Process = 100;}\r\n        uint256 tokensOnContract = balanceOf(address(this));\r\n        uint256 sendTokens = tokensOnContract * Percent_of_Tokens_to_Process / 100;\r\n        processFees(sendTokens);\r\n    } \r\n    function rescueTrappedTokens(\r\n        address random_Token_Address,\r\n        uint256 number_of_Tokens\r\n        ) external onlyOwner {\r\n            require (random_Token_Address != address(this), \"E16\"); \r\n            IERC20(random_Token_Address).transfer(msg.sender, number_of_Tokens);\r\n    }\r\n    function Update_Links_LP_Lock(\r\n        string memory LP_Lock_URL\r\n        ) external onlyOwner{\r\n        _lplock = LP_Lock_URL;\r\n    }\r\n    function Update_Links_Telegram(\r\n        string memory Telegram_Group\r\n        ) external onlyOwner{\r\n        _telegram = Telegram_Group;\r\n    }\r\n    function Update_Links_Website(\r\n        string memory Website_URL\r\n        ) external onlyOwner{\r\n        _website = Website_URL;\r\n    }\r\n    function Update_Wallet_Liquidity(\r\n        address Liquidity_Collection_Wallet\r\n        ) external onlyOwner {\r\n        require(Liquidity_Collection_Wallet != address(0), \"E07\"); \r\n        Wallet_Liquidity = Liquidity_Collection_Wallet;\r\n    }\r\n    function Update_Wallet_Marketing(\r\n        address payable Marketing_Wallet\r\n        ) external onlyOwner {\r\n        require(Marketing_Wallet != address(0), \"E08\"); \r\n        Wallet_Marketing = payable(Marketing_Wallet);\r\n    }\r\n    function Rewards_Exclude_Wallet(address account) public onlyOwner() {\r\n        require(!_isExcludedFromRewards[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcludedFromRewards[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n    function Rewards_Include_Wallet(address account) external onlyOwner() {\r\n        require(_isExcludedFromRewards[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcludedFromRewards[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    function Wallet_Exempt_From_Limits(\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n        ) external onlyOwner {  \r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    }\r\n    function Wallet_Exclude_From_Fees(\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n        ) external onlyOwner {\r\n        _isExcludedFromFee[Wallet_Address] = true_or_false;\r\n    }\r\n    function Wallet_Pre_Launch_Access(\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n        ) external onlyOwner {    \r\n        _isWhiteListed[Wallet_Address] = true_or_false;\r\n    }\r\n    function ownership_RENOUNCE() public virtual onlyOwner {\r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhiteListed[owner()]     = false;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function ownership_TRANSFER(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"ZEROADD\"); \r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhiteListed[owner()]     = false;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcludedFromRewards[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function tokenFromReflection(uint256 _rAmount) internal view returns(uint256) {\r\n        require(_rAmount <= _rTotal, \"rAmount can not be greater than rTotal\");\r\n        uint256 currentRate =  _getRate();\r\n        return _rAmount / currentRate;\r\n    }\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n    function send_BNB(address _to, uint256 _amount) internal returns (bool SendSuccess) {\r\n        (SendSuccess,) = payable(_to).call{value: _amount}(\"\");\r\n    }\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_tTotal - balanceOf(address(Wallet_Burn)));\r\n    }\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n      ) private {\r\n        require(balanceOf(from) >= amount, \"TO1\"); \r\n        if (!Trade_Open && from != address(this)){\r\n            require(_isWhiteListed[from] || _isWhiteListed[to], \"TO2\");  \r\n        }\r\n        if (!_isLimitExempt[to] && from != owner()) {\r\n            uint256 heldTokens = balanceOf(to);\r\n            require((heldTokens + amount) <= max_Hold, \"WL\"); \r\n        }\r\n        if (!_isLimitExempt[to] || !_isLimitExempt[from]){\r\n            require(amount <= max_Tran, \"TL\"); \r\n        }\r\n        require(from != address(0), \"FROM0\"); \r\n        require(to != address(0), \"TO0\"); \r\n        require(amount > 0, \"AMT0\"); \r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || (no_Fee_Transfers && !_isPair[to] && !_isPair[from])){\r\n            takeFee = false;\r\n        } else {\r\n            takeFee = true;\r\n        }\r\n        if (_isPair[to] && !processingFees && feeProcessingEnabled) {\r\n            if(swapCounter >= swapTrigger){\r\n                uint256 contractTokens = balanceOf(address(this));\r\n                if (contractTokens > 0) {\r\n                    if (contractTokens <= max_Tran) {\r\n                        processFees (contractTokens);\r\n                        } else {\r\n                        processFees (max_Tran);\r\n                    }\r\n                }\r\n            }  \r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n    function processFees(uint256 Tokens) private {\r\n        processingFees = true;\r\n        uint8 _LiquidityTotal   = _fee__Buy_Liquidity + _fee__Sell_Liquidity;\r\n        uint8 _FeesTotal        = _SwapFeeTotal_Buy + _SwapFeeTotal_Sell;\r\n        uint256 LP_Tokens       = Tokens * _LiquidityTotal / _FeesTotal / 2;\r\n        uint256 Swap_Tokens     = Tokens - LP_Tokens;\r\n        uint256 contract_BNB    = address(this).balance;\r\n        swapTokensForBNB(Swap_Tokens);\r\n        uint256 returned_BNB    = address(this).balance - contract_BNB;\r\n        uint256 fee_Split       = _FeesTotal * 2 - _LiquidityTotal;\r\n        if (_LiquidityTotal > 0 ) {\r\n            uint256 BNB_Liquidity = returned_BNB * _LiquidityTotal / fee_Split;\r\n            addLiquidity(LP_Tokens, BNB_Liquidity);\r\n            emit SwapAndLiquify(LP_Tokens, BNB_Liquidity, LP_Tokens);\r\n        }\r\n        contract_BNB = address(this).balance;\r\n        if (contract_BNB > 0){\r\n            send_BNB(Wallet_Marketing, contract_BNB);\r\n        }\r\n        swapCounter = 1;\r\n        processingFees = false;\r\n    }\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function addLiquidity(uint256 tokenAmount, uint256 BNBAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: BNBAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0,\r\n            Wallet_Liquidity, \r\n            block.timestamp\r\n        );\r\n    } \r\n    uint256 private tBurn;\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool Fee) private {\r\n    uint256  tReflect;\r\n    uint256  tSwapFeeTotal;\r\n        if (Fee){\r\n            if(_isPair[recipient]){\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Sell    / 100;\r\n                tReflect        = tAmount * _fee__Sell_Reflection / 100;\r\n                tBurn           = tAmount * _fee__Sell_Burn       / 100;\r\n            } else {\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Buy     / 100;\r\n                tReflect        = tAmount * _fee__Buy_Reflection  / 100;\r\n                tBurn           = tAmount * _fee__Buy_Burn        / 100;\r\n            }\r\n        } else {\r\n                tSwapFeeTotal   = 0;\r\n                tReflect        = 0;\r\n                tBurn           = 0;\r\n        }\r\n        uint256 tTransferAmount = tAmount - (tSwapFeeTotal + tReflect + tBurn);\r\n        uint256 RFI     = _getRate(); \r\n        uint256 rAmount         = tAmount       * RFI;\r\n        uint256 rBurn           = tBurn         * RFI;\r\n        uint256 rReflect        = tReflect      * RFI;\r\n        uint256 rSwapFeeTotal   = tSwapFeeTotal * RFI;\r\n        uint256 rTransferAmount = rAmount - (rReflect + rSwapFeeTotal + rBurn);\r\n        _rOwned[sender] -= rAmount;\r\n        if(_isExcludedFromRewards[sender]){\r\n            _tOwned[sender] -= tAmount;\r\n        }\r\n        if (recipient == Wallet_Burn && burnFromSupply) {\r\n            _tTotal -= tTransferAmount;\r\n            _rTotal -= rTransferAmount;\r\n            } else {\r\n                _rOwned[recipient] += rTransferAmount;\r\n                if(_isExcludedFromRewards[recipient]){\r\n                    _tOwned[recipient] += tTransferAmount;\r\n                }\r\n            }\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if(tReflect > 0){\r\n            _rTotal -= rReflect;\r\n            _tFeeTotal += tReflect;\r\n        }\r\n        if(tSwapFeeTotal > 0){\r\n            _rOwned[address(this)] += rSwapFeeTotal;\r\n            if(_isExcludedFromRewards[address(this)]){_tOwned[address(this)] += tSwapFeeTotal;}\r\n            emit Transfer(sender, address(this), tSwapFeeTotal);\r\n            if(swapCounter < swapTrigger){\r\n                unchecked{swapCounter++;}\r\n            }\r\n        }\r\n        if(tBurn > 0){\r\n            if(burnFromSupply){\r\n                _tTotal -= tBurn;\r\n                _rTotal -= rBurn;\r\n                } else {\r\n                _rOwned[Wallet_Burn] += rBurn;\r\n                if(_isExcludedFromRewards[Wallet_Burn]){_tOwned[Wallet_Burn] += tBurn;}\r\n                emit Transfer(sender, Wallet_Burn, tBurn);\r\n            }\r\n        }\r\n    }\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_TokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_TokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_TotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Decimals\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_OwnerWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Tokens_Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BNB_Amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Token_CA\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Marketing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Liquidity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Reflection\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Burn\",\"type\":\"uint8\"}],\"name\":\"updated_Buy_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Marketing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Liquidity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Reflection\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Burn\",\"type\":\"uint8\"}],\"name\":\"updated_Sell_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Swap_and_Liquify_Enabled\",\"type\":\"bool\"}],\"name\":\"updated_SwapAndLiquify_Enabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Tran\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Hold\",\"type\":\"uint256\"}],\"name\":\"updated_Wallet_Limits\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Open_Trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Project_Information\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"Owner_Wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Transaction_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Wallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Selling\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Liquidity_Lock\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Rewards_Exclude_Wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Rewards_Include_Wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Marketing_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Liquidity_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Reflection_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Burn_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Marketing_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Liquidity_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Reflection_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Burn_on_SELL\",\"type\":\"uint8\"}],\"name\":\"Set_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Presale_CA\",\"type\":\"address\"}],\"name\":\"Set_Presale_CA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Max_Transaction_Percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Wallet_Percent\",\"type\":\"uint256\"}],\"name\":\"Set_Wallet_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Trade_Open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"LP_Lock_URL\",\"type\":\"string\"}],\"name\":\"Update_Links_LP_Lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Telegram_Group\",\"type\":\"string\"}],\"name\":\"Update_Links_Telegram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Website_URL\",\"type\":\"string\"}],\"name\":\"Update_Links_Website\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Liquidity_Collection_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Marketing_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Marketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Burn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet_Exclude_From_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet_Exempt_From_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Liquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet_Pre_Launch_Access\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Buy_Burn\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Buy_Liquidity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Buy_Marketing\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Buy_Reflection\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Sell_Burn\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Sell_Liquidity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Sell_Marketing\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Sell_Reflection\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"addLiquidityPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFromSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"burnFromTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeProcessingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"noFeeWalletTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"no_Fee_Transfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownership_RENOUNCE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownership_TRANSFER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"random_Token_Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number_of_Tokens\",\"type\":\"uint256\"}],\"name\":\"rescueTrappedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Percent_of_Tokens_to_Process\",\"type\":\"uint256\"}],\"name\":\"swapAndLiquifyNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"swapAndLiquifySwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Transaction_Count\",\"type\":\"uint256\"}],\"name\":\"swapTriggerCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Coffeerium", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000001200000000000000000000000062a04e224eb07c4a0aa2f97c487b260fbffbdea1000000000000000000000000000000000000000000000000000000000000000a436f666665657269756d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006434f464645450000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://95ea941f8ede364467f6e1e0e7a47f309713b35453af417e47d7f56dbfc74dab"}