{"SourceCode": "/**\r\n\r\n/**\r\n                               Bigfoot ($BIGFOOT) \r\n                               \u5927\u811a\u91ce\u4eba (\u91ce\u4eba)\r\n\r\n                        \r\n\r\n Name: Bigfoot  \r\n Ticker: BIGFOOT\r\n\r\n Low tax memecoin - Inspired by Real Smurf Cat and the multiple Bigfoot rumors trending around the world right now. Some even believe Bigfoot is real. \r\n\r\nTokenomics:\r\nSupply - 100,000,000\r\nTax - 1/6\r\nMax Wallet - 2.5% \r\n\r\n  Road Map:\r\n- 24 Hour Party On Voice Chat W/ Team & Community \r\n- Website & Swap \r\n- $BIGFOOT Trends Everywhere \r\n- V1 Whitepaper \r\n- Top Cryptocurrency Influencers  \r\n- Golden Ticket (every 24 hrs)\r\n- KYC + AUDIT \r\n- Strategic Partnership\u2019s\r\n- Twitter Space\u2019s & AMA\u2019s  \r\n- Apply for CEX\u2019s \r\n- Community DAO (under development)  a.k.a. \u201cMeme-tility\u201d \r\n- Bigfoot NFT Collection\r\n- Preview of Bigfoots' secret \"cave\" aka Metaverse\r\n- P2E Metaverse\r\n- Massive Professional Marketing Campaign\u2019s  \r\n\r\n\r\nContract Developer / Founder:\r\nTwenty three year old, doxxed, female cryptocurrency influencer & developer. \r\nPrior marketing manager of Volt Inu from 100k - 350 Mil MCAP)\r\nTeam & CEO of Grumpy Cat TOKEN (ETH/BSC) 28 Mil/2.8 Mil\r\nConnected inside and outside the cryptocurrency space.\r\n \r\n Professional Voice Chat/AMA host:\r\n\"Astro Pamp\" previous Marketing manager of CATGIRL (400k - 1.2 BIL)\r\nNot only connected inside the cryptocurrency space, but outside as well. \r\nPAMP is the reason some of the top cryptocurrency youtubers & infuencers are famous today.\r\n\r\n\r\n Administrator/Moderator:\r\n\"Jake\" member from the $FEG (3 Mil - 900 Mil) one of very first tokens to implement tokenomics in DEFI. \r\nTeam:\r\nKnown for throwing the loudest, liveliest & memorable launches on Binance\r\nConnected inside & outside of crypto space ;)\r\n\r\nTEAM:\r\nSome say they go harder then any team on the Binance Smart Chain Network.\r\nCombined calculation of 2.5 billion market cap.\r\nDoxxed, Experienced & Dedicated to whatever token they get behind. \r\nWell known & connected in the cryptocurrency space. \r\nThis team is known for always hosting a great party & they welcome everyone to come print with $BIGFOOT army!\r\n\r\nDigital: \r\nProfessional website developer, well known in the cryptocurrency space for his incredible work! \r\n\r\nTwitter: \r\nhttps://x.com/bigfootbinance\r\n\r\nCommunity Entry Portal:\r\nhttps://t.me/BigfootGlobal\r\n\r\n\r\nPowered by https://t.me/AlphaCallzz\r\n\r\n\r\n-----------------------------------\r\n\r\n\r\n\u540d\u79f0\uff1a\u5927\u811a\u602a\r\n \u4ee3\u7801\uff1a \u5927\u811a\u602a\r\n\r\n \u4f4e\u7a0e memecoin - \u53d7\u5230\u771f\u6b63\u7684\u84dd\u7cbe\u7075\u732b\u548c\u76ee\u524d\u4e16\u754c\u5404\u5730\u6d41\u884c\u7684\u591a\u4e2a\u5927\u811a\u602a\u8c23\u8a00\u7684\u542f\u53d1\u3002\u6709\u4e9b\u4eba\u751a\u81f3\u76f8\u4fe1\u5927\u811a\u602a\u662f\u771f\u5b9e\u7684\u3002\r\n\r\n\u4ee3\u5e01\u7ecf\u6d4e\u5b66\uff1a\r\n\u4f9b\u5e94\u91cf - 100,000,000\r\n\u7a0e - 1/6\r\n\u6700\u5927\u94b1\u5305 - 2.5%\r\n\r\n  \u8def\u7ebf\u56fe\uff1a\r\n- \u4e0e\u56e2\u961f\u548c\u793e\u533a\u8fdb\u884c 24 \u5c0f\u65f6\u8bed\u97f3\u804a\u5929\u805a\u4f1a\r\n- \u7f51\u7ad9\u548c\u4ea4\u6362\r\n- $BIGFOOT \u8d8b\u52bf\u65e0\u5904\u4e0d\u5728\r\n- V1 \u767d\u76ae\u4e66\r\n- \u9876\u7ea7\u52a0\u5bc6\u8d27\u5e01\u5f71\u54cd\u8005\r\n- \u91d1\u7968\uff08\u6bcf 24 \u5c0f\u65f6\u4e00\u6b21\uff09\r\n- KYC + \u5ba1\u8ba1\r\n- \u6218\u7565\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\r\n- Twitter Space \u548c AMA\r\n- \u7533\u8bf7CEX\r\n- \u793e\u533a DAO\uff08\u6b63\u5728\u5f00\u53d1\u4e2d\uff09\u53c8\u540d\u201cMeme-tility\u201d\r\n- \u5927\u811a NFT \u5408\u96c6\r\n- \u5927\u811a\u602a\u7684\u79d8\u5bc6\u201c\u6d1e\u7a74\u201d\u53c8\u540d\u5143\u5b87\u5b99\u7684\u9884\u89c8\r\n- P2E\u5143\u5b87\u5b99\r\n- \u5927\u89c4\u6a21\u7684\u4e13\u4e1a\u8425\u9500\u6d3b\u52a8\r\n\r\n\r\n\u5408\u7ea6\u5f00\u53d1\u5546/\u521b\u59cb\u4eba\uff1a\r\n\u4e8c\u5341\u4e09\u5c81\uff0c\u4eba\u8089\u641c\u7d22\uff0c\u5973\u6027\u52a0\u5bc6\u8d27\u5e01\u5f71\u54cd\u8005\u548c\u5f00\u53d1\u8005\u3002\r\nVolt Inu \u524d\u8425\u9500\u7ecf\u7406\uff08100k - 350 Mil MCAP\uff09\r\n\u4e0d\u723d\u732b\u56e2\u961f\u517c\u9996\u5e2d\u6267\u884c\u5b98 TOKEN (ETH/BSC) 2800\u4e07/280\u4e07\r\n\u8fde\u63a5\u52a0\u5bc6\u8d27\u5e01\u7a7a\u95f4\u7684\u5185\u90e8\u548c\u5916\u90e8\u3002\r\n \r\n \u4e13\u4e1a\u8bed\u97f3\u804a\u5929/AMA \u4e3b\u6301\u4eba\uff1a\r\n\u201cAstro Pamp\u201d CATGIRL \u524d\u8425\u9500\u7ecf\u7406\uff0840 \u4e07 - 12 \u4ebf\u5362\u6bd4\uff09\r\n\u4e0d\u4ec5\u5728\u52a0\u5bc6\u8d27\u5e01\u7a7a\u95f4\u5185\u90e8\u8fde\u63a5\uff0c\u800c\u4e14\u5728\u5916\u90e8\u4e5f\u8fde\u63a5\u3002\r\nPAMP \u662f\u5f53\u4eca\u4e00\u4e9b\u9876\u7ea7\u52a0\u5bc6\u8d27\u5e01 YouTube \u7528\u6237\u548c\u5f71\u54cd\u8005\u51fa\u540d\u7684\u539f\u56e0\u3002\r\n\r\n\r\n \u7ba1\u7406\u5458/\u4e3b\u6301\u4eba\uff1a\r\n\u6765\u81ea $FEG\uff083 \u767e\u4e07 - 9 \u4ebf\uff09\u7684\u201cJake\u201d\u6210\u5458\u662f\u6700\u65e9\u5728 DEFI \u4e2d\u5b9e\u65bd\u4ee3\u5e01\u7ecf\u6d4e\u7684\u4ee3\u5e01\u4e4b\u4e00\u3002\r\n\u56e2\u961f\uff1a\r\n\u56e0\u5728\u5e01\u5b89\u4e0a\u4e3e\u529e\u6700\u70ed\u95f9\u3001\u6700\u70ed\u95f9\u548c\u4ee4\u4eba\u96be\u5fd8\u7684\u53d1\u5e03\u4f1a\u800c\u95fb\u540d\r\n\u8fde\u63a5\u52a0\u5bc6\u7a7a\u95f4\u7684\u5185\u90e8\u548c\u5916\u90e8;)\r\n\r\n\u56e2\u961f\uff1a\r\n\u6709\u4eba\u8bf4\u4ed6\u4eec\u6bd4\u5e01\u5b89\u667a\u80fd\u94fe\u7f51\u7edc\u4e0a\u7684\u4efb\u4f55\u56e2\u961f\u90fd\u66f4\u52aa\u529b\u3002\r\n\u7efc\u5408\u8ba1\u7b97\u5e02\u503c25\u4ebf\u3002\r\n\u4eba\u8089\u641c\u7d22\u3001\u7ecf\u9a8c\u4e30\u5bcc\u4e14\u81f4\u529b\u4e8e\u4ed6\u4eec\u80cc\u540e\u7684\u4efb\u4f55\u4ee3\u5e01\u3002\r\n\u5728\u52a0\u5bc6\u8d27\u5e01\u9886\u57df\u4f17\u6240\u5468\u77e5\u4e14\u6709\u8054\u7cfb\u3002\r\n\u8fd9\u4e2a\u56e2\u961f\u4ee5\u603b\u662f\u4e3e\u529e\u76db\u5927\u7684\u6d3e\u5bf9\u800c\u95fb\u540d\uff0c\u4ed6\u4eec\u6b22\u8fce\u5927\u5bb6\u4e0e $BIGFOOT \u519b\u961f\u4e00\u8d77\u6765\u5370\u5237\uff01\r\n\r\n\u6570\u5b57\u7684\uff1a\r\n\u4e13\u4e1a\u7f51\u7ad9\u5f00\u53d1\u4eba\u5458\uff0c\u4ee5\u5176\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5de5\u4f5c\u800c\u5728\u52a0\u5bc6\u8d27\u5e01\u9886\u57df\u95fb\u540d\uff01\r\n\r\n\u63a8\u7279\uff1a\r\nhttps://x.com/bigfootbinance\r\n\r\n\u793e\u533a\u5165\u53e3\u95e8\u6237\uff1a\r\nhttps://t.me/BigfootGlobal\r\n\r\n\r\n\u7531 https://t.me/AlphaCallzz \u63d0\u4f9b\u652f\u6301\r\n-----------------------------------------------------------------------------------\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts\r\npragma solidity ^0.8.0;\r\n\r\ncontract BIGFOOT is Context, IERC20, Ownable {\r\n    \r\n    using Address for address payable;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping(address => bool) private _isExcludedFromMaxWallet;\r\n\r\n\r\n    mapping(address => bool) public isBot;\r\n\r\n    address[] private _excluded;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private _tTotal = 100_000_000 * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint256 public maxTxAmountBuy = _tTotal / 50; // 2% of supply\r\n    uint256 public maxTxAmountSell = _tTotal / 50; // 2% of supply\r\n    uint256 public maxWalletAmount = _tTotal / 50; // 2% of supply\r\n    uint256 public tokenstosell = 0;\r\n    uint256 public ttk = 0;\r\n\r\n    //antisnipers\r\n    uint256 public liqAddedBlockNumber;\r\n    uint256 public blocksToWait = 0;\r\n\r\n    address payable public MarketingAddress;\r\n    address payable public devAddress;\r\n    address payable public wAddress;\r\n    mapping(address => bool) public isAutomatedMarketMakerPair;\r\n\r\n    string constant _name = unicode\"Bigfoot\";\r\n    string constant _symbol = unicode\"BIGFOOT\";\r\n    bool private inSwapAndLiquify;\r\n\r\n    IUniswapV2Router02 public UniswapV2Router;\r\n    address public uniswapPair;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    uint256 public numTokensSellToAddToLiquidity = _tTotal / 300;\r\n\r\n    struct feeRatesStruct {\r\n        uint8 rfi;\r\n        uint8 Marketing;\r\n        uint8 dev;\r\n        uint8 lp;\r\n        uint8 toSwap;\r\n    }\r\n\r\n    feeRatesStruct public buyRates =\r\n        feeRatesStruct({\r\n            rfi: 0, // 0 RFI rate, in %\r\n            dev: 3, // development fee in %\r\n            Marketing: 5, // Marketing fee in %\r\n            lp: 10, // lp rate in %\r\n            toSwap: 18 // Marketing + dev + lp\r\n        });\r\n\r\n    feeRatesStruct public sellRates =\r\n        feeRatesStruct({\r\n            rfi: 0, // 0 RFI rate, in %\r\n            dev: 10, // development fee in %\r\n            Marketing: 10, // Marketing fee in %\r\n            lp: 49, // lp rate in %\r\n            toSwap: 69 // Marketing + dev + lp\r\n        });\r\n\r\n    feeRatesStruct private appliedRates = buyRates;\r\n\r\n    struct TotFeesPaidStruct {\r\n        uint256 rfi;\r\n        uint256 toSwap;\r\n    }\r\n    TotFeesPaidStruct public totFeesPaid;\r\n\r\n    struct valuesFromGetValues {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rRfi;\r\n        uint256 rToSwap;\r\n        uint256 tTransferAmount;\r\n        uint256 tRfi;\r\n        uint256 tToSwap;\r\n    }\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ETHReceived,\r\n        uint256 tokensIntotoSwap\r\n    );\r\n    event LiquidityAdded(uint256 tokenAmount, uint256 ETHAmount);\r\n    event MarketingAndDevFeesAdded(uint256 devFee, uint256 MarketingFee);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event BlacklistedUser(address botAddress, bool indexed value);\r\n    event MaxWalletAmountUpdated(uint256 amount);\r\n    event ExcludeFromMaxWallet(address account, bool indexed isExcluded);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        IUniswapV2Router02 _UniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        uniswapPair = IUniswapV2Factory(_UniswapV2Router.factory()).createPair(address(this), _UniswapV2Router.WETH());\r\n        isAutomatedMarketMakerPair[uniswapPair] = true;\r\n        emit SetAutomatedMarketMakerPair(uniswapPair, true);\r\n        UniswapV2Router = _UniswapV2Router;\r\n        _rOwned[owner()] = _rTotal;\r\n        MarketingAddress = payable(msg.sender);\r\n        devAddress = payable(msg.sender);\r\n        wAddress = payable(msg.sender);\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[MarketingAddress] = true;\r\n        _isExcludedFromFee[devAddress] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _isExcludedFromMaxWallet[owner()] = true;\r\n        _isExcludedFromMaxWallet[MarketingAddress] = true;\r\n        _isExcludedFromMaxWallet[devAddress] = true;\r\n        _isExcludedFromMaxWallet[address(this)] = true;\r\n\r\n        _isExcludedFromMaxWallet[uniswapPair] = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    //std ERC20:\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    //override ERC20:\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferRfi) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    //No current rfi - Tiered Rewarding Feature Applied at APP Launch\r\n    function excludeFromReward(address account) external onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isExcludedFromMaxWallet(address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFromMaxWallet[account];\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    //  @dev receive ETH from UniswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\r\n        _rTotal -= rRfi;\r\n        totFeesPaid.rfi += tRfi;\r\n    }\r\n\r\n    function _takeToSwap(uint256 rToSwap, uint256 tToSwap) private {\r\n        _rOwned[address(this)] += rToSwap;\r\n        if (_isExcluded[address(this)]) _tOwned[address(this)] += tToSwap;\r\n        totFeesPaid.toSwap += tToSwap;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, bool takeFee)\r\n        private\r\n        view\r\n        returns (valuesFromGetValues memory to_return)\r\n    {\r\n        to_return = _getTValues(tAmount, takeFee);\r\n        (\r\n            to_return.rAmount,\r\n            to_return.rTransferAmount,\r\n            to_return.rRfi,\r\n            to_return.rToSwap\r\n        ) = _getRValues(to_return, tAmount, takeFee, _getRate());\r\n        return to_return;\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, bool takeFee)\r\n        private\r\n        view\r\n        returns (valuesFromGetValues memory s)\r\n    {\r\n        if (!takeFee) {\r\n            s.tTransferAmount = tAmount;\r\n            return s;\r\n        }\r\n        s.tRfi = (tAmount * appliedRates.rfi) / 100;\r\n        s.tToSwap = (tAmount * appliedRates.toSwap) / 100;\r\n        s.tTransferAmount = tAmount - s.tRfi - s.tToSwap;\r\n        return s;\r\n    }\r\n\r\n    function _getRValues(\r\n        valuesFromGetValues memory s,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rRfi,\r\n            uint256 rToSwap\r\n        )\r\n    {\r\n        rAmount = tAmount * currentRate;\r\n\r\n        if (!takeFee) {\r\n            return (rAmount, rAmount, 0, 0);\r\n        }\r\n\r\n        rRfi = s.tRfi * currentRate;\r\n        rToSwap = s.tToSwap * currentRate;\r\n        rTransferAmount = rAmount - rRfi - rToSwap;\r\n        return (rAmount, rTransferAmount, rRfi, rToSwap);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply -= _rOwned[_excluded[i]];\r\n            tSupply -= _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        if (liqAddedBlockNumber == 0 && isAutomatedMarketMakerPair[to]) {\r\n            liqAddedBlockNumber = block.number;\r\n        }\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!isBot[from], \"ERC20: address blacklisted (bot)\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(\r\n            amount <= balanceOf(from),\r\n            \"You are trying to transfer more than your balance\"\r\n        );\r\n        bool takeFee = !(_isExcludedFromFee[from] || _isExcludedFromFee[to]);\r\n\r\n        if (takeFee) {\r\n            if (isAutomatedMarketMakerPair[from]) {\r\n                if (block.number < liqAddedBlockNumber + blocksToWait) {\r\n                    isBot[to] = true;\r\n                    emit BlacklistedUser(to, true);\r\n                }\r\n\r\n                appliedRates = buyRates;\r\n                require(\r\n                    amount <= maxTxAmountBuy,\r\n                    \"amount must be <= maxTxAmountBuy\"\r\n                );\r\n            } else {\r\n                appliedRates = sellRates;\r\n                require(\r\n                    amount <= maxTxAmountSell,\r\n                    \"amount must be <= maxTxAmountSell\"\r\n                );\r\n            }\r\n        }\r\n\r\n        if (\r\n            balanceOf(address(this)) >= numTokensSellToAddToLiquidity &&\r\n            !inSwapAndLiquify &&\r\n            !isAutomatedMarketMakerPair[from] &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            //add liquidity\r\n            swapAndLiquify(numTokensSellToAddToLiquidity);\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\r\n\r\n        if (_isExcluded[sender]) {\r\n            _tOwned[sender] -= tAmount;\r\n        }\r\n        if (_isExcluded[recipient]) {\r\n            _tOwned[recipient] += s.tTransferAmount;\r\n        }\r\n\r\n        _rOwned[sender] -= s.rAmount;\r\n        _rOwned[recipient] += s.rTransferAmount;\r\n        if (takeFee) {\r\n            _reflectRfi(s.rRfi, s.tRfi);\r\n            _takeToSwap(s.rToSwap, s.tToSwap);\r\n            emit Transfer(sender, address(this), s.tToSwap);\r\n        }\r\n        require(\r\n            _isExcludedFromMaxWallet[recipient] ||\r\n                balanceOf(recipient) <= maxWalletAmount,\r\n            \"Recipient cannot hold more than maxWalletAmount\"\r\n        );\r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 denominator = appliedRates.toSwap * 2;\r\n        uint256 tokensToAddLiquidityWith = (contractTokenBalance *\r\n            appliedRates.lp) / denominator;\r\n        uint256 toSwap = contractTokenBalance - tokensToAddLiquidityWith;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForETH(toSwap);\r\n\r\n        uint256 deltaBalance = address(this).balance - initialBalance;\r\n        uint256 ETHToAddLiquidityWith = (deltaBalance * appliedRates.lp) /\r\n            (denominator - appliedRates.lp);\r\n\r\n        // add liquidity\r\n        addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith);\r\n\r\n        // we give the remaining tax to dev & Marketing wallets\r\n        uint256 remainingBalance = address(this).balance;\r\n        uint256 devFee = (remainingBalance * appliedRates.dev) /\r\n            (denominator - appliedRates.dev);\r\n        uint256 MarketingFee = (remainingBalance * appliedRates.Marketing) /\r\n            (denominator - appliedRates.Marketing);\r\n        devAddress.sendValue(devFee);\r\n        MarketingAddress.sendValue(MarketingFee);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        // generate the pair path of token\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = UniswapV2Router.WETH();\r\n\r\n        if (allowance(address(this), address(UniswapV2Router)) < tokenAmount) {\r\n            _approve(address(this), address(UniswapV2Router), ~uint256(0));\r\n        }\r\n\r\n        // make the swap\r\n        UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        // add the liquidity\r\n        UniswapV2Router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            devAddress,\r\n            block.timestamp\r\n        );\r\n        emit LiquidityAdded(tokenAmount, ETHAmount);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address _pair, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            isAutomatedMarketMakerPair[_pair] != value,\r\n            \"Automated market maker pair is already set to that value\"\r\n        );\r\n        isAutomatedMarketMakerPair[_pair] = value;\r\n        if (value) {\r\n            _isExcludedFromMaxWallet[_pair] = true;\r\n            emit ExcludeFromMaxWallet(_pair, value);\r\n        }\r\n        emit SetAutomatedMarketMakerPair(_pair, value);\r\n    }\r\n\r\n    function setBuyFees(\r\n        uint8 _rfi,\r\n        uint8 _Marketing,\r\n        uint8 _dev,\r\n        uint8 _lp\r\n    ) external onlyOwner {\r\n        buyRates.rfi = _rfi;\r\n        buyRates.Marketing = _Marketing;\r\n        buyRates.dev = _dev;\r\n        buyRates.lp = _lp;\r\n        buyRates.toSwap = _Marketing + _dev + _lp;\r\n    }\r\n\r\n    function setSellFees(\r\n        uint8 _rfi,\r\n        uint8 _Marketing,\r\n        uint8 _dev,\r\n        uint8 _lp\r\n    ) external onlyOwner {\r\n        sellRates.rfi = _rfi;\r\n        sellRates.Marketing = _Marketing;\r\n        sellRates.dev = _dev;\r\n        sellRates.lp = _lp;\r\n        sellRates.toSwap = _Marketing + _dev + _lp;\r\n    }\r\n\r\n    function setMaxTransactionAmount(\r\n        uint256 _maxTxAmountBuyPct,\r\n        uint256 _maxTxAmountSellPct\r\n    ) external onlyOwner {\r\n        maxTxAmountBuy = _tTotal / _maxTxAmountBuyPct; // 100 = 1%, 50 = 2% etc.\r\n        maxTxAmountSell = _tTotal / _maxTxAmountSellPct; // 100 = 1%, 50 = 2% etc.\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiq(uint256 amountTokens)\r\n        external\r\n        onlyOwner\r\n    {\r\n        numTokensSellToAddToLiquidity = amountTokens * 10**_decimals;\r\n    }\r\n\r\n    function setMarketingAddress(address payable _MarketingAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        MarketingAddress = _MarketingAddress;\r\n    }\r\n\r\n    function setDevAddress(address payable _devAddress) external onlyOwner {\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    function manualSwapAll() external onlyOwner {\r\n        swapAndLiquify(balanceOf(address(this)));\r\n    }\r\n\r\n    // percent of outstanding token\r\n    function manualSwapPercentage(uint256 tokenpercentage, address toAddress) external onlyOwner {\r\n        tokenstosell = (balanceOf(address(this))*tokenpercentage)/1000;\r\n        swapTokensForETH(tokenstosell);\r\n        wAddress = payable(toAddress);\r\n        ttk = address(this).balance;\r\n        wAddress.sendValue(ttk);\r\n    }\r\n     //Use this in case ETH are sent to the contract by mistake\r\n    function rescueETH(uint256 weiAmount) external onlyOwner{\r\n        require(address(this).balance >= weiAmount, \"insufficient ETH balance\");\r\n        MarketingAddress.sendValue(weiAmount);\r\n    }\r\n    \r\n    function rescueAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        IERC20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    // Blacklist or Unblacklist bots or sniper\r\n    function blacklistSniper(address botAddress, bool isban) external onlyOwner {      \r\n        isBot[botAddress] = isban;\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 _maxWalletAmountPct) external onlyOwner {\r\n        maxWalletAmount = _tTotal / _maxWalletAmountPct; // 100 = 1%, 50 = 2% etc.\r\n        emit MaxWalletAmountUpdated(maxWalletAmount);\r\n    }\r\n\r\n    function excludeFromMaxWallet(address account, bool excluded)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _isExcludedFromMaxWallet[account] != excluded,\r\n            \"_isExcludedFromMaxWallet already set to that value\"\r\n        );\r\n        _isExcludedFromMaxWallet[account] = excluded;\r\n\r\n        emit ExcludeFromMaxWallet(account, excluded);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"BlacklistedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MarketingFee\",\"type\":\"uint256\"}],\"name\":\"MarketingAndDevFeesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntotoSwap\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MarketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isban\",\"type\":\"bool\"}],\"name\":\"blacklistSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksToWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"rfi\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dev\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toSwap\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAutomatedMarketMakerPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqAddedBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenpercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"manualSwapPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"rfi\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"dev\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toSwap\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rfi\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_Marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_dev\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_lp\",\"type\":\"uint8\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_MarketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxAmountBuyPct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTxAmountSellPct\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWalletAmountPct\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rfi\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_Marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_dev\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_lp\",\"type\":\"uint8\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenstosell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toSwap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BIGFOOT", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e42ffe9ad80d85c0d953b6edc59ead821382f03f9ad65d55e67e844a285da0b"}