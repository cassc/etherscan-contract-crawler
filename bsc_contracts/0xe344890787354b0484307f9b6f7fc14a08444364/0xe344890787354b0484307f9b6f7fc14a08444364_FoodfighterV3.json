{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract FoodfighterV3 {\r\n    address public owner;\r\n    uint256 public gameId;\r\n    uint256 public devFeePercentage;\r\n    mapping(uint256 => Game) public games;\r\n    mapping(uint256 => address) public gameWinners;\r\n    uint256[] private activeGameIds;\r\n\r\n    struct Game {\r\n        address player1;\r\n        address player2;\r\n        uint256 wager;\r\n        bool isActive;\r\n    }\r\n\r\n    event GameCreated(uint256 gameId, address player1, uint256 wager);\r\n    event GameJoined(uint256 gameId, address player2);\r\n    event FlipResult(uint256 gameId, address winner, uint256 amount);\r\n    event GameCancelled(uint256 gameId);\r\n\r\n    constructor(uint256 _devFeePercentage) {\r\n        owner = msg.sender;\r\n        devFeePercentage = _devFeePercentage;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n        _;\r\n    }\r\n\r\n    function createGame() public payable {\r\n        require(msg.value > 0, \"Wager must be greater than 0\");\r\n        games[gameId] = Game(msg.sender, address(0), msg.value, true);\r\n        activeGameIds.push(gameId); // Add game ID to active games\r\n        emit GameCreated(gameId, msg.sender, msg.value);\r\n        gameId++;\r\n    }\r\n\r\n    function joinGame(uint256 _gameId) public payable {\r\n        Game storage game = games[_gameId];\r\n        require(game.isActive, \"Game is not active\");\r\n        require(game.player2 == address(0), \"Game already has two players\");\r\n        require(msg.value == game.wager, \"Ether sent must match the wager\");\r\n\r\n        game.player2 = msg.sender;\r\n        emit GameJoined(_gameId, msg.sender);\r\n\r\n        // Execute flip\r\n        bool result = (block.timestamp + uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), _gameId)))) % 2 == 0;\r\n        address winner = result ? game.player1 : game.player2;\r\n\r\n        // Store the winner in the mapping\r\n        gameWinners[_gameId] = winner;\r\n\r\n        uint256 devFee = (game.wager * 2 * devFeePercentage) / 100;\r\n        uint256 prize = (game.wager * 2) - devFee;\r\n        payable(winner).transfer(prize);\r\n        payable(owner).transfer(devFee);\r\n\r\n        game.isActive = false;\r\n        removeActiveGame(_gameId); // Remove game from active games\r\n\r\n        emit FlipResult(_gameId, winner, prize);\r\n    }\r\n\r\n    function cancelGame(uint256 _gameId) public {\r\n        Game storage game = games[_gameId];\r\n        \r\n        require(game.isActive, \"Game is not active\");\r\n        require(game.player1 == msg.sender, \"Only the game creator can cancel\");\r\n        require(game.player2 == address(0), \"Game cannot be cancelled after player 2 joins\");\r\n\r\n        game.isActive = false;\r\n        removeActiveGame(_gameId);\r\n        payable(msg.sender).transfer(game.wager);\r\n        emit GameCancelled(_gameId);\r\n    }\r\n\r\n    function setDevFeePercentage(uint256 _newPercentage) public onlyOwner {\r\n        devFeePercentage = _newPercentage;\r\n    }\r\n\r\n    function getWinner(uint256 _gameId) public view returns (address) {\r\n        require(games[_gameId].isActive == false, \"Game is still active or does not exist\");\r\n        return gameWinners[_gameId];\r\n    }\r\n\r\n    function showActiveGames() public view returns (uint256[] memory) {\r\n        return activeGameIds;\r\n    }\r\n\r\n    function removeActiveGame(uint256 _gameId) private {\r\n        uint256 length = activeGameIds.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (activeGameIds[i] == _gameId) {\r\n                activeGameIds[i] = activeGameIds[length - 1];\r\n                activeGameIds.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FlipResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"GameJoined\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameWinners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showActiveGames\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FoodfighterV3", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000014", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6e80e31a8a544b1a49c664f35ecda5b36ac005f10ae3f2b1c8f20056f05a75ac"}