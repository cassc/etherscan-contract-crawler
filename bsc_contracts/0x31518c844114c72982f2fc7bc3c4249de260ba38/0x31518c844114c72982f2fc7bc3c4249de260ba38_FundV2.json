{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/fundV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"./Interface/ILockedStake.sol\\\";\\r\\nimport \\\"./Library/xWinLib.sol\\\";\\r\\nimport \\\"./Interface/IxWinPriceMaster.sol\\\";\\r\\nimport \\\"./Interface/IxWinSwap.sol\\\";\\r\\nimport \\\"./xWinStrategy.sol\\\";\\r\\nimport \\\"./Interface/IWETH.sol\\\";\\r\\n\\r\\ncontract FundV2 is xWinStrategy {\\r\\n\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    struct userAvgPrice {\\r\\n        uint256 shares;\\r\\n        uint256 avgPrice;\\r\\n    }\\r\\n\\r\\n    mapping(address => bool) public validInvestors; // stores authourised addresses that can use the private fund\\r\\n    mapping(address => userAvgPrice) public performanceMap; // mapping to store performance fee\\r\\n    mapping (address => bool) public waivedPerformanceFees; // stores authourised addresses with fee waived\\r\\n    mapping(address => uint256) public TargetWeight; // stores the weight of the target asset\\r\\n    address[] public targetAddr; // list of target assets\\r\\n    IxWinPriceMaster public priceMaster; // contract address of price Oracle\\r\\n    IxWinSwap public xWinSwap; // contract address for swapping tokens\\r\\n    address public lockingAddress;\\r\\n    address public managerAddr;\\r\\n    address public managerRebAddr;\\r\\n    address public platformWallet;\\r\\n\\r\\n    uint256 public lastFeeCollection;\\r\\n    uint256 public nextRebalance;\\r\\n    uint256 public pendingMFee;\\r\\n    uint256 public pendingPFee;\\r\\n    uint256 private baseTokenAmt;\\r\\n    uint256 public managerFee;\\r\\n    uint256 public platformFee;\\r\\n    uint256 public smallRatio;\\r\\n    uint256 private rebalanceCycle;\\r\\n    uint256 public performFee;\\r\\n    uint256 private blocksPerDay;\\r\\n    uint256 public UPMultiplier;    \\r\\n    bool public openForPublic;\\r\\n\\r\\n    \\r\\n    event Received(address, uint256);\\r\\n    event ManagerFeeUpdate(uint256 fromFee, uint256 toFee, uint256 txnTime);\\r\\n    event ManagerOwnerUpdate(address fromAddress, address toAddress, uint256 txnTime);\\r\\n\\r\\n    function initialize(\\r\\n        string calldata _name,\\r\\n        string calldata _symbol,\\r\\n        address _baseToken,\\r\\n        address _USDAddr,\\r\\n        address _manageraddr,\\r\\n        address _managerRebaddr,\\r\\n        address _platformWallet,\\r\\n        address _lockedStaking\\r\\n    ) initializer external {\\r\\n        require(_baseToken != address(0) , \\\"_baseToken Input 0\\\");\\r\\n        require(_USDAddr != address(0), \\\"_USDAddr Input 0\\\");\\r\\n        require(_manageraddr != address(0), \\\"_manageraddr Input 0\\\");\\r\\n        require(_managerRebaddr != address(0), \\\"_managerRebaddr Input 0\\\");\\r\\n        require(_platformWallet != address(0), \\\"_platformWallet Input 0\\\");\\r\\n        // require(_lockedStaking != address(0), \\\"_lockedStaking Input 0\\\");\\r\\n        \\r\\n        __xWinStrategy_init(_name, _symbol, _baseToken, _USDAddr);\\r\\n        managerAddr = _manageraddr;\\r\\n        managerRebAddr = _managerRebaddr;\\r\\n        platformWallet = _platformWallet;\\r\\n        lockingAddress = _lockedStaking;\\r\\n        _pause();\\r\\n    }\\r\\n    \\r\\n    function init(\\r\\n        uint256 _managerFee, \\r\\n        uint256 _performFee,\\r\\n        uint256 _platformFee,\\r\\n        bool _openForPublic,\\r\\n        uint256 _UPMultiplier,\\r\\n        uint256 _rebalancePeriod,\\r\\n        uint256 _blocksPerDay,\\r\\n        uint256 _smallRatio\\r\\n    ) external onlyOwner whenPaused {\\r\\n        require(_managerFee <= 300, \\\"Manager Fee cap at 3%\\\");\\r\\n        require(_performFee <= 2000, \\\"Performance Fee cap at 20%\\\");\\r\\n        require(_platformFee <= 100, \\\"Platform Fee cap at 1%\\\");\\r\\n\\r\\n        _calcFundFee();\\r\\n        openForPublic = _openForPublic;\\r\\n        managerFee = _managerFee;   \\r\\n        UPMultiplier = _UPMultiplier;\\r\\n        performFee = _performFee;\\r\\n        platformFee = _platformFee;\\r\\n        nextRebalance = block.number + _rebalancePeriod;\\r\\n        lastFeeCollection = block.number;\\r\\n        rebalanceCycle = _rebalancePeriod;\\r\\n        blocksPerDay = _blocksPerDay;\\r\\n        smallRatio = _smallRatio;\\r\\n        _unpause();\\r\\n    }\\r\\n    \\r\\n    function collectFundFee() external {\\r\\n        _calcFundFee();\\r\\n        uint256 toAward = pendingMFee;\\r\\n        pendingMFee = 0;\\r\\n        _mint(managerAddr, toAward);\\r\\n        emitEvent.FeeEvent(\\\"managefee\\\", address(this), toAward);\\r\\n    }\\r\\n\\r\\n    function collectPlatformFee() external {\\r\\n        _calcFundFee();\\r\\n        uint256 toAward = pendingPFee;\\r\\n        pendingPFee = 0;\\r\\n        _mint(platformWallet, toAward);\\r\\n        emitEvent.FeeEvent(\\\"platformfee\\\", address(this), toAward);\\r\\n    }\\r\\n\\r\\n    function _calcFundFee() internal {\\r\\n        uint256 totalblock = block.number - lastFeeCollection;\\r\\n        lastFeeCollection = block.number;\\r\\n        uint256 supply = getFundTotalSupply();\\r\\n\\r\\n        if(supply == 0) return;\\r\\n\\r\\n        // calculate number of shares to create per block\\r\\n        uint256 uPerBlock = supply * 10000 / (10000 - managerFee);\\r\\n        uPerBlock = uPerBlock - supply; // total new blocks generated in a year\\r\\n\\r\\n        // calculate number of shares to create per block for platform\\r\\n        uint256 uPerBlockPlatform = supply * 10000 / (10000 - platformFee);\\r\\n        uPerBlockPlatform = uPerBlockPlatform - supply; // total new blocks generated in a year\\r\\n\\r\\n        // award the shares\\r\\n        pendingMFee += (totalblock * uPerBlock) / (blocksPerDay * 365);\\r\\n        pendingPFee += (totalblock * uPerBlockPlatform) / (blocksPerDay * 365);\\r\\n    }\\r\\n \\r\\n    /// @dev return number of target names\\r\\n    function createTargetNames(address[] calldata _toAddr,  uint256[] calldata _targets) public onlyRebManager {\\r\\n        require(_toAddr.length > 0, \\\"At least one target is required\\\");\\r\\n        require(_toAddr.length == _targets.length, \\\"in array lengths mismatch\\\");\\r\\n        require(!findDup(_toAddr), \\\"Duplicate found in targetArray\\\");\\r\\n        uint256 sum = sumArray(_targets);\\r\\n        require(sum == 10000, \\\"xWinFundV2: Sum must equal 100%\\\");\\r\\n        if (targetAddr.length > 0) {\\r\\n            for (uint256 i = 0; i < targetAddr.length; i++) {\\r\\n                TargetWeight[targetAddr[i]] = 0;\\r\\n            }\\r\\n            delete targetAddr;\\r\\n        }\\r\\n        \\r\\n        for (uint256 i = 0; i < _toAddr.length; i++) {\\r\\n            _getLatestPrice(_toAddr[i]); // ensures that the address provided is supported\\r\\n            TargetWeight[_toAddr[i]] = _targets[i];\\r\\n            targetAddr.push(_toAddr[i]);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /// @dev perform rebalance with new weight and reset next rebalance period\\r\\n    function Rebalance(\\r\\n        address[] calldata _toAddr, \\r\\n        uint256[] calldata _targets,\\r\\n        uint32 _slippage\\r\\n    ) public onlyRebManager {\\r\\n        \\r\\n        xWinLib.DeletedNames[] memory deletedNames = _getDeleteNames(_toAddr);\\r\\n        for (uint256 x = 0; x < deletedNames.length; x++){\\r\\n            if(deletedNames[x].token != address(0)){\\r\\n                  _moveNonIndex(deletedNames[x].token, _slippage);\\r\\n            }\\r\\n            if (deletedNames[x].token == baseToken) {\\r\\n                baseTokenAmt = 0;\\r\\n            }\\r\\n        }\\r\\n        createTargetNames(_toAddr, _targets);        \\r\\n        _rebalance(_slippage);\\r\\n    }\\r\\n\\r\\n    function Rebalance(\\r\\n        address[] calldata _toAddr, \\r\\n        uint256[] calldata _targets\\r\\n    ) external onlyRebManager {\\r\\n        Rebalance(_toAddr, _targets, 0);\\r\\n    }\\r\\n    \\r\\n    /// @dev perform subscription based on ratio setup\\r\\n    function deposit(uint256 amount, uint32 _slippage) public override nonReentrant whenNotPaused returns (uint256) {\\r\\n        return _deposit(amount, _slippage);\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 amount) external override nonReentrant whenNotPaused returns (uint256) {\\r\\n        return _deposit(amount, 0);\\r\\n    }\\r\\n\\r\\n    function _deposit(uint256 amount, uint32 _slippage) internal returns (uint256) {\\r\\n\\r\\n        require(targetAddr.length > 0, \\\"xWinFundV2: This fund is empty\\\");\\r\\n        \\r\\n        if(!openForPublic){\\r\\n            require(validInvestors[msg.sender], \\\"not valid wallet to deposit\\\");\\r\\n        }\\r\\n        // manager fee calculation\\r\\n        _calcFundFee();\\r\\n        uint256 unitPrice = _getUnitPrice();\\r\\n        \\r\\n        // collect deposit and swap into asset\\r\\n        IERC20Upgradeable(baseToken).safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n\\r\\n        if(nextRebalance < block.number){\\r\\n            _rebalance(_slippage);\\r\\n        }else{            \\r\\n            uint256 total = getBalance(baseToken);\\r\\n            total -= baseTokenAmt; // subtract baseTokenAmt\\r\\n            for (uint256 i = 0; i < targetAddr.length; i++) {\\r\\n                uint256 proposalQty = getTargetWeightQty(targetAddr[i], total);\\r\\n                if(proposalQty > 0){\\r\\n                    IERC20Upgradeable(baseToken).safeIncreaseAllowance(address(xWinSwap), proposalQty);\\r\\n                    xWinSwap.swapTokenToToken(proposalQty, baseToken, targetAddr[i], _slippage);\\r\\n                }\\r\\n                if (targetAddr[i] == baseToken) {\\r\\n                    baseTokenAmt += proposalQty;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // mint and log user data\\r\\n        uint256 mintQty = _getMintQty(unitPrice);\\r\\n        _mint(msg.sender, mintQty);\\r\\n        setPerformDeposit(mintQty, unitPrice);\\r\\n\\r\\n        emitEvent.FundEvent(\\\"deposit\\\", address(this), msg.sender, _convertTo18(unitPrice, baseToken), amount, mintQty);\\r\\n        return mintQty;\\r\\n    }\\r\\n    \\r\\n    /// @dev perform redemption based on unit redeem\\r\\n    function withdraw(uint256 amount, uint32 _slippage) public override nonReentrant whenNotPaused returns (uint256){\\r\\n        return _withdraw(amount, _slippage);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) external override nonReentrant whenNotPaused returns (uint256){\\r\\n        return _withdraw(amount, 0);\\r\\n    }\\r\\n\\r\\n    function _withdraw(uint256 amount, uint32 _slippage) internal returns (uint256){\\r\\n\\r\\n        require(IERC20Upgradeable(address(this)).balanceOf(msg.sender) >= amount, \\\"no balance to withdraw\\\");\\r\\n\\r\\n        _calcFundFee();\\r\\n        uint256 unitP = _getUnitPrice();\\r\\n        uint256 redeemratio = amount * 1e18 / getFundTotalSupply();\\r\\n        _burn(msg.sender, amount);\\r\\n        \\r\\n\\t    uint256 totalBase = getBalance(baseToken) - baseTokenAmt;\\r\\n        uint256 entitled = redeemratio * totalBase / 1e18;\\r\\n        uint256 remained = totalBase - entitled;\\r\\n        \\r\\n        for (uint256 i = 0; i < targetAddr.length; i++) {\\r\\n            xWinLib.transferData memory _transferData = _getTransferAmt(targetAddr[i], redeemratio);\\r\\n            if(_transferData.totalTrfAmt > 0) {\\r\\n                IERC20Upgradeable(targetAddr[i]).safeIncreaseAllowance(address(xWinSwap), _transferData.totalTrfAmt);\\r\\n                xWinSwap.swapTokenToToken(_transferData.totalTrfAmt, targetAddr[i], baseToken, _slippage);\\r\\n            }\\r\\n            if (targetAddr[i] == baseToken) {\\r\\n                baseTokenAmt -= _transferData.totalTrfAmt;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 totalOutput = getBalance(baseToken) - baseTokenAmt - remained;\\r\\n        uint256 finalOutput = setPerformWithdraw(totalOutput, amount, msg.sender, managerAddr);\\r\\n        IERC20Upgradeable(baseToken).safeTransfer(msg.sender, finalOutput);\\r\\n        emitEvent.FundEvent(\\\"withdraw\\\", address(this), msg.sender, _convertTo18(unitP, baseToken), finalOutput, amount);\\r\\n\\r\\n        return finalOutput;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /// @dev fund owner move any name back to BNB\\r\\n    function MoveNonIndexNameToBase(address _token, uint32 _slippage) external onlyOwner \\r\\n        returns (uint256 balanceToken, uint256 swapOutput) {\\r\\n            \\r\\n            (balanceToken, swapOutput) = _moveNonIndex(_token, _slippage);\\r\\n            return (balanceToken, swapOutput);\\r\\n    }\\r\\n        \\r\\n        \\r\\n    /// @dev get the proportional token without swapping it in emergency case\\r\\n    function emergencyRedeem(uint256 redeemUnit) external whenPaused {\\r\\n        uint256 redeemratio = redeemUnit * 1e18 / getFundTotalSupply();\\r\\n        require(redeemratio > 0, \\\"redeem ratio is zero\\\");\\r\\n        _burn(msg.sender, redeemUnit);\\r\\n        uint256 totalOutput = redeemratio * (getBalance(baseToken) - baseTokenAmt) / 1e18;\\r\\n        IERC20Upgradeable(baseToken).safeTransfer(msg.sender, totalOutput);\\r\\n        \\r\\n        for (uint256 i = 0; i < targetAddr.length; i++) {\\r\\n            xWinLib.transferData memory _transferData = _getTransferAmt(targetAddr[i], redeemratio);\\r\\n            if(_transferData.totalTrfAmt > 0){\\r\\n                if (targetAddr[i] == baseToken) {\\r\\n                    baseTokenAmt -= _transferData.totalTrfAmt;\\r\\n                }\\r\\n                IERC20Upgradeable(targetAddr[i]).safeTransfer(msg.sender, _transferData.totalTrfAmt);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n        \\r\\n    /// @dev Calc return balance during redemption\\r\\n    function _getTransferAmt(address underying, uint256 redeemratio) \\r\\n        internal view returns (xWinLib.transferData memory transData) {\\r\\n       \\r\\n        xWinLib.transferData memory _transferData;\\r\\n        if (underying == baseToken) {\\r\\n            _transferData.totalUnderlying = baseTokenAmt;\\r\\n        } else {\\r\\n            _transferData.totalUnderlying = getBalance(underying); \\r\\n        }\\r\\n        uint256 qtyToTrf = redeemratio * _transferData.totalUnderlying / 1e18;\\r\\n        _transferData.totalTrfAmt = qtyToTrf;\\r\\n        return _transferData;\\r\\n    }\\r\\n    \\r\\n    /// @dev Calc qty to issue during subscription \\r\\n    function _getMintQty(uint256 _unitPrice) internal view returns (uint256 mintQty)  {\\r\\n        \\r\\n        uint256 vaultValue = _getVaultValues();\\r\\n        uint256 totalSupply = getFundTotalSupply();\\r\\n        if(totalSupply == 0) return _convertTo18(vaultValue / UPMultiplier, baseToken); \\r\\n        uint256 newTotalSupply = vaultValue * 1e18 / _unitPrice;\\r\\n        mintQty = newTotalSupply - totalSupply;\\r\\n        return mintQty;\\r\\n    }\\r\\n    \\r\\n    function _getActiveOverWeight(address destAddr, uint256 totalvalue) \\r\\n        internal view returns (uint256 destRebQty, uint256 destActiveWeight, bool overweight) {\\r\\n        \\r\\n        destRebQty = 0;\\r\\n        uint256 destTargetWeight = TargetWeight[destAddr];\\r\\n        uint256 destValue = _getTokenValues(destAddr);\\r\\n        if (destAddr == baseToken) {\\r\\n            destValue = baseTokenAmt;\\r\\n        }\\r\\n        uint256 fundWeight = destValue * 10000 / totalvalue;\\r\\n        overweight = fundWeight > destTargetWeight;\\r\\n        destActiveWeight = overweight ? fundWeight - destTargetWeight: destTargetWeight - fundWeight;\\r\\n        if(overweight){\\r\\n            uint256 price = _getLatestPrice(destAddr);\\r\\n            destRebQty = ((destActiveWeight * totalvalue *  getDecimals(destAddr)) / price) / 10000;\\r\\n        }\\r\\n        return (destRebQty, destActiveWeight, overweight);\\r\\n    }\\r\\n    \\r\\n    function _rebalance(uint32 _slippage) internal {\\r\\n        \\r\\n        (xWinLib.UnderWeightData[] memory underwgts, uint256 totalunderwgt) = _sellOverWeightNames(_slippage);\\r\\n        _buyUnderWeightNames(underwgts, totalunderwgt, _slippage); \\r\\n        nextRebalance = block.number + rebalanceCycle;\\r\\n    }\\r\\n    \\r\\n    function _sellOverWeightNames (uint32 _slippage) \\r\\n        internal returns (xWinLib.UnderWeightData[] memory underwgts, uint256 totalunderwgt) {\\r\\n        \\r\\n        uint256 totalbefore = _getVaultValues();\\r\\n        underwgts = new xWinLib.UnderWeightData[](targetAddr.length);\\r\\n\\r\\n        for (uint256 i = 0; i < targetAddr.length; i++) {\\r\\n            (uint256 rebalQty, uint256 destMisWgt, bool overweight) = _getActiveOverWeight(targetAddr[i], totalbefore);\\r\\n            if(overweight) //sell token to base\\r\\n            {\\r\\n                IERC20Upgradeable(targetAddr[i]).safeIncreaseAllowance(address(xWinSwap), rebalQty);\\r\\n                xWinSwap.swapTokenToToken(rebalQty, targetAddr[i], baseToken, _slippage);\\r\\n                if (targetAddr[i] == baseToken) {\\r\\n                    baseTokenAmt -= rebalQty;\\r\\n                }\\r\\n            }else if(destMisWgt > 0)\\r\\n            {\\r\\n                xWinLib.UnderWeightData memory _underWgt;\\r\\n                _underWgt.token = targetAddr[i];\\r\\n                _underWgt.activeWeight = destMisWgt;\\r\\n                underwgts[i] = _underWgt;\\r\\n                totalunderwgt = totalunderwgt + destMisWgt;\\r\\n            }\\r\\n        }\\r\\n        return (underwgts, totalunderwgt);\\r\\n    }\\r\\n    \\r\\n    function _buyUnderWeightNames (xWinLib.UnderWeightData[] memory underweights, uint256 totalunderwgt, uint32 _slippage) \\r\\n        internal {\\r\\n        uint baseccyBal = getBalance(baseToken) - baseTokenAmt;\\r\\n        for (uint256 i = 0; i < underweights.length; i++) {\\r\\n            \\r\\n            if(underweights[i].token != address(0)){\\r\\n                uint256 rebBuyQty = underweights[i].activeWeight * baseccyBal / totalunderwgt;\\r\\n                if(rebBuyQty > 0 && rebBuyQty <= baseccyBal){\\r\\n                    IERC20Upgradeable(baseToken).safeIncreaseAllowance(address(xWinSwap), rebBuyQty);\\r\\n                    xWinSwap.swapTokenToToken(rebBuyQty, baseToken, underweights[i].token, _slippage);\\r\\n                    if(underweights[i].token == baseToken) {\\r\\n                        baseTokenAmt += rebBuyQty;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _moveNonIndex(\\r\\n        address _token,\\r\\n        uint32 _slippage\\r\\n    ) internal returns (uint256 balanceToken, uint256 swapOutput) {\\r\\n            \\r\\n            balanceToken = getBalance(_token);\\r\\n            IERC20Upgradeable(_token).safeIncreaseAllowance(address(xWinSwap), balanceToken);\\r\\n            swapOutput = xWinSwap.swapTokenToToken(balanceToken, _token, baseToken, _slippage);\\r\\n            return (balanceToken, swapOutput);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function _getDeleteNames(address[] calldata _toAddr) \\r\\n        internal \\r\\n        view \\r\\n        returns (xWinLib.DeletedNames[] memory delNames) \\r\\n    {\\r\\n        \\r\\n        delNames = new xWinLib.DeletedNames[](targetAddr.length);\\r\\n\\r\\n        for (uint256 i = 0; i < targetAddr.length; i++) {\\r\\n            uint256 matchtotal = 1;\\r\\n            for (uint256 x = 0; x < _toAddr.length; x++){\\r\\n                if(targetAddr[i] == _toAddr[x]){\\r\\n                    break;\\r\\n                }else if(targetAddr[i] != _toAddr[x] && _toAddr.length == matchtotal){\\r\\n                    delNames[i].token = targetAddr[i]; \\r\\n                }\\r\\n                matchtotal++;\\r\\n            }\\r\\n        }\\r\\n        return delNames;\\r\\n    }\\r\\n    \\r\\n    function _convertTo18(uint256 value, address token) internal view returns (uint){\\r\\n        uint256 diffDecimal = 18 - ERC20Upgradeable(token).decimals();\\r\\n        return diffDecimal > 0 ? (value * (10**diffDecimal)) : value; \\r\\n    }\\r\\n\\r\\n    /// @dev display estimate shares if deposit \\r\\n    function getEstimateShares(uint256 _amt) external view returns (uint256 mintQty)  {\\r\\n        \\r\\n        uint _unitPrice = _getUnitPrice();\\r\\n        uint256 vaultValue = _getVaultValues() + _amt;\\r\\n        uint256 totalSupply = getFundTotalSupply();\\r\\n        uint256 newTotalSupply = vaultValue * 1e18 / _unitPrice;\\r\\n        mintQty = newTotalSupply - totalSupply;\\r\\n    }\\r\\n    \\r\\n    /// @dev return unit price\\r\\n    function getUnitPrice() override external view returns(uint256){\\r\\n        return _getUP();\\r\\n    }\\r\\n\\r\\n    function _getUnitPrice(uint256 fundvalue) internal view returns(uint256){\\r\\n        return getFundTotalSupply() == 0 ? UPMultiplier * getDecimals(baseToken) : _convertTo18(fundvalue *  1e18 / getFundTotalSupply(), baseToken);\\r\\n    }\\r\\n\\r\\n    /// @dev return unit price in USd\\r\\n    function getUnitPriceInUSD() override external view returns(uint256){\\r\\n        return _getUPInUSD();\\r\\n    }\\r\\n    \\r\\n    function getLatestPrice(address _targetAdd) external view returns (uint256) {\\r\\n        return _getLatestPrice(_targetAdd);\\r\\n    }\\r\\n\\r\\n    function getVaultValues() external override view returns (uint) {\\r\\n        return _convertTo18(_getVaultValues(), baseToken);\\r\\n    }\\r\\n\\r\\n    function getVaultValuesInUSD() external override view returns (uint) {\\r\\n        return _convertTo18(_getVaultValuesInUSD(), stablecoinUSDAddr);\\r\\n    }  \\r\\n\\r\\n    /// @dev return token value in the vault in BNB\\r\\n    function getTokenValues(address tokenaddress) external view returns (uint256){\\r\\n        return _convertTo18(_getTokenValues(tokenaddress), baseToken);\\r\\n    }\\r\\n\\r\\n    // get fund total supply including fees\\r\\n    function getFundTotalSupply() public view returns(uint256) {\\r\\n        return totalSupply() + pendingMFee + pendingPFee;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _getLatestPrice(address _targetAdd) internal view returns (uint256) {\\r\\n        if(_targetAdd == baseToken) return getDecimals(baseToken);\\r\\n        uint256 rate = priceMaster.getPrice(_targetAdd, baseToken);\\r\\n        return rate;\\r\\n    }\\r\\n\\r\\n    function _getLatestPriceInUSD(address _targetAdd) internal view returns (uint256) {\\r\\n        if(_targetAdd == stablecoinUSDAddr) return getDecimals(stablecoinUSDAddr);\\r\\n        uint256 rate = priceMaster.getPrice(_targetAdd, stablecoinUSDAddr);\\r\\n        return rate;\\r\\n    }\\r\\n    \\r\\n    function _getVaultValues() internal override view returns (uint256){\\r\\n        \\r\\n        uint256 totalValue = _getTokenValues(baseToken);\\r\\n        for (uint256 i = 0; i < targetAddr.length; i++) {\\r\\n            if(targetAddr[i] == baseToken) {\\r\\n                continue;\\r\\n            }\\r\\n            totalValue = totalValue + _getTokenValues(targetAddr[i]);\\r\\n        }\\r\\n        return totalValue; \\r\\n    }\\r\\n\\r\\n    function _getVaultValuesInUSD() internal view returns (uint256){\\r\\n        \\r\\n        uint256 totalValue = _getTokenValuesInUSD(baseToken);\\r\\n        for (uint256 i = 0; i < targetAddr.length; i++) {\\r\\n            if(targetAddr[i] == baseToken) {\\r\\n                continue;\\r\\n            }\\r\\n            totalValue = totalValue + _getTokenValuesInUSD(targetAddr[i]);\\r\\n        }\\r\\n        return totalValue; \\r\\n    }\\r\\n\\r\\n    function _getUP() internal view returns(uint256){\\r\\n        return getFundTotalSupply() == 0 ? UPMultiplier * 1e18 : _convertTo18(_getVaultValues() *  1e18 / getFundTotalSupply(), baseToken);\\r\\n    }\\r\\n\\r\\n    function _getUnitPrice() internal override view returns(uint256){\\r\\n        return getFundTotalSupply() == 0 ? UPMultiplier * getDecimals(baseToken) : _getVaultValues() *  1e18 / getFundTotalSupply();\\r\\n    }\\r\\n\\r\\n    function _getUPInUSD() internal view returns(uint256){\\r\\n        return getFundTotalSupply() == 0 ? UPMultiplier * 1e18 : _convertTo18(_getVaultValuesInUSD() * 1e18 / getFundTotalSupply(), stablecoinUSDAddr);\\r\\n    }\\r\\n\\r\\n    function _getTokenValues(address token) internal view returns (uint256){\\r\\n        uint256 tokenBalance = getBalance(token);\\r\\n        uint256 price = _getLatestPrice(token);\\r\\n        return tokenBalance * uint256(price) / getDecimals(token); \\r\\n    }\\r\\n\\r\\n    function _getTokenValuesInUSD(address token) internal view returns (uint256){\\r\\n        \\r\\n        uint256 tokenBalance = getBalance(token);\\r\\n        uint256 price = _getLatestPriceInUSD(token);\\r\\n        return tokenBalance * uint256(price) / getDecimals(token);\\r\\n    }\\r\\n\\r\\n    function getBalance(address fromAdd) public view returns (uint256){\\r\\n        return IERC20Upgradeable(fromAdd).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getTargetNamesAddress() external view returns (address[] memory _targetNamesAddress){\\r\\n        return targetAddr;\\r\\n    }\\r\\n\\r\\n    /// @dev return target amount based on weight of each token in the fund\\r\\n    function getTargetWeightQty(address targetAdd, uint256 srcQty) internal view returns (uint256){\\r\\n        return TargetWeight[targetAdd] * srcQty / 10000;\\r\\n    }\\r\\n    \\r\\n    /// Get All the fund data needed for client\\r\\n    function GetFundExtra() external view returns (\\r\\n          uint256 managementFee,\\r\\n          uint256 performanceFee,\\r\\n          uint256 platFee,\\r\\n          address mAddr,          \\r\\n          address mRebAddr,   \\r\\n          address pWallet       \\r\\n        ){\\r\\n            return (\\r\\n                managerFee,\\r\\n                performFee,\\r\\n                platformFee,\\r\\n                managerAddr, \\r\\n                managerRebAddr,\\r\\n                platformWallet\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getDecimals(address _token) private view returns (uint) {\\r\\n        return (10 ** ERC20Upgradeable(_token).decimals());\\r\\n    }\\r\\n\\r\\n    /// Get All the fund data needed for client\\r\\n    function GetFundDataAll() external view returns (\\r\\n          IERC20Upgradeable baseCcy,\\r\\n          address[] memory targetAddress,\\r\\n          uint256 totalUnitB4,\\r\\n          uint256 baseBalance,\\r\\n          uint256 unitprice,\\r\\n          uint256 fundvalue,\\r\\n          uint256 unitpriceUSD,\\r\\n          uint256 fundvalueUSD,\\r\\n          string memory fundName,\\r\\n          string memory symbolName \\r\\n        ){\\r\\n            return (\\r\\n                IERC20Upgradeable(baseToken), \\r\\n                targetAddr, \\r\\n                getFundTotalSupply(), \\r\\n                getBalance(baseToken),\\r\\n                _getUP(), \\r\\n                _convertTo18(_getVaultValues(), baseToken),\\r\\n                _getUPInUSD(), \\r\\n                _convertTo18(_getVaultValuesInUSD(), stablecoinUSDAddr),\\r\\n                name(),\\r\\n                symbol()\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function setValidInvestor(address _wallet, bool _allow) external onlyRebManager {\\r\\n        validInvestors[_wallet] = _allow;\\r\\n    }\\r\\n\\r\\n    function setOpenForPublic(bool _allow) external onlyOwner {\\r\\n        openForPublic = _allow;\\r\\n    }\\r\\n\\r\\n    function updateOtherProperties(uint256 newCycle, uint256 _ratio, uint256 _UPMultiplier) external onlyOwner  {\\r\\n        rebalanceCycle = newCycle;\\r\\n        smallRatio = _ratio;\\r\\n        UPMultiplier = _UPMultiplier;\\r\\n    }\\r\\n\\r\\n    /// @dev update average blocks per day value\\r\\n    function updateBlockPerday(uint256 _blocksPerDay) external onlyOwner  {        \\r\\n        blocksPerDay = _blocksPerDay;\\r\\n    }\\r\\n\\r\\n    /// @dev update platform fee and wallet\\r\\n    function updatePlatformProperty(address _newAddr, uint256 _newFee) external onlyOwner {\\r\\n        require(_newAddr != address(0), \\\"_newAddr Input 0\\\");\\r\\n        require(_newFee <= 100, \\\"Platform Fee cap at 1%\\\");\\r\\n        _calcFundFee();\\r\\n        platformWallet = _newAddr;\\r\\n        platformFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setPerformanceFee(uint256 _performFee) external onlyOwner {\\r\\n        require(_performFee <= 2000, \\\"Performance Fee cap at 20%\\\");\\r\\n        performFee = _performFee;\\r\\n    }\\r\\n    \\r\\n    /// @dev update manager fee and wallet\\r\\n    function updateManagerProperty(address newRebManager, address newManager, uint256 newFeebps) external onlyOwner  {\\r\\n        require(newRebManager != address(0), \\\"newRebManager Input 0\\\");\\r\\n        require(newManager != address(0), \\\"newManager Input 0\\\");\\r\\n        require(newFeebps <= 300, \\\"Manager Fee cap at 3%\\\");\\r\\n        _calcFundFee();\\r\\n        managerFee = newFeebps;\\r\\n        managerAddr = newManager;\\r\\n        managerRebAddr = newRebManager;\\r\\n    }\\r\\n    \\r\\n    /// @dev update xwin master contract\\r\\n    function updatexWinEngines(address _priceMaster, address _xwinSwap) external onlyOwner {\\r\\n        require(_priceMaster != address(0), \\\"_priceMaster Input 0\\\");\\r\\n        require(_xwinSwap != address(0), \\\"_xwinSwap Input 0\\\");\\r\\n        priceMaster = IxWinPriceMaster(_priceMaster);\\r\\n        xWinSwap = IxWinSwap(_xwinSwap);\\r\\n    }\\r\\n\\r\\n    function updateLockedStakingAddress(address _lockedStaking) external onlyOwner {\\r\\n        lockingAddress = _lockedStaking;\\r\\n    }\\r\\n\\r\\n    function setPerformDeposit(uint256 mintShares, uint256 latestUP) internal {\\r\\n        uint256 newTotalShares = performanceMap[msg.sender].shares + mintShares;\\r\\n        performanceMap[msg.sender].avgPrice = ((performanceMap[msg.sender].shares * performanceMap[msg.sender].avgPrice) + (mintShares * latestUP)) / newTotalShares;\\r\\n        performanceMap[msg.sender].shares = newTotalShares;\\r\\n    }\\r\\n\\r\\n    function setPerformWithdraw(\\r\\n        uint256 swapOutput, \\r\\n        uint256 _shares,\\r\\n        address _investorAddress, \\r\\n        address _managerAddress\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        uint256 realUnitprice = swapOutput * 1e18 /_shares;\\r\\n        uint256 performanceUnit;\\r\\n        uint256 notRecognizedShare;\\r\\n\\r\\n        userAvgPrice memory pM = performanceMap[_investorAddress];\\r\\n\\r\\n        if (_shares > pM.shares) {\\r\\n            notRecognizedShare = _shares - pM.shares;\\r\\n        }\\r\\n        uint256 recognizedShare = _shares - notRecognizedShare;\\r\\n        uint256 notRecognisedRatio = notRecognizedShare * 10000 / _shares;\\r\\n\\r\\n        // if no shares recorded, then charge for performance fee on entire swap output of unrecognized tokens\\r\\n        if(notRecognizedShare > 0) {\\r\\n            uint256 notRecognizedWithdraw = notRecognisedRatio * swapOutput / 10000;\\r\\n            performanceUnit = notRecognizedWithdraw * performFee / 10000;\\r\\n        }\\r\\n\\r\\n        uint256 profitPerUnit = realUnitprice > pM.avgPrice ? realUnitprice - pM.avgPrice : 0; \\r\\n        if(notRecognizedShare == 0 && (performFee == 0 || waivedPerformanceFees[msg.sender] || profitPerUnit == 0)){\\r\\n            uint remain = pM.shares - _shares;\\r\\n            performanceMap[_investorAddress].shares = remain;\\r\\n            if(remain == 0 ){\\r\\n                performanceMap[_investorAddress].avgPrice = 0;\\r\\n            } \\r\\n            return swapOutput;\\r\\n        }\\r\\n\\r\\n        if(recognizedShare > 0) {\\r\\n            uint256 actualPerformFee = getDiscountedPerformFee(msg.sender);\\r\\n            performanceMap[_investorAddress].shares = pM.shares - recognizedShare;\\r\\n            uint256 anotherProfit = (10000 - notRecognisedRatio) * profitPerUnit * swapOutput / realUnitprice / 10000;\\r\\n            performanceUnit = performanceUnit + (anotherProfit * actualPerformFee / 10000);\\r\\n        }\\r\\n\\r\\n        if(performanceUnit > 0) IERC20Upgradeable(baseToken).safeTransfer(_managerAddress, performanceUnit);\\r\\n        return swapOutput - performanceUnit;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getUserAveragePrice(address _user) external view returns (uint256 shares, uint256 avgPrice){        \\r\\n        return (performanceMap[_user].shares, performanceMap[_user].avgPrice);\\r\\n    }\\r\\n\\r\\n    function getDiscountedPerformFee(address _user) public view returns (uint256 newPerformanceFee) {\\r\\n        if (lockingAddress == address(0)) {\\r\\n            return performFee;\\r\\n        }\\r\\n        uint256 discount = ILockedStake(lockingAddress).getFavor(_user);\\r\\n        return performFee - ((performFee * discount) / 10000);\\r\\n    }\\r\\n\\r\\n    function addContractWaiveFee(address _contract) external onlyOwner {\\r\\n        waivedPerformanceFees[_contract] = true; \\r\\n    }\\r\\n\\r\\n    function removeContractWaiveFee(address _contract) external onlyOwner {\\r\\n        waivedPerformanceFees[_contract] = false;\\r\\n    }\\r\\n\\r\\n    function sumArray(uint256[] calldata arr) private pure returns(uint256) {\\r\\n        uint256 i;\\r\\n        uint256 sum = 0;\\r\\n            \\r\\n        for(i = 0; i < arr.length; i++)\\r\\n            sum = sum + arr[i];\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    function findDup(address[] calldata a) private pure returns(bool) {\\r\\n        for(uint i = 0; i < a.length - 1; i++) {\\r\\n            for(uint j = i + 1; j < a.length; j++) {\\r\\n                if (a[i] == a[j]) return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit Received(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    modifier onlyRebManager {\\r\\n        require(\\r\\n            msg.sender == managerRebAddr,\\r\\n            \\\"Only for Reb Manager\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/Interface/ILockedStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n\\r\\ninterface ILockedStake  {\\r\\n    function getFavor(address _user) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/Interface/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\"\r\n    },\r\n    \"contracts/Interface/IxWinEmitEvent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IxWinEmitEvent {\\r\\n\\r\\n    function feeTransfered(\\r\\n        address _token,\\r\\n        uint _amount,\\r\\n        address _contractAddress\\r\\n\\r\\n    ) external;\\r\\n\\r\\n\\r\\n    function FeeEvent(string memory _eventtype, address _contractaddress, uint256 _fee) external;\\r\\n    function FundEvent(\\r\\n        string memory _type,\\r\\n        address _contractaddress, \\r\\n        address _useraddress, \\r\\n        uint _rate, \\r\\n        uint _amount, \\r\\n        uint _shares\\r\\n    ) external;\\r\\n\\r\\n    function setExecutor(address _address, bool _allow) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interface/IxWinPriceMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IxWinPriceMaster {\\r\\n    function getPrice(address _from, address _to) external view returns (uint rate);\\r\\n}\"\r\n    },\r\n    \"contracts/Interface/IxWinSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IxWinSwap {\\r\\n    function swapTokenToToken(uint _amount, address _fromToken, address _toToken) external payable returns (uint);\\r\\n    function swapTokenToToken(uint _amount, address _fromToken, address _toToken, uint32 _slippage) external payable returns (uint);\\r\\n    function swapTokenToExactToken(uint _amount, uint _exactAmount, address _fromToken, address _toToken) external payable returns (uint);\\r\\n\\r\\n    function addTokenPath(\\r\\n            address _router, \\r\\n            address _fromtoken, \\r\\n            address _totoken, \\r\\n            address[] memory path,\\r\\n            uint256 _slippage\\r\\n        ) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Library/xWinLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary xWinLib {\\r\\n   \\r\\n    \\r\\n    struct transferData {      \\r\\n      uint256 totalTrfAmt;\\r\\n      uint256 totalUnderlying;\\r\\n    }\\r\\n    \\r\\n    struct UnderWeightData {\\r\\n      uint256 activeWeight;\\r\\n      address token;\\r\\n    }\\r\\n    \\r\\n    struct DeletedNames {\\r\\n      address token;\\r\\n      uint256 targetWeight;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/xWinStrategy.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"./Interface/IxWinEmitEvent.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract xWinStrategy is ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\r\\n    \\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    address public stablecoinUSDAddr;\\r\\n    address public baseToken; // DEPOSIT/WITHDRAW TOKEN\\r\\n    IxWinEmitEvent public emitEvent;\\r\\n    uint256[10] private __gap;\\r\\n\\r\\n    function __xWinStrategy_init(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address _baseToken,\\r\\n        address _USDTokenAddr\\r\\n     ) onlyInitializing internal {\\r\\n        require(_baseToken != address(0), \\\"_baseToken input 0\\\");\\r\\n        require(_USDTokenAddr != address(0), \\\"_USDTokenAddr input 0\\\");\\r\\n        __Ownable_init();\\r\\n        __ERC20_init(name, symbol);\\r\\n        __ReentrancyGuard_init();\\r\\n        __Pausable_init();\\r\\n        baseToken = _baseToken;\\r\\n        stablecoinUSDAddr = _USDTokenAddr;\\r\\n    }\\r\\n\\r\\n    event _Deposit(uint256 datetime, address contractaddress, uint256 rate, uint256 depositAmount, uint256 shares);\\r\\n    event _Withdraw(uint256 datetime, address contractaddress, uint256 rate, uint256 avrCost, uint256 withdrawAmount, uint256 shares);\\r\\n\\r\\n\\r\\n    function getVaultValues() external virtual view returns (uint256);\\r\\n    function _getVaultValues() internal virtual view returns (uint256);\\r\\n    function getUnitPrice()  external virtual view returns (uint256);\\r\\n    function _getUnitPrice() internal virtual view returns (uint256);   \\r\\n    function getVaultValuesInUSD() external virtual view returns (uint256);        \\r\\n    function getUnitPriceInUSD()  external virtual view returns (uint256);\\r\\n    function deposit(uint256 amount) external virtual returns (uint256);\\r\\n    function withdraw(uint256 amount) external virtual returns (uint256);\\r\\n        function deposit(uint256 amount, uint32 slippage) external virtual returns (uint256);\\r\\n    function withdraw(uint256 amount, uint32 slippage) external virtual returns (uint256);\\r\\n\\r\\n    function setEmitEvent(address _addr) external onlyOwner {\\r\\n        require(_addr != address(0), \\\"_addr input is 0\\\");\\r\\n         emitEvent = IxWinEmitEvent(_addr);\\r\\n    }\\r\\n\\r\\n    function updateUSDAddr(address _newUSDAddr) external onlyOwner {\\r\\n        require(_newUSDAddr != address(0), \\\"_newUSDAddr input is 0\\\");\\r\\n        stablecoinUSDAddr = _newUSDAddr;\\r\\n    }\\r\\n\\r\\n    function setPause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function setUnPause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnTime\",\"type\":\"uint256\"}],\"name\":\"ManagerFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnTime\",\"type\":\"uint256\"}],\"name\":\"ManagerOwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"_Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avrCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"_Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GetFundDataAll\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"baseCcy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"targetAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalUnitB4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundvalue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitpriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundvalueUSD\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"fundName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetFundExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mRebAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_slippage\",\"type\":\"uint32\"}],\"name\":\"MoveNonIndexNameToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toAddr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_targets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32\",\"name\":\"_slippage\",\"type\":\"uint32\"}],\"name\":\"Rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toAddr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_targets\",\"type\":\"uint256[]\"}],\"name\":\"Rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TargetWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addContractWaiveFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toAddr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_targets\",\"type\":\"uint256[]\"}],\"name\":\"createTargetNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_slippage\",\"type\":\"uint32\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemUnit\",\"type\":\"uint256\"}],\"name\":\"emergencyRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitEvent\",\"outputs\":[{\"internalType\":\"contract IxWinEmitEvent\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAdd\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDiscountedPerformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"getEstimateShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintQty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetAdd\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetNamesAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_targetNamesAddress\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenaddress\",\"type\":\"address\"}],\"name\":\"getTokenValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnitPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultValuesInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_openForPublic\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_UPMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebalancePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blocksPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_smallRatio\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manageraddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managerRebaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockedStaking\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerRebAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openForPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"performanceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceMaster\",\"outputs\":[{\"internalType\":\"contract IxWinPriceMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"removeContractWaiveFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEmitEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setOpenForPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setValidInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smallRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoinUSDAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksPerDay\",\"type\":\"uint256\"}],\"name\":\"updateBlockPerday\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockedStaking\",\"type\":\"address\"}],\"name\":\"updateLockedStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRebManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFeebps\",\"type\":\"uint256\"}],\"name\":\"updateManagerProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_UPMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateOtherProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUSDAddr\",\"type\":\"address\"}],\"name\":\"updateUSDAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xwinSwap\",\"type\":\"address\"}],\"name\":\"updatexWinEngines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validInvestors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"waivedPerformanceFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_slippage\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xWinSwap\",\"outputs\":[{\"internalType\":\"contract IxWinSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FundV2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}