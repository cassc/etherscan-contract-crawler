{"SourceCode": "/*\r\n\r\n$$$$$$$\\        $$\\   $$\\        $$$$$$\\  \r\n$$  __$$\\       $$$\\  $$ |      $$  __$$\\ \r\n$$ |  $$ |      $$$$\\ $$ |      $$ /  $$ |\r\n$$ |  $$ |      $$ $$\\$$ |      $$$$$$$$ |\r\n$$ |  $$ |      $$ \\$$$$ |      $$  __$$ |\r\n$$ |  $$ |      $$ |\\$$$ |      $$ |  $$ |\r\n$$$$$$$  |      $$ | \\$$ |      $$ |  $$ |\r\n\\_______/       \\__|  \\__|      \\__|  \\__|\r\n                                          \r\n                                          \r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ISwapPair {\r\n    function mint(address to) external returns (uint liquidity);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender; \r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract MidWallet{\r\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    constructor(address to){\r\n        IERC20(usdt).approve(to, ~uint256(0));\r\n    }\r\n}\r\n\r\ncontract DNA is IERC20, Ownable{\r\n    string private _name = \"DNA\";\r\n    string private _symbol = \"DNA\"; \r\n    uint8 private _decimals = 18;    \r\n    uint256 private _totalsupply =1000000000 * 10 ** 18;   \r\n    uint256 public constant MAX = ~uint256(0);\r\n    uint256 public swapLiquFee = 2;\r\n    uint256 public swapBurnFee = 1; \r\n    uint256 public minAddLiqAmount = 100*10**18;\r\n\r\n    mapping(address => uint256) private _balances;  \r\n    mapping(address => mapping(address => uint256)) private _allowances;    \r\n    mapping(address => bool) public freeFeeAddr; \r\n    address public dev; \r\n    address public lqmanage; \r\n    address public factory = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n    address public router = 0x10ED43C718714eb63d5aA57B78B54704E256024E; \r\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;   \r\n    address public pair; \r\n    address public midWallet;   \r\n\r\n    bool public openSwap;\r\n    \r\n    constructor (\r\n        address _dev\r\n    ){\r\n        dev = _dev;\r\n        MidWallet _midWallet = new MidWallet(address(this));\r\n        midWallet = address(_midWallet);\r\n        _balances[dev] = _totalsupply;\r\n        emit Transfer(address(0), dev, _totalsupply);\r\n        (address token0, address token1) = sortTokens(usdt, address(this));\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n            hex'ff',\r\n            factory,\r\n            keccak256(abi.encodePacked(token0, token1)),\r\n            hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\r\n        )))));\r\n        freeFeeAddr[dev]=true;\r\n        freeFeeAddr[address(0)]=true;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalsupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    bool inswap;    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private{\r\n        require(from != to,\"Same\");\r\n        require(amount >0 ,\"Zero\");\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"balance Not Enough\");\r\n        _balances[from] = _balances[from] - amount;\r\n\r\n        if(inswap){ \r\n            _balances[to] +=amount;\r\n            emit Transfer(from, to, amount);\r\n            return;\r\n        }\r\n        uint256 transAmount = amount;\r\n        uint256 liqFeeAmount;\r\n        uint256 burnFeeAmount;\r\n        uint256 allFeeAmount;\r\n        if( !freeFeeAddr[from] && !freeFeeAddr[to]){\r\n            if(from == pair || to == pair){\r\n                require(openSwap,'Not Open Swap');\r\n                liqFeeAmount = amount* swapLiquFee/100;\r\n                burnFeeAmount = amount* swapBurnFee/100;\r\n                allFeeAmount = liqFeeAmount + burnFeeAmount;\r\n                transAmount = amount - allFeeAmount;\r\n\r\n                if(burnFeeAmount>0){\r\n                    _balances[address(0)] +=burnFeeAmount;\r\n                    emit Transfer(from, address(0), burnFeeAmount); \r\n                }\r\n\r\n                if(liqFeeAmount>0){\r\n                    _balances[address(this)] +=liqFeeAmount;\r\n                    emit Transfer(from, address(this), liqFeeAmount); \r\n                }\r\n            }\r\n        }\r\n        bool isSwapAndLiq = (_balances[address(this)] >minAddLiqAmount && to == pair && openSwap);\r\n        if(isSwapAndLiq){\r\n            swapAndliq(minAddLiqAmount);\r\n        }\r\n        _balances[to] +=transAmount;\r\n        emit Transfer(from, to, transAmount);\r\n        return;\r\n    }\r\n\r\n    function swapAndliq(uint256 tokenAmount) private{\r\n        require(!inswap,\"inSwap\");\r\n        inswap =true;\r\n        uint256 swapAmount = tokenAmount/2;\r\n        IERC20(address(this)).approve(router, swapAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        ISwapRouter(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(swapAmount,0,path,midWallet,block.timestamp+1000);\r\n        uint256 addliqUsdt = IERC20(usdt).balanceOf(midWallet);\r\n        IERC20(usdt).transferFrom(midWallet, address(this), addliqUsdt);\r\n        uint256 addliqDnbs = tokenAmount - swapAmount;\r\n        IERC20(usdt).transfer(pair, addliqUsdt);\r\n        IERC20(address(this)).transfer(pair,addliqDnbs);\r\n        ISwapPair(pair).mint(lqmanage);\r\n        inswap =false;\r\n    }\r\n\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');\r\n    }\r\n\r\n    function setOpenSwap(address _lqmanage)public onlyOwner{\r\n        require(!openSwap,'Opening');\r\n        openSwap = true;\r\n        lqmanage = _lqmanage;\r\n        freeFeeAddr[_lqmanage] = true;\r\n    }\r\n    function setFreeFeeList(address[] memory _addrList,bool _states) public  onlyOwner{\r\n        for(uint256 i=0;i<_addrList.length;i++){\r\n            freeFeeAddr[_addrList[i]] = _states;\r\n        }\r\n    }\r\n\r\n    function setMinAddLqAmount(uint256 _amount) public{\r\n        require(msg.sender == dev);\r\n        minAddLiqAmount = _amount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeFeeAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lqmanage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"midWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAddLiqAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_states\",\"type\":\"bool\"}],\"name\":\"setFreeFeeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinAddLqAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lqmanage\",\"type\":\"address\"}],\"name\":\"setOpenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DNA", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0f594254F95F5EAf2bc88799D13C4Bf047dbE86", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bb7a215e63bf7f508a6b70a8200cd81d0ff930eb287d00f98c9f8498371441f6"}