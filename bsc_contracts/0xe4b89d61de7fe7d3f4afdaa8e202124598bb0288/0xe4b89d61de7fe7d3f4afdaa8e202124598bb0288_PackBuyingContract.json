{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract PackBuyingContract is Ownable,ReentrancyGuard {\r\n    uint public mainPackPrice;\r\n    uint public mainPackSize;\r\n    uint public expansionPack1Price;\r\n    uint public expansionPack1Size;\r\n    uint public expansionPack2Price;\r\n    uint public expansionPack2Size;\r\n    uint public expansionPack3Price;\r\n    uint public expansionPack3Size;\r\n    uint public currentRound;\r\n    uint public currentMainPacksRemaining;\r\n    uint public currentExpansionPack1Remaining;\r\n    uint public currentExpansionPack2Remaining;\r\n    uint public currentExpansionPack3Remaining;\r\n\r\n    mapping(address => uint) public mainPacksBought;\r\n    mapping(address => uint) public expansionPack1Bought;\r\n    mapping(address => uint) public expansionPack2Bought;\r\n    mapping(address => uint) public expansionPack3Bought;\r\n    \r\n    struct Purchase {\r\n        address user;\r\n        uint nftType;\r\n        uint quantity;\r\n    }\r\n    \r\n    Purchase[] purchases; \r\n\r\n    event PackPurchased(address indexed buyer, uint indexed packType, uint indexed quantity, uint totalPrice, uint roundNumber);\r\n\r\n    constructor(uint _mainPackPrice, uint _mainPackSize, uint _expansionPack1Price, uint _expansionPack1Size, uint _expansionPack2Price, uint _expansionPack2Size, uint _expansionPack3Price, uint _expansionPack3Size) {\r\n        mainPackPrice = _mainPackPrice;\r\n        mainPackSize = _mainPackSize;\r\n        expansionPack1Price = _expansionPack1Price;\r\n        expansionPack1Size = _expansionPack1Size;\r\n        expansionPack2Price = _expansionPack2Price;\r\n        expansionPack2Size = _expansionPack2Size;\r\n        expansionPack3Price = _expansionPack3Price;\r\n        expansionPack3Size = _expansionPack3Size;\r\n        currentRound = 1;\r\n        currentMainPacksRemaining = mainPackSize;\r\n        currentExpansionPack1Remaining = expansionPack1Size;\r\n        currentExpansionPack2Remaining = expansionPack2Size;\r\n        currentExpansionPack3Remaining = expansionPack3Size;\r\n    }\r\n\r\n    function recordPurchase(uint _nftType, uint _quantity) internal {\r\n        Purchase memory newPurchase = Purchase(msg.sender, _nftType, _quantity);\r\n        purchases.push(newPurchase);\r\n    }\r\n    \r\n    function getPurchaseCount() public view returns (uint) {\r\n        return purchases.length;\r\n    }\r\n    \r\n    function getPurchase(uint _index) public view returns (address, uint, uint) {\r\n        require(_index < purchases.length, \"Invalid purchase index.\");\r\n        Purchase memory p = purchases[_index];\r\n        return (p.user, p.nftType, p.quantity);\r\n    }\r\n\r\n    function buyMainPack(uint quantity) external nonReentrant payable {\r\n        require(msg.value == quantity * mainPackPrice, \"Incorrect payment amount.\");\r\n        require(quantity <= currentMainPacksRemaining, \"Insufficient main packs remaining.\");\r\n        mainPacksBought[msg.sender] += quantity;\r\n        currentMainPacksRemaining -= quantity;\r\n        recordPurchase(1,quantity);\r\n        emit PackPurchased(msg.sender, 1, quantity, msg.value, currentRound);\r\n    }\r\n\r\n    function buyExpansionPack1(uint quantity) external nonReentrant payable {\r\n        require(msg.value == quantity * expansionPack1Price, \"Incorrect payment amount.\");\r\n        require(quantity <= currentExpansionPack1Remaining, \"Insufficient expansion pack 1 remaining.\");\r\n        expansionPack1Bought[msg.sender] += quantity;\r\n        currentExpansionPack1Remaining -= quantity;\r\n        recordPurchase(2,quantity);\r\n        emit PackPurchased(msg.sender, 2, quantity, msg.value, currentRound);\r\n    }\r\n\r\n    function buyExpansionPack2(uint quantity) external nonReentrant payable {\r\n        require(msg.value == quantity * expansionPack2Price, \"Incorrect payment amount.\");\r\n        require(quantity <= currentExpansionPack2Remaining, \"Insufficient expansion pack 2 remaining.\");\r\n        expansionPack2Bought[msg.sender] += quantity;\r\n        currentExpansionPack2Remaining -= quantity;\r\n        recordPurchase(3,quantity);\r\n        emit PackPurchased(msg.sender, 3, quantity, msg.value, currentRound);\r\n    }\r\n\r\n    function buyExpansionPack3(uint quantity) external nonReentrant payable {\r\n        require(msg.value == quantity * expansionPack3Price, \"Incorrect payment amount.\");\r\n        require(quantity <= currentExpansionPack3Remaining,\"Insufficient expansion pack 3 remaining.\");\r\n        expansionPack3Bought[msg.sender] += quantity;\r\n        currentExpansionPack3Remaining -= quantity;\r\n        recordPurchase(4,quantity);\r\n        emit PackPurchased(msg.sender, 4, quantity, msg.value, currentRound);\r\n    }\r\n\r\n    function startNewRound(uint _mainPackPrice, uint _mainPackSize, uint _expansionPack1Price, uint _expansionPack1Size, uint _expansionPack2Price, uint _expansionPack2Size, uint _expansionPack3Price, uint _expansionPack3Size) external onlyOwner {\r\n        require(currentMainPacksRemaining == 0 && currentExpansionPack1Remaining == 0 && currentExpansionPack2Remaining == 0 && currentExpansionPack3Remaining == 0, \"Cannot start a new round until all packs have been sold.\");\r\n        mainPackPrice = _mainPackPrice;\r\n        mainPackSize = _mainPackSize;\r\n        expansionPack1Price = _expansionPack1Price;\r\n        expansionPack1Size = _expansionPack1Size;\r\n        expansionPack2Price = _expansionPack2Price;\r\n        expansionPack2Size = _expansionPack2Size;\r\n        expansionPack3Price = _expansionPack3Price;\r\n        expansionPack3Size = _expansionPack3Size;\r\n        currentRound++;\r\n        currentMainPacksRemaining = mainPackSize;\r\n        currentExpansionPack1Remaining = expansionPack1Size;\r\n        currentExpansionPack2Remaining = expansionPack2Size;\r\n        currentExpansionPack3Remaining = expansionPack3Size;\r\n    }\r\n\r\n    function withdrawFunds() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function retrieveBEP20TokenStuck(\r\n        address _tokenAddr\r\n    ) public onlyOwner returns (bool) {\r\n        IERC20(_tokenAddr).transfer(owner(), IERC20(_tokenAddr).balanceOf(address(this)));\r\n        return true;\r\n    }\r\n\r\n    function getPackRemaining(uint packType) external view returns (uint) {\r\n        if (packType == 1) {\r\n            return currentMainPacksRemaining;\r\n        } else if (packType == 2) {\r\n            return currentExpansionPack1Remaining;\r\n        } else if (packType == 3) {\r\n            return currentExpansionPack2Remaining;\r\n        } else if (packType == 4) {\r\n            return currentExpansionPack3Remaining;\r\n        } else {\r\n            revert(\"Invalid pack type.\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mainPackPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mainPackSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack1Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack1Size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack2Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack2Size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack3Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack3Size\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"PackPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyExpansionPack1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyExpansionPack2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyExpansionPack3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyMainPack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExpansionPack1Remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExpansionPack2Remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExpansionPack3Remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMainPacksRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"expansionPack1Bought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPack1Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPack1Size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"expansionPack2Bought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPack2Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPack2Size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"expansionPack3Bought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPack3Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPack3Size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"}],\"name\":\"getPackRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPurchase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurchaseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPackPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPackSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mainPacksBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"retrieveBEP20TokenStuck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mainPackPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mainPackSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack1Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack1Size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack2Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack2Size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack3Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPack3Size\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PackBuyingContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5210f5330803ed90e125b8191a9f5d7263d4fd46e6ad6287f2fe460f408633b5"}