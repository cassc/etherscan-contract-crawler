{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length \\u003e 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"},\"draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account\\u0027s ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\\u0027t\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\\u0027s tokens,\\n     * given ``owner``\\u0027s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``\\u0027s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``\\u0027s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"stablefundai.sol\":{\"content\":\"/*  StableFundAI is the perfect combination of Artificial Technology, High Security and Community Program\\r\\n *   Safe and decentralized. The Smart Contract source is verified and available to everyone.\\r\\n *\\r\\n *   \\r\\n *              Website: https://stablefundai.com\\r\\n *               STABLEFUNDAI SMART CONTRACT \\r\\n *                    IS HERE TO STAY!\\r\\n *                \\r\\n *         Build from the Community for the Community. We support USDT(BEP20).\\r\\n *\\t\\t\\t\\t \\r\\n *\\t \\t       0.5% Daily ROI + 0.5% HOLD BONUS \\t\\t\\t\\t\\t\\t       \\t \\r\\n *\\t                                                                        \\r\\n *                 Fully Audited Smart Contract \\r\\n *\\r\\n *     \\t\\t\\t      [USAGE INSTRUCTION]\\r\\n *\\r\\n *  1) Connect Smart Chain (BEP20) browser extension MetaMask , or Mobile Wallet Apps like Trust Wallet  / Klever\\r\\n *  2) Ask your sponsor for Referral link and contribute to the contract.\\r\\n *\\r\\n *   [AFFILIATE PROGRAM]\\r\\n *\\r\\n *    15% in  11-level Referral Commission: 10% - 2% - 1% - 0.5% - 0.4% - 0.3% - 0.2% - 0.1% - 0.1% - 0.1% - 0.1% \\r\\n *    \\r\\n *  [DISCLAIMER]: This is an experimental community project, which means this project has high risks and high rewards.\\r\\n *  Once the contract balance drops to zero, all the payments will stop immediately. This project is decentralized and therefore it belongs to the community.\\r\\n *   Make a deposit at your own risk.\\r\\n *\\r\\n */\\r\\n\\r\\n//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\ncontract StableFundAI {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n    uint256 constant public DEPOSITS_MAX = 300;\\r\\n    uint256 constant public INVEST_MIN_AMOUNT = 1 ether;\\r\\n    uint256 constant public INVEST_MAX_AMOUNT = 500000 ether;\\r\\n    uint256 constant public BASE_PERCENT = 50;\\r\\n    uint256[] public REFERRAL_PERCENTS = [1000, 200, 100, 50, 40, 30, 20, 10, 10, 10, 10];\\r\\n    uint256 constant public MARKETING_FEE = 700; \\r\\n    uint256 constant public PROJECT_FEE = 700;\\r\\n    uint256 constant public Dev_Fee  = 100;\\r\\n    uint256 constant public WITHDRAWAL_FEE = 750;\\r\\n\\r\\n    uint256 constant public MAX_CONTRACT_PERCENT = 50;\\r\\n    uint256 constant public MAX_LEADER_PERCENT = 50;\\r\\n    uint256 constant public MAX_HOLD_PERCENT = 50;\\r\\n    uint256 constant public MAX_COMMUNITY_PERCENT = 50;\\r\\n    uint256 constant public PERCENTS_DIVIDER = 10000;\\r\\n    uint256 constant public CONTRACT_BALANCE_STEP = 10000000 ether;\\r\\n    uint256 constant public LEADER_BONUS_STEP = 10000000  ether;\\r\\n    uint256 constant public COMMUNITY_BONUS_STEP = 10000000;\\r\\n    uint256 constant public TIME_STEP = 1 days;\\r\\n    uint256 public totalInvested;\\r\\n    address public marketingAddress;\\r\\n    address public projectAddress;\\r\\n    address public devAdress;\\r\\n    address public defaultAddress;\\r\\n    address public withdrawalFeeAddress1;\\r\\n    address public withdrawalFeeAddress2;\\r\\n\\r\\n    uint256 public totalDeposits;\\r\\n    uint256 public totalWithdrawn;\\r\\n    uint256 public contractPercent;\\r\\n    uint256 public contractCreationTime;\\r\\n    uint256 public totalRefBonus;\\r\\n\\r\\n    address public contractAddress;\\r\\n    \\r\\n    struct Deposit {\\r\\n        uint256 amount;\\r\\n        uint256 withdrawn;\\r\\n        // uint256 refback;\\r\\n        uint256 start;\\r\\n    }\\r\\n    struct User {\\r\\n        Deposit[] deposits;\\r\\n        uint256 checkpoint;\\r\\n        address referrer;\\r\\n        uint256 bonus;\\r\\n        uint24[11] refs;\\r\\n        // uint16 rbackPercent;\\r\\n    }\\r\\n    mapping (address =\\u003e User) internal users;\\r\\n    mapping (uint256 =\\u003e uint) internal turnover;\\r\\n    event Newbie(address user);\\r\\n    event NewDeposit(address indexed user, uint amount);\\r\\n    event Withdrawn(address indexed user, uint amount);\\r\\n    event RefBonus(address indexed referrer, address indexed referral, uint indexed level, uint amount);\\r\\n    event RefBack(address indexed referrer, address indexed referral, uint amount);\\r\\n    event FeePayed(address indexed user, uint totalAmount);\\r\\n//upline \\r\\n     mapping(address =\\u003e address) public uplinePartners;\\r\\n\\r\\n    event UplinePartnerSet(address indexed walletAddress, address indexed uplinePartner);\\r\\n\\r\\n    constructor(address marketingAddr, address projectAddr ,address devAddr,address _defaultReferral, address _withdrawalFee1,address _withdrawalFee2,address _contractAddress) {\\r\\n        require(!isContract(marketingAddr) \\u0026\\u0026 !isContract(projectAddr));\\r\\n        marketingAddress = marketingAddr;\\r\\n        projectAddress = projectAddr;\\r\\n        devAdress = devAddr  ;\\r\\n        defaultAddress = _defaultReferral;\\r\\n        withdrawalFeeAddress1 = _withdrawalFee1;\\r\\n        withdrawalFeeAddress2 = _withdrawalFee2;\\r\\n        contractCreationTime = block.timestamp;\\r\\n        contractAddress = _contractAddress;\\r\\n       // contractPercent = getContractBalanceRate();\\r\\n        \\r\\n    }\\r\\n\\r\\n    // function setRefback(uint16 rbackPercent) public {\\r\\n    //     require(rbackPercent \\u003c= 10000);\\r\\n\\r\\n    //     User storage user = users[msg.sender];\\r\\n\\r\\n    //     if (user.deposits.length \\u003e 0) {\\r\\n    //         user.rbackPercent = rbackPercent;\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function getContractBalance() public view returns (uint256) {\\r\\n        return IERC20(contractAddress).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getContractBalanceRate() public view returns (uint256) {\\r\\n        uint256 contractBalance = IERC20(contractAddress).balanceOf(address(this));\\r\\n        uint256 contractBalancePercent = BASE_PERCENT.add(contractBalance.div(CONTRACT_BALANCE_STEP).mul(20));\\r\\n\\r\\n        if (contractBalancePercent \\u003c BASE_PERCENT.add(MAX_CONTRACT_PERCENT)) {\\r\\n            return contractBalancePercent;\\r\\n        } else {\\r\\n            return BASE_PERCENT.add(MAX_CONTRACT_PERCENT);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function getLeaderBonusRate() public view returns (uint256) {\\r\\n        uint256 leaderBonusPercent = totalRefBonus.div(LEADER_BONUS_STEP).mul(10);\\r\\n\\r\\n        if (leaderBonusPercent \\u003c MAX_LEADER_PERCENT) {\\r\\n            return leaderBonusPercent;\\r\\n        } else {\\r\\n            return MAX_LEADER_PERCENT;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function getCommunityBonusRate() public view returns (uint256) {\\r\\n        uint256 communityBonusRate = totalDeposits.div(COMMUNITY_BONUS_STEP).mul(10);\\r\\n\\r\\n        if (communityBonusRate \\u003c MAX_COMMUNITY_PERCENT) {\\r\\n            return communityBonusRate;\\r\\n        } else {\\r\\n            return MAX_COMMUNITY_PERCENT;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function withdraw() public {\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        uint256 userPercentRate = getUserPercentRate(msg.sender);\\r\\n\\t\\tuint256 communityBonus = getCommunityBonusRate();\\r\\n\\t\\tuint256 leaderbonus = getLeaderBonusRate();\\r\\n\\r\\n        uint256 totalAmount;\\r\\n        uint256 dividends;\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c user.deposits.length; i++) {\\r\\n\\r\\n            if (uint256(user.deposits[i].withdrawn) \\u003c uint256(user.deposits[i].amount).mul(2)) {\\r\\n\\r\\n                if (user.deposits[i].start \\u003e user.checkpoint) {\\r\\n\\r\\n                    dividends = (uint256(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(PERCENTS_DIVIDER))\\r\\n                        .mul(block.timestamp.sub(uint256(user.deposits[i].start)))\\r\\n                        .div(TIME_STEP);\\r\\n\\r\\n                } else {\\r\\n\\r\\n                    dividends = (uint256(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(PERCENTS_DIVIDER))\\r\\n                        .mul(block.timestamp.sub(uint256(user.checkpoint)))\\r\\n                        .div(TIME_STEP);\\r\\n\\r\\n                }\\r\\n\\r\\n                if (uint256(user.deposits[i].withdrawn).add(dividends) \\u003e uint256(user.deposits[i].amount).mul(2)) {\\r\\n                    dividends = (uint256(user.deposits[i].amount).mul(2)).sub(uint256(user.deposits[i].withdrawn));\\r\\n                }\\r\\n\\r\\n                user.deposits[i].withdrawn = uint256(uint256(user.deposits[i].withdrawn).add(dividends)); /// changing of storage data\\r\\n                totalAmount = totalAmount.add(dividends);\\r\\n\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(totalAmount \\u003e 0, \\\"User has no dividends\\\");\\r\\n\\r\\n        uint256 contractBalance =  IERC20(contractAddress).balanceOf(address(this));\\r\\n        if (contractBalance \\u003c totalAmount) {\\r\\n            totalAmount = contractBalance;\\r\\n        }\\r\\n        user.checkpoint = uint256(block.timestamp);\\r\\n        uint256 withdrawalFee = totalAmount.mul(WITHDRAWAL_FEE).div(PERCENTS_DIVIDER);\\r\\n\\r\\n        IERC20(contractAddress).safeTransfer(withdrawalFeeAddress1,withdrawalFee);\\r\\n        IERC20(contractAddress).safeTransfer(withdrawalFeeAddress2,withdrawalFee);\\r\\n\\r\\n        IERC20(contractAddress).safeTransfer(msg.sender,totalAmount);\\r\\n\\r\\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\\r\\n\\r\\n\\r\\n        emit Withdrawn(msg.sender, totalAmount);\\r\\n    }\\r\\n\\r\\n    function getUserPercentRate(address userAddress) public view returns (uint256) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        if (isActive(userAddress)) {\\r\\n            uint256 timeMultiplier = (block.timestamp.sub(uint256(user.checkpoint))).div(TIME_STEP).mul(5);\\r\\n            if (timeMultiplier \\u003e MAX_HOLD_PERCENT) {\\r\\n                timeMultiplier = MAX_HOLD_PERCENT;\\r\\n            }\\r\\n            return contractPercent.add(timeMultiplier);\\r\\n        } else {\\r\\n            return contractPercent;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUserAvailable(address userAddress) public view returns (uint256) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint256 userPercentRate = getUserPercentRate(userAddress);\\r\\n\\t\\tuint256 communityBonus = getCommunityBonusRate();\\r\\n\\t\\tuint256 leaderbonus = getLeaderBonusRate();\\r\\n\\r\\n        uint256 totalDividends;\\r\\n        uint256 dividends;\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c user.deposits.length; i++) {\\r\\n\\r\\n            if (uint256(user.deposits[i].withdrawn) \\u003c uint256(user.deposits[i].amount).mul(2)) {\\r\\n\\r\\n                if (user.deposits[i].start \\u003e user.checkpoint) {\\r\\n\\r\\n                    dividends = (uint256(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(PERCENTS_DIVIDER))\\r\\n                        .mul(block.timestamp.sub(uint256(user.deposits[i].start)))\\r\\n                        .div(TIME_STEP);\\r\\n\\r\\n                } else {\\r\\n\\r\\n                    dividends = (uint256(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(PERCENTS_DIVIDER))\\r\\n                        .mul(block.timestamp.sub(uint256(user.checkpoint)))\\r\\n                        .div(TIME_STEP);\\r\\n\\r\\n                }\\r\\n\\r\\n                if (uint256(user.deposits[i].withdrawn).add(dividends) \\u003e uint256(user.deposits[i].amount).mul(2)) {\\r\\n                    dividends = (uint256(user.deposits[i].amount).mul(2)).sub(uint256(user.deposits[i].withdrawn));\\r\\n                }\\r\\n\\r\\n                totalDividends = totalDividends.add(dividends);\\r\\n\\r\\n                /// no update of withdrawn because that is view function\\r\\n\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        return totalDividends;\\r\\n    }\\r\\n    function setUplinePartner(address uplinePartner) public returns (string memory) {\\r\\n         address walletAddress= msg.sender;\\r\\n        require(uplinePartner != address(0), \\\"Invalid upline partner address\\\");\\r\\n        require(walletAddress != uplinePartner, \\\"Cannot set self as upline partner\\\");\\r\\n        require(uplinePartners[walletAddress] == address(0), \\\"Upline partner already set\\\");\\r\\n\\r\\n        uplinePartners[walletAddress] = uplinePartner;\\r\\n        emit UplinePartnerSet(walletAddress, uplinePartner);\\r\\n        return \\\"It\\u0027s done!\\\";\\r\\n    }\\r\\n\\r\\n    function getUplinePartner() public view returns (address) {\\r\\n        return uplinePartners[msg.sender];\\r\\n    }\\r\\n   \\r\\n    function invest(uint256 _amount,address userRefAddress) public {\\r\\n        address referrer;\\r\\n        if(userRefAddress == address(0)) {\\r\\n            referrer = defaultAddress;\\r\\n        } else {\\r\\n            \\r\\n             address upline = getUplinePartner();\\r\\n           if (upline == address(0)) {\\r\\n            referrer= userRefAddress;\\r\\n            setUplinePartner(userRefAddress);\\r\\n            } else {\\r\\n              referrer= upline; \\r\\n             }\\r\\n        }\\r\\n        require(!isContract(msg.sender) \\u0026\\u0026 msg.sender == tx.origin);\\r\\n\\r\\n        require(_amount \\u003e= INVEST_MIN_AMOUNT \\u0026\\u0026 _amount \\u003c= INVEST_MAX_AMOUNT, \\\"Bad Deposit\\\");\\r\\n        IERC20(contractAddress).safeTransferFrom(msg.sender,address(this),_amount);\\r\\n       \\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        require(user.deposits.length \\u003c DEPOSITS_MAX, \\\"Maximum 300 deposits from address\\\");\\r\\n\\r\\n\\r\\n        uint256 msgValue = _amount;\\r\\n\\r\\n        uint256 marketingFee = msgValue.mul(MARKETING_FEE).div(PERCENTS_DIVIDER);\\r\\n        uint256 projectFee = msgValue.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\\r\\n        uint256 devfee = msgValue.mul(Dev_Fee).div(PERCENTS_DIVIDER);\\r\\n\\r\\n        IERC20(contractAddress).safeTransfer(marketingAddress,marketingFee);\\r\\n        IERC20(contractAddress).safeTransfer(projectAddress,projectFee);\\r\\n        IERC20(contractAddress).safeTransfer(devAdress,devfee);\\r\\n\\r\\n\\r\\n        emit FeePayed(msg.sender, marketingFee.add(projectFee).add(devfee));\\r\\n\\r\\n        if (user.referrer == address(0) \\u0026\\u0026 users[referrer].deposits.length \\u003e 0 \\u0026\\u0026 referrer != msg.sender) {\\r\\n            user.referrer = referrer;\\r\\n        }\\r\\n       \\r\\n        // uint refbackAmount;\\r\\n        if (user.referrer != address(0)) {\\r\\n\\r\\n            for (uint256 i = 0; i \\u003c 11; i++) {\\r\\n                if (referrer != address(0)) {\\r\\n                    uint256 amount = msgValue.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\\r\\n\\r\\n                    // }\\r\\n\\r\\n                    if (amount \\u003e 0) {\\r\\n                        IERC20(contractAddress).safeTransfer(address(uint160(referrer)),amount);\\r\\n                        users[referrer].bonus = uint256(uint256(users[referrer].bonus).add(amount));\\r\\n                        \\r\\n                        totalRefBonus = totalRefBonus.add(amount);\\r\\n                        emit RefBonus(referrer, msg.sender, i, amount);\\r\\n                    }\\r\\n\\r\\n                    users[referrer].refs[i]++;\\r\\n                    referrer = users[referrer].referrer;\\r\\n                } else break;\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        if (user.deposits.length == 0) {\\r\\n            user.checkpoint = uint256(block.timestamp);\\r\\n            emit Newbie(msg.sender);\\r\\n        }\\r\\n\\r\\n        user.deposits.push(Deposit(uint256(msgValue), 0, uint256(block.timestamp)));\\r\\n\\r\\n        totalInvested = totalInvested.add(msgValue);\\r\\n        totalDeposits++;\\r\\n\\r\\n        if (contractPercent \\u003c BASE_PERCENT.add(MAX_CONTRACT_PERCENT)) {\\r\\n            uint256 contractPercentNew = getContractBalanceRate();\\r\\n            if (contractPercentNew \\u003e contractPercent) {\\r\\n                contractPercent = contractPercentNew;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit NewDeposit(msg.sender, msgValue);\\r\\n    }\\r\\n\\r\\n    function isActive(address userAddress) public view returns (bool) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        return (user.deposits.length \\u003e 0) \\u0026\\u0026 uint256(user.deposits[user.deposits.length-1].withdrawn) \\u003c uint256(user.deposits[user.deposits.length-1].amount).mul(2);\\r\\n    }\\r\\n\\r\\n    function getUserAmountOfDeposits(address userAddress) public view returns (uint256) {\\r\\n        return users[userAddress].deposits.length;\\r\\n    }\\r\\n    \\r\\n    function getUserLastDeposit(address userAddress) public view returns (uint256) {\\r\\n        User storage user = users[userAddress];\\r\\n        return user.checkpoint;\\r\\n    }\\r\\n\\r\\n    function getUserTotalDeposits(address userAddress) public view returns (uint256) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint256 amount;\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c user.deposits.length; i++) {\\r\\n            amount = amount.add(uint256(user.deposits[i].amount));\\r\\n        }\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function getUserTotalWithdrawn(address userAddress) public view returns (uint256) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint256 amount = user.bonus;\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c user.deposits.length; i++) {\\r\\n            amount = amount.add(uint256(user.deposits[i].withdrawn));\\r\\n        }\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function getCurrentHalfDay() public view returns (uint256) {\\r\\n        return (block.timestamp.sub(contractCreationTime)).div(TIME_STEP.div(2));\\r\\n    }\\r\\n\\r\\n    // function getCurrentDayLimit() public view returns (uint) {\\r\\n    //     uint limit;\\r\\n\\r\\n    //     uint currentDay = (block.timestamp.sub(contractCreation)).div(TIME_STEP);\\r\\n\\r\\n    //     if (currentDay == 0) {\\r\\n    //         limit = DAY_LIMIT_STEPS[0];\\r\\n    //     } else if (currentDay == 1) {\\r\\n    //         limit = DAY_LIMIT_STEPS[1];\\r\\n    //     } else if (currentDay \\u003e= 2 \\u0026\\u0026 currentDay \\u003c= 5) {\\r\\n    //         limit = DAY_LIMIT_STEPS[1].mul(currentDay);\\r\\n    //     } else if (currentDay \\u003e= 6 \\u0026\\u0026 currentDay \\u003c= 19) {\\r\\n    //         limit = DAY_LIMIT_STEPS[2].mul(currentDay.sub(3));\\r\\n    //     } else if (currentDay \\u003e= 20 \\u0026\\u0026 currentDay \\u003c= 49) {\\r\\n    //         limit = DAY_LIMIT_STEPS[3].mul(currentDay.sub(11));\\r\\n    //     } else if (currentDay \\u003e= 50) {\\r\\n    //         limit = DAY_LIMIT_STEPS[4].mul(currentDay.sub(30));\\r\\n    //     }\\r\\n\\r\\n    //     return limit;\\r\\n    // }\\r\\n\\r\\n    function getCurrentHalfDayTurnover() public view returns (uint256) {\\r\\n        return turnover[getCurrentHalfDay()];\\r\\n    }\\r\\n\\r\\n    // function getCurrentHalfDayAvailable() public view returns (uint) {\\r\\n    //     return getCurrentDayLimit().sub(getCurrentHalfDayTurnover());\\r\\n    // }\\r\\n\\r\\n    function getUserDeposits(address userAddress, uint256 last, uint256 first) public view returns (uint256[] memory, uint256[] memory, uint256[] memory, uint256[] memory) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint256 count = first.sub(last);\\r\\n        if (count \\u003e user.deposits.length) {\\r\\n            count = user.deposits.length;\\r\\n        }\\r\\n\\r\\n        uint256[] memory amount = new uint256[](count);\\r\\n        uint256[] memory withdrawn = new uint256[](count);\\r\\n        uint256[] memory refback = new uint256[](count);\\r\\n        uint256[] memory start = new uint256[](count);\\r\\n\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = first; i \\u003e last; i--) {\\r\\n            amount[index] = uint256(user.deposits[i-1].amount);\\r\\n            withdrawn[index] = uint256(user.deposits[i-1].withdrawn);\\r\\n            // refback[index] = uint(user.deposits[i-1].refback);\\r\\n            start[index] = uint256(user.deposits[i-1].start);\\r\\n            index++;\\r\\n        }\\r\\n\\r\\n        return (amount, withdrawn, refback, start);\\r\\n    }\\r\\n\\r\\n    function getSiteStats() public view returns (uint256, uint256, uint256, uint256) {\\r\\n        return (totalInvested, totalDeposits, IERC20(contractAddress).balanceOf(address(this)), contractPercent);\\r\\n    }\\r\\n\\r\\n    function getUserStats(address userAddress) public view returns (uint256, uint256, uint256, uint256, uint256) {\\r\\n        uint256 userPerc = getUserPercentRate(userAddress);\\r\\n        uint256 userAvailable = getUserAvailable(userAddress);\\r\\n        uint256 userDepsTotal = getUserTotalDeposits(userAddress);\\r\\n        uint256 userDeposits = getUserAmountOfDeposits(userAddress);\\r\\n        uint256 userWithdrawn = getUserTotalWithdrawn(userAddress);\\r\\n\\r\\n        return (userPerc, userAvailable, userDepsTotal, userDeposits, userWithdrawn);\\r\\n    }\\r\\n\\r\\n    function getUserReferralsStats(address userAddress) public view returns (address, uint256, uint24[11] memory) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        return (user.referrer, user.bonus, user.refs);\\r\\n    }\\r\\n\\r\\n    function isContract(address addr) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly { size := extcodesize(addr) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultReferral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawalFee1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawalFee2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uplinePartner\",\"type\":\"address\"}],\"name\":\"UplinePartnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_BONUS_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_BALANCE_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Dev_Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MAX_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEADER_BONUS_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COMMUNITY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONTRACT_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_HOLD_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LEADER_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCreationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunityBonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalanceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentHalfDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentHalfDayTurnover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeaderBonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUplinePartner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLastDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPercentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralsStats\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint24[11]\",\"name\":\"\",\"type\":\"uint24[11]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userRefAddress\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uplinePartner\",\"type\":\"address\"}],\"name\":\"setUplinePartner\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uplinePartners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFeeAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFeeAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StableFundAI", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002112bfe77409c7ea10c3089f7c43b187b75835c7000000000000000000000000ba9c40330f3d476d8288f21429dd910d23830cc900000000000000000000000044249be9c441e682523165c80a4bf2fa891affb900000000000000000000000088a356442710e187fe6ecd6952757a7d1585a2560000000000000000000000007369c354d4a5d03c810a67b7f87757449ba7b40800000000000000000000000015462f16c326caa1895eda7ea94fab43b6b117a600000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fbfbd03190ab2bb00f1795728b7b0da1841e0d274263ea9e05c9195026a65117"}