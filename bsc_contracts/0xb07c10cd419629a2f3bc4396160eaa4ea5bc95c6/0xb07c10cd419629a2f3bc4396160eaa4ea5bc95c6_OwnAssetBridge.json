{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20Mintable is ERC20, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    constructor (string memory name_, string memory symbol_, uint totalSupply_) \r\n        ERC20(name_, symbol_)\r\n        public \r\n    {\r\n        _mint(_msgSender(), totalSupply_);\r\n    }\r\n\r\n    function mint(address to, uint256 amount) \r\n        public\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        _mint(to, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @notice This contract is used to bridge WeOwn blockchain and any other blockchain running on EVM, primarily Ethereum. \r\n * After establishing bridge between asset on WeOwn blockchain and ERC20 token, cross-chain transfers are enabled and\r\n * users can move their holding between the blockchains. \r\n */\r\ncontract OwnAssetBridge is Ownable {\r\n    using SafeMath for uint;\r\n    enum RevertDirection{ FromNative, ToNative }\r\n\r\n    event CrossChainTransfer(address indexed token, string recipientAccountHash, uint amount);\r\n    event CrossChainTransfer(string txHash, address recipient);\r\n\r\n    mapping (string => address) public erc20Tokens;\r\n    mapping (address => string) public assetHashes;\r\n    mapping (string => string) public accountsForAssets;\r\n    mapping (string => address) public pendingCrossChainTransfers;\r\n    mapping (string => string) public pendingSignedTxs;\r\n\r\n    address public governor;\r\n    uint public targetTransferFee;\r\n    uint public nativeTransferFee;\r\n    uint public bridgeFee;\r\n\r\n    constructor(uint _bridgeFee, uint _targetTransferFee, uint _nativeTransferFee)\r\n        public\r\n    {\r\n        bridgeFee = _bridgeFee;\r\n        targetTransferFee = _targetTransferFee;\r\n        nativeTransferFee = _nativeTransferFee;\r\n        governor = _msgSender();\r\n    }\r\n\r\n    modifier onlyGovernor() {\r\n        require(_msgSender() == governor, \"Caller is not the governor\");\r\n        _;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Bridge management\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Function that establishes bridge between existing ERC20 token and newly created asset on WeOwn blockchain.\r\n     * This function can only be called by the governor and all tokens should be circulating on target blockchain, while\r\n     * total supply is locked on WeOwn blockchain.\r\n     */\r\n    /// @param _token Address of ERC20 token\r\n    /// @param _assetHash Hash of WeOwn asset\r\n    /// @param _accountHash Hash of WeOwn account that will hold all locked tokens on WeOwn blockchain\r\n    function bridgeErc20Token(address _token, string calldata _assetHash, string calldata _accountHash)\r\n        external\r\n        onlyGovernor\r\n        payable\r\n    {\r\n        require(erc20Tokens[_assetHash] == address(0));\r\n        require(bytes(assetHashes[_token]).length == 0);\r\n        require(bytes(accountsForAssets[_assetHash]).length == 0);\r\n        require(IERC20(_token).balanceOf(address(this)) == 0);\r\n        require(msg.value >= bridgeFee);\r\n\r\n        erc20Tokens[_assetHash] = _token;\r\n        assetHashes[_token] = _assetHash;\r\n        accountsForAssets[_assetHash] = _accountHash;\r\n    }\r\n\r\n    /**\r\n     * @notice Function that deploys new ERC20 token and establishes bridge between existing asset on WeOwn blockchain\r\n     * and newly created ERC20 token. This function can only be called by the governor and all tokens should be \r\n     * circulating on WeOwn blockchain, while total supply is locked on target blockchain.\r\n     */\r\n    /// @param _assetHash Hash of WeOwn asset\r\n    /// @param _accountHash Hash of WeOwn account that will hold all locked tokens on WeOwn blockchain\r\n    /// @param _assetName Name of ERC20 token that will be deployed. Needs to correspond to the name of WeOwn asset\r\n    /// @param _assetSymbol Symbol of ERC20 token that will be deployed. Needs to correspond to the symbol of WeOwn asset\r\n    /// @param _totalSupply Total supply of ERC20 token that will be deployed. Needs to correspond to the total supply of WeOwn asset\r\n    function bridgeAsset(\r\n        string calldata _assetHash, \r\n        string calldata _accountHash, \r\n        string calldata _assetName, \r\n        string calldata _assetSymbol, \r\n        uint _totalSupply)\r\n        external\r\n        onlyGovernor\r\n        payable\r\n    {\r\n        require(erc20Tokens[_assetHash] == address(0));\r\n        require(bytes(accountsForAssets[_assetHash]).length == 0);\r\n        require(msg.value >= bridgeFee);\r\n\r\n        address token = address(new ERC20Mintable(_assetName, _assetSymbol, _totalSupply));\r\n\r\n        erc20Tokens[_assetHash] = token;\r\n        assetHashes[token] = _assetHash;\r\n        accountsForAssets[_assetHash] = _accountHash;\r\n    }\r\n\r\n    /**\r\n     * @notice Function that removes bridge between ERC20 token and asset on WeOwn blockchain. This function can only \r\n     * be called by the governor and all tokens should be circulating on target blockchain or on WeOwn blockchain.\r\n     */\r\n    /// @param _token Address of ERC20 token\r\n    function removeBridge(address _token)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        string memory assetHash = assetHashes[_token];\r\n\r\n        require(bytes(assetHash).length != 0);\r\n        require(erc20Tokens[assetHash] == _token);\r\n        require(bytes(accountsForAssets[assetHash]).length != 0);\r\n\r\n        uint bridgeBalance = IERC20(_token).balanceOf(address(this));\r\n        require(bridgeBalance == 0 || bridgeBalance == IERC20(_token).totalSupply());\r\n\r\n        delete erc20Tokens[assetHash];\r\n        delete assetHashes[_token];\r\n        delete accountsForAssets[assetHash];\r\n    }\r\n\r\n    /**\r\n     * @notice Function that mints ERC20 token created by the bridge. This function can only \r\n     * be called by the governor in order to ensure consistency between WeOwn and target blockchains.\r\n     */\r\n    /// @param _token Address of ERC20 token\r\n    /// @param _amount Amount of tokens that will be minted\r\n    function mintErc20Token(address _token, uint _amount)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        require(ERC20Mintable(_token).mint(address(this), _amount));\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Cross-chain transfers\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Function by which token holder on target blockchain can transfer tokens to WeOwn blockchain.\r\n     * ERC20 token needs to be bridged to WeOwn asset and user should previously approve this contract as\r\n     * spender of desired amount of tokens that should be cross-chain transferred.\r\n     */\r\n    /// @param _token Address of ERC20 token\r\n    /// @param _recipientAccountHash Hash of WeOwn account that should receive tokens\r\n    /// @param _amount Number of tokens that will be transferred\r\n    function transferToNativeChain(address _token, string calldata _recipientAccountHash, uint _amount)\r\n        external\r\n        payable\r\n    {\r\n        require(msg.value >= nativeTransferFee, \"Insufficient fee is paid\");\r\n        require(bytes(assetHashes[_token]).length != 0, \"Token is not bridged\");\r\n        require(IERC20(_token).transferFrom(_msgSender(), address(this), _amount), \"Transfer failed\");\r\n\r\n        emit CrossChainTransfer(_token, _recipientAccountHash, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Function by which asset holder on WeOwn blockchain can transfer tokens to target blockchain.\r\n     * Asset needs to be bridged to ERC20 token and asset transfer should be done on WeOwn blockchain.\r\n     */\r\n    /// @param _txHash Hash of tx on WeOwn blockchain which contains asset transfer\r\n    /// @param _signature Signature of tx hash, signed by WeOwn sender address\r\n    /// @param _recipient Address on target blockchain that should receive tokens\r\n    function transferFromNativeChain(string calldata _txHash, string calldata _signature, address _recipient)\r\n        external\r\n        payable\r\n    {\r\n        require(msg.value >= targetTransferFee, \"Insufficient fee is paid\");\r\n        require(pendingCrossChainTransfers[_txHash] == address(0), \"Recipient is already determined\");\r\n        require(bytes(pendingSignedTxs[_txHash]).length == 0, \"Signature is already determined\");\r\n\r\n        pendingCrossChainTransfers[_txHash] = _recipient;\r\n        pendingSignedTxs[_txHash] = _signature;\r\n\r\n        emit CrossChainTransfer(_txHash, _recipient);\r\n    }\r\n\r\n    /**\r\n     * @notice Function by which contract owner confirms cross-chain transfer from WeOwn blockchain. If the tx with\r\n     * asset transfer on WeOwn blockchain is valid and correctly signed, tokens will be released to address on target blockchain.\r\n     */\r\n    /// @param _txHash Hash of tx on WeOwn blockchain which contains asset transfer\r\n    /// @param _token Address of ERC20 token\r\n    /// @param _amount Amount of tokens that will be released\r\n    function confirmTransfer(string calldata _txHash, IERC20 _token, uint _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        address recipient = pendingCrossChainTransfers[_txHash];\r\n        require(recipient != address(0), \"Recipient does not exist\");\r\n\r\n        delete pendingCrossChainTransfers[_txHash];\r\n        delete pendingSignedTxs[_txHash];\r\n\r\n        require(_token.transfer(recipient, _amount), \"Transfer failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Function by which contract owner reverts cross-chain transfer from WeOwn blockchain. \r\n     */\r\n    /// @param _txHash Hash of tx on WeOwn blockchain which contains asset transfer\r\n    function revertTransferFromNativeChain(string calldata _txHash)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(pendingCrossChainTransfers[_txHash] != address(0), \"Tx does not exist\");\r\n\r\n        delete pendingCrossChainTransfers[_txHash];\r\n        delete pendingSignedTxs[_txHash];\r\n    }\r\n\r\n    /**\r\n     * @notice Function by which contract owner reverts cross-chain transfer from target blockchain. \r\n     */\r\n    /// @param _txHash Hash of tx on target blockchain that is reverted\r\n    /// @param _token Address of ERC20 token\r\n    /// @param _recipient Sender address to which tokens will be transferred back\r\n    /// @param _amount Amount of tokens that will be transferred back to sender address\r\n    function revertTransferToNativeChain(string calldata _txHash, IERC20 _token, address _recipient, uint _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_token.transfer(_recipient, _amount), \"Transfer failed\");\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Owner administration\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Function by which contract owner sets governor address - address that can perform bridging and unbridging\r\n     * of ERC20 token and WeOwn asset. \r\n     */\r\n    /// @param _governor New governor address\r\n    function setGovernor(address _governor)\r\n        external\r\n        onlyOwner\r\n    {\r\n        governor = _governor;\r\n    }\r\n\r\n    /**\r\n     * @notice Function by which contract owner sets fee that is paid for cross-chain transfer from WeOwn to target blockchain\r\n     */\r\n    /// @param _amount New fee amount\r\n    function setTargetTransferFee(uint _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        targetTransferFee = _amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Function by which contract owner sets fee that is paid for cross-chain transfer from target to WeOwn blockchain\r\n     */\r\n    /// @param _amount New fee amount\r\n    function setNativeTransferFee(uint _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        nativeTransferFee = _amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Function by which contract owner sets fee that is paid by governor when establishing bridge\r\n     */\r\n    /// @param _amount New fee amount\r\n    function setBridgeFee(uint _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        bridgeFee = _amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Function by which contract owner withdraws fee collected through bridging and cross-chain transfers\r\n     */\r\n    /// @param _amount Amount to be withdrawn\r\n    function withdrawFee(uint _amount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        payable(owner()).transfer(_amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetTransferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeTransferFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipientAccountHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CrossChainTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"CrossChainTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"accountsForAssets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetHashes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_assetHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_accountHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_assetName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_assetSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"bridgeAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_assetHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_accountHash\",\"type\":\"string\"}],\"name\":\"bridgeErc20Token\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_txHash\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"confirmTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"erc20Tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintErc20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pendingCrossChainTransfers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pendingSignedTxs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"revertTransferFromNativeChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_txHash\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"revertTransferToNativeChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBridgeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setNativeTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTargetTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_txHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_signature\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"transferFromNativeChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_recipientAccountHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToNativeChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OwnAssetBridge", "CompilerVersion": "v0.6.0+commit.26b70077", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f438daa060000000000000000000000000000000000000000000000000000000271bb7b9b000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3cf5e371b2bc08e1c6a5bdcd285d1547727f9ef1cf581b4bf4e6520e1256cf25"}