{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Other/DragonBall.sol\": {\r\n      \"content\": \"/*\\r\\n  ____                                ____        _ _\\r\\n |  _ \\\\ _ __ __ _  __ _  ___  _ __   | __ )  __ _| | |\\r\\n | | | | '__/ _` |/ _` |/ _ \\\\| '_ \\\\  |  _ \\\\ / _` | | |\\r\\n | |_| | | | (_| | (_| | (_) | | | | | |_) | (_| | | |\\r\\n |____/|_|  \\\\__,_|\\\\__, |\\\\___/|_| |_| |____/ \\\\__,_|_|_|\\r\\n                  |___/\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#G5Y?7~^^::......::^^~7?Y5G#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#PY7~^..  ......:::::::::::.......:~7YP#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@&BY7^..  ..::^^~~~~!!!!!!!!!!!!!!!~~~~^^:....^7YB&@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@#57^.  ......^!!!!7777777777777777777!!!!!!!!~~~^:..:75#@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@#Y!.  ...........~77777777777777777777777777777!!!!!!!~^:.:~Y#@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@P!: ...............!777777777777777777777777777777777!!!!!!!~^.:!P&@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@&Y^. ................^77777777777777777777777777777!!!!!!!!!!!!!!!~^.^Y&@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@&J: ..................^!!!!!777777777777777777777!!!!!!!!!!!!!!!!!!!!!!~::J&@@@@@@@@@@@@\\r\\n@@@@@@@@@@@Y: ................. .:~~~~~~~!!!!!!77777777777!!!!!!!!!!!!!777777777!!!!!~:^Y@@@@@@@@@@@\\r\\n@@@@@@@@@G~ .............      .:::^^~^~~~~~~!!!!!!!7777!!!!!!!7!!!777777777777777!!!!!~:~G@@@@@@@@@\\r\\n@@@@@@@@J..............       ..::::^?!^~~~~~!!!!!!!!!!!!!!!!~?P?7777777777777777??7!!!!!~:J&@@@@@@@\\r\\n@@@@@@#~ ..:..........     .......::!JY~^~~~~~!!!!!!!!!~~~~~~?PGG77777777777777?77???7!!!!!^~#@@@@@@\\r\\n@@@@@B^ .:~^.........   .....:::::^!?JPY???JJ?!!!!!!!!!????JJPGGB5YYYYYJ77777777J?7????!!!!!~^G@@@@@\\r\\n@@@@B:..:~!^..........:::::..::~!77?JJ5PGGG5J!!!!!!!!!!7JPGBGGPPGGBBGPJ777777777?JJ?????7!!!!!^G@@@@\\r\\n@@@B:..:!!!7!^::::^^^^^^::::::::^7YYYY5GBY!~~!!!!!!!!!!!~!75BGGPGBBY7777777777777?JJ?????7!!!!!~B@@@\\r\\n@@&^..:!!!777777!!~~~~~^^^^^^^^^^?5PG55GB5~!!!!!!!!!!!!!!!!YGBB5PGBY!7777777777777JJJ?????7!!!!!!#@@\\r\\n@@7 .:!!!777777!!~~^~~~~~~~~~~~~755J7~7J5BJ~!!!!!!!!!!!!!!?P5J7!7JPB?!777777777777?JJJ?????!!!!!!?@@\\r\\n@G...~!!777777!!~:.:~~~~~~~~~~~~77~~~!~~!7?!!!!!!!!!!!!!!!?7~~!!!~!7?!777777777777?JJJJ????7!!!!!!G@\\r\\n@! .^!!!777777!~..:~!!!!!!!!!!!!~~!!!!!!!~~!!!!!!!!!!!!!!!~!!!!!!!!~~!!777777777777JJJJJ????7!!!!!?@\\r\\nB..:!!!7777777!~^~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!7!!!!!777777777777JJJJJ?????!!!!!!G\\r\\nJ..^!!!7777777!!!!!!!!~JY~!!!!!!!!!!!!!!!!!!!!!!!JJ~!!!!!!!!!!!!!77!!!!!777YJ77777?JJJJJJ????!!!!!!Y\\r\\n~..~!!!7777777!!~~~~~~?PB?~~~~~~!!!!!!!!!!~~~~~~JPB7~~~~~~!!!!!!!77!~~~!77YPB?7777?JJJJJJ????7!!!!!7\\r\\n:.:!!!77777777!!77777?GGBB?7777?7!!!!!!!!777777?GPBG?77777!!!!!!!777777??YGPBP????YYYJJJJ????7!!!!!!\\r\\n:.:!!!7777777777?5GGGGGPGGGGBGPJ!!!!!!!!!7J5GGGGGPGGGGBG5?!!!!!!777?JPGGGGGPGGGGBGP5JJJJJ????7!!!!!!\\r\\n^.:!!!7777777777~!7YGBGPPBBBY7!~!!!!!!!!!!~!7YGBGPPBBGJ7~~!!!!!77777~!?5BBP5PBBGYJJJJJJJJ????7!!!!!!\\r\\n~ :!!!77777777777!~!5GBBPGBB7~!!!!!!!!!!!!!!~7PGBBPGBG!~!!!!!!!77777!!!?PGBGPGBP?JJJJJJJJ????7!!!!!7\\r\\nJ :!!!!77777777777!JGPY77JPBP!!!!!!!!!!!!!!!!YGPY77YPB5!!!!!!777777!!775GPY??5PBPJJJJJJJ?????!!!!!!J\\r\\nB..!!!!77777777777?J7!~~~~!7Y7!!!!!!!!!!!!!!7J7!~~~~!7Y7!!!!7777777!77?J?77777?YPYJJJJJJ????7!!!!!!G\\r\\n@! ~!!!7?777777777777!!!!!!~~!!!!!!!!~!!!!!!!~~!!!!!!~~!!!777777777777777777??JJJJJJJJJ?????!!!!!!?@\\r\\n@G.:!!!!7??777777777777!!!!!!!!!!!!!!?!!!!!!!!!!!!!!!!!!7777777?77777777777?JJJJJJJJJJJ????7!!!!!!G@\\r\\n@@? ~!!!!????7???777777777!!!!!!!!!~JG?~!!!!!!!!!!!!!777777777YG?77777777??JJJJJJJJJJJ?????!!!!!!J@@\\r\\n@@&^.!!!!7????7?JJ777777777777!!!!!?PGG!!!!!!!!!7777777777777YPBG777777??JJJJJJJJJJJJ?????!!!!!!7#@@\\r\\n@@@#::!!!!7??????JJJ?77777777JYYY55GGGBP55555J77777777?JYYYY5GGGBP55555YJJJJJJJJJJJJ?????!!!!!!!B@@@\\r\\n@@@@B:^!!!!7???????JJJ??777777J5GBBGP5GGBBPY?77777777777J5GBGG5PGBBBG5YJJJJJJJJJJJ??????!!!!!!!G@@@@\\r\\n@@@@@B^^!!!!!???????JJJJJ??7777775GGGPGBBJ7777777777777777?PGGGPGBBYJJJJJJJJJJJJJ?????7!!!!!!7B@@@@@\\r\\n@@@@@@#!^!!!!!7???????JJJJJJJ??7?5GBG5PGBP7777777777777????5GBG5PGBPJJJJJJJJJJJ??????7!!!!!!?#@@@@@@\\r\\n@@@@@@@@J^!!!!!!7???????JJJJ????YPPY???Y5GY???????????JJJJYP5YJJY5PGYJJJJJJJJ??????7!!!!!!!Y&@@@@@@@\\r\\n@@@@@@@@@B!~!!!!!7?????????JJJJJYJJJJJJJJJYJJJJJJJJJJJJJJJYJJJJJJJJYYJJJJJ???????7!!!!!!!7G@@@@@@@@@\\r\\n@@@@@@@@@@@5!~!!!!!77????????JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ????????7!!!!!!!75&@@@@@@@@@@\\r\\n@@@@@@@@@@@@&5!!!!!!!!7??????????JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ????????77!!!!!!!7Y#@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@&P7!!!!!!!!7????????????JJJJJJJJJJJJJJJJJJJJJJJJJ??????????77!!!!!!!!75&@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@GJ7!!!!!!!!77????????????????????J???????????????????77!!!!!!!!!JG&@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@&PJ7!!!!!!!!!777??????????????????????????????777!!!!!!!!!!?5#@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@&GY7!!!!!!!!!!!!77777??????????????77777!!!!!!!!!!!!7JP#@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@&#PY?!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!7J5B&@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#BPY?7!!!!!!!!!!!!!!!!!!!!!!!!!!!!7?J5G#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#BGPYJJ?777!!!!!!777??JY5PB#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract DragonBall is Ownable {\\r\\n\\r\\n    // constants\\r\\n    uint constant BALLS_TO_QUEST_MINERS = 864000;\\r\\n    uint constant PSN = 10000;\\r\\n    uint constant PSNH = 5000;\\r\\n    uint constant INVITATION_RATE = 13;\\r\\n    uint constant DEV_FEE = 3;\\r\\n\\r\\n    // attributes\\r\\n    uint public marketBalls;\\r\\n    bool public initialized = false;\\r\\n    mapping (address => uint256) private questMiners;\\r\\n    mapping (address => uint256) private claimedBalls;\\r\\n    mapping (address => uint256) private lastQuest;\\r\\n    mapping (address => address) private referrals;\\r\\n\\r\\n    modifier onlyOpen {\\r\\n        require(initialized, \\\"Not Open\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() Ownable(msg.sender) {\\r\\n\\r\\n    }\\r\\n\\r\\n    function buyBalls(address ref) external payable onlyOpen {\\r\\n        uint ballsBought = calculateBallBuy(msg.value, getBalance() - msg.value);\\r\\n        ballsBought = ballsBought - devFee(ballsBought);\\r\\n\\r\\n        uint fee = devFee(msg.value);\\r\\n        (bool success, )  = owner().call{value: fee}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        claimedBalls[msg.sender] = claimedBalls[msg.sender] + ballsBought;\\r\\n        hatchBalls(ref);\\r\\n    }\\r\\n\\r\\n    function hatchBalls(address ref) public onlyOpen {\\r\\n        if(ref == msg.sender || ref == address(0) || questMiners[ref] == 0) {\\r\\n            ref = owner();\\r\\n        }\\r\\n\\r\\n        if(referrals[msg.sender] == address(0)) {\\r\\n            referrals[msg.sender] = ref;\\r\\n        }\\r\\n\\r\\n        uint256 ballsUsed = getMyBalls();\\r\\n        uint256 newMiners = ballsUsed / BALLS_TO_QUEST_MINERS;\\r\\n        questMiners[msg.sender] = questMiners[msg.sender] + newMiners;\\r\\n        claimedBalls[msg.sender] = 0;\\r\\n        lastQuest[msg.sender] = block.timestamp;\\r\\n\\r\\n        claimedBalls[referrals[msg.sender]] += (ballsUsed * INVITATION_RATE) / 100;\\r\\n        marketBalls = marketBalls + (ballsUsed / 5);\\r\\n    }\\r\\n\\r\\n    function sellBalls() external onlyOpen {\\r\\n        uint hasBalls = getMyBalls();\\r\\n        uint ballValue = calculateBallSell(hasBalls);\\r\\n\\r\\n        claimedBalls[msg.sender] = 0;\\r\\n        lastQuest[msg.sender] = block.timestamp;\\r\\n\\r\\n        marketBalls += hasBalls;\\r\\n\\r\\n        if(ballValue > getBalance()) {\\r\\n            (bool successFee, ) = owner().call{value: devFee(getBalance())}(\\\"\\\");\\r\\n            require(successFee);\\r\\n\\r\\n            (bool success, ) = msg.sender.call{value: getBalance() - devFee(getBalance())}(\\\"\\\");\\r\\n            require(success);\\r\\n        } else {\\r\\n            (bool successFee, ) = owner().call{value: devFee(ballValue)}(\\\"\\\");\\r\\n            require(successFee);\\r\\n\\r\\n            (bool success, ) = msg.sender.call{value: ballValue - devFee(ballValue)}(\\\"\\\");\\r\\n            require(success);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateBallSell(uint balls) public view returns (uint) {\\r\\n        return calculateTrade(balls, marketBalls, address(this).balance);\\r\\n    }\\r\\n\\r\\n    function calculateBallBuy(uint amount, uint contractBalance) private view returns (uint) {\\r\\n        return calculateTrade(amount, contractBalance, marketBalls);\\r\\n    }\\r\\n\\r\\n    function calculateTrade(uint rt, uint rs, uint bs) private pure returns (uint) {\\r\\n        return (PSN * bs) / (PSNH + ((PSN * rs) + (PSNH * rt)) / rt);\\r\\n    }\\r\\n\\r\\n    function startDragonBall() external payable onlyOwner {\\r\\n        require(marketBalls == 0);\\r\\n\\r\\n        initialized = true;\\r\\n        marketBalls = 86400000000;\\r\\n    }\\r\\n\\r\\n    function sellBalls(address addr) external onlyOwner {\\r\\n        marketBalls = 0;\\r\\n\\r\\n        (bool success, ) = addr.call{value: getBalance()}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    function getBalance() public view returns (uint){\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getMyMiners() public view returns (uint) {\\r\\n        return questMiners[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getMyBalls() public view returns (uint) {\\r\\n        return claimedBalls[msg.sender] + getBallsSinceLastQuest(msg.sender);\\r\\n    }\\r\\n\\r\\n    function devFee(uint amount) private pure returns (uint) {\\r\\n        return (amount * DEV_FEE / 100);\\r\\n    }\\r\\n\\r\\n    function getBallsSinceLastQuest(address addr) private view returns (uint) {\\r\\n        uint256 secondsPassed = min(BALLS_TO_QUEST_MINERS, block.timestamp - lastQuest[addr]);\\r\\n        return secondsPassed * questMiners[addr];\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) private pure returns (uint) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyBalls\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balls\",\"type\":\"uint256\"}],\"name\":\"calculateBallSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyBalls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchBalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketBalls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"sellBalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDragonBall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DragonBall", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}