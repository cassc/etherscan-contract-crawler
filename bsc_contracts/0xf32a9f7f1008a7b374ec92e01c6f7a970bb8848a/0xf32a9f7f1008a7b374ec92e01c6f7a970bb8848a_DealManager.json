{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DealManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IFeedLoan.sol\\\";\\nimport \\\"./interfaces/IVaultController.sol\\\";\\n\\ncontract DealManager is AccessControl, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /*****************************\\n     ** Constants and Vairables **\\n     *****************************/\\n\\n    /// @dev Access Roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    /// @dev Total number of offers\\n    uint256 public totalOffersCount;\\n\\n    /// @dev Total number of active offers\\n    uint256 public totalActiveOffers;\\n\\n    /// @dev An address of FeedLoan\\n    address public feedLoan;\\n\\n    /// @dev An address of VaultController\\n    address public vaultController;\\n\\n    /// @dev Minimum loan duration\\n    uint256 public minDuration = 0;\\n\\n    /// @dev Minimum interest rate basis points\\n    uint256 public minIntRateBP = 0;\\n\\n    /*********************\\n     ** Modifiers **\\n     *********************/\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Forbidden: only admin is allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(hasRole(MANAGER_ROLE, msg.sender), \\\"Forbidden: only manager is allowed\\\");\\n        _;\\n    }\\n\\n    /*********************\\n     ** Structs & Enums **\\n     *********************/\\n\\n    enum OfferStatus {\\n        Pending,\\n        Closed,\\n        Canceled\\n    }\\n\\n    struct Offer {\\n        uint256 id;\\n        OfferStatus status;\\n        address maker;\\n        address taker;\\n        address collateral;\\n        uint256 collateralAmount;\\n        bool useVault;\\n        uint256 vaultId;\\n        uint256 bidId;\\n        uint256 loanId;\\n    }\\n\\n    struct OfferAskInfo {\\n        string askTitle;\\n        string askDescription;\\n        uint256 askIntRateBP;\\n        uint256 askDuration;\\n        uint256 askCollateralRatio;\\n    }\\n\\n    enum OfferBidStatus {\\n        Open,\\n        Canceled,\\n        Accepted\\n    }\\n\\n    struct OfferBidInfo {\\n        uint256 id;\\n        address account;\\n        OfferBidStatus status;\\n        address asset;\\n        uint256 amount;\\n        uint256 duration;\\n        uint256 intRateBP;\\n        bool intProRated;\\n        bool allowLiquidator;\\n        uint256 updatedAt;\\n    }\\n\\n    /****************\\n     ** Enumerable **\\n     ****************/\\n\\n    EnumerableSet.AddressSet whitelistedCollaterals;\\n    EnumerableSet.AddressSet whitelistedAssets;\\n\\n    /*************\\n     ** Mapping **\\n     *************/\\n\\n    /// @dev mapping collateral address with offer id\\n    mapping(address => uint256[]) public collateralOffers;\\n\\n    /// @dev mapping offer id with offer\\n    mapping(uint256 => Offer) public offers;\\n\\n    /// @dev mapping offer id -> bids\\n    mapping(uint256 => OfferBidInfo[]) public offerBids;\\n\\n    /// @dev mapping offer id -> ask infos\\n    mapping(uint256 => OfferAskInfo) public offerAskInfos;\\n\\n    /// @dev mapping offer id -> preferred assets\\n    mapping(uint256 => address[]) public offerPreferredAssets;\\n\\n    /// @dev mapping bidder address -> offer id -> bid ids\\n    mapping(address => mapping(uint256 => uint256[])) public bidderBids;\\n\\n    /// @dev mapping offer id with bidders address\\n    mapping(uint256 => EnumerableSet.AddressSet) private offerBidders;\\n\\n    /// @dev mapping bidder address with offer ids\\n    mapping(address => uint256[]) private bidderOffers;\\n\\n    /// @dev mapping offer id with bids count\\n    mapping(uint256 => uint256) public offerBidsCount;\\n\\n    /// @dev mapping offer id with active  count\\n    mapping(uint256 => uint256) public offerActiveBidsCount;\\n\\n    /// @dev mapping offer id -> bidder address -> bids count\\n    mapping(uint256 => mapping(address => uint256)) public bidderBidsCount;\\n\\n    /// @dev mapping offer id -> bidder address -> active bids count\\n    mapping(uint256 => mapping(address => uint256)) public bidderActiveBidsCount;\\n\\n    /************\\n     ** Events **\\n     ************/\\n\\n    event OfferCreated(\\n        uint256 indexed _id,\\n        address indexed _maker,\\n        address indexed _collateral,\\n        uint256 _collateralAmount,\\n        bool _useVault,\\n        uint256 _vaultId\\n    );\\n    event OfferAskInfoUpdated(\\n        uint256 indexed _id,\\n        string _askTitle,\\n        string _askDescription,\\n        uint256 _askIntRateBP,\\n        uint256 _askDuration,\\n        uint256 _askCollateralRatio\\n    );\\n    event OfferPreferredAssetsUpdated(uint256 indexed _id, address[] _preferredAssets);\\n    event OfferCanceled(uint256 _offerId);\\n    event OfferBidCreated(\\n        address indexed _account,\\n        uint256 indexed _offerId,\\n        address indexed _asset,\\n        uint256 _amount,\\n        uint256 _duration,\\n        uint256 _intRateBP,\\n        bool _intProRated,\\n        bool _allowLiquidator\\n    );\\n    event OfferBidAccepted(uint256 indexed _offerId, uint256 indexed _bidId);\\n    event OfferBidCanceled(uint256 indexed _offerId, uint256 indexed _bidId);\\n    event OfferBidSet(uint256 indexed _offerId, uint256 indexed _bidId, uint256 indexed _direction, uint256 _amount, uint256 _diff);\\n    event OfferBidInfoSet(\\n        uint256 indexed _offerId,\\n        uint256 indexed _bidId,\\n        uint256 _duration,\\n        uint256 _intRateBP,\\n        bool _intProRated,\\n        bool _allowLiquidator\\n    );\\n\\n    event MinDurationChanged(uint256 _duration);\\n    event MinIntRateBPChanged(uint256 _intRateBP);\\n    event FeedLoanChanged(address _feedLoan);\\n    event VaultControllerChanged(address _vaultController);\\n    event ManagerChanged(address _manager);\\n    event CollateralAdded(address _collateral);\\n    event CollateralRemoved(address _collateral);\\n    event AssetAdded(address _asset);\\n    event AssetRemoved(address _asset);\\n\\n    /**\\n     * @dev Constructor\\n     */\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setupRole(MANAGER_ROLE, msg.sender);\\n        _setRoleAdmin(MANAGER_ROLE, ADMIN_ROLE);\\n    }\\n\\n    /*********************\\n     ** Functions **\\n     *********************/\\n\\n    /**\\n     * @notice Create offer\\n     * @param _collateral: An address of collateral\\n     * @param _collateralAmount: Amount of collateral\\n     * @param _useVault: Enable earn with collateral\\n     * @param _vaultId: Vault ID to deposit\\n     * @param _askTitle: Ask title\\n     * @param _askDescription: Ask description\\n     * @param _askIntRateBP: Ask interest rate basis point\\n     * @param _askDuration: Ask duration\\n     * @param _askCollateralRatio: Ask collateral ratio\\n     * @param _preferredAssets: Preferred assets\\n     */\\n    function createOffer(\\n        address _collateral,\\n        uint256 _collateralAmount,\\n        bool _useVault,\\n        uint256 _vaultId,\\n        string memory _askTitle,\\n        string memory _askDescription,\\n        uint256 _askIntRateBP,\\n        uint256 _askDuration,\\n        uint256 _askCollateralRatio,\\n        address[] memory _preferredAssets\\n    ) external nonReentrant {\\n        require(whitelistedCollaterals.contains(_collateral), \\\"CreateOffer: collateral is not allowed\\\");\\n\\n        if (_useVault) {\\n            (address _token, ) = IVaultController(vaultController).vaultInfo(_vaultId);\\n            require(_collateral == _token, \\\"CreateOffer: vault token mismatch\\\");\\n        }\\n\\n        // Collateral balance before transfer\\n        uint256 _before = IERC20(_collateral).balanceOf(address(this));\\n\\n        // Transfer collateral to contract\\n        IERC20(_collateral).safeTransferFrom(address(msg.sender), address(this), _collateralAmount);\\n\\n        // Deflationary tokens check\\n        _collateralAmount = IERC20(_collateral).balanceOf(address(this)).sub(_before);\\n\\n        uint256 _offerId = totalOffersCount;\\n        Offer memory _offer = Offer({\\n            id: _offerId,\\n            status: OfferStatus.Pending,\\n            maker: address(msg.sender),\\n            taker: address(0),\\n            collateral: _collateral,\\n            collateralAmount: _collateralAmount,\\n            useVault: _useVault,\\n            vaultId: _vaultId,\\n            bidId: 0,\\n            loanId: 0\\n        });\\n        totalOffersCount = totalOffersCount.add(1);\\n        totalActiveOffers = totalActiveOffers.add(1);\\n        collateralOffers[_collateral].push(_offerId);\\n\\n        // Set offer's ask information\\n        offerAskInfos[_offerId] = OfferAskInfo({\\n            askTitle: _askTitle,\\n            askDescription: _askDescription,\\n            askIntRateBP: _askIntRateBP,\\n            askDuration: _askDuration,\\n            askCollateralRatio: _askCollateralRatio\\n        });\\n\\n        // Set preferred assets\\n        offerPreferredAssets[_offerId] = _preferredAssets;\\n\\n        // Add offer to storage before moving collateral\\n        offers[_offerId] = _offer;\\n\\n        // Emit OfferCreated event\\n        emit OfferCreated(_offerId, address(msg.sender), _collateral, _collateralAmount, _useVault, _vaultId);\\n    }\\n\\n    /**\\n     * @notice Update Offer Ask Info\\n     * @param _offerId: Offer ID\\n     * @param _askTitle: Ask title\\n     * @param _askDescription: Ask description\\n     * @param _askIntRateBP: Ask interest rate basis point\\n     * @param _askDuration: Ask duration\\n     * @param _askCollateralRatio: Ask collateral ratio\\n     */\\n    function updateOfferAskInfo(\\n        uint256 _offerId,\\n        string memory _askTitle,\\n        string memory _askDescription,\\n        uint256 _askIntRateBP,\\n        uint256 _askDuration,\\n        uint256 _askCollateralRatio\\n    ) external nonReentrant {\\n        require(_offerId < totalOffersCount, \\\"UpdateOffer: offer not found\\\");\\n        Offer storage _offer = offers[_offerId];\\n        require(address(msg.sender) == _offer.maker, \\\"UpdateOffer: only maker is allowed to update\\\");\\n        require(_offer.status == OfferStatus.Pending, \\\"UpdateOffer: offer is either closed or canceled\\\");\\n\\n        OfferAskInfo storage _info = offerAskInfos[_offerId];\\n\\n        // Set offer ask title\\n        _info.askTitle = _askTitle;\\n\\n        // Set offer ask description\\n        _info.askDescription = _askDescription;\\n\\n        // Set offer ask interest rate basis point\\n        _info.askIntRateBP = _askIntRateBP;\\n\\n        // Set offer ask duration\\n        _info.askDuration = _askDuration;\\n\\n        // Set offer ask collateral ratio\\n        _info.askCollateralRatio = _askCollateralRatio;\\n\\n        emit OfferAskInfoUpdated(_offerId, _askTitle, _askDescription, _askIntRateBP, _askDuration, _askCollateralRatio);\\n    }\\n\\n    /**off\\n     * @notice Set offer's preferred assets\\n     * @param _offerId: Offer ID\\n     * @param _preferredAssets: Preferred assets\\n     */\\n    function setPreferredAssets(uint256 _offerId, address[] memory _preferredAssets) external nonReentrant {\\n        require(_offerId < totalOffersCount, \\\"SetPreferredAssets: offer not found\\\");\\n        Offer storage _offer = offers[_offerId];\\n        require(address(msg.sender) == _offer.maker, \\\"SetPreferredAssets: only maker is allowed to update\\\");\\n        require(_offer.status == OfferStatus.Pending, \\\"SetPreferredAssets: offer is either closed or canceled\\\");\\n\\n        // Set new offer preferred assets\\n        offerPreferredAssets[_offerId] = _preferredAssets;\\n\\n        emit OfferPreferredAssetsUpdated(_offerId, _preferredAssets);\\n    }\\n\\n    /**\\n     * @notice Cancel Offer\\n     * @param _offerId: Offer ID\\n     */\\n    function cancelOffer(uint256 _offerId) external nonReentrant {\\n        require(_offerId < totalOffersCount, \\\"CancelOffer: offer not found\\\");\\n        Offer storage _offer = offers[_offerId];\\n        require(address(msg.sender) == _offer.maker, \\\"CancelOffer: only maker is allowed to cancel\\\");\\n        require(_offer.status == OfferStatus.Pending, \\\"CancelOffer: offer is either closed or canceled\\\");\\n\\n        // Set offer status to cancel\\n        _offer.status = OfferStatus.Canceled;\\n\\n        // Reduce total active offers counter\\n        totalActiveOffers = totalActiveOffers.sub(1);\\n\\n        // Transfer collateral back to offer's maker\\n        IERC20(_offer.collateral).safeTransfer(address(_offer.maker), _offer.collateralAmount);\\n\\n        // Emit OfferCanceled event\\n        emit OfferCanceled(_offerId);\\n    }\\n\\n    /**\\n     * @notice Create bid to offer\\n     * @param _offerId: Offer ID\\n     * @param _asset: An address of asset to lend\\n     * @param _amount: Amount of asset to lend\\n     * @param _duration: Duration to lend in seconds\\n     * @param _intRateBP: Interest rate in basis points\\n     * @param _intProRated: Enable prorated interest rate\\n     * @param _allowLiquidator: Allow anyone to liquidate loan\\n     */\\n    function offerBid(\\n        uint256 _offerId,\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _duration,\\n        uint256 _intRateBP,\\n        bool _intProRated,\\n        bool _allowLiquidator\\n    ) external payable nonReentrant {\\n        require(_offerId < totalOffersCount, \\\"OfferBid: offer not found\\\");\\n        require(whitelistedAssets.contains(_asset), \\\"OfferBid: asset is not allowed\\\");\\n        Offer storage _offer = offers[_offerId];\\n        require(address(msg.sender) != _offer.maker, \\\"OfferBid: maker is not allowed to bid\\\");\\n        require(_offer.status == OfferStatus.Pending, \\\"OfferBid: offer is either closed or canceled\\\");\\n\\n        require(_duration >= minDuration, \\\"OfferBid: duration is shorter than minimum\\\");\\n        require(_intRateBP >= minIntRateBP, \\\"OfferBid: interest rate is lower than minimum\\\");\\n\\n        // Asset balance before transfer\\n        uint256 _before = IERC20(_asset).balanceOf(address(this));\\n\\n        /// Transfer asset to contract\\n        IERC20(_asset).safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        // Deflationary tokens check\\n        _amount = IERC20(_asset).balanceOf(address(this)).sub(_before);\\n\\n        OfferBidInfo memory _bidInfo = OfferBidInfo({\\n            id: offerBidsCount[_offer.id],\\n            account: address(msg.sender),\\n            status: OfferBidStatus.Open,\\n            asset: _asset,\\n            amount: _amount,\\n            duration: _duration,\\n            intRateBP: _intRateBP,\\n            intProRated: _intProRated,\\n            allowLiquidator: _allowLiquidator,\\n            updatedAt: block.timestamp\\n        });\\n\\n        // Increment offer bids counter\\n        offerBidsCount[_offer.id] += 1;\\n        offerActiveBidsCount[_offer.id] += 1;\\n\\n        // Add bid to storage before moving asset\\n        offerBids[_offer.id].push(_bidInfo);\\n\\n        // Track bids by bidder\\n        bidderBids[address(msg.sender)][_offer.id].push(bidderBidsCount[_offer.id][address(msg.sender)]);\\n\\n        // Increment bidder bids counter\\n        bidderBidsCount[_offer.id][address(msg.sender)] += 1;\\n        bidderActiveBidsCount[_offer.id][address(msg.sender)] += 1;\\n\\n        // Track offers and bidders\\n        if (!offerBidders[_offer.id].contains(address(msg.sender))) {\\n            offerBidders[_offer.id].add(address(msg.sender));\\n            bidderOffers[address(msg.sender)].push(_offer.id);\\n        }\\n\\n        /// Emit OfferBidCreated event\\n        emit OfferBidCreated(address(msg.sender), _offer.id, _asset, _amount, _duration, _intRateBP, _intProRated, _allowLiquidator);\\n    }\\n\\n    /**\\n     * @notice Set bid\\n     * @param _offerId: Offer ID\\n     * @param _bidId: Bid ID\\n     * @param _amount: Amount of asset\\n     */\\n    function setBid(\\n        uint256 _offerId,\\n        uint256 _bidId,\\n        uint256 _amount\\n    ) external nonReentrant {\\n        Offer storage _offer = offers[_offerId];\\n        require(_offer.status == OfferStatus.Pending, \\\"SetBid: offer is either closed or canceled\\\");\\n\\n        OfferBidInfo storage _bid = offerBids[_offerId][_bidId];\\n        require(_bid.account == address(msg.sender), \\\"SetBid: account not bidder\\\");\\n        require(_bid.status == OfferBidStatus.Open, \\\"SetBid: bid is either accepted or canceled\\\");\\n        require(_bid.amount != _amount, \\\"SetBid: bid amount unchanged\\\");\\n\\n        _bid.updatedAt = block.timestamp;\\n\\n        if (_amount > _bid.amount) {\\n            // Transfer additional bid asset from bidder\\n            uint256 _incAmount = _amount.sub(_bid.amount);\\n\\n            // Asset balance before transfer\\n            uint256 _before = IERC20(_bid.asset).balanceOf(address(this));\\n\\n            /// Transfer asset to contract\\n            IERC20(_bid.asset).safeTransferFrom(address(msg.sender), address(this), _incAmount);\\n\\n            // Deflationary tokens check\\n            _incAmount = IERC20(_bid.asset).balanceOf(address(this)).sub(_before);\\n\\n            // Update bidded amount in storage\\n            _bid.amount += _incAmount;\\n\\n            // Emit OfferBidSet event\\n            emit OfferBidSet(_offerId, _bid.id, 1, _bid.amount, _incAmount);\\n        } else {\\n            // Transfer reducted bid asset back to bidder\\n            uint256 _reducAmount = _bid.amount.sub(_amount);\\n            IERC20(_bid.asset).safeTransfer(address(msg.sender), _reducAmount);\\n\\n            // Reduce bidded amount in storage\\n            _bid.amount -= _reducAmount;\\n\\n            // Emit OfferBidSet event\\n            emit OfferBidSet(_offerId, _bid.id, 0, _bid.amount, _reducAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set bid info\\n     * @param _offerId: Offer ID\\n     * @param _bidId: Bid ID\\n     * @param _duration: Duration to lend in seconds\\n     * @param _intRateBP: Interest rate in basis points\\n     * @param _intProRated: Enable prorated interest rate\\n     * @param _allowLiquidator: Allow anyone to liquidate loan\\n     */\\n    function setBidInfo(\\n        uint256 _offerId,\\n        uint256 _bidId,\\n        uint256 _duration,\\n        uint256 _intRateBP,\\n        bool _intProRated,\\n        bool _allowLiquidator\\n    ) external nonReentrant {\\n        Offer storage _offer = offers[_offerId];\\n        require(_offer.status == OfferStatus.Pending, \\\"SetBidInfo: offer is either closed or canceled\\\");\\n\\n        OfferBidInfo storage _bid = offerBids[_offerId][_bidId];\\n        require(_bid.account == address(msg.sender), \\\"SetBidInfo: account not bidder\\\");\\n        require(_bid.status == OfferBidStatus.Open, \\\"SetBidInfo: bid is either accepted or canceled\\\");\\n        require(_duration >= minDuration, \\\"SetBidInfo: duration is shorter than minimum\\\");\\n        require(_intRateBP >= minIntRateBP, \\\"SetBidInfo: interest rate is lower than minimum\\\");\\n\\n        // Update Bid info\\n        _bid.updatedAt = block.timestamp;\\n        _bid.duration = _duration;\\n        _bid.intRateBP = _intRateBP;\\n        _bid.intProRated = _intProRated;\\n        _bid.allowLiquidator = _allowLiquidator;\\n\\n        emit OfferBidInfoSet(_offerId, _bid.id, _duration, _intRateBP, _intProRated, _allowLiquidator);\\n    }\\n\\n    /**\\n     * @notice Accept bid\\n     * @param _offerId: Offer ID\\n     * @param _bidId: Bid ID\\n     * @param _safeDuration: Safe duration\\n     */\\n    function acceptBid(\\n        uint256 _offerId,\\n        uint256 _bidId,\\n        uint256 _safeDuration\\n    ) external nonReentrant {\\n        require(_offerId < totalOffersCount, \\\"AcceptBid: offer not found\\\");\\n        Offer storage _offer = offers[_offerId];\\n        OfferBidInfo storage _bid = offerBids[_offer.id][_bidId];\\n        require(_offer.maker == address(msg.sender), \\\"AcceptBid: account not maker\\\");\\n        require(_offer.status == OfferStatus.Pending, \\\"AcceptBid: offer is either closed or canceled\\\");\\n        require(_bid.status == OfferBidStatus.Open, \\\"AcceptBid: bid is already canceled\\\");\\n        require(block.timestamp > _bid.updatedAt + _safeDuration, \\\"AcceptBid: bid is recently updated\\\");\\n\\n        // Set offer status to closed\\n        _offer.status = OfferStatus.Closed;\\n\\n        // Set offer taker to lender address\\n        _offer.taker = _bid.account;\\n\\n        // Set bid status to Accepted\\n        _bid.status = OfferBidStatus.Accepted;\\n\\n        // Reduce total active offers counter\\n        totalActiveOffers -= 1;\\n\\n        // Reduce offer bids count\\n        offerActiveBidsCount[_offerId] -= 1;\\n\\n        // Reduce bidder bids count\\n        bidderActiveBidsCount[_offerId][_bid.account] -= 1;\\n\\n        // Transfer asset and collateral to loan manager and open a loan and mint nft\\n        IERC20(_offer.collateral).safeApprove(address(feedLoan), 0);\\n        IERC20(_offer.collateral).safeApprove(address(feedLoan), _offer.collateralAmount);\\n        IERC20(_bid.asset).safeApprove(address(feedLoan), 0);\\n        IERC20(_bid.asset).safeApprove(address(feedLoan), _bid.amount);\\n        uint256 _loanId = IFeedLoan(feedLoan).startLoan(\\n            _bid.account,\\n            _bid.asset,\\n            _bid.amount,\\n            _offer.maker,\\n            _offer.collateral,\\n            _offer.collateralAmount,\\n            _bid.duration,\\n            _bid.intRateBP,\\n            _bid.intProRated,\\n            _offer.useVault,\\n            _offer.vaultId\\n        );\\n\\n        // Set loan's ID to offer info\\n        _offer.loanId = _loanId;\\n\\n        // Set accepted bid's ID to offer info\\n        _offer.bidId = _bid.id;\\n\\n        if (_bid.allowLiquidator) IFeedLoan(feedLoan).setAllowLiquidator(_loanId, _bid.allowLiquidator);\\n\\n        // Emit OfferBidAccepted event\\n        emit OfferBidAccepted(_offerId, _bidId);\\n    }\\n\\n    /**\\n     * @notice Cancel bid\\n     * @param _offerId: Offer ID\\n     * @param _bidId: Bid ID\\n     */\\n    function cancelBid(uint256 _offerId, uint256 _bidId) external nonReentrant {\\n        require(_offerId < totalOffersCount, \\\"CancelBid: offer not found\\\");\\n        Offer storage _offer = offers[_offerId];\\n        OfferBidInfo storage _bid = offerBids[_offer.id][_bidId];\\n        require(_bid.account == address(msg.sender), \\\"CancelBid: account not bidder\\\");\\n        require(_bid.status == OfferBidStatus.Open, \\\"CancelBid: bid is already canceled or accepted\\\");\\n\\n        // Reduce offer bids count\\n        offerActiveBidsCount[_offer.id] -= 1;\\n\\n        // Set bid status to canceled\\n        _bid.status = OfferBidStatus.Canceled;\\n\\n        // Set bid updatedAt\\n        _bid.updatedAt = block.timestamp;\\n\\n        // Reduce bidder bids count\\n        bidderActiveBidsCount[_offer.id][address(msg.sender)] -= 1;\\n\\n        // Transfer asset back to bidder\\n        IERC20(_bid.asset).safeTransfer(address(msg.sender), _bid.amount);\\n\\n        /// Emit OfferBidCanceled event\\n        emit OfferBidCanceled(_offerId, _bidId);\\n    }\\n\\n    /*********************\\n     ** View Functions **\\n     *********************/\\n\\n    /**\\n     * @notice Get collateral address by ID\\n     * @param _index: Index of collateral\\n     */\\n    function collaterals(uint256 _index) external view returns (address _collateral) {\\n        _collateral = whitelistedCollaterals.at(_index);\\n    }\\n\\n    /**\\n     * @notice Count total number of collaterals\\n     */\\n    function collateralsCount() external view returns (uint256 _length) {\\n        _length = whitelistedCollaterals.length();\\n    }\\n\\n    /**\\n     * @notice Get asset address by ID\\n     * @param _index: Index of collateral\\n     */\\n    function assets(uint256 _index) external view returns (address _asset) {\\n        _asset = whitelistedAssets.at(_index);\\n    }\\n\\n    /**\\n     * @notice Count total number of collaterals\\n     */\\n    function assetsCount() external view returns (uint256 _length) {\\n        _length = whitelistedAssets.length();\\n    }\\n\\n    /**\\n     * @notice View list of current bidders and bid info for an offer\\n     * @param _offerId: offer id\\n     * @param _cursor: cursor\\n     * @param _size: size\\n     */\\n    function viewBidsPerOffer(\\n        uint256 _offerId,\\n        uint256 _cursor,\\n        uint256 _size\\n    ) external view returns (OfferBidInfo[] memory, uint256) {\\n        uint256 _length = _size;\\n        uint256 _bidsLength = offerBids[_offerId].length;\\n        if (_length > _bidsLength - _cursor) {\\n            _length = _bidsLength - _cursor;\\n        }\\n\\n        OfferBidInfo[] memory _values = new OfferBidInfo[](_length);\\n        for (uint256 i = 0; i < _length; i++) {\\n            _values[i] = offerBids[_offerId][_cursor + i];\\n        }\\n\\n        return (_values, _cursor + _length);\\n    }\\n\\n    /**\\n     * @notice View list of bids by bidder at specific offer\\n     * @param _offerId: offer id\\n     * @param _bidder: bidder\\n     * @param _cursor: cursor\\n     * @param _size: size\\n     */\\n    function viewBidsPerBidder(\\n        uint256 _offerId,\\n        address _bidder,\\n        uint256 _cursor,\\n        uint256 _size\\n    ) external view returns (OfferBidInfo[] memory, uint256) {\\n        uint256 _length = _size;\\n        uint256 _bidsLength = bidderBids[_bidder][_offerId].length;\\n        if (_length > _bidsLength - _cursor) {\\n            _length = _bidsLength - _cursor;\\n        }\\n\\n        OfferBidInfo[] memory _values = new OfferBidInfo[](_length);\\n        for (uint256 i = 0; i < _length; i++) {\\n            uint256 _bidId = bidderBids[_bidder][_offerId][_cursor + i];\\n            _values[i] = offerBids[_offerId][_bidId];\\n        }\\n\\n        return (_values, _cursor + _length);\\n    }\\n\\n    /**\\n     * @notice View list of offers\\n     * @param _cursor: cursor\\n     * @param _size: size\\n     */\\n    function viewOffers(uint256 _cursor, uint256 _size) external view returns (Offer[] memory, uint256) {\\n        uint256 _length = _size;\\n        uint256 _offersLength = totalOffersCount;\\n        if (_length > _offersLength - _cursor) {\\n            _length = _offersLength - _cursor;\\n        }\\n\\n        Offer[] memory _values = new Offer[](_length);\\n        for (uint256 i = 0; i < _length; i++) {\\n            _values[i] = offers[_cursor + i];\\n        }\\n\\n        return (_values, _cursor + _length);\\n    }\\n\\n    /**\\n     * @notice View list of offers by collateral\\n     * @param _collateral: collateral address\\n     * @param _cursor: cursor\\n     * @param _size: size\\n     */\\n    function viewOffersByCollateral(\\n        address _collateral,\\n        uint256 _cursor,\\n        uint256 _size\\n    ) external view returns (Offer[] memory, uint256) {\\n        uint256 _length = _size;\\n        uint256 _offersLength = collateralOffers[_collateral].length;\\n        if (_length > _offersLength - _cursor) {\\n            _length = _offersLength - _cursor;\\n        }\\n\\n        Offer[] memory _values = new Offer[](_length);\\n        for (uint256 i = 0; i < _length; i++) {\\n            uint256 _offerId = collateralOffers[_collateral][_cursor + i];\\n            _values[i] = offers[_offerId];\\n        }\\n\\n        return (_values, _cursor + _length);\\n    }\\n\\n    /**\\n     * @notice Count total number of offers by collateral\\n     * @param _collateral: collateral address\\n     */\\n    function offersCountByCollateral(address _collateral) external view returns (uint256) {\\n        return collateralOffers[_collateral].length;\\n    }\\n\\n    /**\\n     * @notice Count offer preferred assets\\n     * @param _offerId: Offer ID\\n     */\\n    function offerPreferredAssetsCount(uint256 _offerId) external view returns (uint256) {\\n        return offerPreferredAssets[_offerId].length;\\n    }\\n\\n    /*********************\\n     ** Admin Functions **\\n     *********************/\\n\\n    /**\\n     * @notice Set FeedLoan address\\n     * @param _feedLoan: address of new FeedLoan\\n     * @dev Callable by owner\\n     */\\n    function setFeedLoan(address _feedLoan) external onlyAdmin nonReentrant {\\n        require(_feedLoan != address(0), \\\"SetFeedLoan: Cannot be zero address\\\");\\n\\n        feedLoan = _feedLoan;\\n\\n        emit FeedLoanChanged(feedLoan);\\n    }\\n\\n    /**\\n     * @notice Set VaultController address\\n     * @param _vaultController: address of new VaultController\\n     * @dev Callable by owner\\n     */\\n    function setVaultController(address _vaultController) external onlyAdmin nonReentrant {\\n        require(_vaultController != address(0), \\\"SetVaultController: Cannot be zero address\\\");\\n        require(vaultController == address(0), \\\"SetVaultController: Cannot replace vault controller\\\");\\n\\n        vaultController = _vaultController;\\n\\n        emit VaultControllerChanged(_vaultController);\\n    }\\n\\n    /**\\n     * @notice Add addresses to whitelisted collateral\\n     * @param _collaterals: addresses of collaterals to add\\n     * @dev Callable by manager\\n     */\\n    function addCollateral(address[] calldata _collaterals) external onlyManager nonReentrant {\\n        for (uint256 i = 0; i < _collaterals.length; i++) {\\n            address _collateral = _collaterals[i];\\n            if (!whitelistedCollaterals.contains(_collateral)) {\\n                whitelistedCollaterals.add(_collateral);\\n\\n                emit CollateralAdded(_collateral);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove addresses from whitelisted collateral\\n     * @param _collaterals: addresses of collaterals to remove\\n     * @dev Callable by manager\\n     */\\n    function removeCollateral(address[] calldata _collaterals) external onlyManager nonReentrant {\\n        for (uint256 i = 0; i < _collaterals.length; i++) {\\n            address _collateral = _collaterals[i];\\n\\n            whitelistedCollaterals.remove(_collateral);\\n\\n            emit CollateralRemoved(_collateral);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add addresses to whitelisted assets\\n     * @param _assets: addresses of assets to add\\n     * @dev Callable by manager\\n     */\\n    function addAsset(address[] calldata _assets) external onlyManager nonReentrant {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            address _asset = _assets[i];\\n            if (!whitelistedAssets.contains(_asset)) {\\n                whitelistedAssets.add(_asset);\\n\\n                emit AssetAdded(_asset);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove addresses from whitelisted assets\\n     * @param _assets: addresses of assets to remove\\n     * @dev Callable by manager\\n     */\\n    function removeAsset(address[] calldata _assets) external onlyManager nonReentrant {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            address _asset = _assets[i];\\n\\n            whitelistedAssets.remove(_asset);\\n\\n            emit AssetRemoved(_asset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set minimum loan duration\\n     * @param _duration: Minimum loan duration in seconds\\n     */\\n    function setMinDuration(uint256 _duration) external onlyManager nonReentrant {\\n        minDuration = _duration;\\n\\n        emit MinDurationChanged(_duration);\\n    }\\n\\n    /**\\n     * @notice Set minimum interest rate basis points\\n     * @param _intRateBP: Minimum interest rate in basis points\\n     */\\n    function setMinIntRateBP(uint256 _intRateBP) external onlyManager nonReentrant {\\n        minIntRateBP = _intRateBP;\\n\\n        emit MinIntRateBPChanged(_intRateBP);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeedLoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IFeedLoan {\\n    function startLoan(\\n        address _lender,\\n        address _asset,\\n        uint256 _assetAmount,\\n        address _borrower,\\n        address _collateral,\\n        uint256 _collateralAmount,\\n        uint256 _duration,\\n        uint256 _intRateBP,\\n        bool _intProRated,\\n        bool _useVault,\\n        uint256 _vaultId\\n    ) external returns (uint256 _id);\\n\\n    function setAllowLiquidator(uint256 _loanId, bool _allowLiquidator) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IVaultController {\\n    function deposit(\\n        uint256 _vid,\\n        uint256 _loanId,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdraw(uint256 _vid, uint256 _loanId) external;\\n\\n    function vaultInfo(uint256 _vid) external view returns (address, address);\\n\\n    function vaultLength() external view returns (uint256);\\n\\n    function balance(uint256 _vid, uint256 _loanId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"CollateralRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feedLoan\",\"type\":\"address\"}],\"name\":\"FeedLoanChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"MinDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_intRateBP\",\"type\":\"uint256\"}],\"name\":\"MinIntRateBPChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_askTitle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_askDescription\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_askIntRateBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_askDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_askCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"OfferAskInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"OfferBidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"OfferBidCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_intRateBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_intProRated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_allowLiquidator\",\"type\":\"bool\"}],\"name\":\"OfferBidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_intRateBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_intProRated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_allowLiquidator\",\"type\":\"bool\"}],\"name\":\"OfferBidInfoSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_diff\",\"type\":\"uint256\"}],\"name\":\"OfferBidSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"OfferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_useVault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_preferredAssets\",\"type\":\"address[]\"}],\"name\":\"OfferPreferredAssetsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vaultController\",\"type\":\"address\"}],\"name\":\"VaultControllerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safeDuration\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collaterals\",\"type\":\"address[]\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidderActiveBidsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidderBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidderBidsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_askTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_askDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_askIntRateBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_askDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_askCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_preferredAssets\",\"type\":\"address[]\"}],\"name\":\"createOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minIntRateBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerActiveBidsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerAskInfos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"askTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"askDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"askIntRateBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"askDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"askCollateralRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intRateBP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_intProRated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_allowLiquidator\",\"type\":\"bool\"}],\"name\":\"offerBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum DealManager.OfferBidStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intRateBP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"intProRated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowLiquidator\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerBidsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerPreferredAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"offerPreferredAssetsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum DealManager.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"offersCountByCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collaterals\",\"type\":\"address[]\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intRateBP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_intProRated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_allowLiquidator\",\"type\":\"bool\"}],\"name\":\"setBidInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feedLoan\",\"type\":\"address\"}],\"name\":\"setFeedLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setMinDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intRateBP\",\"type\":\"uint256\"}],\"name\":\"setMinIntRateBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_preferredAssets\",\"type\":\"address[]\"}],\"name\":\"setPreferredAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultController\",\"type\":\"address\"}],\"name\":\"setVaultController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalActiveOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOffersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_askTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_askDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_askIntRateBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_askDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_askCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"updateOfferAskInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"viewBidsPerBidder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum DealManager.OfferBidStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intRateBP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"intProRated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowLiquidator\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct DealManager.OfferBidInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"viewBidsPerOffer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum DealManager.OfferBidStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intRateBP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"intProRated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowLiquidator\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct DealManager.OfferBidInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"viewOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum DealManager.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"internalType\":\"struct DealManager.Offer[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"viewOffersByCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum DealManager.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"internalType\":\"struct DealManager.Offer[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DealManager", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}