{"SourceCode": "/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-06-28\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2020-09-14\r\n */\r\n\r\npragma solidity ^0.4.25;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract Multisend {\r\n    uint256 public FEE_SERVICE;\r\n    address public WALLET_RECEIVER;\r\n    address private owner;\r\n\r\n    constructor(uint256 _FEE_SERVICE, address _WALLET_RECEIVER) public {\r\n        owner = msg.sender;\r\n        FEE_SERVICE = _FEE_SERVICE;\r\n        WALLET_RECEIVER = _WALLET_RECEIVER;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function Owner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function multisendTokenBase(address[] recipients, uint256[] values)\r\n        external\r\n        payable\r\n    {\r\n        uint256 totalValue = msg.value;\r\n        require(totalValue >= FEE_SERVICE, \"Insufficient Balance Fee\");\r\n\r\n        uint256 actualValue = totalValue - FEE_SERVICE;\r\n        uint256 recipientCount = recipients.length;\r\n\r\n        for (uint256 i = 0; i < recipientCount; i++) {\r\n            require(actualValue >= values[i], \"Insufficient value\");\r\n            recipients[i].transfer(values[i]);\r\n            actualValue -= values[i];\r\n        }\r\n\r\n        if (FEE_SERVICE > 0) {\r\n            WALLET_RECEIVER.transfer(FEE_SERVICE);\r\n        }\r\n        if (actualValue > 0) {\r\n            msg.sender.transfer(actualValue);\r\n        }\r\n    }\r\n\r\n    function multisendToken(\r\n        IERC20 token,\r\n        address[] recipients,\r\n        uint256[] values\r\n    ) external payable {\r\n        require(msg.value >= FEE_SERVICE, \"Insufficient Balance Fee\");\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < recipients.length; i++) total += values[i];\r\n        require(token.transferFrom(msg.sender, address(this), total));\r\n        for (i = 0; i < recipients.length; i++)\r\n            require(token.transfer(recipients[i], values[i]));\r\n\r\n        bool feeTransferSuccess = WALLET_RECEIVER.call.value(FEE_SERVICE)(\"\");\r\n        require(feeTransferSuccess, \"Gas fee transfer failed\");\r\n    }\r\n\r\n    function rescueStuckToken(address _token, address _to) external onlyOwner {\r\n        require(_token != address(this), \"Invalid token\");\r\n        uint256 _amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(_to, _amount);\r\n    }\r\n\r\n    function rescueStuckTokenBase() external onlyOwner {\r\n        bool success;\r\n        (success) = address(msg.sender).call.value(address(this).balance)(\"\");\r\n    }\r\n\r\n    function multisendTokenAndTokenBase(\r\n        IERC20 token,\r\n        address[] recipients,\r\n        uint256[] tokenValues,\r\n        uint256[] bnbValues\r\n    ) external payable {\r\n        require(msg.value >= FEE_SERVICE, \"Insufficient BNB fee\");\r\n         uint256 total = 0;\r\n        for (uint256 i = 0; i < recipients.length; i++) total += tokenValues[i];\r\n        require(token.transferFrom(msg.sender, address(this), total));\r\n        for (i = 0; i < recipients.length; i++)\r\n            require(token.transfer(recipients[i], tokenValues[i]));\r\n\r\n        uint256 totalBNB = msg.value - FEE_SERVICE;\r\n        require(totalBNB >= bnbValues[0], \"Insufficient BNB value\");\r\n        for (i = 0; i < recipients.length; i++) {\r\n            require(bnbValues[i] > 0, \"BNB value must be greater than 0\");\r\n            require(totalBNB >= bnbValues[i], \"Insufficient BNB value\");\r\n            recipients[i].transfer(bnbValues[i]);\r\n            totalBNB -= bnbValues[i];\r\n        }\r\n\r\n        bool feeTransferSuccess = WALLET_RECEIVER.call.value(FEE_SERVICE)(\"\");\r\n        require(feeTransferSuccess, \"Gas fee transfer failed\");\r\n\r\n        // Return excess BNB to the sender\r\n        if (totalBNB > 0) {\r\n            msg.sender.transfer(totalBNB);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function updateFeeService(uint256 _FEE_SERVICE) public onlyOwner {\r\n        FEE_SERVICE = _FEE_SERVICE;\r\n    }\r\n\r\n    function updateWalletReceiver(address _WALLET_RECEIVER) public onlyOwner {\r\n        WALLET_RECEIVER = _WALLET_RECEIVER;\r\n    }\r\n\r\n   \r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_RECEIVER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_SERVICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_FEE_SERVICE\",\"type\":\"uint256\"}],\"name\":\"updateFeeService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisendTokenBase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueStuckToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rescueStuckTokenBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"tokenValues\",\"type\":\"uint256[]\"},{\"name\":\"bnbValues\",\"type\":\"uint256[]\"}],\"name\":\"multisendTokenAndTokenBase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_WALLET_RECEIVER\",\"type\":\"address\"}],\"name\":\"updateWalletReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_FEE_SERVICE\",\"type\":\"uint256\"},{\"name\":\"_WALLET_RECEIVER\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "Multisend", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000037fbb2916e6246bb217de21f762a0a2388888888", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://44e07549315b2deb113e71e7051d95018bb44f241de2b60c363a6aa70fa0f43d"}