{"SourceCode": "pragma solidity ^0.4.15;\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract Feeable is Ownable {\r\n\r\n    uint8 public feePercent;\r\n\r\n    function Feeable() public {\r\n        feePercent = 80;\r\n    }\r\n\r\n    function setFeePercent(uint8 _feePercent) public onlyOwner {\r\n        feePercent = _feePercent;\r\n    }\r\n\r\n    function minFee() public view returns(uint256) {\r\n        return tx.gasprice * msg.gas * feePercent / 100;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom( address from, address to, uint value) returns (bool ok);\r\n}\r\n\r\n\r\ncontract Multiplexer is Feeable {\r\n\r\n\tfunction sendEth(address[] _to, uint256[] _value) payable returns (bool _success) {\r\n\t\t// input validation\r\n\t\tassert(_to.length == _value.length);\r\n\t\tassert(_to.length <= 255);\r\n        uint256 fee = minFee();\r\n        require(msg.value > fee);\r\n\r\n        uint256 remain_value = msg.value - fee;\r\n\r\n\t\t// loop through to addresses and send value\r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n            require(remain_value >= _value[i]);\r\n            remain_value = remain_value - _value[i];\r\n\r\n\t\t\t_to[i].transfer(_value[i]);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction sendErc20(address _tokenAddress, address[] _to, uint256[] _value) payable returns (bool _success) {\r\n\t\t// input validation\r\n\t\tassert(_to.length == _value.length);\r\n\t\tassert(_to.length <= 255);\r\n        require(msg.value >= minFee());\r\n\r\n\t\t// use the erc20 abi\r\n\t\tERC20 token = ERC20(_tokenAddress);\r\n\t\t// loop through to addresses and send value\r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\tassert(token.transferFrom(msg.sender, _to[i], _value[i]) == true);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n    function claim(address _token) public onlyOwner {\r\n        if (_token == 0x0) {\r\n            owner.transfer(this.balance);\r\n            return;\r\n        }\r\n        ERC20 erc20token = ERC20(_token);\r\n        uint256 balance = erc20token.balanceOf(this);\r\n        erc20token.transfer(owner, balance);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"sendEth\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"sendErc20\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feePercent\",\"type\":\"uint8\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Multiplexer", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5b594e6f0edd4e000d00d97dd53639ea5556917976290f981611e507ea28dee8"}