{"SourceCode": "/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-12-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-12-11\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-12-04\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-11-17\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-11-01\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n}\r\n\r\ncontract StakingNewSmartContractAtar {\r\n    using SafeMath for uint256;\r\n\r\n    address payable public owner;\r\n    address public manager;\r\n\r\n    uint256 public minimumStakeAmt;\r\n    uint256 public totalUnStakedAmt;\r\n    uint256 public totalStakedAmt;\r\n    uint256 public totalClaimedRewardToken;\r\n    uint256 public totalStakers;\r\n    uint256 public percentDivider;\r\n    uint256 public totalFee;\r\n\r\n    uint256[7] public Duration = [30 days, 60 days, 90 days, 180 days, 365 days, 730 days, 1095 days];  // These are token locking periods; we may also enter a number of seconds here\r\n    //.   uint256[5] public Bonus = [12, 37, 72, 121, 505]; // These bonus variables are related to duration and the amount will be multiplied by 10 for example 10 percent is equals to 100\r\n\r\n    struct tierBonus {\r\n        uint256 tierId;\r\n        uint256 durationId;\r\n        uint256 bonus; \r\n    }\r\n\r\n    struct TierInfo{\r\n        uint256 minStakeAmt;\r\n        uint256 maxStakeAmt;\r\n        uint256 tierId;\r\n    }\r\n\r\n    struct Stake {\r\n        uint256 unstaketime;\r\n        uint256 staketime;\r\n        uint256 amount;\r\n        uint256 reward;\r\n        uint256 lastharvesttime;\r\n        uint256 remainingreward;\r\n        uint256 harvestreward;\r\n        uint256 persecondreward;\r\n        bool withdrawan;\r\n        bool unstaked;\r\n    }\r\n\r\n    struct User {\r\n        uint256 totalStakedAmtUser;\r\n        uint256 currentStakedAmtUser;\r\n        uint256 totalUnstakedAmtUser;\r\n        uint256 totalClaimedRewardTokenUser;\r\n        uint256 stakeCount;\r\n        uint256 currTierId;\r\n        bool alreadyExists;\r\n    }\r\n    struct userCat{\r\n        uint256 extBonus;\r\n        string cat;\r\n    }\r\n    mapping(address => userCat) public UserCategory;\r\n    TierInfo[] public tInfo;\r\n    mapping(uint256 => mapping(uint256 => tierBonus)) public tierBonuses;\r\n    mapping(address => User) public Stakers;\r\n    mapping(uint256 => address) public StakersID;\r\n    mapping(address => mapping(uint256 => Stake)) public stakersRecord;\r\n\r\n    event STAKE(address Staker, uint256 amount);\r\n    event HARVEST(address Staker, uint256 amount);\r\n    event UNSTAKE(address Staker, uint256 amount);\r\n\r\n\r\n\r\n    modifier onlyowner() {\r\n        require(owner == msg.sender, \"only owner\");\r\n        _;\r\n    }\r\n    modifier onlyManagerOrOwner(){\r\n        require(manager == msg.sender || owner == msg.sender, \"only manager or owner\");\r\n        _;\r\n    }\r\n\r\n    IERC20 public stakeToken; //\r\n\r\n    constructor(address st) {\r\n        owner = payable(msg.sender); // Address of contract owner\r\n        stakeToken = IERC20(st); // Address of the token \r\n        percentDivider = 1000;\r\n        minimumStakeAmt = 1e18; // This is the minimum that a user can stake\r\n        totalFee = 0;\r\n    }\r\n\r\n    /** This function is used for staking */\r\n    function stake(uint256 timeperiod,uint256 amount1) public payable {\r\n        require(timeperiod >= 0 && timeperiod <= 6, \"Invalid time period\");\r\n        require(amount1 >= minimumStakeAmt, \"stake more than minimum amount\");\r\n        uint256 amount = amount1.sub((amount1.mul(totalFee)).div(percentDivider));  // If the token has fees, it calculates the amount that goes into the contract\r\n        if (!Stakers[msg.sender].alreadyExists) {\r\n            Stakers[msg.sender].alreadyExists = true;\r\n            StakersID[totalStakers] = msg.sender;\r\n            totalStakers++;\r\n        }\r\n        stakeToken.transferFrom(msg.sender, address(this), amount);\r\n        // (bool success,)  = address(this).call{ value: msg.value}(\"\");\r\n        // require(success, \"refund failed\");\r\n        uint256 extrabonus = UserCategory[msg.sender].extBonus;\r\n        Stakers[msg.sender].currentStakedAmtUser = Stakers[msg.sender]\r\n            .currentStakedAmtUser\r\n            .add(amount);\r\n        uint256 tempTierId = getTierIDByAmount(Stakers[msg.sender].currentStakedAmtUser);\r\n        Stakers[msg.sender].currTierId = tempTierId;\r\n        uint256 index = Stakers[msg.sender].stakeCount;\r\n        Stakers[msg.sender].totalStakedAmtUser = Stakers[msg.sender]\r\n            .totalStakedAmtUser\r\n            .add(amount);\r\n        totalStakedAmt = totalStakedAmt.add(amount);\r\n        stakersRecord[msg.sender][index].unstaketime = block.timestamp.add(\r\n            Duration[timeperiod]\r\n        );\r\n        stakersRecord[msg.sender][index].staketime = block.timestamp;\r\n        stakersRecord[msg.sender][index].amount = amount;\r\n        stakersRecord[msg.sender][index].reward = amount\r\n            .mul(tierBonuses[tempTierId][timeperiod].bonus.add(extrabonus))\r\n            .div(percentDivider);\r\n        stakersRecord[msg.sender][index].persecondreward = stakersRecord[\r\n            msg.sender\r\n        ][index].reward.div(Duration[timeperiod]);\r\n        stakersRecord[msg.sender][index].lastharvesttime = 0;\r\n        stakersRecord[msg.sender][index].remainingreward = stakersRecord[msg.sender][index].reward;\r\n        stakersRecord[msg.sender][index].harvestreward = 0;\r\n        Stakers[msg.sender].stakeCount++;\r\n\r\n        emit STAKE(msg.sender, amount1);\r\n    }\r\n\r\n    /** After the locking time has expired, the user will be free to unstake the token, and any remaining reward will be withdrawn as well */\r\n\r\n    function unstake(uint256 index) public {\r\n        require(!stakersRecord[msg.sender][index].unstaked, \"already unstaked\");\r\n        require(\r\n            stakersRecord[msg.sender][index].unstaketime < block.timestamp,\r\n            \"You cannot unstake before staking duration ends\"\r\n        );\r\n\r\n        if(!stakersRecord[msg.sender][index].withdrawan){\r\n            harvest(index);\r\n        }\r\n        stakersRecord[msg.sender][index].unstaked = true;\r\n\r\n        // payable(msg.sender).transfer(stakersRecord[msg.sender][index].amount);\r\n        stakeToken.transfer(\r\n            msg.sender,\r\n            stakersRecord[msg.sender][index].amount\r\n        );\r\n\r\n        totalUnStakedAmt = totalUnStakedAmt.add(\r\n            stakersRecord[msg.sender][index].amount\r\n        );\r\n        Stakers[msg.sender].totalUnstakedAmtUser = Stakers[msg.sender]\r\n            .totalUnstakedAmtUser\r\n            .add(stakersRecord[msg.sender][index].amount);\r\n\r\n        Stakers[msg.sender].currentStakedAmtUser = Stakers[msg.sender]\r\n            .currentStakedAmtUser\r\n            .sub(stakersRecord[msg.sender][index].amount);\r\n        \r\n        uint256 tempTierId = getTierIDByAmount(Stakers[msg.sender].currentStakedAmtUser);\r\n\r\n        Stakers[msg.sender].currTierId = tempTierId;\r\n\r\n\r\n        emit UNSTAKE(\r\n            msg.sender,\r\n            stakersRecord[msg.sender][index].amount\r\n        );\r\n    }\r\n\r\n    /** This function will harvest reward in realtime */\r\n    function harvest(uint256 index) public {\r\n        require(\r\n            !stakersRecord[msg.sender][index].withdrawan,\r\n            \"already withdrawan\"\r\n        );\r\n        require(!stakersRecord[msg.sender][index].unstaked, \"already unstaked\");\r\n        uint256 rewardTillNow;\r\n        uint256 commontimestamp;\r\n        (rewardTillNow,commontimestamp) = realtimeRewardPerBlock(msg.sender , index);\r\n        stakersRecord[msg.sender][index].lastharvesttime =  commontimestamp;\r\n        // payable(msg.sender).transfer(rewardTillNow);\r\n        stakeToken.transfer(\r\n            msg.sender,\r\n            rewardTillNow\r\n        );\r\n        totalClaimedRewardToken = totalClaimedRewardToken.add(\r\n            rewardTillNow\r\n        );\r\n        stakersRecord[msg.sender][index].remainingreward = stakersRecord[msg.sender][index].remainingreward.sub(rewardTillNow);\r\n        stakersRecord[msg.sender][index].harvestreward = stakersRecord[msg.sender][index].harvestreward.add(rewardTillNow);\r\n        Stakers[msg.sender].totalClaimedRewardTokenUser = Stakers[msg.sender]\r\n            .totalClaimedRewardTokenUser\r\n            .add(rewardTillNow);\r\n\r\n        if(stakersRecord[msg.sender][index].harvestreward == stakersRecord[msg.sender][index].reward){\r\n            stakersRecord[msg.sender][index].withdrawan = true;\r\n\r\n        }\r\n\r\n        emit HARVEST(\r\n            msg.sender,\r\n            rewardTillNow\r\n        );\r\n    }\r\n\r\n    /** This function will return real time rerward of particular user's every block */\r\n    function realtimeRewardPerBlock(address user, uint256 blockno) public view returns (uint256,uint256) {\r\n        uint256 ret;\r\n        uint256 commontimestamp;\r\n            if (\r\n                !stakersRecord[user][blockno].withdrawan &&\r\n                !stakersRecord[user][blockno].unstaked\r\n            ) {\r\n                uint256 val;\r\n                uint256 tempharvesttime = stakersRecord[user][blockno].lastharvesttime;\r\n                commontimestamp = block.timestamp;\r\n                if(tempharvesttime == 0){\r\n                    tempharvesttime = stakersRecord[user][blockno].staketime;\r\n                }\r\n                val = commontimestamp - tempharvesttime;\r\n                val = val.mul(stakersRecord[user][blockno].persecondreward);\r\n                if (val < stakersRecord[user][blockno].remainingreward) {\r\n                    ret += val;\r\n                } else {\r\n                    ret += stakersRecord[user][blockno].remainingreward;\r\n                }\r\n            }\r\n        return (ret,commontimestamp);\r\n    }\r\n\r\n     /** This function will return real time rerward of particular user's every block */\r\n\r\n    function realtimeReward(address user) public view returns (uint256) {\r\n        uint256 ret;\r\n        for (uint256 i; i < Stakers[user].stakeCount; i++) {\r\n            if (\r\n                !stakersRecord[user][i].withdrawan &&\r\n                !stakersRecord[user][i].unstaked\r\n            ) {\r\n                uint256 val;\r\n                val = block.timestamp - stakersRecord[user][i].staketime;\r\n                val = val.mul(stakersRecord[user][i].persecondreward);\r\n                if (val < stakersRecord[user][i].reward) {\r\n                    ret += val;\r\n                } else {\r\n                    ret += stakersRecord[user][i].reward;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    // Function to get the tierId on the given amount\r\n    function getTierIDByAmount(uint256 amount) public view returns (uint256) {\r\n        for (uint256 i = 0; i < tInfo.length; i++) {\r\n            if (amount >= tInfo[i].minStakeAmt && amount <= tInfo[i].maxStakeAmt) {\r\n                return tInfo[i].tierId;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    function changeManager(address managerAddress) public onlyowner{\r\n        manager = managerAddress;\r\n    }\r\n    function assignUserCategory(address userAddress,string memory catName,uint256 extraBonus) public onlyManagerOrOwner{\r\n        UserCategory[userAddress].extBonus = extraBonus;\r\n        UserCategory[userAddress].cat = catName;\r\n    }\r\n    /** This method may only be invoked by the owner's address and is used to adjust the stake duration (locking period), the argument will be in seconds */\r\n    function SetStakeDuration(\r\n        uint256 first,\r\n        uint256 second,\r\n        uint256 third,\r\n        uint256 fourth,\r\n        uint256 fifth,\r\n        uint256 sixth,\r\n        uint256 seventh\r\n    ) external onlyowner {\r\n        Duration[0] = first;\r\n        Duration[1] = second;\r\n        Duration[2] = third;\r\n        Duration[3] = fourth;\r\n        Duration[4] = fifth;\r\n        Duration[5] = sixth;\r\n        Duration[6] = seventh;\r\n\r\n    }\r\n    function createTier(uint256 minAmount, uint256 maxAmount, uint256 tID) public onlyowner{\r\n        require(minAmount < maxAmount, \"Invalid range\");\r\n        tInfo.push(TierInfo(minAmount, maxAmount, tID));\r\n    }\r\n\r\n    function setBonus(uint256 tierID,uint256[] memory bonusArray) public onlyowner{\r\n        require(bonusArray.length <=7,\"Not More than Stake Duration\");\r\n         for (uint256 i = 0; i < bonusArray.length; i++) {\r\n            tierBonuses[tierID][i] = tierBonus(tierID, i, bonusArray[i]);\r\n        }\r\n    }\r\n\r\n    //Remove Tier\r\n    function removeTier(uint256 index) public onlyowner {\r\n        require(index < tInfo.length,\"Not possible\");\r\n        for (uint256 i = index; i<tInfo.length-1; i++){\r\n            tInfo[i] = tInfo[i+1];\r\n            for(uint256 j = 0 ; j<Duration.length;j++){\r\n                tierBonuses[i][j]=tierBonuses[i+1][j];\r\n            }\r\n        }\r\n        if(index+1 == tInfo.length){\r\n            for(uint256 j = 0 ; j<Duration.length;j++){\r\n                tierBonuses[index][j]=tierBonus(0, j, 0);\r\n            }\r\n        }\r\n        tInfo.pop();\r\n    }\r\n    // important to receive Native\r\n    receive() payable external {} \r\n\r\n    /** This method is used to base currency */\r\n\r\n    function withdrawBaseCurrency() public onlyowner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"does not have any balance\");\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n    /** These two methods will enable the owner in withdrawing any incorrectly deposited tokens\r\n    * first call initToken method, passing the token contract address as an argument\r\n    * then call withdrawToken with the value in wei as an argument */\r\n    function withdrawToken(address addr,uint256 amount) public onlyowner {\r\n        IERC20(addr).transfer(msg.sender\r\n        , amount);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"st\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HARVEST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"STAKE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UNSTAKE\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"second\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"third\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fourth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fifth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sixth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seventh\",\"type\":\"uint256\"}],\"name\":\"SetStakeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakedAmtUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentStakedAmtUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnstakedAmtUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedRewardTokenUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currTierId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"alreadyExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StakersID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserCategory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extBonus\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cat\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"catName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"extraBonus\",\"type\":\"uint256\"}],\"name\":\"assignUserCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"changeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tID\",\"type\":\"uint256\"}],\"name\":\"createTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTierIDByAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"realtimeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockno\",\"type\":\"uint256\"}],\"name\":\"realtimeRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"bonusArray\",\"type\":\"uint256[]\"}],\"name\":\"setBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeperiod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstaketime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staketime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastharvesttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"persecondreward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawan\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minStakeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierBonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnStakedAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBaseCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StakingNewSmartContractAtar", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9a2a87941c9aebdab33c55611cb3c28aa83736c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ccfde8b1ccdbc8dce667c97f6e7d2c06a2b3bf6a5c37a84fce73833c0311dda5"}