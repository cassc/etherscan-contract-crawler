{"SourceCode": "/*\r\n\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \r\n\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\r\n\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551        \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\r\n\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551        \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\r\n \u255a\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\r\n  \u255a\u2550\u2550\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d                                   \r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract VCTA_Presale {\r\n\r\n    using SafeMath for uint256;\r\n    IERC20 public token;\r\n\r\n    uint256 public rate;\r\n    uint256 public tokensPerUSDT;\r\n\r\n    address public preSaleOwner;\r\n\r\n    IERC20 USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    constructor(address _tokenAddress, address _owner, uint256 _rate, uint256 _tokensPerUSDT) {\r\n        token = IERC20(_tokenAddress);\r\n        preSaleOwner = _owner;\r\n        rate = _rate; \r\n        tokensPerUSDT = _tokensPerUSDT;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == preSaleOwner, \"ONLY_OWNER_CAN_ACCESS_THIS_FUNCTION\");\r\n        _;\r\n    }\r\n\r\n    function updateRate(uint256 newRate, uint256 newTokensPerUSDT) public onlyOwner() {\r\n        rate = newRate;\r\n        tokensPerUSDT = newTokensPerUSDT;\r\n    }\r\n\r\n    function endPreSale() public onlyOwner() {\r\n        uint256 contractTokenBalance = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, contractTokenBalance);\r\n    }\r\n\r\n    function buyVCTA() public payable {\r\n\r\n        uint256 bnbAmountToBuy = msg.value;\r\n\r\n        uint256 tokenAmount = bnbAmountToBuy.mul(rate);\r\n\r\n        require(token.balanceOf(address(this)) >= tokenAmount, \"INSUFFICIENT_BALANCE_IN_CONTRACT\");\r\n\r\n        payable(preSaleOwner).transfer(bnbAmountToBuy);\r\n\r\n        (bool sent) = token.transfer(msg.sender, tokenAmount);\r\n        require(sent, \"FAILED_TO_TRANSFER_TOKENS_TO_BUYER\");\r\n        \r\n    }\r\n\r\n    function buyWithUSDT(uint256 _USDTAmount) public {\r\n\r\n        uint256 tokenAmount = _USDTAmount.mul(tokensPerUSDT);\r\n\r\n        USDT.transferFrom(msg.sender, preSaleOwner, _USDTAmount);\r\n\r\n        require(token.balanceOf(address(this)) >= tokenAmount, \"INSUFFICIENT_BALANCE_IN_CONTRACT\");\r\n\r\n        (bool sent) = token.transfer(msg.sender, tokenAmount);\r\n        require(sent, \"FAILED_TO_TRANSFER_TOKENS_TO_BUYER\");\r\n        \r\n    }\r\n\r\n    function recoverTokens(address tokenToRecover) public onlyOwner {\r\n     IERC20 tokenContract = IERC20(tokenToRecover);\r\n     uint256 contractTokenBalance = tokenContract.balanceOf(address(this));\r\n     require(contractTokenBalance > 0, \"No tokens to recover\");\r\n    \r\n     bool sent = tokenContract.transfer(msg.sender, contractTokenBalance);\r\n     require(sent, \"Failed to recover tokens\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensPerUSDT\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"buyVCTA\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_USDTAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRecover\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTokensPerUSDT\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VCTA_Presale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007f376fad327f428052ccad5d810bc04d2d2cba0d000000000000000000000000c7fe79a455d7b65e9f61494475ddc84749443faa0000000000000000000000000000000000000000000000000000000000001a6a000000000000000000000000000000000000000000000000000000000000001d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://607ca2feb96b8103d99e784f7d1570a34a1427669f07f571b72a85b9f17f22cf"}