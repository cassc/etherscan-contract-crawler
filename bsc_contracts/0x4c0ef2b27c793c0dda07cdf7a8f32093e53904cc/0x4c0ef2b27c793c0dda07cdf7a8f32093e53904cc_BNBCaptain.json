{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BNBCaptain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Website: https://bnbcaptain.club\\n */\\n\\npragma solidity ^0.8.0;\\n\\ncontract BNBCaptain {\\n    uint256 public constant TREASURES_TO_HIRE_1SAILOR = 2592000;\\n    uint256 private constant PSN = 10000;\\n    uint256 private constant PSNH = 5000;\\n    uint256 private constant developerFee = 5;\\n    bool public initialized = false;\\n    address payable public ceoAddress;\\n    mapping(address => uint256) public hasSailors;\\n    mapping(address => uint256) public claimedTreasures;\\n    mapping(address => uint256) public lastHire;\\n    mapping(address => address) public referrers;\\n    uint256 private marketTreasures;\\n\\n    constructor() {\\n        ceoAddress = payable(msg.sender);\\n    }\\n\\n    function hireSailors() public {\\n        require(initialized);\\n\\n        uint256 treasuresUsed = getMyTreasures();\\n        uint256 newSailors = treasuresUsed / TREASURES_TO_HIRE_1SAILOR;\\n        hasSailors[msg.sender] += newSailors;\\n        claimedTreasures[msg.sender] = 0;\\n        lastHire[msg.sender] = block.timestamp;\\n\\n        // send referral treasures\\n        address referrer = referrers[msg.sender];\\n        claimedTreasures[referrer] += treasuresUsed / 10;\\n\\n        //boost market to nerf sailors hoarding\\n        marketTreasures += treasuresUsed / 5;\\n    }\\n\\n    function sellTreasures() public {\\n        require(initialized);\\n        uint256 hasTreasures = getMyTreasures();\\n        uint256 treasuresValue = calculateTreasureSell(hasTreasures);\\n        uint256 fee = devFee(treasuresValue);\\n        claimedTreasures[msg.sender] = 0;\\n        lastHire[msg.sender] = block.timestamp;\\n        marketTreasures += hasTreasures;\\n        ceoAddress.transfer(fee);\\n        payable(msg.sender).transfer(treasuresValue - fee);\\n    }\\n\\n    function buyTreasures(address ref) public payable {\\n        require(initialized);\\n        require(msg.value >= 0.01 ether, \\\"At least 0.01 BNB\\\");\\n\\n        uint256 treasuresBought = calculateTreasureBuy(\\n            msg.value,\\n            address(this).balance - msg.value\\n        );\\n        treasuresBought -= devFee(treasuresBought);\\n        uint256 fee = devFee(msg.value);\\n        ceoAddress.transfer(fee);\\n        claimedTreasures[msg.sender] += treasuresBought;\\n        setReferrer(ref);\\n        hireSailors();\\n    }\\n\\n    function setReferrer(address ref) private {\\n        if (referrers[msg.sender] != address(0)) return;\\n\\n        if (ref == msg.sender || ref == address(0) || hasSailors[ref] == 0) {\\n            referrers[msg.sender] = ceoAddress;\\n        } else {\\n            referrers[msg.sender] = ref;\\n        }\\n    }\\n\\n    // trade balancing algorithm\\n    function calculateTrade(\\n        uint256 rt,\\n        uint256 rs,\\n        uint256 bs\\n    ) public pure returns (uint256) {\\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\\n        return (PSN * bs) / (PSNH + ((PSN * rs + PSNH * rt) / rt));\\n    }\\n\\n    function calculateTreasureSell(uint256 treasures)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (treasures > 0) {\\n            return\\n                calculateTrade(\\n                    treasures,\\n                    marketTreasures,\\n                    address(this).balance\\n                );\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function calculateTreasureBuy(uint256 bnbAmount, uint256 contractBalance)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return calculateTrade(bnbAmount, contractBalance, marketTreasures);\\n    }\\n\\n    function calculateTreasureBuySimple(uint256 bnbAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return calculateTreasureBuy(bnbAmount, address(this).balance);\\n    }\\n\\n    function calculateHireSailors(uint256 bnbAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 treasuresBought = calculateTreasureBuy(\\n            bnbAmount,\\n            address(this).balance\\n        );\\n        treasuresBought -= devFee(treasuresBought);\\n        uint256 treasuresUsed = getMyTreasures();\\n        treasuresUsed += treasuresBought;\\n        uint256 newSailors = treasuresUsed / TREASURES_TO_HIRE_1SAILOR;\\n        return newSailors;\\n    }\\n\\n    function devFee(uint256 amount) private pure returns (uint256) {\\n        return (amount * developerFee) / 100;\\n    }\\n\\n    function seedMarket() public payable {\\n        require(msg.sender == ceoAddress);\\n        require(marketTreasures == 0);\\n        initialized = true;\\n        marketTreasures = 259200000000;\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getMySailors() public view returns (uint256) {\\n        return hasSailors[msg.sender];\\n    }\\n\\n    function getMyTreasures() public view returns (uint256) {\\n        return\\n            claimedTreasures[msg.sender] + getTreasureSinceLastHire(msg.sender);\\n    }\\n\\n    function getSecondsPassed(address adr) public view returns (uint256) {\\n        if (lastHire[adr] == 0) return 0;\\n\\n        return min(TREASURES_TO_HIRE_1SAILOR, block.timestamp - lastHire[adr]);\\n    }\\n\\n    function getTreasureSinceLastHire(address adr)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return getSecondsPassed(adr) * hasSailors[adr];\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TREASURES_TO_HIRE_1SAILOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyTreasures\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"calculateHireSailors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateTreasureBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTreasureBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasures\",\"type\":\"uint256\"}],\"name\":\"calculateTreasureSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTreasures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMySailors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyTreasures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getSecondsPassed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getTreasureSinceLastHire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasSailors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hireSailors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTreasures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BNBCaptain", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}