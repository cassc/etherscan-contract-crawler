{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ScratchCard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ScratchCard is Ownable {\\n    struct Card {\\n        string cardType; // Use string identifiers to represent card types\\n        string cardName;\\n        address tokenAddress;\\n        uint256 price;\\n        uint256 maxPrize;\\n        uint256 maxPrizeProbability;\\n        uint256 winningProbability;\\n    }\\n    mapping(address => uint256) public total; //Total amount of tokens (differentiated by token types)\\n    Card[] public availableCards;\\n    mapping(address => uint256) public cardBalances;\\n    mapping(address => mapping(string => uint256)) public cardCounts;\\n    uint256 public profitShare = 1000;\\n    address public lockAddr;\\n    event CardPurchased(\\n        address indexed user,\\n        string cardType,\\n        uint256 numberOfCards\\n    );\\n    event PrizeClaimed(address indexed user, string cardType, uint256 prize);\\n\\n    event CardTypeAdded(\\n        string cardType,\\n        string cardName,\\n        address tokenAddress,\\n        uint256 price,\\n        uint256 maxPrize,\\n        uint256 maxPrizeProbability,\\n        uint256 winningProbability\\n    );\\n    event CardTypeRemoved(string cardType);\\n    event CardGifted(\\n        address indexed sender,\\n        address indexed recipient,\\n        string cardType,\\n        uint256 numberOfCards\\n    );\\n\\n    constructor(address _lockAddr) {\\n        lockAddr = _lockAddr;\\n    }\\n\\n    function addCardType(\\n        string calldata cardType,\\n        string calldata cardName,\\n        address tokenAddress,\\n        uint256 price,\\n        uint256 maxPrize,\\n        uint256 maxPrizeProbability,\\n        uint256 winningProbability\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < availableCards.length; i++) {\\n            if (\\n                keccak256(abi.encodePacked(availableCards[i].cardType)) ==\\n                keccak256(abi.encodePacked(cardType))\\n            ) {\\n                revert(\\\"Card type exist\\\");\\n            }\\n        }\\n        availableCards.push(\\n            Card(\\n                cardType,\\n                cardName,\\n                tokenAddress,\\n                price,\\n                maxPrize,\\n                maxPrizeProbability,\\n                winningProbability\\n            )\\n        );\\n        emit CardTypeAdded(\\n            cardType,\\n            cardName,\\n            tokenAddress,\\n            price,\\n            maxPrize,\\n            maxPrizeProbability,\\n            winningProbability\\n        );\\n    }\\n\\n    function removeCardType(string calldata cardType) external onlyOwner {\\n        for (uint256 i = 0; i < availableCards.length; i++) {\\n            if (\\n                keccak256(abi.encodePacked(availableCards[i].cardType)) ==\\n                keccak256(abi.encodePacked(cardType))\\n            ) {\\n                availableCards[i] = availableCards[availableCards.length - 1];\\n                availableCards.pop();\\n                emit CardTypeRemoved(cardType);\\n            }\\n        }\\n    }\\n\\n    function purchaseCards(\\n        string calldata cardType,\\n        uint256 numberOfCards\\n    ) external {\\n        require(numberOfCards > 0, \\\"Number of cards must be greater than zero\\\");\\n        uint256 cardIndex = findCardIndex(cardType);\\n\\n        require(cardIndex < availableCards.length, \\\"Invalid card type\\\");\\n        Card storage selectedCard = availableCards[cardIndex];\\n        IERC20 token = IERC20(selectedCard.tokenAddress);\\n\\n        require(\\n            token.transferFrom(\\n                msg.sender,\\n                address(this),\\n                selectedCard.price * numberOfCards\\n            ),\\n            \\\"Transfer failed\\\"\\n        );\\n\\n        cardBalances[msg.sender] += numberOfCards;\\n        cardCounts[msg.sender][cardType] += numberOfCards;\\n        total[selectedCard.tokenAddress] += selectedCard.price * numberOfCards;\\n        emit CardPurchased(msg.sender, cardType, numberOfCards);\\n    }\\n\\n    function scratchCard(string calldata cardType) external returns (uint256) {\\n        require(cardBalances[msg.sender] > 0, \\\"You have no cards to scratch\\\");\\n        require(\\n            cardCounts[msg.sender][cardType] > 0,\\n            \\\"You have no cards of this type\\\"\\n        );\\n        uint256 cardIndex = findCardIndex(cardType);\\n\\n        require(cardIndex < availableCards.length, \\\"Invalid card type\\\");\\n        Card storage selectedCard = availableCards[cardIndex];\\n        cardBalances[msg.sender]--;\\n        cardCounts[msg.sender][cardType]--;\\n\\n        uint profit = (profitShare * selectedCard.price) / 10000;\\n        IERC20 token = IERC20(selectedCard.tokenAddress);\\n        total[selectedCard.tokenAddress] -= profit;\\n        token.transfer(lockAddr, profit); //fee\\n        uint256 randomNumber = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp,\\n                    block.prevrandao,\\n                    msg.sender,\\n                    \\\"demarket\\\"\\n                )\\n            )\\n        );\\n        uint256 prize = 0;\\n        if (randomNumber % selectedCard.maxPrizeProbability == 0) {\\n            prize = selectedCard.maxPrize;\\n        } else {\\n            prize = determinePrize(randomNumber % 10000, selectedCard);\\n        }\\n\\n        if (prize > 0) {\\n            require(\\n                prize <= total[selectedCard.tokenAddress],\\n                \\\"prize exceed the total\\\"\\n            );\\n            require(\\n                token.transfer(msg.sender, prize),\\n                \\\"Transfer of prize failed\\\"\\n            );\\n            emit PrizeClaimed(msg.sender, cardType, prize);\\n\\n            total[selectedCard.tokenAddress] -= prize;\\n\\n            return prize;\\n        } else {\\n            emit PrizeClaimed(msg.sender, cardType, 0);\\n            return 0;\\n        }\\n    }\\n\\n    function determinePrize(\\n        uint256 randomNumber,\\n        Card storage selectedCard\\n    ) internal view returns (uint256) {\\n        if (randomNumber <= ((selectedCard.winningProbability * 60) / 100)) {\\n            return selectedCard.price;\\n        } else if (\\n            randomNumber <= ((selectedCard.winningProbability * 90) / 100)\\n        ) {\\n            return selectedCard.price * 2;\\n        } else if (\\n            randomNumber <= ((selectedCard.winningProbability * 95) / 100)\\n        ) {\\n            return selectedCard.price * 3;\\n        } else if (randomNumber <= selectedCard.winningProbability) {\\n            return selectedCard.price * 4;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function selectRandomCard() internal view returns (uint256) {\\n        uint256 seed = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)\\n            )\\n        ) % availableCards.length;\\n        return seed;\\n    }\\n\\n    function findCardIndex(\\n        string calldata cardType\\n    ) internal view returns (uint256) {\\n        for (uint256 i = 0; i < availableCards.length; i++) {\\n            if (\\n                keccak256(abi.encodePacked(availableCards[i].cardType)) ==\\n                keccak256(abi.encodePacked(cardType))\\n            ) {\\n                return i;\\n            }\\n        }\\n        revert(\\\"Card type not found\\\");\\n    }\\n\\n    function withdrawProfit(\\n        address tokenAddress,\\n        uint256 amountToWithdraw\\n    ) external onlyOwner {\\n        IERC20 profitToken = IERC20(tokenAddress);\\n        require(\\n            profitToken.transfer(owner(), amountToWithdraw),\\n            \\\"Transfer failed\\\"\\n        );\\n    }\\n\\n    function setProfitShare(uint256 newProfitShare) external onlyOwner {\\n        profitShare = newProfitShare;\\n    }\\n\\n    function giftCards(\\n        address recipient,\\n        string calldata cardType,\\n        uint256 numberOfCards\\n    ) external {\\n        require(numberOfCards > 0, \\\"Number of cards must be greater than zero\\\");\\n        uint256 cardIndex = findCardIndex(cardType);\\n\\n        require(cardIndex < availableCards.length, \\\"Invalid card type\\\");\\n        Card storage selectedCard = availableCards[cardIndex];\\n\\n        require(\\n            cardBalances[msg.sender] >= numberOfCards,\\n            \\\"Insufficient cards to gift\\\"\\n        );\\n\\n        cardBalances[msg.sender] -= numberOfCards;\\n        cardCounts[msg.sender][cardType] -= numberOfCards;\\n\\n        cardBalances[recipient] += numberOfCards;\\n        cardCounts[recipient][cardType] += numberOfCards;\\n\\n        total[selectedCard.tokenAddress] += selectedCard.price * numberOfCards;\\n\\n        emit CardGifted(msg.sender, recipient, cardType, numberOfCards);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfCards\",\"type\":\"uint256\"}],\"name\":\"CardGifted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfCards\",\"type\":\"uint256\"}],\"name\":\"CardPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cardName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPrizeProbability\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningProbability\",\"type\":\"uint256\"}],\"name\":\"CardTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"}],\"name\":\"CardTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cardName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrizeProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningProbability\",\"type\":\"uint256\"}],\"name\":\"addCardType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableCards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cardName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrizeProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningProbability\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cardBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"cardCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numberOfCards\",\"type\":\"uint256\"}],\"name\":\"giftCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numberOfCards\",\"type\":\"uint256\"}],\"name\":\"purchaseCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"}],\"name\":\"removeCardType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"}],\"name\":\"scratchCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProfitShare\",\"type\":\"uint256\"}],\"name\":\"setProfitShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ScratchCard", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d163db5c6d0233e2f39ed2498106c8e9313a0a98", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}