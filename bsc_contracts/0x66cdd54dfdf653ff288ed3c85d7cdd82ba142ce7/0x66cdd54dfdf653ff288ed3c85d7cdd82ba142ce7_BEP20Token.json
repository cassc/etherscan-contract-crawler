{"SourceCode": "// File: contracts/SAFFRON.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IBEP20 {\r\n function totalSupply() external view returns (uint256);\r\n function decimals() external view returns (uint8);\r\n function symbol() external view returns (string memory);\r\n function name() external view returns (string memory);\r\n function getOwner() external view returns (address);\r\n function balanceOf(address account) external view returns (uint256);\r\n function transfer(address recipient, uint256 amount) external returns (bool);\r\n function allowance(address _owner, address spender) external view returns (uint256);\r\n function approve(address spender, uint256 amount) external returns (bool);\r\n function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n event Transfer(address indexed from, address indexed to, uint256 value);\r\n event Approval(address indexed owner, address indexed spender, uint256 value);\r\n }\r\n\r\ncontract Context {\r\n\r\nconstructor () internal { }\r\n\r\nfunction _msgSender() internal view returns (address payable) {\r\n return msg.sender; }\r\n\r\nfunction _msgData() internal view returns (bytes memory) {\r\n this;\r\n return msg.data;\r\n } \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  uint256 c = a + b;\r\n  require(c >= a, \"SafeMath: addition overflow\");\r\n\r\nreturn c;\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, \"SafeMath: subtraction overflow\"); }\r\n\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b;\r\n\r\nreturn c;\r\n}\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\nif (a == 0) {\r\n  return 0;\r\n}\r\n\r\nuint256 c = a * b;\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\nreturn c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, \"SafeMath: division by zero\"); }\r\n\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\nrequire(b > 0, errorMessage);\r\nuint256 c = a / b;\r\n\r\nreturn c;\r\n}\r\n\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, \"SafeMath: modulo by zero\"); }\r\n\r\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; } }\r\n\r\ncontract Ownable is Context { address private _owner;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\nconstructor () internal { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); }\r\n\r\nfunction owner() public view returns (address) { return _owner; }\r\n\r\nmodifier onlyOwner() { require(_owner == _msgSender(), \"Ownable: caller is not the owner\"); _; }\r\n\r\nfunction renounceOwnership() public onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); }\r\n\r\nfunction transferOwnership(address newOwner) public onlyOwner { _transferOwnership(newOwner); }\r\n\r\nfunction _transferOwnership(address newOwner) internal { require(newOwner != address(0), \"Ownable: new owner is the zero address\"); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; } }\r\n\r\ncontract BEP20Token is Context, IBEP20, Ownable { using SafeMath for uint256;\r\n\r\nmapping (address => uint256) private _balances;\r\n\r\nmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\nuint256 private _totalSupply;\r\nuint8 private _decimals;\r\nstring private _symbol;\r\nstring private _name;\r\n\r\nconstructor() public { \r\n  _name = \"SAFFRON QAENAT\";\r\n  _symbol = \"SAFFRON\";\r\n  _decimals = 18;\r\n  _totalSupply = 100000000000000000000000000000000000; //100,000,000,000,000,000 Tokens \r\n  _balances[msg.sender] = _totalSupply;\r\n\r\nemit Transfer(address(0), msg.sender, _totalSupply);\r\n}\r\n\r\nfunction getOwner() external view returns (address) { return owner(); }\r\n\r\nfunction decimals() external view returns (uint8) { return _decimals; }\r\n\r\nfunction symbol() external view returns (string memory) { return _symbol; }\r\n\r\nfunction name() external view returns (string memory) { return _name; }\r\n\r\nfunction totalSupply() external view returns (uint256) { return _totalSupply; }\r\n\r\nfunction balanceOf(address account) external view returns (uint256) { return _balances[account]; }\r\n\r\nfunction transfer(address recipient, uint256 amount) external returns (bool) { _transfer(_msgSender(), recipient, amount); return true; }\r\n\r\nfunction allowance(address owner, address spender) external view returns (uint256) { return _allowances[owner][spender]; }\r\n\r\nfunction approve(address spender, uint256 amount) external returns (bool) { _approve(_msgSender(), spender, amount); return true; }\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\")); return true; }\r\n\r\nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; }\r\n\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\")); return true; }\r\n\r\nfunction mint(uint256 amount) public onlyOwner returns (bool) { _mint(_msgSender(), amount); return true; }\r\n\r\nfunction _transfer(address sender, address recipient, uint256 amount) internal { require(sender != address(0), \"BEP20: transfer from the zero address\"); require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n_balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n_balances[recipient] = _balances[recipient].add(amount);\r\nemit Transfer(sender, recipient, amount);\r\n}\r\n\r\nfunction _mint(address account, uint256 amount) internal { require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n_totalSupply = _totalSupply.add(amount);\r\n_balances[account] = _balances[account].add(amount);\r\nemit Transfer(address(0), account, amount);\r\n}\r\n\r\nfunction _burn(address account, uint256 amount) internal { require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n_balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n_totalSupply = _totalSupply.sub(amount);\r\nemit Transfer(account, address(0), amount);\r\n}\r\n\r\nfunction _approve(address owner, address spender, uint256 amount) internal { require(owner != address(0), \"BEP20: approve from the zero address\"); require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\n\r\nfunction _burnFrom(address account, uint256 amount) internal {\r\n  _burn(account, amount); \r\n  _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n } \r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BEP20Token", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0ca3d50cb8f43abd5470296c9e73124b96d4cf7a31a360ecd3dc7e06a54c8b23"}