{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n// Sources flattened with hardhat v2.12.7 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.8.1\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol@v4.8.1\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.8.1\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol@v4.8.1\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol@v4.8.1\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\r\n\r\n\r\n\r\n/**\r\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\r\n *\r\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\r\n * stuck.\r\n *\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.8.1\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.8.1\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/utils.sol\r\n\r\n\r\n\r\n\r\ninterface IRouter {\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface IFactory {\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ninterface IWKDRaffleTopCadre {\r\n    function totals()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 kimoyo,\r\n            uint256 doramilaje,\r\n            uint256 taifaNagao,\r\n            uint negus\r\n        );\r\n\r\n    function getPendingFor(\r\n        address account,\r\n        uint256 tokenId\r\n    ) external view returns (uint256);\r\n\r\n    function onTransferHook(address account, uint256[] calldata ids) external;\r\n\r\n    // function setDeprecated(bool deprecatedStatus) external;\r\n\r\n    function version() external view returns (string memory);\r\n\r\n    function claim(uint256 id) external returns (uint256);\r\n}\r\n\r\ninterface IWKDNFT {\r\n    function totalSupply(uint256) external view returns (uint256);\r\n\r\n    function balanceOf(address, uint256) external view returns (uint256);\r\n\r\n    function KIMOYO() external view returns (uint256);\r\n\r\n    function DORA_MILAJ_E() external view returns (uint256);\r\n\r\n    function TAIFA_NAGA_O() external view returns (uint256);\r\n\r\n    function NEGUS() external view returns (uint256);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) external;\r\n}\r\n\r\ninterface ITopCadre {\r\n    function onTransferHook(\r\n        address account,\r\n        uint256[] calldata tokenIds\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/TopCadre.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nerror Withdraw_Failed();\r\nerror Unsupported_Token_Id();\r\nerror Invalid_Amount();\r\n\r\ncontract WKDNFTTopCadre is\r\n    IWKDRaffleTopCadre,\r\n    Context,\r\n    ReentrancyGuard,\r\n    ERC1155Holder\r\n{\r\n    IWKDNFT public immutable _wkdNFT;\r\n\r\n    event Claimed(address account, uint256 tokenId, uint256 amount);\r\n    event UpdateRewardIndex(\r\n        uint256 kimoyo,\r\n        uint256 doa,\r\n        uint256 taifa,\r\n        uint256 negus\r\n    );\r\n\r\n    uint256 public constant KIMOYO = 2;\r\n    uint256 public constant DORA_MILAJ_E = 3;\r\n    uint256 public constant TAIFA_NAGA_O = 4;\r\n    uint256 public constant NEGUS = 5;\r\n\r\n    uint256 private constant SCALE_UP = 1e18;\r\n\r\n    struct Reward {\r\n        uint256 claimable;\r\n        uint256 entryPoint;\r\n    }\r\n\r\n    mapping(uint256 => uint256) public totalStakedByTokenId;\r\n    mapping(uint256 => uint256) private _tokenRewardIndexes;\r\n    mapping(address => mapping(uint256 => uint256)) private _tokensStakedByUser;\r\n    mapping(address => mapping(uint256 => Reward)) private _rewardFor;\r\n\r\n    uint256 private _remainder;\r\n\r\n    constructor(IWKDNFT nft) {\r\n        _wkdNFT = nft;\r\n    }\r\n\r\n    receive() external payable {\r\n        if (msg.value != 0) {\r\n            _addRewards((msg.value * SCALE_UP) + _remainder);\r\n        }\r\n    }\r\n\r\n    function totals()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 kimoyo,\r\n            uint256 doramilaje,\r\n            uint256 taifaNagao,\r\n            uint negus\r\n        )\r\n    {\r\n        return (\r\n            _tokenRewardIndexes[KIMOYO] / SCALE_UP,\r\n            _tokenRewardIndexes[DORA_MILAJ_E] / SCALE_UP,\r\n            _tokenRewardIndexes[TAIFA_NAGA_O] / SCALE_UP,\r\n            _tokenRewardIndexes[NEGUS] / SCALE_UP\r\n        );\r\n    }\r\n\r\n    function _percentile(\r\n        uint amount,\r\n        uint256 pct\r\n    ) internal pure returns (uint256) {\r\n        return (amount * pct) / 100;\r\n    }\r\n\r\n    function claim(\r\n        uint256 tokenId\r\n    ) external override nonReentrant returns (uint256 claimable) {\r\n        address account = _msgSender();\r\n        _updateRewards(account, tokenId);\r\n        claimable = _rewardFor[account][tokenId].claimable;\r\n        if (claimable == 0) revert Invalid_Amount();\r\n        _rewardFor[account][tokenId].claimable = 0;\r\n        (bool ok, ) = account.call{value: claimable}(\"\");\r\n        if (!ok) revert Withdraw_Failed();\r\n        emit Claimed(account, tokenId, claimable);\r\n    }\r\n\r\n    function _addRewards(uint256 amount) internal {\r\n        uint256 newKimoyo = _percentile(amount, 18);\r\n        uint256 newDora = _percentile(amount, 22);\r\n        uint256 newTaifa = _percentile(amount, 27);\r\n        uint256 newNegus = _percentile(amount, 33);\r\n\r\n        uint256 kSupply = totalStakedByTokenId[KIMOYO];\r\n        uint256 dSupply = totalStakedByTokenId[DORA_MILAJ_E];\r\n        uint256 tSupply = totalStakedByTokenId[TAIFA_NAGA_O];\r\n        uint256 nSupply = totalStakedByTokenId[NEGUS];\r\n\r\n        uint256 kDistributed = kSupply != 0 ? newKimoyo / kSupply : 0;\r\n        uint256 dDistributed = dSupply != 0 ? newDora / dSupply : 0;\r\n        uint256 tDistributed = tSupply != 0 ? newTaifa / tSupply : 0;\r\n        uint256 nDistributed = nSupply != 0 ? newNegus / nSupply : 0;\r\n\r\n        _tokenRewardIndexes[KIMOYO] += kDistributed;\r\n        _tokenRewardIndexes[DORA_MILAJ_E] += dDistributed;\r\n        _tokenRewardIndexes[TAIFA_NAGA_O] += tDistributed;\r\n        _tokenRewardIndexes[NEGUS] += nDistributed;\r\n\r\n        _remainder =\r\n            amount -\r\n            ((kDistributed * kSupply) +\r\n                (dDistributed * dSupply) +\r\n                (tDistributed * tSupply) +\r\n                (nDistributed * nSupply));\r\n    }\r\n\r\n    function _updateRewards(address account, uint256 tokenId) private {\r\n        _rewardFor[account][tokenId].claimable += _getPendingRewardFor(\r\n            account,\r\n            tokenId\r\n        );\r\n        _rewardFor[account][tokenId].entryPoint = _tokenRewardIndexes[tokenId];\r\n    }\r\n\r\n    function _sanityCheck(uint256 tokenId, uint256 amount) internal pure {\r\n        if (tokenId < KIMOYO) revert Unsupported_Token_Id();\r\n        if (tokenId > NEGUS) revert Unsupported_Token_Id();\r\n        if (amount == 0) revert Invalid_Amount();\r\n    }\r\n\r\n    function stake(uint256 tokenId, uint256 amount) external {\r\n        _sanityCheck(tokenId, amount);\r\n        address account = _msgSender();\r\n        uint256 bal = _wkdNFT.balanceOf(account, tokenId);\r\n        if (amount < bal) revert Invalid_Amount();\r\n        _updateRewards(account, tokenId);\r\n        _tokensStakedByUser[account][tokenId] += amount;\r\n        totalStakedByTokenId[tokenId] += amount;\r\n        _wkdNFT.safeTransferFrom(account, address(this), tokenId, amount, \"\");\r\n    }\r\n\r\n    function tokenStakedBy(\r\n        address account,\r\n        uint256 tokenId\r\n    ) external view returns (uint256) {\r\n        return _tokensStakedByUser[account][tokenId];\r\n    }\r\n\r\n    function unstake(uint256 tokenId, uint256 amount) external {\r\n        _sanityCheck(tokenId, amount);\r\n        address account = _msgSender();\r\n        if (_tokensStakedByUser[account][tokenId] < amount)\r\n            revert Invalid_Amount();\r\n        _updateRewards(account, tokenId);\r\n        _tokensStakedByUser[account][tokenId] -= amount;\r\n        totalStakedByTokenId[tokenId] -= amount;\r\n        _wkdNFT.safeTransferFrom(address(this), account, tokenId, amount, \"\");\r\n    }\r\n\r\n    function _getPendingRewardFor(\r\n        address account,\r\n        uint256 tokenId\r\n    ) private view returns (uint256) {\r\n        uint256 newTokenPoint = _tokenRewardIndexes[tokenId] -\r\n            (_rewardFor[account][tokenId].entryPoint);\r\n        return\r\n            (_tokensStakedByUser[account][tokenId] * newTokenPoint) / SCALE_UP;\r\n    }\r\n\r\n    function getPendingFor(\r\n        address account,\r\n        uint256 tokenId\r\n    ) public view returns (uint256) {\r\n        return\r\n            _rewardFor[account][tokenId].claimable +\r\n            _getPendingRewardFor(account, tokenId);\r\n    }\r\n\r\n    function onTransferHook(\r\n        address account,\r\n        uint256[] calldata ids\r\n    ) external override nonReentrant {}\r\n\r\n    function version() external pure returns (string memory) {\r\n        return \"v1.2\";\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWKDNFT\",\"name\":\"nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Invalid_Amount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unsupported_Token_Id\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Withdraw_Failed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kimoyo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"doa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taifa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"negus\",\"type\":\"uint256\"}],\"name\":\"UpdateRewardIndex\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DORA_MILAJ_E\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIMOYO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEGUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAIFA_NAGA_O\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wkdNFT\",\"outputs\":[{\"internalType\":\"contract IWKDNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"onTransferHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenStakedBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStakedByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kimoyo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"doramilaje\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taifaNagao\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"negus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WKDNFTTopCadre", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "0000000000000000000000000861ea680a59226f3d570a3c3ab2b1b2f1cf21f1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://97700f988cf97ab8e08d9971a835ca448cbafd83e3286dd1f1952c0341484012"}