{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-10-17\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ncontract ReceiveHelper{\r\n\r\n    address public owner;\r\n\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender,\"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    function init(address _usdt) external onlyOwner{\r\n        IERC20(_usdt).approve(owner, type(uint256).max);\r\n    }\r\n}\r\n\r\ncontract XHY is ERC20{\r\n    address public admin;\r\n    address public uniswapV2Pair;\r\n    address public uniswapV2Router; \r\n    address public project;\r\n    address public rewardHelper;\r\n    address public flowHelper;\r\n    address public usdt;\r\n    address public recharge;\r\n    uint256 public rewardFee;\r\n    uint256 public flowFee;\r\n    uint256 public minFlowValue = 10e18;\r\n    uint256 public minRewardValue = 50e18;\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) holderIndex;\r\n    uint256 internal  currentIndex;\r\n\r\n    constructor()ERC20(\"XTTest\",\"XTE\"){\r\n        // _mint(infos[0],210000e18);\r\n        //test\r\n        _mint(msg.sender,210000e18);\r\n        admin = msg.sender;\r\n        usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n        uniswapV2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        uniswapV2Pair = IUniswapV2Factory(IUniswapV2Router(uniswapV2Router).factory()).createPair(\r\n            usdt,\r\n            address(this)\r\n        );\r\n        rewardHelper = deploy(\"reward\");\r\n        ReceiveHelper(rewardHelper).init(usdt);\r\n        flowHelper = deploy(\"flow\");\r\n        ReceiveHelper(flowHelper).init(usdt);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(admin == msg.sender,\"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    function setReceiverInfo(address _project,address _pool) external onlyOwner{\r\n        project = _project;\r\n        recharge = _pool;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\r\n        bool interaction = (sender == uniswapV2Pair) || (recipient == uniswapV2Pair);\r\n        if(!interaction || sender == address(this)) super._transfer(sender, recipient, amount);\r\n        else{\r\n            if(sender == uniswapV2Pair){\r\n                super._transfer(sender, address(this), amount * 2 / 100);\r\n                super._transfer(sender, project, amount * 1 / 100);\r\n                rewardFee = rewardFee + amount * 1 / 100;\r\n                \r\n            }\r\n\r\n            if(recipient == uniswapV2Pair){\r\n                super._transfer(sender, recharge, amount * 1 / 100);\r\n                super._transfer(sender, address(this), amount * 1 / 100);\r\n                super._transfer(sender, project, amount * 1 / 100);\r\n            }\r\n            flowFee = flowFee + amount * 1 / 100;\r\n            super._transfer(sender, recipient, amount * 97 / 100);\r\n        }\r\n\r\n        if(!interaction){\r\n            if (flowFee >= minFlowValue && rewardFee < minRewardValue){\r\n                uint256 halfAmount = flowFee / 2;\r\n                _swapTokenForUSDT(halfAmount,flowHelper);\r\n                uint256 usdtAmount = IERC20(usdt).balanceOf(flowHelper);\r\n                if(usdtAmount > 0){\r\n                    require(IERC20(usdt).transferFrom(flowHelper, address(this), usdtAmount)); \r\n                    _addLuidity(halfAmount, usdtAmount);\r\n                    flowFee = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!interaction){\r\n            if(rewardFee >= minRewardValue){\r\n                _swapTokenForUSDT(rewardFee,rewardHelper);\r\n                rewardFee = 0;\r\n            }\r\n            processReward(50000);\r\n        }\r\n        \r\n        if (IERC20(uniswapV2Pair).balanceOf(sender) > 0) addHolder(sender);\r\n        else removeHolder(sender);\r\n        if (IERC20(uniswapV2Pair).balanceOf(recipient) > 0) addHolder(recipient);\r\n        else removeHolder(recipient);\r\n\r\n    }\r\n\r\n    function _swapTokenForUSDT(uint256 amount,address receiver)internal{\r\n        _approve(address(this),uniswapV2Router, amount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        IUniswapV2Router(uniswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount, \r\n            0, \r\n            path, \r\n            receiver, \r\n            block.timestamp + 10\r\n        );\r\n    }\r\n\r\n    function _addLuidity(uint256 tokenAmount,uint256 usdtAmount) internal{\r\n\r\n        _approve(address(this),uniswapV2Router, tokenAmount);\r\n        IERC20(usdt).approve(uniswapV2Router, usdtAmount);\r\n\r\n        IUniswapV2Router(uniswapV2Router).addLiquidity(\r\n            address(this), \r\n            usdt, \r\n            tokenAmount, \r\n            usdtAmount,\r\n            0, \r\n            0, \r\n            project, \r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function processReward(uint256 gas) private {\r\n        uint256 balance = IERC20(usdt).balanceOf(rewardHelper);\r\n        if (balance == 0) {\r\n            return;\r\n        }\r\n        \r\n        uint256 totalLP = IERC20(uniswapV2Pair).totalSupply();\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n        uint256 shareholderCount = holders.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        balance = IERC20(usdt).balanceOf(rewardHelper);\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = IERC20(uniswapV2Pair).balanceOf(shareHolder);\r\n            if (tokenBalance > 0) {\r\n                amount = (balance * tokenBalance) / totalLP;\r\n                if (amount > 0 && IERC20(usdt).balanceOf(rewardHelper) >= amount) {\r\n                    require(IERC20(usdt).transferFrom(rewardHelper, shareHolder, amount),\"ERC20:Reward transferFrom failed\");\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n\r\n    function addHolder(address user) private  {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(user)\r\n        }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (holderIndex[user] == 0) {\r\n            if (holders.length ==0 || holders[0] != user) {\r\n                holderIndex[user] = holders.length;\r\n                holders.push(user);\r\n            }\r\n        }\r\n    }\r\n    function removeHolder(address user) private {\r\n        uint256 indexToRemove = holderIndex[user];\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(user)\r\n        }\r\n        if (indexToRemove == 0 || size > 0) {\r\n            return;\r\n        }\r\n        address lastHolder = holders[holders.length - 1];\r\n        holders[indexToRemove] = lastHolder;\r\n        holderIndex[lastHolder] = indexToRemove;\r\n        holders.pop();\r\n        delete holderIndex[user];\r\n    }\r\n\r\n    function deploy(string memory domain) internal returns(address _helper){\r\n        bytes32 salt = keccak256(abi.encodePacked(address(this),domain));\r\n        bytes memory bytecode = type(ReceiveHelper).creationCode;\r\n        assembly {\r\n            _helper := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n    }\r\n\r\n    function claim(address to) external onlyOwner{\r\n        uint256 _reward = IERC20(usdt).balanceOf(rewardHelper);\r\n        uint256 _flow = IERC20(usdt).balanceOf(flowHelper);\r\n        if(_reward > 0) require(IERC20(usdt).transferFrom(rewardHelper, to, _reward),\"ERC20:Owner operate failed\");\r\n        if(_flow > 0) require(IERC20(usdt).transferFrom(flowHelper, to, _flow),\"ERC20:Owner operate failed\");\r\n        rewardFee = 0;\r\n        flowFee = 0;\r\n    }\r\n\r\n    function setMinValue(uint256 _reward,uint256 _flow) external onlyOwner{\r\n        minRewardValue = _reward;\r\n        minFlowValue = _flow;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flowFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flowHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFlowValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRewardValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"project\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recharge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flow\",\"type\":\"uint256\"}],\"name\":\"setMinValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setReceiverInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XHY", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f68cc8aad74d493d97b6f8bcf9713e6e1825b466d61864326de50bb4072e6290"}