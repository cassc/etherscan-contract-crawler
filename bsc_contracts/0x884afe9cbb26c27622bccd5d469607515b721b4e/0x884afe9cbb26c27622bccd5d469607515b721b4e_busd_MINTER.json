{"SourceCode": "pragma solidity ^0.4.26; // solhint-disable-line\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract busd_MINTER {\r\n    //uint256 BUSD_PER_MINERS_PER_SECOND=1;\r\n    address busd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; \r\n    uint256 public BUSD_TO_HATCH_1MINERS=2592000;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    address public ceoAddress2;\r\n    mapping (address => uint256) public busdMiners;\r\n    mapping (address => uint256) public claimedBusd;\r\n    mapping (address => uint256) public busdBake;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketBusd;\r\n    constructor() public{\r\n        ceoAddress=msg.sender;\r\n        ceoAddress2=address(0x652Ad4a77EbF1D51E4FBFa6c4EdB93F0a27059Fe);\r\n    }\r\n    function compoundBusd(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = 0;\r\n        }\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 usedBusd=getMyBusd();\r\n        uint256 newMiners=SafeMath.div(usedBusd,BUSD_TO_HATCH_1MINERS);\r\n        busdMiners[msg.sender]=SafeMath.add(busdMiners[msg.sender],newMiners);\r\n        claimedBusd[msg.sender]=0;\r\n        busdBake[msg.sender]=now;\r\n        \r\n        //send referral busd\r\n        claimedBusd[referrals[msg.sender]]=SafeMath.add(claimedBusd[referrals[msg.sender]],SafeMath.div(usedBusd,7));\r\n        \r\n        //boost market to nerf miners hoarding\r\n        marketBusd=SafeMath.add(marketBusd,SafeMath.div(usedBusd,5));\r\n    }\r\n    function sellBusd() public {\r\n        require(initialized);\r\n        uint256 hasBusd=getMyBusd();\r\n        uint256 busdValue=calculateBusdSell(hasBusd);\r\n        uint256 fee=devFee(busdValue);\r\n        uint256 fee2=fee/2;\r\n        claimedBusd[msg.sender]=0;\r\n        busdBake[msg.sender]=now;\r\n        marketBusd=SafeMath.add(marketBusd,hasBusd);\r\n        ERC20(busd).transfer(ceoAddress, fee2);\r\n        ERC20(busd).transfer(ceoAddress2, fee-fee2);\r\n        ERC20(busd).transfer(address(msg.sender), SafeMath.sub(busdValue,fee));\r\n    }\r\n    function buyBusd(address ref, uint256 amount) public {\r\n        require(initialized);\r\n    \r\n        ERC20(busd).transferFrom(address(msg.sender), address(this), amount);\r\n        \r\n        uint256 balance = ERC20(busd).balanceOf(address(this));\r\n        uint256 busdBought=calculateBusdBuy(amount,SafeMath.sub(balance,amount));\r\n        busdBought=SafeMath.sub(busdBought,devFee(busdBought));\r\n        uint256 fee=devFee(amount);\r\n        uint256 fee2=fee/2;\r\n        ERC20(busd).transfer(ceoAddress, fee2);\r\n        ERC20(busd).transfer(ceoAddress2, fee-fee2);\r\n        claimedBusd[msg.sender]=SafeMath.add(claimedBusd[msg.sender],busdBought);\r\n        compoundBusd(ref);\r\n    }\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256) {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateBusdSell(uint256 busds) public view returns(uint256) {\r\n        return calculateTrade(busds,marketBusd,ERC20(busd).balanceOf(address(this)));\r\n    }\r\n    function calculateBusdBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketBusd);\r\n    }\r\n    function calculateBusdBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateBusdBuy(eth,ERC20(busd).balanceOf(address(this)));\r\n    }\r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,5),100);\r\n    }\r\n    function seedMarket(uint256 amount) public {\r\n        ERC20(busd).transferFrom(address(msg.sender), address(this), amount);\r\n        require(marketBusd==0);\r\n        initialized=true;\r\n        marketBusd=259200000000;\r\n    }\r\n    function getBalance() public view returns(uint256) {\r\n        return ERC20(busd).balanceOf(address(this));\r\n    }\r\n    function getMyMiners() public view returns(uint256) {\r\n        return busdMiners[msg.sender];\r\n    }\r\n    function getMyBusd() public view returns(uint256) {\r\n        return SafeMath.add(claimedBusd[msg.sender],getBusdSinceBake(msg.sender));\r\n    }\r\n    function getBusdSinceBake(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(BUSD_TO_HATCH_1MINERS,SafeMath.sub(now,busdBake[adr]));\r\n        return SafeMath.mul(secondsPassed,busdMiners[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateBusdBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"compoundBusd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUSD_TO_HATCH_1MINERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketBusd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"busdMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"busds\",\"type\":\"uint256\"}],\"name\":\"calculateBusdSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBusd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateBusdBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"busdBake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellBusd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyBusd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getBusdSinceBake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedBusd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "busd_MINTER", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://391f97b7916c0c536be8ffece3ab193303fa91098f8bdf930f6a7ee861821cf9"}