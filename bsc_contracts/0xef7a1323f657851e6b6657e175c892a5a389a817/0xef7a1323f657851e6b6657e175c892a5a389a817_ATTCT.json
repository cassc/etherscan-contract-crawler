{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-07-14\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\n\r\n    library SafeMath {//konwnsec//IERC20 \u63a5\u53e3\r\n\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n            if (a == 0) {\r\n\r\n                return 0; \r\n\r\n            }\r\n\r\n            uint256 c = a * b;\r\n\r\n            assert(c / a == b);\r\n\r\n            return c; \r\n\r\n        }\r\n\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n            uint256 c = a / b;\r\n\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n            return c; \r\n\r\n        }\r\n\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n            assert(b <= a);\r\n\r\n            return a - b; \r\n\r\n        }\r\n\r\n\r\n\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n            uint256 c = a + b;\r\n\r\n            assert(c >= a);\r\n\r\n            return c; \r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    interface Erc20Token {//konwnsec//ERC20 \u63a5\u53e3\r\n\r\n        function totalSupply() external view returns (uint256);\r\n\r\n        function balanceOf(address _who) external view returns (uint256);\r\n\r\n        function transfer(address _to, uint256 _value) external;\r\n\r\n        function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n        function transferFrom(address _from, address _to, uint256 _value) external;\r\n\r\n        function approve(address _spender, uint256 _value) external; \r\n\r\n        function burnFrom(address _from, uint256 _value) external; \r\n\r\n        function mint(uint256 amount) external  returns (bool);\r\n\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    }\r\n\r\n    \r\n\r\n    contract Base {\r\n\r\n        using SafeMath for uint;\r\n\r\n        uint256 public authenticationO    = 0;\r\n\r\n        uint256 public authenticationP   = 0;\r\n\r\n        uint256 public authenticationC   = 1;\r\n        mapping(uint256=>address) public addressMap;\r\n        mapping(uint256=>uint256) public dayWithdrawalMax;\r\n        mapping(uint256=>uint256) public dayMax;\r\n        mapping(uint256=>uint256) public dayAll;\r\n \r\n\r\n        uint256 times   = 0;\r\n\r\n         address  public Operator;\r\n\r\n        bool  public Open;\r\n\r\n        address  _owner;\r\n\r\n \r\n\r\n        modifier onlyOwner() {\r\n\r\n            require(msg.sender == _owner, \"Permission denied\"); _;\r\n\r\n        }\r\n\r\n\r\n\r\n        modifier isZeroAddr(address addr) {\r\n\r\n            require(addr != address(0), \"Cannot be a zero address\"); _; \r\n\r\n        }\r\n\r\n \r\n\r\n        modifier onlyOpen() {\r\n\r\n        require(Open, \"_owner Open\"); _;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyauthentication() {\r\n\r\n        require(authenticationC == authenticationO);\r\n\r\n        require(authenticationC == authenticationP);_;\r\n\r\n    }\r\n\r\n \r\n\r\n    modifier onlyOperator() {\r\n\r\n        require(msg.sender == Operator, \"Permission denied\"); _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner onlyauthentication {\r\n\r\n        require(newOwner != address(0));\r\n\r\n         authenticationC = authenticationC.add(1);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setDayMax(uint256 Quantity,uint256 types) public onlyOwner onlyauthentication {\r\n\r\n        authenticationC = authenticationC.add(1);\r\n\r\n        dayMax[types] = Quantity;\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n    function setdayWithdrawalMax(uint256 Quantity,uint256 types) public onlyOwner onlyauthentication {\r\n\r\n        authenticationC = authenticationC.add(1);\r\n\r\n        dayWithdrawalMax[types] = Quantity;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferOperatorship(address newOperator) public onlyOperator onlyauthentication {\r\n\r\n        require(newOperator != address(0));\r\n\r\n        authenticationC = authenticationC.add(1);\r\n\r\n        Operator = newOperator;\r\n\r\n    }\r\n\r\n \r\n\r\n    function setAuthenticationP() public onlyOperator {\r\n\r\n        authenticationP = authenticationC;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setAuthenticationO() public onlyOwner {\r\n\r\n        authenticationO = authenticationC;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setOpenOrClose() public onlyOwner {\r\n\r\n        Open = !Open;\r\n\r\n    } \r\n\r\n\r\n\r\n    receive() external payable {}  \r\n\r\n}\r\n\r\n \r\n\r\ncontract ATTCT is Base {\r\n\r\n    using SafeMath for uint;\r\n\r\n    constructor()\r\n\r\n     {\r\n\r\n        _owner = 0xdd641fb909dF7aF0ADd83ea50CA947d229918ab8; \r\n\r\n        Operator = 0x0d70a7f85A75d1cD59AA7c27269fB0807238c573; \r\n\r\n \r\n        addressMap[0]  =  0x55d398326f99059fF775485246999027B3197955; \r\n        addressMap[1]  =  0xCDAbD94A40e25E80Cd4CE1D73C8f93e368BD1069; \r\n        addressMap[2]  =  0xb37b866871882124C3E7E301d936C29089c43987; \r\n        addressMap[3]  =  0xD727972b540dF5FD3b7bea2145313C2146D576e6; \r\n        dayMax[0] =  1000000000000000000000;\r\n        dayMax[1] =  1000000000000000000000;\r\n        dayMax[2] =  1000000000000000000000;\r\n        dayMax[3] =  1000000000000000000000;\r\n \r\n        dayWithdrawalMax[0] =  30000000000000000000;\r\n        dayWithdrawalMax[1] =  30000000000000000000;\r\n        dayWithdrawalMax[2] =  30000000000000000000;\r\n        dayWithdrawalMax[3] =  30000000000000000000;\r\n     }\r\n\r\n       \r\n\r\n    function ATTRecharge(uint256 ATTNumber,uint256 types ) public    {\r\n\r\n        Erc20Token(addressMap[types]).transferFrom(msg.sender, address(this),ATTNumber);\r\n\r\n    }\r\n\r\n \r\n\r\n    function multiTransfer(\r\n        address[] calldata addresses,\r\n        uint256[] calldata tokens,\r\n        uint256 types\r\n    ) external onlyOperator() onlyOpen() {\r\n\r\n        if(times<=block.timestamp){\r\n\r\n            times = block.timestamp.add(86400);\r\n\r\n            dayAll[types] = 0;\r\n\r\n        }\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n\r\n            dayAll[types] = dayAll[types].add(tokens[i]);\r\n\r\n            require(dayAll[types] <= dayMax[types], \"dayMax\");\r\n\r\n            Erc20Token(addressMap[types]).transfer( addresses[i],tokens[i]);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function multiTransferOne(\r\n\r\n        address  addresses,\r\n\r\n        uint256  tokens,\r\n        \r\n        uint256 types\r\n    )external onlyOperator() onlyOpen() {\r\n\r\n        dayAll[types] = dayAll[types].add(tokens);\r\n        require(dayAll[types] <= dayMax[types], \"dayMax\");\r\n        Erc20Token(addressMap[types]).transfer( addresses ,tokens );\r\n\r\n    }\r\n\r\n\r\n\r\n    function ApplyForWithdrawal(uint256  tokens) external   {\r\n    }\r\n\r\n   \r\n    mapping(address=>mapping(uint256=>uint256)) public _balances;\r\n\r\n    function tokenWithdrawal(uint256 types) public    {\r\n         \r\n        if ( _balances[msg.sender][types]>dayWithdrawalMax[types]){\r\n            Erc20Token(addressMap[types]).transfer (msg.sender,dayWithdrawalMax[types]);\r\n            _balances[msg.sender][types] = _balances[msg.sender][types].sub(dayWithdrawalMax[types]);\r\n        }else {\r\n            Erc20Token(addressMap[types]).transfer (msg.sender,_balances[msg.sender][types]);\r\n            _balances[msg.sender][types] = 0;\r\n        }\r\n      \r\n    }\r\n\r\n \r\n\r\n    function multiTransferAir(\r\n\r\n        address[] calldata addresses,\r\n\r\n        uint256[] calldata tokens,uint256 types\r\n\r\n    ) external onlyOperator() onlyOpen() {\r\n\r\n        if(times<=block.timestamp){\r\n\r\n            times = block.timestamp.add(86400);\r\n\r\n            dayAll[types] = 0;\r\n\r\n        }\r\n      uint256  Airbalances =  0;\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n\r\n            Airbalances = tokens[i].mul(1000000000000000);\r\n\r\n            dayAll[types] = dayAll[types].add(Airbalances);\r\n\r\n            require(dayAll[types] <= dayMax[types], \"dayMax\");\r\n\r\n            _balances[addresses[i]][types] = _balances[addresses[i]][types].add(Airbalances);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n     function getblance(\r\n        address addresses \r\n    ) external view returns (uint256 T1,uint256 T2,uint256 T3 ,uint256 T4) {\r\n                 \r\n        return (_balances[addresses][0],_balances[addresses][1],_balances[addresses][2],_balances[addresses][3]);\r\n\r\n    }\r\n\r\n   \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ATTNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"ATTRecharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ApplyForWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authenticationC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authenticationO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authenticationP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayWithdrawalMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addresses\",\"type\":\"address\"}],\"name\":\"getblance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"T1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T4\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"multiTransferAir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addresses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"multiTransferOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAuthenticationO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAuthenticationP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"setDayMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOpenOrClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"setdayWithdrawalMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"tokenWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperatorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ATTCT", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b997b2122417f9adcad7fd679090b0d730279e8b3f7e3f99a5adfdd176b4ac8"}