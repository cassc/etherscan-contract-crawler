{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**w\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] calldata accounts,\r\n        uint256[] calldata ids\r\n    ) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\r\n     *\r\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\r\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\r\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\r\n     * reentrancy guards when interacting with untrusted contracts.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     *\r\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\r\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\r\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\r\n     * reentrancy guards when interacting with untrusted contracts.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `values` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface INanoGen is IERC1155 {\r\n    function balanceOf(address account,uint256 id) external view returns (uint256);\r\n    function burn(address from, uint256 id, uint256 amount) external;\r\n}\r\n\r\ninterface INTCoin is IERC20 {\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract PledgeNano is Ownable, ReentrancyGuard {\r\n\r\n    event NtTokenClaimed(address indexed player, uint256 indexed stakeId, uint256 amount);\r\n    event NanoStakingEvent(address indexed player,uint256 indexed amount);\r\n    event BindEvent(address indexed parent, address indexed child,uint256 indexed time);\r\n    event AllClaimed(address indexed player, uint256 totalClaimedAmount);\r\n\r\n    INanoGen public nanoGenContract;\r\n    IERC20 public busdContract;\r\n    IERC20 public ntCoinContract;\r\n\r\n    struct LockInfo {\r\n        uint256 stakeId;\r\n        address player;\r\n        uint256 ntAmounts;\r\n        uint256 releaseStartTime;\r\n        uint256 releaseEndTime;\r\n        uint256 dailyReleaseAmount;\r\n        uint256 norelease;\r\n        uint256 hasreleaseall;\r\n        uint256 waitforclaim;\r\n        uint256 hasclaimallamount;\r\n        uint256 speedCount;\r\n    }\r\n\r\n    struct ChildInfo {\r\n        address child;\r\n        uint256 bindTime;\r\n    }\r\n\r\n    struct ClaimInfo {\r\n        uint256 claimedAmount;\r\n        uint256 claimedTimestamp;\r\n    }\r\n\r\n    error ParameterError(uint256 arg,string message);\r\n    error ErrorMsg(string message);\r\n\r\n    uint256 private constant lockDurationTime = 300 days; \r\n    uint256 public constant lockDuration = 300; \r\n    uint256 public constant releaseNtTokenPerDay = 33e16; \r\n    uint256 public constant releaseInterval = 1 days; \r\n\r\n    uint256 constant fixSpeedAmount = 10 * 10**18;\r\n\r\n    mapping(address=>mapping(uint256=>LockInfo)) public stakes;\r\n    mapping(address => uint256) public userStakeIds;\r\n    mapping(address => address[]) public parentToChilds;\r\n    mapping(address => address) public childToParent;\r\n    mapping(address=>mapping(address=>uint256)) public pcTime;\r\n    mapping(address => bool) public hasParent;\r\n    mapping(address=>bool) public isStaked;\r\n    mapping(address => uint256[]) public accountHasStakeIdAmounts;\r\n    mapping(address=>mapping(address=>bool)) public pchasbindornot;\r\n    mapping(address => ClaimInfo[]) public userClaimInfo;\r\n    mapping(address => mapping(uint256 => mapping(uint256 => bool))) public isSpeedCountMarked;\r\n\r\n    constructor(\r\n        address _ntCoinContract,\r\n        address _busdContract\r\n    ) Ownable(msg.sender) {\r\n        ntCoinContract = IERC20(_ntCoinContract);\r\n        busdContract = IERC20(_busdContract);\r\n    }\r\n\r\n    function NanoStaking(uint256 _amount) external nonReentrant {\r\n        if (_amount == 0) {\r\n            revert ParameterError(_amount, \"Stake amount must be greater than 0\");\r\n        }\r\n\r\n        if(nanoGenContract.balanceOf(msg.sender, 0) < 1) {\r\n            revert ErrorMsg(\"You must own at least 1 Nano token with ID 0\");\r\n        }\r\n\r\n        uint256 ntTokenAmount = _amount * 100 * 10**18;\r\n\r\n        nanoGenContract.burn(msg.sender, 0, _amount);\r\n\r\n        userStakeIds[msg.sender]++;\r\n        uint256 stakeId = userStakeIds[msg.sender];\r\n\r\n        LockInfo memory newLockInfo = stakes[msg.sender][stakeId];\r\n\r\n        newLockInfo = LockInfo({\r\n            stakeId: stakeId,\r\n            player: msg.sender,\r\n            ntAmounts: ntTokenAmount,\r\n            releaseStartTime: block.timestamp,\r\n            releaseEndTime: block.timestamp + lockDurationTime,\r\n            dailyReleaseAmount: releaseNtTokenPerDay,\r\n            norelease: ntTokenAmount,\r\n            hasreleaseall: 0,\r\n            waitforclaim: 0,\r\n            hasclaimallamount: 0,\r\n            speedCount: 0\r\n            });\r\n\r\n        stakes[msg.sender][stakeId] = newLockInfo;\r\n\r\n        accountHasStakeIdAmounts[msg.sender].push(stakeId);\r\n\r\n        isStaked[msg.sender] = true;\r\n\r\n        accumulateRealease2(msg.sender, stakeId);\r\n\r\n        speedForParent(_amount);\r\n\r\n        emit NanoStakingEvent(msg.sender,_amount);\r\n\r\n    }\r\n\r\n     function speedForParent(uint256 _amount) private {\r\n        address _parent = getParentByChild(msg.sender);\r\n\r\n        if (hasParent[msg.sender] == true && isStaked[_parent] == true) {\r\n            uint256[] memory parentStakeIds = accountHasStakeIdAmounts[_parent];\r\n            bool accelerateParent = false; \r\n\r\n            for (uint256 i = 0; i < parentStakeIds.length; i++) {\r\n                uint256 parentStakeId = parentStakeIds[i];\r\n                \r\n                LockInfo storage parentLock = stakes[_parent][parentStakeId];\r\n\r\n                uint256 totalSpeedCount = parentLock.speedCount + _amount;\r\n                uint256 canSpeedCount = parentLock.ntAmounts / fixSpeedAmount;\r\n\r\n                (,,,,,,uint256 norelease,,,,) = getUserStakeInfo(_parent, parentStakeId);\r\n\r\n                if (norelease > 0) {\r\n                    if (norelease >= fixSpeedAmount * _amount) {\r\n                        parentLock.hasreleaseall += fixSpeedAmount * _amount;\r\n                        parentLock.norelease = parentLock.ntAmounts - parentLock.hasreleaseall;\r\n                    } else {\r\n                        parentLock.hasreleaseall = parentLock.norelease;\r\n                        parentLock.norelease = 0;\r\n                    }\r\n                    \r\n                    if(totalSpeedCount > canSpeedCount) {\r\n                        parentLock.speedCount = canSpeedCount;\r\n                    }else {\r\n                        parentLock.speedCount += _amount;\r\n                    }\r\n\r\n                    isSpeedCountMarked[_parent][parentStakeId][parentLock.speedCount] = true;\r\n                    accelerateParent = true;\r\n                    break;\r\n                }\r\n            }\r\n        }      \r\n    }\r\n\r\n     function accumulateRealease2(address _player, uint256 _stakeId) public view returns(uint256) {\r\n        LockInfo storage userLockInfo = stakes[_player][_stakeId];\r\n        uint256 daysPassed = (block.timestamp - userLockInfo.releaseStartTime) / releaseInterval;\r\n        uint256 accumulatedRelease = 0;\r\n\r\n        if (daysPassed < lockDuration && userLockInfo.norelease >= fixSpeedAmount) {\r\n            accumulatedRelease = daysPassed * releaseNtTokenPerDay * userLockInfo.ntAmounts / 100 / 10**18 + userLockInfo.speedCount * fixSpeedAmount;\r\n        }\r\n\r\n        if(daysPassed < lockDuration && userLockInfo.norelease < fixSpeedAmount && isSpeedCountMarked[_player][_stakeId][userLockInfo.speedCount] == false) {\r\n            accumulatedRelease = daysPassed * releaseNtTokenPerDay * userLockInfo.ntAmounts / 100 / 10**18;\r\n        }\r\n\r\n        if(daysPassed < lockDuration && userLockInfo.norelease < fixSpeedAmount && isSpeedCountMarked[_player][_stakeId][userLockInfo.speedCount] == true) {\r\n            accumulatedRelease = userLockInfo.ntAmounts;\r\n        }\r\n\r\n        accumulatedRelease = min(accumulatedRelease, userLockInfo.ntAmounts);\r\n\r\n        if(daysPassed >= lockDuration) {\r\n            accumulatedRelease = userLockInfo.ntAmounts;\r\n        }\r\n\r\n        return accumulatedRelease;\r\n    }\r\n\r\n    function cycle(address _player, uint256 _stakeId) public view returns(uint256) {\r\n        LockInfo storage lock = stakes[_player][_stakeId];\r\n\r\n        uint256 daysPassed = (block.timestamp - lock.releaseStartTime) / releaseInterval;\r\n\r\n        return daysPassed;\r\n    }\r\n\r\n    function claimNtToken() external nonReentrant {\r\n        uint256[] storage stakeIds = accountHasStakeIdAmounts[msg.sender];\r\n\r\n        if(getAllStakeidsAmounts(msg.sender) <= 0){\r\n            revert ErrorMsg(\"you don't have enough nt token to claim\");\r\n        }\r\n\r\n        uint256 totalClaimedAmount = 0;\r\n\r\n        for (uint256 i = 0; i < stakeIds.length; i++) {\r\n            uint256 stakeId = stakeIds[i];\r\n            LockInfo storage lock = stakes[msg.sender][stakeId];\r\n\r\n            if(lock.player != msg.sender) {\r\n                revert ErrorMsg(\"You can only claim for your own stakes\");\r\n            }\r\n\r\n            (,,,,,,,,uint256 waitforclaim,,) = getUserStakeInfo(msg.sender,stakeId);\r\n\r\n            if (waitforclaim > 0) {\r\n                uint256 claimableAmount = waitforclaim;\r\n\r\n                ntCoinContract.transfer(msg.sender, claimableAmount);\r\n\r\n                lock.hasclaimallamount += claimableAmount;\r\n                lock.waitforclaim = 0;\r\n\r\n                totalClaimedAmount += claimableAmount;\r\n            }\r\n        }\r\n\r\n        if (totalClaimedAmount == 0) {\r\n            revert ErrorMsg(\"There are no nt tokens to claim\");\r\n        }\r\n\r\n        userClaimInfo[msg.sender].push(ClaimInfo(totalClaimedAmount, block.timestamp));\r\n\r\n        emit AllClaimed(msg.sender, totalClaimedAmount);\r\n    }\r\n\r\n    function bind(address _parent, address _child) external nonReentrant {\r\n\r\n        if(msg.sender != _child) {\r\n            revert ErrorMsg(\"Only the child can call this method\");\r\n        }\r\n\r\n        if(_parent == _child) {\r\n            revert ErrorMsg(\"Parent and child cannot be the same address\");\r\n        }\r\n\r\n        if(_parent == address(0x0) || _child == address(0x0)) {\r\n            revert ErrorMsg(\"account isn't zero address\");\r\n        }\r\n\r\n        if(hasParent[_child] == true) {\r\n            revert ErrorMsg(\"_child only had one parent just\");\r\n        }\r\n\r\n        if(pchasbindornot[_parent][_child] == true || pchasbindornot[_child][_parent] == true) {\r\n            revert ErrorMsg(\"these two accounts had binded before\");\r\n        }\r\n\r\n        address[] storage children = parentToChilds[_parent];\r\n\r\n        for (uint256 i = 0; i < children.length; i++) {\r\n            if(children[i] == _child) {\r\n                revert ErrorMsg(\"Child already exists in parent's array\");\r\n            }\r\n        }\r\n\r\n        parentToChilds[_parent].push(_child);\r\n\r\n        childToParent[_child] = _parent;\r\n\r\n        hasParent[_child] = true;\r\n\r\n        pchasbindornot[_parent][_child] = true;\r\n        pchasbindornot[_child][_parent] = true;\r\n\r\n        uint bindTime = block.timestamp;\r\n\r\n        pcTime[_parent][_child] = bindTime;\r\n\r\n        emit BindEvent(_parent, _child, bindTime);\r\n    }\r\n\r\n    function getUserStakeInfo(address _user, uint256 _stakeId) public view returns (\r\n        uint256 stakeId,\r\n        address player,\r\n        uint256 ntAmounts,\r\n        uint256 releaseStartTime,\r\n        uint256 releaseEndTime,\r\n        uint256 dailyReleaseAmount,\r\n        uint256 norelease,\r\n        uint256 hasreleaseall,\r\n        uint256 waitforclaim,\r\n        uint256 hasclaimallamount,\r\n        uint256 speedCount\r\n    ) {\r\n        if (_stakeId <= 0) {\r\n            revert ParameterError(_stakeId, \"Invalid stake ID\");\r\n        }\r\n\r\n        LockInfo storage userLockInfo = stakes[_user][_stakeId];\r\n\r\n        uint256 accumulatedRelease = accumulateRealease2(_user, _stakeId);\r\n\r\n        return (\r\n            userLockInfo.stakeId,\r\n            userLockInfo.player,\r\n            userLockInfo.ntAmounts,\r\n            userLockInfo.releaseStartTime,\r\n            userLockInfo.releaseEndTime,\r\n            userLockInfo.dailyReleaseAmount,\r\n            userLockInfo.ntAmounts - accumulatedRelease,\r\n            accumulatedRelease,\r\n            accumulatedRelease - userLockInfo.hasclaimallamount,\r\n            userLockInfo.hasclaimallamount,\r\n            userLockInfo.speedCount\r\n        );\r\n    }\r\n\r\n    function getAllStakeIdsByAddress(address _address) public view returns(uint256[] memory) {\r\n        return accountHasStakeIdAmounts[_address];\r\n    }\r\n\r\n    function getAllStakeidsAmounts(address _address) public view returns(uint256) {\r\n        uint256 totalAmount = 0;\r\n        uint256[] memory stakeIds = accountHasStakeIdAmounts[_address];\r\n        for (uint256 i = 0; i < stakeIds.length; i++) {\r\n            uint256 stakeId = stakeIds[i];\r\n            \r\n            (,,uint256 ntAmounts,,,,,,,,) = getUserStakeInfo(_address,stakeId);\r\n            uint256 ntAmounts_res = ntAmounts / 100 / 10**18;\r\n            totalAmount += ntAmounts_res;\r\n        }\r\n        return totalAmount;\r\n    }\r\n\r\n    function getAllChildsByParent(address _parent) external view returns (ChildInfo[] memory childrenInfo) {\r\n        address[] storage childAddresses = parentToChilds[_parent];\r\n        ChildInfo[] memory childrenInfoArray = new ChildInfo[](childAddresses.length);\r\n\r\n        for (uint256 i = 0; i < childAddresses.length; i++) {\r\n            address child = childAddresses[i];\r\n            uint256 bindTime = pcTime[_parent][child];\r\n            childrenInfoArray[i] = ChildInfo(child, bindTime);\r\n        }\r\n        return childrenInfoArray;\r\n    }\r\n\r\n    function getParentByChild(address _child) public view returns(address) {\r\n        return childToParent[_child];\r\n    }\r\n\r\n    function getTotalHasReleaseAllAmount(address user) public view returns (uint256) {\r\n        uint256 totalAmount = 0;\r\n        uint256[] memory stakeIds = accountHasStakeIdAmounts[user];\r\n\r\n        for (uint256 i = 0; i < stakeIds.length; i++) {\r\n            uint256 stakeId = stakeIds[i];\r\n            (,,,,,,,uint256 hasreleaseall,,,) = getUserStakeInfo(user,stakeId);\r\n            totalAmount += hasreleaseall;\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function getTotalWaitforclaimAmount(address user) public view returns (uint256) {\r\n        uint256 totalAmount = 0;\r\n        uint256[] memory stakeIds = accountHasStakeIdAmounts[user];\r\n\r\n        for (uint256 i = 0; i < stakeIds.length; i++) {\r\n            uint256 stakeId = stakeIds[i];\r\n            (,,,,,,,,uint256 waitforclaim,,) = getUserStakeInfo(user,stakeId);\r\n            totalAmount += waitforclaim;\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function getTotalhasclaimallAmount(address user) public view returns (uint256) {\r\n        uint256 totalAmount = 0;\r\n        uint256[] memory stakeIds = accountHasStakeIdAmounts[user];\r\n\r\n        for (uint256 i = 0; i < stakeIds.length; i++) {\r\n            uint256 stakeId = stakeIds[i];\r\n            (,,,,,,,,,uint256 hasclaimallamount,) = getUserStakeInfo(user,stakeId);\r\n            totalAmount += hasclaimallamount;\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function getSpeedCountByAddress(address user) public view returns (uint256[] memory, uint256[] memory) {\r\n        uint256[] memory stakeIds = accountHasStakeIdAmounts[user];\r\n        uint256[] memory speedCounts = new uint256[](stakeIds.length);\r\n\r\n        for (uint256 i = 0; i < stakeIds.length; i++) {\r\n            uint256 stakeId = stakeIds[i];\r\n            (,,,,,,,,,,uint256 speedCount) = getUserStakeInfo(user, stakeId);\r\n            speedCounts[i] = speedCount;\r\n        }\r\n\r\n        return (stakeIds, speedCounts);\r\n    }\r\n\r\n    function getUserClaimInfo(address _user) external view returns (ClaimInfo[] memory) {\r\n        return userClaimInfo[_user];\r\n    }\r\n\r\n    function withdrawTokens(uint256 _amount) external nonReentrant onlyOwner {\r\n        ntCoinContract.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function emergencyWithdraw() external nonReentrant onlyOwner {\r\n        ntCoinContract.transfer(msg.sender,ntCoinContract.balanceOf(address(this)));\r\n    }\r\n\r\n    function setNanoGenContract(address _nanoGenContract) external nonReentrant onlyOwner {\r\n        nanoGenContract = INanoGen(_nanoGenContract);\r\n    }\r\n\r\n    function setNTCoinContract(address _ntCoinContract) external nonReentrant onlyOwner {\r\n        ntCoinContract = INTCoin(_ntCoinContract);\r\n    }\r\n\r\n    function setBusdContract(address _busdContract) external nonReentrant onlyOwner {\r\n        busdContract = IERC20(_busdContract);\r\n    }\r\n\r\n    function isHasParent(address user) public view returns(bool) {\r\n        return hasParent[user];\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? b : a;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ntCoinContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_busdContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ErrorMsg\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arg\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ParameterError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedAmount\",\"type\":\"uint256\"}],\"name\":\"AllClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BindEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NanoStakingEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NtTokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NanoStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountHasStakeIdAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"accumulateRealease2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_child\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"childToParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"getAllChildsByParent\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bindTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PledgeNano.ChildInfo[]\",\"name\":\"childrenInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAllStakeIdsByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAllStakeidsAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_child\",\"type\":\"address\"}],\"name\":\"getParentByChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSpeedCountByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalHasReleaseAllAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalWaitforclaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalhasclaimallAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserClaimInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PledgeNano.ClaimInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"getUserStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ntAmounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyReleaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"norelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hasreleaseall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitforclaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hasclaimallamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasParent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isHasParent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isSpeedCountMarked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nanoGenContract\",\"outputs\":[{\"internalType\":\"contract INanoGen\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ntCoinContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parentToChilds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pcTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pchasbindornot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseNtTokenPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_busdContract\",\"type\":\"address\"}],\"name\":\"setBusdContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ntCoinContract\",\"type\":\"address\"}],\"name\":\"setNTCoinContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nanoGenContract\",\"type\":\"address\"}],\"name\":\"setNanoGenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ntAmounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyReleaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"norelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hasreleaseall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitforclaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hasclaimallamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakeIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PledgeNano", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000008611bb771b3cad24fe244b5d55d41ea015c756d00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://78c89fa3f2482342d7b8e7debf5f3ee5c05138d3695b0e6121ccd6daf92f55fd"}