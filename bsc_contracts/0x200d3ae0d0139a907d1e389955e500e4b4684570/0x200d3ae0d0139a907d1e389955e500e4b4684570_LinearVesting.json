{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LinearVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\nimport \\\"./ILinearCreator.sol\\\";\\n\\ncontract LinearVesting{\\n    address public immutable creator = msg.sender;\\n    address public owner = tx.origin;\\n    \\n    bool private initialized;\\n    bool public isPaused;\\n\\n    uint32 public tgeRatio_d2;\\n    uint32 public tgeDatetime;\\n    uint32 public startLinear;\\n    uint32 public endLinear;\\n    uint128 public sold;\\n    \\n    address public token;\\n\\n    address[] public buyers;\\n\\n    struct Bought{\\n        uint128 purchased;\\n        uint128 linearPerSecond;\\n        uint128 claimed;\\n        uint64 lastClaimed;\\n        uint64 buyerIndex;\\n    }\\n    \\n    mapping(address => Bought) public invoice;\\n    mapping(address => bool) public tgeClaimed;\\n    \\n    modifier onlyOwner{\\n        require(msg.sender == owner, \\\"!owner\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Initialize vesting token distribution\\n     * @param _token Token project address\\n     * @param _tgeDatetime TGE datetime in epoch\\n     * @param _tgeRatio_d2 TGE ratio in percent (2 decimal)\\n     * @param _startEndLinearDatetime Start & end Linear datetime in epoch\\n     */\\n    function initialize(\\n        address _token,\\n        uint32 _tgeDatetime,\\n        uint32 _tgeRatio_d2,\\n        uint32[2] calldata _startEndLinearDatetime\\n    ) external {\\n        require(!initialized, \\\"Initialized\\\");\\n        require(msg.sender == creator, \\\"!creator\\\");\\n\\n        _setToken(_token);\\n        if(_tgeDatetime > 0 && _tgeRatio_d2 > 0){\\n            _setTgeDatetime(_tgeDatetime);\\n            _setTgeRatio(_tgeRatio_d2);\\n        }\\n        _setStartEndLinearDatetime(_startEndLinearDatetime);\\n\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @dev Get length of buyer\\n     */\\n    function getBuyerLength() external view returns (uint){\\n        return buyers.length;\\n    }\\n\\n    /**\\n     * @dev Get linear started status\\n     */\\n    function linearStarted() public view returns(bool){\\n        return (startLinear < block.timestamp) ? true : false;\\n    }\\n\\n    /**\\n     * @dev Token claim\\n     */\\n    function claimToken() external {\\n        require(!isPaused && tgeDatetime <= block.timestamp && token != address(0), \\\"!started\\\");\\n\\n        Bought memory temp = invoice[msg.sender];\\n        bool tgeStatus = tgeClaimed[msg.sender];\\n        bool linearStatus = linearStarted();\\n\\n        require(temp.purchased > 0 && temp.lastClaimed <= endLinear, \\\"!good\\\");\\n        \\n        if( tgeDatetime > 0 && tgeStatus && !linearStatus ||\\n            tgeDatetime == 0 && !linearStatus\\n        ) revert(\\\"wait\\\");\\n\\n        uint128 amountToClaim;\\n        if(tgeDatetime > 0 && !tgeStatus){\\n            amountToClaim = (temp.purchased * tgeRatio_d2) / 10000;\\n            tgeClaimed[msg.sender] = true;\\n        }\\n\\n        if(linearStatus){\\n            if (temp.lastClaimed < startLinear && block.timestamp >= endLinear){\\n                amountToClaim += (temp.purchased * (10000 - tgeRatio_d2)) / 10000;\\n            } else{\\n                uint64 lastClaimed = temp.lastClaimed < startLinear ? startLinear : temp.lastClaimed;\\n                uint64 claimNow = block.timestamp >= endLinear ? endLinear : uint64(block.timestamp);\\n                amountToClaim += uint128((claimNow - lastClaimed) * temp.linearPerSecond);\\n            }\\n        }\\n\\n        require(IERC20(token).balanceOf(address(this)) >= amountToClaim && amountToClaim > 0, \\\"insufficient\\\");\\n        \\n        invoice[msg.sender].claimed = temp.claimed + amountToClaim;\\n        invoice[msg.sender].lastClaimed = uint64(block.timestamp);\\n\\n        TransferHelper.safeTransfer(address(token), msg.sender, amountToClaim);        \\n    }\\n\\n    /**\\n     * @dev Set token project\\n     * @param _token Token project address\\n     */\\n    function _setToken(address _token) private {\\n        token = _token;\\n    }\\n\\n    /**\\n     * @dev Set TGE datetime\\n     * @param _tgeDatetime TGE datetime in epoch\\n     */\\n    function _setTgeDatetime(uint32 _tgeDatetime) private {\\n        tgeDatetime = _tgeDatetime;\\n    }\\n\\n    /**\\n     * @dev Set TGE ratio\\n     * @param _tgeRatio_d2 TGE ratio in percent (2 decimal)\\n     */\\n    function _setTgeRatio(uint32 _tgeRatio_d2) private {\\n        tgeRatio_d2 = _tgeRatio_d2;\\n    }\\n\\n    /**\\n     * @dev Set start & end linear datetime\\n     * @param _startEndLinearDatetime Start & end Linear datetime in epoch\\n     */\\n    function _setStartEndLinearDatetime(uint32[2] calldata _startEndLinearDatetime) private {\\n        if(startLinear > 0) require(block.timestamp < startLinear, \\\"!good\\\");\\n        require(block.timestamp < _startEndLinearDatetime[0] &&\\n                _startEndLinearDatetime[0] < _startEndLinearDatetime[1], \\\"!good\\\");\\n\\n        startLinear = _startEndLinearDatetime[0];\\n        endLinear = _startEndLinearDatetime[1];\\n    }\\n\\n    /**\\n     * @dev Insert new buyers & purchases\\n     * @param _buyer Buyer address\\n     * @param _purchased Buyer purchase\\n     */\\n    function newBuyers(address[] calldata _buyer, uint128[] calldata _purchased) external onlyOwner {\\n        require(_buyer.length == _purchased.length, \\\"!good\\\");\\n\\n        for(uint16 i=0; i<_buyer.length; i++){\\n            if(_buyer[i] == address(0) || _purchased[i] == 0) continue;\\n\\n            Bought memory temp = invoice[_buyer[i]];\\n\\n            if(temp.purchased == 0){\\n                buyers.push(_buyer[i]);\\n                invoice[_buyer[i]].buyerIndex = uint64(buyers.length - 1);\\n            }\\n\\n            invoice[_buyer[i]].purchased = temp.purchased + _purchased[i];\\n            invoice[_buyer[i]].linearPerSecond = ((invoice[_buyer[i]].purchased * (10000 - tgeRatio_d2)) / 10000) / (endLinear - startLinear);\\n            sold += _purchased[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Replace buyers address\\n     * @param _oldBuyer Old address\\n     * @param _newBuyer New purchase\\n     */\\n    function replaceBuyers(address[] calldata _oldBuyer, address[] calldata _newBuyer) external onlyOwner {\\n        require(_oldBuyer.length == _newBuyer.length && buyers.length > 0, \\\"!good\\\");\\n\\n        for(uint16 i=0; i<_oldBuyer.length; i++){\\n            Bought memory temp = invoice[_oldBuyer[i]];\\n\\n            if( temp.purchased == 0 ||\\n                _oldBuyer[i] == address(0) ||\\n                _newBuyer[i] == address(0)\\n            ) continue;\\n\\n            buyers[temp.buyerIndex] = _newBuyer[i];\\n\\n            invoice[_newBuyer[i]] = temp;\\n\\n            delete invoice[_oldBuyer[i]];\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove buyers\\n     * @param _buyer Buyer address\\n     */\\n    function removeBuyers(address[] calldata _buyer) external onlyOwner {\\n        require(buyers.length > 0, \\\"!good\\\");\\n        for(uint16 i=0; i<_buyer.length; i++){\\n            Bought memory temp = invoice[_buyer[i]];\\n            \\n            if(temp.purchased == 0 || _buyer[i] == address(0)) continue;\\n\\n            sold -= temp.purchased;\\n\\n            address addressToRemove = buyers[buyers.length-1];\\n            \\n            buyers[temp.buyerIndex] = addressToRemove;\\n            invoice[addressToRemove].buyerIndex = uint64(temp.buyerIndex);\\n\\n            buyers.pop();\\n            delete invoice[_buyer[i]];\\n        }\\n    }\\n    \\n    /**\\n     * @dev Replace buyers purchase\\n     * @param _buyer Buyer address\\n     * @param _newPurchased new purchased\\n     */\\n    function replacePurchases(address[] calldata _buyer, uint128[] calldata _newPurchased) external onlyOwner {\\n        require(_buyer.length == _newPurchased.length && buyers.length > 0, \\\"!good\\\");\\n\\n        for(uint16 i=0; i<_buyer.length; i++){\\n            Bought memory temp = invoice[_buyer[i]];\\n\\n            if( temp.purchased == 0 ||\\n                temp.claimed > 0 ||\\n                _buyer[i] == address(0) ||\\n                _newPurchased[i] == 0) continue;\\n            \\n            sold = sold - temp.purchased + _newPurchased[i];\\n            invoice[_buyer[i]].purchased = _newPurchased[i];\\n            invoice[_buyer[i]].linearPerSecond = ((invoice[_buyer[i]].purchased * (10000 - tgeRatio_d2)) / 10000) / (endLinear - startLinear);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set TGE datetime\\n     * @param _tgeDatetime TGE datetime in epoch\\n     */\\n    function setTgeDatetime(uint32 _tgeDatetime) external onlyOwner {\\n        _setTgeDatetime(_tgeDatetime);\\n    }\\n\\n    /**\\n     * @dev Set TGE ratio\\n     * @param _tgeRatio_d2 TGE ratio in percent (2 decimal)\\n     */\\n    function setTgeRatio(uint32 _tgeRatio_d2) external onlyOwner {\\n        _setTgeRatio(_tgeRatio_d2);\\n    }\\n\\n    /**\\n     * @dev Set start & end linear datetime\\n     * @param _startEndLinearDatetime Start & end Linear datetime in epoch\\n     */\\n    function setStartEndLinearDatetime(uint32[2] calldata _startEndLinearDatetime) external onlyOwner {\\n        _setStartEndLinearDatetime(_startEndLinearDatetime);\\n    }\\n\\n    /**\\n     * @dev Emergency condition to withdraw token\\n     * @param _target Target address\\n     * @param _amount Amount to withdraw\\n     */\\n    function emergencyWithdraw(address _target, uint128 _amount) external onlyOwner {\\n        require(_target != address(0), \\\"!good\\\");\\n        \\n        uint128 contractBalance = uint128(IERC20(token).balanceOf(address(this)));\\n        if(_amount > contractBalance) _amount = uint128(contractBalance);\\n\\n        TransferHelper.safeTransfer(address(token), _target, _amount);\\n    }\\n\\n    /**\\n     * @dev Set token project\\n     * @param _token Token project address\\n     */\\n    function setToken(address _token) external onlyOwner {\\n        _setToken(_token);\\n    }\\n    \\n    /**\\n     * @dev Pause vesting activity\\n     */\\n    function togglePause() external onlyOwner {\\n        isPaused = !isPaused;\\n    }\\n    \\n    /**\\n     * @dev Transfer ownership\\n     * @param _newOwner New owner address\\n     */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"!good\\\");\\n        owner = _newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/ILinearCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface ILinearCreator{\\r\\n    event VestingCreated(address indexed vesting, uint index);\\r\\n    \\r\\n    function owner() external  view returns (address);\\r\\n    \\r\\n    function allVestingsLength() external view returns(uint);\\r\\n    \\r\\n    function allVestings(uint) external view returns(address);\\r\\n    \\r\\n    function createVesting(address, uint32, uint32, uint32[2] calldata) external returns (address);\\r\\n    \\r\\n    function transferOwnership(address) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endLinear\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_tgeDatetime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_tgeRatio_d2\",\"type\":\"uint32\"},{\"internalType\":\"uint32[2]\",\"name\":\"_startEndLinearDatetime\",\"type\":\"uint32[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invoice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"purchased\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"linearPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimed\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastClaimed\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"buyerIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linearStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyer\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_purchased\",\"type\":\"uint128[]\"}],\"name\":\"newBuyers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyer\",\"type\":\"address[]\"}],\"name\":\"removeBuyers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oldBuyer\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_newBuyer\",\"type\":\"address[]\"}],\"name\":\"replaceBuyers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyer\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_newPurchased\",\"type\":\"uint128[]\"}],\"name\":\"replacePurchases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[2]\",\"name\":\"_startEndLinearDatetime\",\"type\":\"uint32[2]\"}],\"name\":\"setStartEndLinearDatetime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tgeDatetime\",\"type\":\"uint32\"}],\"name\":\"setTgeDatetime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tgeRatio_d2\",\"type\":\"uint32\"}],\"name\":\"setTgeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLinear\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tgeClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeDatetime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeRatio_d2\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LinearVesting", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}