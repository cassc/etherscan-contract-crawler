{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IFAllocationMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// import 'hardhat/console.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport 'sgn-v2-contracts/contracts/message/libraries/MessageSenderLib.sol';\\nimport { MessageBusSender} from 'sgn-v2-contracts/contracts/message/messagebus/MessageBusSender.sol';\\n\\nimport './interfaces/IIFRetrievableStakeWeight.sol';\\nimport './interfaces/IIFBridgableStakeWeight.sol';\\n\\n// IFAllocationMaster is responsible for persisting all launchpad state between project token sales\\n// in order for the sales to have clean, self-enclosed, one-time-use states.\\n\\n// IFAllocationMaster is the master of allocations. He can remember everything and he is a smart guy.\\ncontract IFAllocationMaster is\\n    Ownable,\\n    ReentrancyGuard,\\n    IIFRetrievableStakeWeight,\\n    IIFBridgableStakeWeight\\n{\\n    using SafeERC20 for ERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // CONSTANTS\\n\\n    // number of decimals of rollover factors\\n    uint64 constant ROLLOVER_FACTOR_DECIMALS = 10**18;\\n\\n    // STRUCTS\\n\\n    // Celer Multichain Integration\\n    address public immutable messageBus;\\n\\n    // A checkpoint for marking stake info at a given block\\n    struct UserCheckpoint {\\n        // timestamp number of checkpoint\\n        uint80 timestamp;\\n        // amount staked at checkpoint\\n        uint104 staked;\\n        // amount of stake weight at checkpoint\\n        uint192 stakeWeight;\\n        // number of finished sales at time of checkpoint\\n        uint24 numFinishedSales;\\n    }\\n\\n    // A checkpoint for marking stake info at a given block\\n    struct TrackCheckpoint {\\n        // timestamp number of checkpoint\\n        uint80 timestamp;\\n        // amount staked at checkpoint\\n        uint104 totalStaked;\\n        // amount of stake weight at checkpoint\\n        uint192 totalStakeWeight;\\n        // number of finished sales at time of checkpoint\\n        uint24 numFinishedSales;\\n    }\\n\\n    // Info of each track. These parameters cannot be changed.\\n    struct TrackInfo {\\n        // name of track\\n        string name;\\n        // token to stake (e.g., IDIA)\\n        ERC20 stakeToken;\\n        // weight accrual rate for this track (stake weight increase per timestamp per stake token)\\n        uint24 weightAccrualRate;\\n        // amount rolled over when finished sale counter increases (with decimals == ROLLOVER_FACTOR_DECIMALS)\\n        // e.g., if rolling over 20% when sale finishes, then this is 0.2 * ROLLOVER_FACTOR_DECIMALS, or\\n        // 200_000_000_000_000_000\\n        uint64 passiveRolloverRate;\\n        // amount rolled over when finished sale counter increases, and user actively elected to roll over\\n        uint64 activeRolloverRate;\\n        // maximum total stake for a user in this track\\n        uint104 maxTotalStake;\\n    }\\n\\n    // Info of each user stake weight.\\n    struct AddressStakeWeight {\\n        address user;\\n        uint192 stakeWeight;\\n    }\\n\\n    // INFO FOR FACTORING IN ROLLOVERS\\n\\n    // the number of checkpoints of a track -- (track, finished sale count) => timestamp number\\n    mapping(uint24 => mapping(uint24 => uint80))\\n        public trackFinishedSaleTimestamps;\\n\\n    // stake weight each user actively rolls over for a given track and a finished sale count\\n    // (track, user, finished sale count) => amount of stake weight\\n    mapping(uint24 => mapping(address => mapping(uint24 => uint192)))\\n        public trackActiveRollOvers;\\n\\n    // total stake weight actively rolled over for a given track and a finished sale count\\n    // (track, finished sale count) => total amount of stake weight\\n    mapping(uint24 => mapping(uint24 => uint192))\\n        public trackTotalActiveRollOvers;\\n\\n    // TRACK INFO\\n\\n    // array of track information\\n    TrackInfo[] public tracks;\\n\\n    // whether track is disabled -- (track) => disabled status\\n    mapping(uint24 => bool) public trackDisabled;\\n\\n    // whether user has emergency withdrawn from track -- (track, user) => status\\n    mapping(uint24 => mapping(address => bool)) public hasEmergencyWithdrawn;\\n\\n    // number of unique stakers on track -- (track) => staker count\\n    mapping(uint24 => uint256) public numTrackStakers;\\n\\n    // array of unique stakers on track -- (track) => address array\\n    // users are only added on first checkpoint to maintain unique\\n    mapping(uint24 => address[]) public trackStakers;\\n\\n    // the number of checkpoints of a track -- (track) => checkpoint count\\n    mapping(uint24 => uint32) public trackCheckpointCounts;\\n\\n    // track checkpoint mapping -- (track, checkpoint number) => TrackCheckpoint\\n    mapping(uint24 => mapping(uint32 => TrackCheckpoint))\\n        public trackCheckpoints;\\n\\n    // max stakes seen for each track -- (track) => max stake seen on track\\n    mapping(uint24 => uint104) public trackMaxStakes;\\n\\n    // USER INFO\\n\\n    // the number of checkpoints of a user for a track -- (track, user address) => checkpoint count\\n    mapping(uint24 => mapping(address => uint32)) public userCheckpointCounts;\\n\\n    // user checkpoint mapping -- (track, user address, checkpoint number) => UserCheckpoint\\n    mapping(uint24 => mapping(address => mapping(uint32 => UserCheckpoint)))\\n        public userCheckpoints;\\n\\n    // EVENTS\\n\\n    event AddTrack(string indexed name, address indexed token);\\n    event DisableTrack(uint24 indexed trackId);\\n    event ActiveRollOver(uint24 indexed trackId, address indexed user);\\n    event BumpSaleCounter(uint24 indexed trackId, uint32 newCount);\\n    event AddUserCheckpoint(uint24 indexed trackId, uint80 timestamp);\\n    event AddTrackCheckpoint(uint24 indexed trackId, uint80 timestamp);\\n    event Stake(uint24 indexed trackId, address indexed user, uint104 amount);\\n    event Unstake(uint24 indexed trackId, address indexed user, uint104 amount);\\n    event EmergencyWithdraw(\\n        uint24 indexed trackId,\\n        address indexed sender,\\n        uint256 amount\\n    );\\n    event SyncUserWeight(\\n        address receiver,\\n        uint24 srcTrackId,\\n        uint80 timestamp,\\n        uint64 dstChainId,\\n        uint24 dstTrackId\\n    );\\n    event SyncTotalWeight(\\n        address receiver,\\n        uint24 srcTrackId,\\n        uint80 timestamp,\\n        uint64 dstChainId,\\n        uint24 dstTrackId\\n    );\\n\\n    // CONSTRUCTOR\\n    constructor(address _messageBus) {\\n        messageBus = _messageBus;\\n    }\\n\\n    // FUNCTIONS\\n\\n    // number of tracks\\n    function trackCount() external view returns (uint24) {\\n        return uint24(tracks.length);\\n    }\\n\\n    // adds a new track\\n    function addTrack(\\n        string calldata name,\\n        ERC20 stakeToken,\\n        uint24 _weightAccrualRate,\\n        uint64 _passiveRolloverRate,\\n        uint64 _activeRolloverRate,\\n        uint104 _maxTotalStake\\n    ) external onlyOwner {\\n        require(_weightAccrualRate != 0, 'accrual rate is 0');\\n\\n        // add track\\n        tracks.push(\\n            TrackInfo({\\n                name: name, // name of track\\n                stakeToken: stakeToken, // token to stake (e.g., IDIA)\\n                weightAccrualRate: _weightAccrualRate, // rate of stake weight accrual\\n                passiveRolloverRate: _passiveRolloverRate, // passive rollover\\n                activeRolloverRate: _activeRolloverRate, // active rollover\\n                maxTotalStake: _maxTotalStake // max total stake\\n            })\\n        );\\n\\n        // add first track checkpoint\\n        addTrackCheckpoint(\\n            uint24(tracks.length - 1), // latest track\\n            0, // initialize with 0 stake\\n            false, // add or sub does not matter\\n            false // do not bump finished sale counter\\n        );\\n\\n        // emit\\n        emit AddTrack(name, address(stakeToken));\\n    }\\n\\n    // bumps a track's finished sale counter\\n    function bumpSaleCounter(uint24 trackId) external onlyOwner {\\n        // get number of finished sales of this track\\n        uint24 nFinishedSales = trackCheckpoints[trackId][\\n            trackCheckpointCounts[trackId] - 1\\n        ].numFinishedSales;\\n\\n        // update map that tracks timestamp numbers of finished sales\\n        trackFinishedSaleTimestamps[trackId][nFinishedSales] = uint80(\\n            block.timestamp\\n        );\\n\\n        // add a new checkpoint with counter incremented by 1\\n        addTrackCheckpoint(trackId, 0, false, true);\\n\\n        // `BumpSaleCounter` event emitted in function call above\\n    }\\n\\n    // disables a track\\n    function disableTrack(uint24 trackId) external onlyOwner {\\n        // set disabled\\n        trackDisabled[trackId] = true;\\n\\n        // emit\\n        emit DisableTrack(trackId);\\n    }\\n\\n    // perform active rollover\\n    function activeRollOver(uint24 trackId) external {\\n        // add new user checkpoint\\n        addUserCheckpoint(trackId, 0, false);\\n\\n        // get new user checkpoint\\n        UserCheckpoint memory userCp = userCheckpoints[trackId][_msgSender()][\\n            userCheckpointCounts[trackId][_msgSender()] - 1\\n        ];\\n\\n        // current sale count\\n        uint24 saleCount = userCp.numFinishedSales;\\n\\n        // subtract old user rollover amount from total\\n        trackTotalActiveRollOvers[trackId][saleCount] -= trackActiveRollOvers[\\n            trackId\\n        ][_msgSender()][saleCount];\\n\\n        // update user rollover amount\\n        trackActiveRollOvers[trackId][_msgSender()][saleCount] = userCp\\n            .stakeWeight;\\n\\n        // add new user rollover amount to total\\n        trackTotalActiveRollOvers[trackId][saleCount] += userCp.stakeWeight;\\n\\n        // emit\\n        emit ActiveRollOver(trackId, _msgSender());\\n    }\\n\\n    // get closest PRECEDING user checkpoint\\n    function getClosestUserCheckpoint(\\n        uint24 trackId,\\n        address user,\\n        uint80 timestamp\\n    ) private view returns (UserCheckpoint memory cp) {\\n        // get total checkpoint count for user\\n        uint32 nCheckpoints = userCheckpointCounts[trackId][user];\\n\\n        if (\\n            userCheckpoints[trackId][user][nCheckpoints - 1].timestamp <=\\n            timestamp\\n        ) {\\n            // First check most recent checkpoint\\n\\n            // return closest checkpoint\\n            return userCheckpoints[trackId][user][nCheckpoints - 1];\\n        } else if (userCheckpoints[trackId][user][0].timestamp > timestamp) {\\n            // Next check earliest checkpoint\\n\\n            // If specified timestamp number is earlier than user's first checkpoint,\\n            // return null checkpoint\\n            return\\n                UserCheckpoint({\\n                    timestamp: 0,\\n                    staked: 0,\\n                    stakeWeight: 0,\\n                    numFinishedSales: 0\\n                });\\n        } else {\\n            // binary search on checkpoints\\n            uint32 lower = 0;\\n            uint32 upper = nCheckpoints - 1;\\n            while (upper > lower) {\\n                uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n                UserCheckpoint memory tempCp = userCheckpoints[trackId][user][\\n                    center\\n                ];\\n                if (tempCp.timestamp == timestamp) {\\n                    return tempCp;\\n                } else if (tempCp.timestamp < timestamp) {\\n                    lower = center;\\n                } else {\\n                    upper = center - 1;\\n                }\\n            }\\n\\n            // return closest checkpoint\\n            return userCheckpoints[trackId][user][lower];\\n        }\\n    }\\n\\n    // gets a user's stake weight within a track at a particular timestamp number\\n    // logic extended from Compound COMP token `getPriorVotes` function\\n    function getUserStakeWeight(\\n        uint24 trackId,\\n        address user,\\n        uint80 timestamp\\n    ) public view returns (uint192) {\\n        require(timestamp <= block.timestamp, 'timestamp # too high');\\n\\n        // if track is disabled, stake weight is 0\\n        if (trackDisabled[trackId]) return 0;\\n\\n        // check number of user checkpoints\\n        uint32 nUserCheckpoints = userCheckpointCounts[trackId][user];\\n        if (nUserCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // get closest preceding user checkpoint\\n        UserCheckpoint memory closestUserCheckpoint = getClosestUserCheckpoint(\\n            trackId,\\n            user,\\n            timestamp\\n        );\\n\\n        // check if closest preceding checkpoint was null checkpoint\\n        if (closestUserCheckpoint.timestamp == 0) {\\n            return 0;\\n        }\\n\\n        // get closest preceding track checkpoint\\n\\n        TrackCheckpoint memory closestTrackCp = getClosestTrackCheckpoint(\\n            trackId,\\n            timestamp\\n        );\\n\\n        // get number of finished sales between user's last checkpoint timestamp and provided timestamp\\n        uint24 numFinishedSalesDelta = closestTrackCp.numFinishedSales -\\n            closestUserCheckpoint.numFinishedSales;\\n\\n        // get track info\\n        TrackInfo memory track = tracks[trackId];\\n\\n        // calculate stake weight given above delta\\n        uint192 stakeWeight;\\n        if (numFinishedSalesDelta == 0) {\\n            // calculate normally without rollover decay\\n\\n            uint80 elapsedTimestamps = timestamp -\\n                closestUserCheckpoint.timestamp;\\n\\n            stakeWeight =\\n                closestUserCheckpoint.stakeWeight +\\n                (uint192(elapsedTimestamps) *\\n                    track.weightAccrualRate *\\n                    closestUserCheckpoint.staked) /\\n                10**18;\\n\\n            return stakeWeight;\\n        } else {\\n            // calculate with rollover decay\\n\\n            // starting stakeweight\\n            stakeWeight = closestUserCheckpoint.stakeWeight;\\n            // current timestamp for iteration\\n            uint80 currTimestamp = closestUserCheckpoint.timestamp;\\n\\n            // for each finished sale in between, get stake weight of that period\\n            // and perform weighted sum\\n            for (uint24 i = 0; i < numFinishedSalesDelta; i++) {\\n                // get number of blocks passed at the current sale number\\n                uint80 elapsedTimestamps = trackFinishedSaleTimestamps[trackId][\\n                    closestUserCheckpoint.numFinishedSales + i\\n                ] - currTimestamp;\\n\\n                // update stake weight\\n                stakeWeight =\\n                    stakeWeight +\\n                    (uint192(elapsedTimestamps) *\\n                        track.weightAccrualRate *\\n                        closestUserCheckpoint.staked) /\\n                    10**18;\\n\\n                // get amount of stake weight actively rolled over for this sale number\\n                uint192 activeRolloverWeight = trackActiveRollOvers[trackId][\\n                    user\\n                ][closestUserCheckpoint.numFinishedSales + i];\\n\\n                // factor in passive and active rollover decay\\n                stakeWeight =\\n                    // decay active weight\\n                    (activeRolloverWeight * track.activeRolloverRate) /\\n                    ROLLOVER_FACTOR_DECIMALS +\\n                    // decay passive weight\\n                    ((stakeWeight - activeRolloverWeight) *\\n                        track.passiveRolloverRate) /\\n                    ROLLOVER_FACTOR_DECIMALS;\\n\\n                // update currTimestamp for next round\\n                currTimestamp = trackFinishedSaleTimestamps[trackId][\\n                    closestUserCheckpoint.numFinishedSales + i\\n                ];\\n            }\\n\\n            // add any remaining accrued stake weight at current finished sale count\\n            uint80 remainingElapsed = timestamp -\\n                trackFinishedSaleTimestamps[trackId][\\n                    closestTrackCp.numFinishedSales - 1\\n                ];\\n            stakeWeight +=\\n                (uint192(remainingElapsed) *\\n                    track.weightAccrualRate *\\n                    closestUserCheckpoint.staked) /\\n                10**18;\\n        }\\n\\n        // return\\n        return stakeWeight;\\n    }\\n\\n    // get batch stake weight users by trackId\\n    function getBatchStakeWeightByTrackId(uint24 trackId, uint80 timestamp, uint start, uint count)\\n        public\\n        view\\n        returns (AddressStakeWeight[] memory)\\n    {\\n        require(timestamp <= block.timestamp, 'timestamp # too high');\\n        require(start >= 0, 'start parameter cannot be negative number');\\n        require(count > 0, 'count parameter must be greater than zero');\\n\\n        // total current user for a track\\n        uint256 totalUser = numTrackStakers[trackId];\\n\\n        uint end = start + count;\\n        uint stakersCount = totalUser < end ? totalUser : end;\\n\\n        AddressStakeWeight[] memory result = new AddressStakeWeight[](stakersCount - start);\\n\\n        for (uint i = start; i < stakersCount; i++) {\\n            // get staker address\\n            address staker = trackStakers[trackId][i];\\n            // get stake weight for user\\n            uint192 stakeWeight = getUserStakeWeight(trackId, staker, timestamp);\\n        \\n            result[i - start] = AddressStakeWeight(staker, stakeWeight);\\n        }\\n\\n        return result;\\n    }\\n\\n    // get closest PRECEDING track checkpoint\\n    function getClosestTrackCheckpoint(uint24 trackId, uint80 timestamp)\\n        private\\n        view\\n        returns (TrackCheckpoint memory cp)\\n    {\\n        // get total checkpoint count for track\\n        uint32 nCheckpoints = trackCheckpointCounts[trackId];\\n\\n        if (\\n            trackCheckpoints[trackId][nCheckpoints - 1].timestamp <= timestamp\\n        ) {\\n            // First check most recent checkpoint\\n\\n            // return closest checkpoint\\n            return trackCheckpoints[trackId][nCheckpoints - 1];\\n        } else if (trackCheckpoints[trackId][0].timestamp > timestamp) {\\n            // Next check earliest checkpoint\\n\\n            // If specified timestamp number is earlier than track's first checkpoint,\\n            // return null checkpoint\\n            return\\n                TrackCheckpoint({\\n                    timestamp: 0,\\n                    totalStaked: 0,\\n                    totalStakeWeight: 0,\\n                    numFinishedSales: 0\\n                });\\n        } else {\\n            // binary search on checkpoints\\n            uint32 lower = 0;\\n            uint32 upper = nCheckpoints - 1;\\n            while (upper > lower) {\\n                uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n                TrackCheckpoint memory tempCp = trackCheckpoints[trackId][\\n                    center\\n                ];\\n                if (tempCp.timestamp == timestamp) {\\n                    return tempCp;\\n                } else if (tempCp.timestamp < timestamp) {\\n                    lower = center;\\n                } else {\\n                    upper = center - 1;\\n                }\\n            }\\n\\n            // return closest checkpoint\\n            return trackCheckpoints[trackId][lower];\\n        }\\n    }\\n\\n    // gets total stake weight within a track at a particular timestamp number\\n    // logic extended from Compound COMP token `getPriorVotes` function\\n    function getTotalStakeWeight(uint24 trackId, uint80 timestamp)\\n        public\\n        view\\n        returns (uint192)\\n    {\\n        require(timestamp <= block.timestamp, 'timestamp # too high');\\n\\n        // if track is disabled, stake weight is 0\\n        if (trackDisabled[trackId]) return 0;\\n\\n        // get closest track checkpoint\\n        TrackCheckpoint memory closestCheckpoint = getClosestTrackCheckpoint(\\n            trackId,\\n            timestamp\\n        );\\n\\n        // check if closest preceding checkpoint was null checkpoint\\n        if (closestCheckpoint.timestamp == 0) {\\n            return 0;\\n        }\\n\\n        // calculate blocks elapsed since checkpoint\\n        uint80 additionalTimestamps = (timestamp - closestCheckpoint.timestamp);\\n\\n        // get track info\\n        TrackInfo storage trackInfo = tracks[trackId];\\n\\n        // calculate marginal accrued stake weight\\n        uint192 marginalAccruedStakeWeight = (uint192(additionalTimestamps) *\\n            trackInfo.weightAccrualRate *\\n            closestCheckpoint.totalStaked) / 10**18;\\n\\n        // return\\n        return closestCheckpoint.totalStakeWeight + marginalAccruedStakeWeight;\\n    }\\n\\n    function addUserCheckpoint(\\n        uint24 trackId,\\n        uint104 amount,\\n        bool addElseSub\\n    ) internal {\\n        // get track info\\n        TrackInfo storage track = tracks[trackId];\\n\\n        // get user checkpoint count\\n        uint32 nCheckpointsUser = userCheckpointCounts[trackId][_msgSender()];\\n\\n        // get track checkpoint count\\n        uint32 nCheckpointsTrack = trackCheckpointCounts[trackId];\\n\\n        // get latest track checkpoint\\n        TrackCheckpoint memory trackCp = trackCheckpoints[trackId][\\n            nCheckpointsTrack - 1\\n        ];\\n\\n        // if this is first checkpoint\\n        if (nCheckpointsUser == 0) {\\n            // check if amount exceeds maximum\\n            require(amount <= track.maxTotalStake, 'exceeds staking cap');\\n\\n            // add user to stakers list of track\\n            trackStakers[trackId].push(_msgSender());\\n\\n            // increment stakers count on track\\n            numTrackStakers[trackId]++;\\n\\n            // add a first checkpoint for this user on this track\\n            userCheckpoints[trackId][_msgSender()][0] = UserCheckpoint({\\n                timestamp: uint80(block.timestamp),\\n                staked: amount,\\n                stakeWeight: 0,\\n                numFinishedSales: trackCp.numFinishedSales\\n            });\\n\\n            // increment user's checkpoint count\\n            userCheckpointCounts[trackId][_msgSender()] = nCheckpointsUser + 1;\\n        } else {\\n            // get previous checkpoint\\n            UserCheckpoint storage prev = userCheckpoints[trackId][\\n                _msgSender()\\n            ][nCheckpointsUser - 1];\\n\\n            // check if amount exceeds maximum\\n            require(\\n                (addElseSub ? prev.staked + amount : prev.staked - amount) <=\\n                    track.maxTotalStake,\\n                'exceeds staking cap'\\n            );\\n\\n            // ensure timestamp number downcast to uint80 is monotonically increasing (prevent overflow)\\n            // this should never happen within the lifetime of the universe, but if it does, this prevents a catastrophe\\n            require(\\n                prev.timestamp <= uint80(block.timestamp),\\n                'timestamp # overflow'\\n            );\\n\\n            // add a new checkpoint for user within this track\\n            // if no blocks elapsed, just update prev checkpoint (so checkpoints can be uniquely identified by timestamp number)\\n            if (prev.timestamp == uint80(block.timestamp)) {\\n                prev.staked = addElseSub\\n                    ? prev.staked + amount\\n                    : prev.staked - amount;\\n                prev.numFinishedSales = trackCp.numFinishedSales;\\n            } else {\\n                userCheckpoints[trackId][_msgSender()][\\n                    nCheckpointsUser\\n                ] = UserCheckpoint({\\n                    timestamp: uint80(block.timestamp),\\n                    staked: addElseSub\\n                        ? prev.staked + amount\\n                        : prev.staked - amount,\\n                    stakeWeight: getUserStakeWeight(\\n                        trackId,\\n                        _msgSender(),\\n                        uint80(block.timestamp)\\n                    ),\\n                    numFinishedSales: trackCp.numFinishedSales\\n                });\\n\\n                // increment user's checkpoint count\\n                userCheckpointCounts[trackId][_msgSender()] =\\n                    nCheckpointsUser +\\n                    1;\\n            }\\n        }\\n\\n        // emit\\n        emit AddUserCheckpoint(trackId, uint80(block.timestamp));\\n    }\\n\\n    function addTrackCheckpoint(\\n        uint24 trackId, // track number\\n        uint104 amount, // delta on staked amount\\n        bool addElseSub, // true = adding; false = subtracting\\n        bool _bumpSaleCounter // whether to increase sale counter by 1\\n    ) internal {\\n        // get track info\\n        TrackInfo storage track = tracks[trackId];\\n\\n        // get track checkpoint count\\n        uint32 nCheckpoints = trackCheckpointCounts[trackId];\\n\\n        // if this is first checkpoint\\n        if (nCheckpoints == 0) {\\n            // add a first checkpoint for this track\\n            trackCheckpoints[trackId][0] = TrackCheckpoint({\\n                timestamp: uint80(block.timestamp),\\n                totalStaked: amount,\\n                totalStakeWeight: 0,\\n                numFinishedSales: _bumpSaleCounter ? 1 : 0\\n            });\\n\\n            // increase new track's checkpoint count by 1\\n            trackCheckpointCounts[trackId]++;\\n        } else {\\n            // get previous checkpoint\\n            TrackCheckpoint storage prev = trackCheckpoints[trackId][\\n                nCheckpoints - 1\\n            ];\\n\\n            // get whether track is disabled\\n            bool isDisabled = trackDisabled[trackId];\\n\\n            if (isDisabled) {\\n                // if previous checkpoint was disabled, then cannot increase stake going forward\\n                require(!addElseSub, 'disabled: cannot add stake');\\n            }\\n\\n            // ensure timestamp number downcast to uint80 is monotonically increasing (prevent overflow)\\n            // this should never happen within the lifetime of the universe, but if it does, this prevents a catastrophe\\n            require(\\n                prev.timestamp <= uint80(block.timestamp),\\n                'timestamp # overflow'\\n            );\\n\\n            // calculate blocks elapsed since checkpoint\\n            uint80 additionalTimestamp = (uint80(block.timestamp) -\\n                prev.timestamp);\\n\\n            // calculate marginal accrued stake weight\\n            uint192 marginalAccruedStakeWeight = (uint192(additionalTimestamp) *\\n                track.weightAccrualRate *\\n                prev.totalStaked) / 10**18;\\n\\n            // calculate new stake weight\\n            uint192 newStakeWeight = prev.totalStakeWeight +\\n                marginalAccruedStakeWeight;\\n\\n            // factor in passive and active rollover decay\\n            if (_bumpSaleCounter) {\\n                // get total active rollover amount\\n                uint192 activeRolloverWeight = trackTotalActiveRollOvers[\\n                    trackId\\n                ][prev.numFinishedSales];\\n\\n                newStakeWeight =\\n                    // decay active weight\\n                    (activeRolloverWeight * track.activeRolloverRate) /\\n                    ROLLOVER_FACTOR_DECIMALS +\\n                    // decay passive weight\\n                    ((newStakeWeight - activeRolloverWeight) *\\n                        track.passiveRolloverRate) /\\n                    ROLLOVER_FACTOR_DECIMALS;\\n\\n                // emit\\n                emit BumpSaleCounter(trackId, prev.numFinishedSales + 1);\\n            }\\n\\n            // add a new checkpoint for this track\\n            // if no timestamp elapsed, just update prev checkpoint (so checkpoints can be uniquely identified by timestamp number)\\n            if (additionalTimestamp == 0) {\\n                prev.totalStaked = addElseSub\\n                    ? prev.totalStaked + amount\\n                    : prev.totalStaked - amount;\\n                prev.totalStakeWeight = isDisabled\\n                    ? (\\n                        prev.totalStakeWeight < newStakeWeight\\n                            ? prev.totalStakeWeight\\n                            : newStakeWeight\\n                    )\\n                    : newStakeWeight;\\n                prev.numFinishedSales = _bumpSaleCounter\\n                    ? prev.numFinishedSales + 1\\n                    : prev.numFinishedSales;\\n            } else {\\n                trackCheckpoints[trackId][nCheckpoints] = TrackCheckpoint({\\n                    timestamp: uint80(block.timestamp),\\n                    totalStaked: addElseSub\\n                        ? prev.totalStaked + amount\\n                        : prev.totalStaked - amount,\\n                    totalStakeWeight: isDisabled\\n                        ? (\\n                            prev.totalStakeWeight < newStakeWeight\\n                                ? prev.totalStakeWeight\\n                                : newStakeWeight\\n                        )\\n                        : newStakeWeight,\\n                    numFinishedSales: _bumpSaleCounter\\n                        ? prev.numFinishedSales + 1\\n                        : prev.numFinishedSales\\n                });\\n\\n                // increase new track's checkpoint count by 1\\n                trackCheckpointCounts[trackId]++;\\n            }\\n        }\\n\\n        // emit\\n        emit AddTrackCheckpoint(trackId, uint80(block.timestamp));\\n    }\\n\\n    // stake\\n    function stake(uint24 trackId, uint104 amount) external nonReentrant {\\n        // stake amount must be greater than 0\\n        require(amount > 0, 'amount is 0');\\n\\n        // get track info\\n        TrackInfo storage track = tracks[trackId];\\n\\n        // get whether track is disabled\\n        bool isDisabled = trackDisabled[trackId];\\n\\n        // cannot stake into disabled track\\n        require(!isDisabled, 'track is disabled');\\n\\n        // transfer the specified amount of stake token from user to this contract\\n        track.stakeToken.safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        // add user checkpoint\\n        addUserCheckpoint(trackId, amount, true);\\n\\n        // add track checkpoint\\n        addTrackCheckpoint(trackId, amount, true, false);\\n\\n        // get latest track cp\\n        TrackCheckpoint memory trackCp = trackCheckpoints[trackId][\\n            trackCheckpointCounts[trackId] - 1\\n        ];\\n\\n        // update track max staked\\n        if (trackMaxStakes[trackId] < trackCp.totalStaked) {\\n            trackMaxStakes[trackId] = trackCp.totalStaked;\\n        }\\n\\n        // emit\\n        emit Stake(trackId, _msgSender(), amount);\\n    }\\n\\n    // unstake\\n    function unstake(uint24 trackId, uint104 amount) external nonReentrant {\\n        // amount must be greater than 0\\n        require(amount > 0, 'amount is 0');\\n\\n        // get track info\\n        TrackInfo storage track = tracks[trackId];\\n\\n        // get number of user's checkpoints within this track\\n        uint32 userCheckpointCount = userCheckpointCounts[trackId][\\n            _msgSender()\\n        ];\\n\\n        // get user's latest checkpoint\\n        UserCheckpoint storage checkpoint = userCheckpoints[trackId][\\n            _msgSender()\\n        ][userCheckpointCount - 1];\\n\\n        // ensure amount <= user's current stake\\n        require(amount <= checkpoint.staked, 'amount > staked');\\n\\n        // add user checkpoint\\n        addUserCheckpoint(trackId, amount, false);\\n\\n        // add track checkpoint\\n        addTrackCheckpoint(trackId, amount, false, false);\\n\\n        // transfer the specified amount of stake token from this contract to user\\n        track.stakeToken.safeTransfer(_msgSender(), amount);\\n\\n        // emit\\n        emit Unstake(trackId, _msgSender(), amount);\\n    }\\n\\n    // emergency withdraw\\n    function emergencyWithdraw(uint24 trackId) external nonReentrant {\\n        // require track is disabled\\n        require(trackDisabled[trackId], 'track !disabled');\\n\\n        // require can only emergency withdraw once\\n        require(\\n            !hasEmergencyWithdrawn[trackId][_msgSender()],\\n            'already called'\\n        );\\n\\n        // set emergency withdrawn status to true\\n        hasEmergencyWithdrawn[trackId][_msgSender()] = true;\\n\\n        // get track info\\n        TrackInfo storage track = tracks[trackId];\\n\\n        // get number of user's checkpoints within this track\\n        uint32 userCheckpointCount = userCheckpointCounts[trackId][\\n            _msgSender()\\n        ];\\n\\n        // get user's latest checkpoint\\n        UserCheckpoint storage checkpoint = userCheckpoints[trackId][\\n            _msgSender()\\n        ][userCheckpointCount - 1];\\n\\n        // update checkpoint before emergency withdrawal\\n        // add user checkpoint\\n        addUserCheckpoint(trackId, checkpoint.staked, false);\\n        // add track checkpoint\\n        addTrackCheckpoint(trackId, checkpoint.staked, false, false);\\n\\n        // transfer the specified amount of stake token from this contract to user\\n        track.stakeToken.safeTransfer(_msgSender(), checkpoint.staked);\\n\\n        // emit\\n        emit EmergencyWithdraw(trackId, _msgSender(), checkpoint.staked);\\n    }\\n\\n    // Methods for bridging track weight information\\n\\n    // Push\\n    function syncUserWeight(\\n        address receiver,\\n        address[] calldata users,\\n        uint24 trackId,\\n        uint80 timestamp,\\n        uint64 dstChainId\\n    ) external payable nonReentrant {\\n        // should be active track\\n        require(!trackDisabled[trackId], 'track !disabled');\\n\\n        // get user stake weight on this contract\\n        uint192[] memory userStakeWeights = new uint192[](users.length);\\n\\n        for (uint256 i = 0; i < users.length; i++) {\\n            userStakeWeights[i] = getUserStakeWeight(\\n                trackId,\\n                users[i],\\n                timestamp\\n            );\\n        }\\n\\n        // construct message data to be sent to dest contract\\n        bytes memory message = abi.encode(\\n            MessageRequest({\\n                bridgeType: BridgeType.UserWeight,\\n                users: users,\\n                timestamp: timestamp,\\n                weights: userStakeWeights,\\n                trackId: trackId\\n            })\\n        );\\n\\n        // calculate messageBus fee\\n        MessageBusSender messageBusSender = MessageBusSender(messageBus);\\n        uint256 fee = messageBusSender.calcFee(message);\\n        require(msg.value >= fee, \\\"Not enough fee\\\");\\n\\n        // trigger the message bridge\\n        MessageSenderLib.sendMessage(\\n            receiver,\\n            dstChainId,\\n            message,\\n            messageBus,\\n            fee\\n        );\\n\\n        // Refund mesasgeBus fee\\n        if ((msg.value - fee) != 0) {\\n            payable(_msgSender()).transfer(msg.value - fee);\\n        }\\n\\n\\n        emit SyncUserWeight(\\n            receiver,\\n            trackId,\\n            timestamp,\\n            dstChainId,\\n            trackId\\n        );\\n    }\\n\\n    function syncTotalWeight(\\n        address receiver,\\n        uint24 trackId,\\n        uint80 timestamp,\\n        uint64 dstChainId\\n    ) external payable nonReentrant {\\n        // should be active track\\n        require(!trackDisabled[trackId], 'track disabled');\\n\\n        address[] memory users = new address[](1);\\n        users[0] = _msgSender();\\n\\n        // get total stake weight on this contract\\n        uint192[] memory weights = new uint192[](1);\\n        weights[0] = getTotalStakeWeight(trackId, timestamp);\\n\\n        // construct message data to be sent to dest contract\\n        bytes memory message = abi.encode(\\n            MessageRequest({\\n                bridgeType: BridgeType.TotalWeight,\\n                users: users,\\n                timestamp: timestamp,\\n                weights: weights,\\n                trackId: trackId\\n            })\\n        );\\n\\n        // calculate messageBus fee\\n        MessageBusSender messageBusSender = MessageBusSender(messageBus);\\n        uint256 fee = messageBusSender.calcFee(message);\\n        require(msg.value >= fee, \\\"Not enough fee\\\");\\n\\n        // trigger the message bridge\\n        MessageSenderLib.sendMessage(\\n            receiver,\\n            dstChainId,\\n            message,\\n            messageBus,\\n            fee\\n        );\\n\\n        // Refund mesasgeBus fee\\n        if ((msg.value - fee) != 0) {\\n            payable(_msgSender()).transfer(msg.value - fee);\\n        }\\n\\n        emit SyncTotalWeight(receiver, trackId, timestamp, dstChainId, trackId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"sgn-v2-contracts/contracts/message/libraries/MessageSenderLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"./MsgDataTypes.sol\\\";\\n\\nlibrary MessageSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            return\\n                sendMessageWithLiquidityBridgeTransfer(\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _maxSlippage,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else if (\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit ||\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit\\n        ) {\\n            return\\n                sendMessageWithPegVaultDeposit(\\n                    _bridgeSendType,\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else if (\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn ||\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn\\n        ) {\\n            return\\n                sendMessageWithPegBridgeBurn(\\n                    _bridgeSendType,\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated liquidity bridge transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithLiquidityBridgeTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address bridge = IMessageBus(_messageBus).liquidityBridge();\\n        IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n        IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n        bytes32 transferId = keccak256(\\n            abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n        );\\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            bridge,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated OriginalTokenVault deposit.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithPegVaultDeposit(\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address pegVault;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            pegVault = IMessageBus(_messageBus).pegVault();\\n        } else {\\n            pegVault = IMessageBus(_messageBus).pegVaultV2();\\n        }\\n        IERC20(_token).safeIncreaseAllowance(pegVault, _amount);\\n        bytes32 transferId;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            IOriginalTokenVault(pegVault).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n        } else {\\n            transferId = IOriginalTokenVaultV2(pegVault).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        }\\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            pegVault,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated PeggedTokenBridge burn.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithPegBridgeBurn(\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address pegBridge;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            pegBridge = IMessageBus(_messageBus).pegBridge();\\n        } else {\\n            pegBridge = IMessageBus(_messageBus).pegBridgeV2();\\n        }\\n        IERC20(_token).safeIncreaseAllowance(pegBridge, _amount);\\n        bytes32 transferId;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            IPeggedTokenBridge(pegBridge).burn(_token, _amount, _receiver, _nonce);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid))\\n            );\\n        } else {\\n            transferId = IPeggedTokenBridgeV2(pegBridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n        }\\n        // handle cases where certain tokens do not spend allowance for role-based burn\\n        IERC20(_token).safeApprove(pegBridge, 0);\\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            pegBridge,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _bridge\\n    ) internal {\\n        IERC20(_token).safeIncreaseAllowance(_bridge, _amount);\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            IBridge(_bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            IOriginalTokenVault(_bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            IPeggedTokenBridge(_bridge).burn(_token, _amount, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\\n            IOriginalTokenVaultV2(_bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\\n            IPeggedTokenBridgeV2(_bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\\n            IPeggedTokenBridgeV2(_bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridge, 0);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"sgn-v2-contracts/contracts/message/messagebus/MessageBusSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../safeguard/Ownable.sol\\\";\\nimport \\\"../../interfaces/ISigsVerifier.sol\\\";\\n\\ncontract MessageBusSender is Ownable {\\n    ISigsVerifier public immutable sigsVerifier;\\n\\n    uint256 public feeBase;\\n    uint256 public feePerByte;\\n    mapping(address => uint256) public withdrawnFees;\\n\\n    event Message(address indexed sender, address receiver, uint256 dstChainId, bytes message, uint256 fee);\\n\\n    event MessageWithTransfer(\\n        address indexed sender,\\n        address receiver,\\n        uint256 dstChainId,\\n        address bridge,\\n        bytes32 srcTransferId,\\n        bytes message,\\n        uint256 fee\\n    );\\n\\n    event FeeBaseUpdated(uint256 feeBase);\\n    event FeePerByteUpdated(uint256 feePerByte);\\n\\n    constructor(ISigsVerifier _sigsVerifier) {\\n        sigsVerifier = _sigsVerifier;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n        emit Message(msg.sender, _receiver, _dstChainId, _message, msg.value);\\n    }\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n        // SGN needs to verify\\n        // 1. msg.sender matches sender of the src transfer\\n        // 2. dstChainId matches dstChainId of the src transfer\\n        // 3. bridge is either liquidity bridge, peg src vault, or peg dst bridge\\n        emit MessageWithTransfer(msg.sender, _receiver, _dstChainId, _srcBridge, _srcTransferId, _message, msg.value);\\n    }\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"withdrawFee\\\"));\\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _account, _cumulativeFee), _sigs, _signers, _powers);\\n        uint256 amount = _cumulativeFee - withdrawnFees[_account];\\n        require(amount > 0, \\\"No new amount to withdraw\\\");\\n        withdrawnFees[_account] = _cumulativeFee;\\n        (bool sent, ) = _account.call{value: amount, gas: 50000}(\\\"\\\");\\n        require(sent, \\\"failed to withdraw fee\\\");\\n    }\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) public view returns (uint256) {\\n        return feeBase + _message.length * feePerByte;\\n    }\\n\\n    // -------------------- Admin --------------------\\n\\n    function setFeePerByte(uint256 _fee) external onlyOwner {\\n        feePerByte = _fee;\\n        emit FeePerByteUpdated(feePerByte);\\n    }\\n\\n    function setFeeBase(uint256 _fee) external onlyOwner {\\n        feeBase = _fee;\\n        emit FeeBaseUpdated(feeBase);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIFRetrievableStakeWeight.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IIFRetrievableStakeWeight {\\n    function getTotalStakeWeight(uint24 trackId, uint80 timestamp)\\n        external\\n        view\\n        returns (uint192);\\n\\n    function getUserStakeWeight(\\n        uint24 trackId,\\n        address user,\\n        uint80 timestamp\\n    ) external view returns (uint192);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIFBridgableStakeWeight.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IIFBridgableStakeWeight {\\n    enum BridgeType {\\n        UserWeight,\\n        TotalWeight\\n    }\\n\\n    struct MessageRequest {\\n        // user address\\n        address[] users;\\n        // timestamp value\\n        uint80 timestamp;\\n        // bridge type\\n        BridgeType bridgeType;\\n        // track number\\n        uint24 trackId;\\n        // amount of weight at timestamp\\n        uint192[] weights;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"sgn-v2-contracts/contracts/interfaces/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"sgn-v2-contracts/contracts/interfaces/IOriginalTokenVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"sgn-v2-contracts/contracts/interfaces/IOriginalTokenVaultV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"sgn-v2-contracts/contracts/interfaces/IPeggedTokenBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"sgn-v2-contracts/contracts/interfaces/IPeggedTokenBridgeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\\n    function burnFrom(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"sgn-v2-contracts/contracts/message/interfaces/IMessageBus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../libraries/MsgDataTypes.sol\\\";\\n\\ninterface IMessageBus {\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\"\r\n    },\r\n    \"sgn-v2-contracts/contracts/safeguard/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"sgn-v2-contracts/contracts/interfaces/ISigsVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ActiveRollOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddTrack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"AddTrackCheckpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"AddUserCheckpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newCount\",\"type\":\"uint32\"}],\"name\":\"BumpSaleCounter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"DisableTrack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"srcTrackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"dstTrackId\",\"type\":\"uint24\"}],\"name\":\"SyncTotalWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"srcTrackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"dstTrackId\",\"type\":\"uint24\"}],\"name\":\"SyncUserWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"activeRollOver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract ERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_weightAccrualRate\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"_passiveRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_activeRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint104\",\"name\":\"_maxTotalStake\",\"type\":\"uint104\"}],\"name\":\"addTrack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"bumpSaleCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"disableTrack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getBatchStakeWeightByTrackId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"stakeWeight\",\"type\":\"uint192\"}],\"internalType\":\"struct IFAllocationMaster.AddressStakeWeight[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"getTotalStakeWeight\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"getUserStakeWeight\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasEmergencyWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"numTrackStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"}],\"name\":\"syncTotalWeight\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"}],\"name\":\"syncUserWeight\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackActiveRollOvers\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackCheckpointCounts\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"trackCheckpoints\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint104\",\"name\":\"totalStaked\",\"type\":\"uint104\"},{\"internalType\":\"uint192\",\"name\":\"totalStakeWeight\",\"type\":\"uint192\"},{\"internalType\":\"uint24\",\"name\":\"numFinishedSales\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trackCount\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackFinishedSaleTimestamps\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackMaxStakes\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trackStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackTotalActiveRollOvers\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tracks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract ERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"weightAccrualRate\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"passiveRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"activeRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint104\",\"name\":\"maxTotalStake\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCheckpointCounts\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"userCheckpoints\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint104\",\"name\":\"staked\",\"type\":\"uint104\"},{\"internalType\":\"uint192\",\"name\":\"stakeWeight\",\"type\":\"uint192\"},{\"internalType\":\"uint24\",\"name\":\"numFinishedSales\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IFAllocationMaster", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}