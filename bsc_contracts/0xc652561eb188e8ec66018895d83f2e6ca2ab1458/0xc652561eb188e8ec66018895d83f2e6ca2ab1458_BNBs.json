{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint256);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address _spender, uint256 _value) external;\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenRepo {\r\n    address private token;\r\n    address private currency;\r\n    address private lpAddress;\r\n    ISwapRouter private swapRouter;\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap() {\r\n        require(!inSwap, \"locked\");\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier onlyMaster() {\r\n        require(msg.sender == token, \"forbidden\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address Router,\r\n        address Currency,\r\n        address LpAddress\r\n    ) {\r\n        token = msg.sender;\r\n        currency = Currency;\r\n        lpAddress = LpAddress;\r\n        swapRouter = ISwapRouter(Router);\r\n\r\n        IERC20(currency).approve(Router, ~uint256(0));\r\n    }\r\n\r\n    function swapToken(uint256 abcAmount) external lockTheSwap onlyMaster {\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = currency;\r\n\r\n        swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            abcAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLP() external lockTheSwap onlyMaster {\r\n        uint256 cAmount = IERC20(currency).balanceOf(address(this));\r\n        cAmount = random(cAmount) * (10**14);\r\n        if (cAmount > IERC20(currency).balanceOf(address(this))) return;\r\n\r\n        uint256 tAmount = (IERC20(token).balanceOf(address(this)) / (10**16)) *\r\n            (10**16);\r\n        if (tAmount == 0) return;\r\n\r\n        swapRouter.addLiquidity(\r\n            currency,\r\n            token,\r\n            cAmount,\r\n            tAmount,\r\n            0,\r\n            0,\r\n            lpAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function random(uint256 cAmount) internal view returns (uint256 randNum) {\r\n        randNum =\r\n            ((\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            block.timestamp * cAmount,\r\n                            cAmount,\r\n                            lpAddress\r\n                        )\r\n                    )\r\n                )\r\n            ) % 1292) +\r\n            5;\r\n    }\r\n\r\n    function tokenApprove() external {\r\n        require(msg.sender == token || msg.sender == lpAddress);\r\n        IERC20(token).approve(address(swapRouter), ~uint256(0));\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract BNBs is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    address private fundAddress;\r\n    ISwapRouter private _swapRouter;\r\n    ISwapFactory private _swapFactory;\r\n    TokenRepo private _tokenRepo;\r\n    address public currency;\r\n\r\n    mapping(address => bool) private _swapPairList;\r\n    mapping(address => bool) private _feeList;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    address public _mainPair;\r\n    address private _erc1967;\r\n\r\n    uint256 private initialPrice;\r\n\r\n    uint256 private tokenSwapForFund = 160_000_000 * 10**18;\r\n    uint256 private tokenSwapForRepo = 120_000_000 * 10**18;\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    address[] public swapPath;\r\n\r\n    constructor(\r\n        address Router,\r\n        address Currency,\r\n        address LpAddress,\r\n        address BurnAddress,\r\n        address FundAddress,\r\n        address Erc1967\r\n    ) {\r\n        _name = \"BNBs\";\r\n        _symbol = \"BNBs\";\r\n        _decimals = 18;\r\n        _tTotal = 1_000_000_000_000 * 10**18;\r\n\r\n        fundAddress = FundAddress;\r\n        _swapRouter = ISwapRouter(Router);\r\n        _owner = msg.sender;\r\n\r\n        currency = Currency;\r\n        swapPath = [address(this), Currency];\r\n\r\n        IERC20(currency).approve(Router, MAX);\r\n        _allowances[address(this)][Router] = MAX;\r\n\r\n        _swapFactory = ISwapFactory(_swapRouter.factory());\r\n\r\n        _erc1967 = Erc1967;\r\n\r\n        _balances[LpAddress] = (_tTotal * 10) / 100;\r\n        emit Transfer(address(0), LpAddress, (_tTotal * 10) / 100);\r\n        _balances[BurnAddress] = (_tTotal * 90) / 100;\r\n        emit Transfer(address(0), BurnAddress, (_tTotal * 90) / 100);\r\n\r\n        _tokenRepo = new TokenRepo(Router, Currency, LpAddress);\r\n\r\n        _feeList[LpAddress] = true;\r\n        _feeList[fundAddress] = true;\r\n        _feeList[address(this)] = true;\r\n        _feeList[address(_swapRouter)] = true;\r\n        _feeList[address(_tokenRepo)] = true;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override {\r\n        _approve(msg.sender, spender, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(balanceOf(from) >= amount, \"balanceNotEnough\");\r\n        require(from != _erc1967 && to != _erc1967, \"erc1967\");\r\n        if (amount <= 0) return;\r\n\r\n        if (\r\n            _mainPair == address(0) &&\r\n            _swapFactory.getPair(currency, address(this)) != address(0)\r\n        ) {\r\n            _mainPair = _swapFactory.getPair(currency, address(this));\r\n            _swapPairList[_mainPair] = true;\r\n        }\r\n\r\n        bool takeFee;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeList[from] && !_feeList[to]) {\r\n                if (0 == startTradeBlock) {\r\n                    require(0 < startAddLPBlock && _swapPairList[to], \"!startAddLP\");\r\n                }\r\n                if (block.number < startTradeBlock + 10) {\r\n                    _balances[from] = _balances[from] - amount;\r\n                    _takeTransfer(from, fundAddress, amount);\r\n                    return;\r\n                }\r\n\r\n                if (_swapPairList[to]) {\r\n                    if (!inSwap) {\r\n                        uint256 tokenSwapFund = calculateSwapToken(tokenSwapForFund);\r\n                        uint256 tokenSwapRepo = calculateSwapToken(tokenSwapForRepo);\r\n\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n                        if (contractTokenBalance > tokenSwapFund) {\r\n                            swapTokenForFund(\r\n                                (contractTokenBalance / (10**16)) * (10**16)\r\n                            );\r\n                        }\r\n\r\n                        _tokenRepo.addLP();\r\n                        uint256 repoTokenBalance = balanceOf(\r\n                            address(_tokenRepo)\r\n                        );\r\n                        if (repoTokenBalance > tokenSwapRepo) {\r\n                            _tokenRepo.swapToken(\r\n                                ((repoTokenBalance / (10**16)) * (10**16)) / 2\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                takeFee = true;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 fundFees = (tAmount * 2) / 100;\r\n            uint256 repoFees = (tAmount * 1) / 100;\r\n\r\n            feeAmount = fundFees + repoFees;\r\n\r\n            _takeTransfer(sender, address(this), fundFees);\r\n            _takeTransfer(sender, address(_tokenRepo), repoFees);\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    event Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 value\r\n    );\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (tokenAmount > 0) {\r\n            try\r\n                _swapRouter\r\n                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                        tokenAmount,\r\n                        0,\r\n                        swapPath,\r\n                        fundAddress,\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    0\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    uint256 private startTradeBlock;\r\n    uint256 private startAddLPBlock;\r\n\r\n    function startAddLP() external onlyOwner {\r\n        require(0 == startAddLPBlock, \"startedAddLP\");\r\n        startAddLPBlock = block.number;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function setFeeList(address[] calldata addr, bool enable)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _feeList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function tokenApprove() external onlyOwner {\r\n        _tokenRepo.tokenApprove();\r\n    }\r\n\r\n    function tokenPrice() internal view returns (uint256 price) {\r\n        uint256 tokenOfPair = balanceOf(_mainPair);\r\n        uint256 usdtOfPair = IERC20(currency).balanceOf(_mainPair);\r\n        if (tokenOfPair > 0 && usdtOfPair > 0) {\r\n            price = (usdtOfPair * (10**18)) / tokenOfPair;\r\n        }\r\n    }\r\n\r\n    function calculateSwapToken(uint256 tokenSwap) internal view returns (uint256) {\r\n        if (initialPrice == 0) return tokenSwap;\r\n        uint256 multiple = tokenPrice() / initialPrice;\r\n        if (multiple > 1000) {\r\n            return tokenSwap / 16;\r\n        } else if (multiple > 100) {\r\n            return tokenSwap / 8;\r\n        } else if (multiple > 50) {\r\n            return tokenSwap / 4;\r\n        } else if (multiple > 10) {\r\n            return tokenSwap / 2;\r\n        }\r\n        return tokenSwap;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BurnAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"FundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Erc1967\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BNBs", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000eca7b63c05f847f2bc6ea7ee47df28ddad4f31630000000000000000000000008200b05881bb0f666f63bfb19d48c27debb9ac9e000000000000000000000000b2946c204bf5f680d002da260f02cde25a852d810000000000000000000000000ed943ce24baebf257488771759f9bf482c39706", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://646b8cd00580fe259f1a60bd344ac756b338be0c919f19e720ee22ef33245877"}