{"SourceCode": "/**\r\n * @dev Interface of the ERC-165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC-721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\r\n     *   {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the address zero.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC-721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC-721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\r\n     * reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC-20 standard as defined in the ERC.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n\r\ncontract NftStakingNodeKnight{\r\n   \r\n   \r\n    uint256 private constant MONTH = 30 days;\r\n    uint256 public minimumStakingPeriod=15 days;\r\n    uint256 public apy=20;\r\n    uint256 public perNftReward;\r\n    uint256 public noofDays=30;\r\n    uint256 public totalItemsStaked;\r\n    uint256 public totalSupply;\r\n\r\n    IERC721 immutable public nft;\r\n    IERC20 immutable public token;\r\n\r\n    address public owner;\r\n\r\n    struct Stake {\r\n        address owner;\r\n        uint64 stakedAt;\r\n        uint256 firstStakeTime;\r\n    }\r\n\r\n   \r\n    mapping(uint256 => Stake) vault;\r\n    mapping(uint256=> uint256) public earnedReward;\r\n\r\n    event ItemsStaked(uint256[] tokenId, address owner);\r\n    event ItemsUnstaked(uint256[] tokenIds, address owner);\r\n    event Claimed(address owner, uint256 reward);\r\n\r\n\r\n    error NFTStakingVault__ItemAlreadyStaked();\r\n    error NFTStakingVault__NotItemOwner();\r\n\r\n    constructor(address _nftAddress, address _tokenAddress,uint256 _perNftReward,uint256 _totalSupply) {\r\n        nft = IERC721(_nftAddress);\r\n        token = IERC20(_tokenAddress);\r\n        perNftReward=_perNftReward;\r\n        owner=msg.sender;\r\n        totalSupply=_totalSupply;\r\n    }\r\n\r\n   \r\n    function stake(uint256[] calldata tokenIds) external {\r\n        uint256 stakedCount = tokenIds.length;\r\n\r\n        for (uint256 i; i < stakedCount; ) {\r\n            uint256 tokenId = tokenIds[i];\r\n            if (vault[tokenId].owner != address(0)) {\r\n                revert NFTStakingVault__ItemAlreadyStaked();\r\n            }\r\n            if (nft.ownerOf(tokenId) != msg.sender) {\r\n                revert NFTStakingVault__NotItemOwner();\r\n            }\r\n\r\n            nft.safeTransferFrom(msg.sender, address(this), tokenId);\r\n            vault[tokenId] = Stake(msg.sender, uint64(block.timestamp),block.timestamp);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        totalItemsStaked = totalItemsStaked + stakedCount;\r\n\r\n       \r\n        emit ItemsStaked(tokenIds, msg.sender);\r\n    }\r\n\r\n   \r\n    function unstake(uint256[] calldata tokenIds) external {\r\n        _claim(msg.sender, tokenIds, true);\r\n    }\r\n\r\n    \r\n    function claim(uint256[] calldata tokenIds) external {\r\n        _claim(msg.sender, tokenIds, false);\r\n    }\r\n\r\n    \r\n    function _claim(\r\n        address user,\r\n        uint256[] calldata tokenIds,\r\n        bool unstakeAll\r\n    ) internal {\r\n        \r\n        uint256 tokenId;\r\n        uint256 rewardEarned;\r\n        uint256 len = tokenIds.length;\r\n\r\n        for (uint256 i; i < len; ) {\r\n            tokenId = tokenIds[i];\r\n            if (vault[tokenId].owner != user) {\r\n                revert NFTStakingVault__NotItemOwner();\r\n            }\r\n            uint256 _stakedAt = uint256(vault[tokenId].stakedAt);\r\n\r\n            uint256 stakingPeriod = block.timestamp - _stakedAt;\r\n            uint256 _dailyReward = _calculateReward();\r\n            earnedReward[tokenId]+=(_dailyReward * stakingPeriod * 1e18)/ 1 days ;\r\n            rewardEarned += (_dailyReward * stakingPeriod * 1e18)/ 1 days ;\r\n            vault[tokenId].stakedAt = uint64(block.timestamp);\r\n           \r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        if (rewardEarned != 0) {\r\n            IERC20(token).transfer(user, rewardEarned);\r\n            emit Claimed(user, rewardEarned);\r\n           \r\n        }\r\n\r\n        if (unstakeAll) {\r\n            uint256 _stakedAt = uint256(vault[tokenId].firstStakeTime);\r\n            require( block.timestamp >= _stakedAt+minimumStakingPeriod,'Minimum Staking Period not completed');\r\n            _unstake(user, tokenIds);\r\n        }\r\n    }\r\n\r\n   \r\n    function _unstake(address user, uint256[] calldata tokenIds) internal {\r\n        uint256 unstakedCount = tokenIds.length;\r\n        for (uint256 i; i < unstakedCount; ) {\r\n            uint256 tokenId = tokenIds[i];\r\n            require(vault[tokenId].owner == user, \"Not Owner\");\r\n            earnedReward[tokenId]=0;\r\n            delete vault[tokenId];\r\n            nft.safeTransferFrom(address(this), user, tokenId);\r\n            \r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        totalItemsStaked = totalItemsStaked - unstakedCount;\r\n       \r\n\r\n        emit ItemsUnstaked(tokenIds, user);\r\n    }\r\n\r\n   \r\n    function _calculateReward(\r\n     \r\n    ) public  view returns (uint256 dailyReward) {\r\n       \r\n            uint256 reward = (apy*perNftReward)/100;\r\n            dailyReward=reward/noofDays;\r\n       \r\n    }\r\n\r\n\r\n\r\n    function getEarnedReward( uint256 tokenid) public view returns(uint256){\r\n        return earnedReward[tokenid];\r\n    }\r\n\r\n  \r\n    function getTotalRewardEarned(\r\n        address user\r\n    ) external view returns (uint256 rewardEarned) {\r\n        uint256[] memory tokens = tokensOfOwner(user);\r\n\r\n        uint256 len = tokens.length;\r\n        for (uint256 i; i < len; ) {\r\n            uint256 _stakedAt = uint256(vault[tokens[i]].stakedAt);\r\n            uint256 stakingPeriod = block.timestamp - _stakedAt;\r\n            uint256 _dailyReward = _calculateReward();\r\n            rewardEarned += (_dailyReward * stakingPeriod * 1e18)/ 1 days;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n  \r\n    function getRewardEarnedPerNft(\r\n        uint256 _tokenId\r\n    ) external view returns (uint256 rewardEarned) {\r\n        uint256 _stakedAt = uint256(vault[_tokenId].stakedAt);\r\n        uint256 stakingPeriod = block.timestamp - _stakedAt;\r\n        uint256 _dailyReward = _calculateReward();\r\n        rewardEarned = (_dailyReward * stakingPeriod * 1e18)/ 1 days ;\r\n    }\r\n\r\n    \r\n    function balanceOf(\r\n        address user\r\n    ) public view returns (uint256 nftStakedbalance) {\r\n        uint256 supply = totalSupply;\r\n        unchecked {\r\n            for (uint256 i; i <= supply; ++i) {\r\n                if (vault[i].owner == user) {\r\n                    nftStakedbalance += 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n  \r\n    function tokensOfOwner(\r\n        address user\r\n    ) public view returns (uint256[] memory tokens) {\r\n        uint256 balance = balanceOf(user);\r\n        if (balance == 0) return tokens;\r\n        uint256 supply = 75;\r\n        tokens = new uint256[](balance);\r\n\r\n        uint256 counter;\r\n        unchecked {\r\n            for (uint256 i; i <= supply; ++i) {\r\n                if (vault[i].owner == user) {\r\n                    tokens[counter] = i;\r\n                    counter++;\r\n                    if (counter == balance) return tokens;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function rescueNft(uint256 _tokenid) public onlyOwner{\r\n        nft.transferFrom(address(this), owner, _tokenid);\r\n    }\r\n\r\n    function updateMinimumStakingDays(uint256 _minimumStakingPeriod) public onlyOwner{ \r\n        minimumStakingPeriod=_minimumStakingPeriod;\r\n    }\r\n\r\n    function changeApy(uint256 _apy) public onlyOwner{\r\n        apy=_apy;\r\n    }\r\n\r\n    function changePerNftReward(uint256 _perNftReward) public onlyOwner{\r\n        perNftReward=_perNftReward;\r\n    }\r\n\r\n    function changeOwner( address _owner) public onlyOwner{\r\n        owner=_owner;\r\n    }\r\n\r\n    function updateNoOfDays(uint256 _noofdays) public onlyOwner{\r\n        noofDays=_noofdays;\r\n    }\r\n\r\n    function changeTotalSupply(uint256 _totalSupply) public onlyOwner{\r\n        totalSupply=_totalSupply;\r\n    }\r\n\r\n    function getFirstStake(uint256 tokenid) public view returns(uint256){\r\n        return vault[tokenid].firstStakeTime;\r\n    }\r\n\r\n\r\n    function onERC721Received(\r\n        address /**operator*/,\r\n        address /**from*/,\r\n        uint256 /**amount*/,\r\n        bytes calldata //data\r\n    ) external pure returns (bytes4) {\r\n        return IERC721Receiver(0x7F495E679f4EC7DCD1D1e0e1dD3f6Ec967c8e99F).onERC721Received.selector;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,'You are not the owner');\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_perNftReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NFTStakingVault__ItemAlreadyStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTStakingVault__NotItemOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ItemsStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ItemsUnstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dailyReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftStakedbalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"changeApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perNftReward\",\"type\":\"uint256\"}],\"name\":\"changePerNftReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"changeTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getEarnedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getFirstStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardEarnedPerNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalRewardEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noofDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perNftReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"rescueNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalItemsStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStakingPeriod\",\"type\":\"uint256\"}],\"name\":\"updateMinimumStakingDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noofdays\",\"type\":\"uint256\"}],\"name\":\"updateNoOfDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NftStakingNodeKnight", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007f495e679f4ec7dcd1d1e0e1dd3f6ec967c8e99f000000000000000000000000bc6378faae98fb2207bb6c35c0f8ce5846fd4c6c0000000000000000000000000000000000000000000000000000000000009c400000000000000000000000000000000000000000000000000000000000000113", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d342315f661e46b142f30be1870126c6c080e2fa6ae5177388056e88fd9aba2"}