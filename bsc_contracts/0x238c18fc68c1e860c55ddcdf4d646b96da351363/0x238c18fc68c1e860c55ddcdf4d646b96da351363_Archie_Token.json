{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IARC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract Archie_Token is Context, IARC20 {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) public _balances;\r\n     \r\n  \r\n\r\n\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public _isExcluded;\r\n\r\n\r\n\r\n    IUniswapV2Router02 public  uniswapV2Router;\r\n    address public  uniswapV2Pair;\r\n    address public marketingwallet;\r\n\r\n\r\n    uint256 public transfermarketingFee = 2000000000; //2 %\r\n    uint256 public sellmarketingFee = 5000000000;  //5 %\r\n    uint256 public buymarketingFee = 5000000000;    //5 %\r\n\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n  \r\n\r\n\r\n\r\n    uint256 public transferliquidityFee = 2000000000;   //2 %\r\n    uint256 public buyliquidityFee=5000000000;  //5 %\r\n    uint256 public sellliquidityFee=5000000000;  //5 %\r\n\r\n    uint256 public numTokensSellToAddToLiquidity = 50000  * 10**9;\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled;\r\n    \r\n       modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n struct transactionDetailData {\r\n        uint256 amount;\r\n        uint256 timeStamp;\r\n        bool isLocked;\r\n        uint256 lockedTime;\r\n        uint256 lockPeriod;\r\n    }\r\n        mapping (address => transactionDetailData) private transactionData;\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n\r\n       address public owner;\r\n    \r\n       uint256 public totalmarketingTax;\r\n      \r\n\r\n    \r\n    event Excluded(address account);\r\n    event included(address account);\r\n    event MarketingTaxPercnetUpdate(uint256 marketingBuyTax,uint256 marketingselltax,uint256 marketingtransfertax);\r\n    event LiquidityTaxPercnetUpdate(uint256 LiquidityBuyTax,uint256 Liquidityselltax,uint256 Liquiditytransfertax);\r\n    event MarketingAddressUpdate(address marketingAddress);\r\n    event NumTokenSellToAddToLiquidityPercentageAndMaxwalletAmount(uint256 _numTokensSellToAddToLiquidityPercentage);\r\n    event AutomatedMarketMakerPairsUpdate(address newPair);\r\n    event LockAccount(address account, bool enabled, uint256 lockPeriod);\r\n    event UnlockAccount(address account, bool enabled);\r\n    event boolswapAndLiquifyEnabled(bool _state);\r\n     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n\r\n\r\n\r\n\r\n    constructor (address _marketingWallet)  {\r\n        _name = 'Archie Token';\r\n        _symbol = 'ARCHIE';\r\n        _decimals = 9;\r\n        _totalSupply = 1000000000e9;\r\n        _isExcluded[msg.sender]=true;\r\n        _isExcluded[address(this)]=true;\r\n        _isExcluded[uniswapV2Pair]=true;\r\n\r\n        marketingwallet=_marketingWallet;\r\n\r\n      \r\n       \r\n\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        automatedMarketMakerPairs[uniswapV2Pair] = true;   \r\n        owner=msg.sender;\r\n        _balances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n        emit Excluded(msg.sender);\r\n        emit Excluded(address(this));\r\n        emit Excluded(uniswapV2Pair);\r\n\r\n        \r\n    }\r\n\r\n     modifier onlyOwner() {\r\n        require(msg.sender==owner, \"Only Call by Owner\");\r\n        _;\r\n    }\r\n     \r\n    \r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ARC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ARC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ARC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ARC20: transfer to the zero address\");\r\n        \r\n         if(transactionData[sender].isLocked && block.timestamp >= transactionData[sender].lockedTime + transactionData[sender].lockPeriod) {\r\n           transactionData[sender].isLocked = false;\r\n           transactionData[sender].lockPeriod = 0;\r\n           transactionData[sender].lockedTime = 0;\r\n       } \r\n\r\n       if (transactionData[sender].isLocked && block.timestamp < transactionData[sender].lockedTime + transactionData[sender].lockPeriod) {\r\n           require(!transactionData[sender].isLocked, \"Locked Account can not transfer\");\r\n       }\r\n        _beforeTokenTransfer(sender, recipient, amount);  \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        \r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            sender != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            //add liquidity\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n\r\n         if(sender==owner && recipient == uniswapV2Pair  ){\r\n        _balances[sender] = _balances[sender].sub(amount, \"ARC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\t\r\n       \r\n\r\n        }    \r\n\r\n         else if(sender==owner){\r\n        _balances[sender] = _balances[sender].sub(amount, \"ARC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n////////////////////////////////////////////////////////////////////////        \r\n                    // Selling limits\r\n// ////////////////////////////////////////////////////////////////////\r\n        else if (recipient == uniswapV2Pair || automatedMarketMakerPairs[recipient] ){\r\n  \r\n    \r\n\r\n        if(_isExcluded[sender]==false ){\r\n\r\n\t\r\n                 _balances[sender] = _balances[sender].sub(amount, \"ARC20: sell amount exceeds balance 1\");\r\n\r\n                _balances[address(this)] = _balances[address(this)].add(calculatesellliquidityFee(amount));\r\n                _balances[address(this)]=_balances[address(this)].add(calculatesellmarketingFee(amount));\r\n               totalmarketingTax=totalmarketingTax.add(calculatesellmarketingFee(amount));\r\n\r\n                 uint256 remaining=amount.sub((calculatesellliquidityFee(amount).add(calculatesellmarketingFee(amount))));\r\n                _balances[recipient] = _balances[recipient].add(remaining);\r\n\t\r\n        \r\n        }\r\n\r\n        else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ARC20: selling amount exceeds balance 2\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n\r\n\t\t\t}\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////// \r\n                              // Buying Condition\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        else if(sender== uniswapV2Pair || automatedMarketMakerPairs[recipient]) {\r\n\r\n\r\n        if(_isExcluded[recipient]==false ){\r\n \r\n                 _balances[sender] = _balances[sender].sub(amount, \"ARC20: buy amount exceeds balance 1\");\r\n                 _balances[address(this)] = _balances[address(this)].add(calculatebuyliquidityFee(amount));\r\n                _balances[address(this)]=_balances[address(this)].add(calculatebuymarketingFee(amount));\r\n               totalmarketingTax=totalmarketingTax.add(calculatesellmarketingFee(amount));\r\n                 uint256 remaining=amount.sub((calculatebuyliquidityFee(amount).add(calculatebuymarketingFee(amount))));\r\n                _balances[recipient] = _balances[recipient].add(remaining);\r\n        }\r\n\r\n        else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ARC20: buy amount exceeds balance 3\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n          \r\n        }\r\n            \r\n\r\n        }\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // exclude receiver\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////// \r\nelse if(_isExcluded[recipient]==true )\r\n       {\r\n           _balances[sender] = _balances[sender].sub(amount, \"ARC20: simple transfer amount exceeds balance 3\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n       }\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n                                // simple transfer\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n       else if(_isExcluded[sender]==false ){\r\n       \t\t\t \r\n\t\t\t\r\n\t\t\t\t\r\n                 _balances[sender] = _balances[sender].sub(amount, \"ARC20: transfer amount exceeds balance 1\");\r\n                 _balances[address(this)] = _balances[address(this)].add(calculatetransferliquidityFee(amount));\r\n                _balances[address(this)]=_balances[address(this)].add(calculatetransfermarketingFee(amount));\r\n               totalmarketingTax=totalmarketingTax.add(calculatesellmarketingFee(amount));\r\n                 uint256 remaining=amount.sub((calculatetransferliquidityFee(amount).add(calculatetransfermarketingFee(amount))));\r\n                _balances[recipient] = _balances[recipient].add(remaining);\r\n\t\r\n\r\n             \r\n       }\r\n// ///////////////////////////////////////////////////////////////////////////////////\r\n                            // tranfer for excluded accounts\r\n//////////////////////////////////////////////////////////////////////////////////////\r\n       else if(_isExcluded[sender]==true )\r\n       {\r\n           _balances[sender] = _balances[sender].sub(amount, \"ARC20: simple transfer amount exceeds balance 3\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n       }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    function _approve(address _owner, address spender, uint256 amount) internal virtual {\r\n        require(_owner != address(0), \"ARC20: approve from the zero address\");\r\n        require(spender != address(0), \"ARC20: approve to the zero address\");\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n      function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ARC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ARC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function addpairaddress(address _pair) public onlyOwner{\r\n        uniswapV2Pair=_pair;\r\n       emit AutomatedMarketMakerPairsUpdate(_pair);\r\n    }\r\n        \r\n    function transferownership(address _newonwer) public onlyOwner{\r\n        owner=_newonwer;\r\n        emit OwnershipTransferred(owner, _newonwer);\r\n    }\r\n\r\n \r\n\r\n    function ExcludefromLimits(address _addr) public onlyOwner{\r\n        _isExcluded[_addr]=true;\r\n        emit Excluded(_addr);\r\n\r\n    }\r\n\r\n      function includeinLimits(address _addr) public onlyOwner{\r\n        _isExcluded[_addr]=false;\r\n        emit included(_addr);\r\n\r\n    }\r\n\r\n  \r\n\r\n     function setLiquidityFeePercent(uint256 _transferliquidityFee,uint256 _buyliquidityFee,uint256 _sellliquidityFee) external onlyOwner() {\r\n         require(buymarketingFee+_buyliquidityFee<=10000000000,\"Can't set more than 10%\");\r\n         require(sellmarketingFee+_sellliquidityFee<=10000000000,\"Can't set more than 10%\");\r\n        transferliquidityFee = _transferliquidityFee;\r\n        buyliquidityFee=_buyliquidityFee;\r\n        sellliquidityFee=_sellliquidityFee;\r\n      emit LiquidityTaxPercnetUpdate(_buyliquidityFee,_sellliquidityFee,_transferliquidityFee);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function calculatebuyliquidityFee(uint256 _amount) public view returns (uint256) {\r\n        return (_amount.mul(buyliquidityFee).div(\r\n            10**2\r\n        )).div(1e9);\r\n    }\r\n\r\n     function calculatesellliquidityFee(uint256 _amount) public view returns (uint256) {\r\n        return (_amount.mul(sellliquidityFee).div(\r\n            10**2\r\n        )).div(1e9);\r\n    }\r\n\r\n    function calculatetransferliquidityFee(uint256 _amount) public view returns (uint256) {\r\n        return (_amount.mul(transferliquidityFee).div(\r\n            10**2\r\n        )).div(1e9);\r\n    }\r\n\r\n    function setMarketingfeepercent(uint256 _transfermarketingFee,uint256  _sellmarketingFee,uint256  _buymarketingFee) external onlyOwner{\r\n        require(buyliquidityFee+_buymarketingFee<=10000000000,\"Can't set more than 10%\");\r\n         require(sellliquidityFee+_sellmarketingFee<=10000000000,\"Can't set more than 10%\");\r\n        transfermarketingFee=_transfermarketingFee;\r\n        sellmarketingFee=_sellmarketingFee;\r\n        buymarketingFee=_buymarketingFee;\r\n        emit MarketingTaxPercnetUpdate(_buymarketingFee,_sellmarketingFee,_transfermarketingFee);\r\n    }\r\n\r\n    function calculatetransfermarketingFee(uint256 _amount) public view returns (uint256) {\r\n        return (_amount.mul(transfermarketingFee).div(\r\n            10**2\r\n        )).div(1e9);\r\n    }\r\n\r\n    function calculatesellmarketingFee(uint256 _amount) public view returns (uint256) {\r\n        return (_amount.mul(sellmarketingFee).div(\r\n            10**2\r\n        )).div(1e9);\r\n    }\r\n\r\n    function calculatebuymarketingFee(uint256 _amount) public view returns (uint256) {\r\n        return (_amount.mul(buymarketingFee).div(\r\n            10**2\r\n        )).div(1e9);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n       function setAutomatedMarketMakerPairs(address newPair) external onlyOwner() {\r\n       automatedMarketMakerPairs[newPair] = true;\r\n    emit AutomatedMarketMakerPairsUpdate(newPair);\r\n\r\n       \r\n       }\r\n\r\n    function setnumTokensSellToAddToLiquidity(uint256 _numTokensSellToAddToLiquidity) external onlyOwner() {\r\n        numTokensSellToAddToLiquidity = _numTokensSellToAddToLiquidity;\r\n        emit NumTokenSellToAddToLiquidityPercentageAndMaxwalletAmount(_numTokensSellToAddToLiquidity);\r\n\r\n\r\n    }\r\n\r\n\r\n    function setmarketingwallet (address _newmarketingwallet) external onlyOwner{\r\n        marketingwallet=_newmarketingwallet;\r\n        emit MarketingAddressUpdate(_newmarketingwallet);\r\n    }\r\n\r\n       function lockAccount(address account, uint256 lockPeriod) external onlyOwner() {\r\n        transactionData[account].isLocked = true;\r\n        transactionData[account].lockedTime = block.timestamp;\r\n        transactionData[account].lockPeriod = lockPeriod * 86400;\r\n        emit LockAccount(account, true, lockPeriod);\r\n    }\r\n\r\n    function unLockAccount(address account) external onlyOwner() {\r\n        transactionData[account].isLocked = false;\r\n        transactionData[account].lockedTime = 0;\r\n        transactionData[account].lockPeriod = 0;\r\n        emit UnlockAccount(account, false);\r\n    }\r\n    \r\n\r\n\r\n    function setswapAndLiquifyEnabled(bool _swapAndLiquifyEnabled) external onlyOwner{\r\n        swapAndLiquifyEnabled=_swapAndLiquifyEnabled;\r\n       emit boolswapAndLiquifyEnabled(_swapAndLiquifyEnabled);\r\n    }\r\n\r\n     function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 swapforMarket=totalmarketingTax;\r\n        // split the contract balance into halves\r\n        contractTokenBalance= contractTokenBalance.sub(totalmarketingTax);\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForEth(swapforMarket);\r\n        payable(marketingwallet).transfer(address(this).balance);\r\n        totalmarketingTax=0;\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n        \r\n     \r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n  \r\n\r\n     function burn(uint256 amount) public  {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n  \r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n      receive() external payable{\r\n  // your code here\u2026\r\n} \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"AutomatedMarketMakerPairsUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Excluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LiquidityBuyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Liquidityselltax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Liquiditytransfertax\",\"type\":\"uint256\"}],\"name\":\"LiquidityTaxPercnetUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"LockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"MarketingAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingBuyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingselltax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingtransfertax\",\"type\":\"uint256\"}],\"name\":\"MarketingTaxPercnetUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numTokensSellToAddToLiquidityPercentage\",\"type\":\"uint256\"}],\"name\":\"NumTokenSellToAddToLiquidityPercentageAndMaxwalletAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UnlockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"boolswapAndLiquifyEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"included\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ExcludefromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addpairaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buymarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatebuyliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatebuymarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatesellliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatesellmarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatetransferliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatetransfermarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"includeinLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"lockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingwallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellmarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"setAutomatedMarketMakerPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferliquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyliquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellliquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transfermarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellmarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buymarketingFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingfeepercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newmarketingwallet\",\"type\":\"address\"}],\"name\":\"setmarketingwallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokensSellToAddToLiquidity\",\"type\":\"uint256\"}],\"name\":\"setnumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapAndLiquifyEnabled\",\"type\":\"bool\"}],\"name\":\"setswapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalmarketingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfermarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newonwer\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unLockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Archie_Token", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a6832d7e1d1f2d23effe816819f16917e9c146a5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://413dce47430e013613d0d0b2351fe7ee60b3b56623ab707b3cf1c8a9bf657820"}