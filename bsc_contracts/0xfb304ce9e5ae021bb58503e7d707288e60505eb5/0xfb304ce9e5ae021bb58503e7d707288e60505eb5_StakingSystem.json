{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/stakingsystem.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n \\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Staking System (SS)\\r\\n * @author Erick Rivera\\r\\n * @notice Implements custom staking with ERC20 token and reward distribution.\\r\\n */\\r\\ncontract StakingSystem {\\r\\n\\r\\n    /**\\r\\n     * @notice Struct to store stake information\\r\\n     */\\r\\n    struct Stake {\\r\\n        uint256 since;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice We require to know who are all the stakeholders.\\r\\n     */\\r\\n    address[] internal stakeholders;\\r\\n\\r\\n    /**\\r\\n     * @notice The stakes for each stakeholder.\\r\\n     */\\r\\n    mapping(address => Stake[]) internal stakes;\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum amount of tokens to stake\\r\\n     */\\r\\n    uint256 public minAmountForStake =  0.0001 ether;  \\r\\n    /**\\r\\n     * @notice The token Interface \\r\\n     */\\r\\n    IERC20 private TOKEN;\\r\\n\\r\\n    /**\\r\\n     * @notice The constructor for the Staking System.\\r\\n     *\\r\\n     */\\r\\n    constructor(address tokenAddress) {\\r\\n        TOKEN = IERC20(tokenAddress);\\r\\n   }\\r\\n   error notenougherror();\\r\\n\\r\\n    // ---------- STAKES ----------\\r\\n\\r\\n    /**\\r\\n     * @notice A method for a stakeholder to create a stake.\\r\\n     * @param _stake The size of the stake to be created.\\r\\n     */\\r\\n    function createStake(uint256 _stake) public {\\r\\n        if(!(_stake >= minAmountForStake)){\\r\\n            revert notenougherror();\\r\\n        } \\r\\n\\r\\n        (bool isSh, ) = isStakeholder(msg.sender);\\r\\n        if ( isSh == false){\\r\\n            addStakeholder(msg.sender);\\r\\n        } \\r\\n\\r\\n        TOKEN.transferFrom(msg.sender, address(this), _stake);\\r\\n        stakes[msg.sender].push(Stake(block.timestamp, _stake));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A method for a stakeholder to remove a stake.\\r\\n     * @param _stake The size of the stake to be removed.\\r\\n     */\\r\\n    function removeStake(uint256 _stake) public {\\r\\n        // require( stakeOf(msg.sender) >= _stake, \\\"Not enough stake to remove\\\");\\r\\n        if(!(stakeOf(msg.sender) >= _stake)){\\r\\n            revert notenougherror();\\r\\n        }\\r\\n        // Calculate and distribute reward\\r\\n        uint256 reward = calculateReward(msg.sender, _stake);\\r\\n        int256 _StakesToRemove = int(_stake);\\r\\n        for (uint256 i = stakes[msg.sender].length-1; i >= 0; i--) {\\r\\n            int256 thisDifference = int(stakes[msg.sender][i].amount) - int(_StakesToRemove);\\r\\n            if(thisDifference > 0 ){\\r\\n                stakes[msg.sender][i].amount = uint(int(stakes[msg.sender][i].amount) - _StakesToRemove);\\r\\n                _StakesToRemove = 0;\\r\\n                break;\\r\\n            } else if (thisDifference == 0){\\r\\n                stakes[msg.sender][i].amount = uint(int(stakes[msg.sender][i].amount) - _StakesToRemove);\\r\\n                _StakesToRemove = 0;\\r\\n                stakes[msg.sender][i] = stakes[msg.sender][stakes[msg.sender].length - 1];\\r\\n                stakes[msg.sender].pop();\\r\\n                break;\\r\\n            } else if (thisDifference < 0){\\r\\n                int256 amount = int(stakes[msg.sender][i].amount);\\r\\n                stakes[msg.sender][i].amount = 0;\\r\\n                stakes[msg.sender][i] = stakes[msg.sender][stakes[msg.sender].length - 1];\\r\\n                stakes[msg.sender].pop();\\r\\n                _StakesToRemove = _StakesToRemove - amount;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        TOKEN.transfer(msg.sender, _stake + reward);\\r\\n        if (stakeOf(msg.sender) == 0) removeStakeholder(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A method to retrieve the stake for a stakeholder.\\r\\n     * @param _stakeholder The stakeholder to retrieve the stake for.\\r\\n     * @return uint256 The amount of wei staked.\\r\\n     */\\r\\n    function stakeOf(address _stakeholder) public view returns (uint256) {\\r\\n        uint256 _totalStakesOf = 0;\\r\\n        uint256 length = stakes[_stakeholder].length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            _totalStakesOf = _totalStakesOf + stakes[_stakeholder][i].amount;\\r\\n        }\\r\\n        return _totalStakesOf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A method to the aggregated stakes from all stakeholders.\\r\\n     * @return uint256 The aggregated stakes from all stakeholders.\\r\\n     */\\r\\n    function totalStakes() public view returns (uint256) {\\r\\n        uint256 _totalStakes = 0;\\r\\n        uint256 stakeholderLength = stakeholders.length;\\r\\n\\r\\n        for (uint256 s = 0; s < stakeholderLength; s += 1) {\\r\\n            uint256 stakesLength = stakes[stakeholders[s]].length;\\r\\n            for (uint256 i = 0; i < stakesLength; i++) {\\r\\n                _totalStakes = _totalStakes + stakes[stakeholders[s]][i].amount;\\r\\n            }\\r\\n        }\\r\\n        return _totalStakes;\\r\\n    }\\r\\n\\r\\n    // ---------- STAKEHOLDERS ----------\\r\\n\\r\\n    /**\\r\\n     * @notice A method to check if an address is a stakeholder.\\r\\n     * @param _address The address to verify.\\r\\n     * @return bool, uint256 Whether the address is a stakeholder,\\r\\n     * and if so its position in the stakeholders array.\\r\\n     */\\r\\n    function isStakeholder(address _address)\\r\\n        public\\r\\n        view\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        uint256 stakeholderLength = stakeholders.length;\\r\\n        for (uint256 s = 0; s < stakeholderLength; s += 1) {\\r\\n            if (_address == stakeholders[s]) return (true, s);\\r\\n        }\\r\\n        return (false, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A method to add a stakeholder.\\r\\n     * @param _stakeholder The stakeholder to add.\\r\\n     */\\r\\n    function addStakeholder(address _stakeholder) internal {\\r\\n        (bool _isStakeholder, ) = isStakeholder(_stakeholder);\\r\\n        if (!_isStakeholder) stakeholders.push(_stakeholder);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A method to remove a stakeholder.\\r\\n     * @param _stakeholder The stakeholder to remove.\\r\\n     */\\r\\n    function removeStakeholder(address _stakeholder) internal {\\r\\n        (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);\\r\\n        if (_isStakeholder) {\\r\\n            stakeholders[s] = stakeholders[stakeholders.length - 1];\\r\\n            stakeholders.pop();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ---------- REWARDS ----------\\r\\n\\r\\n    /**\\r\\n     * @notice A method to allow a stakeholder to check his rewards.\\r\\n     * @param _stakeholder The stakeholder to check rewards for.\\r\\n     */\\r\\n    function rewardOf(address _stakeholder) public view returns (uint256) {\\r\\n        (bool isSh, ) = isStakeholder(_stakeholder);\\r\\n        if ( isSh == false){\\r\\n            return 0;\\r\\n        }\\r\\n        return calculateReward(_stakeholder, stakeOf(_stakeholder));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A method to the aggregated rewards from all stakeholders.\\r\\n     * @return uint256 The aggregated rewards from all stakeholders.\\r\\n     */\\r\\n    function totalRewards() public view returns (uint256) {\\r\\n        uint256 _totalRewards = 0;\\r\\n        uint256 stakeholderLength = stakeholders.length;\\r\\n        for (uint256 s = 0; s < stakeholderLength; s += 1) {\\r\\n            _totalRewards = _totalRewards + calculateReward(stakeholders[s], stakeOf(stakeholders[s]));\\r\\n        }\\r\\n        return _totalRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A method that calculates the rewards for each stakeholder.\\r\\n     * @param _stakeholder The stakeholder to calculate rewards for.\\r\\n     * @param _stakeToCalculate The amount of stake to calculate rewards for.\\r\\n     * @return uint256 The aggregated rewards from stakeholder's stakes.\\r\\n     */\\r\\n    function calculateReward(address _stakeholder, uint256 _stakeToCalculate)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        int256 _stakesToCalculateRewardLeft = int(_stakeToCalculate);\\r\\n        uint256 _reward = 0;\\r\\n        \\r\\n        for (uint256 i = stakes[_stakeholder].length - 1; i >= 0; i--) {\\r\\n            int256 thisDifference = int(stakes[_stakeholder][i].amount) - _stakesToCalculateRewardLeft;\\r\\n            if(thisDifference >= 0 ){\\r\\n                _reward = calculateRewardPerStake(stakes[_stakeholder][i].since, uint(_stakesToCalculateRewardLeft));\\r\\n                _stakesToCalculateRewardLeft = 0;\\r\\n                break;\\r\\n            } else if (thisDifference < 0){\\r\\n                uint256 amount = stakes[_stakeholder][i].amount;\\r\\n                _stakesToCalculateRewardLeft = _stakesToCalculateRewardLeft - int(amount);\\r\\n                _reward = calculateRewardPerStake(stakes[_stakeholder][i].since, amount);\\r\\n            }\\r\\n        }\\r\\n        return _reward;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A method that calculates the reward for each stake.\\r\\n     * @param since The date when stake was submitted.\\r\\n     * @param _stakeToCalculate The stake to calculate rewards for.\\r\\n     * @return uint256 The reward calculated.\\r\\n     */\\r\\n    function calculateRewardPerStake(uint256 since, uint256 _stakeToCalculate)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 _secondsSinceStake = uint256(int256(block.timestamp) - int256(since));\\r\\n         \\r\\n        uint256 currentPercentageRewardPerStakePerDay = ((50000000000000000000000000000000000000000 / totalStakes()) + 5) / 10;\\r\\n        if( currentPercentageRewardPerStakePerDay >= 5479452054794520){\\r\\n            return ((_stakeToCalculate * 5479452054794520 * _secondsSinceStake) / 86400000000000000000000);\\r\\n            \\r\\n        }\\r\\n        return ((_stakeToCalculate * currentPercentageRewardPerStakePerDay * _secondsSinceStake) / 86400000000000000000000);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A method that calculates the current Annual Percentage Rate.\\r\\n     * @return annualPercentageRate The Annual Percentage Rate calculated.\\r\\n     */\\r\\n    function getAPR() public view returns (uint annualPercentageRate) {\\r\\n        if (totalStakes() == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        annualPercentageRate = ((((50000000000000000000000000000000000000000/totalStakes()) + 5)/10)*365)/100;\\r\\n        if( annualPercentageRate >= 20000000000000000){\\r\\n            annualPercentageRate =  20000000000000000;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"notenougherror\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"annualPercentageRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountForStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingSystem", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000d70a9d1c9fdd3d8dd2fb672bb399f7bca61666bd", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}