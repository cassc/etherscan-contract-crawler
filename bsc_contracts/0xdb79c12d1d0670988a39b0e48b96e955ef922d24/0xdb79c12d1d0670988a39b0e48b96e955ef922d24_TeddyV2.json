{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITeddyV2 {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);   \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function totalSupply() external view returns (uint256);   \r\n    function balanceOf(address account) external view returns (uint256);   \r\n    function transfer(address to, uint256 amount) external returns (bool);   \r\n    function allowance(address owner, address spender) external view returns (uint256);   \r\n    function approve(address spender, uint256 amount) external returns (bool);   \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IPancakeSwapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeSwapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n\r\ncontract TeddyV2 is ITeddyV2 {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    IPancakeSwapV2Router01 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    address private _owner;\r\n    address public MarketAddress;\r\n    bool public TaxEnable;\r\n    address[] public WhiteLists; \r\n    mapping(address => bool) private WhiteList;\r\n    mapping(address => bool) private Pair;\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _name = \"Teddy Doge V2\";\r\n        _symbol = \"Teddy V2\";\r\n        _owner = address(0xaF6ABCE1D592FfEaF7dA56217586D9d61c24be4f);\r\n        MarketAddress = address(0x2359b522eC4B328D12662E7321F5AF44b4aE9b4b);\r\n        _mint(_owner, 1285199693195170 * 1e18);\r\n        IPancakeSwapV2Router01 _uniswapV2Router = IPancakeSwapV2Router01(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Pair = IPancakeSwapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        Pair[address(uniswapV2Pair)] = true;\r\n        _approve(_owner, address(uniswapV2Router), type(uint256).max);\r\n    }\r\n\r\n    function addPair(address _pair) external onlyOwner {\r\n        Pair[_pair] = !Pair[_pair];\r\n    }\r\n\r\n    function switchTaxEnable() external onlyOwner {\r\n        TaxEnable = !TaxEnable;\r\n    }\r\n\r\n    function addWhiteList(address account) external onlyOwner{\r\n        WhiteList[account] = !WhiteList[account];\r\n        WhiteLists.push(account);\r\n    }\r\n\r\n    function getWhiteList() external view returns(address[] memory, bool[] memory) {\r\n        address[] memory _whiteList = new address[](WhiteLists.length);\r\n        bool[] memory _whiteListEnable = new bool[](WhiteLists.length);\r\n        for (uint i = 0; i < WhiteLists.length; i++) {\r\n            _whiteList[i] = WhiteLists[i];\r\n            _whiteListEnable[i] = WhiteList[WhiteLists[i]];\r\n        }\r\n        return (_whiteList, _whiteListEnable);\r\n    }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        address oldOwner = _owner;\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(oldOwner, _owner);\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address from, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[from][spender];\r\n    }\r\n   \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address from = _msgSender();\r\n        _approve(from, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n         address from = _msgSender();\r\n        if ( !TaxEnable ) { \r\n            _transfer(from, to, amount);\r\n            return true;\r\n        }\r\n\r\n        if ( WhiteList[_msgSender()] || WhiteList[to]) { \r\n            _transfer(from, to, amount);\r\n            return true;\r\n        }\r\n\r\n        if ( Pair[_msgSender()] || Pair[to]) { \r\n            _burn(_msgSender(), amount * 3 / 100 );\r\n            amount = amount * 97 / 100;\r\n        }\r\n\r\n        _transfer(from, to, amount);\r\n        return true;\r\n\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        if ( !TaxEnable ) { \r\n            \r\n            _spendAllowance(from, spender, amount);\r\n            _transfer(from, to, amount);\r\n            return true;\r\n        }\r\n\r\n        if ( WhiteList[from] ) { \r\n        \r\n            _spendAllowance(from, spender, amount);\r\n            _transfer(from, to, amount);\r\n            return true;\r\n        }\r\n\r\n        if (Pair[to]) {\r\n            \r\n            _spendAllowance(from, spender, amount);\r\n            _transfer(from, MarketAddress, amount * 3 / 100 );\r\n            _transfer(from, to, amount * 97 / 100);\r\n            return true;\r\n        }\r\n\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address from = _msgSender();\r\n        _approve(from, spender, allowance(from, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address from = _msgSender();\r\n        uint256 currentAllowance = allowance(from, spender);\r\n        require(currentAllowance >= subtractedValue, \"TeddyV2: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(from, spender, currentAllowance - subtractedValue);\r\n        }\r\n       return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"TeddyV2: transfer from the zero address\");\r\n        require(to != address(0), \"TeddyV2: transfer to the zero address\");\r\n       uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"TeddyV2: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n       emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"TeddyV2: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"TeddyV2: burn from the zero address\");\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"TeddyV2: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n       emit Transfer(account, address(0), amount);\r\n       \r\n    }\r\n\r\n    function _approve(\r\n        address from,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"TeddyV2: approve from the zero address\");\r\n        require(spender != address(0), \"TeddyV2: approve to the zero address\");\r\n       _allowances[from][spender] = amount;\r\n        emit Approval(from, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address from,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(from, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"TeddyV2: insufficient allowance\");\r\n            unchecked {\r\n                _approve(from, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        _spendAllowance(account, _msgSender(), amount);\r\n        _burn(account, amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MarketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TaxEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WhiteLists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhiteList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchTaxEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TeddyV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0fbd2e0e6cb8d7c86f5ff823c5de267ffba29333567307e9a0e35a300100f9e0"}