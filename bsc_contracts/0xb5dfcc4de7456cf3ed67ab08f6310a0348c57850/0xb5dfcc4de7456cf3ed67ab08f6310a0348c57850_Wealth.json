{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wealth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/**\\r\\n * @dev Add Pancake Router and Pancake Pair interfaces\\r\\n * \\r\\n * from https://github.com/pancakeswap/pancake-swap-periphery/blob/master/contracts/interfaces/IPancakeRouter01.sol\\r\\n */\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n// from https://github.com/pancakeswap/pancake-swap-periphery/blob/master/contracts/interfaces/IPancakeRouter02.sol\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// from https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/interfaces/IPancakeFactory.sol\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n// from https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/interfaces/IPancakePair.sol\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    \\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\r\\n * now has built in overflow checking.\\r\\n * \\r\\n * from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n * \\r\\n * from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev BEP20 Token interface\\r\\n */\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     * \\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     * \\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     * \\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     * \\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     * \\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     * \\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * \\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     * \\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     * \\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n     event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n    address private _previousOwner;\\r\\n\\r\\n    /**\\r\\n     * @dev Provides information about the current execution context, including the\\r\\n     * sender of the transaction and its data. While these are generally available\\r\\n     * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n     * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n     * paying for execution may not be the actual sender (as far as an application\\r\\n     * is concerned).\\r\\n     */\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _owner = _msgSender();\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n}\\r\\n\\r\\ncontract Wealth is IBEP20, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n  using Address for address;\\r\\n\\r\\n  IBEP20 token;\\r\\n  mapping(address => uint256) private _rBalances;\\r\\n  mapping(address => uint256) private _tBalances;\\r\\n  mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n  mapping(address => bool) private _isExcludedFromFee;\\r\\n  mapping(address => bool) private _isExcluded;\\r\\n  address[] private _excluded;\\r\\n\\r\\n  string private constant _name = \\\"Wealth Protocol\\\";\\r\\n  string private constant _symbol = \\\"WEALTH\\\";\\r\\n  uint8 private constant _decimals = 9;\\r\\n  uint256 private constant _tTotalSupply = 2000000000000 * 10 ** 9; \\r\\n  uint256 private _buyMaxTxAmount = 1500000000 * 10 ** 9; \\r\\n  uint256 private _sellMaxTxAmount = 1500000000 * 10 ** 9;\\r\\n\\r\\n  uint256 private _buyTaxFee = 0;\\r\\n  uint256 private _buyLiquidityFee = 3;\\r\\n  uint256 private _buyMarketingFee = 6;\\r\\n  uint256 private _buyBurnFee = 0;\\r\\n  \\r\\n  uint256 private _sellTaxFee = 0;\\r\\n  uint256 private _sellLiquidityFee = 3;\\r\\n  uint256 private _sellMarketingFee = 6;\\r\\n  uint256 private _sellBurnFee = 0;\\r\\n\\r\\n  uint256 private numTokensSellToAddToLiquidity = 7500000000 * 10 ** 9; \\r\\n  uint256 private constant MAX = ~uint256(0); \\r\\n\\r\\n  uint256 private _rTotalSupply;\\r\\n  uint256 private _maxTxAmount;\\r\\n  \\r\\n  uint256 private _taxFee;\\r\\n  uint256 private _previousTaxFee;\\r\\n  \\r\\n  uint256 private _liquidityFee;\\r\\n  uint256 private _previousLiquidityFee;\\r\\n  \\r\\n  uint256 private _marketingFee;\\r\\n  uint256 private _previousMarketingFee;\\r\\n\\r\\n  uint256 private _burnFee;\\r\\n  uint256 private _previousBurnFee;\\r\\n\\r\\n  uint256 private _tFeeTotal;\\r\\n  uint256 private _tMarketingTotal;\\r\\n  uint256 private _tBurnTotal;\\r\\n  \\r\\n  bool private inSwapAndLiquify;\\r\\n  bool public swapAndLiquifyEnabled = true;\\r\\n  \\r\\n  event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n\\r\\n  // wallet for marketing\\r\\n  address payable public marketingWallet = payable(0x5Dc66639C87cDE4417eeD21Bd21272A2e8B96aA6);\\r\\n\\r\\n  // wallet for burn\\r\\n  address payable public burnWallet = payable( 0x0000000000000000000000000000000000000000);\\r\\n  \\r\\n  // Mainnet BSC - PancakeSwap Router V2\\r\\n  address private constant _pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\r\\n  \\r\\n  // Testnet BSC - PancakeSwap Router V2\\r\\n  // address private constant _pancakeRouterAddress = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1;\\r\\n\\r\\n  // Mainnet, Ropsten and etc ETH - Uniswap V2\\r\\n  //address private constant _pancakeRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n\\r\\n  IPancakeRouter02 public immutable pancakeRouter;\\r\\n  address public immutable pancakePair;\\r\\n\\r\\n  // structs to reflect transfers and fees\\r\\n  struct tValues {\\r\\n      uint256 tTransferAmount;\\r\\n      uint256 tFee;\\r\\n      uint256 tLiquidity;\\r\\n      uint256 tMarketingFee;\\r\\n      uint256 tBurnFee;\\r\\n  }\\r\\n  // structs for transfers and fees\\r\\n  struct rValues {\\r\\n      uint256 rAmount;\\r\\n      uint256 rTransferAmount;\\r\\n      uint256 rFee;\\r\\n      uint256 rLiquidity;\\r\\n      uint256 rMarketingFee;\\r\\n      uint256 rBurnFee;\\r\\n  }\\r\\n\\r\\n  constructor(address tokenOwner) {\\r\\n      // set utility variables\\r\\n      _maxTxAmount = _buyMaxTxAmount;\\r\\n      \\r\\n      _taxFee = _buyTaxFee;\\r\\n      _previousTaxFee = _taxFee;\\r\\n      \\r\\n      _liquidityFee = _buyLiquidityFee;\\r\\n      _previousLiquidityFee = _liquidityFee;\\r\\n      \\r\\n      _marketingFee = _buyMarketingFee;\\r\\n      _previousMarketingFee = _marketingFee;\\r\\n\\r\\n      _burnFee = _buyBurnFee;\\r\\n      _previousBurnFee = _burnFee;\\r\\n      \\r\\n      // set reflect total supply\\r\\n      _rTotalSupply = (MAX - (MAX % _tTotalSupply));\\r\\n      _rBalances[_msgSender()] = _rTotalSupply;\\r\\n      \\r\\n      transferOwnership(tokenOwner);\\r\\n      //token = IBEP20(address(this));\\r\\n      \\r\\n      initialTransfer(_msgSender(), tokenOwner , _tTotalSupply);\\r\\n      \\r\\n      IPancakeRouter02 _pancakeRouter = IPancakeRouter02(_pancakeRouterAddress);\\r\\n      // Create a pancake pair for this new token\\r\\n      pancakePair = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\\r\\n      // set the rest of the contract variables\\r\\n      pancakeRouter = _pancakeRouter;\\r\\n\\r\\n      // exclude owner, this contract and marketing wallet from fee\\r\\n      _isExcludedFromFee[owner()] = true;\\r\\n      _isExcludedFromFee[address(this)] = true;\\r\\n      _isExcludedFromFee[marketingWallet] =  true;\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  modifier lockTheSwap {\\r\\n      inSwapAndLiquify = true;\\r\\n      _;\\r\\n      inSwapAndLiquify = false;\\r\\n  }\\r\\n\\r\\n  function name() public pure returns (string memory) {\\r\\n      return _name;\\r\\n  }\\r\\n\\r\\n  function symbol() public pure returns (string memory) {\\r\\n      return _symbol;\\r\\n  }\\r\\n\\r\\n  function decimals() public pure returns (uint8) {\\r\\n      return _decimals;\\r\\n  }\\r\\n\\r\\n  function totalSupply() public pure override returns (uint256) {\\r\\n      return _tTotalSupply;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) public view override returns (uint256) {\\r\\n      if (_isExcluded[account]) return _tBalances[account];\\r\\n      return tokenFromReflection(_rBalances[account]);\\r\\n  }    \\r\\n\\r\\n  function getOwner() public view returns (address) {\\r\\n      return owner();\\r\\n  }\\r\\n\\r\\n  function numTokensSellToAddToLiquidityAmount() public view returns (uint256) {\\r\\n      return numTokensSellToAddToLiquidity;\\r\\n  }    \\r\\n\\r\\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n      _transfer(_msgSender(), recipient, amount);\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n      _transfer(sender, recipient, amount);\\r\\n      _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n      _approve(_msgSender(), spender, amount);\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n      return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  function getSellReflectionFee() public view returns (uint256) {\\r\\n      return _sellTaxFee;\\r\\n  }\\r\\n  \\r\\n  function getBuyReflectionFee() public view returns (uint256) {\\r\\n      return _buyTaxFee;\\r\\n  }\\r\\n\\r\\n  function getSellLiquidityFee() public view returns (uint256) {\\r\\n      return _sellLiquidityFee;\\r\\n  }\\r\\n  \\r\\n  function getBuyLiquidityFee() public view returns (uint256) {\\r\\n      return _buyLiquidityFee;\\r\\n  }\\r\\n\\r\\n  function getSellMarketingFee() public view returns (uint256) {\\r\\n      return _sellMarketingFee;\\r\\n  }\\r\\n  \\r\\n  function getBuyMarketingFee() public view returns (uint256) {\\r\\n      return _buyMarketingFee;\\r\\n  }\\r\\n\\r\\n  function getSellBurnFee() public view returns (uint256) {\\r\\n      return _sellBurnFee;\\r\\n  }\\r\\n  \\r\\n  function getBuyBurnFee() public view returns (uint256) {\\r\\n      return _buyBurnFee;\\r\\n  }\\r\\n\\r\\n  function excludeFromFee(address account) public onlyOwner {\\r\\n      _isExcludedFromFee[account] = true;\\r\\n  }\\r\\n\\r\\n  function includeInFee(address account) public onlyOwner {\\r\\n      _isExcludedFromFee[account] = false;\\r\\n  }\\r\\n\\r\\n  function isExcludedFromFee(address account) public view returns(bool) {\\r\\n      return _isExcludedFromFee[account];\\r\\n  }\\r\\n\\r\\n  function excludeFromReward(address account) public onlyOwner() {\\r\\n      require(account != marketingWallet, 'We can not exclude developer and marketing wallet.');\\r\\n      require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n      require(account != burnWallet, 'We can not exclude burn address.');\\r\\n      if (_rBalances[account] > 0) {\\r\\n          _tBalances[account] = tokenFromReflection(_rBalances[account]);\\r\\n      }\\r\\n      _isExcluded[account] = true;\\r\\n      _excluded.push(account);\\r\\n  }\\r\\n\\r\\n  function includeInReward(address account) external onlyOwner() {\\r\\n      require(_isExcluded[account], \\\"Account is not excluded\\\");\\r\\n      for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n          if (_excluded[i] == account) {\\r\\n              _excluded[i] = _excluded[_excluded.length - 1];\\r\\n              _tBalances[account] = 0;\\r\\n              _isExcluded[account] = false;\\r\\n              _excluded.pop();\\r\\n              break;\\r\\n          }\\r\\n      }\\r\\n  }\\r\\n\\r\\n  function isExcludedFromReward(address account) public view returns (bool) {\\r\\n      return _isExcluded[account];\\r\\n  }\\r\\n  \\r\\n  function setBuyTaxFeePercent(uint256 taxFee) external onlyOwner() {\\r\\n      _buyTaxFee = taxFee;\\r\\n  }\\r\\n  \\r\\n  function setSellTaxFeePercent(uint256 taxFee) external onlyOwner() {\\r\\n      _sellTaxFee = taxFee;\\r\\n  }\\r\\n  \\r\\n  function setBuyLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\\r\\n      _buyLiquidityFee = liquidityFee;\\r\\n  }\\r\\n  \\r\\n  function setSellLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\\r\\n      _sellLiquidityFee = liquidityFee;\\r\\n  }\\r\\n  \\r\\n  function setBuyMarketingFeePercent(uint256 marketingFee) external onlyOwner() {\\r\\n      _buyMarketingFee = marketingFee;\\r\\n  }\\r\\n  \\r\\n  function setSellMarketingFeePercent(uint256 marketingFee) external onlyOwner() {\\r\\n      _sellMarketingFee = marketingFee;\\r\\n  }\\r\\n\\r\\n  function setBuyMaxTxAmount(uint256 buyMaxTxAmount) external onlyOwner() {\\r\\n      _buyMaxTxAmount = buyMaxTxAmount;\\r\\n  }\\r\\n\\r\\n  function setSellMaxTxAmount(uint256 sellMaxTxAmount) external onlyOwner() {\\r\\n      _sellMaxTxAmount = sellMaxTxAmount;\\r\\n  }    \\r\\n  \\r\\n  function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\r\\n      swapAndLiquifyEnabled = _enabled;\\r\\n      emit SwapAndLiquifyEnabledUpdated(_enabled);\\r\\n  }\\r\\n\\r\\n  function setNumTokensSellToAddToLiquidity(uint256 _numTokensSellToAddToLiquidity) external onlyOwner() {\\r\\n      numTokensSellToAddToLiquidity = _numTokensSellToAddToLiquidity;\\r\\n  }\\r\\n  \\r\\n  function transferTokens(address recepient, uint256 amount) public onlyOwner{\\r\\n      require(balanceOf(address(this)) >= amount, \\\"Passing greater amount than allowed\\\");\\r\\n      token.transfer(recepient, amount);\\r\\n  }\\r\\n\\r\\n  function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\\r\\n      require(tAmount <= _tTotalSupply, \\\"Amount must be less than supply\\\");\\r\\n      if (!deductTransferFee) {\\r\\n          (rValues memory _rv, tValues memory _tv) = _getValues(tAmount); \\r\\n          _tv.tTransferAmount = 0; _tv.tFee = 0; _tv.tLiquidity = 0; _tv.tMarketingFee = 0;\\r\\n          _rv.rTransferAmount = 0; _rv.rFee = 0; _rv.rLiquidity = 0; _rv.rMarketingFee = 0;\\r\\n          return _rv.rAmount;\\r\\n      } else {\\r\\n          (rValues memory _rv, tValues memory _tv) = _getValues(tAmount); \\r\\n          _tv.tTransferAmount = 0; _tv.tFee = 0; _tv.tLiquidity = 0; _tv.tMarketingFee = 0;\\r\\n          _rv.rTransferAmount = 0; _rv.rFee = 0; _rv.rLiquidity = 0; _rv.rMarketingFee = 0;\\r\\n          return _rv.rTransferAmount;\\r\\n      }\\r\\n  }\\r\\n\\r\\n  function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\\r\\n      require(rAmount <= _rTotalSupply, \\\"Amount must be less than total reflections\\\");\\r\\n      return rAmount.div(_getRate());\\r\\n  }\\r\\n\\r\\n  function _transfer(address from, address to, uint256 amount) private {\\r\\n      require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n      require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n      require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n      \\r\\n  \\r\\n      if (from != owner() && to != owner()) {\\r\\n          // set _maxTxAmount to buy or sell action\\r\\n          if (from == pancakePair) { // Buy\\r\\n              _maxTxAmount = _buyMaxTxAmount;\\r\\n          } else if (to == pancakePair) { // Sell\\r\\n              _maxTxAmount = _sellMaxTxAmount;\\r\\n          } else { // other\\r\\n              _maxTxAmount = _buyMaxTxAmount;\\r\\n          }\\r\\n\\r\\n          require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\r\\n      }\\r\\n\\r\\n      uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n      bool overMinimumTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\\r\\n      if (overMinimumTokenBalance && !inSwapAndLiquify && from != pancakePair && swapAndLiquifyEnabled) {\\r\\n          contractTokenBalance = numTokensSellToAddToLiquidity;\\r\\n          // add liquidity\\r\\n          swapAndLiquify(contractTokenBalance);\\r\\n      }\\r\\n\\r\\n      // indicates if fee should be deducted from transfer\\r\\n      bool takeFee = true;\\r\\n\\r\\n      // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n      if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n          takeFee = false;\\r\\n      } else {\\r\\n          // set _taxFee and _liquidityFee to buy or sell action\\r\\n          if (from == pancakePair) { // Buy\\r\\n              _taxFee = _buyTaxFee;\\r\\n              _liquidityFee = _buyLiquidityFee;\\r\\n              _marketingFee = _buyMarketingFee;\\r\\n              _burnFee = _buyBurnFee;\\r\\n          } else if (to == pancakePair) { // Sell\\r\\n              _taxFee = _sellTaxFee;\\r\\n              _liquidityFee = _sellLiquidityFee;\\r\\n              _marketingFee = _sellMarketingFee;\\r\\n              _burnFee = _sellBurnFee;\\r\\n          } else { // other\\r\\n              _taxFee = _buyTaxFee;\\r\\n              _liquidityFee = _buyLiquidityFee;\\r\\n              _marketingFee = _buyMarketingFee;\\r\\n              _burnFee = _buyBurnFee;\\r\\n          }\\r\\n      }\\r\\n\\r\\n      _tokenTransfer(from, to, amount, takeFee);\\r\\n  }\\r\\n\\r\\n  function _approve(address owner, address spender, uint256 amount) private {\\r\\n      require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n      require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n      _allowances[owner][spender] = amount;\\r\\n      emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  function _getValues(uint256 tAmount) private view returns (rValues memory, tValues memory) {\\r\\n      tValues memory _tv = _getTValues(tAmount);\\r\\n      rValues memory _rv = _getRValues(tAmount, _tv.tFee, _tv.tLiquidity, _tv.tMarketingFee,  _tv.tBurnFee, _getRate());\\r\\n      return (_rv, _tv);\\r\\n  }\\r\\n\\r\\n  function _getTValues(uint256 tAmount) private view returns (tValues memory) {\\r\\n      tValues memory _tv;\\r\\n      _tv.tFee = calculateTaxFee(tAmount);\\r\\n      _tv.tLiquidity = calculateLiquidityFee(tAmount);\\r\\n      _tv.tMarketingFee = calculateMarketingFee(tAmount);\\r\\n      _tv.tBurnFee = calculateBurnFee(tAmount);\\r\\n      _tv.tTransferAmount = tAmount.sub(_tv.tFee).sub(_tv.tLiquidity).sub(_tv.tMarketingFee).sub(_tv.tBurnFee);\\r\\n      return (_tv);\\r\\n  }\\r\\n\\r\\n  function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketingFee, uint256 tBurnFee, uint256 currentRate) private pure returns (rValues memory) {\\r\\n      rValues memory _rv;\\r\\n      _rv.rAmount = tAmount.mul(currentRate);\\r\\n      _rv.rFee = tFee.mul(currentRate);\\r\\n      _rv.rLiquidity = tLiquidity.mul(currentRate);\\r\\n      _rv.rMarketingFee = tMarketingFee.mul(currentRate);\\r\\n      _rv.rBurnFee = tBurnFee.mul(currentRate);\\r\\n      _rv.rTransferAmount = _rv.rAmount.sub(_rv.rFee).sub(_rv.rLiquidity).sub(_rv.rMarketingFee).sub(_rv.rBurnFee);\\r\\n      return (_rv);\\r\\n  }\\r\\n\\r\\n  function _getRate() private view returns (uint256) {\\r\\n      (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n      return rSupply.div(tSupply);\\r\\n  }\\r\\n\\r\\n  function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n      uint256 rSupply = _rTotalSupply;\\r\\n      uint256 tSupply = _tTotalSupply;\\r\\n      for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n          if (_rBalances[_excluded[i]] > rSupply || _tBalances[_excluded[i]] > tSupply) return (_rTotalSupply, _tTotalSupply);\\r\\n          rSupply = rSupply.sub(_rBalances[_excluded[i]]);\\r\\n          tSupply = tSupply.sub(_tBalances[_excluded[i]]);\\r\\n      }\\r\\n      if (rSupply < _rTotalSupply.div(_tTotalSupply)) return (_rTotalSupply, _tTotalSupply);\\r\\n      return (rSupply, tSupply);\\r\\n  }\\r\\n\\r\\n  function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\r\\n      return _amount.mul(_taxFee).div(10**2);\\r\\n  }\\r\\n\\r\\n  function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\\r\\n      return _amount.mul(_liquidityFee).div(10**2);\\r\\n  }\\r\\n\\r\\n  function calculateMarketingFee(uint256 _amount) private view returns (uint256) {\\r\\n      return _amount.mul(_marketingFee).div(10**2);\\r\\n  }\\r\\n\\r\\n  function calculateBurnFee(uint256 _amount) private view returns (uint256) {\\r\\n      return _amount.mul(_burnFee).div(10**2);\\r\\n  }\\r\\n  \\r\\n  function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\r\\n      \\r\\n      uint256 totalFees = _buyLiquidityFee + _sellLiquidityFee + _buyMarketingFee + _sellMarketingFee;\\r\\n\\r\\n      uint256 _totalMarketingFee = _buyMarketingFee + _sellMarketingFee;\\r\\n      uint256 marketingQuota = (_totalMarketingFee.mul(contractTokenBalance)).div(totalFees);\\r\\n      uint256 contractTokenBalanceRemaining = contractTokenBalance.sub(marketingQuota);\\r\\n      // capture the contract's current ETH balance.\\r\\n      // this is so that we can capture exactly the amount of ETH that the\\r\\n      // swap creates, and not make the liquidity event include any ETH that\\r\\n      // has been manually sent to the contract\\r\\n      uint256 initialBalance = address(this).balance;     \\r\\n      swapTokensForBNB(marketingQuota); \\r\\n      transferOutBNB(marketingWallet, address(this).balance.sub(initialBalance));\\r\\n\\r\\n       // split the contract balance into halves\\r\\n      uint256 half = contractTokenBalanceRemaining.div(2);\\r\\n      uint256 otherHalf = contractTokenBalanceRemaining.sub(half);\\r\\n\\r\\n      uint256 initialBalanceAfterUtility = address(this).balance;\\r\\n      swapTokensForBNB(half);\\r\\n      uint256 newBalance = address(this).balance.sub(initialBalanceAfterUtility);\\r\\n      addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n      emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n  }\\r\\n\\r\\n  function swapTokensForBNB(uint256 tokenAmount) private {\\r\\n      // generate the pancake pair path of token -> wbnb\\r\\n      address[] memory path = new address[](2);\\r\\n      path[0] = address(this);\\r\\n      path[1] = pancakeRouter.WETH();\\r\\n\\r\\n      _approve(address(this), address(pancakeRouter), tokenAmount);\\r\\n\\r\\n      // make the swap\\r\\n      pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n          tokenAmount,\\r\\n          0, // accept any amount of BNB\\r\\n          path,\\r\\n          address(this),\\r\\n          block.timestamp\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function transferOutBNB(address payable recipient, uint256 amount) private {\\r\\n      recipient.transfer(amount);\\r\\n  }\\r\\n\\r\\n  function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\\r\\n      // approve token transfer to cover all possible scenarios\\r\\n      _approve(address(this), address(pancakeRouter), tokenAmount);\\r\\n\\r\\n      // add the liquidity\\r\\n      pancakeRouter.addLiquidityETH{value: bnbAmount}( // the return values of function not will are handled\\r\\n          address(this),\\r\\n          tokenAmount,\\r\\n          0, \\r\\n          0, \\r\\n          address(0), \\r\\n          block.timestamp\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function removeAllFee() private {\\r\\n      if (_taxFee == 0 && _liquidityFee == 0 && _marketingFee == 0 && _burnFee == 0) return;\\r\\n\\r\\n      _previousTaxFee = _taxFee;\\r\\n      _previousLiquidityFee = _liquidityFee;\\r\\n      _previousMarketingFee = _marketingFee;\\r\\n      _previousBurnFee = _burnFee;\\r\\n      \\r\\n      _taxFee = 0;\\r\\n      _liquidityFee = 0;\\r\\n      _marketingFee = 0;\\r\\n      _burnFee = 0;\\r\\n  }\\r\\n\\r\\n  function restoreAllFee() private {\\r\\n      _taxFee = _previousTaxFee;\\r\\n      _liquidityFee = _previousLiquidityFee;\\r\\n      _marketingFee = _previousMarketingFee;\\r\\n      _burnFee = _previousBurnFee;\\r\\n  }\\r\\n\\r\\n  // this method is responsible for taking all fee, if takeFee is true\\r\\n  function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\\r\\n      if (!takeFee) {\\r\\n          removeAllFee();\\r\\n      }\\r\\n\\r\\n      if (_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n          _transferFromExcluded(sender, recipient, amount);\\r\\n      } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n          _transferToExcluded(sender, recipient, amount);\\r\\n      } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n          _transferBothExcluded(sender, recipient, amount);\\r\\n      } else {\\r\\n          _transferStandard(sender, recipient, amount);\\r\\n      }\\r\\n\\r\\n      if (!takeFee) {\\r\\n          restoreAllFee();\\r\\n      }\\r\\n  }\\r\\n\\r\\n  function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\r\\n      (rValues memory _rv, tValues memory _tv) = _getValues(tAmount);\\r\\n      _rBalances[sender] = _rBalances[sender].sub(_rv.rAmount);\\r\\n      _rBalances[recipient] = _rBalances[recipient].add(_rv.rTransferAmount);\\r\\n      _takeLiquidity(_tv.tLiquidity);\\r\\n      _reflectFee(_rv.rFee, _tv.tFee);\\r\\n      emit Transfer(sender, recipient, _tv.tTransferAmount);\\r\\n      _transferBurnFee(sender, _rv.rBurnFee, _tv.tBurnFee);\\r\\n  }\\r\\n\\r\\n  function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n      (rValues memory _rv, tValues memory _tv) = _getValues(tAmount);\\r\\n      _rBalances[sender] = _rBalances[sender].sub(_rv.rAmount);\\r\\n      _tBalances[recipient] = _tBalances[recipient].add(_tv.tTransferAmount);\\r\\n      _rBalances[recipient] = _rBalances[recipient].add(_rv.rTransferAmount);\\r\\n      _takeLiquidity(_tv.tLiquidity);\\r\\n      _reflectFee(_rv.rFee, _tv.tFee);\\r\\n      emit Transfer(sender, recipient, _tv.tTransferAmount);\\r\\n      _transferBurnFee(sender, _rv.rBurnFee, _tv.tBurnFee);\\r\\n  }\\r\\n\\r\\n  function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n      (rValues memory _rv, tValues memory _tv) = _getValues(tAmount);\\r\\n      _tBalances[sender] = _tBalances[sender].sub(tAmount);\\r\\n      _rBalances[sender] = _rBalances[sender].sub(_rv.rAmount);\\r\\n      _rBalances[recipient] = _rBalances[recipient].add(_rv.rTransferAmount);\\r\\n      _takeLiquidity(_tv.tLiquidity);\\r\\n      _reflectFee(_rv.rFee, _tv.tFee);\\r\\n      emit Transfer(sender, recipient, _tv.tTransferAmount);\\r\\n      _transferBurnFee(sender, _rv.rBurnFee, _tv.tBurnFee);        \\r\\n  }\\r\\n\\r\\n  function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n      (rValues memory _rv, tValues memory _tv) = _getValues(tAmount);\\r\\n      _tBalances[sender] = _tBalances[sender].sub(tAmount);\\r\\n      _rBalances[sender] = _rBalances[sender].sub(_rv.rAmount);\\r\\n      _tBalances[recipient] = _tBalances[recipient].add(_tv.tTransferAmount);\\r\\n      _rBalances[recipient] = _rBalances[recipient].add(_rv.rTransferAmount);\\r\\n      _takeLiquidity(_tv.tLiquidity);\\r\\n      _reflectFee(_rv.rFee, _tv.tFee);\\r\\n      emit Transfer(sender, recipient, _tv.tTransferAmount);\\r\\n      _transferBurnFee(sender, _rv.rBurnFee, _tv.tBurnFee);\\r\\n      \\r\\n  }\\r\\n\\r\\n  function _takeLiquidity(uint256 tLiquidity) private {\\r\\n      uint256 rLiquidity = tLiquidity.mul(_getRate());\\r\\n      _rBalances[address(this)] = _rBalances[address(this)].add(rLiquidity);\\r\\n      if (_isExcluded[address(this)]) {\\r\\n          _tBalances[address(this)] = _tBalances[address(this)].add(tLiquidity);\\r\\n      }\\r\\n  }\\r\\n\\r\\n  function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n      _rTotalSupply = _rTotalSupply.sub(rFee);\\r\\n      _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n  }\\r\\n  \\r\\n  function _transferBurnFee(address sender, uint256 rBurnFee, uint256 tBurnFee) private {\\r\\n      if (_burnFee > 0) {\\r\\n          _rBalances[burnWallet] = _rBalances[burnWallet].add(rBurnFee);\\r\\n          emit Transfer(sender, burnWallet, tBurnFee);\\r\\n          _tBurnTotal = _tBurnTotal.add(tBurnFee); \\r\\n      }\\r\\n  }\\r\\n\\r\\n  function initialTransfer(address sender, address recipient, uint256 tAmount) private{\\r\\n      uint256 rTransferAmount = reflectionFromToken(tAmount,false);\\r\\n      _rBalances[sender] = _rBalances[sender].sub(rTransferAmount);\\r\\n      _rBalances[recipient] = _rBalances[recipient].add(rTransferAmount);   \\r\\n      emit Transfer(sender, recipient, tokenFromReflection(rTransferAmount));\\r\\n  }\\r\\n  \\r\\n  event SwapAndLiquify(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiquidity);\\r\\n  \\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"setBuyMarketingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMaxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setBuyMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokensSellToAddToLiquidity\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setSellLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"setSellMarketingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellMaxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setSellMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setSellTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Wealth", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000b75f6622f0030852945e6a4706199786847824c3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}