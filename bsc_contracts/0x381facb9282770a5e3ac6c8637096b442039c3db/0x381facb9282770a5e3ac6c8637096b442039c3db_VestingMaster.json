{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/Workspace/Mars/mars-swap/contracts/interfaces/ICore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPermissions.sol\\\";\\r\\nimport \\\"../interfaces/IXMSToken.sol\\\";\\r\\nimport \\\"../interfaces/IUSDMToken.sol\\\";\\r\\n\\r\\n/// @title Core Interface\\r\\n/// @author USDM Protocol\\r\\ninterface ICore is IPermissions {\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event XMSSupportRatioUpdate(uint256 _xmsSupportRatio);\\r\\n    event USDMUpdate(address indexed _usdm);\\r\\n    event XMSUpdate(address indexed _xms);\\r\\n    event GenesisGroupUpdate(address indexed _genesisGroup);\\r\\n    event TokenAllocation(address indexed _to, uint256 _amount);\\r\\n    event TokenApprove(address indexed _to, uint256 _amount);\\r\\n    event GenesisPeriodComplete(uint256 _timestamp);\\r\\n\\r\\n    // ----------- Governor only state changing api -----------\\r\\n\\r\\n    function setXMSSupportRatio(uint256 _xmsSupportRatio) external;\\r\\n\\r\\n    function setUSDM(address token) external;\\r\\n\\r\\n    function setXMS(address token) external;\\r\\n\\r\\n    function setGenesisGroup(address _genesisGroup) external;\\r\\n\\r\\n    function allocateXMS(address to, uint256 amount) external;\\r\\n\\r\\n    function allocateToken(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function approveXMS(address to, uint256 amount) external;\\r\\n\\r\\n    function approveToken(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function setApprovedPairAndContract(address _pair, address _contract)\\r\\n        external;\\r\\n\\r\\n    function removeApprovedPairAndContract(address _pair, address _contract)\\r\\n        external;\\r\\n\\r\\n    // ----------- Genesis Group only state changing api -----------\\r\\n\\r\\n    function completeGenesisGroup() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function getApprovedPairsLength() external view returns (uint256);\\r\\n\\r\\n    function getApprovedContractsLength(address _pair)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approvedPairs(uint256 idx) external view returns (address);\\r\\n\\r\\n    function approvedPairExisted(address pair) external view returns (bool);\\r\\n\\r\\n    function approvedContracts(address pair, uint256 idx)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function approvedContractExisted(address pair, address _contract)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function xmsSupportRatio() external view returns (uint256);\\r\\n\\r\\n    function xmsSupportRatioPrecision() external view returns (uint256);\\r\\n\\r\\n    function usdm() external view returns (IUSDMToken);\\r\\n\\r\\n    function xms() external view returns (IXMSToken);\\r\\n\\r\\n    function genesisGroup() external view returns (address);\\r\\n\\r\\n    function hasGenesisGroupCompleted() external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap/contracts/interfaces/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title Permissions interface\\r\\n/// @author USDM Protocol\\r\\ninterface IPermissions {\\r\\n    // ----------- Governor only state changing api -----------\\r\\n\\r\\n    function createRole(bytes32 role, bytes32 adminRole) external;\\r\\n\\r\\n    function grantMinter(address minter) external;\\r\\n\\r\\n    function grantBurner(address burner) external;\\r\\n\\r\\n    function grantPCVController(address pcvController) external;\\r\\n\\r\\n    function grantGovernor(address governor) external;\\r\\n\\r\\n    function grantGuardian(address guardian) external;\\r\\n\\r\\n    function revokeMinter(address minter) external;\\r\\n\\r\\n    function revokeBurner(address burner) external;\\r\\n\\r\\n    function revokePCVController(address pcvController) external;\\r\\n\\r\\n    function revokeGovernor(address governor) external;\\r\\n\\r\\n    function revokeGuardian(address guardian) external;\\r\\n\\r\\n    // ----------- Revoker only state changing api -----------\\r\\n\\r\\n    function revokeOverride(bytes32 role, address account) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function isBurner(address _address) external view returns (bool);\\r\\n\\r\\n    function isMinter(address _address) external view returns (bool);\\r\\n\\r\\n    function isGovernor(address _address) external view returns (bool);\\r\\n\\r\\n    function isGuardian(address _address) external view returns (bool);\\r\\n\\r\\n    function isPCVController(address _address) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap/contracts/interfaces/IUSDMToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IUSDMToken is IERC20 {\\r\\n    // ----------- Minter State changing api -----------\\r\\n\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    // ----------- Burner State changing api -----------\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function burn(uint256 _amount) external;\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap/contracts/interfaces/IVestingMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IVestingMaster {\\r\\n    struct LockedReward {\\r\\n        uint256 locked;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event Lock(address indexed user, uint256 amount);\\r\\n    event Claim(address indexed user, uint256 amount);\\r\\n\\r\\n    // ----------- Farms only State changing api -----------\\r\\n\\r\\n    function lock(address, uint256) external;\\r\\n\\r\\n    // ----------- state changing API -----------\\r\\n\\r\\n    function claim() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function period() external view returns (uint256);\\r\\n\\r\\n    function lockedPeriodAmount() external view returns (uint256);\\r\\n\\r\\n    function vestingToken() external view returns (IERC20);\\r\\n\\r\\n    function userLockedRewards(address account, uint256 idx)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function totalLockedRewards() external view returns (uint256);\\r\\n\\r\\n    function getVestingAmount() external view returns (uint256, uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap/contracts/interfaces/IXMSToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IXMSToken is IERC20 {\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(\\r\\n        address indexed delegator,\\r\\n        address indexed fromDelegate,\\r\\n        address indexed toDelegate\\r\\n    );\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(\\r\\n        address indexed delegate,\\r\\n        uint256 previousBalance,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    // ----------- Minter State changing api -----------\\r\\n\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function delegates(address delegator) external view returns (address);\\r\\n\\r\\n    function delegate(address delegatee) external;\\r\\n\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function getCurrentVotes(address account) external view returns (uint96);\\r\\n\\r\\n    function getPriorVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint96);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap/contracts/liquidity/VestingMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"../interfaces/IVestingMaster.sol\\\";\\r\\nimport \\\"../interfaces/ICore.sol\\\";\\r\\n\\r\\ninterface IAccessControl {\\r\\n    function hasRole(bytes32 role, address account)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\\r\\ninterface ICoreCopy is ICore, IAccessControl {}\\r\\n\\r\\nabstract contract CoreRefCopy {\\r\\n    event CoreUpdate(address indexed _core);\\r\\n    bytes32 public constant FARMS_ROLE = keccak256(\\\"FARMS_ROLE\\\");\\r\\n\\r\\n    ICoreCopy private _core;\\r\\n\\r\\n    /// @notice CoreRef constructor\\r\\n    /// @param core_ USDM Core to reference\\r\\n    constructor(address core_) {\\r\\n        _core = ICoreCopy(core_);\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernor() {\\r\\n        require(\\r\\n            _core.isGovernor(msg.sender),\\r\\n            \\\"CoreRef::onlyGovernor: Caller is not a governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyFarms() {\\r\\n        require(\\r\\n            _core.hasRole(FARMS_ROLE, msg.sender),\\r\\n            \\\"xxx::xxx: Caller is not a farms\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Set new Core reference address\\r\\n    /// @param core_ The new core address\\r\\n    function setCore(address core_) external onlyGovernor {\\r\\n        _core = ICoreCopy(core_);\\r\\n        emit CoreUpdate(core_);\\r\\n    }\\r\\n\\r\\n    /// @notice Address of the Core contract referenced\\r\\n    /// @return ICore implementation address\\r\\n    function core() public view returns (ICore) {\\r\\n        return _core;\\r\\n    }\\r\\n}\\r\\n\\r\\n// VestingMaster,\\r\\ncontract VestingMaster is IVestingMaster, ReentrancyGuard, CoreRefCopy {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // XMS token, or may be other token\\r\\n    IERC20 public override vestingToken;\\r\\n\\r\\n    mapping(address => LockedReward[]) public override userLockedRewards;\\r\\n\\r\\n    uint256 public immutable override period;\\r\\n\\r\\n    uint256 public immutable override lockedPeriodAmount;\\r\\n\\r\\n    uint256 public override totalLockedRewards;\\r\\n\\r\\n    constructor(\\r\\n        address _core,\\r\\n        uint256 _period,\\r\\n        uint256 _lockedPeriodAmount,\\r\\n        address _vestingToken\\r\\n    ) CoreRefCopy(_core) {\\r\\n        require(\\r\\n            _vestingToken != address(0),\\r\\n            \\\"VestingMaster::constructor: Zero address\\\"\\r\\n        );\\r\\n        require(_period > 0, \\\"VestingMaster::constructor: Period zero\\\");\\r\\n        require(\\r\\n            _lockedPeriodAmount > 0,\\r\\n            \\\"VestingMaster::constructor: Period amount zero\\\"\\r\\n        );\\r\\n        vestingToken = IERC20(_vestingToken);\\r\\n        period = _period;\\r\\n        lockedPeriodAmount = _lockedPeriodAmount;\\r\\n    }\\r\\n\\r\\n    function lock(address account, uint256 amount) public override onlyFarms {\\r\\n        LockedReward[] memory oldLockedRewards = userLockedRewards[account];\\r\\n        uint256 currentTimestamp = block.timestamp;\\r\\n        LockedReward memory lockedReward;\\r\\n        uint256 claimableAmount;\\r\\n        for (uint256 i = 0; i < oldLockedRewards.length; i++) {\\r\\n            lockedReward = oldLockedRewards[i];\\r\\n            if (\\r\\n                lockedReward.locked > 0 &&\\r\\n                currentTimestamp >= lockedReward.timestamp\\r\\n            ) {\\r\\n                claimableAmount = claimableAmount.add(lockedReward.locked);\\r\\n                delete oldLockedRewards[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 newStartTimestamp = (currentTimestamp / period) * period;\\r\\n        uint256 newTimestamp;\\r\\n        LockedReward memory newLockedReward;\\r\\n        uint256 jj = 0;\\r\\n        delete userLockedRewards[account];\\r\\n        if (claimableAmount > 0) {\\r\\n            userLockedRewards[account].push(\\r\\n                LockedReward({\\r\\n                    locked: claimableAmount,\\r\\n                    timestamp: newStartTimestamp\\r\\n                })\\r\\n            );\\r\\n        }\\r\\n        for (uint256 i = 0; i < lockedPeriodAmount; i++) {\\r\\n            newTimestamp = newStartTimestamp.add((i + 1) * period);\\r\\n            newLockedReward = LockedReward({\\r\\n                locked: amount / lockedPeriodAmount,\\r\\n                timestamp: newTimestamp\\r\\n            });\\r\\n            for (uint256 j = jj; j < oldLockedRewards.length; j++) {\\r\\n                lockedReward = oldLockedRewards[j];\\r\\n                if (lockedReward.timestamp == newTimestamp) {\\r\\n                    newLockedReward.locked = newLockedReward.locked.add(\\r\\n                        lockedReward.locked\\r\\n                    );\\r\\n                    jj = j + 1;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            userLockedRewards[account].push(newLockedReward);\\r\\n        }\\r\\n        totalLockedRewards = totalLockedRewards.add(amount);\\r\\n        emit Lock(account, amount);\\r\\n    }\\r\\n\\r\\n    function claim() public override {\\r\\n        LockedReward[] storage lockedRewards = userLockedRewards[msg.sender];\\r\\n        uint256 currentTimestamp = block.timestamp;\\r\\n        LockedReward memory lockedReward;\\r\\n        uint256 claimableAmount;\\r\\n        for (uint256 i = 0; i < lockedRewards.length; i++) {\\r\\n            lockedReward = lockedRewards[i];\\r\\n            if (\\r\\n                lockedReward.locked > 0 &&\\r\\n                currentTimestamp > lockedReward.timestamp\\r\\n            ) {\\r\\n                claimableAmount = claimableAmount.add(lockedReward.locked);\\r\\n                delete lockedRewards[i];\\r\\n            }\\r\\n        }\\r\\n        totalLockedRewards = totalLockedRewards.sub(claimableAmount);\\r\\n        vestingToken.safeTransfer(msg.sender, claimableAmount);\\r\\n        emit Claim(msg.sender, claimableAmount);\\r\\n    }\\r\\n\\r\\n    function getVestingAmount()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 lockedAmount, uint256 claimableAmount)\\r\\n    {\\r\\n        LockedReward[] memory lockedRewards = userLockedRewards[msg.sender];\\r\\n        uint256 currentTimestamp = block.timestamp;\\r\\n        LockedReward memory lockedReward;\\r\\n        for (uint256 i = 0; i < lockedRewards.length; i++) {\\r\\n            lockedReward = lockedRewards[i];\\r\\n            if (currentTimestamp > lockedReward.timestamp) {\\r\\n                claimableAmount = claimableAmount.add(lockedReward.locked);\\r\\n            } else {\\r\\n                lockedAmount = lockedAmount.add(lockedReward.locked);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedPeriodAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vestingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FARMS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPeriodAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLockedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VestingMaster", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000789cfb69499c65ac9a3a68fb4917c9b4fca2a7000000000000000000000000000000000000000000000000000000000003f480000000000000000000000000000000000000000000000000000000000000003b0000000000000000000000007859b01bbf675d67da8cd128a50d155cd881b576", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}