{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/syrup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n    unchecked {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        uint256 newAllowance = oldAllowance - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ninterface ISquadProfile {\\n    function createProfile(\\n        uint256 _teamId,\\n        address _nftAddress,\\n        uint256 _tokenId\\n    ) external;\\n\\n    function increaseUserPoints(\\n        address _userAddress,\\n        uint256 _numberPoints,\\n        uint256 _campaignId\\n    ) external;\\n\\n    function removeUserPoints(address _userAddress, uint256 _numberPoints) external;\\n\\n    function addNftAddress(address _nftAddress) external;\\n\\n    function addTeam(string calldata _teamName, string calldata _teamDescription) external;\\n\\n    function getUserProfile(address _userAddress)\\n    external\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256,\\n        bool\\n    );\\n\\n    function getUserStatus(address _userAddress) external view returns (bool);\\n\\n    function getTeamProfile(uint256 _teamId)\\n    external\\n    view\\n    returns (\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        bool\\n    );\\n}\\n\\ncontract SmartChefInitializable is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20Metadata;\\n\\n    // The address of the smart chef factory\\n    address public immutable SMART_CHEF_FACTORY;\\n\\n    // Whether a limit is set for users\\n    bool public userLimit;\\n\\n    // Whether it is initialized\\n    bool public isInitialized;\\n\\n    // Accrued token per share\\n    uint256 public accTokenPerShare;\\n\\n    // The block timestamp when CAKE mining ends\\n    uint256 public endTimestamp;\\n\\n    // The block timestamp when CAKE mining starts\\n    uint256 public startTimestamp;\\n\\n    // The block timestamp of the last pool update\\n    uint256 public lastRewardTimestamp;\\n\\n    // The pool limit (0 if none)\\n    uint256 public poolLimitPerUser;\\n\\n    // Seconds available for user limit (after start timestamp)\\n    uint256 public numberSecondsForUserLimit;\\n\\n    // Squad profile address\\n    address public immutable squadProfile;\\n\\n    // Squad Profile is requested\\n    bool public squadProfileIsRequested;\\n\\n    // Squad Profile points threshold\\n    uint256 public squadProfileThresholdPoints;\\n\\n    // CAKE tokens created per second\\n    uint256 public rewardPerSecond;\\n\\n    // The precision factor\\n    uint256 public PRECISION_FACTOR;\\n\\n    // The reward token\\n    IERC20Metadata public rewardToken;\\n\\n    // The staked token\\n    IERC20Metadata public stakedToken;\\n\\n    // Info of each user that stakes tokens (stakedToken)\\n    mapping(address => UserInfo) public userInfo;\\n\\n    struct UserInfo {\\n        uint256 amount; // How many staked tokens the user has provided\\n        uint256 rewardDebt;\\n    }\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event NewStartAndEndTimestamp(uint256 startTimestamp, uint256 endTimestamp);\\n    event NewRewardPerSecond(uint256 rewardPerSecond);\\n    event NewPoolLimit(uint256 poolLimitPerUser);\\n    event RewardsStop(uint256 blockNumber);\\n    event TokenRecovery(address indexed token, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event UpdateProfileAndThresholdPointsRequirement(bool isProfileRequested, uint256 thresholdPoints);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _squadProfile: Squad Profile address\\n     * @param _squadProfileIsRequested: Squad Profile is requested\\n     * @param _squadProfileThresholdPoints: Squad Profile need threshold points\\n     */\\n    constructor(\\n        address _squadProfile,\\n        bool _squadProfileIsRequested,\\n        uint256 _squadProfileThresholdPoints\\n    ) {\\n        SMART_CHEF_FACTORY = msg.sender;\\n\\n        squadProfile = _squadProfile; // It can be empty on Other chain\\n\\n        if (_squadProfile != address(0)) {\\n            ISquadProfile(_squadProfile).getTeamProfile(1);\\n\\n            // if squadProfile is requested\\n            squadProfileIsRequested = _squadProfileIsRequested;\\n\\n            // squadProfile threshold points when profile & points are requested\\n            squadProfileThresholdPoints = _squadProfileThresholdPoints;\\n        } else {\\n            squadProfileIsRequested = false;\\n            squadProfileThresholdPoints = 0;\\n        }\\n    }\\n\\n    /*\\n     * @notice Initialize the contract\\n     * @param _stakedToken: staked token address\\n     * @param _rewardToken: reward token address\\n     * @param _rewardPerSecond: reward per second (in rewardToken)\\n     * @param _startTimestamp: start block timestamp\\n     * @param _endTimestamp: end block timestamp\\n     * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\\n     * @param _numberSecondsForUserLimit: seconds available for user limit (after start timestamp)\\n     * @param _admin: admin address with ownership\\n     */\\n    function initialize(\\n        IERC20Metadata _stakedToken,\\n        IERC20Metadata _rewardToken,\\n        uint256 _rewardPerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        uint256 _poolLimitPerUser,\\n        uint256 _numberSecondsForUserLimit,\\n        address _admin\\n    ) external {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n        require(msg.sender == SMART_CHEF_FACTORY, \\\"Not factory\\\");\\n        require(_startTimestamp < _endTimestamp, \\\"New startTimestamp must be lower than new endTimestamp\\\");\\n        require(block.timestamp < _startTimestamp, \\\"New startTimestamp must be higher than current block timestamp\\\");\\n\\n        // Make this contract initialized\\n        isInitialized = true;\\n\\n        stakedToken = _stakedToken;\\n        rewardToken = _rewardToken;\\n        rewardPerSecond = _rewardPerSecond;\\n        startTimestamp = _startTimestamp;\\n        endTimestamp = _endTimestamp;\\n\\n        if (_poolLimitPerUser > 0) {\\n            userLimit = true;\\n            poolLimitPerUser = _poolLimitPerUser;\\n            numberSecondsForUserLimit = _numberSecondsForUserLimit;\\n        }\\n\\n        uint256 decimalsRewardToken = uint256(rewardToken.decimals());\\n        require(decimalsRewardToken < 30, \\\"Must be inferior to 30\\\");\\n\\n        PRECISION_FACTOR = uint256(10**(uint256(30) - decimalsRewardToken));\\n        require(PRECISION_FACTOR * rewardPerSecond / (10**decimalsRewardToken) >= 100_000_000, \\\"rewardPerSecond must be larger\\\");\\n\\n        // Set the lastRewardBlock as the startTimestamp\\n        lastRewardTimestamp = startTimestamp;\\n\\n        // Transfer ownership to the admin address who becomes owner of the contract\\n        transferOwnership(_admin);\\n    }\\n\\n    /*\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function deposit(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        if (squadProfile != address(0)) {\\n            // Checks whether the user has an active profile\\n            require(\\n                (!squadProfileIsRequested && squadProfileThresholdPoints == 0) ||\\n                ISquadProfile(squadProfile).getUserStatus(msg.sender),\\n                \\\"Deposit: Must have an active profile\\\"\\n            );\\n\\n            uint256 numberUserPoints = 0;\\n\\n            if (squadProfileThresholdPoints > 0) {\\n                require(squadProfile != address(0), \\\"Deposit: SquadProfile is not exist\\\");\\n                (, numberUserPoints, , , , ) = ISquadProfile(squadProfile).getUserProfile(msg.sender);\\n            }\\n\\n            require(\\n                squadProfileThresholdPoints == 0 || numberUserPoints >= squadProfileThresholdPoints,\\n                \\\"Deposit: User is not get enough user points\\\"\\n            );\\n        }\\n\\n        userLimit = hasUserLimit();\\n\\n        require(!userLimit || ((_amount + user.amount) <= poolLimitPerUser), \\\"Deposit: Amount above limit\\\");\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\n            if (pending > 0) {\\n                rewardToken.safeTransfer(address(msg.sender), pending);\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount + _amount;\\n            stakedToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n        }\\n\\n        user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens and collect reward tokens\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"Amount to withdraw too high\\\");\\n\\n        _updatePool();\\n\\n        uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount - _amount;\\n            stakedToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n\\n        if (pending > 0) {\\n            rewardToken.safeTransfer(address(msg.sender), pending);\\n        }\\n\\n        user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens without caring about rewards rewards\\n     * @dev Needs to be for emergency.\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 amountToTransfer = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        if (amountToTransfer > 0) {\\n            stakedToken.safeTransfer(address(msg.sender), amountToTransfer);\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender, user.amount);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner. Needs to be for emergency.\\n     */\\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\\n        rewardToken.safeTransfer(address(msg.sender), _amount);\\n    }\\n\\n    /**\\n    * @notice Allows the owner to recover tokens sent to the contract by mistake\\n     * @param _token: token address\\n     * @dev Callable by owner\\n     */\\n    function recoverToken(address _token) external onlyOwner {\\n        require(_token != address(stakedToken), \\\"Operations: Cannot recover staked token\\\");\\n        require(_token != address(rewardToken), \\\"Operations: Cannot recover reward token\\\");\\n\\n        uint256 balance = IERC20Metadata(_token).balanceOf(address(this));\\n        require(balance != 0, \\\"Operations: Cannot recover zero balance\\\");\\n\\n        IERC20Metadata(_token).safeTransfer(address(msg.sender), balance);\\n\\n        emit TokenRecovery(_token, balance);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner\\n     */\\n    function stopReward() external onlyOwner {\\n        endTimestamp = block.timestamp;\\n        emit RewardsStop(endTimestamp);\\n    }\\n\\n    /*\\n     * @notice Update pool limit per user\\n     * @dev Only callable by owner.\\n     * @param _userLimit: whether the limit remains forced\\n     * @param _poolLimitPerUser: new pool limit per user\\n     */\\n    function updatePoolLimitPerUser(bool _userLimit, uint256 _poolLimitPerUser) external onlyOwner {\\n        require(userLimit, \\\"Must be set\\\");\\n        if (_userLimit) {\\n            require(_poolLimitPerUser > poolLimitPerUser, \\\"New limit must be higher\\\");\\n            poolLimitPerUser = _poolLimitPerUser;\\n        } else {\\n            userLimit = _userLimit;\\n            poolLimitPerUser = 0;\\n        }\\n        emit NewPoolLimit(poolLimitPerUser);\\n    }\\n\\n    /*\\n     * @notice Update reward per block\\n     * @dev Only callable by owner.\\n     * @param _rewardPerSecond: the reward per second\\n     */\\n    function updateRewardPerSecond(uint256 _rewardPerSecond) external onlyOwner {\\n        require(block.timestamp < startTimestamp, \\\"Pool has started\\\");\\n        uint256 decimalsRewardToken = uint256(rewardToken.decimals());\\n        require(PRECISION_FACTOR * _rewardPerSecond / (10**decimalsRewardToken) >= 100_000_000, \\\"rewardPerSecond must be larger\\\");\\n        rewardPerSecond = _rewardPerSecond;\\n        emit NewRewardPerSecond(_rewardPerSecond);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end blocks\\n     * @dev This function is only callable by owner.\\n     * @param _startTimestamp: the new start block timestamp\\n     * @param _endTimestamp: the new end block timestamp\\n     */\\n    function updateStartAndEndTimestamp(uint256 _startTimestamp, uint256 _endTimestamp) external onlyOwner {\\n        require(block.timestamp < startTimestamp, \\\"Pool has started\\\");\\n        require(_startTimestamp < _endTimestamp, \\\"New startTimestamp must be lower than new endTimestamp\\\");\\n        require(block.timestamp < _startTimestamp, \\\"New startTimestamp must be higher than current block timestamp\\\");\\n\\n        startTimestamp = _startTimestamp;\\n        endTimestamp = _endTimestamp;\\n\\n        // Set the lastRewardTimestamp as the startTimestamp\\n        lastRewardTimestamp = startTimestamp;\\n\\n        emit NewStartAndEndTimestamp(_startTimestamp, _endTimestamp);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update profile and thresholdPoints' requirement.\\n     * @dev This function is only callable by owner.\\n     * @param _isRequested: the profile is requested\\n     * @param _thresholdPoints: the threshold points\\n     */\\n    function updateProfileAndThresholdPointsRequirement(bool _isRequested, uint256 _thresholdPoints)\\n    external\\n    onlyOwner\\n    {\\n        require(squadProfile != address(0), \\\"Squad profile address is null\\\");\\n        require(_thresholdPoints >= 0, \\\"Threshold points need to exceed 0\\\");\\n        squadProfileIsRequested = _isRequested;\\n        squadProfileThresholdPoints = _thresholdPoints;\\n        emit UpdateProfileAndThresholdPointsRequirement(_isRequested, _thresholdPoints);\\n    }\\n\\n    /*\\n     * @notice View function to see pending reward on frontend.\\n     * @param _user: user address\\n     * @return Pending reward for a given user\\n     */\\n    function pendingReward(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n        if (block.timestamp > lastRewardTimestamp && stakedTokenSupply != 0) {\\n            uint256 multiplier = _getMultiplier(lastRewardTimestamp, block.timestamp);\\n            uint256 cakeReward = multiplier * rewardPerSecond;\\n            uint256 adjustedTokenPerShare = accTokenPerShare + (cakeReward * PRECISION_FACTOR) / stakedTokenSupply;\\n            return (user.amount * adjustedTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\n        } else {\\n            return (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\n        }\\n    }\\n\\n    /*\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     */\\n    function _updatePool() internal {\\n        if (block.timestamp <= lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n\\n        if (stakedTokenSupply == 0) {\\n            lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = _getMultiplier(lastRewardTimestamp, block.timestamp);\\n        uint256 cakeReward = multiplier * rewardPerSecond;\\n        accTokenPerShare = accTokenPerShare + (cakeReward * PRECISION_FACTOR) / stakedTokenSupply;\\n        lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    /*\\n     * @notice Return reward multiplier over the given _from to _to block.\\n     * @param _from: block to start\\n     * @param _to: block to finish\\n     */\\n    function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {\\n        if (_to <= endTimestamp) {\\n            return _to - _from;\\n        } else if (_from >= endTimestamp) {\\n            return 0;\\n        } else {\\n            return endTimestamp - _from;\\n        }\\n    }\\n\\n    /*\\n     * @notice Return user limit is set or zero.\\n     */\\n    function hasUserLimit() public view returns (bool) {\\n        if (!userLimit || (block.timestamp >= (startTimestamp + numberSecondsForUserLimit))) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\\ncontract SmartChefFactory is Ownable {\\n    event NewSmartChefContract(address indexed smartChef);\\n\\n    constructor() {\\n        //\\n    }\\n\\n    /*\\n     * @notice Deploy the pool\\n     * @param _stakedToken: staked token address\\n     * @param _rewardToken: reward token address\\n     * @param _rewardPerSecond: reward per second (in rewardToken)\\n     * @param _startTimestamp: start block timestamp\\n     * @param _endTimestamp: end block timestamp\\n     * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\\n     * @param _numberBlocksForUserLimit: block numbers available for user limit (after start block)\\n     * @param _squadProfile: Squad Profile address\\n     * @param _squadProfileIsRequested: Squad Profile is requested\\n     * @param _squadProfileThresholdPoints: Squad Profile need threshold points\\n     * @param _admin: admin address with ownership\\n     * @return address of new smart chef contract\\n     */\\n    function deployPool(\\n        IERC20Metadata _stakedToken,\\n        IERC20Metadata _rewardToken,\\n        uint256 _rewardPerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        uint256 _poolLimitPerUser,\\n        uint256 _numberBlocksForUserLimit,\\n        address _squadProfile,\\n        bool _squadProfileIsRequested,\\n        uint256 _squadProfileThresholdPoints,\\n        address _admin\\n    ) external onlyOwner {\\n        require(_stakedToken.totalSupply() >= 0);\\n        require(_rewardToken.totalSupply() >= 0);\\n        require(_stakedToken != _rewardToken, \\\"Tokens must be be different\\\");\\n\\n        bytes memory bytecode = type(SmartChefInitializable).creationCode;\\n        // pass constructor argument\\n        bytecode = abi.encodePacked(\\n            bytecode,\\n            abi.encode(_squadProfile, _squadProfileIsRequested, _squadProfileThresholdPoints)\\n        );\\n        bytes32 salt = keccak256(abi.encodePacked(_stakedToken, _rewardToken, _startTimestamp));\\n        address smartChefAddress;\\n\\n        assembly {\\n            smartChefAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n\\n        SmartChefInitializable(smartChefAddress).initialize(\\n            _stakedToken,\\n            _rewardToken,\\n            _rewardPerSecond,\\n            _startTimestamp,\\n            _endTimestamp,\\n            _poolLimitPerUser,\\n            _numberBlocksForUserLimit,\\n            _admin\\n        );\\n\\n        emit NewSmartChefContract(smartChefAddress);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"smartChef\",\"type\":\"address\"}],\"name\":\"NewSmartChefContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberBlocksForUserLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_squadProfile\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_squadProfileIsRequested\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_squadProfileThresholdPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deployPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SmartChefFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}