{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/StakingOwn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./IBTCMT.sol\\\";\\n\\ncontract StakingOwn is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    IBTCMT public stoken;\\n    IERC20 public rewardToken;\\n    uint256 public farmStartedTime;\\n    uint256 public miniStakePeriodInSeconds;\\n    uint256 public nowTotalMined;\\n    uint256 public allTimeTotalMined;\\n    uint256 public allTimeTotalStaked;\\n    uint256 public nowTotalStakers;\\n    uint256 public allTimeTotalStakers;\\n    uint256 public totalRewardInPool;\\n    uint256 public totalWithdrawed;\\n\\n    uint256 private _yesterdayShairs;\\n    uint256 private _todayShairs;\\n\\n    mapping(address => StakeRecord) public userStakes;\\n    mapping(uint256 => DepositRecord) public rewardDeposits;\\n    mapping(uint256 => bool) private _changerVarsShairs;\\n    mapping(uint256 => bool) private _rewardDepositIndexies;\\n    mapping(address => bool) private _isUserStaker;\\n    mapping(address => mapping(uint256 => uint256)) public _stakesDays;\\n    mapping(address => mapping(uint256 => Unstake)) public _unstakesDays;\\n\\n    struct StakeRecord {\\n        uint256 day;\\n        uint256 totalAmount;\\n        uint256 lockedAmount;\\n        uint256 unlockedAmount;\\n        uint256 previousAmount;\\n        uint256 reservedReward;\\n        uint256[] array;\\n        uint256 claimedDay;\\n    }\\n\\n    struct DepositRecord {\\n        uint256 amountOfReward;\\n        uint256 amountOfShairsNow;\\n    }\\n\\n    struct Unstake {\\n        uint256 amount;\\n        bool before;\\n    }\\n\\n    modifier onlyWhenOpen {\\n        require(block.timestamp >= farmStartedTime, \\\"Contract is not open yet\\\");\\n        _;\\n    }\\n\\n    event StakeTokenIncome(\\n        address who,\\n        uint256 day,\\n        uint256 amountLocked,\\n        uint256 amountUnlocked,\\n        uint256 totalAmount\\n    );\\n    event StakeTokenOutcome(\\n        address who,\\n        uint256 day,\\n        uint256 amountLocked,\\n        uint256 amountUnlocked,\\n        uint256 totalAmount\\n    );\\n    event RewardDeposit(\\n        address who,\\n        uint256 day,\\n        uint256 amount,\\n        uint256 totalRewardOnContract\\n    );\\n    event RewardWithdrawn(\\n        address who,\\n        uint256 day,\\n        uint256 amount,\\n        uint256 totalRewardOnContract\\n    );\\n\\n    constructor(\\n        IBTCMT _SToken,\\n        IERC20 _rewardToken,\\n        uint256 miniStakePeriod,\\n        uint256 startTime\\n    ) {\\n        stoken = _SToken;\\n        rewardToken = _rewardToken;\\n        require(miniStakePeriod > 0, \\\"mining period should >0\\\");\\n        miniStakePeriodInSeconds = miniStakePeriod;\\n        farmStartedTime = startTime;\\n        _yesterdayShairs = 0;\\n        _todayShairs = 0;\\n    }\\n\\n    function rewardTokenDonation(uint256 amount)\\n        external\\n        onlyOwner\\n        onlyWhenOpen\\n        nonReentrant\\n    {\\n        address sender = _msgSender();\\n        uint256 today = _currentDay();\\n        require(amount > 0, \\\"Amount should be more then zero\\\");\\n        require(\\n            !_rewardDepositIndexies[today],\\n            \\\"Deposit has already done today\\\"\\n        );\\n        _updateShairsVars();\\n        rewardToken.safeTransferFrom(sender, address(this), amount);\\n        totalRewardInPool = totalRewardInPool + amount;\\n        allTimeTotalMined = allTimeTotalMined + amount;\\n        _rewardDepositIndexies[today] = true;\\n        DepositRecord memory currentDeposit =\\n            DepositRecord(amount, _yesterdayShairs);\\n        rewardDeposits[today] = currentDeposit;\\n        emit RewardDeposit(sender, today, amount, totalRewardInPool);\\n    }\\n\\n    function withdrawRewardAll() external onlyWhenOpen nonReentrant {\\n        address sender = _msgSender();\\n        _withdrawReward(sender, 0);\\n    }\\n\\n    function withdrawRewardPartially(uint256 amount)\\n        external\\n        onlyWhenOpen\\n        nonReentrant\\n    {\\n        address sender = _msgSender();\\n        _withdrawReward(sender, amount);\\n    }\\n\\n    function stakeStart(uint256 amountUnlocked, uint256 amountLocked)\\n        external\\n        onlyWhenOpen\\n        nonReentrant\\n    {\\n        address sender = _msgSender();\\n        uint256 today = _currentDay();\\n        uint256 amount = amountUnlocked + amountLocked;\\n        require(amount > 0, \\\"Amount should be more then zero\\\");\\n        require(\\n            amount <= stoken.balanceOfSum(sender),\\n            \\\"You have not enough tokens for staking\\\"\\n        );\\n        uint256[] memory arr;\\n        arr = stoken.transferFromFarm(sender, amountLocked, amountUnlocked);\\n        if (_isUserStaker[sender]) {\\n            uint256 day = _reserveReward(sender);\\n            if (day == today) {\\n                userStakes[sender].previousAmount = 0;\\n            } else {\\n                userStakes[sender].previousAmount =\\n                    userStakes[sender].previousAmount +\\n                    userStakes[sender].totalAmount;\\n            }\\n            userStakes[sender].totalAmount =\\n                userStakes[sender].totalAmount +\\n                amount;\\n            userStakes[sender].unlockedAmount =\\n                userStakes[sender].unlockedAmount +\\n                amountUnlocked;\\n            userStakes[sender].lockedAmount =\\n                userStakes[sender].lockedAmount +\\n                amountLocked;\\n            for (uint256 i = 0; i < arr.length; i++) {\\n                userStakes[sender].array.push(arr[i]);\\n            }\\n        } else {\\n            StakeRecord memory stake =\\n                StakeRecord(\\n                    today,\\n                    amount,\\n                    amountLocked,\\n                    amountUnlocked,\\n                    0,\\n                    0,\\n                    arr,\\n                    today\\n                );\\n            userStakes[sender] = stake;\\n            _isUserStaker[sender] = true;\\n            nowTotalStakers++;\\n            allTimeTotalStakers++;\\n        }\\n        _updateShairsVars();\\n        _stakesDays[sender][today] = _stakesDays[sender][today] + amount;\\n        _todayShairs = _todayShairs + amount;\\n        nowTotalMined = nowTotalMined + amount;\\n        allTimeTotalStaked = allTimeTotalStaked + amount;\\n\\n        emit StakeTokenIncome(\\n            sender,\\n            today,\\n            amountLocked,\\n            amountUnlocked,\\n            amount\\n        );\\n    }\\n\\n    function stakeEndPartially(uint256 lockedAmount, uint256 unlockedAmount)\\n        external\\n        onlyWhenOpen\\n        nonReentrant\\n    {\\n        address sender = _msgSender();\\n        _updateShairsVars();\\n        require(_isUserStaker[sender], \\\"You have no any stakes\\\");\\n        uint256 today = _currentDay();\\n        uint256[] memory returnArray = userStakes[sender].array;\\n        uint256 locked = userStakes[sender].lockedAmount;\\n        uint256 unlocked = userStakes[sender].unlockedAmount;\\n        uint256 total = userStakes[sender].totalAmount;\\n        uint256 totalAmount = lockedAmount + unlockedAmount;\\n        require(totalAmount != 0, \\\"Total amount couldn't be zero\\\");\\n        uint256 sharesToday = _stakesDays[sender][today];\\n        require(lockedAmount <= locked, \\\"Not enough locked tokens\\\");\\n        require(unlockedAmount <= unlocked, \\\"Not enough unlocked tokens\\\");\\n        if (userStakes[sender].day < today) {\\n            _reserveReward(sender);\\n        }\\n        returnArray = stoken.transferFarm(\\n            sender,\\n            lockedAmount,\\n            unlockedAmount,\\n            returnArray\\n        );\\n        nowTotalMined = nowTotalMined - totalAmount;\\n        if (totalAmount == (locked + unlocked)) {\\n            --nowTotalStakers;\\n            _isUserStaker[sender] = false;\\n            delete userStakes[sender];\\n        } else {\\n            userStakes[sender].totalAmount = total - totalAmount;\\n            userStakes[sender].lockedAmount = locked - lockedAmount;\\n            userStakes[sender].unlockedAmount = unlocked - unlockedAmount;\\n            userStakes[sender].array = returnArray;\\n            userStakes[sender].previousAmount = 0;\\n        }\\n        if (sharesToday != 0) {\\n            if (sharesToday >= totalAmount) {\\n                _todayShairs = _todayShairs - totalAmount;\\n            } else {\\n                _todayShairs = _todayShairs - sharesToday;\\n                _yesterdayShairs =\\n                    _yesterdayShairs -\\n                    (totalAmount - sharesToday);\\n            }\\n        } else {\\n            _yesterdayShairs = _yesterdayShairs - totalAmount;\\n        }\\n        _unstakesDays[sender][today].amount += totalAmount;\\n        if (_rewardDepositIndexies[today]) {\\n            _unstakesDays[sender][today].before = false;\\n        }\\n        emit StakeTokenOutcome(\\n            sender,\\n            today,\\n            lockedAmount,\\n            unlockedAmount,\\n            totalAmount\\n        );\\n    }\\n\\n    function stakeEnd() external onlyWhenOpen nonReentrant {\\n        address sender = _msgSender();\\n        _updateShairsVars();\\n        require(_isUserStaker[sender], \\\"You have no any stakes\\\");\\n        uint256 today = _currentDay();\\n        uint256[] memory returnArray = userStakes[sender].array;\\n        uint256 locked = userStakes[sender].lockedAmount;\\n        uint256 unlocked = userStakes[sender].unlockedAmount;\\n        uint256 total = locked + unlocked;\\n        uint256 sharesToday = _stakesDays[sender][today];\\n        if (userStakes[sender].day < today) {\\n            _withdrawReward(sender, 0);\\n        }\\n        stoken.transferFarm(sender, locked, unlocked, returnArray);\\n        nowTotalMined = nowTotalMined - total;\\n        --nowTotalStakers;\\n        _isUserStaker[sender] = false;\\n        delete userStakes[sender];\\n        if (sharesToday != 0) {\\n            _todayShairs = _todayShairs - sharesToday;\\n        }\\n        _yesterdayShairs = _yesterdayShairs - (total - sharesToday);\\n        emit StakeTokenOutcome(sender, today, locked, unlocked, total);\\n    }\\n\\n    function getUserStakeArray(address user) external view returns (uint256[] memory) {\\n        return userStakes[user].array;\\n    }\\n\\n    function currentDay() external view onlyWhenOpen returns (uint256) {\\n        return _currentDay();\\n    }\\n\\n    function getCurrentUserReward(address user)\\n        external\\n        view\\n        onlyWhenOpen\\n        returns (uint256)\\n    {\\n        uint256 amount = userStakes[user].reservedReward;\\n        (uint256 outputAmount, ) = _calculationReward(user);\\n        return amount + outputAmount;\\n    }\\n\\n    function getTodayReward() external view returns(uint256){\\n        uint256 today = _currentDay();\\n        DepositRecord memory rew = rewardDeposits[today];\\n        return rew.amountOfReward;\\n    }\\n\\n    function calculationRewardTable(\\n        address user,\\n        uint256 startDay,\\n        uint256 endDay\\n    ) external view onlyWhenOpen returns (uint256[] memory arr) {\\n        require(user != address(0), \\\"Got zero address\\\");\\n        require(userStakes[user].day <= startDay, \\\"Wrong start day\\\");\\n        require(endDay <= _currentDay(), \\\"Wrong end day\\\");\\n        if (!_isUserStaker[user]) {\\n            arr = new uint256[](0);\\n            return arr;\\n        }\\n\\n        arr = new uint256[](endDay - startDay + 1);\\n        uint256 lengthArr = 0;\\n        uint256 amount = 0;\\n        uint256 currentDayDeposit = 0;\\n        uint256 currentDayShares = 0;\\n        uint256 totalStaked = _stakesDays[user][startDay];\\n        if (startDay == userStakes[user].day) {\\n            arr[0] = 0;\\n            lengthArr = 1;\\n            ++startDay;\\n        }\\n        for (uint256 i = startDay; i <= endDay; i++) {\\n            if (\\n                _unstakesDays[user][i].amount != 0 &&\\n                !_unstakesDays[user][i].before\\n            ) {\\n                totalStaked -= _unstakesDays[user][i].amount;\\n            }\\n            if (_rewardDepositIndexies[i]) {\\n                currentDayDeposit = rewardDeposits[i].amountOfReward;\\n                currentDayShares = rewardDeposits[i].amountOfShairsNow;\\n                amount = (totalStaked * currentDayDeposit) / currentDayShares;\\n                arr[lengthArr] = amount;\\n            } else {\\n                arr[lengthArr] = 0;\\n            }\\n            if (_stakesDays[user][i] != 0) {\\n                totalStaked += _stakesDays[user][i];\\n            }\\n            if (\\n                _unstakesDays[user][i].amount != 0 &&\\n                _unstakesDays[user][i].before\\n            ) {\\n                totalStaked -= _unstakesDays[user][i].amount;\\n            }\\n            lengthArr++;\\n        }\\n        return arr;\\n    }\\n\\n    function _calculationReward(address user)\\n        private\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(user != address(0), \\\"Got zero address\\\");\\n        if (!_isUserStaker[user]) {\\n            return (0, 0);\\n        } else {\\n            uint256 additional;\\n            uint256 amount;\\n            uint256 currentDayDeposit;\\n            uint256 currentDayShares;\\n            uint256 startDay = userStakes[user].claimedDay + 1;\\n            uint256 today = _currentDay();\\n            if (startDay > today)\\n                return (0, today);\\n            uint256 endDay = ((today - startDay) < (5555 * miniStakePeriodInSeconds)) ? today : (startDay + (5555 * miniStakePeriodInSeconds));\\n            //uint256 endDay = _currentDay();\\n            uint256 prevAmount = userStakes[user].previousAmount;\\n            uint256 totalStaked = userStakes[user].totalAmount;\\n            if (prevAmount != 0 && _rewardDepositIndexies[startDay]) {\\n                currentDayDeposit = rewardDeposits[startDay].amountOfReward;\\n                currentDayShares = rewardDeposits[startDay].amountOfShairsNow;\\n                additional =\\n                    (prevAmount * currentDayDeposit) /\\n                    currentDayShares;\\n                amount = amount + additional;\\n                for (uint256 ii = startDay + 1; ii <= endDay; ii++) {\\n                    if (_rewardDepositIndexies[ii]) {\\n                        currentDayDeposit = rewardDeposits[ii].amountOfReward;\\n                        currentDayShares = rewardDeposits[ii].amountOfShairsNow;\\n                        additional =\\n                            (totalStaked * currentDayDeposit) /\\n                            currentDayShares;\\n                        amount = amount + additional;\\n                    } else {\\n                        continue;\\n                    }\\n                }\\n            } else {\\n                for (uint256 ii = startDay; ii <= endDay; ii++) {\\n                    if (_rewardDepositIndexies[ii]) {\\n                        currentDayDeposit = rewardDeposits[ii].amountOfReward;\\n                        currentDayShares = rewardDeposits[ii].amountOfShairsNow;\\n                        additional =\\n                            (totalStaked * currentDayDeposit) /\\n                            currentDayShares;\\n                        amount = amount + additional;\\n                    } else {\\n                        continue;\\n                    }\\n                }\\n            }\\n            uint256 day;\\n            if (_rewardDepositIndexies[endDay]) {\\n                day = endDay;\\n            } else {\\n                day = endDay - 1;\\n            }\\n            return (amount, day);\\n        }\\n    }\\n\\n    function _reserveReward(address user) private returns (uint256) {\\n        require(user != address(0), \\\"Got zero address\\\");\\n        require(_isUserStaker[user], \\\"You have no any stakes\\\");\\n        (uint256 amount, uint256 claimedDay) = _calculationReward(user);\\n        if (userStakes[user].previousAmount != 0) {\\n            userStakes[user].previousAmount = 0;\\n        }\\n        if (amount != 0) {\\n            userStakes[user].reservedReward += amount;\\n        }\\n        userStakes[user].claimedDay = claimedDay;\\n        return claimedDay;\\n    }\\n\\n    function _withdrawReward(address user, uint256 inputAmount) private {\\n        require(user != address(0), \\\"Got zero address\\\");\\n        require(_isUserStaker[user], \\\"You have no any stakes\\\");\\n        _reserveReward(user);\\n        uint256 resRew = userStakes[user].reservedReward;\\n        if (inputAmount != 0) {\\n            require(\\n                inputAmount <= resRew,\\n                \\\"You have not earned so much tokens\\\"\\n            );\\n            resRew = inputAmount;\\n        }\\n        if(resRew > 0){\\n            rewardToken.safeTransfer(user, resRew);\\n        }\\n        userStakes[user].reservedReward -= resRew;\\n        totalRewardInPool -= resRew;\\n        totalWithdrawed += resRew;\\n        emit RewardWithdrawn(user, _currentDay(), resRew, totalRewardInPool);\\n    }\\n\\n    function _currentDay() private view returns (uint256) {\\n        return (block.timestamp - farmStartedTime) / miniStakePeriodInSeconds;\\n    }\\n\\n    function _updateShairsVars() private {\\n        uint256 today = _currentDay();\\n        if (!_changerVarsShairs[today]) {\\n            _changerVarsShairs[today] = true;\\n            _yesterdayShairs = _yesterdayShairs + _todayShairs;\\n            _todayShairs = 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/IBTCMT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBTCMT is IERC20 {\\n\\n    event FarmStatusChanged (address indexed farm, bool isFarmNow);\\n\\n    event TransferLocked (address indexed from, address indexed to, uint256 amount);\\n\\n    event ApprovalLocked (address indexed owner, address indexed spender, uint256 amount);\\n\\n    function balanceOfSum (address account) external view returns (uint256);\\n\\n    function transferFarm (address to, uint256 amountLocked, uint256 amountUnlocked, uint256[] calldata farmIndexes) external returns (uint256[] memory);\\n\\n    function transferFromFarm (address from, uint256 amountLocked, uint256 amountUnlocked) external returns (uint256[] memory);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBTCMT\",\"name\":\"_SToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"miniStakePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewardOnContract\",\"type\":\"uint256\"}],\"name\":\"RewardDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewardOnContract\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnlocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"StakeTokenIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnlocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"StakeTokenOutcome\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_stakesDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_unstakesDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"before\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTimeTotalMined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTimeTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTimeTotalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"}],\"name\":\"calculationRewardTable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"arr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmStartedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCurrentUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTodayReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakeArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miniStakePeriodInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nowTotalMined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nowTotalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfShairsNow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rewardTokenDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"}],\"name\":\"stakeEndPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"}],\"name\":\"stakeStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stoken\",\"outputs\":[{\"internalType\":\"contract IBTCMT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedDay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewardAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingOwn", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000410a56541bd912f9b60943fcb344f1e3d6f095670000000000000000000000007130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c00000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000062875890", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}