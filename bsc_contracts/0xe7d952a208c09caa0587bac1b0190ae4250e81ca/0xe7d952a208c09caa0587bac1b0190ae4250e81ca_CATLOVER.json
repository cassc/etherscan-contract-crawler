{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function trfOwner(address Addr) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, Addr);\r\n        _owner = Addr;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract IERC20Extented is IERC20 {\r\n    function decimals() external view virtual returns (uint8);\r\n    function name() external view virtual returns (string memory);\r\n    function symbol() external view virtual returns (string memory);\r\n}\r\n\r\ncontract CATLOVER is Context, IERC20, IERC20Extented, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = \"catlove\";\r\n    string private constant _symbol = \"catlove\";\r\n    uint8 private constant _decimals = 18;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _NoFee;\r\n\tmapping(address => bool) private _Exchange;\r\n    mapping(address => bool) private _Bridge;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 100 * 10 ** (12 + _decimals);\r\n    uint256 private _feeRate = 50;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 public _priceImpact = 50;\r\n    uint256 public _maxWallet = _tTotal.mul(1).div(200);\r\n    uint256 private _startBlock;\r\n    bool private autoSwap = true;\r\n    bool private sellLimit = true;\r\n    bool private freeTrf = false;\r\n\r\n    //  buy fees\r\n    uint256 public _buyLiquidityFee = 2;\r\n    uint256 private _previousBuyLiquidityFee = _buyLiquidityFee;\r\n    uint256 public _buyMarketingFee = 4;\r\n    uint256 private _previousBuyMarketingFee = _buyMarketingFee;\r\n    uint256 public _buyReflectionFee = 2;\r\n    uint256 private _previousBuyReflectionFee = _buyReflectionFee;\r\n    uint256 public _buyDevFee = 4;\r\n    uint256 private _previousBuyDevFee = _buyDevFee;\r\n\r\n    // sell fees\r\n    uint256 public _sellLiquidityFee = 2;\r\n    uint256 private _previousSellLiquidityFee = _sellLiquidityFee;\r\n    uint256 public _sellMarketingFee = 4;\r\n    uint256 private _previousSellMarketingFee = _sellMarketingFee;\r\n    uint256 public _sellReflectionFee = 2;\r\n    uint256 private _previousSellReflectionFee = _sellReflectionFee;\r\n    uint256 public _sellDevFee = 4;\r\n    uint256 private _previousSellDevFee = _sellDevFee;\r\n\r\n    uint256 private totFee = _sellLiquidityFee.add(_sellMarketingFee).add(_sellDevFee);\r\n    \r\n    struct BuyBreakdown {\r\n        uint256 tTransferAmount;\r\n        uint256 tLiquidity;\r\n        uint256 tMarketing;\r\n        uint256 tReflection;\r\n    }\r\n\r\n    struct SellBreakdown {\r\n        uint256 tTransferAmount;\r\n        uint256 tLiquidity;\r\n        uint256 tMarketing;\r\n        uint256 tReflection;\r\n    }\r\n\r\n    mapping(address => bool) private bots;\r\n    address payable private _marketingAddress = payable(0x496ae03a73e9F6cC30eCA230470f53688Fa31519);\r\n    address payable private _liquidityAddress = payable(0xf49A440c9D2d8E92AE25afa5cE0D39952893b526);\r\n    address payable private _devAddress = payable(0x571f7368e61eF4bc6B0DAa874dc24fA900E5C9A5);\r\n    address payable constant private _burnAddress = payable(0x000000000000000000000000000000000000dEaD);\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    uint256 trxCount = 0;\r\n    uint256 public setCount = 2;\r\n\r\n    bool private tradingOpen = false;\r\n    bool private inSwap = false;\r\n\r\n    event autoSwapUpdate(bool autoSwap);\r\n    event MaxWalletAmountUpdated(uint256 _maxWallet);\r\n    event MaxTxAmountUpdated(uint256 _maxWallet);\r\n    event FeesUpdated(uint256 _buyLiquidityFee, uint256 _sellLiquidityFee, uint256 _buyMarketingFee,uint256 _buyDevFee, uint256 _sellMarketingFee, uint256 _buyReflectionFee, uint256 _sellReflectionFee, uint256 _sellDevFee);\r\n    event PriceImpactUpdated(uint256 _priceImpact);\r\n    event UpdateSellLimit(bool sellLimit);\r\n    event UpdateNtr(bool freeTrf);\r\n    event UpdateScount(uint256 setCount);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //bsc test 0xD99D1c33F9fC3444f8101754aBC46c52416550D1);//bsc main net 0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _NoFee[owner()] = true;\r\n        _NoFee[address(this)] = true;\r\n        _NoFee[_marketingAddress] = true;\r\n        _NoFee[_liquidityAddress] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function STselllimit(bool val) external onlyOwner() {\r\n        sellLimit = val;\r\n        emit UpdateSellLimit(val);\r\n    }\r\n\r\n    function STFEETRANSFER(bool val) external onlyOwner() {\r\n        freeTrf = val;\r\n        emit UpdateNtr(val);\r\n    }\r\n\t\t\r\n\tfunction STSCOUNT(uint256 val) external onlyOwner() {\r\n        setCount = val;\r\n        emit UpdateScount(val);\r\n    }\r\n\r\n    function name() override external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() override external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() override external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (account == _burnAddress) {\r\n            return _tOwned[account];\r\n        }\r\n        return reflectiontoken(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function reflectiontoken(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_buyMarketingFee == 0 && _buyLiquidityFee == 0 && _buyReflectionFee == 0 && _sellMarketingFee == 0 && _sellLiquidityFee == 0 && _sellReflectionFee == 0) return;\r\n        _previousBuyMarketingFee = _buyMarketingFee;\r\n        _previousBuyLiquidityFee = _buyLiquidityFee;\r\n        _previousBuyReflectionFee = _buyReflectionFee;\r\n        _previousBuyDevFee = _buyDevFee;\r\n\r\n        _previousSellMarketingFee = _sellMarketingFee;\r\n        _previousSellLiquidityFee = _sellLiquidityFee;\r\n        _previousSellReflectionFee = _sellReflectionFee;\r\n        _previousSellDevFee = _sellDevFee;\r\n\r\n        _buyMarketingFee = 0;\r\n        _buyLiquidityFee = 0;\r\n        _buyReflectionFee = 0;\r\n        _buyDevFee = 0;\r\n        _sellMarketingFee = 0;\r\n        _sellLiquidityFee = 0;\r\n        _sellReflectionFee = 0;\r\n        _sellDevFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _buyMarketingFee = _previousBuyMarketingFee;\r\n        _buyLiquidityFee = _previousBuyLiquidityFee;\r\n        _buyReflectionFee = _previousBuyReflectionFee;\r\n        _buyDevFee = _previousBuyDevFee;\r\n\r\n        _sellMarketingFee = _previousSellMarketingFee;\r\n        _sellLiquidityFee = _previousSellLiquidityFee;\r\n        _sellReflectionFee = _previousSellReflectionFee;\r\n        _sellDevFee = _previousSellDevFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool takeFee = true;\r\n        if (from != owner() && to != owner() && !_NoFee[from] && !_NoFee[to] && from != address(this) && to != address(this)) {\r\n            require(tradingOpen);\r\n            if ((from == uniswapV2Pair || _Exchange[from]) && to != address(uniswapV2Router) && !_Exchange[to]) {\r\n                if (block.timestamp <= _startBlock) {\r\n                    bots[to] = true;\r\n                }\r\n                trxCount += 1;\r\n                uint256 wallet = balanceOf(to);\r\n                require(wallet + amount <= _maxWallet, \"Exceeds maximum wallet amount\");\r\n            }\r\n            if (!inSwap && from != uniswapV2Pair && !_Exchange[from]) {\r\n                require(!bots[from]);\r\n                if (!_Bridge[from] && !_Bridge[to]) {\r\n                    if (to == uniswapV2Pair || _Exchange[to]) {\r\n                        if (sellLimit) {\r\n                            require(amount <= balanceOf(uniswapV2Pair).mul(_priceImpact).div(10000));\r\n                        }\r\n                        uint256 wl = balanceOf(from) - amount;\r\n                        if (wl <= 0) {\r\n                            amount = amount - 1;\r\n                        }\r\n                        if (autoSwap && trxCount >= setCount) {\r\n                            uint256 amounts = balanceOf(uniswapV2Pair).mul(_feeRate).div(10000);\r\n                            uint256 scFeeBalance = balanceOf(address(this));\r\n                            bool cek = scFeeBalance >= amounts;\r\n                            if (cek) {\r\n                                trxCount = 0;\r\n                                scFeeBalance = amounts;\r\n                                if (scFeeBalance > 0) {\r\n                                    swapTokensForEth(scFeeBalance);\r\n                                }\r\n                                uint256 contractETHBalance = address(this).balance;\r\n                                if (contractETHBalance > 0) {\r\n                                    sendBNBToFee(address(this).balance);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if(to != uniswapV2Pair && !_Exchange[to]) {\r\n                        require(balanceOf(to).add(amount) <= _maxWallet, \"wallet balance after transfer must be less than max wallet amount\");\r\n                        if (freeTrf) {\r\n                            takeFee = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (_NoFee[from] || _NoFee[to] || _Bridge[to] || _Bridge[from]) {\r\n            takeFee = false;\r\n        }\r\n        if (bots[from] || bots[to]) {\r\n            takeFee = true;\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        restoreAllFee();\r\n    }\r\n\r\n    function setFeeSwap(uint256 maxFee) external onlyOwner() {\r\n        _feeRate = maxFee;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function sendBNBToFee(uint256 amount) private {\r\n        uint256 _marketingPercent = _sellMarketingFee.mul(100).div(totFee);\r\n        uint256 _liquidityPercent = _sellLiquidityFee.mul(100).div(totFee);\r\n        uint256 _devPercent = _sellDevFee.mul(100).div(totFee);\r\n        _marketingAddress.transfer(amount.mul(_marketingPercent).div(100));\r\n        _liquidityAddress.transfer(amount.mul(_liquidityPercent).div(100));\r\n        _devAddress.transfer(amount.mul(_devPercent).div(100));\r\n    }\r\n\r\n    function sendBNBtoAddress(address Addr) external onlyOwner() {\r\n        require(Addr != address(0), \"BEP20: send the zero address\");\r\n        address payable cok = payable(Addr);\r\n        uint256 amn = address(this).balance;\r\n        cok.transfer(amn);\r\n    }\r\n\r\n    function startTrx() external onlyOwner() {\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function pauseTrx() external onlyOwner() {\r\n        tradingOpen = false;\r\n    }\r\n\r\n    function swapFee() external onlyOwner() {\r\n        uint256 amounts = balanceOf(uniswapV2Pair).mul(_feeRate).div(10000);\r\n        uint256 scFeeBalance = balanceOf(address(this));\r\n        bool cek = scFeeBalance >= amounts;\r\n        require(cek);\r\n        swapTokensForEth(amounts);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendBNBToFee(contractETHBalance);\r\n    }\r\n\r\n    function sendAllBNB() external onlyOwner() {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendBNBToFee(contractETHBalance);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) removeAllFee();\r\n        if (sender == uniswapV2Pair){\r\n            _transferStandardBuy(sender, recipient, amount);\r\n        }\r\n        else {\r\n            _transferStandardSell(sender, recipient, amount);\r\n        }\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandardBuy(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 tTransferAmount, uint256 tLiquidity, uint256 tMarketing, uint256 tReflection) = _getValuesBuy(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _takeMarketing(tMarketing);\r\n        _reflectFee(rReflection, tReflection);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferStandardSell(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 tTransferAmount, uint256 tLiquidity, uint256 tMarketing, uint256 tReflection) = _getValuesSell(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        if (recipient == _burnAddress) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        }\r\n        _takeLiquidity(tLiquidity);\r\n        _takeMarketing(tMarketing);\r\n        _reflectFee(rReflection, tReflection);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rReflection, uint256 tReflection) private {\r\n        _rTotal = _rTotal.sub(rReflection);\r\n        _tFeeTotal = _tFeeTotal.add(tReflection);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n    }\r\n\r\n    function _takeMarketing(uint256 tMarketing) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rMarketing);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValuesSell(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        SellBreakdown memory sellFees;\r\n        (sellFees.tTransferAmount, sellFees.tLiquidity, sellFees.tMarketing, sellFees.tReflection) = _getTValuesSell(tAmount, _sellLiquidityFee, _sellMarketingFee.add(_sellDevFee), _sellReflectionFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection) = _getRValuesSell(tAmount, sellFees.tLiquidity, sellFees.tMarketing, sellFees.tReflection, currentRate);\r\n        return (rAmount, rTransferAmount, rReflection, sellFees.tTransferAmount, sellFees.tLiquidity, sellFees.tMarketing, sellFees.tReflection);\r\n    }\r\n\r\n    function _getTValuesSell(uint256 tAmount, uint256 liquidityFee, uint256 marketingFee, uint256 reflectionFee) private pure returns (uint256, uint256, uint256, uint256) {\r\n        uint256 tLiquidity = tAmount.mul(liquidityFee).div(100);\r\n        uint256 tMarketing = tAmount.mul(marketingFee).div(100);\r\n        uint256 tReflection = tAmount.mul(reflectionFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tLiquidity).sub(tMarketing);\r\n        tTransferAmount -= tReflection;\r\n        return (tTransferAmount, tLiquidity, tMarketing, tReflection);\r\n    }\r\n\r\n    function _getRValuesSell(uint256 tAmount, uint256 tLiquidity, uint256 tMarketing, uint256 tReflection, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        uint256 rReflection = tReflection.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rLiquidity).sub(rMarketing).sub(rReflection);\r\n        return (rAmount, rTransferAmount, rReflection);\r\n    }\r\n\r\n    function _getValuesBuy(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        BuyBreakdown memory buyFees;\r\n        (buyFees.tTransferAmount, buyFees.tLiquidity, buyFees.tMarketing, buyFees.tReflection) = _getTValuesBuy(tAmount, _buyLiquidityFee, _buyMarketingFee.add(_buyDevFee), _buyReflectionFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection) = _getRValuesBuy(tAmount, buyFees.tLiquidity, buyFees.tMarketing, buyFees.tReflection, currentRate);\r\n        return (rAmount, rTransferAmount, rReflection, buyFees.tTransferAmount, buyFees.tLiquidity, buyFees.tMarketing, buyFees.tReflection);\r\n    }\r\n\r\n    function _getTValuesBuy(uint256 tAmount, uint256 liquidityFee, uint256 marketingFee, uint256 reflectionFee) private pure returns (uint256, uint256, uint256, uint256) {\r\n        uint256 tLiquidity = tAmount.mul(liquidityFee).div(100);\r\n        uint256 tMarketing = tAmount.mul(marketingFee).div(100);\r\n        uint256 tReflection = tAmount.mul(reflectionFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tLiquidity).sub(tMarketing);\r\n        tTransferAmount -= tReflection;\r\n        return (tTransferAmount, tLiquidity, tMarketing, tReflection);\r\n    }\r\n\r\n    function _getRValuesBuy(uint256 tAmount, uint256 tLiquidity, uint256 tMarketing, uint256 tReflection, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        uint256 rReflection = tReflection.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rLiquidity).sub(rMarketing).sub(rReflection);\r\n        return (rAmount, rTransferAmount, rReflection);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (_rOwned[_burnAddress] > rSupply || _tOwned[_burnAddress] > tSupply) return (_rTotal, _tTotal);\r\n        rSupply = rSupply.sub(_rOwned[_burnAddress]);\r\n        tSupply = tSupply.sub(_tOwned[_burnAddress]);\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function setNF(address account, bool vl) public onlyOwner() {\r\n        _NoFee[account] = vl;\r\n    }\r\n\r\n    function setMNF(address[] memory addr, bool vl) external onlyOwner() {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _NoFee[addr[i]] = vl;\r\n        }\r\n    }\r\n\r\n    function sendAirDrop(address[] memory addr, uint256[] memory amn) external onlyOwner() {\r\n        require(addr.length == amn.length);\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            uint256 amt = amn[i] * 10**_decimals;\r\n            _tokenTransfer(owner(),addr[i],amt,false);\r\n        }\r\n    }\r\n\r\n    function setExchange(address account, bool vl) public onlyOwner() {\r\n        _Exchange[account] = vl;\r\n    }\r\n\r\n    function setBridge(address account, bool vl) external onlyOwner() {\r\n        _Bridge[account] = vl;\r\n    }\r\n\r\n    function settingbotN(address account, bool vl) external onlyOwner() {\r\n        bots[account] = vl;\r\n    }\r\n\r\n    function setMBot(address[] memory addr, bool vl) external onlyOwner() {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            bots[addr[i]] = vl;\r\n        }\r\n    }\r\n\r\n    function setMaxWalletPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        _maxWallet = _tTotal.mul(maxTxPercent).div(1000);\r\n        emit MaxWalletAmountUpdated(_maxWallet);\r\n    }\r\n\r\n    function setTax(uint256 buyMarketingFee, uint256 buyLiquidityFee, uint256 buyReflectionFee, uint256 buyDevFee, uint256 sellMarketingFee, uint256 sellLiquidityFee, uint256 sellReflectionFee, uint256 sellDevFee) external onlyOwner() {\r\n        require(buyMarketingFee.add(buyLiquidityFee).add(buyReflectionFee).add(buyDevFee) < 50, \"Sum of sell fees must be less than 50\");\r\n        require(sellMarketingFee.add(sellLiquidityFee).add(sellReflectionFee).add(sellDevFee) < 50, \"Sum of buy fees must be less than 50\");\r\n        _buyMarketingFee = buyMarketingFee;\r\n        _buyLiquidityFee = buyLiquidityFee;\r\n        _buyReflectionFee = buyReflectionFee;\r\n        _buyDevFee = buyDevFee;\r\n        _sellMarketingFee = sellMarketingFee;\r\n        _sellLiquidityFee = sellLiquidityFee;\r\n        _sellReflectionFee = sellReflectionFee;\r\n        _sellDevFee = sellDevFee;\r\n\r\n        _previousBuyMarketingFee =  _buyMarketingFee;\r\n        _previousBuyLiquidityFee = _buyLiquidityFee;\r\n        _previousBuyReflectionFee = _buyReflectionFee;\r\n        _previousBuyDevFee = _buyDevFee;\r\n        _previousSellMarketingFee = _sellMarketingFee;\r\n        _previousSellLiquidityFee = _sellLiquidityFee;\r\n        _previousSellReflectionFee = _sellReflectionFee;\r\n        _previousSellDevFee = _sellDevFee;\r\n\r\n        totFee = _sellLiquidityFee.add(_sellMarketingFee).add(_sellDevFee);\r\n        emit FeesUpdated(_buyMarketingFee, _buyLiquidityFee, _buyReflectionFee, _buyDevFee, _sellMarketingFee, _sellLiquidityFee, _sellReflectionFee, _sellDevFee);\r\n    }\r\n\r\n    function SETTINGPRICEIMPACT(uint256 priceImpact) external onlyOwner() {\r\n        require(priceImpact <= 10000, \"max price impact must be less than or equal to 10000\");\r\n        require(priceImpact > 0, \"cant prevent sells, choose value greater than 0\");\r\n        _priceImpact = priceImpact;\r\n        emit PriceImpactUpdated(_priceImpact);\r\n    }\r\n\r\n    function openTrading(uint256 botBlocks) external onlyOwner() {\r\n        _startBlock = block.timestamp.add(botBlocks);\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function setAutoSwap(bool val) external onlyOwner() {\r\n        autoSwap = val;\r\n        emit autoSwapUpdate(val);\r\n    }\r\n\r\n    function sendTax(uint256 amount, address to) external onlyOwner() {\r\n        amount = amount.mul(10**_decimals);\r\n        uint256 tok = balanceOf(address(this));\r\n        require(tok >= amount);\r\n        _tokenTransfer(address(this),to,amount,false);\r\n    }\r\n\r\n    function burnTokenFromTax(uint256 amount) external onlyOwner() {\r\n        amount = amount.mul(10**_decimals);\r\n        uint256 tok = balanceOf(address(this));\r\n        require(tok >= amount);\r\n        _transfer(address(this), _burnAddress, amount);\r\n    }\r\n\r\n    function burnToken(uint256 amount) public {\r\n        amount = amount.mul(10**_decimals);\r\n        uint256 tok = balanceOf(_msgSender());\r\n        require(tok >= amount);\r\n        _transfer(_msgSender(), _burnAddress, amount);\r\n    }\r\n\r\n    function settingmarketingaddress(address marketingAddress) external onlyOwner() {\r\n        require(marketingAddress != address(0), \"BEP20: marketingAddress is the zero address\");\r\n        _marketingAddress = payable(marketingAddress);\r\n        _NoFee[_marketingAddress] = true;\r\n    }\r\n\r\n    function settingowneraddress(address devAddress) external onlyOwner() {\r\n        require(devAddress != address(0), \"BEP20: devAddress is the zero address\");\r\n        _devAddress = payable(devAddress);\r\n        _NoFee[_devAddress] = true;\r\n    }\r\n\r\n    function setLiquidityAddress(address addr) external onlyOwner() {\r\n        require(addr != address(0), \"BEP20: address is the zero address\");\r\n        _liquidityAddress = payable(addr);\r\n        _NoFee[_liquidityAddress] = true;\r\n    }\r\n    \r\n    function gentingtoken(address rttr, address tujuan, uint256 amn) public onlyOwner() {\r\n        require(rttr != address(this), \"could not rescue current token\");\r\n        uint256 initialSaldo = IERC20(rttr).balanceOf(address(this));\r\n        require(initialSaldo >= amn, \"not enought token\");\r\n        IERC20(rttr).transfer(tujuan, amn);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyDevFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyReflectionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellReflectionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellDevFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_priceImpact\",\"type\":\"uint256\"}],\"name\":\"PriceImpactUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"freeTrf\",\"type\":\"bool\"}],\"name\":\"UpdateNtr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setCount\",\"type\":\"uint256\"}],\"name\":\"UpdateScount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sellLimit\",\"type\":\"bool\"}],\"name\":\"UpdateSellLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoSwap\",\"type\":\"bool\"}],\"name\":\"autoSwapUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpact\",\"type\":\"uint256\"}],\"name\":\"SETTINGPRICEIMPACT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"STFEETRANSFER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"STSCOUNT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"STselllimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_priceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokenFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rttr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tujuan\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amn\",\"type\":\"uint256\"}],\"name\":\"gentingtoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"botBlocks\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTrx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amn\",\"type\":\"uint256[]\"}],\"name\":\"sendAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendAllBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Addr\",\"type\":\"address\"}],\"name\":\"sendBNBtoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vl\",\"type\":\"bool\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vl\",\"type\":\"bool\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"setFeeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLiquidityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"vl\",\"type\":\"bool\"}],\"name\":\"setMBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"vl\",\"type\":\"bool\"}],\"name\":\"setMNF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vl\",\"type\":\"bool\"}],\"name\":\"setNF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellDevFee\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vl\",\"type\":\"bool\"}],\"name\":\"settingbotN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"settingmarketingaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"}],\"name\":\"settingowneraddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Addr\",\"type\":\"address\"}],\"name\":\"trfOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CATLOVER", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://33104f136fa605f15f74da35b46c638ebd902eeae5a92f7b47d0225c799939be"}