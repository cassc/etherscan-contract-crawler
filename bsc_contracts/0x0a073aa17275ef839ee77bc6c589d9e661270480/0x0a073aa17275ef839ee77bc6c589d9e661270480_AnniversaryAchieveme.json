{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AnniversaryAchevement.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at BscScan.com on 2021-09-22\\n*/\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/AccessControl.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Counters.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/introspection/IERC165.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/ERC721Holder.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\\n// File: bsc-library/contracts/IBEP20.sol\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: bsc-library/contracts/SafeBEP20.sol\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeBEP20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n// File: contracts/PancakeProfile.sol\\n\\npragma solidity ^0.6.0;\\n\\n/** @title PancakeProfile.\\n * @notice It is a contract for users to bind their address\\n * to a customizable profile by depositing a NFT.\\n */\\ncontract PancakeProfile is AccessControl, ERC721Holder {\\n    using Counters for Counters.Counter;\\n    using SafeBEP20 for IBEP20;\\n    using SafeMath for uint256;\\n\\n    IBEP20 public cakeToken;\\n\\n    bytes32 public constant NFT_ROLE = keccak256(\\\"NFT_ROLE\\\");\\n    bytes32 public constant POINT_ROLE = keccak256(\\\"POINT_ROLE\\\");\\n    bytes32 public constant SPECIAL_ROLE = keccak256(\\\"SPECIAL_ROLE\\\");\\n\\n    uint256 public numberActiveProfiles;\\n    uint256 public numberCakeToReactivate;\\n    uint256 public numberCakeToRegister;\\n    uint256 public numberCakeToUpdate;\\n    uint256 public numberTeams;\\n\\n    mapping(address => bool) public hasRegistered;\\n\\n    mapping(uint256 => Team) private teams;\\n    mapping(address => User) private users;\\n\\n    // Used for generating the teamId\\n    Counters.Counter private _countTeams;\\n\\n    // Used for generating the userId\\n    Counters.Counter private _countUsers;\\n\\n    // Event to notify a new team is created\\n    event TeamAdd(uint256 teamId, string teamName);\\n\\n    // Event to notify that team points are increased\\n    event TeamPointIncrease(uint256 indexed teamId, uint256 numberPoints, uint256 indexed campaignId);\\n\\n    event UserChangeTeam(address indexed userAddress, uint256 oldTeamId, uint256 newTeamId);\\n\\n    // Event to notify that a user is registered\\n    event UserNew(address indexed userAddress, uint256 teamId, address nftAddress, uint256 tokenId);\\n\\n    // Event to notify a user pausing her profile\\n    event UserPause(address indexed userAddress, uint256 teamId);\\n\\n    // Event to notify that user points are increased\\n    event UserPointIncrease(address indexed userAddress, uint256 numberPoints, uint256 indexed campaignId);\\n\\n    // Event to notify that a list of users have an increase in points\\n    event UserPointIncreaseMultiple(address[] userAddresses, uint256 numberPoints, uint256 indexed campaignId);\\n\\n    // Event to notify that a user is reactivating her profile\\n    event UserReactivate(address indexed userAddress, uint256 teamId, address nftAddress, uint256 tokenId);\\n\\n    // Event to notify that a user is pausing her profile\\n    event UserUpdate(address indexed userAddress, address nftAddress, uint256 tokenId);\\n\\n    // Modifier for admin roles\\n    modifier onlyOwner() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Not the main admin\\\");\\n        _;\\n    }\\n\\n    // Modifier for point roles\\n    modifier onlyPoint() {\\n        require(hasRole(POINT_ROLE, _msgSender()), \\\"Not a point admin\\\");\\n        _;\\n    }\\n\\n    // Modifier for special roles\\n    modifier onlySpecial() {\\n        require(hasRole(SPECIAL_ROLE, _msgSender()), \\\"Not a special admin\\\");\\n        _;\\n    }\\n\\n    struct Team {\\n        string teamName;\\n        string teamDescription;\\n        uint256 numberUsers;\\n        uint256 numberPoints;\\n        bool isJoinable;\\n    }\\n\\n    struct User {\\n        uint256 userId;\\n        uint256 numberPoints;\\n        uint256 teamId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        bool isActive;\\n    }\\n\\n    constructor(\\n        IBEP20 _cakeToken,\\n        uint256 _numberCakeToReactivate,\\n        uint256 _numberCakeToRegister,\\n        uint256 _numberCakeToUpdate\\n    ) public {\\n        cakeToken = _cakeToken;\\n        numberCakeToReactivate = _numberCakeToReactivate;\\n        numberCakeToRegister = _numberCakeToRegister;\\n        numberCakeToUpdate = _numberCakeToUpdate;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev To create a user profile. It sends the NFT to the contract\\n     * and sends CAKE to burn address. Requires 2 token approvals.\\n     */\\n    function createProfile(\\n        uint256 _teamId,\\n        address _nftAddress,\\n        uint256 _tokenId\\n    ) external {\\n        require(!hasRegistered[_msgSender()], \\\"Already registered\\\");\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"Invalid teamId\\\");\\n        require(teams[_teamId].isJoinable, \\\"Team not joinable\\\");\\n        require(hasRole(NFT_ROLE, _nftAddress), \\\"NFT address invalid\\\");\\n\\n        // Loads the interface to deposit the NFT contract\\n        IERC721 nftToken = IERC721(_nftAddress);\\n\\n        require(_msgSender() == nftToken.ownerOf(_tokenId), \\\"Only NFT owner can register\\\");\\n\\n        // Transfer NFT to this contract\\n        nftToken.safeTransferFrom(_msgSender(), address(this), _tokenId);\\n\\n        // Transfer CAKE tokens to this contract\\n        cakeToken.safeTransferFrom(_msgSender(), address(this), numberCakeToRegister);\\n\\n        // Increment the _countUsers counter and get userId\\n        _countUsers.increment();\\n        uint256 newUserId = _countUsers.current();\\n\\n        // Add data to the struct for newUserId\\n        users[_msgSender()] = User({\\n        userId: newUserId,\\n        numberPoints: 0,\\n        teamId: _teamId,\\n        nftAddress: _nftAddress,\\n        tokenId: _tokenId,\\n        isActive: true\\n        });\\n\\n        // Update registration status\\n        hasRegistered[_msgSender()] = true;\\n\\n        // Update number of active profiles\\n        numberActiveProfiles = numberActiveProfiles.add(1);\\n\\n        // Increase the number of users for the team\\n        teams[_teamId].numberUsers = teams[_teamId].numberUsers.add(1);\\n\\n        // Emit an event\\n        emit UserNew(_msgSender(), _teamId, _nftAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @dev To pause user profile. It releases the NFT.\\n     * Callable only by registered users.\\n     */\\n    function pauseProfile() external {\\n        require(hasRegistered[_msgSender()], \\\"Has not registered\\\");\\n\\n        // Checks whether user has already paused\\n        require(users[_msgSender()].isActive, \\\"User not active\\\");\\n\\n        // Change status of user to make it inactive\\n        users[_msgSender()].isActive = false;\\n\\n        // Retrieve the teamId of the user calling\\n        uint256 userTeamId = users[_msgSender()].teamId;\\n\\n        // Reduce number of active users and team users\\n        teams[userTeamId].numberUsers = teams[userTeamId].numberUsers.sub(1);\\n        numberActiveProfiles = numberActiveProfiles.sub(1);\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftToken = IERC721(users[_msgSender()].nftAddress);\\n\\n        // tokenId of NFT redeemed\\n        uint256 redeemedTokenId = users[_msgSender()].tokenId;\\n\\n        // Change internal statuses as extra safety\\n        users[_msgSender()].nftAddress = address(0x0000000000000000000000000000000000000000);\\n\\n        users[_msgSender()].tokenId = 0;\\n\\n        // Transfer the NFT back to the user\\n        nftToken.safeTransferFrom(address(this), _msgSender(), redeemedTokenId);\\n\\n        // Emit event\\n        emit UserPause(_msgSender(), userTeamId);\\n    }\\n\\n    /**\\n     * @dev To update user profile.\\n     * Callable only by registered users.\\n     */\\n    function updateProfile(address _nftAddress, uint256 _tokenId) external {\\n        require(hasRegistered[_msgSender()], \\\"Has not registered\\\");\\n        require(hasRole(NFT_ROLE, _nftAddress), \\\"NFT address invalid\\\");\\n        require(users[_msgSender()].isActive, \\\"User not active\\\");\\n\\n        address currentAddress = users[_msgSender()].nftAddress;\\n        uint256 currentTokenId = users[_msgSender()].tokenId;\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftNewToken = IERC721(_nftAddress);\\n\\n        require(_msgSender() == nftNewToken.ownerOf(_tokenId), \\\"Only NFT owner can update\\\");\\n\\n        // Transfer token to new address\\n        nftNewToken.safeTransferFrom(_msgSender(), address(this), _tokenId);\\n\\n        // Transfer CAKE token to this address\\n        cakeToken.safeTransferFrom(_msgSender(), address(this), numberCakeToUpdate);\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftCurrentToken = IERC721(currentAddress);\\n\\n        // Transfer old token back to the owner\\n        nftCurrentToken.safeTransferFrom(address(this), _msgSender(), currentTokenId);\\n\\n        // Update mapping in storage\\n        users[_msgSender()].nftAddress = _nftAddress;\\n        users[_msgSender()].tokenId = _tokenId;\\n\\n        emit UserUpdate(_msgSender(), _nftAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @dev To reactivate user profile.\\n     * Callable only by registered users.\\n     */\\n    function reactivateProfile(address _nftAddress, uint256 _tokenId) external {\\n        require(hasRegistered[_msgSender()], \\\"Has not registered\\\");\\n        require(hasRole(NFT_ROLE, _nftAddress), \\\"NFT address invalid\\\");\\n        require(!users[_msgSender()].isActive, \\\"User is active\\\");\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftToken = IERC721(_nftAddress);\\n        require(_msgSender() == nftToken.ownerOf(_tokenId), \\\"Only NFT owner can update\\\");\\n\\n        // Transfer to this address\\n        cakeToken.safeTransferFrom(_msgSender(), address(this), numberCakeToReactivate);\\n\\n        // Transfer NFT to contract\\n        nftToken.safeTransferFrom(_msgSender(), address(this), _tokenId);\\n\\n        // Retrieve teamId of the user\\n        uint256 userTeamId = users[_msgSender()].teamId;\\n\\n        // Update number of users for the team and number of active profiles\\n        teams[userTeamId].numberUsers = teams[userTeamId].numberUsers.add(1);\\n        numberActiveProfiles = numberActiveProfiles.add(1);\\n\\n        // Update user statuses\\n        users[_msgSender()].isActive = true;\\n        users[_msgSender()].nftAddress = _nftAddress;\\n        users[_msgSender()].tokenId = _tokenId;\\n\\n        // Emit event\\n        emit UserReactivate(_msgSender(), userTeamId, _nftAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @dev To increase the number of points for a user.\\n     * Callable only by point admins\\n     */\\n    function increaseUserPoints(\\n        address _userAddress,\\n        uint256 _numberPoints,\\n        uint256 _campaignId\\n    ) external onlyPoint {\\n        // Increase the number of points for the user\\n        users[_userAddress].numberPoints = users[_userAddress].numberPoints.add(_numberPoints);\\n\\n        emit UserPointIncrease(_userAddress, _numberPoints, _campaignId);\\n    }\\n\\n    /**\\n     * @dev To increase the number of points for a set of users.\\n     * Callable only by point admins\\n     */\\n    function increaseUserPointsMultiple(\\n        address[] calldata _userAddresses,\\n        uint256 _numberPoints,\\n        uint256 _campaignId\\n    ) external onlyPoint {\\n        require(_userAddresses.length < 1001, \\\"Length must be < 1001\\\");\\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\\n            users[_userAddresses[i]].numberPoints = users[_userAddresses[i]].numberPoints.add(_numberPoints);\\n        }\\n        emit UserPointIncreaseMultiple(_userAddresses, _numberPoints, _campaignId);\\n    }\\n\\n    /**\\n     * @dev To increase the number of points for a team.\\n     * Callable only by point admins\\n     */\\n\\n    function increaseTeamPoints(\\n        uint256 _teamId,\\n        uint256 _numberPoints,\\n        uint256 _campaignId\\n    ) external onlyPoint {\\n        // Increase the number of points for the team\\n        teams[_teamId].numberPoints = teams[_teamId].numberPoints.add(_numberPoints);\\n\\n        emit TeamPointIncrease(_teamId, _numberPoints, _campaignId);\\n    }\\n\\n    /**\\n     * @dev To remove the number of points for a user.\\n     * Callable only by point admins\\n     */\\n    function removeUserPoints(address _userAddress, uint256 _numberPoints) external onlyPoint {\\n        // Increase the number of points for the user\\n        users[_userAddress].numberPoints = users[_userAddress].numberPoints.sub(_numberPoints);\\n    }\\n\\n    /**\\n     * @dev To remove a set number of points for a set of users.\\n     */\\n    function removeUserPointsMultiple(address[] calldata _userAddresses, uint256 _numberPoints) external onlyPoint {\\n        require(_userAddresses.length < 1001, \\\"Length must be < 1001\\\");\\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\\n            users[_userAddresses[i]].numberPoints = users[_userAddresses[i]].numberPoints.sub(_numberPoints);\\n        }\\n    }\\n\\n    /**\\n     * @dev To remove the number of points for a team.\\n     * Callable only by point admins\\n     */\\n\\n    function removeTeamPoints(uint256 _teamId, uint256 _numberPoints) external onlyPoint {\\n        // Increase the number of points for the team\\n        teams[_teamId].numberPoints = teams[_teamId].numberPoints.sub(_numberPoints);\\n    }\\n\\n    /**\\n     * @dev To add a NFT contract address for users to set their profile.\\n     * Callable only by owner admins.\\n     */\\n    function addNftAddress(address _nftAddress) external onlyOwner {\\n        require(IERC721(_nftAddress).supportsInterface(0x80ac58cd), \\\"Not ERC721\\\");\\n        grantRole(NFT_ROLE, _nftAddress);\\n    }\\n\\n    /**\\n     * @dev Add a new teamId\\n     * Callable only by owner admins.\\n     */\\n    function addTeam(string calldata _teamName, string calldata _teamDescription) external onlyOwner {\\n        // Verify length is between 3 and 16\\n        bytes memory strBytes = bytes(_teamName);\\n        require(strBytes.length < 20, \\\"Must be < 20\\\");\\n        require(strBytes.length > 3, \\\"Must be > 3\\\");\\n\\n        // Increment the _countTeams counter and get teamId\\n        _countTeams.increment();\\n        uint256 newTeamId = _countTeams.current();\\n\\n        // Add new team data to the struct\\n        teams[newTeamId] = Team({\\n        teamName: _teamName,\\n        teamDescription: _teamDescription,\\n        numberUsers: 0,\\n        numberPoints: 0,\\n        isJoinable: true\\n        });\\n\\n        numberTeams = newTeamId;\\n        emit TeamAdd(newTeamId, _teamName);\\n    }\\n\\n    /**\\n     * @dev Function to change team.\\n     * Callable only by special admins.\\n     */\\n    function changeTeam(address _userAddress, uint256 _newTeamId) external onlySpecial {\\n        require(hasRegistered[_userAddress], \\\"User doesn't exist\\\");\\n        require((_newTeamId <= numberTeams) && (_newTeamId > 0), \\\"teamId doesn't exist\\\");\\n        require(teams[_newTeamId].isJoinable, \\\"Team not joinable\\\");\\n        require(users[_userAddress].teamId != _newTeamId, \\\"Already in the team\\\");\\n\\n        // Get old teamId\\n        uint256 oldTeamId = users[_userAddress].teamId;\\n\\n        // Change number of users in old team\\n        teams[oldTeamId].numberUsers = teams[oldTeamId].numberUsers.sub(1);\\n\\n        // Change teamId in user mapping\\n        users[_userAddress].teamId = _newTeamId;\\n\\n        // Change number of users in new team\\n        teams[_newTeamId].numberUsers = teams[_newTeamId].numberUsers.add(1);\\n\\n        emit UserChangeTeam(_userAddress, oldTeamId, _newTeamId);\\n    }\\n\\n    /**\\n     * @dev Claim CAKE to burn later.\\n     * Callable only by owner admins.\\n     */\\n    function claimFee(uint256 _amount) external onlyOwner {\\n        cakeToken.safeTransfer(_msgSender(), _amount);\\n    }\\n\\n    /**\\n     * @dev Make a team joinable again.\\n     * Callable only by owner admins.\\n     */\\n    function makeTeamJoinable(uint256 _teamId) external onlyOwner {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n        teams[_teamId].isJoinable = true;\\n    }\\n\\n    /**\\n     * @dev Make a team not joinable.\\n     * Callable only by owner admins.\\n     */\\n    function makeTeamNotJoinable(uint256 _teamId) external onlyOwner {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n        teams[_teamId].isJoinable = false;\\n    }\\n\\n    /**\\n     * @dev Rename a team\\n     * Callable only by owner admins.\\n     */\\n    function renameTeam(\\n        uint256 _teamId,\\n        string calldata _teamName,\\n        string calldata _teamDescription\\n    ) external onlyOwner {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n\\n        // Verify length is between 3 and 16\\n        bytes memory strBytes = bytes(_teamName);\\n        require(strBytes.length < 20, \\\"Must be < 20\\\");\\n        require(strBytes.length > 3, \\\"Must be > 3\\\");\\n\\n        teams[_teamId].teamName = _teamName;\\n        teams[_teamId].teamDescription = _teamDescription;\\n    }\\n\\n    /**\\n     * @dev Update the number of CAKE to register\\n     * Callable only by owner admins.\\n     */\\n    function updateNumberCake(\\n        uint256 _newNumberCakeToReactivate,\\n        uint256 _newNumberCakeToRegister,\\n        uint256 _newNumberCakeToUpdate\\n    ) external onlyOwner {\\n        numberCakeToReactivate = _newNumberCakeToReactivate;\\n        numberCakeToRegister = _newNumberCakeToRegister;\\n        numberCakeToUpdate = _newNumberCakeToUpdate;\\n    }\\n\\n    /**\\n     * @dev Check the user's profile for a given address\\n     */\\n    function getUserProfile(address _userAddress)\\n    external\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256,\\n        bool\\n    )\\n    {\\n        require(hasRegistered[_userAddress], \\\"Not registered\\\");\\n        return (\\n        users[_userAddress].userId,\\n        users[_userAddress].numberPoints,\\n        users[_userAddress].teamId,\\n        users[_userAddress].nftAddress,\\n        users[_userAddress].tokenId,\\n        users[_userAddress].isActive\\n        );\\n    }\\n\\n    /**\\n     * @dev Check the user's status for a given address\\n     */\\n    function getUserStatus(address _userAddress) external view returns (bool) {\\n        return (users[_userAddress].isActive);\\n    }\\n\\n    /**\\n     * @dev Check a team's profile\\n     */\\n    function getTeamProfile(uint256 _teamId)\\n    external\\n    view\\n    returns (\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        bool\\n    )\\n    {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n        return (\\n        teams[_teamId].teamName,\\n        teams[_teamId].teamDescription,\\n        teams[_teamId].numberUsers,\\n        teams[_teamId].numberPoints,\\n        teams[_teamId].isJoinable\\n        );\\n    }\\n}\\n\\n// File: contracts/AnniversaryAchievement.sol\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title AnniversaryAchievement.\\n * @notice It is a contract to distribute points for 1st anniversary.\\n */\\ncontract AnniversaryAchievement is Ownable {\\n    PancakeProfile public pancakeProfile;\\n\\n    uint256 public campaignId;\\n    uint256 public numberPoints;\\n    uint256 public thresholdPoints;\\n    uint256 public endTimestamp;\\n\\n    bool public isClaiming;\\n\\n    // Map if address has already claimed points\\n    mapping(address => bool) public hasClaimed;\\n\\n    event NewCampaignId(uint256 campaignId);\\n    event NewEndTimestamp(uint256 endTimestamp);\\n    event NewNumberPointsAndThreshold(uint256 numberPoints, uint256 thresholdPoints);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _pancakeProfile: Pancake Profile\\n     * @param _numberPoints: number of points to give\\n     * @param _thresholdPoints: number of points required to claim\\n     * @param _campaignId: campaign id\\n     * @param _endTimestamp: end timestamp for claiming\\n     */\\n    constructor(\\n        address _pancakeProfile,\\n        uint256 _numberPoints,\\n        uint256 _thresholdPoints,\\n        uint256 _campaignId,\\n        uint256 _endTimestamp\\n    ) public {\\n        pancakeProfile = PancakeProfile(_pancakeProfile);\\n        numberPoints = _numberPoints;\\n        thresholdPoints = _thresholdPoints;\\n        campaignId = _campaignId;\\n        endTimestamp = _endTimestamp;\\n    }\\n\\n    /**\\n     * @notice Get anniversary points\\n     * @dev Users can claim these once.\\n     */\\n    function claimAnniversaryPoints() external {\\n        require(canClaim(msg.sender), \\\"Claim: Cannot claim\\\");\\n\\n        hasClaimed[msg.sender] = true;\\n\\n        pancakeProfile.increaseUserPoints(msg.sender, numberPoints, campaignId);\\n    }\\n\\n    /**\\n     * @notice Change campaignId\\n     * @dev Only callable by owner.\\n     * @param _campaignId: campaign id\\n     */\\n    function changeCampaignId(uint256 _campaignId) external onlyOwner {\\n        campaignId = _campaignId;\\n\\n        emit NewCampaignId(_campaignId);\\n    }\\n\\n    /**\\n     * @notice Change end block for distribution\\n     * @dev Only callable by owner.\\n     * @param _endTimestamp: end timestamp for claiming\\n     */\\n    function changeEndTimestamp(uint256 _endTimestamp) external onlyOwner {\\n        endTimestamp = _endTimestamp;\\n\\n        emit NewEndTimestamp(_endTimestamp);\\n    }\\n\\n    /**\\n     * @notice Change points and threshold\\n     * @dev Only callable by owner.\\n     * @param _numberPoints: number of points to give\\n     * @param _thresholdPoints: number of points required to claim\\n     */\\n    function changeNumberPointsAndThreshold(uint256 _numberPoints, uint256 _thresholdPoints) external onlyOwner {\\n        numberPoints = _numberPoints;\\n        thresholdPoints = _thresholdPoints;\\n\\n        emit NewNumberPointsAndThreshold(_numberPoints, _thresholdPoints);\\n    }\\n\\n    /**\\n     * @notice Checks the claim status by user\\n     * @dev Only callable by owner.\\n     * @param _user: user address\\n     */\\n    function canClaim(address _user) public view returns (bool) {\\n        if (!pancakeProfile.getUserStatus(_user)) {\\n            return false;\\n        }\\n\\n        (, uint256 numberUserPoints, , , , ) = pancakeProfile.getUserProfile(_user);\\n\\n        return (!hasClaimed[_user]) && (block.timestamp < endTimestamp) && (numberUserPoints >= thresholdPoints) && !isClaiming;\\n    }\\n\\n    /**\\n     * @notice Stop the claiming prematurely\\n     * @dev only called by admin\\n     */\\n    function stopClaiming() public onlyOwner {\\n        isClaiming = true;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeProfile\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numberPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"NewCampaignId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"NewEndTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdPoints\",\"type\":\"uint256\"}],\"name\":\"NewNumberPointsAndThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"campaignId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"changeCampaignId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeEndTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdPoints\",\"type\":\"uint256\"}],\"name\":\"changeNumberPointsAndThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAnniversaryPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaiming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeProfile\",\"outputs\":[{\"internalType\":\"contract PancakeProfile\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopClaiming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnniversaryAchievement", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "000000000000000000000000df4dbf6536201370f95e06a0f8a7a70fe40e388a00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000001ec1fe3100000000000000000000000000000000000000000000000000000000650b1700", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}