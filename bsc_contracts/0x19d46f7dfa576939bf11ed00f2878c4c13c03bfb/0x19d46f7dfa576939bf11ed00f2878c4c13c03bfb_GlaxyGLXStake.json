{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IBEP20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract GlaxyGLXStake {\r\n    address public owner;\r\n    IBEP20 public token;\r\n    IBEP20 public usdtToken;\r\n    bool public paused;\r\n    uint256 decimals = 18;\r\n    uint256 decimalFactor = 10**uint256(decimals);\r\n    uint256 public registrationFees = 3 * decimalFactor;\r\n    uint256 public minimumStakingAmount = 20;\r\n\r\n    struct UserInfo {\r\n        bool registered;\r\n        uint256 stakedAmount;\r\n    }\r\n\r\n    mapping(address => UserInfo) public users;\r\n\r\n    mapping(address => bool) public frozenAccount;\r\n    event FrozenFunds(address target, bool frozen);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address _tokenAddress, address _usdtTokenAddress) {\r\n        owner = msg.sender;\r\n        token = IBEP20(_tokenAddress);\r\n        usdtToken = IBEP20(_usdtTokenAddress);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setRegistrationFees(uint256 _registrationFees) public onlyOwner {\r\n        registrationFees = _registrationFees;\r\n    }\r\n\r\n    function setPause(bool _value) public onlyOwner {\r\n        paused = _value;\r\n    }\r\n\r\n    function getTokenBalance() public view returns (uint) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getUSDTBalance() public view returns (uint) {\r\n        return usdtToken.balanceOf(address(this));\r\n    }\r\n\r\n    function registerwithGLX() external {\r\n        require(!users[msg.sender].registered, \"User is already registered\");\r\n        uint256 glxBalance = token.balanceOf(msg.sender);\r\n        require(glxBalance >= registrationFees, \"Insufficient GLX balance\");\r\n\r\n        bool tokenTransferSuccess = token.transferFrom(msg.sender, address(this), registrationFees);\r\n        require(tokenTransferSuccess, \"Token transfer failed\");\r\n\r\n        users[msg.sender].registered = true;\r\n    }\r\n\r\n    function registerwithUSDT() external {\r\n        require(!users[msg.sender].registered, \"User is already registered\");\r\n        uint256 usdtBalance = usdtToken.balanceOf(msg.sender);\r\n        require(usdtBalance >= registrationFees, \"Insufficient GLX balance\");\r\n\r\n        bool tokenTransferSuccess = usdtToken.transferFrom(msg.sender, address(this), registrationFees);\r\n        require(tokenTransferSuccess, \"Token transfer failed\");\r\n\r\n        users[msg.sender].registered = true;\r\n    }\r\n\r\n    \r\n    function stakeWithGLX(uint256 _glxAmount) external {\r\n        require(users[msg.sender].registered, \"User must register before staking\");\r\n        require(_glxAmount >= minimumStakingAmount * decimalFactor, \"Minimum staking amount should be 20$\");\r\n        uint256 balance = usdtToken.balanceOf(msg.sender);\r\n        require(balance >= _glxAmount, \"Insufficient balance\");\r\n\r\n        bool tokenTransferSuccess = token.transferFrom(msg.sender, address(this), _glxAmount);\r\n        require(tokenTransferSuccess, \"Token transfer failed\");\r\n\r\n        // Update the staked amount for the user\r\n        users[msg.sender].stakedAmount += _glxAmount;\r\n    }\r\n\r\n\r\n    function stakeWithUSDT(uint256 _usdtAmount) external {\r\n        require(users[msg.sender].registered, \"User must register before staking\");\r\n        require(_usdtAmount >= minimumStakingAmount * decimalFactor, \"Minimum staking amount should be 20$\");\r\n        uint256 balance = usdtToken.balanceOf(msg.sender);\r\n        require(balance >= _usdtAmount, \"Insufficient balance\");\r\n\r\n        bool tokenTransferSuccess = usdtToken.transferFrom(msg.sender, address(this), _usdtAmount);\r\n        require(tokenTransferSuccess, \"Token transfer failed\");\r\n\r\n        // Update the staked amount for the user\r\n        users[msg.sender].stakedAmount += _usdtAmount;\r\n    }\r\n\r\n    function withdrawTokensForUsers(uint256 _tokenAmount) external {\r\n        require(!frozenAccount[msg.sender], \"Account has been frozen by the admin\");\r\n        require(!paused, \"Withdraw is paused!\");\r\n        require(_tokenAmount > 0, \"Invalid token amount\");\r\n\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        require(tokenBalance >= _tokenAmount, \"Insufficient token balance in the contract\");\r\n\r\n        bool transferSuccess = token.transfer(msg.sender, _tokenAmount);\r\n        require(transferSuccess, \"Token transfer failed\");\r\n    }\r\n\r\n    function withdrawTokens(uint256 _tokenAmount) external onlyOwner {\r\n        require(_tokenAmount > 0, \"Invalid token amount\");\r\n\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        require(tokenBalance >= _tokenAmount, \"Insufficient token balance in the contract\");\r\n\r\n        bool transferSuccess = token.transfer(owner, _tokenAmount);\r\n        require(transferSuccess, \"Token transfer failed\");\r\n    }\r\n\r\n    function withdrawUSDT(uint256 _usdtAmount) external onlyOwner {\r\n        require(_usdtAmount > 0, \"Invalid USDT amount\");\r\n\r\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\r\n        require(usdtBalance >= _usdtAmount, \"Insufficient USDT balance in the contract\");\r\n\r\n        bool transferSuccess = usdtToken.transfer(owner, _usdtAmount);\r\n        require(transferSuccess, \"USDT transfer failed\");\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) public onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerwithGLX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerwithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registrationFees\",\"type\":\"uint256\"}],\"name\":\"setRegistrationFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_glxAmount\",\"type\":\"uint256\"}],\"name\":\"stakeWithGLX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"stakeWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokensForUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GlaxyGLXStake", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001b20cbfddaf63c6429c9f2a28c4a1e24b820801600000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4b4a9865c95f3de6e7603dd581fcbc1fe10d5db35cbff3e21c25c0c9773281b6"}