{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Compensation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\nimport \\\"./Dependencies.sol\\\";\\n\\ncontract Compensate is Ownable, ReentrancyGuard {\\n\\n    using SafeERC20 for IERC20;\\n\\n    bool public compensationDataWritten; // whether users compensation data is already written into the contract, can only be written once\\n    address public compensationToken; // which token is used to pay users the compensation amount\\n    address public treasury; // planet's treasury\\n    uint public currentRound; // currentRound is 1, when funds are sent first time to the contract, currentRound is 2, when funds are sent second time to the contract and so on\\n    uint[] public fundsInRound; // how much funds are part of each round\\n    uint[] public pendingInRound; // how much funds are remaining to be distributed for each round\\n    uint[] public unclaimedInRound; // how much funds have not been claimed before the deadline in each round\\n    uint public deadlineToWithdraw; // time by which tokens must be withdraw or will be sent to treasury\\n    uint public newDeadlineRound; // round uptil which tokens must be withdrawn by the deadline.\\n    uint public currentDeadlineRound; // round uptil which deadline has been hit. Users can no longer withdraw their funds up til this round.\\n    uint public totalCompensatedSoFar;\\n\\n\\n    struct UserCompensationDetail {\\n        uint whatPercentage; // what percentage of the total compensation amount is owed to the user\\n        uint userTotalCompensationAmount; // compensation amount owed to the user\\n        uint remainingAmount; // unpaid compensation amount to the user\\n        uint compensatedTillRound; // till which round has the user been compensated\\n        uint unclaimedAmount; // amount that the user won't receive because of missing the deadline\\n    }\\n\\n    mapping (address => UserCompensationDetail) public usersCompensationDetails; // map stores each users compensation details\\n\\n    event UserCompensated(address _user, uint _amountCompensated, uint _compensatedTillRound);\\n    event SetDeadline(uint _blockNumber, uint _uptilRound);\\n\\n    constructor(address _compensationToken) {\\n        compensationToken = _compensationToken; // token address of compensation token\\n    } \\n\\n    /**\\n        Function to be called by users to recieve their part of the compensation.\\n    */\\n    function compensateMe() external nonReentrant {\\n\\n        UserCompensationDetail storage userCompensationDetail = usersCompensationDetails[msg.sender];\\n        uint amountTobeCompensated; // calculating how much the user needs to recieve now\\n        uint userAmountInRound; // how much the user has to recieve in a particular round\\n        uint userUnclaimedAmount; // calculating how much the user has newly missed claiming\\n        \\n        // find what is the compensation amount that is to be sent to the user, based on the users proportions\\n        // this also loops through different rounds, so lets say if user didn't claim their compensation in round 1, round 2 and current round is 3\\n        // so the compensation amount will be calculated considering the missed claims of previous rounds as well \\n        for(uint i = userCompensationDetail.compensatedTillRound; i < currentRound; ++i){\\n            userAmountInRound = (userCompensationDetail.whatPercentage * fundsInRound[i])/1e10;\\n            if (i<currentDeadlineRound){\\n                userUnclaimedAmount += userAmountInRound;\\n                continue;\\n            }\\n            amountTobeCompensated += userAmountInRound;\\n            pendingInRound[i] -= userAmountInRound;\\n\\n        }\\n\\n        require(amountTobeCompensated > 0, \\\"already claimed\\\");\\n        require(amountTobeCompensated <= userCompensationDetail.remainingAmount, \\\"amount exceeds\\\");\\n        require(amountTobeCompensated <= IERC20(compensationToken).balanceOf(address(this)), \\\"amount > balance\\\");\\n\\n        userCompensationDetail.compensatedTillRound = currentRound; // update currentRound as users compensatedTillRound\\n        userCompensationDetail.remainingAmount -= (amountTobeCompensated + userUnclaimedAmount);\\n        userCompensationDetail.unclaimedAmount += userUnclaimedAmount;\\n    \\n        IERC20(compensationToken).safeTransfer(msg.sender, amountTobeCompensated); // transfer amount\\n\\n        emit UserCompensated(msg.sender, amountTobeCompensated, userCompensationDetail.compensatedTillRound);\\n\\n    }\\n    /**\\n        Owner will initiate next round of withdrawals with this function,\\n        takes input _funds, which is compensation amount used for the round that is being initiated\\n     */\\n    function initiateNextRoundWithdrawals(uint _funds) external onlyOwner {\\n        IERC20(compensationToken).safeTransferFrom(msg.sender, address(this), _funds); // transfer amount\\n\\n        currentRound++;\\n        //shouldn't we also have the user transfer funds in this same function?\\n        fundsInRound.push(_funds);\\n        pendingInRound.push(_funds);\\n        unclaimedInRound.push(0);\\n        totalCompensatedSoFar += _funds;\\n    }\\n\\n    /**\\n        Owner will use this function to write the users compensation data into the contract\\n     */\\n    function writeUsersCompensationData(address[] memory _usersAddressList, uint[] memory _percentageList, uint[] memory _usersCompensationList) external onlyOwner {\\n        require(_usersAddressList.length == _percentageList.length && _percentageList.length == _usersCompensationList.length, \\\"something wrong\\\");\\n        require(compensationDataWritten == false, \\\"already written\\\");\\n        \\n        compensationDataWritten = true;\\n        uint length = _usersAddressList.length;\\n\\n        for(uint i = 0; i < length; ++i) {\\n            UserCompensationDetail memory userCompensationDetail;\\n            userCompensationDetail.whatPercentage = _percentageList[i];\\n            userCompensationDetail.userTotalCompensationAmount = _usersCompensationList[i];\\n            userCompensationDetail.remainingAmount = _usersCompensationList[i];\\n\\n            usersCompensationDetails[_usersAddressList[i]] = userCompensationDetail;\\n        }\\n    }\\n\\n\\n    /**\\n        Function to set deadline by which users must withdraw compensation funds. After the deadline, funds for the corresponding rounds will be returned to treasury.\\n     */\\n    function setDeadline(uint _blockNumber, uint _uptilRound) external onlyOwner {\\n        require(_uptilRound > currentDeadlineRound, \\\"Round deadline hit\\\");\\n        deadlineToWithdraw = _blockNumber;\\n        newDeadlineRound = _uptilRound;\\n        emit SetDeadline(_blockNumber, _uptilRound);\\n    }\\n\\n    /**\\n        Function to transfer pending funds to the treasury once the deadline is hit.\\n    */\\n    function transferFundsToTreasury() external{\\n        require(block.number >= deadlineToWithdraw, \\\"too soon\\\");\\n        uint amountToReturnToTreasury;\\n        for(uint i=currentDeadlineRound; i<newDeadlineRound; ++i){\\n            amountToReturnToTreasury += pendingInRound[i];\\n            unclaimedInRound[i] = pendingInRound[i];\\n            pendingInRound[i] = 0;\\n        }\\n\\n        if (amountToReturnToTreasury>0){\\n            IERC20(compensationToken).safeTransfer(treasury, amountToReturnToTreasury); // transfer amount\\n        }\\n\\n        currentDeadlineRound = newDeadlineRound;\\n    }\\n\\n    /**\\n        Function to set treasury address\\n    */\\n    function setTreasury (address _treasury) external onlyOwner {   \\n        treasury = _treasury;\\n    }\\n\\n    /**\\n        Function to set compensation token.\\n        Alert! Only change this after deadline has been hit for all past rounds, to avoid funds getting stuck in the contract\\n    */\\n    function setCompensationToken (address _compensationToken) external onlyOwner {   \\n        compensationToken = _compensationToken;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Dependencies.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.17;\\n\\nabstract contract ReentrancyGuard {\\n \\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }    \\n}\\n\\ninterface IERC20 {\\n\\n        function totalSupply() external view returns (uint256);\\n        function balanceOf(address account) external view returns (uint256);\\n        function transfer(address recipient, uint256 amount) external returns (bool);\\n        function allowance(address owner, address spender) external view returns (uint256);\\n        function approve(address spender, uint256 amount) external returns (bool);\\n        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n        event Transfer(address indexed from, address indexed to, uint256 value);\\n        event Approval(address indexed owner, address indexed spender,uint256 value);\\n    }\\n\\nlibrary AddressUpgradeable {\\n        /**\\n        * @dev Returns true if `account` is a contract.\\n        *\\n        * [IMPORTANT]\\n        * ====\\n        * It is unsafe to assume that an address for which this function returns\\n        * false is an externally-owned account (EOA) and not a contract.\\n        *\\n        * Among others, `isContract` will return false for the following\\n        * types of addresses:\\n        *\\n        *  - an externally-owned account\\n        *  - a contract in construction\\n        *  - an address where a contract will be created\\n        *  - an address where a contract lived, but was destroyed\\n        * ====\\n        *\\n        * [IMPORTANT]\\n        * ====\\n        * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n        *\\n        * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n        * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n        * constructor.\\n        * ====\\n        */\\n        function isContract(address account) internal view returns (bool) {\\n            // This method relies on extcodesize/address.code.length, which returns 0\\n            // for contracts in construction, since the code is only stored at the end\\n            // of the constructor execution.\\n\\n            return account.code.length > 0;\\n        }\\n\\n        /**\\n        * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n        * `recipient`, forwarding all available gas and reverting on errors.\\n        *\\n        * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n        * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n        * imposed by `transfer`, making them unable to receive funds via\\n        * `transfer`. {sendValue} removes this limitation.\\n        *\\n        * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n        *\\n        * IMPORTANT: because control is transferred to `recipient`, care must be\\n        * taken to not create reentrancy vulnerabilities. Consider using\\n        * {ReentrancyGuard} or the\\n        * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n        */\\n        function sendValue(address payable recipient, uint256 amount) internal {\\n            require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n            (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n        }\\n\\n        /**\\n        * @dev Performs a Solidity function call using a low level `call`. A\\n        * plain `call` is an unsafe replacement for a function call: use this\\n        * function instead.\\n        *\\n        * If `target` reverts with a revert reason, it is bubbled up by this\\n        * function (like regular Solidity function calls).\\n        *\\n        * Returns the raw returned data. To convert to the expected return value,\\n        * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n        *\\n        * Requirements:\\n        *\\n        * - `target` must be a contract.\\n        * - calling `target` with `data` must not revert.\\n        *\\n        * _Available since v3.1._\\n        */\\n        function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n            return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n        }\\n\\n        /**\\n        * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n        * `errorMessage` as a fallback revert reason when `target` reverts.\\n        *\\n        * _Available since v3.1._\\n        */\\n        function functionCall(\\n            address target,\\n            bytes memory data,\\n            string memory errorMessage\\n        ) internal returns (bytes memory) {\\n            return functionCallWithValue(target, data, 0, errorMessage);\\n        }\\n\\n        /**\\n        * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n        * but also transferring `value` wei to `target`.\\n        *\\n        * Requirements:\\n        *\\n        * - the calling contract must have an ETH balance of at least `value`.\\n        * - the called Solidity function must be `payable`.\\n        *\\n        * _Available since v3.1._\\n        */\\n        function functionCallWithValue(\\n            address target,\\n            bytes memory data,\\n            uint256 value\\n        ) internal returns (bytes memory) {\\n            return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n        }\\n\\n        /**\\n        * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n        * with `errorMessage` as a fallback revert reason when `target` reverts.\\n        *\\n        * _Available since v3.1._\\n        */\\n        function functionCallWithValue(\\n            address target,\\n            bytes memory data,\\n            uint256 value,\\n            string memory errorMessage\\n        ) internal returns (bytes memory) {\\n            require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n            require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n            (bool success, bytes memory returndata) = target.call{value: value}(data);\\n            return verifyCallResult(success, returndata, errorMessage);\\n        }\\n\\n        /**\\n        * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n        * but performing a static call.\\n        *\\n        * _Available since v3.3._\\n        */\\n        function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n            return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n        }\\n\\n        /**\\n        * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n        * but performing a static call.\\n        *\\n        * _Available since v3.3._\\n        */\\n        function functionStaticCall(\\n            address target,\\n            bytes memory data,\\n            string memory errorMessage\\n        ) internal view returns (bytes memory) {\\n            require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n            (bool success, bytes memory returndata) = target.staticcall(data);\\n            return verifyCallResult(success, returndata, errorMessage);\\n        }\\n\\n        /**\\n        * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n        * revert reason using the provided one.\\n        *\\n        * _Available since v4.3._\\n        */\\n        function verifyCallResult(\\n            bool success,\\n            bytes memory returndata,\\n            string memory errorMessage\\n        ) internal pure returns (bytes memory) {\\n            if (success) {\\n                return returndata;\\n            } else {\\n                // Look for revert reason and bubble it up if present\\n                if (returndata.length > 0) {\\n                    // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                    assembly {\\n                        let returndata_size := mload(returndata)\\n                        revert(add(32, returndata), returndata_size)\\n                    }\\n                } else {\\n                    revert(errorMessage);\\n                }\\n            }\\n        }\\n    }\\n\\nlibrary SafeERC20 {\\n\\n        using AddressUpgradeable for address;\\n\\n        function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n        }\\n\\n        function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n        }\\n\\n        function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n            uint256 newAllowance = token.allowance(address(this), spender) + value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector,spender,newAllowance));\\n        }\\n\\n        function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n\\n            bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n            if (returndata.length > 0) {\\n                require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n            }\\n        }\\n    }\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compensationToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_uptilRound\",\"type\":\"uint256\"}],\"name\":\"SetDeadline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountCompensated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_compensatedTillRound\",\"type\":\"uint256\"}],\"name\":\"UserCompensated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"compensateMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compensationDataWritten\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compensationToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDeadlineRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlineToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundsInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_funds\",\"type\":\"uint256\"}],\"name\":\"initiateNextRoundWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newDeadlineRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compensationToken\",\"type\":\"address\"}],\"name\":\"setCompensationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uptilRound\",\"type\":\"uint256\"}],\"name\":\"setDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompensatedSoFar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimedInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersCompensationDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"whatPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTotalCompensationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compensatedTillRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_usersAddressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentageList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_usersCompensationList\",\"type\":\"uint256[]\"}],\"name\":\"writeUsersCompensationData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Compensate", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}