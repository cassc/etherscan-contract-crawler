{"SourceCode": "// File: Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence .\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n// Adding-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n// Adding-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    // Add Sqrt\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        uint256 c = (a + 1) / 2;\r\n        uint256 b = a;\r\n        while (c < b) {\r\n            b = c;\r\n            c = (a / c + c) / 2;\r\n        }\r\n        return b;\r\n    }\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n// Adding-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\SafeBEP20.sol\r\n\r\n// Adding-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeBEP20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n// File: WexRefferal.sol\r\n\r\n\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n// File: contracts\\libs\\IWEXReferral.sol\r\n\r\n// Adding-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IWedexReferral {\r\n    /**\r\n     * @dev Record referral.\r\n     */\r\n    function recordReferral(address _user, address _referrer) external;\r\n\r\n    /**\r\n     * @dev Record referral commission.\r\n     */\r\n    function recordReferralCommission(address referrer, uint256 commission)\r\n        external;\r\n\r\n    /**\r\n     * @dev Get the referrer address that referred the user.\r\n     */\r\n    function getReferrer(address user) external view returns (address);\r\n\r\n    function addTotalFund(\r\n        address _referrer,\r\n        uint256 _amount,\r\n        uint256 _loop\r\n    ) external;\r\n\r\n    function reduceTotalFund(\r\n        address _referrer,\r\n        uint256 _amount,\r\n        uint256 _loop\r\n    ) external;\r\n\r\n    function getTeam(address _user) external view returns (address[] memory);\r\n\r\n    function totalFund(address _referrer) external view returns (uint256);\r\n}\r\n\r\n// File: contracts\\WEXReferral.sol\r\n\r\n// Adding-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract WEXReferral is IWedexReferral, Ownable {\r\n    using SafeBEP20 for IBEP20;\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => bool) public operators;\r\n    mapping(address => address) public referrers; // user address => referrer address\r\n    mapping(address => uint256) public referralsCount; // referrer address => referrals count\r\n    mapping(address => uint256) public override totalFund; // referrer address => referrals count\r\n    mapping(address => uint256) public totalReferralCommissions; // referrer address => total referral commissions\r\n    mapping(address => address[]) public team; // return all member in the team\r\n    mapping(address => bool) public blacklist; //mapping address to blacklist\r\n    mapping(address => uint256) public vipLevel;\r\n\r\n    uint256 public maximumLoop = 20;\r\n    uint256[] public vipRequirement = [2e5 * 1e18, 5e5 * 1e18, 1e6 * 1e18];\r\n    event ReferralRecorded(address indexed user, address indexed referrer);\r\n    event ReferralCommissionRecorded(\r\n        address indexed referrer,\r\n        uint256 commission\r\n    );\r\n    event OperatorUpdated(address indexed operator, bool indexed status);\r\n    event TotalFundAdd(address _referrer, uint256 _amount, uint256 _loop);\r\n    event ReduceTotalFund(\r\n        address _referrer,\r\n        uint256 _amount,\r\n        uint256 currentLoop\r\n    );\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender], \"Operator: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        operators[_msgSender()] = true;\r\n    }\r\n\r\n    function noLoop(address _user, address _referrer) public returns (bool) {\r\n        if (referrers[_referrer] == _user) {\r\n            return false;\r\n        }\r\n        if (referrers[_referrer] == address(0)) {\r\n            return true;\r\n        } else {\r\n            return noLoop(_referrer, referrers[_referrer]);\r\n        }\r\n    }\r\n\r\n    function recordReferral(address _user, address _referrer)\r\n        public\r\n        override\r\n        onlyOperator\r\n    {\r\n        if (\r\n            _user != address(0) &&\r\n            _referrer != address(0) &&\r\n            _user != _referrer &&\r\n            referrers[_user] == address(0) &&\r\n            noLoop(_user, _referrer)\r\n        ) {\r\n            referrers[_user] = _referrer;\r\n            referralsCount[_referrer] += 1;\r\n            team[_referrer].push(_user);\r\n            emit ReferralRecorded(_user, _referrer);\r\n        }\r\n    }\r\n\r\n    function recordReferralCommission(address _referrer, uint256 _commission)\r\n        public\r\n        override\r\n        onlyOperator\r\n    {\r\n        if (_referrer != address(0) && _commission > 0) {\r\n            totalReferralCommissions[_referrer] += _commission;\r\n            emit ReferralCommissionRecorded(_referrer, _commission);\r\n        }\r\n    }\r\n\r\n    function addTotalFund(\r\n        address _referrer,\r\n        uint256 _amount,\r\n        uint256 _loop\r\n    ) public override onlyOperator {\r\n        if (_referrer != address(0) && _amount > 0 && _loop < maximumLoop) {\r\n            uint256 currentLoop = _loop.add(1);\r\n            totalFund[_referrer] = totalFund[_referrer].add(_amount);\r\n\r\n            if (vipLevel[_referrer] < 3) {\r\n                uint256 maxTotalFunPerBranch = getMaxTotalFundPerBranch(\r\n                    _referrer\r\n                );\r\n                uint256 _total = 0;\r\n                for (uint256 i = 0; i < team[_referrer].length; i++) {\r\n                    if (totalFund[team[_referrer][i]] > maxTotalFunPerBranch) {\r\n                        _total = _total.add(maxTotalFunPerBranch);\r\n                    } else {\r\n                        _total = _total.add(totalFund[team[_referrer][i]]);\r\n                    }\r\n                }\r\n                if (_total > vipRequirement[vipLevel[_referrer]]) {\r\n                    vipLevel[_referrer] = vipLevel[_referrer] + 1;\r\n                }\r\n            }\r\n\r\n            if (referrers[_referrer] != address(0)) {\r\n                addTotalFund(referrers[_referrer], _amount, currentLoop);\r\n            }\r\n            emit TotalFundAdd(_referrer, _amount, _loop);\r\n        }\r\n    }\r\n\r\n    function reduceTotalFund(\r\n        address _referrer,\r\n        uint256 _amount,\r\n        uint256 _loop\r\n    ) public override onlyOperator {\r\n        if (\r\n            _referrer != address(0) &&\r\n            _amount > 0 &&\r\n            _loop < maximumLoop &&\r\n            totalFund[_referrer] > _amount\r\n        ) {\r\n            uint256 currentLoop = _loop.add(1);\r\n            totalFund[_referrer] = totalFund[_referrer].sub(_amount);\r\n            if (referrers[_referrer] != address(0)) {\r\n                reduceTotalFund(referrers[_referrer], _amount, currentLoop);\r\n            }\r\n            emit ReduceTotalFund(_referrer, _amount, currentLoop);\r\n        }\r\n    }\r\n\r\n    function setMaxloop(uint256 _maximumLoop) public onlyOperator {\r\n        maximumLoop = _maximumLoop;\r\n    }\r\n\r\n    function addBlacklist(address user) external onlyOwner {\r\n        blacklist[user] = true;\r\n    }\r\n\r\n    function removeReferrer(address _user) external onlyOwner {\r\n        referrers[_user] = address(0);\r\n    }\r\n\r\n    function getReferrer(address _user) public view override returns (address) {\r\n        return referrers[_user];\r\n    }\r\n\r\n    function getVipLevel(address user) public view returns (uint256) {\r\n        return vipLevel[user];\r\n    }\r\n\r\n    function getMaxTotalFundPerBranch(address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return vipRequirement[vipLevel[user]].div(2);\r\n    }\r\n\r\n    function setTotalFund(address _referrer, uint256 _amount)\r\n        external\r\n        onlyOperator\r\n    {\r\n        totalFund[_referrer] = _amount;\r\n    }\r\n\r\n    function getTeam(address _user)\r\n        public\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {\r\n        return team[_user];\r\n    }\r\n\r\n    function setVipRequirement(uint256[] memory _vipRequirement)\r\n        public\r\n        onlyOwner\r\n    {\r\n        vipRequirement = _vipRequirement;\r\n    }\r\n\r\n    // Update the status of the operator\r\n    function updateOperator(address _operator, bool _status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        operators[_operator] = _status;\r\n        emit OperatorUpdated(_operator, _status);\r\n    }\r\n\r\n    // Owner can drain tokens that are sent here by mistake\r\n    function drainBEP20Token(\r\n        IBEP20 _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOwner {\r\n        _token.safeTransfer(_to, _amount);\r\n    }\r\n}\r\n\r\n// File: Farm.sol\r\n\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity 0.6.12;\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IMigratorChef {\r\n    function migrate(\r\n        uint256 _pid,\r\n        address _user,\r\n        uint256 _amount,\r\n        uint256[] memory _investments_amount,\r\n        uint256[] memory _investments_lock_until\r\n    ) external;\r\n}\r\n\r\ninterface IOldChef {\r\n    function commissionBalance(address _user) external view returns (uint256);\r\n}\r\n\r\n// MasterChef is the master of Wedex. He can create new Wedex and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once Wedex is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract WedexChef is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    struct DepositAmount {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 lockUntil;\r\n    }\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        DepositAmount[] investments;\r\n        uint256 lastHarvest;\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 rewardLockedUp; // Reward locked up.\r\n        uint256 nextHarvestUntil; // When can the user harvest again.\r\n        uint256 startInvestmentPosition; //The first position haven't withdrawed\r\n\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of WEDEXES\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accWedexPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accWedexPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IBEP20 lpToken; // Address of LP token contract.\r\n        uint256 totalAmount; // Total amount in pool\r\n        uint256 lastRewardBlock; // Last block number that WEDEX distribution occurs.\r\n        uint256 accWedexPerShare; // Accumulated WEDEX per share, times 1e12. See below.\r\n        uint16 depositFeeBP; // Deposit fee in basis points\r\n        uint256 harvestInterval; // Harvest interval in seconds\r\n        uint256 lockingPeriod;\r\n        uint256 fixedApr;\r\n        uint256 directCommission; //commission pay direct for the Leader;\r\n    }\r\n\r\n    struct UserPool {\r\n        uint256 pid;\r\n        address user;\r\n    }\r\n\r\n    // The WEDEX TOKEN!\r\n    IBEP20 public wedex;\r\n    address public rewardToken;\r\n    address public wedexSecurityKeyToken;\r\n\r\n    uint256 public rewardMultiplier = 1;\r\n    uint256 public wskTokenMultiplier = 1;\r\n    uint256 public commissionBalanceMultiplier = 3;\r\n\r\n    // Dev address.\r\n    address public devAddress;\r\n    // Deposit Fee address\r\n    address public feeAddress;\r\n\r\n    mapping(address => bool) public vip0Address;\r\n\r\n    // uint256 public wedexPerBlock;\r\n    // Bonus muliplier for early Wedex Holder.\r\n    uint256 public constant BONUS_MULTIPLIER = 1;\r\n    // Max harvest interval: 14 days.\r\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // Total locked up rewards\r\n    uint256 public totalLockedUpRewards;\r\n    bool public emergencyLockingWithdrawEnable = false;\r\n    // Wedex referral contract address.\r\n    WEXReferral public wedexReferral;\r\n    uint256 public referDepth = 5;\r\n    uint256[] public referralCommissionTier = [5000, 4000, 3000, 2000, 1000];\r\n    uint256[] public directCommissionForVip = [2, 3, 5];\r\n    mapping(address => uint256) public commissionBalance;\r\n    uint256 minLockingTime = 31536000;\r\n\r\n    mapping(address => bool) oldChefAddress;\r\n    mapping(uint256 => mapping(address => bool)) migrated;\r\n\r\n    // variables for migrate\r\n    IMigratorChef public newChefAddress;\r\n    bool public isMigrating = false;\r\n    uint256 constant SECONDS_PER_YEAR = 31536000;\r\n\r\n    mapping(uint256 => mapping(address => bool)) public arrayAdded;\r\n    UserPool[] public userArr;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event EmissionRateUpdated(\r\n        address indexed caller,\r\n        uint256 previousAmount,\r\n        uint256 newAmount\r\n    );\r\n    event ReferralCommissionPaid(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint256 commissionAmount\r\n    );\r\n    event RewardLockedUp(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amountLockedUp\r\n    );\r\n\r\n    constructor() public {\r\n        devAddress = msg.sender;\r\n        feeAddress = msg.sender;\r\n\r\n        wedex = IBEP20(0x1dDa5A10A5fEd668807bD9Bb192095eaE8C36b8e);\r\n        wedexReferral = WEXReferral(0x6dC9a9100740f5694BF68E5c182742570eA25ca4);\r\n        rewardToken = 0x1dDa5A10A5fEd668807bD9Bb192095eaE8C36b8e;\r\n        wedexSecurityKeyToken = 0xeC240Ab1cA3Fbd42F52FE1B60bD88289f0abF4a5;\r\n\r\n        vip0Address[0x436d8C15c517eee2e6DB6347714a213577e51789] = true;\r\n        vip0Address[0x86b758839F7fc97dbA5f59Dd90eB68df167949E1] = true;\r\n        vip0Address[0xa58a708e21b7fe94F0eb44De3289718bA8d15C1b] = true;\r\n\r\n        oldChefAddress[0x1f2152b567CAD984C6C556d71d9C0153a40BA889] = true;\r\n\r\n        add(0, 0, 31536000, 12, 8);\r\n        add(0, 0, 63072000, 24, 8);\r\n        add(0, 0, 94608000, 36, 8);\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    function add(\r\n        uint16 _depositFeeBP,\r\n        uint256 _harvestInterval,\r\n        uint256 _lockingPeriod,\r\n        uint256 _fixedApr,\r\n        uint256 _directCommission\r\n    ) public onlyOwner {\r\n        require(\r\n            _depositFeeBP <= 10000,\r\n            \"add: invalid deposit fee basis points\"\r\n        );\r\n        require(\r\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\r\n            \"add: invalid harvest interval\"\r\n        );\r\n\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: IBEP20(wedex),\r\n                accWedexPerShare: 0,\r\n                depositFeeBP: _depositFeeBP,\r\n                harvestInterval: _harvestInterval,\r\n                lockingPeriod: _lockingPeriod,\r\n                fixedApr: _fixedApr,\r\n                totalAmount: 0,\r\n                lastRewardBlock: 0,\r\n                directCommission: _directCommission\r\n            })\r\n        );\r\n    }\r\n\r\n    // Update the given pool's Wedex allocation point and deposit fee. Can only be called by the owner.\r\n    function set(\r\n        uint256 _pid,\r\n        uint16 _depositFeeBP,\r\n        uint256 _harvestInterval,\r\n        uint256 _fixedApr,\r\n        uint256 _directCommission\r\n    ) public onlyOwner {\r\n        require(\r\n            _depositFeeBP <= 10000,\r\n            \"set: invalid deposit fee basis points\"\r\n        );\r\n        require(\r\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\r\n            \"set: invalid harvest interval\"\r\n        );\r\n\r\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\r\n        poolInfo[_pid].harvestInterval = _harvestInterval;\r\n        poolInfo[_pid].fixedApr = _fixedApr;\r\n        poolInfo[_pid].directCommission = _directCommission;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n    }\r\n\r\n    // View function to see pending Wedex on frontend.\r\n    function pendingWedex(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n\r\n        uint256 multiplier = getMultiplier(user.lastHarvest, block.timestamp);\r\n\r\n        uint256 pending = multiplier.mul(user.amount).mul(pool.fixedApr).div(\r\n            SECONDS_PER_YEAR.mul(100)\r\n        );\r\n        return pending.add(user.rewardLockedUp);\r\n    }\r\n\r\n    // View function to see if user can harvest Wedex.\r\n    function canHarvest(uint256 _pid, address _user)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        return block.timestamp >= user.nextHarvestUntil;\r\n    }\r\n\r\n    function getUpperVip(address user, uint256 vipLevel)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        address referrer = wedexReferral.getReferrer(user);\r\n        while (\r\n            !(wedexReferral.vipLevel(referrer) == vipLevel ||\r\n                referrer == address(0))\r\n        ) {\r\n            referrer = wedexReferral.getReferrer(referrer);\r\n        }\r\n        return referrer;\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for Wedex allocation.\r\n    function deposit(\r\n        uint256 _pid,\r\n        uint256 _amount,\r\n        address _referrer\r\n    ) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        if (\r\n            address(wedexReferral) != address(0) &&\r\n            _referrer != address(0) &&\r\n            _referrer != msg.sender &&\r\n            wedexReferral.getReferrer(msg.sender) == address(0)\r\n        ) {\r\n            wedexReferral.recordReferral(msg.sender, _referrer);\r\n        }\r\n\r\n        payOrLockupPendingWedex(_pid);\r\n        if (_amount > 0) {\r\n            if (!arrayAdded[_pid][msg.sender]) {\r\n                userArr.push(UserPool({pid: _pid, user: msg.sender}));\r\n                arrayAdded[_pid][msg.sender] = true;\r\n            }\r\n\r\n            pool.lpToken.safeTransferFrom(\r\n                address(msg.sender),\r\n                address(this),\r\n                _amount\r\n            );\r\n\r\n            if (address(wedexReferral) != address(0)) {\r\n                address referrer = wedexReferral.referrers(msg.sender);\r\n                if (referrer != address(0)) {\r\n                    uint256 totalFund = _amount;\r\n                    wedexReferral.addTotalFund(referrer, totalFund, 0);\r\n                    if (\r\n                        pool.lockingPeriod > 0 &&\r\n                        !emergencyLockingWithdrawEnable\r\n                    ) {\r\n                        payDirectCommission(_pid, _amount, referrer);\r\n                    }\r\n                }\r\n\r\n                payDirectForVip(_pid, _amount);\r\n            }\r\n\r\n            if (pool.lockingPeriod > 0) {\r\n                user.investments.push(\r\n                    DepositAmount({\r\n                        amount: _amount,\r\n                        lockUntil: block.timestamp.add(pool.lockingPeriod)\r\n                    })\r\n                );\r\n            }\r\n\r\n            if (pool.lockingPeriod >= minLockingTime) {\r\n                commissionBalance[msg.sender] = commissionBalance[msg.sender]\r\n                    .add(_amount);\r\n            }\r\n\r\n            if (pool.depositFeeBP > 0) {\r\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\r\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\r\n                user.amount = user.amount.add(_amount).sub(depositFee);\r\n\r\n                pool.totalAmount = pool.totalAmount.add(_amount).sub(\r\n                    depositFee\r\n                );\r\n            } else {\r\n                user.amount = user.amount.add(_amount);\r\n                pool.totalAmount = pool.totalAmount.add(_amount);\r\n            }\r\n        }\r\n\r\n        if (isMigrating && user.amount > 0) {\r\n            uint256[] memory _investments_amount = new uint256[](\r\n                user.investments.length\r\n            );\r\n            uint256[] memory _investments_lock_until = new uint256[](\r\n                user.investments.length\r\n            );\r\n\r\n            for (uint256 i = 0; i < user.investments.length; i++) {\r\n                _investments_amount[i] = user.investments[i].amount;\r\n                _investments_lock_until[i] = user.investments[i].lockUntil;\r\n            }\r\n\r\n            pool.lpToken.approve(address(newChefAddress), user.amount);\r\n            newChefAddress.migrate(\r\n                _pid,\r\n                msg.sender,\r\n                user.amount,\r\n                _investments_amount,\r\n                _investments_lock_until\r\n            );\r\n            user.amount = 0;\r\n        }\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function migrate(\r\n        uint256 _pid,\r\n        address _user,\r\n        uint256 _amount,\r\n        uint256[] memory _investments_amount,\r\n        uint256[] memory _investments_lock_until\r\n    ) external {\r\n        require(oldChefAddress[msg.sender], \"not Allow\");\r\n        require(!migrated[_pid][_user], \"user has been migrated\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n\r\n        pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        user.amount = user.amount.add(_amount);\r\n\r\n        if (\r\n            _investments_amount.length > 0 &&\r\n            _investments_amount.length == _investments_lock_until.length\r\n        ) {\r\n            for (uint256 i = 0; i < _investments_amount.length; i++) {\r\n                user.investments.push(\r\n                    DepositAmount({\r\n                        amount: _investments_amount[i],\r\n                        lockUntil: _investments_lock_until[i]\r\n                    })\r\n                );\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accWedexPerShare).div(1e12);\r\n        pool.totalAmount = pool.totalAmount.add(_amount);\r\n        commissionBalance[_user] = IOldChef(msg.sender).commissionBalance(\r\n            _user\r\n        );\r\n        user.lastHarvest = block.timestamp;\r\n\r\n        migrated[_pid][_user] = true;\r\n    }\r\n\r\n    function getInvestmentInfo(\r\n        uint256 _pid,\r\n        address _user,\r\n        uint256 index\r\n    ) public view returns (DepositAmount memory) {\r\n        return userInfo[_pid][_user].investments[index];\r\n    }\r\n\r\n    function getInvestmentLength(uint256 _pid, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return userInfo[_pid][_user].investments.length;\r\n    }\r\n\r\n    function setNewChefAddress(IMigratorChef _newChefAddress) public onlyOwner {\r\n        newChefAddress = _newChefAddress;\r\n    }\r\n\r\n    function setOldChefAddress(address _oldChefAddress, bool _isTrue)\r\n        public\r\n        onlyOwner\r\n    {\r\n        oldChefAddress[_oldChefAddress] = _isTrue;\r\n    }\r\n\r\n    function setIsMigrating(bool _isMigrating) public onlyOwner {\r\n        isMigrating = _isMigrating;\r\n    }\r\n\r\n    function payDirectForVip(uint256 _pid, uint256 _amount) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (pool.lockingPeriod >= minLockingTime) {\r\n            for (uint256 i = 1; i <= 3; i++) {\r\n                address upperVip = getUpperVip(msg.sender, i);\r\n\r\n                uint256 directCommissionAmountForVip = _amount\r\n                    .mul(directCommissionForVip[i - 1])\r\n                    .div(1e2);\r\n\r\n                if (upperVip != address(0)) {\r\n                    wedex.mint(upperVip, directCommissionAmountForVip);\r\n                    wedexReferral.recordReferralCommission(\r\n                        upperVip,\r\n                        directCommissionAmountForVip\r\n                    );\r\n                }\r\n            }\r\n\r\n            wedex.mint(devAddress, _amount.div(10));\r\n            address _ref = msg.sender;\r\n            while (_ref != address(0)) {\r\n                _ref = wedexReferral.getReferrer(_ref);\r\n                if (vip0Address[_ref]) {\r\n                    wedex.mint(_ref, _amount.div(10));\r\n\r\n                    wedexReferral.recordReferralCommission(\r\n                        _ref,\r\n                        _amount.div(10)\r\n                    );\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function payDirectCommission(\r\n        uint256 _pid,\r\n        uint256 _amount,\r\n        address referrer\r\n    ) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        uint256 directCommissionAmount = _amount.mul(pool.directCommission).div(\r\n            1e2\r\n        );\r\n\r\n        wedex.mint(address(referrer), directCommissionAmount);\r\n        wedexReferral.recordReferralCommission(\r\n            referrer,\r\n            directCommissionAmount\r\n        );\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        require(pool.lockingPeriod == 0, \"withdraw: not good\");\r\n\r\n        payOrLockupPendingWedex(_pid);\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.totalAmount = pool.totalAmount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n            if (\r\n                address(wedexReferral) != address(0) &&\r\n                wedexReferral.getReferrer(msg.sender) != address(0)\r\n            ) {\r\n                wedexReferral.reduceTotalFund(\r\n                    wedexReferral.getReferrer(msg.sender),\r\n                    _amount,\r\n                    0\r\n                );\r\n            }\r\n        }\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function withdrawInvestment(uint256 _pid) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        require(pool.lockingPeriod > 0, \"withdraw: not good\");\r\n\r\n        payOrLockupPendingWedex(_pid);\r\n\r\n        uint256 _startInvestmentPosition = 0;\r\n        uint256 _totalWithdrawalAmount = 0;\r\n\r\n        for (\r\n            uint256 i = user.startInvestmentPosition;\r\n            i < user.investments.length;\r\n            i++\r\n        ) {\r\n            if (\r\n                user.investments[i].amount > 0 &&\r\n                user.investments[i].lockUntil <= block.timestamp\r\n            ) {\r\n                _totalWithdrawalAmount = _totalWithdrawalAmount.add(\r\n                    user.investments[i].amount\r\n                );\r\n                user.investments[i].amount = 0;\r\n                _startInvestmentPosition = i + 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (_startInvestmentPosition > user.startInvestmentPosition) {\r\n            user.startInvestmentPosition = _startInvestmentPosition;\r\n        }\r\n        if (\r\n            _totalWithdrawalAmount > 0 && _totalWithdrawalAmount <= user.amount\r\n        ) {\r\n            user.amount = user.amount.sub(_totalWithdrawalAmount);\r\n            pool.totalAmount = pool.totalAmount.sub(_totalWithdrawalAmount);\r\n            pool.lpToken.safeTransfer(\r\n                address(msg.sender),\r\n                _totalWithdrawalAmount\r\n            );\r\n\r\n            if (\r\n                address(wedexReferral) != address(0) &&\r\n                wedexReferral.getReferrer(msg.sender) != address(0)\r\n            ) {\r\n                wedexReferral.reduceTotalFund(\r\n                    wedexReferral.getReferrer(msg.sender),\r\n                    _totalWithdrawalAmount,\r\n                    0\r\n                );\r\n            }\r\n        }\r\n        emit Withdraw(msg.sender, _pid, _totalWithdrawalAmount);\r\n    }\r\n\r\n    function getFreeInvestmentAmount(uint256 _pid, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 _total = 0;\r\n\r\n        for (\r\n            uint256 i = user.startInvestmentPosition;\r\n            i < user.investments.length;\r\n            i++\r\n        ) {\r\n            if (\r\n                user.investments[i].amount > 0 &&\r\n                user.investments[i].lockUntil <= block.timestamp\r\n            ) {\r\n                _total = _total.add(user.investments[i].amount);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return _total;\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(\r\n            pool.lockingPeriod == 0 || emergencyLockingWithdrawEnable,\r\n            \"withdraw: not good\"\r\n        );\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        pool.totalAmount = pool.totalAmount.sub(amount);\r\n        user.lastHarvest = block.timestamp;\r\n        user.rewardLockedUp = 0;\r\n        user.nextHarvestUntil = 0;\r\n        if (\r\n            address(wedexReferral) != address(0) &&\r\n            wedexReferral.getReferrer(msg.sender) != address(0)\r\n        ) {\r\n            wedexReferral.reduceTotalFund(\r\n                wedexReferral.getReferrer(msg.sender),\r\n                amount,\r\n                0\r\n            );\r\n        }\r\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n\r\n    // Pay or lockup pending Wedex.\r\n    function payOrLockupPendingWedex(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        if (user.nextHarvestUntil == 0) {\r\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\r\n        }\r\n\r\n        uint256 multiplier = getMultiplier(user.lastHarvest, block.timestamp);\r\n\r\n        uint256 pending = multiplier.mul(user.amount).mul(pool.fixedApr).div(\r\n            SECONDS_PER_YEAR.mul(100)\r\n        );\r\n\r\n        if (canHarvest(_pid, msg.sender)) {\r\n            if (pending > 0 || user.rewardLockedUp > 0) {\r\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\r\n\r\n                // reset lockup\r\n                totalLockedUpRewards = totalLockedUpRewards.sub(\r\n                    user.rewardLockedUp\r\n                );\r\n                user.rewardLockedUp = 0;\r\n                user.nextHarvestUntil = block.timestamp.add(\r\n                    pool.harvestInterval\r\n                );\r\n\r\n                // send rewards\r\n                IBEP20(rewardToken).mint(\r\n                    msg.sender,\r\n                    totalRewards.mul(rewardMultiplier)\r\n                );\r\n                IBEP20(wedexSecurityKeyToken).mint(\r\n                    msg.sender,\r\n                    totalRewards.mul(wskTokenMultiplier)\r\n                );\r\n\r\n                if (pool.lockingPeriod >= minLockingTime) {\r\n                    payReferralCommission(msg.sender, totalRewards, 0);\r\n                }\r\n\r\n                user.rewardDebt = user.rewardDebt.add(totalRewards);\r\n            }\r\n        } else if (pending > 0) {\r\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\r\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\r\n            emit RewardLockedUp(msg.sender, _pid, pending);\r\n        }\r\n\r\n        user.lastHarvest = block.timestamp;\r\n    }\r\n\r\n    function setReferDepth(uint256 _depth) public onlyOwner {\r\n        referDepth = _depth;\r\n    }\r\n\r\n    function setReferralCommissionTier(uint256[] memory _referralCommissionTier)\r\n        public\r\n        onlyOwner\r\n    {\r\n        referralCommissionTier = _referralCommissionTier;\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function setDevAddress(address _devAddress) public {\r\n        require(msg.sender == devAddress, \"setDevAddress: FORBIDDEN\");\r\n        require(_devAddress != address(0), \"setDevAddress: ZERO\");\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    function setVip0Address(address _user, bool _bool) public onlyOwner {\r\n        vip0Address[_user] = _bool;\r\n    }\r\n\r\n    function setMinLockingTime(uint256 _minLockingTime) public onlyOwner {\r\n        minLockingTime = _minLockingTime;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) public {\r\n        require(msg.sender == feeAddress, \"setFeeAddress: FORBIDDEN\");\r\n        require(_feeAddress != address(0), \"setFeeAddress: ZERO\");\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    // Update the Wedex referral contract address by the owner\r\n    function setWedexReferral(WEXReferral _wedexReferral) public onlyOwner {\r\n        wedexReferral = _wedexReferral;\r\n    }\r\n\r\n    //Update the EmergencyWithdrawEnable\r\n    function setEmergencyWithdrawEnable(bool _emergencyWithdrawEnable)\r\n        public\r\n        onlyOwner\r\n    {\r\n        emergencyLockingWithdrawEnable = _emergencyWithdrawEnable;\r\n    }\r\n\r\n    function getReferralCommissionRate(uint256 depth)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return referralCommissionTier[depth];\r\n    }\r\n\r\n    function setWexToken(IBEP20 _wedex) public onlyOwner {\r\n        wedex = _wedex;\r\n    }\r\n\r\n    function setRewardToken(address _rewardToken) public onlyOwner {\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    function setWedexSecurityKeyToken(address _token) public onlyOwner {\r\n        wedexSecurityKeyToken = _token;\r\n    }\r\n\r\n    function setRewardMultiplier(uint256 _rewardMultiplier) public onlyOwner {\r\n        rewardMultiplier = _rewardMultiplier;\r\n    }\r\n\r\n    function setWskTokenMultiplier(uint256 _wskTokenMultiplier)\r\n        public\r\n        onlyOwner\r\n    {\r\n        wskTokenMultiplier = _wskTokenMultiplier;\r\n    }\r\n\r\n    function setCommissionBalanceMultiplier(\r\n        uint256 _commissionBalanceMultiplier\r\n    ) public onlyOwner {\r\n        commissionBalanceMultiplier = _commissionBalanceMultiplier;\r\n    }\r\n\r\n    function setDirectCommissionForVip(uint256[] memory _value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        directCommissionForVip = _value;\r\n    }\r\n\r\n    // Pay referral commission to the referrer who referred this user.\r\n    function payReferralCommission(\r\n        address _user,\r\n        uint256 _pending,\r\n        uint256 depth\r\n    ) internal {\r\n        if (depth < referDepth) {\r\n            if (address(wedexReferral) != address(0)) {\r\n                address _referrer = wedexReferral.getReferrer(_user);\r\n\r\n                uint256 commissionAmount = _pending\r\n                    .mul(getReferralCommissionRate(depth))\r\n                    .div(10000);\r\n\r\n                if (commissionAmount > 0 && _referrer != address(0)) {\r\n                    if (\r\n                        commissionBalance[_referrer].mul(\r\n                            commissionBalanceMultiplier\r\n                        ) < commissionAmount\r\n                    ) {\r\n                        commissionAmount = commissionBalance[_referrer].mul(\r\n                            commissionBalanceMultiplier\r\n                        );\r\n                    }\r\n\r\n                    if (commissionAmount > 0) {\r\n                        commissionBalance[_referrer] = commissionBalance[\r\n                            _referrer\r\n                        ].sub(\r\n                                commissionAmount.div(\r\n                                    commissionBalanceMultiplier\r\n                                )\r\n                            );\r\n\r\n                        IBEP20(rewardToken).mint(\r\n                            _referrer,\r\n                            commissionAmount.mul(rewardMultiplier)\r\n                        );\r\n                        IBEP20(wedexSecurityKeyToken).mint(\r\n                            _referrer,\r\n                            commissionAmount.mul(wskTokenMultiplier)\r\n                        );\r\n\r\n                        wedexReferral.recordReferralCommission(\r\n                            _referrer,\r\n                            commissionAmount\r\n                        );\r\n                        emit ReferralCommissionPaid(\r\n                            _user,\r\n                            _referrer,\r\n                            commissionAmount\r\n                        );\r\n                    }\r\n\r\n                    payReferralCommission(_referrer, _pending, depth.add(1));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function recoverLostBNB() public onlyOwner {\r\n        address payable _owner = payable(msg.sender);\r\n        _owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function recoverLostTokensExceptOurTokens(address _token, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        IBEP20(_token).transfer(msg.sender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionAmount\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_directCommission\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"arrayAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commissionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionBalanceMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"directCommissionForVip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyLockingWithdrawEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFreeInvestmentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInvestmentInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct WedexChef.DepositAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getInvestmentLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vipLevel\",\"type\":\"uint256\"}],\"name\":\"getUpperVip\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_investments_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_investments_lock_until\",\"type\":\"uint256[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newChefAddress\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingWedex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accWedexPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directCommission\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverLostBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverLostTokensExceptOurTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referDepth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralCommissionTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_directCommission\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionBalanceMultiplier\",\"type\":\"uint256\"}],\"name\":\"setCommissionBalanceMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"setDirectCommissionForVip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergencyWithdrawEnable\",\"type\":\"bool\"}],\"name\":\"setEmergencyWithdrawEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMigrating\",\"type\":\"bool\"}],\"name\":\"setIsMigrating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLockingTime\",\"type\":\"uint256\"}],\"name\":\"setMinLockingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_newChefAddress\",\"type\":\"address\"}],\"name\":\"setNewChefAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldChefAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTrue\",\"type\":\"bool\"}],\"name\":\"setOldChefAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depth\",\"type\":\"uint256\"}],\"name\":\"setReferDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_referralCommissionTier\",\"type\":\"uint256[]\"}],\"name\":\"setReferralCommissionTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"setRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setVip0Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WEXReferral\",\"name\":\"_wedexReferral\",\"type\":\"address\"}],\"name\":\"setWedexReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setWedexSecurityKeyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_wedex\",\"type\":\"address\"}],\"name\":\"setWexToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wskTokenMultiplier\",\"type\":\"uint256\"}],\"name\":\"setWskTokenMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userArr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startInvestmentPosition\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vip0Address\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wedex\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wedexReferral\",\"outputs\":[{\"internalType\":\"contract WEXReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wedexSecurityKeyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wskTokenMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WedexChef", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://643a251fec8968c9828ca7ede13d2e00a2091a447343f674eedf2f3da919617b"}