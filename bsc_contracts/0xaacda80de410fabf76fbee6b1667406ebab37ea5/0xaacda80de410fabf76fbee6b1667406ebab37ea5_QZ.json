{"SourceCode": "//2021.10.28 depoly\r\n//\u65b0\u7684QZ\u4ee3\u5e01\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.1;\r\ninterface relationship {\r\n    function defultFather() external returns(address);\r\n    function father(address _addr) external returns(address);\r\n    function grandFather(address _addr) external returns(address);\r\n    function otherCallSetRelationship(address _son, address _father) external;\r\n    function getFather(address _addr) external view returns(address);\r\n    function getGrandFather(address _addr) external view returns(address);\r\n}\r\ninterface Ipair{\r\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor (address _addr) {\r\n        _owner = _addr;\r\n        emit OwnershipTransferred(address(0), _addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view  returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public  onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract ERC20 {\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    \r\n    mapping (address => bool) public fromWriteList;\r\n    mapping (address => bool) public toWriteList;\r\n    mapping (address => bool) public fiveWriteList;\r\n    mapping (address => bool) public blackList;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor() {\r\n        _name = \"QZ\";\r\n        _symbol = \"QZ\";\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(blackList[msg.sender] == false && blackList[sender] == false && blackList[recipient] == false, \"ERC20: is black List !\");\r\n\r\n        uint256 trueAmount = _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + trueAmount;\r\n        emit Transfer(sender, recipient, trueAmount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply + amount;\r\n        _balances[account] = _balances[account] + amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual  returns (uint256) { } \r\n}\r\ncontract QZ is ERC20, Ownable{\r\n    address constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    uint256 constant _FIVE_MIN = 300;\r\n    Ipair public pair_USDT; \r\n    relationship public RP;\r\n\r\n    mapping(address => bool) public isPair;\r\n    \r\n    uint256 public startTradeTime; \r\n    uint256 public shareRate = 8; \r\n    uint256 public devRate = 2; \r\n    uint256 public buyRate = 4; \r\n    \r\n\r\n    address public devAddr; \r\n    address public mintPoolAddr; \r\n    \r\n\r\n    constructor (\r\n        address _RP,\r\n        uint256 _startTradeTime,\r\n        address _devAddr,\r\n        address _mintPoolAddr,\r\n        address _theowner\r\n    ) Ownable(_theowner){\r\n        RP = relationship(_RP);\r\n        _mint(msg.sender, 10800 * 10**18);\r\n        _mint(_mintPoolAddr, 600 * 10**18);\r\n        _mint(_devAddr, 600 * 10**18);\r\n        startTradeTime =_startTradeTime;\r\n        devAddr = _devAddr;\r\n        mintPoolAddr = _mintPoolAddr;\r\n\r\n        fromWriteList[msg.sender] = true;\r\n        toWriteList[msg.sender] = true;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address _from, \r\n        address _to, \r\n        uint256 _amount\r\n        )internal override returns (uint256){\r\n            \r\n        if (RP.father(_to) == address(0)){\r\n            sendReff(_to, _from);\r\n        }\r\n\r\n        if (fromWriteList[_from] || toWriteList[_to]){\r\n            return _amount;\r\n        }\r\n        \r\n        uint256 _trueAmount;\r\n        \r\n        if (isPair[_from]){\r\n            require(block.timestamp >= startTradeTime,\"not start exchange\");\r\n            require(fiveWriteList[_to] || block.timestamp >= startTradeTime + _FIVE_MIN);\r\n            _trueAmount = _amount * (100 - (shareRate + devRate + buyRate)) / 100;\r\n            _balances[RP.getFather(_to)] = _balances[RP.getFather(_to)] + (_amount * shareRate / 100);\r\n            _balances[devAddr] = _balances[devAddr] + (_amount * devRate / 100 );\r\n            _balances[mintPoolAddr] = _balances[mintPoolAddr] + (_amount * buyRate / 100);\r\n            \r\n            require(balanceOf(_to) + _trueAmount <= getMaxHoldAMount(), \"you cant get more token\");\r\n            \r\n        } else if (isPair[_to]) {\r\n            require(block.timestamp >= startTradeTime,\"not start exchange\");\r\n            require(fiveWriteList[_from] || block.timestamp >= startTradeTime + _FIVE_MIN);\r\n            _trueAmount = _amount * (100 - (shareRate + devRate + buyRate)) / 100;\r\n            _balances[RP.getFather(_from)] = _balances[RP.getFather(_from)] + (_amount * shareRate / 100);\r\n            _balances[devAddr] = _balances[devAddr] + (_amount * devRate / 100);\r\n            _balances[mintPoolAddr] = _balances[mintPoolAddr] + (_amount * buyRate / 100);\r\n        } else{\r\n            _trueAmount = _amount * (100 - (shareRate + devRate + buyRate)) / 100;\r\n            _balances[RP.getFather(_to)] = _balances[RP.getFather(_to)] + (_amount * shareRate / 100);\r\n            _balances[devAddr] = _balances[devAddr] + (_amount * devRate / 100);\r\n            _balances[mintPoolAddr] = _balances[mintPoolAddr] + (_amount * buyRate / 100);\r\n            \r\n           // require(balanceOf(_to) + _trueAmount <= getMaxHoldAMount(), \"you cant get more token\");\r\n        }\r\n\r\n        return _trueAmount;   \r\n    }\r\n    \r\n    //\u7ed1\u5b9a\u5173\u7cfb\r\n    function sendReff(\r\n        address _son,\r\n        address _father\r\n    ) internal {\r\n        if(!isPair[_son] && !isPair[_father]){\r\n            RP.otherCallSetRelationship(_son, _father);\r\n        }\r\n    }\r\n\r\n    function getMaxHoldAMount() public view returns(uint256){\r\n        uint256 price = getPrice();\r\n\r\n        uint256 result;\r\n        if(price <= 1000){\r\n            result = price / 100 + 1;\r\n        }else{\r\n            result = 12000;\r\n        }\r\n\r\n        return result * 10 **18;\r\n    }\r\n\r\n    function transferTokensAvg(address[] memory  _tos) external onlyOwner{\r\n        require(_tos.length>0);\r\n        \r\n        for(uint i;i<_tos.length;i++){\r\n            uint256 tokenamount=1/5*10**18;\r\n            \r\n            _balances[msg.sender]=_balances[msg.sender]-tokenamount;\r\n            _balances[_tos[i]]=_balances[_tos[i]]+tokenamount;\r\n        }\r\n\r\n    }\r\n\r\n    function getPrice() internal view returns(uint256){\r\n        \r\n        uint256 amountA;\r\n        uint256 amountB;\r\n        if (pair_USDT.token0() == USDT){\r\n            (amountA, amountB,) = pair_USDT.getReserves();\r\n        }\r\n        else{\r\n            (amountB, amountA,) = pair_USDT.getReserves();\r\n        }\r\n        uint256 price = amountA /amountB;\r\n        return price;\r\n    }\r\n    \r\n    //admin func///////////////////////////////////////////////////////////////\r\n    \r\n   \r\n    function setPair(\r\n        address _addr,\r\n        bool _isUSDT\r\n    ) external onlyOwner{\r\n        isPair[_addr] = true;\r\n        if(_isUSDT && address(pair_USDT) == address(0)){\r\n            pair_USDT = Ipair(_addr);\r\n        }\r\n    }\r\n    \r\n    \r\n    function setWhiteList(\r\n        address _addr, \r\n        uint256 _type, \r\n        bool _YorN \r\n    ) external onlyOwner{\r\n        \r\n        if (_type == 0){\r\n            fromWriteList[_addr] = _YorN;\r\n        }else if (_type == 1){\r\n            toWriteList[_addr] = _YorN;\r\n        }else if (_type == 2){\r\n            fiveWriteList[_addr] = _YorN;\r\n        }\r\n    }\r\n    \r\n    \r\n    function setBlackList(\r\n        address _addr,\r\n        bool _YorN\r\n    ) external onlyOwner{   \r\n        blackList[_addr] = _YorN;\r\n    }\r\n\r\n    function setRate(\r\n        uint256 _shareRate, \r\n        uint256 _devRate, \r\n        uint256 _buyRate\r\n      \r\n    ) external onlyOwner{\r\n        \r\n\r\n        shareRate = _shareRate;\r\n        devRate = _devRate;\r\n        buyRate = _buyRate;\r\n        \r\n    }\r\n\r\n    function setAddr(\r\n        address _devAddr,\r\n        address _mintPoolAddr\r\n    ) external onlyOwner{\r\n        devAddr = _devAddr;\r\n        mintPoolAddr = _mintPoolAddr;\r\n    }\r\n\r\n\r\n\r\n\r\n    function setRP(\r\n        address _addr\r\n    ) public onlyOwner{\r\n        RP = relationship(_addr);\r\n    }\r\n\r\n\r\n    function testSetStartTime(\r\n        uint256 _time\r\n    ) external onlyOwner{\r\n        startTradeTime = _time;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_RP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTradeTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintPoolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_theowner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RP\",\"outputs\":[{\"internalType\":\"contract relationship\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fiveWriteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromWriteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxHoldAMount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPoolAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair_USDT\",\"outputs\":[{\"internalType\":\"contract Ipair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintPoolAddr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_YorN\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isUSDT\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shareRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_YorN\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"testSetStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toWriteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"}],\"name\":\"transferTokensAvg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "QZ", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004b9ff9c481f0cf76604b7ea713b9658c7909c69f0000000000000000000000000000000000000000000000000000000061cb0924000000000000000000000000036c6a4667398c45c95f69ace1cc4d00ef89b70d0000000000000000000000008823be1a1da0730f3937f93aebd454be1a30f79300000000000000000000000036db18449987a77c47d5279b86759a72fa873565", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bcb6d3587416524b4def1319ba499f88f85d6f2486f8e74ae52816310b9663d4"}