{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary SafeMathInt {\r\n    \r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract XGPTPresale {\r\n\r\n    //Mainnet\r\n    //   IERC20 public usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    //   IERC20 public BUSD = IERC20(0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684);\r\n\r\n    //Testnet\r\n     IERC20 public  usdt ;\r\n     IERC20 public  busd ;\r\n    \r\n    IERC20 public token;\r\n\r\n    bool public paused; \r\n\r\n    address public owner;\r\n\r\n    uint256 public perDollarPrice;  //in decimals\r\n\r\n    uint256 public UsdtoBNB; //one usd to BNB\r\n\r\n    mapping (address => mapping (address => bool)) public referral;\r\n\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender,\"Caller must be Ownable!!\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _price,address _presaleToken , uint _perUsdtoBNB , address _usdt , address _busd){\r\n        owner = msg.sender;\r\n        perDollarPrice = _price;\r\n        token = IERC20(_presaleToken);\r\n        UsdtoBNB = _perUsdtoBNB;\r\n        usdt = IERC20(_usdt);\r\n        busd = IERC20(_busd);\r\n    }\r\n\r\n\r\n    function ikeBalance(address _user) public view returns(uint){\r\n        return token.balanceOf(_user);\r\n    }\r\n\r\n    function contractBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function remainingToken() public view returns(uint){\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    //per dollar price in decimals\r\n    function setTokenPrice(uint _price) public onlyOwner{\r\n        perDollarPrice = _price;\r\n    }\r\n\r\n    //per dollar price in decimals of BNB\r\n    function setBNBPrice(uint _price) public onlyOwner{\r\n        UsdtoBNB = _price;\r\n    }\r\n\r\n    function setPause(bool _value) public onlyOwner{\r\n        paused = _value;\r\n    }\r\n\r\n    function setToken(address _token) public onlyOwner{\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function setbusd(address _token) public onlyOwner{\r\n        busd = IERC20(_token);\r\n    }\r\n\r\n    function setUsdt(address _token) public onlyOwner{\r\n        usdt = IERC20(_token);\r\n    }\r\n\r\n    //pid for selection of token USDT -> 1 or busd -> 2\r\n    function buyfromToken(uint _pid,address ref,uint _amount) public {\r\n        \r\n        require(!paused, \"Presale is Paused!!\");\r\n\r\n        uint check = 1;   \r\n\r\n        if(ref == address(0) || ref == msg.sender || referral[msg.sender][ref]){}\r\n        else{\r\n            referral[msg.sender][ref] = true;\r\n            check = 2;\r\n        }\r\n\r\n        if(_pid == 1){\r\n            \r\n                if(check == 2){\r\n                    uint per5 = ( _amount * 5 ) / 100;\r\n                    uint per95 = ( _amount * 95 ) / 100;\r\n                    \r\n                    usdt.transferFrom(msg.sender,ref,per5);\r\n                    usdt.transferFrom(msg.sender,owner,per95);\r\n                }\r\n                else{\r\n                    usdt.transferFrom(msg.sender,owner,_amount);\r\n                }\r\n            \r\n            uint temp = _amount;\r\n         \r\n           uint multiplier = (temp*perDollarPrice)/10**18;\r\n\r\n            token.transfer(msg.sender,multiplier);\r\n\r\n        }\r\n        else if(_pid == 2){\r\n            \r\n            if(check == 2){\r\n                uint per5 = ( _amount * 5 ) / 100;\r\n                uint per95 = ( _amount * 95 ) / 100;\r\n                busd.transferFrom(msg.sender,ref,per5);\r\n                busd.transferFrom(msg.sender,owner,per95);\r\n           \r\n            }\r\n            else{\r\n              busd.transferFrom(msg.sender,owner,_amount);\r\n            }\r\n\r\n            uint temp = _amount;\r\n            uint multiplier = (temp*perDollarPrice)/10**18; \r\n            token.transfer(msg.sender,multiplier);\r\n        }\r\n        else {\r\n            revert(\"Wrong Selection!!\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    function buyFromNative(address ref) public payable {\r\n\r\n        require(!paused,\"Presale is Paused!!\");\r\n\r\n        uint check = 1;   \r\n\r\n        if(ref == address(0) || ref == msg.sender || referral[msg.sender][ref]){}\r\n        else{\r\n            referral[msg.sender][ref] = true;\r\n            check = 2;\r\n        }\r\n\r\n        uint value = msg.value;\r\n\r\n        uint equaltousd = value* UsdtoBNB;\r\n\r\n        uint multiplier = (perDollarPrice * equaltousd)/(1000000000000000000*10**18);\r\n\r\n        token.transfer(msg.sender,multiplier);\r\n\r\n        if(check == 2){\r\n            uint per5 = ( value * 5 ) / 100;\r\n            uint per95 = ( value * 95 ) / 100;\r\n            payable(ref).transfer(per5);\r\n            payable(owner).transfer(per95);\r\n        }\r\n        else{\r\n            payable(owner).transfer(value);\r\n        }\r\n\r\n    }\r\n\r\n    function RescueFunds() public onlyOwner {\r\n        payable(msg.sender).transfer( address(this).balance );\r\n    }\r\n\r\n    function RescueTokens(IERC20 _add,uint _amount,address _recipient) public onlyOwner{\r\n        _add.transfer(_recipient,_amount);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_presaleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_perUsdtoBNB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_busd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_add\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"RescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UsdtoBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyFromNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyfromToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ikeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perDollarPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setBNBPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setbusd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XGPTPresale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000004dbca11f10b1944fc9cb198d51769e4f477bf9d70000000000000000000000000000000000000000000000108ce37c7386c2000000000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1886b8db73e8a6cc52819b5432168f6896d6729a78edf47c4f24850906cd5caa"}