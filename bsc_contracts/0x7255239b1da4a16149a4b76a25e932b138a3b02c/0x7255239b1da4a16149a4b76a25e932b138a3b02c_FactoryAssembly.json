{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ncontract FactoryAssembly {\r\n    event Deployed(address addr, uint salt);\r\n\r\n    // 1. Get bytecode of contract to be deployed\r\n    // NOTE: _owner and _foo are arguments of the TestContract's constructor\r\n    function getBytecode(address _owner, uint _foo) public pure returns (bytes memory) {\r\n        bytes memory bytecode = type(BlockContract).creationCode;\r\n\r\n        return abi.encodePacked(bytecode, abi.encode(_owner, _foo));\r\n    }\r\n\r\n    // 2. Compute the address of the contract to be deployed\r\n    // NOTE: _salt is a random number used to create an address\r\n    function getAddress(\r\n        bytes memory bytecode,\r\n        uint _salt\r\n    ) public view returns (address) {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode))\r\n        );\r\n\r\n        // NOTE: cast last 20 bytes of hash to address\r\n        return address(uint160(uint(hash)));\r\n    }\r\n\r\n    // 3. Deploy the contract\r\n    // NOTE:\r\n    // Check the event log Deployed which contains the address of the deployed TestContract.\r\n    // The address in the log should equal the address computed from above.\r\n    function deploy(bytes memory bytecode, uint _salt) public payable {\r\n        address addr;\r\n\r\n        /*\r\n        NOTE: How to call create2\r\n\r\n        create2(v, p, n, s)\r\n        create new contract with code at memory p to p + n\r\n        and send v wei\r\n        and return the new address\r\n        where new address = first 20 bytes of keccak256(0xff + address(this) + s + keccak256(mem[p\u2026(p+n)))\r\n              s = big-endian 256-bit value\r\n        */\r\n        assembly {\r\n            addr := create2(\r\n                callvalue(), // wei sent with current call\r\n                // Actual code starts after skipping the first 32 bytes\r\n                add(bytecode, 0x20),\r\n                mload(bytecode), // Load the size of code contained in the first 32 bytes\r\n                _salt // Salt from function arguments\r\n            )\r\n\r\n            if iszero(extcodesize(addr)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        emit Deployed(addr, _salt);\r\n    }\r\n}\r\n\r\ncontract BlockContract {\r\n    bool private blocked;\r\n    address private allowedAddress;\r\n\r\n    constructor() {\r\n        blocked = true;\r\n        allowedAddress = 0xcF0FB2a2266aEE2385b36f70aa0f7ed9eF810A0B;\r\n    }\r\n\r\n    modifier canReceiveETH() {\r\n        require(!blocked || msg.sender == allowedAddress, \"ETH transfers are blocked\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable canReceiveETH {\r\n        if (msg.sender != allowedAddress) {\r\n            revert(\"ETH transfers are blocked\");\r\n        } else {\r\n            address payable recipient = payable(msg.sender);\r\n            recipient.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function unblockETH() external {\r\n        blocked = false;\r\n    }\r\n\r\n    function setAllowedAddress(address _address) external {\r\n        allowedAddress = _address;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_foo\",\"type\":\"uint256\"}],\"name\":\"getBytecode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "FactoryAssembly", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://52c10d7e80e8b3388cdde049a80fa5e80608eb9efbfabf686345eea569c7c9db"}