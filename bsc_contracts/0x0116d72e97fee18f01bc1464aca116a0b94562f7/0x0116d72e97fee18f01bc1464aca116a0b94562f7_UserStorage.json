{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\ncontract UserStorage is Ownable {\r\n    struct User {\r\n        address userAddr;\r\n        string avatar;\r\n        string email;\r\n        uint256 isOnline;\r\n        uint256 userFlag;\r\n        uint256 credit;\r\n        uint256 regTime;\r\n        TradeStats tradeStats;\r\n        MorgageStats morgageStats;\r\n    }\r\n    struct TradeStats {\r\n        uint256 tradeTotal;\r\n        uint256 restTotal;\r\n    }\r\n    struct MorgageStats {\r\n        uint256 mortgage;\r\n        uint256 freezeMortgage;\r\n        uint256 relieveMortgage;\r\n        uint256 inviteUserCount;\r\n        uint256 inviteUserReward;\r\n        uint256 applyRelieveTime;\r\n        uint256 handleRelieveTime;\r\n    }\r\n    mapping(address => User) public users;\r\n    mapping(address => uint256) public userIndex;\r\n\r\n    User[] public userList;\r\n\r\n    address public recipient;\r\n    uint256 public feeAmount;\r\n\r\n    event addUser(address _userAddr);\r\n    event updateUser(string _avatar, string _email, uint256 _isOnline);\r\n\r\n    address _restCAddr;\r\n    address _orderCAddr;\r\n    address _recordCAddr;\r\n    address _appealCAddr;\r\n\r\n    modifier onlyAuthFromAddr() {\r\n        require(_restCAddr != address(0), \"Invalid address call rest\");\r\n        require(_orderCAddr != address(0), \"Invalid address call order\");\r\n        require(_recordCAddr != address(0), \"Invalid address call record\");\r\n        require(_appealCAddr != address(0), \"Invalid address call appeal\");\r\n        _;\r\n    }\r\n\r\n    function setFee(address _addr, uint256 _amount) external onlyOwner {\r\n        recipient = _addr;\r\n        feeAmount = _amount;\r\n    }\r\n\r\n    function authFromContract(\r\n        address _fromRest,\r\n        address _fromOrder,\r\n        address _fromRecord,\r\n        address _fromAppeal\r\n    ) external onlyOwner {\r\n        _restCAddr = _fromRest;\r\n        _orderCAddr = _fromOrder;\r\n        _recordCAddr = _fromRecord;\r\n        _appealCAddr = _fromAppeal;\r\n    }\r\n\r\n    modifier onlyMemberOf() {\r\n        require(users[msg.sender].userAddr != address(0), \"has no permission\");\r\n        _;\r\n    }\r\n\r\n    function _insert(address _addr) internal {\r\n        require(_addr != address(0), \"UserStorage: addr null is not allowed\");\r\n        require(\r\n            users[_addr].userAddr == address(0),\r\n            \"UserStorage: current User exist\"\r\n        );\r\n\r\n        TradeStats memory tradeStats = TradeStats({\r\n            tradeTotal: 0,\r\n            restTotal: 0\r\n        });\r\n        MorgageStats memory morgageStats = MorgageStats({\r\n            mortgage: 0,\r\n            freezeMortgage: 0,\r\n            relieveMortgage: 0,\r\n            inviteUserCount: 0,\r\n            inviteUserReward: 0,\r\n            applyRelieveTime: 0,\r\n            handleRelieveTime: 0\r\n        });\r\n\r\n        User memory u = User({\r\n            userAddr: _addr,\r\n            avatar: \"\",\r\n            email: \"\",\r\n            isOnline: 1,\r\n            userFlag: 0,\r\n            credit: 0,\r\n            regTime: block.timestamp,\r\n            tradeStats: tradeStats,\r\n            morgageStats: morgageStats\r\n        });\r\n        users[_addr] = u;\r\n\r\n        userList.push(u);\r\n        userIndex[_addr] = userList.length - 1;\r\n        emit addUser(_addr);\r\n    }\r\n\r\n    function _updateInfo(\r\n        address _addr,\r\n        string memory _avatar,\r\n        string memory _email,\r\n        uint256 _isOnline\r\n    ) internal {\r\n        require(_addr != address(0), \"UserStorage: _addr null is not allowed\");\r\n        require(\r\n            users[_addr].userAddr != address(0),\r\n            \"UserStorage: current User not exist\"\r\n        );\r\n\r\n        User memory u = users[_addr];\r\n        if (bytes(_avatar).length != 0) {\r\n            u.avatar = _avatar;\r\n        }\r\n        if (bytes(_email).length != 0) {\r\n            u.email = _email;\r\n        }\r\n\r\n        if (_isOnline != uint256(0)) {\r\n            u.isOnline = _isOnline;\r\n        }\r\n\r\n        users[_addr] = u;\r\n        userList[userIndex[_addr]] = u;\r\n    }\r\n\r\n    function _updateTradeStats(\r\n        address _addr,\r\n        TradeStats memory _tradeStats,\r\n        uint256 _credit\r\n    ) internal {\r\n        require(_addr != address(0), \"UserStorage: _addr null is not allowed\");\r\n        require(\r\n            users[_addr].userAddr != address(0),\r\n            \"UserStorage: current User not exist\"\r\n        );\r\n\r\n        User memory u = users[_addr];\r\n\r\n        u.credit = _credit;\r\n\r\n        u.tradeStats.tradeTotal = _tradeStats.tradeTotal;\r\n\r\n        u.tradeStats.restTotal = _tradeStats.restTotal;\r\n\r\n        users[_addr] = u;\r\n        userList[userIndex[_addr]] = u;\r\n    }\r\n\r\n    function _updateMorgageStats(\r\n        address _addr,\r\n        MorgageStats memory _morgageStats\r\n    ) internal {\r\n        require(_addr != address(0), \"UserStorage: _addr null is not allowed\");\r\n        require(\r\n            users[_addr].userAddr != address(0),\r\n            \"UserStorage: current User not exist\"\r\n        );\r\n\r\n        User memory u = users[_addr];\r\n\r\n        u.morgageStats.mortgage = _morgageStats.mortgage;\r\n        u.morgageStats.freezeMortgage = _morgageStats.freezeMortgage;\r\n        u.morgageStats.relieveMortgage = _morgageStats.relieveMortgage;\r\n        u.morgageStats.inviteUserCount = _morgageStats.inviteUserCount;\r\n        u.morgageStats.inviteUserReward = _morgageStats.inviteUserReward;\r\n        u.morgageStats.applyRelieveTime = _morgageStats.applyRelieveTime;\r\n        u.morgageStats.handleRelieveTime = _morgageStats.handleRelieveTime;\r\n\r\n        users[_addr] = u;\r\n        userList[userIndex[_addr]] = u;\r\n    }\r\n\r\n    function _search(address _addr) internal view returns (User memory user) {\r\n        require(_addr != address(0), \"UserStorage: _addr null is not allowed\");\r\n        require(\r\n            users[_addr].userAddr != address(0),\r\n            \"UserStorage: current User not exist\"\r\n        );\r\n\r\n        User memory a = users[_addr];\r\n        return a;\r\n    }\r\n\r\n    function register() external payable {\r\n        require(!isMemberOf(), \"has registed\");\r\n\r\n        if (feeAmount > 0) {\r\n            require(recipient != address(0), \"recipient null is not allowed\");\r\n            require(msg.value >= feeAmount, \"insufficient balance\");\r\n            payable(recipient).transfer(feeAmount);\r\n        }\r\n        _insert(msg.sender);\r\n    }\r\n\r\n    function isMemberOf() public view returns (bool) {\r\n        return (users[msg.sender].userAddr != address(0));\r\n    }\r\n\r\n    function updateInfo(\r\n        string memory _avatar,\r\n        string memory _email,\r\n        uint256 _isOnline\r\n    ) external onlyMemberOf {\r\n        _updateInfo(msg.sender, _avatar, _email, _isOnline);\r\n        emit updateUser(_avatar, _email, _isOnline);\r\n    }\r\n\r\n    function updateTradeStats(\r\n        address _addr,\r\n        TradeStats memory _tradeStats,\r\n        uint256 _credit\r\n    ) public onlyAuthFromAddr {\r\n        require(\r\n            msg.sender == _restCAddr ||\r\n                msg.sender == _orderCAddr ||\r\n                msg.sender == _appealCAddr ||\r\n                msg.sender == _recordCAddr,\r\n            \"UserStorage:Invalid from contract address\"\r\n        );\r\n        _updateTradeStats(_addr, _tradeStats, _credit);\r\n    }\r\n\r\n    function updateMorgageStats(\r\n        address _addr,\r\n        MorgageStats memory _morgageStats\r\n    ) public onlyAuthFromAddr {\r\n        require(\r\n            msg.sender == _recordCAddr,\r\n            \"UserStorage:Invalid from contract address\"\r\n        );\r\n        _updateMorgageStats(_addr, _morgageStats);\r\n    }\r\n\r\n    function updateUserRole(address _addr, uint256 _userFlag)\r\n        public\r\n        onlyAuthFromAddr\r\n    {\r\n        require(\r\n            msg.sender == _recordCAddr,\r\n            \"UserStorage:Invalid from contract address\"\r\n        );\r\n        require(_addr != address(0), \"UserStorage: _addr null is not allowed\");\r\n        require(\r\n            users[_addr].userAddr != address(0),\r\n            \"UserStorage: current User not exist\"\r\n        );\r\n\r\n        require(_userFlag <= 3, \"UserStorage: Invalid userFlag 3\");\r\n\r\n        User memory u = users[_addr];\r\n        u.userFlag = _userFlag;\r\n        users[_addr] = u;\r\n        userList[userIndex[_addr]] = u;\r\n    }\r\n\r\n    function searchUser(address _addr)\r\n        external\r\n        view\r\n        returns (User memory user)\r\n    {\r\n        return _search(_addr);\r\n    }\r\n\r\n    function searchUserList() external view returns (User[] memory) {\r\n        return userList;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"addUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_avatar\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_isOnline\",\"type\":\"uint256\"}],\"name\":\"updateUser\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromRest\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromOrder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromRecord\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromAppeal\",\"type\":\"address\"}],\"name\":\"authFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMemberOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"searchUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"isOnline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFlag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tradeTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"restTotal\",\"type\":\"uint256\"}],\"internalType\":\"struct UserStorage.TradeStats\",\"name\":\"tradeStats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeMortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relieveMortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteUserCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteUserReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyRelieveTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"handleRelieveTime\",\"type\":\"uint256\"}],\"internalType\":\"struct UserStorage.MorgageStats\",\"name\":\"morgageStats\",\"type\":\"tuple\"}],\"internalType\":\"struct UserStorage.User\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"searchUserList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"isOnline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFlag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tradeTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"restTotal\",\"type\":\"uint256\"}],\"internalType\":\"struct UserStorage.TradeStats\",\"name\":\"tradeStats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeMortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relieveMortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteUserCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteUserReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyRelieveTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"handleRelieveTime\",\"type\":\"uint256\"}],\"internalType\":\"struct UserStorage.MorgageStats\",\"name\":\"morgageStats\",\"type\":\"tuple\"}],\"internalType\":\"struct UserStorage.User[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_isOnline\",\"type\":\"uint256\"}],\"name\":\"updateInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeMortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relieveMortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteUserCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteUserReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyRelieveTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"handleRelieveTime\",\"type\":\"uint256\"}],\"internalType\":\"struct UserStorage.MorgageStats\",\"name\":\"_morgageStats\",\"type\":\"tuple\"}],\"name\":\"updateMorgageStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tradeTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"restTotal\",\"type\":\"uint256\"}],\"internalType\":\"struct UserStorage.TradeStats\",\"name\":\"_tradeStats\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_credit\",\"type\":\"uint256\"}],\"name\":\"updateTradeStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_userFlag\",\"type\":\"uint256\"}],\"name\":\"updateUserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"isOnline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFlag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tradeTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"restTotal\",\"type\":\"uint256\"}],\"internalType\":\"struct UserStorage.TradeStats\",\"name\":\"tradeStats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeMortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relieveMortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteUserCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteUserReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyRelieveTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"handleRelieveTime\",\"type\":\"uint256\"}],\"internalType\":\"struct UserStorage.MorgageStats\",\"name\":\"morgageStats\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"isOnline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFlag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tradeTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"restTotal\",\"type\":\"uint256\"}],\"internalType\":\"struct UserStorage.TradeStats\",\"name\":\"tradeStats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeMortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relieveMortgage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteUserCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteUserReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyRelieveTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"handleRelieveTime\",\"type\":\"uint256\"}],\"internalType\":\"struct UserStorage.MorgageStats\",\"name\":\"morgageStats\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UserStorage", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c01babb8bafb39b027056d93b2c169302e50f0b380a26a2ec6badb082333ab9e"}