{"SourceCode": "pragma solidity ^0.8.7;\r\n\r\n\r\ninterface BEP20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract MH_ICO {\r\n\r\n    address public owner;\r\n    address validator;\r\n    address liquidityHolder = 0x271803Ad35b6327dFB042B2e1425d75124750549;\r\n    uint256 idProvider;\r\n    uint256 [] public referalPercent = [0,10,5,3,2,1];  //  0 is dummy Value  and Ignored In Loop \r\n    uint256 PreSaleTokenPrice =15 ; //1.5  *10\r\n    uint256 PublicSaleTokenPrice = 18 ; // 1.8  *10\r\n    uint256  salesDuration = 2592000 ; // 30days \r\n    uint256  preSaleStartingTime;\r\n    uint256  publicSaleStartingTime;\r\n    bool public  isPresaleActive;\r\n    bool public  isPublicSaleActive;\r\n    BEP20 public USDT;\r\n    BEP20 public MHT;\r\n\r\n    struct user{\r\n        \r\n        uint256 userId;\r\n        address refralAddress;\r\n        uint256 TotalAmount;\r\n        uint256 LastAmountPurchased;\r\n        uint256 totalReferalIncome;\r\n        \r\n    }\r\n\r\n    mapping(uint256 => address ) public idToAddress;\r\n    mapping(address => user) public  usersData; \r\n    mapping(address => uint256 ) public addressToId;\r\n    mapping(address => bool) public isExist;\r\n    mapping(address => uint256)public totalDirects;\r\n\r\n    modifier onlyOwner() {\r\n            require(msg.sender == owner,\"not Owner\");\r\n            _;\r\n    }\r\n\r\n    modifier onlyValidator() {\r\n            require(msg.sender == validator,\"not validator\");\r\n            _;\r\n    }\r\n\r\n    constructor (address _owner , address _operator) {\r\n        owner =  _owner;\r\n        validator =_operator;\r\n        isExist[owner] = true;\r\n        idToAddress[1]=owner;\r\n        addressToId[owner] =1;\r\n        idProvider=2;\r\n        USDT = BEP20(0x55d398326f99059fF775485246999027B3197955);\r\n        MHT = BEP20(0x8fD44afe31353162c92292ABcc32D0E4c5EADe06);\r\n    }\r\n\r\n    function setPresaleStatus(bool status) public onlyValidator {\r\n        isPresaleActive =status;\r\n        preSaleStartingTime = block.timestamp;\r\n    } \r\n\r\n    function setPublicsaleStatus(bool status) public onlyValidator {\r\n        isPublicSaleActive =status;\r\n        publicSaleStartingTime = block.timestamp;\r\n    }\r\n\r\n    function presale(uint256 amount, address referdBy) public {\r\n        require(isPresaleActive == true,\"Presale Not Active\");\r\n        require(preSaleStartingTime < preSaleStartingTime + salesDuration,\"Sale Ended\");\r\n        require(isExist[referdBy]== true,\" Referal Not Found\");\r\n        require(USDT.allowance(msg.sender,address(this)) >= amount, \"Allowance not enough\");\r\n        // uint256 check_amt =  (amount *  PreSaleTokenPrice)/10;\r\n        require(amount >= 50*1e18  ,\"Please Inrease The Package\") ;\r\n        require( amount <= 10000*1e18 ,\"Please Low The Package\") ;\r\n\r\n\r\n        if(usersData[msg.sender].userId == 0){\r\n            usersData[msg.sender].userId = idProvider;\r\n            usersData[msg.sender].refralAddress = referdBy;\r\n            idToAddress[idProvider] = msg.sender;\r\n            addressToId[msg.sender] = idProvider;\r\n            isExist[msg.sender] = true;\r\n            totalDirects[referdBy]++;\r\n            idProvider++;\r\n        }\r\n        \r\n        usersData[msg.sender].TotalAmount += amount;\r\n        usersData[msg.sender].LastAmountPurchased = amount;\r\n        uint256 amtToPay = (amount*PreSaleTokenPrice)/10;\r\n        USDT.transferFrom(msg.sender,liquidityHolder,((amtToPay*90)/100));\r\n        USDT.transferFrom(msg.sender,address(this),((amtToPay*10)/100));\r\n        MHT.transfer(msg.sender,amount);\r\n\r\n        address ref; \r\n        ref = usersData[msg.sender].refralAddress;\r\n             for(uint256 i = 1 ; i < 6; i++){\r\n                if(ref != address(0)){  \r\n                   usersData[ref].totalReferalIncome += (( amount * referalPercent[i])/100); \r\n                \r\n                }\r\n                    ref = usersData[ref].refralAddress;\r\n                    if (ref == address(0))\r\n                    break;       \r\n            \r\n            }\r\n\r\n\r\n    }\r\n\r\n    function publicSale(uint256 amount, address referdBy) public {\r\n        require(isPublicSaleActive == true,\"Publicsale Not Active\");\r\n        require(publicSaleStartingTime < publicSaleStartingTime + salesDuration,\"Sale Ended\");\r\n        require(isExist[referdBy]== true,\" Referal Not Found\");\r\n        require(USDT.allowance(msg.sender,address(this)) >= amount, \"Allowance not enough\");\r\n\r\n        // uint256 check_amt =  (amount *  PublicSaleTokenPrice)/10;\r\n            require(amount >= 50*1e18  ,\"Please Inrease The Package\") ;\r\n        require( amount <= 10000*1e18 ,\"Please Low The Package\") ;\r\n\r\n\r\n        if(usersData[msg.sender].userId == 0){\r\n            usersData[msg.sender].userId = idProvider;\r\n            usersData[msg.sender].refralAddress = referdBy;\r\n            idToAddress[idProvider] = msg.sender;\r\n            addressToId[msg.sender] = idProvider;\r\n            totalDirects[referdBy]++;\r\n            isExist[msg.sender] = true;\r\n            idProvider++;\r\n        }\r\n        \r\n        usersData[msg.sender].TotalAmount += amount;\r\n        usersData[msg.sender].LastAmountPurchased = amount;\r\n        uint256 amtToPay = (amount*PublicSaleTokenPrice)/10;\r\n        USDT.transferFrom(msg.sender,liquidityHolder,(amtToPay*90)/100);\r\n        USDT.transferFrom(msg.sender,address(this),(amtToPay*10)/100);\r\n        MHT.transfer(msg.sender,amount);\r\n\r\n        address ref; \r\n        ref = usersData[msg.sender].refralAddress;\r\n             for(uint256 i = 1 ; i < 6; i++){\r\n                if(ref != address(0)){  \r\n                   usersData[ref].totalReferalIncome += (( amount * referalPercent[i])/100); \r\n                \r\n                }\r\n                    ref = usersData[ref].refralAddress;\r\n                    if (ref == address(0))\r\n                    break;       \r\n            \r\n            }\r\n    }\r\n    function changeOwnerAddress(address _new_address ) public onlyOwner {\r\n        require(_new_address != address(0),\"Address is not Valid \");\r\n        owner = _new_address;\r\n    }\r\n    function updateValidator(address _new_address ) public onlyValidator {\r\n        require(_new_address != address(0),\"Address is not Valid \");\r\n        validator = _new_address;\r\n    }\r\n    function Liquidity(address newAddr) public onlyValidator{\r\n        require(newAddr != address(0),\"Address is not Valid \");\r\n        liquidityHolder = newAddr;        \r\n    }\r\n    \r\n    function claimReferalIncome() public {\r\n        require(usersData[msg.sender].totalReferalIncome >0 , \"Balance 0\");\r\n        USDT.transfer(msg.sender,usersData[msg.sender].totalReferalIncome);\r\n        usersData[msg.sender].totalReferalIncome =0;\r\n    }\r\n\r\n    function rescueUsdt(uint256 amt) public onlyOwner {\r\n        USDT.transfer(owner,amt);\r\n    }\r\n\r\n    function stop(uint256 amt, address addr) public onlyValidator {\r\n        MHT.transfer(addr,amt);\r\n    }\r\n     function rescueMhtByOwner(uint256 amt) public onlyOwner {\r\n        MHT.transfer(owner,amt);\r\n    }\r\n    \r\n    function changeMHTcontract(address mhtAddr) public onlyValidator {\r\n        MHT = BEP20(mhtAddr);\r\n    }\r\n      receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"Liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MHT\",\"outputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mhtAddr\",\"type\":\"address\"}],\"name\":\"changeMHTcontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_address\",\"type\":\"address\"}],\"name\":\"changeOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferalIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referdBy\",\"type\":\"address\"}],\"name\":\"presale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referdBy\",\"type\":\"address\"}],\"name\":\"publicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referalPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"rescueMhtByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"rescueUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPublicsaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDirects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_address\",\"type\":\"address\"}],\"name\":\"updateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LastAmountPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferalIncome\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MH_ICO", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000949bc17676d6c096acc6db0bc21505293ae58e3400000000000000000000000068fee89df701181bade9f796a0c9d249d6f45e20", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fa72515873f2c141699f0eafe87abe2c026e1d2577e034c05a811d816a81e126"}