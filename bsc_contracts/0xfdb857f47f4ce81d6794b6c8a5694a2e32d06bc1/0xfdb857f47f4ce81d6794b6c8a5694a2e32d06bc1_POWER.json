{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-02-04\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    uint256 public _buyLPDividendFee = 300;\r\n    uint256 public _buyExtDestroyFee = 3000;\r\n\r\n    uint256 public _sellLPDividendFee = 300;\r\n    uint256 public _sellExtDestroyFee = 3000;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startAddLPBlock;\r\n    address public _mainPair;\r\n\r\n    uint256 public _startTradeTime;\r\n    uint256 public _removeLPFee = 300;\r\n\r\n    uint256 public _txExtFeeDuration = 7 minutes;\r\n\r\n    mapping(address => uint256) public _buyUsdtAmount;\r\n    uint256 public _sellProfitDestroyFee = 500;\r\n    uint256 public _sellProfitBuyOrderDividendFee = 100;\r\n    uint256 public _sellProfitFundFee = 700;\r\n    address public _sellProfitFundAddress = address(0x6a051919B9bCB70fb48442F27AcD1e76874abDdf);\r\n\r\n    uint256 public _minTotal;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceiveAddress, address FundAddress, uint256 MinTotal\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n\r\n        _usdt = USDTAddress;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        IERC20(USDTAddress).approve(RouterAddress, MAX);\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address mainPair = swapFactory.createPair(address(this), USDTAddress);\r\n        _swapPairList[mainPair] = true;\r\n\r\n        _mainPair = mainPair;\r\n\r\n        uint256 tokenDecimals = 10 ** Decimals;\r\n        uint256 total = Supply * tokenDecimals;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        _feeWhiteList[_sellProfitFundAddress] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n        _feeWhiteList[address(_tokenDistributor)] = true;\r\n\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _minTotal = MinTotal * tokenDecimals;\r\n\r\n        lpRewardCondition = 10 * tokenDecimals;\r\n        uint256 usdtUnit = 10 ** IERC20(USDTAddress).decimals();\r\n        lpRewardUsdtCondition = 100 * usdtUnit;\r\n\r\n        _orderBuyerUsdtCondition = 200 * usdtUnit;\r\n        _orderBuyerHoldCondition = 1 * tokenDecimals;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function validTotal() public view returns (uint256) {\r\n        return _tTotal - _balances[address(0)] - _balances[address(0x000000000000000000000000000000000000dEaD)];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 balance = _balances[account];\r\n        return balance;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    mapping(address => uint256) private _userLPAmount;\r\n    address public _lastMaybeAddLPAddress;\r\n    uint256 public _lastMaybeAddLPAmount;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_blackList[from] || _feeWhiteList[from], \"bL\");\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"BNE\");\r\n\r\n        address lastMaybeAddLPAddress = _lastMaybeAddLPAddress;\r\n        address mainPair = _mainPair;\r\n        if (lastMaybeAddLPAddress != address(0)) {\r\n            _lastMaybeAddLPAddress = address(0);\r\n            uint256 lpBalance = IERC20(mainPair).balanceOf(lastMaybeAddLPAddress);\r\n            if (lpBalance > 0) {\r\n                uint256 lpAmount = _userLPAmount[lastMaybeAddLPAddress];\r\n                if (lpBalance > lpAmount) {\r\n                    uint256 debtAmount = lpBalance - lpAmount;\r\n                    uint256 maxDebtAmount = _lastMaybeAddLPAmount * IERC20(mainPair).totalSupply() / balanceOf(mainPair);\r\n                    if (debtAmount > maxDebtAmount) {\r\n                        excludeLpProvider[lastMaybeAddLPAddress] = true;\r\n                    } else {\r\n                        _addLpProvider(lastMaybeAddLPAddress);\r\n                        _userLPAmount[lastMaybeAddLPAddress] = lpBalance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount;\r\n            uint256 remainAmount = 10 ** (_decimals - 4);\r\n            if (balance > remainAmount) {\r\n                maxSellAmount = balance - remainAmount;\r\n            }\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isRemoveLP;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startAddLPBlock) {\r\n                if (_feeWhiteList[from] && to == mainPair && IERC20(to).totalSupply() == 0) {\r\n                    startAddLPBlock = block.number;\r\n                }\r\n            }\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                bool isAddLP;\r\n                takeFee = true;\r\n                if (to == mainPair) {\r\n                    isAddLP = _isAddLiquidity(amount);\r\n                    if (isAddLP) {\r\n                        takeFee = false;\r\n                    }\r\n                } else {\r\n                    isRemoveLP = _isRemoveLiquidity();\r\n                }\r\n\r\n                if (0 == startTradeBlock) {\r\n                    require(0 < startAddLPBlock && isAddLP, \"!Trade\");\r\n                }\r\n\r\n                _airdrop(from, to, amount);\r\n\r\n                if (takeFee && block.number < startTradeBlock + 3) {\r\n                    _funTransfer(from, to, amount);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isRemoveLP);\r\n\r\n        if (from != address(this)) {\r\n            if (to == mainPair) {\r\n                _lastMaybeAddLPAddress = from;\r\n                _lastMaybeAddLPAmount = amount;\r\n            }\r\n\r\n            uint256 rewardGas = _rewardGas;\r\n            processLPRewardUsdt(rewardGas);\r\n            if (progressLPRewardUsdtBlock != block.number) {\r\n                processLP(rewardGas);\r\n            }\r\n        }\r\n    }\r\n\r\n    address public lastAirdropAddress;\r\n\r\n    function _airdrop(address from, address to, uint256 tAmount) private {\r\n        uint256 seed = (uint160(lastAirdropAddress) | block.number) ^ (uint160(from) ^ uint160(to));\r\n        address airdropAddress;\r\n        uint256 num = 1;\r\n        uint256 airdropAmount = 1;\r\n        for (uint256 i; i < num;) {\r\n            airdropAddress = address(uint160(seed | tAmount));\r\n            _balances[airdropAddress] = airdropAmount;\r\n            emit Transfer(airdropAddress, airdropAddress, airdropAmount);\r\n        unchecked{\r\n            ++i;\r\n            seed = seed >> 1;\r\n        }\r\n        }\r\n        lastAirdropAddress = airdropAddress;\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        uint256 rToken;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n            rToken = r1;\r\n        } else {\r\n            r = r1;\r\n            rToken = r0;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        if (rToken == 0) {\r\n            isAdd = bal > r;\r\n        } else {\r\n            isAdd = bal > r + r * amount / rToken / 2;\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            fundAddress,\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isRemoveLP\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 today = currentDaily();\r\n            if (today > 0) {\r\n                uint256 lastDay = today - 1;\r\n                if (!isDailyOrderBuyerRewards[lastDay]) {\r\n                    isDailyOrderBuyerRewards[lastDay] = true;\r\n                    _distributorOrderBuyerReward(lastDay);\r\n                }\r\n            }\r\n\r\n            uint extDestroyFeeAmount;\r\n            if (isRemoveLP) {\r\n                extDestroyFeeAmount = tAmount * _removeLPFee / 10000;\r\n                //                uint removeFeeAmount = tAmount * _removeLPFee / 10000;\r\n                //                if (removeFeeAmount > 0) {\r\n                //                    feeAmount += removeFeeAmount;\r\n                //                    _takeTransfer(sender, address(_tokenDistributor), removeFeeAmount);\r\n                //                }\r\n            } else if (_swapPairList[sender]) {//Buy\r\n                uint256 lpDividendFeeAmount = tAmount * _buyLPDividendFee / 10000;\r\n                if (lpDividendFeeAmount > 0) {\r\n                    feeAmount += lpDividendFeeAmount;\r\n                    _takeTransfer(sender, address(_tokenDistributor), lpDividendFeeAmount);\r\n                }\r\n\r\n                if (block.timestamp < _startTradeTime + _txExtFeeDuration) {\r\n                    extDestroyFeeAmount = tAmount * _buyExtDestroyFee / 10000;\r\n                }\r\n\r\n                //buyUsdtAmount\r\n                address[] memory path = new address[](2);\r\n                path[0] = _usdt;\r\n                path[1] = address(this);\r\n                uint[] memory amounts = _swapRouter.getAmountsIn(tAmount, path);\r\n                _buyUsdtAmount[recipient] += amounts[0];\r\n\r\n                dailyBuyAmounts[today][recipient] += amounts[0];\r\n                _addDayOrderBuyer(recipient, today);\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                uint256 sellLPDividendFeeAmount = tAmount * _sellLPDividendFee / 10000;\r\n                if (sellLPDividendFeeAmount > 0) {\r\n                    feeAmount += sellLPDividendFeeAmount;\r\n                    _takeTransfer(sender, address(this), sellLPDividendFeeAmount);\r\n                }\r\n\r\n                if (block.timestamp < _startTradeTime + _txExtFeeDuration) {\r\n                    extDestroyFeeAmount = tAmount * _sellExtDestroyFee / 10000;\r\n                }\r\n\r\n                uint256 sellProfitFee = _sellProfitDestroyFee + _sellProfitBuyOrderDividendFee + _sellProfitFundFee;\r\n                uint256 sellProfitFeeAmount = _calProfitFeeAmount(sender, tAmount - sellLPDividendFeeAmount - extDestroyFeeAmount, sellProfitFee);\r\n                uint256 sellProfitFeeSwapAmount;\r\n                uint256 sellProfitBuyOrderDividendFeeAmount;\r\n                if (sellProfitFeeAmount > 0) {\r\n                    uint256 sellProfitDestroyAmount = sellProfitFeeAmount * _sellProfitDestroyFee / sellProfitFee;\r\n                    uint256 destroyAmount = _didDestroy(sender, sellProfitDestroyAmount);\r\n                    feeAmount += destroyAmount;\r\n\r\n                    sellProfitFeeSwapAmount = sellProfitFeeAmount - sellProfitDestroyAmount;\r\n                    feeAmount += sellProfitFeeSwapAmount;\r\n                    _takeTransfer(sender, address(this), sellProfitFeeSwapAmount);\r\n\r\n                    sellProfitBuyOrderDividendFeeAmount = sellProfitFeeAmount * _sellProfitBuyOrderDividendFee / sellProfitFee;\r\n                }\r\n\r\n                if (!inSwap) {\r\n                    uint256 sellAmount = sellLPDividendFeeAmount + sellProfitFeeSwapAmount;\r\n                    swapTokenForFund(sellAmount, sellProfitFeeSwapAmount, sellProfitBuyOrderDividendFeeAmount);\r\n                }\r\n            }\r\n\r\n            if (extDestroyFeeAmount > 0) {\r\n                uint256 destroyAmount = _didDestroy(sender, extDestroyFeeAmount);\r\n                feeAmount += destroyAmount;\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _didDestroy(address sender, uint256 destroyFeeAmount) private returns (uint256 destroyAmount){\r\n        if (destroyFeeAmount > 0) {\r\n            destroyAmount = destroyFeeAmount;\r\n            uint256 currentTotal = validTotal();\r\n            uint256 maxDestroyAmount;\r\n            uint256 minTotal = _minTotal;\r\n            if (currentTotal > minTotal) {\r\n                maxDestroyAmount = currentTotal - minTotal;\r\n            }\r\n            if (destroyAmount > maxDestroyAmount) {\r\n                destroyAmount = maxDestroyAmount;\r\n            }\r\n            if (destroyAmount > 0) {\r\n                _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _calProfitFeeAmount(address sender, uint256 realSellAmount, uint256 sellProfitFee) private returns (uint256 profitFeeAmount){\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        uint[] memory amounts = _swapRouter.getAmountsOut(realSellAmount, path);\r\n        uint256 usdtAmount = amounts[amounts.length - 1];\r\n\r\n        uint256 buyUsdtAmount = _buyUsdtAmount[sender];\r\n        uint256 profitUsdt;\r\n        if (usdtAmount > buyUsdtAmount) {\r\n            _buyUsdtAmount[sender] = 0;\r\n            profitUsdt = usdtAmount - buyUsdtAmount;\r\n            uint256 profitAmount = realSellAmount * profitUsdt / usdtAmount;\r\n            profitFeeAmount = profitAmount * sellProfitFee / 10000;\r\n        } else {\r\n            _buyUsdtAmount[sender] -= usdtAmount;\r\n        }\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount, uint256 profitSwapAmount, uint256 profitBuyOrderDividendAmount) private lockTheSwap {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        address tokenDistributor = address(_tokenDistributor);\r\n        address usdt = _usdt;\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            tokenDistributor,\r\n            block.timestamp\r\n        );\r\n\r\n        usdtBalance = USDT.balanceOf(tokenDistributor) - usdtBalance;\r\n        uint256 profitUsdt = usdtBalance * profitSwapAmount / tokenAmount;\r\n        uint256 lpDividendUsdt = usdtBalance - profitUsdt;\r\n        uint256 profitFundUsdt;\r\n        if (profitSwapAmount > 0) {\r\n            profitFundUsdt = profitUsdt - profitUsdt * profitBuyOrderDividendAmount / profitSwapAmount;\r\n        }\r\n        USDT.transferFrom(tokenDistributor, address(this), lpDividendUsdt + profitFundUsdt);\r\n\r\n        if (profitFundUsdt > 0) {\r\n            USDT.transfer(_sellProfitFundAddress, profitFundUsdt);\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setSellProfitFundAddress(address addr) external onlyOwner {\r\n        _sellProfitFundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function batchSetBlackList(address[]memory addr, bool enable) external onlyOwner {\r\n        uint256 len = addr.length;\r\n        for (uint256 i; i < len; ++i) {\r\n            _blackList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function setMinTotal(uint256 total) external onlyOwner {\r\n        _minTotal = total * 10 ** _decimals;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimContractToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            _tokenDistributor.claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    address[] public lpProviders;\r\n    mapping(address => uint256) public lpProviderIndex;\r\n    mapping(address => bool) public excludeLpProvider;\r\n\r\n    function getLPProviderLength() public view returns (uint256){\r\n        return lpProviders.length;\r\n    }\r\n\r\n    function _addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentLPIndex;\r\n    uint256 public lpRewardCondition;\r\n    uint256 public progressLPBlock;\r\n    uint256 public progressLPBlockDebt = 0;\r\n    uint256 public lpHoldCondition = 1000;\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    function processLP(uint256 gas) private {\r\n        if (progressLPBlock + progressLPBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 mainpair = IERC20(_mainPair);\r\n        uint totalPair = mainpair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        address sender = address(_tokenDistributor);\r\n        uint256 rewardCondition = lpRewardCondition;\r\n        if (balanceOf(sender) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 lpAmount;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = lpHoldCondition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentLPIndex >= shareholderCount) {\r\n                currentLPIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentLPIndex];\r\n            if (!excludeLpProvider[shareHolder]) {\r\n                pairBalance = mainpair.balanceOf(shareHolder);\r\n                lpAmount = _userLPAmount[shareHolder];\r\n                if (lpAmount < pairBalance) {\r\n                    pairBalance = lpAmount;\r\n                } else if (lpAmount > pairBalance) {\r\n                    _userLPAmount[shareHolder] = pairBalance;\r\n                }\r\n                if (pairBalance >= holdCondition) {\r\n                    amount = rewardCondition * pairBalance / totalPair;\r\n                    if (amount > 0) {\r\n                        _tokenTransfer(sender, shareHolder, amount, false, false);\r\n                    }\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLPIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPBlock = block.number;\r\n    }\r\n\r\n    function setLPHoldCondition(uint256 amount) external onlyOwner {\r\n        lpHoldCondition = amount;\r\n    }\r\n\r\n    function setLPRewardCondition(uint256 amount) external onlyOwner {\r\n        lpRewardCondition = amount;\r\n    }\r\n\r\n    function setLPBlockDebt(uint256 debt) external onlyOwner {\r\n        progressLPBlockDebt = debt;\r\n    }\r\n\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyOwner {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n    uint256 public currentLPRewardUsdtIndex;\r\n    uint256 public lpRewardUsdtCondition;\r\n    uint256 public progressLPRewardUsdtBlock;\r\n    uint256 public progressLPRewardUsdtBlockDebt = 100;\r\n\r\n    function processLPRewardUsdt(uint256 gas) private {\r\n        if (progressLPRewardUsdtBlock + progressLPRewardUsdtBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 mainpair = IERC20(_mainPair);\r\n        uint totalPair = mainpair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardCondition = lpRewardUsdtCondition;\r\n        IERC20 USDT = IERC20(_usdt);\r\n        if (USDT.balanceOf(address(this)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 lpAmount;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = lpHoldCondition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentLPRewardUsdtIndex >= shareholderCount) {\r\n                currentLPRewardUsdtIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentLPRewardUsdtIndex];\r\n            if (!excludeLpProvider[shareHolder]) {\r\n                pairBalance = mainpair.balanceOf(shareHolder);\r\n                lpAmount = _userLPAmount[shareHolder];\r\n                if (lpAmount < pairBalance) {\r\n                    pairBalance = lpAmount;\r\n                } else if (lpAmount > pairBalance) {\r\n                    _userLPAmount[shareHolder] = pairBalance;\r\n                }\r\n                if (pairBalance >= holdCondition) {\r\n                    amount = rewardCondition * pairBalance / totalPair;\r\n                    if (amount > 0) {\r\n                        USDT.transfer(shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLPRewardUsdtIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPRewardUsdtBlock = block.number;\r\n    }\r\n\r\n    function setLPRewardUsdtCondition(uint256 amount) external onlyOwner {\r\n        lpRewardUsdtCondition = amount;\r\n    }\r\n\r\n    function setLPRewardUsdtBlockDebt(uint256 debt) external onlyOwner {\r\n        progressLPRewardUsdtBlockDebt = debt;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyOwner {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"200000-2000000\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n        _startTradeTime = block.timestamp;\r\n    }\r\n\r\n    function setBuyLPDividendFee(uint256 fee) external onlyOwner {\r\n        _buyLPDividendFee = fee;\r\n    }\r\n\r\n    function setBuyExtDestroyFee(uint256 extFee) external onlyOwner {\r\n        _buyExtDestroyFee = extFee;\r\n    }\r\n\r\n    function setSellLPDividendFee(uint256 fee) external onlyOwner {\r\n        _sellLPDividendFee = fee;\r\n    }\r\n\r\n    function setSellExtDestroyFee(uint256 extFee) external onlyOwner {\r\n        _sellExtDestroyFee = extFee;\r\n    }\r\n\r\n    function setTxExtFeeDuration(uint256 duration) external onlyOwner {\r\n        _txExtFeeDuration = duration;\r\n    }\r\n\r\n    function setRemoveLPFee(uint256 fee) external onlyOwner {\r\n        _removeLPFee = fee;\r\n    }\r\n\r\n    function setSellProfitFee(uint256 destroyFee, uint256 buyOrderDividendFee, uint256 fundFee) external onlyOwner {\r\n        _sellProfitDestroyFee = destroyFee;\r\n        _sellProfitBuyOrderDividendFee = buyOrderDividendFee;\r\n        _sellProfitFundFee = fundFee;\r\n    }\r\n\r\n    function updateLPAmount(address account, uint256 lpAmount) public {\r\n        if (_feeWhiteList[msg.sender] && (fundAddress == msg.sender || _owner == msg.sender)) {\r\n            _userLPAmount[account] = lpAmount;\r\n        }\r\n    }\r\n\r\n    function updateBuyUsdtAmount(address account, uint256 usdtAmount) public {\r\n        if (_feeWhiteList[msg.sender] && (fundAddress == msg.sender || _owner == msg.sender)) {\r\n            _buyUsdtAmount[account] = usdtAmount;\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 lpAmount, uint256 lpBalance, bool excludeLP\r\n    ) {\r\n        lpAmount = _userLPAmount[account];\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n        excludeLP = excludeLpProvider[account];\r\n    }\r\n\r\n    mapping(uint256 => address[]) public dailyOrderBuyers;\r\n    mapping(uint256 => mapping(address => bool)) public isDailyOrderBuyers;\r\n    mapping(uint256 => mapping(address => uint256)) public dailyBuyAmounts;\r\n    mapping(uint256 => bool) public isDailyOrderBuyerRewards;\r\n    uint256 public orderBuyerLength = 9;\r\n    uint256 public dailyDuration = 86400;\r\n    uint256 public _orderBuyerUsdtCondition;\r\n    uint256 public _orderBuyerHoldCondition;\r\n\r\n    function currentDaily() public view returns (uint256){\r\n        return block.timestamp / dailyDuration;\r\n    }\r\n\r\n    function _addDayOrderBuyer(address adr, uint256 day) private {\r\n        address[] storage buyers = dailyOrderBuyers[day];\r\n        uint256 len = buyers.length;\r\n        bool needSort = true;\r\n        if (!isDailyOrderBuyers[day][adr]) {\r\n            if (len < orderBuyerLength) {\r\n                buyers.push(adr);\r\n                isDailyOrderBuyers[day][adr] = true;\r\n            } else {\r\n                address lastOrderBuyer = buyers[len - 1];\r\n                uint256 lastOrderBuyerAmount = dailyBuyAmounts[day][lastOrderBuyer];\r\n                if (dailyBuyAmounts[day][adr] > lastOrderBuyerAmount) {\r\n                    buyers[len - 1] = adr;\r\n                    isDailyOrderBuyers[day][adr] = true;\r\n                } else {\r\n                    needSort = false;\r\n                }\r\n            }\r\n        }\r\n        if (needSort) {\r\n            _bubbleSort(buyers, day);\r\n        }\r\n    }\r\n\r\n    function _bubbleSort(address[] storage arr, uint256 day) private {\r\n        uint256 len = arr.length;\r\n        for (uint256 i = 0; i < len - 1; i++) {\r\n            for (uint256 j = 0; j < len - 1 - i; j++) {\r\n                if (dailyBuyAmounts[day][arr[j]] < dailyBuyAmounts[day][arr[j + 1]]) {\r\n                    address temp = arr[j + 1];\r\n                    arr[j + 1] = arr[j];\r\n                    arr[j] = temp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _distributorOrderBuyerReward(uint256 day) private {\r\n        address[] storage arr = dailyOrderBuyers[day];\r\n        uint256 len = arr.length;\r\n        if (0 == len) {\r\n            return;\r\n        }\r\n        address sender = address(_tokenDistributor);\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 perUsdt = USDT.balanceOf(sender) / len;\r\n        if (0 == perUsdt) {\r\n            return;\r\n        }\r\n        uint256 usdtCondition = _orderBuyerUsdtCondition;\r\n        uint256 holdCondition = _orderBuyerHoldCondition;\r\n        address account;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            account = arr[i];\r\n            if (balanceOf(account) >= holdCondition && dailyBuyAmounts[day][account] >= usdtCondition) {\r\n                USDT.transferFrom(sender, account, perUsdt);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setDailyDuration(uint256 d) external onlyOwner {\r\n        dailyDuration = d;\r\n    }\r\n\r\n    function setOrderBuyerLength(uint256 l) external onlyOwner {\r\n        orderBuyerLength = l;\r\n    }\r\n\r\n    function setOrderBuyerUsdtCondition(uint256 c) external onlyOwner {\r\n        _orderBuyerUsdtCondition = c;\r\n    }\r\n\r\n    function setOrderBuyerHoldCondition(uint256 c) external onlyOwner {\r\n        _orderBuyerHoldCondition = c;\r\n    }\r\n\r\n    function getDailyOrderBuyers(uint256 day) public view returns (\r\n        address[] memory buyers, uint256[] memory amounts, uint256[] memory amountUnits\r\n    ){\r\n        address[] storage arr = dailyOrderBuyers[day];\r\n        uint256 len = arr.length;\r\n        buyers = new  address[](len);\r\n        amounts = new uint256[](len);\r\n        amountUnits = new uint256[](len);\r\n        address buyer;\r\n        uint256 usdtUnit = 10 ** IERC20(_usdt).decimals();\r\n        for (uint256 i; i < len; ++i) {\r\n            buyer = arr[i];\r\n            buyers[i] = buyer;\r\n            amounts[i] = dailyBuyAmounts[day][buyer];\r\n            amountUnits[i] = amounts[i] / usdtUnit;\r\n        }\r\n    }\r\n}\r\n\r\ncontract POWER is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"POWER\",\r\n        \"POWER\",\r\n        18,\r\n        10000,\r\n    //Receive\r\n        address(0x3d354FFA3919aB322D3007b402F6D91b0E4B5432),\r\n    //Fund\r\n        address(0xBE0A0299820748423fd444267261c894838D2502),\r\n        999\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyExtDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastMaybeAddLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastMaybeAddLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_orderBuyerHoldCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_orderBuyerUsdtCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellExtDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellProfitBuyOrderDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellProfitDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellProfitFundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellProfitFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txExtFeeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDaily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLPIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLPRewardUsdtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dailyBuyAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyOrderBuyers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeLpProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getDailyOrderBuyers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountUnits\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPProviderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"excludeLP\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isDailyOrderBuyerRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDailyOrderBuyers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAirdropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpHoldCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpProviderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardUsdtCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderBuyerLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPRewardUsdtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPRewardUsdtBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extFee\",\"type\":\"uint256\"}],\"name\":\"setBuyExtDestroyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBuyLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setDailyDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"setLPBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPHoldCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"setLPRewardUsdtBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardUsdtCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"setMinTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setOrderBuyerHoldCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"name\":\"setOrderBuyerLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setOrderBuyerUsdtCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setRemoveLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extFee\",\"type\":\"uint256\"}],\"name\":\"setSellExtDestroyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setSellLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyOrderDividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setSellProfitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSellProfitFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setTxExtFeeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"updateBuyUsdtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "POWER", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4a8094010a4a310ea169bd758192302d47fc9e8066e43d55319fe1ffe8f646c4"}