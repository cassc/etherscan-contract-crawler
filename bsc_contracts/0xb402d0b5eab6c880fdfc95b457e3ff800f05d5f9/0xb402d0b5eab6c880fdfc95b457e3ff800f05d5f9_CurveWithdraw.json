{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-11-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetActionsUtilAddresses {\r\n    address internal constant DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576;\r\n    address internal constant REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b;\r\n    address internal constant DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3;\r\n    address internal constant SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90;\r\n    address internal constant PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\r\n    address internal constant LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e;\r\n    address internal constant TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ActionsUtilHelper is MainnetActionsUtilAddresses {\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetAuthAddresses {\r\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\r\n    address internal constant DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract AuthHelper is MainnetAuthAddresses {\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract AdminVault is AuthHelper {\r\n    address public owner;\r\n    address public admin;\r\n\r\n    error SenderNotAdmin();\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        admin = ADMIN_ADDR;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function changeOwner(address _owner) public {\r\n        if (admin != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function changeAdmin(address _admin) public {\r\n        if (admin != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        admin = _admin;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256 digits);\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary Address {\r\n    //insufficient balance\r\n    error InsufficientBalance(uint256 available, uint256 required);\r\n    //unable to send value, recipient may have reverted\r\n    error SendingValueFail();\r\n    //insufficient balance for call\r\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\r\n    //call to non-contract\r\n    error NonContractCall();\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        uint256 balance = address(this).balance;\r\n        if (balance < amount){\r\n            revert InsufficientBalance(balance, amount);\r\n        }\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!(success)){\r\n            revert SendingValueFail();\r\n        }\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        uint256 balance = address(this).balance;\r\n        if (balance < value){\r\n            revert InsufficientBalanceForCall(balance, value);\r\n        }\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        if (!(isContract(target))){\r\n            revert NonContractCall();\r\n        }\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AdminAuth is AuthHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\r\n\r\n    error SenderNotOwner();\r\n    error SenderNotAdmin();\r\n\r\n    modifier onlyOwner() {\r\n        if (adminVault.owner() != msg.sender){\r\n            revert SenderNotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        if (adminVault.admin() != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(_receiver).transfer(_amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(_receiver, _amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyAdmin {\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DFSRegistry is AdminAuth {\r\n    error EntryAlreadyExistsError(bytes4);\r\n    error EntryNonExistentError(bytes4);\r\n    error EntryNotInChangeError(bytes4);\r\n    error ChangeNotReadyError(uint256,uint256);\r\n    error EmptyPrevAddrError(bytes4);\r\n    error AlreadyInContractChangeError(bytes4);\r\n    error AlreadyInWaitPeriodChangeError(bytes4);\r\n\r\n    event AddNewContract(address,bytes4,address,uint256);\r\n    event RevertToPreviousAddress(address,bytes4,address,address);\r\n    event StartContractChange(address,bytes4,address,address);\r\n    event ApproveContractChange(address,bytes4,address,address);\r\n    event CancelContractChange(address,bytes4,address,address);\r\n    event StartWaitPeriodChange(address,bytes4,uint256);\r\n    event ApproveWaitPeriodChange(address,bytes4,uint256,uint256);\r\n    event CancelWaitPeriodChange(address,bytes4,uint256,uint256);\r\n\r\n    struct Entry {\r\n        address contractAddr;\r\n        uint256 waitPeriod;\r\n        uint256 changeStartTime;\r\n        bool inContractChange;\r\n        bool inWaitPeriodChange;\r\n        bool exists;\r\n    }\r\n\r\n    mapping(bytes4 => Entry) public entries;\r\n    mapping(bytes4 => address) public previousAddresses;\r\n\r\n    mapping(bytes4 => address) public pendingAddresses;\r\n    mapping(bytes4 => uint256) public pendingWaitTimes;\r\n\r\n    /// @notice Given an contract id returns the registered address\r\n    /// @dev Id is keccak256 of the contract name\r\n    /// @param _id Id of contract\r\n    function getAddr(bytes4 _id) public view returns (address) {\r\n        return entries[_id].contractAddr;\r\n    }\r\n\r\n    /// @notice Helper function to easily query if id is registered\r\n    /// @param _id Id of contract\r\n    function isRegistered(bytes4 _id) public view returns (bool) {\r\n        return entries[_id].exists;\r\n    }\r\n\r\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\r\n\r\n    /// @notice Adds a new contract to the registry\r\n    /// @param _id Id of contract\r\n    /// @param _contractAddr Address of the contract\r\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\r\n    function addNewContract(\r\n        bytes4 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public onlyOwner {\r\n        if (entries[_id].exists){\r\n            revert EntryAlreadyExistsError(_id);\r\n        }\r\n\r\n        entries[_id] = Entry({\r\n            contractAddr: _contractAddr,\r\n            waitPeriod: _waitPeriod,\r\n            changeStartTime: 0,\r\n            inContractChange: false,\r\n            inWaitPeriodChange: false,\r\n            exists: true\r\n        });\r\n\r\n        emit AddNewContract(msg.sender, _id, _contractAddr, _waitPeriod);\r\n    }\r\n\r\n    /// @notice Reverts to the previous address immediately\r\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\r\n    /// @param _id Id of contract\r\n    function revertToPreviousAddress(bytes4 _id) public onlyOwner {\r\n        if (!(entries[_id].exists)){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (previousAddresses[_id] == address(0)){\r\n            revert EmptyPrevAddrError(_id);\r\n        }\r\n\r\n        address currentAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = previousAddresses[_id];\r\n\r\n        emit RevertToPreviousAddress(msg.sender, _id, currentAddr, previousAddresses[_id]);\r\n    }\r\n\r\n    /// @notice Starts an address change for an existing entry\r\n    /// @dev Can override a change that is currently in progress\r\n    /// @param _id Id of contract\r\n    /// @param _newContractAddr Address of the new contract\r\n    function startContractChange(bytes4 _id, address _newContractAddr) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (entries[_id].inWaitPeriodChange){\r\n            revert AlreadyInWaitPeriodChangeError(_id);\r\n        }\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inContractChange = true;\r\n\r\n        pendingAddresses[_id] = _newContractAddr;\r\n\r\n        emit StartContractChange(msg.sender, _id, entries[_id].contractAddr, _newContractAddr);\r\n    }\r\n\r\n    /// @notice Changes new contract address, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveContractChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inContractChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){// solhint-disable-line\r\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\r\n        }\r\n\r\n        address oldContractAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = pendingAddresses[_id];\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        previousAddresses[_id] = oldContractAddr;\r\n\r\n        emit ApproveContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\r\n    }\r\n\r\n    /// @notice Cancel pending change\r\n    /// @param _id Id of contract\r\n    function cancelContractChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inContractChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n\r\n        address oldContractAddr = pendingAddresses[_id];\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        emit CancelContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\r\n    }\r\n\r\n    /// @notice Starts the change for waitPeriod\r\n    /// @param _id Id of contract\r\n    /// @param _newWaitPeriod New wait time\r\n    function startWaitPeriodChange(bytes4 _id, uint256 _newWaitPeriod) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (entries[_id].inContractChange){\r\n            revert AlreadyInContractChangeError(_id);\r\n        }\r\n\r\n        pendingWaitTimes[_id] = _newWaitPeriod;\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inWaitPeriodChange = true;\r\n\r\n        emit StartWaitPeriodChange(msg.sender, _id, _newWaitPeriod);\r\n    }\r\n\r\n    /// @notice Changes new wait period, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveWaitPeriodChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inWaitPeriodChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){ // solhint-disable-line\r\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\r\n        }\r\n\r\n        uint256 oldWaitTime = entries[_id].waitPeriod;\r\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\r\n        \r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n\r\n        emit ApproveWaitPeriodChange(msg.sender, _id, oldWaitTime, entries[_id].waitPeriod);\r\n    }\r\n\r\n    /// @notice Cancel wait period change\r\n    /// @param _id Id of contract\r\n    function cancelWaitPeriodChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inWaitPeriodChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n\r\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        emit CancelWaitPeriodChange(msg.sender, _id, oldWaitPeriod, entries[_id].waitPeriod);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract DSAuthority {\r\n    function canCall(\r\n        address src,\r\n        address dst,\r\n        bytes4 sig\r\n    ) public view virtual returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(address(0))) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; // global cache for contracts\r\n\r\n    constructor(address _cacheAddr) {\r\n        if (!(setCache(_cacheAddr))){\r\n            require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\r\n        }\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    function execute(bytes memory _code, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (address target, bytes32 response);\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (bytes32 response);\r\n\r\n    //set new cache\r\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\r\n}\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    // throw if contract failed to deploy\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DefisaverLogger {\r\n    event RecipeEvent(\r\n        address indexed caller,\r\n        string indexed logName\r\n    );\r\n\r\n    event ActionDirectEvent(\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    function logRecipeEvent(\r\n        string memory _logName\r\n    ) public {\r\n        emit RecipeEvent(msg.sender, _logName);\r\n    }\r\n\r\n    function logActionDirectEvent(\r\n        string memory _logName,\r\n        bytes memory _data\r\n    ) public {\r\n        emit ActionDirectEvent(msg.sender, _logName, _data);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract ActionBase is AdminAuth, ActionsUtilHelper {\r\n    event ActionEvent(\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\r\n\r\n    DefisaverLogger public constant logger = DefisaverLogger(\r\n        DFS_LOGGER_ADDR\r\n    );\r\n\r\n    //Wrong sub index value\r\n    error SubIndexValueError();\r\n    //Wrong return index value\r\n    error ReturnIndexValueError();\r\n\r\n    /// @dev Subscription params index range [128, 255]\r\n    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\r\n    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\r\n\r\n    /// @dev Return params index range [1, 127]\r\n    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\r\n    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\r\n\r\n    /// @dev If the input value should not be replaced\r\n    uint8 public constant NO_PARAM_MAPPING = 0;\r\n\r\n    /// @dev We need to parse Flash loan actions in a different way\r\n    enum ActionType { FL_ACTION, STANDARD_ACTION, FEE_ACTION, CHECK_ACTION, CUSTOM_ACTION }\r\n\r\n    /// @notice Parses inputs and runs the implemented action through a proxy\r\n    /// @dev Is called by the RecipeExecutor chaining actions together\r\n    /// @param _callData Array of input values each value encoded as bytes\r\n    /// @param _subData Array of subscribed vales, replaces input values if specified\r\n    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\r\n    /// @param _returnValues Returns values from actions before, which can be injected in inputs\r\n    /// @return Returns a bytes32 value through DSProxy, each actions implements what that value is\r\n    function executeAction(\r\n        bytes memory _callData,\r\n        bytes32[] memory _subData,\r\n        uint8[] memory _paramMapping,\r\n        bytes32[] memory _returnValues\r\n    ) public payable virtual returns (bytes32);\r\n\r\n    /// @notice Parses inputs and runs the single implemented action through a proxy\r\n    /// @dev Used to save gas when executing a single action directly\r\n    function executeActionDirect(bytes memory _callData) public virtual payable;\r\n\r\n    /// @notice Returns the type of action we are implementing\r\n    function actionType() public pure virtual returns (uint8);\r\n\r\n\r\n    //////////////////////////// HELPER METHODS ////////////////////////////\r\n\r\n    /// @notice Given an uint256 input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can replace the input value with\r\n    /// @param _returnValues Array of subscription data we can replace the input value with\r\n    function _parseParamUint(\r\n        uint _param,\r\n        uint8 _mapType,\r\n        bytes32[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (uint) {\r\n        if (isReplaceable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = uint(_returnValues[getReturnIndex(_mapType)]);\r\n            } else {\r\n                _param = uint256(_subData[getSubIndex(_mapType)]);\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n\r\n    /// @notice Given an addr input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can replace the input value with\r\n    /// @param _returnValues Array of subscription data we can replace the input value with\r\n    function _parseParamAddr(\r\n        address _param,\r\n        uint8 _mapType,\r\n        bytes32[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal view returns (address) {\r\n        if (isReplaceable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\r\n            } else {\r\n                /// @dev The last two values are specially reserved for proxy addr and owner addr\r\n                if (_mapType == 254) return address(this); //DSProxy address\r\n                if (_mapType == 255) return DSProxy(payable(address(this))).owner(); // owner of DSProxy\r\n\r\n                _param = address(uint160(uint256(_subData[getSubIndex(_mapType)])));\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n    /// @notice Given an bytes32 input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can replace the input value with\r\n    /// @param _returnValues Array of subscription data we can replace the input value with\r\n    function _parseParamABytes32(\r\n        bytes32 _param,\r\n        uint8 _mapType,\r\n        bytes32[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (bytes32) {\r\n        if (isReplaceable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = (_returnValues[getReturnIndex(_mapType)]);\r\n            } else {\r\n                _param = _subData[getSubIndex(_mapType)];\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n    /// @notice Checks if the paramMapping value indicated that we need to inject values\r\n    /// @param _type Indicated the type of the input\r\n    function isReplaceable(uint8 _type) internal pure returns (bool) {\r\n        return _type != NO_PARAM_MAPPING;\r\n    }\r\n\r\n    /// @notice Checks if the paramMapping value is in the return value range\r\n    /// @param _type Indicated the type of the input\r\n    function isReturnInjection(uint8 _type) internal pure returns (bool) {\r\n        return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);\r\n    }\r\n\r\n    /// @notice Transforms the paramMapping value to the index in return array value\r\n    /// @param _type Indicated the type of the input\r\n    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\r\n        if (!(isReturnInjection(_type))){\r\n            revert SubIndexValueError();\r\n        }\r\n\r\n        return (_type - RETURN_MIN_INDEX_VALUE);\r\n    }\r\n\r\n    /// @notice Transforms the paramMapping value to the index in sub array value\r\n    /// @param _type Indicated the type of the input\r\n    function getSubIndex(uint8 _type) internal pure returns (uint8) {\r\n        if (_type < SUB_MIN_INDEX_VALUE){\r\n            revert ReturnIndexValueError();\r\n        }\r\n        return (_type - SUB_MIN_INDEX_VALUE);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetCurveAddresses {\r\n    address internal constant CRV_TOKEN_ADDR = 0xD533a949740bb3306d119CC777fa900bA034cd52;\r\n    address internal constant CRV_3CRV_TOKEN_ADDR = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\r\n\r\n    address internal constant ADDRESS_PROVIDER_ADDR = 0x0000000022D53366457F9d5E68Ec105046FC4383;\r\n    address internal constant MINTER_ADDR = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\r\n    address internal constant VOTING_ESCROW_ADDR = 0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2;\r\n    address internal constant FEE_DISTRIBUTOR_ADDR = 0xA464e6DCda8AC41e03616F95f4BC98a13b8922Dc;\r\n    address internal constant GAUGE_CONTROLLER_ADDR = 0x2F50D538606Fa9EDD2B11E2446BEb18C9D5846bB;\r\n\r\n    address internal constant CURVE_3POOL_ZAP_ADDR = 0xA79828DF1850E8a3A3064576f380D90aECDD3359;\r\n\r\n    address constant internal CURVE_STETH_POOL_ADDR = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022;\r\n    address constant internal STE_CRV_ADDR = 0x06325440D014e39736583c165C2963BA99fAf14E;\r\n    address constant internal STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\r\n}\r\n\r\n\r\n\r\n\r\ninterface IAddressProvider {\r\n    function admin() external view returns (address);\r\n    function get_registry() external view returns (address);\r\n    function get_address(uint256 _id) external view returns (address);\r\n}\r\n\r\n\r\n\r\n\r\ninterface ICurveFactoryLP {\r\n    function minter() external view returns (address);\r\n    function name() external view returns (string memory);\r\n}\r\n\r\ninterface ICurveFactoryPool {\r\n    function token() external view returns (address);\r\n    function factory() external view returns (address);\r\n    function get_virtual_price() external view returns (uint256);\r\n}\r\n\r\ninterface ICurveFactory {\r\n    function get_coins(address) external view returns (address[2] memory);\r\n    function get_decimals(address) external view returns (uint256[2] memory);\r\n    function get_balances(address) external view returns (uint256[2] memory);\r\n    function get_gauge(address) external view returns (address);\r\n}\r\n\r\ninterface IGaugeController {\r\n    function gauge_types(address) external view returns (int128);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IDepositZap {\r\n    function pool() external view returns (address);\r\n    function curve() external view returns (address);\r\n    function token() external view returns (address);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IFeeDistributor {\r\n    function claim(address) external returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IMinter {\r\n    function mint(address _gaugeAddr) external;\r\n    function mint_many(address[8] memory _gaugeAddrs) external;\r\n}\r\n\r\n\r\n\r\n\r\ninterface IRegistry {\r\n    function get_lp_token(address) external view returns (address);\r\n    function get_pool_from_lp_token(address) external view returns (address);\r\n    function get_pool_name(address) external view returns(string memory);\r\n    function get_coins(address) external view returns (address[8] memory);\r\n    function get_n_coins(address) external view returns (uint256[2] memory);\r\n    function get_underlying_coins(address) external view returns (address[8] memory);\r\n    function get_decimals(address) external view returns (uint256[8] memory);\r\n    function get_underlying_decimals(address) external view returns (uint256[8] memory);\r\n    function get_balances(address) external view returns (uint256[8] memory);\r\n    function get_underlying_balances(address) external view returns (uint256[8] memory);\r\n    function get_virtual_price_from_lp_token(address) external view returns (uint256);\r\n    function get_gauges(address) external view returns (address[10] memory, int128[10] memory);\r\n    function pool_count() external view returns (uint256);\r\n    function pool_list(uint256) external view returns (address);\r\n}\r\n\r\n\r\n\r\n\r\ninterface ISwaps {\r\n\r\n    ///@notice Perform an exchange using the pool that offers the best rate\r\n    ///@dev Prior to calling this function, the caller must approve\r\n    ///        this contract to transfer `_amount` coins from `_from`\r\n    ///        Does NOT check rates in factory-deployed pools\r\n    ///@param _from Address of coin being sent\r\n    ///@param _to Address of coin being received\r\n    ///@param _amount Quantity of `_from` being sent\r\n    ///@param _expected Minimum quantity of `_from` received\r\n    ///        in order for the transaction to succeed\r\n    ///@param _receiver Address to transfer the received tokens to\r\n    ///@return uint256 Amount received\r\n    function exchange_with_best_rate(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _expected,\r\n        address _receiver\r\n    ) external payable returns (uint256);\r\n\r\n\r\n    ///@notice Perform an exchange using a specific pool\r\n    ///@dev Prior to calling this function, the caller must approve\r\n    ///        this contract to transfer `_amount` coins from `_from`\r\n    ///        Works for both regular and factory-deployed pools\r\n    ///@param _pool Address of the pool to use for the swap\r\n    ///@param _from Address of coin being sent\r\n    ///@param _to Address of coin being received\r\n    ///@param _amount Quantity of `_from` being sent\r\n    ///@param _expected Minimum quantity of `_from` received\r\n    ///        in order for the transaction to succeed\r\n    ///@param _receiver Address to transfer the received tokens to\r\n    ///@return uint256 Amount received\r\n    function exchange(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _expected,\r\n        address _receiver\r\n    ) external payable returns (uint256);\r\n\r\n\r\n\r\n    ///@notice Find the pool offering the best rate for a given swap.\r\n    ///@dev Checks rates for regular and factory pools\r\n    ///@param _from Address of coin being sent\r\n    ///@param _to Address of coin being received\r\n    ///@param _amount Quantity of `_from` being sent\r\n    ///@param _exclude_pools A list of up to 8 addresses which shouldn't be returned\r\n    ///@return Pool address, amount received\r\n    function get_best_rate(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        address[8] memory _exclude_pools\r\n    ) external view returns (address, uint256);\r\n\r\n\r\n    ///@notice Get the current number of coins received in an exchange\r\n    ///@dev Works for both regular and factory-deployed pools\r\n    ///@param _pool Pool address\r\n    ///@param _from Address of coin to be sent\r\n    ///@param _to Address of coin to be received\r\n    ///@param _amount Quantity of `_from` to be sent\r\n    ///@return Quantity of `_to` to be received\r\n    function get_exchange_amount(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external view returns (uint256);\r\n\r\n\r\n    ///@notice Get the current number of coins required to receive the given amount in an exchange\r\n    ///@param _pool Pool address\r\n    ///@param _from Address of coin to be sent\r\n    ///@param _to Address of coin to be received\r\n    ///@param _amount Quantity of `_to` to be received\r\n    ///@return Quantity of `_from` to be sent\r\n    function get_input_amount(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external view returns (uint256);\r\n\r\n\r\n    ///@notice Get the current number of coins required to receive the given amount in an exchange\r\n    ///@param _pool Pool address\r\n    ///@param _from Address of coin to be sent\r\n    ///@param _to Address of coin to be received\r\n    ///@param _amounts Quantity of `_to` to be received\r\n    ///@return Quantity of `_from` to be sent\r\n    function get_exchange_amounts(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256[] memory _amounts\r\n    ) external view returns (uint256[] memory);\r\n\r\n\r\n    ///@notice Set calculator contract\r\n    ///@dev Used to calculate `get_dy` for a pool\r\n    ///@param _pool Pool address\r\n    ///@return `CurveCalc` address\r\n    function get_calculator(address _pool) external view returns (address);\r\n\r\n\r\n    /// @notice Perform up to four swaps in a single transaction\r\n    /// @dev Routing and swap params must be determined off-chain. This\r\n    ///     functionality is designed for gas efficiency over ease-of-use.\r\n    /// @param _route Array of [initial token, pool, token, pool, token, ...]\r\n    ///     The array is iterated until a pool address of 0x00, then the last\r\n    ///     given token is transferred to `_receiver`\r\n    /// @param _swap_params Multidimensional array of [i, j, swap type] where i and j are the correct\r\n    ///     values for the n'th pool in `_route`. The swap type should be 1 for\r\n    ///     a stableswap `exchange`, 2 for stableswap `exchange_underlying`, 3\r\n    ///     for a cryptoswap `exchange`, 4 for a cryptoswap `exchange_underlying`,\r\n    ///     5 for Polygon factory metapools `exchange_underlying`, 6-8 for\r\n    ///     underlying coin -> LP token \"exchange\" (actually `add_liquidity`), 9 and 10\r\n    ///     for LP token -> underlying coin \"exchange\" (actually `remove_liquidity_one_coin`)\r\n    /// @param _amount The amount of `_route[0]` token being sent.\r\n    /// @param _expected The minimum amount received after the final swap.\r\n    /// @param _pools Array of pools for swaps via zap contracts. This parameter is only needed for\r\n    ///     Polygon meta-factories underlying swaps.\r\n    /// @param _receiver Address to transfer the final output token to.\r\n    /// @return Received amount of the final output token\r\n    function exchange_multiple(\r\n        address[9] memory _route,\r\n        uint256[3][4] memory _swap_params,\r\n        uint256 _amount,\r\n        uint256 _expected,\r\n        address[4] memory _pools,\r\n        address _receiver\r\n    ) external payable returns (uint256);\r\n\r\n    function exchange_multiple(\r\n        address[9] memory _route,\r\n        uint256[3][4] memory _swap_params,\r\n        uint256 _amount,\r\n        uint256 _expected\r\n    ) external payable returns (uint256);\r\n\r\n    function get_exchange_multiple_amount(\r\n        address[9] memory _route,\r\n        uint256[3][4] memory _swap_params,\r\n        uint256 _amount\r\n    ) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IVotingEscrow {\r\n    function create_lock(uint256 _amount, uint256 _unlockTime) external;\r\n    function increase_amount(uint256 _amount) external;\r\n    function increase_unlock_time(uint256 _unlockTime) external;\r\n    function withdraw() external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CurveHelper is MainnetCurveAddresses {\r\n    IAddressProvider public constant AddressProvider = IAddressProvider(ADDRESS_PROVIDER_ADDR);\r\n    IMinter public constant Minter = IMinter(MINTER_ADDR);\r\n    IVotingEscrow public constant VotingEscrow = IVotingEscrow(VOTING_ESCROW_ADDR);\r\n    IFeeDistributor public constant FeeDistributor = IFeeDistributor(FEE_DISTRIBUTOR_ADDR);\r\n\r\n    error CurveHelperInvalidLPToken(address);\r\n    error CurveHelperOneCoinAmbiguousIndex();\r\n    error CurveHelperInvalidFlags();\r\n\r\n    enum DepositTargetType {\r\n        SWAP,\r\n        ZAP_POOL,\r\n        ZAP_CURVE,\r\n        ZAP_3POOL\r\n    }\r\n\r\n    struct CurveCache {\r\n        address lpToken;\r\n        address pool;\r\n        address depositTarget;\r\n        bool isFactory;\r\n        uint256 N_COINS;\r\n        address[8] tokens;\r\n    }\r\n\r\n    function makeFlags(\r\n        DepositTargetType depositTargetType,\r\n        bool explicitUnderlying,\r\n        bool removeOneCoin,\r\n        bool withdrawExact\r\n    ) public pure returns (uint8 flags) {\r\n        if (withdrawExact && removeOneCoin) revert CurveHelperInvalidFlags();\r\n        flags = uint8(depositTargetType);\r\n        flags |= (explicitUnderlying ? 1 : 0) << 2;\r\n        flags |= (withdrawExact ? 1 : 0) << 3;\r\n        flags |= (removeOneCoin ? 1 : 0) << 4;\r\n    }\r\n\r\n    function parseFlags(\r\n        uint8 flags\r\n    ) public pure returns (\r\n        DepositTargetType depositTargetType,\r\n        bool explicitUnderlying,\r\n        bool removeOneCoin,\r\n        bool withdrawExact\r\n    ) {\r\n        depositTargetType = DepositTargetType(flags & 3);\r\n        explicitUnderlying = flags & (1 << 2) > 0;\r\n        withdrawExact = flags & (1 << 3) > 0;\r\n        removeOneCoin = flags & (1 << 4) > 0;\r\n        if (withdrawExact && removeOneCoin) revert CurveHelperInvalidFlags();\r\n    }\r\n\r\n    function getSwaps() internal view returns (ISwaps) {\r\n        return ISwaps(AddressProvider.get_address(2));\r\n    }\r\n\r\n    function getRegistry() internal view returns (IRegistry) {\r\n        return IRegistry(AddressProvider.get_registry());\r\n    }\r\n\r\n    function _getPoolInfo(address _depositTargetOrPool, DepositTargetType _depositTargetType, bool _explicitUnderlying) internal view returns (\r\n        CurveCache memory cache\r\n    ) {\r\n        bool underlying = false;\r\n        cache.depositTarget = _depositTargetOrPool;\r\n\r\n        if (_depositTargetType == DepositTargetType.ZAP_3POOL) {\r\n            cache.pool = _depositTargetOrPool;\r\n            cache.depositTarget = CURVE_3POOL_ZAP_ADDR;\r\n            underlying = true;\r\n        } else if (_depositTargetType == DepositTargetType.SWAP) {\r\n            cache.pool = _depositTargetOrPool;\r\n        } else {\r\n            underlying = true;\r\n\r\n            if (_depositTargetType == DepositTargetType.ZAP_POOL) {\r\n                cache.pool = IDepositZap(_depositTargetOrPool).pool();\r\n            } else {\r\n                cache.pool = IDepositZap(_depositTargetOrPool).curve();\r\n            }\r\n        }\r\n\r\n        IRegistry poolRegistry = getRegistry();\r\n        cache.lpToken = poolRegistry.get_lp_token(cache.pool);\r\n        if (cache.lpToken == address(0)) {\r\n            // assume factory pool\r\n            cache.isFactory = true;\r\n            try ICurveFactoryPool(cache.pool).token() returns (address lpToken) {\r\n                cache.lpToken = lpToken;\r\n            } catch {\r\n                revert CurveHelperInvalidLPToken(cache.lpToken);\r\n            }\r\n\r\n            cache.N_COINS = 2; // factory pools always have 2 tokens\r\n            ICurveFactory factory = ICurveFactory(ICurveFactoryPool(cache.pool).factory());\r\n            address[2] memory factoryTokens = factory.get_coins(cache.pool);\r\n            cache.tokens[0] = factoryTokens[0];\r\n            cache.tokens[1] = factoryTokens[1];\r\n        } else {\r\n            cache.N_COINS = poolRegistry.get_n_coins(cache.pool)[(_explicitUnderlying || underlying) ? 1 : 0];\r\n            if (underlying || _explicitUnderlying) {\r\n                cache.tokens = poolRegistry.get_underlying_coins(cache.pool);\r\n            } else {\r\n                cache.tokens =  poolRegistry.get_coins(cache.pool);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev small optimisation when looping over token balance checks in CurveWithdraw\r\n    function _getFirstAndLastTokenIndex(uint256[] memory _amounts, bool _removeOneCoin, bool _withdrawExact) internal pure returns (uint256 firstIndex, uint256 lastIndex) {\r\n        if (!_removeOneCoin && !_withdrawExact) {\r\n            return (0, _amounts.length - 1);\r\n        }\r\n\r\n        bool firstIndexSet;\r\n        for (uint256 i;  i < _amounts.length; i++) {\r\n            if (_amounts[i] != 0) {\r\n                lastIndex = i;\r\n                if (!firstIndexSet) {\r\n                    firstIndexSet = true;\r\n                    firstIndex = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_removeOneCoin && (firstIndex != lastIndex)) revert CurveHelperOneCoinAmbiguousIndex();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ninterface ICurve3PoolZap {\r\n    function add_liquidity(address, uint256[4] memory, uint256) external;\r\n    function remove_liquidity(address, uint256, uint256[4] memory) external;\r\n    function remove_liquidity_one_coin(address,uint256,int128,uint256) external;\r\n    function remove_liquidity_imbalance(address, uint256[4] memory, uint256) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IWETH {\r\n    function allowance(address, address) public virtual view returns (uint256);\r\n\r\n    function balanceOf(address) public virtual view returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) public virtual returns (bool);\r\n\r\n    function deposit() public payable virtual;\r\n\r\n    function withdraw(uint256) public virtual;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary TokenUtils {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant WETH_ADDR = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    function approveToken(\r\n        address _tokenAddr,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_tokenAddr == ETH_ADDR) return;\r\n\r\n        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\r\n            IERC20(_tokenAddr).safeApprove(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function pullTokensIfNeeded(\r\n        address _token,\r\n        address _from,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        // handle max uint amount\r\n        if (_amount == type(uint256).max) {\r\n            _amount = getBalance(_token, _from);\r\n        }\r\n\r\n        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\r\n            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    function withdrawTokens(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        if (_amount == type(uint256).max) {\r\n            _amount = getBalance(_token, address(this));\r\n        }\r\n\r\n        if (_to != address(0) && _to != address(this) && _amount != 0) {\r\n            if (_token != ETH_ADDR) {\r\n                IERC20(_token).safeTransfer(_to, _amount);\r\n            } else {\r\n                (bool success, ) = _to.call{value: _amount}(\"\");\r\n                require(success, \"Eth send fail\");\r\n            }\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    function depositWeth(uint256 _amount) internal {\r\n        IWETH(WETH_ADDR).deposit{value: _amount}();\r\n    }\r\n\r\n    function withdrawWeth(uint256 _amount) internal {\r\n        IWETH(WETH_ADDR).withdraw(_amount);\r\n    }\r\n\r\n    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\r\n        if (_tokenAddr == ETH_ADDR) {\r\n            return _acc.balance;\r\n        } else {\r\n            return IERC20(_tokenAddr).balanceOf(_acc);\r\n        }\r\n    }\r\n\r\n    function getTokenDecimals(address _token) internal view returns (uint256) {\r\n        if (_token == ETH_ADDR) return 18;\r\n\r\n        return IERC20(_token).decimals();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CurveWithdraw is ActionBase, CurveHelper {\r\n    using TokenUtils for address;\r\n\r\n    error CurveWithdrawZeroRecipient();\r\n    error CurveWithdrawWrongArraySize();\r\n    error CurveWithdrawPoolReverted();\r\n    error CurveWithdrawSlippageHit(uint256 coinIndex, uint256 expected, uint256 received);\r\n\r\n    struct Params {\r\n        address from;     // address where the LP tokens are pulled from\r\n        address to;   // address that will receive withdrawn tokens\r\n        address depositTarget;       // pool contract or zap deposit contract from which to withdraw\r\n        uint256 burnAmount; // amount of LP tokens to burn for withdrawal\r\n        uint8 flags;\r\n        uint256[] amounts;   // amount of each token to withdraw\r\n    }\r\n\r\n    function executeAction(\r\n        bytes memory _callData,\r\n        bytes32[] memory _subData,\r\n        uint8[] memory _paramMapping,\r\n        bytes32[] memory _returnValues\r\n    ) public payable virtual override returns (bytes32) {\r\n        Params memory params = parseInputs(_callData);\r\n    \r\n        params.from = _parseParamAddr(params.from, _paramMapping[0], _subData, _returnValues);\r\n        params.to = _parseParamAddr(params.to, _paramMapping[1], _subData, _returnValues);\r\n        params.depositTarget = _parseParamAddr(params.depositTarget, _paramMapping[2], _subData, _returnValues);\r\n        params.burnAmount = _parseParamUint(params.burnAmount, _paramMapping[3], _subData, _returnValues);\r\n        params.flags = uint8(_parseParamUint(params.flags, _paramMapping[4], _subData, _returnValues));\r\n        for (uint256 i = 0; i < params.amounts.length; i++) {\r\n            params.amounts[i] = _parseParamUint(params.amounts[i], _paramMapping[5 + i], _subData, _returnValues);\r\n        }\r\n\r\n        (uint256 burned, bytes memory logData) = _curveWithdraw(params);\r\n        emit ActionEvent(\"CurveWithdraw\", logData);\r\n        return bytes32(burned);\r\n    }\r\n\r\n    /// @inheritdoc ActionBase\r\n    function executeActionDirect(bytes memory _callData) public payable virtual override {\r\n        Params memory params = parseInputs(_callData);\r\n        ( ,bytes memory logData) = _curveWithdraw(params);\r\n        logger.logActionDirectEvent(\"CurveWithdraw\", logData);\r\n    }\r\n\r\n    /// @inheritdoc ActionBase\r\n    function actionType() public pure virtual override returns (uint8) {\r\n        return uint8(ActionType.STANDARD_ACTION);\r\n    }\r\n\r\n    //////////////////////////// ACTION LOGIC ////////////////////////////\r\n\r\n    /// @notice Withdraws user deposited tokens from depositTarget\r\n    function _curveWithdraw(Params memory _params) internal returns (uint256 burned, bytes memory logData) {\r\n        if (_params.to == address(0)) revert CurveWithdrawZeroRecipient();\r\n        (\r\n            DepositTargetType depositTargetType,\r\n            bool explicitUnderlying,\r\n            bool removeOneCoin,\r\n            bool withdrawExact\r\n        ) = parseFlags(_params.flags);\r\n\r\n        CurveCache memory cache = _getPoolInfo(_params.depositTarget, depositTargetType, explicitUnderlying);\r\n\r\n        if (_params.amounts.length != cache.N_COINS) revert CurveWithdrawWrongArraySize();\r\n\r\n        _params.burnAmount = cache.lpToken.pullTokensIfNeeded(_params.from, _params.burnAmount);\r\n        burned = cache.lpToken.getBalance(address(this));\r\n\r\n        /// @dev if removeOneCoin or explicitUnderlying we dont have to worry about other token balances as they are not updated\r\n        /// @dev otherwise zero amounts specified in _params.amounts doesnt mean that we wont get some of those tokens from withdrawal\r\n        (uint256 firstIndex, uint256 lastIndex) = _getFirstAndLastTokenIndex(_params.amounts, removeOneCoin, explicitUnderlying);\r\n        uint256[] memory balances = new uint256[](cache.N_COINS);\r\n        for (uint256 i = firstIndex; i <= lastIndex; i++) {\r\n            balances[i] = cache.tokens[i].getBalance(address(this));\r\n        }\r\n\r\n        if (depositTargetType == DepositTargetType.ZAP_3POOL) {\r\n            if (removeOneCoin) {\r\n                ICurve3PoolZap(cache.depositTarget).remove_liquidity_one_coin(cache.pool, _params.burnAmount, int128(int256(firstIndex)), _params.amounts[firstIndex]);\r\n            } else {\r\n                uint256[4] memory fixedSizeAmounts;\r\n                for (uint256 i = firstIndex; i <= lastIndex; i++) fixedSizeAmounts[i] = _params.amounts[i];\r\n\r\n                if (withdrawExact) {\r\n                    ICurve3PoolZap(cache.depositTarget).remove_liquidity_imbalance(cache.pool, fixedSizeAmounts, _params.burnAmount);\r\n                } else {\r\n                    ICurve3PoolZap(cache.depositTarget).remove_liquidity(cache.pool, _params.burnAmount, fixedSizeAmounts);\r\n                }\r\n            }\r\n        } else {\r\n            (bytes memory payload) = _constructPayload(\r\n                _params.amounts,\r\n                _params.burnAmount,\r\n                firstIndex,\r\n                removeOneCoin,\r\n                withdrawExact,\r\n                explicitUnderlying,\r\n                cache.isFactory\r\n            );\r\n            (bool success, ) = cache.depositTarget.call(payload);\r\n            if (!success) revert CurveWithdrawPoolReverted();\r\n        }\r\n\r\n        /// @dev when using remove_liquidity_one_coin() we only need to check the balance of the one coin\r\n        for (uint256 i = firstIndex; i <= lastIndex; i++) {\r\n            uint256 balanceDelta = cache.tokens[i].getBalance(address(this)) - balances[i];\r\n            address tokenAddr = cache.tokens[i];\r\n            // some curve pools will disrespect the minOutAmounts via rounding error and will not revert\r\n            // we tolerate this error up to 1bps (1 / 1_00_00)\r\n            // otherwise slippage shouldn't exist and the pool contract should revert if unable to withdraw the specified amounts\r\n            // however we do this check in case of an invalid deposit zap\r\n            if (balanceDelta < (_params.amounts[i] - _params.amounts[i] / 1_00_00)) revert CurveWithdrawSlippageHit(i, _params.amounts[i], balanceDelta);\r\n            if (tokenAddr == TokenUtils.ETH_ADDR) {\r\n                TokenUtils.depositWeth(balanceDelta);\r\n                tokenAddr = TokenUtils.WETH_ADDR;\r\n            }\r\n            tokenAddr.withdrawTokens(_params.to, balanceDelta);\r\n        }\r\n\r\n        logData = abi.encode(_params);\r\n        burned -= cache.lpToken.getBalance(address(this));\r\n    }\r\n\r\n    /// @notice Constructs payload for external contract call\r\n    function _constructPayload(\r\n        uint256[] memory _amounts,\r\n        uint256 _burnAmount,\r\n        uint256 _oneCoinIndex,\r\n        bool _removeOneCoin,\r\n        bool _withdrawExact,\r\n        bool _explicitUnderlying,\r\n        bool _isFactory\r\n    ) internal pure returns (bytes memory payload) {\r\n        bytes memory sig;\r\n        bytes4 selector;\r\n        bytes memory optional;\r\n        assert(_amounts.length < 9); // sanity check\r\n        if (_removeOneCoin) {\r\n            if (_explicitUnderlying) {\r\n                sig = \"remove_liquidity_one_coin(uint256,int128,uint256,bool)\";\r\n                optional = abi.encode(uint256(1));\r\n            } else if (_isFactory) {\r\n                sig = \"remove_liquidity_one_coin(uint256,uint256,uint256)\";\r\n            } else {\r\n                sig = \"remove_liquidity_one_coin(uint256,int128,uint256)\";\r\n            }\r\n\r\n            selector = bytes4(keccak256(sig));\r\n\r\n            payload = bytes.concat(abi.encodePacked(selector, _burnAmount, _oneCoinIndex, _amounts[_oneCoinIndex]), optional);\r\n        } else if (!_withdrawExact) {\r\n            if (_explicitUnderlying) {\r\n                sig = \"remove_liquidity(uint256,uint256[0],bool)\";\r\n                //                           index = 33 ^\r\n                optional = abi.encode(uint256(1));\r\n            } else {\r\n                sig = \"remove_liquidity(uint256,uint256[0])\";\r\n            }\r\n            sig[33] = bytes1(uint8(sig[33]) + uint8(_amounts.length));\r\n            selector = bytes4(keccak256(sig));\r\n\r\n            payload = bytes.concat(abi.encodePacked(selector, _burnAmount, _amounts), optional);\r\n        } else {\r\n            if (_explicitUnderlying) {\r\n                sig = \"remove_liquidity_imbalance(uint256[0],uint256,bool)\";\r\n                //                             index = 35 ^\r\n                optional = abi.encode(uint256(1));\r\n            } else {\r\n                sig = \"remove_liquidity_imbalance(uint256[0],uint256)\";\r\n            }\r\n            sig[35] = bytes1(uint8(sig[35]) + uint8(_amounts.length));\r\n            selector = bytes4(keccak256(sig));\r\n\r\n            payload = bytes.concat(abi.encodePacked(selector, _amounts, _burnAmount), optional);\r\n        }\r\n    }\r\n\r\n    function parseInputs(bytes memory _callData) internal pure returns (Params memory params) {\r\n        params = abi.decode(_callData, (Params));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"CurveHelperInvalidFlags\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CurveHelperInvalidLPToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurveHelperOneCoinAmbiguousIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurveWithdrawPoolReverted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"CurveWithdrawSlippageHit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurveWithdrawWrongArraySize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurveWithdrawZeroRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReturnIndexValueError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubIndexValueError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"logName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ActionEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AddressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeDistributor\",\"outputs\":[{\"internalType\":\"contract IFeeDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Minter\",\"outputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_PARAM_MAPPING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VotingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_subData\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_paramMapping\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_returnValues\",\"type\":\"bytes32[]\"}],\"name\":\"executeAction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"executeActionDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CurveHelper.DepositTargetType\",\"name\":\"depositTargetType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"explicitUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"removeOneCoin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawExact\",\"type\":\"bool\"}],\"name\":\"makeFlags\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"flags\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"flags\",\"type\":\"uint8\"}],\"name\":\"parseFlags\",\"outputs\":[{\"internalType\":\"enum CurveHelper.DepositTargetType\",\"name\":\"depositTargetType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"explicitUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"removeOneCoin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawExact\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CurveWithdraw", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cd0b789f9a12126d8209a7f5dc53571bee1e5b8e034d5ce81674015901287265"}