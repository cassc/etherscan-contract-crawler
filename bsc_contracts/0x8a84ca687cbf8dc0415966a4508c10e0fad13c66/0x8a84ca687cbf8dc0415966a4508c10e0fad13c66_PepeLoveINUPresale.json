{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/new_presale_pepe.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n\r\ncontract PepeLoveINUPresale is Ownable {\r\n    IERC20 public token;\r\n    address public sellerAddress;\r\n    IERC20 public usdtToken;\r\n    IERC20Metadata public usdtTokenAddress;\r\n\r\n    uint256 public presaleTokenAmount;\r\n    bool public presaleActive = true;\r\n    bool public capsActive = true;\r\n    uint256 public softCap = 200 ether;\r\n    uint256 public hardCap = 500 ether;\r\n    uint256 public maxTxAmount = 16666666666;\r\n    uint256 public maxWalletAmount = 1666666666600;\r\n    uint256 public totalSold = 0;\r\n    uint256 public totalFund = 0 ether;\r\n    uint256 public totalFundUsdt = 0 ether;\r\n\r\n    //stages info\r\n    struct Stage {\r\n        uint256 id;\r\n        uint256 bonus;\r\n        uint256 price;\r\n        uint256 usdtPrice;\r\n        uint256 start;\r\n        uint256 end;\r\n    }\r\n    mapping(uint256 => Stage) public stages;\r\n    uint256 public maxStage = 4;\r\n    uint256 currentStageId = 0;\r\n\r\n    // constructor\r\n    constructor(\r\n        address _token,\r\n        address _seller,\r\n        address _usdt\r\n    ) {\r\n        token = IERC20(_token);\r\n        sellerAddress = _seller;\r\n        usdtToken = IERC20(_usdt);\r\n        usdtTokenAddress = IERC20Metadata(_usdt);\r\n    }\r\n\r\n    //token buy with usdt\r\n    function buyTokenWithUsdt(uint256 _amount) public payable {\r\n        require(presaleActive, \"Presale is not active!\");\r\n        if (capsActive) {\r\n            require(address(this).balance <= hardCap, \"Hardcap limit exceeds!\");\r\n        }\r\n        require(_amount >= 0, \"Please enter minimum token!\");\r\n        uint256 _id = getCurrentStageIdActive();\r\n        require(_id > 0, \"Stage info not available!\");\r\n        uint256 _bonus = stages[_id].bonus;\r\n        uint256 _usdtPrice = stages[_id].usdtPrice;\r\n        uint256 _tokenPrice = _usdtPrice * _amount;\r\n        uint256 _start = stages[_id].start;\r\n        uint256 _end = stages[_id].end;\r\n        require(_start <= block.timestamp, \"Presale comming soon!\");\r\n        require(_end >= block.timestamp, \"Presale end!\");\r\n        require(\r\n            usdtToken.balanceOf(msg.sender) >= _tokenPrice,\r\n            \"Not enough USDT!\"\r\n        );\r\n        uint256 _weiAmount = _amount * 1 ether;\r\n        uint256 _bonusAmount = (_amount * _bonus) / 100;\r\n        _bonusAmount *= 1 ether;\r\n        uint256 _totalAmount = _weiAmount + _bonusAmount;\r\n        require(\r\n            (totalSold + _totalAmount) <= presaleTokenAmount,\r\n            \"Presale token amount exceeds!\"\r\n        );\r\n        require(\r\n            _totalAmount <= (maxTxAmount * 1 ether),\r\n            \"Maximum transaction limit excceds!\"\r\n        );\r\n        require(\r\n            (_totalAmount + token.balanceOf(msg.sender)) <=\r\n                (maxWalletAmount * 1 ether),\r\n            \"Maximum wallet token limit excceds!\"\r\n        );\r\n        //usdt transfer to this contract\r\n        bool successUsdtToken = usdtToken.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _tokenPrice\r\n        );\r\n        require(successUsdtToken, \"Failed to transfer USDT payment!\");\r\n        //purchase token transfer\r\n        bool success = token.transferFrom(\r\n            sellerAddress,\r\n            msg.sender,\r\n            _totalAmount\r\n        );\r\n        require(success, \"Failed to transfer token!\");\r\n        totalSold += _totalAmount;\r\n        totalFundUsdt += _tokenPrice;\r\n    }\r\n\r\n    // token buy\r\n    function buyToken(uint256 _amount) public payable {\r\n        require(presaleActive, \"Presale is not active!\");\r\n        if (capsActive) {\r\n            require(address(this).balance <= hardCap, \"Hardcap limit exceeds!\");\r\n        }\r\n        require(_amount >= 0, \"Please enter minimum token!\");\r\n        uint256 _id = getCurrentStageIdActive();\r\n        require(_id > 0, \"Stage info not available!\");\r\n        uint256 _bonus = stages[_id].bonus;\r\n        uint256 _price = stages[_id].price;\r\n        uint256 _start = stages[_id].start;\r\n        uint256 _end = stages[_id].end;\r\n        require(_start <= block.timestamp, \"Presale comming soon!\");\r\n        require(_end >= block.timestamp, \"Presale end!\");\r\n        require(msg.value >= (_amount * _price), \"Not enough payment!\");\r\n        uint256 _weiAmount = _amount * 1 ether;\r\n        uint256 _bonusAmount = (_amount * _bonus) / 100;\r\n        _bonusAmount *= 1 ether;\r\n        uint256 _totalAmount = _weiAmount + _bonusAmount;\r\n        require(\r\n            (totalSold + _totalAmount) <= presaleTokenAmount,\r\n            \"Presale token amount exceeds!\"\r\n        );\r\n        require(\r\n            _totalAmount <= (maxTxAmount * 1 ether),\r\n            \"Maximum transaction limit excceds!\"\r\n        );\r\n        require(\r\n            (_totalAmount + token.balanceOf(msg.sender)) <=\r\n                (maxWalletAmount * 1 ether),\r\n            \"Maximum wallet token limit excceds!\"\r\n        );\r\n        //purchase token transfer\r\n        bool success = token.transferFrom(\r\n            sellerAddress,\r\n            msg.sender,\r\n            _totalAmount\r\n        );\r\n        require(success, \"Failed to transfer token!\");\r\n        totalSold += _totalAmount;\r\n        totalFund += msg.value;\r\n    }\r\n\r\n    // update token address\r\n    function setToken(address _token) public onlyOwner {\r\n        require(_token != address(0), \"Token is zero address!\");\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    // update seller address\r\n    function setSellerAddress(address _seller) public onlyOwner {\r\n        sellerAddress = _seller;\r\n    }\r\n\r\n    // update usdt token\r\n    function setUsdtToken(address _token) public onlyOwner {\r\n        require(_token != address(0), \"Token is zero address!\");\r\n        usdtToken = IERC20(_token);\r\n        usdtTokenAddress = IERC20Metadata(_token);\r\n    }\r\n\r\n    // update presale token amount\r\n    function setPresaleTokenAmount() public onlyOwner {\r\n        presaleTokenAmount = token.allowance(sellerAddress, address(this));\r\n    }\r\n\r\n    // update presale active\r\n    function flipPresaleActive() public onlyOwner {\r\n        presaleActive = !presaleActive;\r\n    }\r\n\r\n    // update caps active\r\n    function flipCapsActive() public onlyOwner {\r\n        capsActive = !capsActive;\r\n    }\r\n\r\n    // update soft cap\r\n    function setSoftCap(uint256 _softCap) public onlyOwner {\r\n        softCap = _softCap;\r\n    }\r\n\r\n    // update hard cap\r\n    function setHardCap(uint256 _hardCap) public onlyOwner {\r\n        hardCap = _hardCap;\r\n    }\r\n\r\n    // update maxTxAmount\r\n    function setMaxTxAmount(uint256 _amount) public onlyOwner {\r\n        maxTxAmount = _amount;\r\n    }\r\n\r\n    // update maxWalletAmount\r\n    function setMaxWalletAmount(uint256 _amount) public onlyOwner {\r\n        maxWalletAmount = _amount;\r\n    }\r\n\r\n    // update maximum stage\r\n    function setMaxStage(uint256 _maxStage) public onlyOwner {\r\n        maxStage = _maxStage;\r\n    }\r\n\r\n    // adding stage info\r\n    function addStage(\r\n        uint256 _bonus,\r\n        uint256 _price,\r\n        uint256 _usdtPrice,\r\n        uint256 _start,\r\n        uint256 _end\r\n    ) public onlyOwner {\r\n        uint256 _id = currentStageId + 1;\r\n        require(_id <= maxStage, \"Maximum stage excceds!\");\r\n        require(_bonus <= 100, \"Bonus should be between 0 and 100\");\r\n        require(_start > 0 && _end > 0, \"Invalid date!\");\r\n        require(_start < _end, \"End date smaller than start!\");\r\n        currentStageId += 1;\r\n        stages[_id].id = _id;\r\n        stages[_id].bonus = _bonus;\r\n        stages[_id].price = _price;\r\n        stages[_id].usdtPrice = _usdtPrice;\r\n        stages[_id].start = _start;\r\n        stages[_id].end = _end;\r\n    }\r\n\r\n    // update stage info\r\n    function setStage(\r\n        uint256 _id,\r\n        uint256 _bonus,\r\n        uint256 _price,\r\n        uint256 _usdtPrice,\r\n        uint256 _start,\r\n        uint256 _end\r\n    ) public onlyOwner {\r\n        require(stages[_id].id == _id, \"ID doesn't exist!\");\r\n        require(_bonus <= 100, \"Bonus should be between 0 and 100\");\r\n        require(_start > 0 && _end > 0, \"Invalid date!\");\r\n        require(_start < _end, \"End date smaller than start!\");\r\n        stages[_id].bonus = _bonus;\r\n        stages[_id].price = _price;\r\n        stages[_id].usdtPrice = _usdtPrice;\r\n        stages[_id].start = _start;\r\n        stages[_id].end = _end;\r\n    }\r\n\r\n    // get current stage id active\r\n    function getCurrentStageIdActive() public view returns (uint256) {\r\n        uint256 _id = 0;\r\n        if (currentStageId == 0) {\r\n            _id = 0;\r\n        } else {\r\n            for (uint256 i = 1; i <= currentStageId; i++) {\r\n                if (\r\n                    (block.timestamp >= stages[i].start) &&\r\n                    (block.timestamp <= stages[i].end)\r\n                ) {\r\n                    _id = i;\r\n                }\r\n            }\r\n            if (_id == 0) {\r\n                _id = currentStageId;\r\n            }\r\n        }\r\n        return _id;\r\n    }\r\n\r\n    // withdraw funds\r\n    function withdrawFunds() public onlyOwner {\r\n        if (capsActive) {\r\n            require(softCap <= address(this).balance, \"Smaller than Softcap!\");\r\n            require(hardCap == address(this).balance, \"Not equal to Hardcap!\");\r\n        }\r\n        require(\r\n            payable(msg.sender).send(address(this).balance),\r\n            \"Failed withdraw!\"\r\n        );\r\n        totalFund = address(this).balance;\r\n    }\r\n\r\n    // withdraw usdt\r\n    function withdrawUsdt() public onlyOwner {\r\n        if (capsActive) {\r\n            require(softCap <= address(this).balance, \"Smaller than Softcap!\");\r\n            require(hardCap == address(this).balance, \"Not equal to Hardcap!\");\r\n        }\r\n        bool success = usdtToken.transfer(\r\n            msg.sender,\r\n            usdtToken.balanceOf(address(this))\r\n        );\r\n        require(success, \"Failed withdraw USDT!\");\r\n        totalFundUsdt = usdtToken.balanceOf(address(this));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"addStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithUsdt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipCapsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPresaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStageIdActive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStage\",\"type\":\"uint256\"}],\"name\":\"setMaxStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPresaleTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"setSellerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"}],\"name\":\"setSoftCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setUsdtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFundUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtTokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PepeLoveINUPresale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000215cbd4ebe5349680428401acd5e3a270f882bd500000000000000000000000017372413f563882da508df241263317244c3349c00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4a46d7f87f64b10714cd53b17abc824d6000c25198110bd99d02ee17795a634a"}