{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IPancakeRouter {\r\n    function WETH() external pure returns (address);  // This will return the WBNB address on BSC.\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IWBNB {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface ILpPair {\r\n    function mint(address to) external returns (uint256 liquidity);\r\n}\r\n\r\ncontract LiquidityAdder {\r\n    address payable public feeRecipient = 0x5f14a63f852A606a4c26691506497AB401074e31;\r\n    uint256 public feeAmount = 0.03 ether;  // 0.03 BNB fee, using the ether unit for simplicity in Solidity.\r\n    address public constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    constructor() public {}\r\n\r\n    function fixLP(address _tokenA, uint256 _amountTokenA) external payable {\r\n        require(msg.value >= feeAmount, \"Insufficient BNB sent as fee\");\r\n\r\n        // Send the fee to the feeRecipient\r\n        feeRecipient.transfer(feeAmount);\r\n\r\n        // Use the remaining BNB for the function logic\r\n        uint256 remainingBnb = msg.value - feeAmount;\r\n        \r\n        IWBNB wbnb = IWBNB(IPancakeRouter(ROUTER).WETH());\r\n        wbnb.deposit{value: remainingBnb}();\r\n        \r\n        ILpPair pair = ILpPair(IPancakeFactory(IPancakeRouter(ROUTER).factory()).getPair(_tokenA, address(wbnb)));\r\n        \r\n        // Ensure approval is done\r\n        IERC20(_tokenA).transferFrom(msg.sender, address(pair), _amountTokenA);\r\n        IERC20(address(wbnb)).transfer(address(pair), remainingBnb);\r\n        \r\n        pair.mint(msg.sender);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenA\",\"type\":\"uint256\"}],\"name\":\"fixLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "LiquidityAdder", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://83dd3f1b6d499181fcf1a9b8416f358e43ce05b85c17f76cbfa8182cc7dedd9c"}