{"SourceCode": "pragma solidity >=0.4.2 <0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender)external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed owner, address indexed spender, uint256 value );\r\n}\r\ncontract EtnSwap{\r\n    address public _owner;\r\n    uint public _addIndexs;\r\n    address public _ethtoken;\r\n    address public _etntoken;\r\n    uint[] public _upgrade;\r\n    address[] public _ownerAddress; \r\n    address[] public _node1;\r\n    address[] public _node2;\r\n    address[] public _node3;\r\n    address[] public _node4;\r\n\r\n    uint public _ethmoney; \r\n    uint public _etnmoney; \r\n    uint public _swapIndex;\r\n    uint public _teamProfitIndex;\r\n    uint public _pledgeIndex;\r\n    uint public _TeamProfitEventIndex;\r\n    uint public _TeamProfitDayIndex;\r\n    uint public _limit;\r\n\r\n    event JoinPledge(address user,uint256 pledgeIndex,uint256 pledgeValue);\r\n    event TeamProfitEvent(uint indexs ,address user,uint256 profitType,uint256 amount,address childAddress);\r\n    event TeamProfitDay(uint indexs ,address user,uint256 amount);\r\n\r\n    constructor() public {\r\n      _owner = msg.sender;\r\n      _limit = 10**17;\r\n      _addIndexs = 0;\r\n      _ethmoney = 35462542213746557693;\r\n      _etnmoney = 117394763720710650456869;\r\n      _pledgeIndex = 165;\r\n      _swapIndex = 555;\r\n      _TeamProfitDayIndex = 165;\r\n      _TeamProfitEventIndex = 187;\r\n\r\n      _upgrade = [0.1*10**18,0.2*10**18,0.3*10**18,0.4*10**18,0.5*10**18,0.6*10**18,0.7*10**18,0.8*10**18,0.9*10**18,1.0*10**18,1.1*10**18,1.2*10**18];\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public ownerd {\r\n        _owner = newOwner;\r\n    }\r\n\r\n    struct Pledgor{\r\n        uint isRun;\r\n        uint amount;\r\n        uint amountLimit;\r\n        uint etnAmount;\r\n        uint level;\r\n        address superiorAddr;\r\n        address superiorAddrHl;\r\n        address[] childAddr; \r\n        uint isBackfall;\r\n        uint isowner;\r\n        uint isNodes;\r\n    }\r\n    Pledgor[] public pledgor;\r\n    mapping(address => Pledgor) public pledgors;\r\n\r\n    function ownerMigrateUser(\r\n        address[] memory addr,\r\n        uint[] memory amount,\r\n        uint[] memory amountLimit,\r\n        uint[] memory etnAmount,\r\n        uint[] memory level,\r\n        address[] memory superiorAddr,\r\n        address[] memory superiorAddrHl,\r\n        uint[] memory isBackfall,\r\n        uint[] memory isowner,\r\n        uint[] memory isNodes\r\n            ) public {\r\n        require(msg.sender == _owner, \"No quota1\");\r\n        for (uint i = 0;i < addr.length;i++){\r\n            pledgors[addr[i]].amount = amount[i];\r\n            pledgors[addr[i]].amountLimit = amountLimit[i];\r\n            pledgors[addr[i]].etnAmount = etnAmount[i];\r\n            pledgors[addr[i]].level = level[i];\r\n            pledgors[addr[i]].superiorAddr = superiorAddr[i];\r\n            pledgors[addr[i]].superiorAddrHl = superiorAddrHl[i];\r\n            pledgors[addr[i]].isBackfall = isBackfall[i];\r\n            pledgors[addr[i]].isowner = isowner[i];\r\n            pledgors[addr[i]].isNodes = isNodes[i];\r\n            pledgors[superiorAddr[i]].childAddr.push(addr[i]);\r\n            addAddr(addr[i]);\r\n        }\r\n    }   \r\n    function ownerMigrateChild(\r\n        address  addr,\r\n        address[] memory childs\r\n    ) public{\r\n        require(msg.sender == _owner, \"No quota1\");\r\n        pledgors[addr].childAddr = childs;\r\n    }\r\n\r\n    modifier ownerd() {\r\n        require(_owner==msg.sender || pledgors[msg.sender].isowner == 1,\"ownerd: caller is not the owner\");\r\n        _;\r\n    }\r\n    function updateowner(address addr,uint status) public ownerd{\r\n        pledgors[addr].isowner = status;\r\n    }\r\n\r\n    struct Swap{\r\n        uint swapType;\r\n        uint amount1;\r\n        uint amount2;\r\n        uint time;\r\n        address owner;\r\n    }\r\n    Swap[] public swap;\r\n    mapping(uint => Swap) public swaps;\r\n\r\n\r\n    mapping(uint => address[]) public pllist;\r\n    function allAddress(uint addIndexs) public view returns (address[] memory) {\r\n        return pllist[addIndexs];\r\n    }\r\n\r\n    function addAddr(address addr) internal{\r\n      if(pledgors[addr].isRun == 0) {\r\n        pledgors[addr].isRun = 1;\r\n        if(pllist[_addIndexs].length == 256){\r\n          _addIndexs += 1;\r\n        }\r\n        pllist[_addIndexs].push(addr);\r\n      }\r\n    }\r\n    function invitation(address superiorAddr) public {\r\n      if(msg.sender != _owner) {\r\n           require(pledgors[msg.sender].superiorAddr == address(0x0), \"No quota1\");\r\n           require(pledgors[superiorAddr].level > 0, \"No quota2\");\r\n      }\r\n      uint aflags = 0;\r\n      invitationhl(superiorAddr,superiorAddr,aflags);\r\n      upgradation(1);\r\n      addAddr(msg.sender);\r\n    }\r\n    function invitationhl(address sup,address sups,uint aflags) internal{\r\n        address[] memory childArr = child(sup);\r\n        if (childArr.length == 3){\r\n            aflags = 1;\r\n            uint flag = 0;\r\n            for (uint i = 0;i < childArr.length;i++){\r\n                address[] memory childChildArr = child(childArr[i]);\r\n                if(childChildArr.length == 0 && flag == 0){\r\n                    flag = 1;\r\n                    sup = childArr[i];\r\n                }\r\n            }\r\n            if (flag == 0){\r\n                for (uint i = 0;i < childArr.length;i++){\r\n                    address[] memory childChildArr = child(childArr[i]);\r\n                    if(childChildArr.length == 1 && flag == 0){\r\n                        flag = 1;\r\n                        sup = childArr[i];\r\n                    }\r\n                }\r\n            }\r\n            if (flag == 0){\r\n                for (uint i = 0;i < childArr.length;i++){\r\n                    address[] memory childChildArr = child(childArr[i]);\r\n                    if(childChildArr.length == 2 && flag == 0){\r\n                        flag = 1;\r\n                        sup = childArr[i];\r\n                    }\r\n                }\r\n            }\r\n            if(flag == 1){\r\n                pledgors[msg.sender].superiorAddr = sup;\r\n                pledgors[msg.sender].superiorAddrHl = sups;\r\n                pledgors[sup].childAddr.push(msg.sender);\r\n                pledgors[msg.sender].isBackfall = 1;\r\n            } else {\r\n                invitationhl(childArr[0],sups,aflags);\r\n            }\r\n        } else {\r\n            if(aflags == 1){\r\n                pledgors[msg.sender].superiorAddrHl = sups;\r\n                pledgors[msg.sender].isBackfall = 1;\r\n            }\r\n            pledgors[msg.sender].superiorAddr = sup;\r\n            pledgors[sup].childAddr.push(msg.sender);\r\n        }\r\n    }\r\n    function child(address addr) public view returns (address[] memory){\r\n      return pledgors[addr].childAddr;\r\n    }\r\n    \r\n    function upgradation(uint level) public {\r\n        if(msg.sender != _owner) {\r\n            require(pledgors[msg.sender].superiorAddr != address(0x0), \"No quota1\");\r\n        }\r\n       require(level <= 12, \"No quota1\");\r\n       require(pledgors[msg.sender].level == level - 1, \"No quota1\");\r\n\r\n       uint ethamount = _upgrade[level - 1];\r\n       IERC20(_ethtoken).transferFrom(msg.sender,address(this), ethamount);\r\n       swap3(msg.sender,ethamount);\r\n       pledgors[msg.sender].level = level;\r\n       pledgors[msg.sender].amount += ethamount;\r\n       pledgors[msg.sender].amountLimit += ethamount * 2;\r\n       upgradationProfit(msg.sender,level,ethamount);\r\n       emit JoinPledge(msg.sender, _pledgeIndex, ethamount);\r\n       _pledgeIndex += 1;\r\n    }\r\n    function upgradationProfit(address owner,uint level,uint ethamount) internal{\r\n       if(owner != _owner) {\r\n            if(level == 1){\r\n                address sup = pledgors[owner].superiorAddr;\r\n                if(pledgors[owner].isBackfall == 0){\r\n                    IERC20(_ethtoken).transfer(sup, ethamount*70/100);\r\n                    emit TeamProfitEvent(_TeamProfitEventIndex ,sup, 0, ethamount * 70 / 100, owner);\r\n                    _TeamProfitEventIndex += 1;\r\n                } else {\r\n                    if(pledgors[sup].level > 0){\r\n                        IERC20(_ethtoken).transfer(sup, ethamount*20/100);\r\n                        emit TeamProfitEvent(_TeamProfitEventIndex ,sup, 2, ethamount * 20 / 100, owner);\r\n                        _TeamProfitEventIndex += 1;\r\n                    }\r\n                    IERC20(_ethtoken).transfer(pledgors[owner].superiorAddrHl, ethamount*50/100);\r\n                    emit TeamProfitEvent(_TeamProfitEventIndex ,pledgors[owner].superiorAddrHl, 1, ethamount * 50 / 100, owner);\r\n                    _TeamProfitEventIndex += 1;\r\n                }\r\n            } else {\r\n                    uint flags = 0;\r\n                    address sups;\r\n                    address sup = owner;\r\n                    if(level < 12){\r\n                        for (uint i = 0;i < 12;i++){\r\n                                sup = pledgors[sup].superiorAddr;\r\n                                uint levels = pledgors[sup].level;\r\n                                if(i >= level-1 && flags == 0 && level <= levels){\r\n                                    flags = 1;\r\n                                    sups = sup;\r\n                                }\r\n                        }\r\n                    }\r\n                    if (flags == 1 && sups != address(0x0)){\r\n                        IERC20(_ethtoken).transfer(sups, ethamount*70/100);\r\n                        emit TeamProfitEvent(_TeamProfitEventIndex ,sups, 3, ethamount * 70 / 100, owner);\r\n                        _TeamProfitEventIndex += 1;\r\n                    }\r\n            }\r\n       }\r\n    }\r\n    function getPrice() public view returns(uint){\r\n        if (_ethmoney == 0){\r\n            return 0.00006139 * 10**18;\r\n        } else {\r\n            return _ethmoney * 10**18 / _etnmoney;\r\n        }\r\n    }\r\n    function swap1(uint amount) public {\r\n       require(amount <= _limit, \"No quota1\");\r\n       require(amount > 0, \"No quota1\");\r\n       require(pledgors[msg.sender].amountLimit >= amount, \"No quota1\");\r\n       require(pledgors[msg.sender].level > 0, \"No quota1\");\r\n       IERC20(_ethtoken).transferFrom(msg.sender,address(this), amount);\r\n       uint price = getPrice();\r\n       pledgors[msg.sender].etnAmount += amount * 10**18  * 72 / 100 / price ;\r\n       pledgors[_ownerAddress[1]].etnAmount += amount * 10**18  * 4 / 100 / price ;\r\n       pledgors[_ownerAddress[3]].etnAmount += amount * 10**18  * 4 / 100 / price ;\r\n\r\n       _ethmoney += amount;\r\n       _etnmoney += amount * 10**18 / price * 80 / 100  ;\r\n        swapList(0,amount,amount * 10**18 / price * 80 / 100,msg.sender);\r\n        addAddr(msg.sender);\r\n        if (pledgors[msg.sender].amountLimit - amount >= 0){\r\n            pledgors[msg.sender].amountLimit = pledgors[msg.sender].amountLimit -amount;\r\n        } else {\r\n            pledgors[msg.sender].amountLimit = 0;\r\n        }\r\n    }\r\n    function swap2(uint amount) public {\r\n       require(amount > 0, \"No quota1\");\r\n       require(pledgors[msg.sender].etnAmount >= amount, \"No quota1\");\r\n       require(pledgors[msg.sender].level > 0, \"No quota1\");\r\n       uint price = getPrice();\r\n\r\n       IERC20(_ethtoken).transfer(msg.sender, amount * price * 80 / 100 / 10**18 );\r\n       IERC20(_etntoken).transfer(_ownerAddress[2], amount);\r\n\r\n       if (pledgors[msg.sender].etnAmount - amount > 0){\r\n        pledgors[msg.sender].etnAmount = pledgors[msg.sender].etnAmount - amount;\r\n       } else {\r\n        pledgors[msg.sender].etnAmount = 0;\r\n       }\r\n       if(_ethmoney - amount * price * 80 / 100 / 10**18 >= 0){\r\n        _ethmoney = _ethmoney - amount * price * 80  / 10**18 / 100;\r\n       }else {\r\n        _ethmoney = 0;\r\n       }\r\n       if(_etnmoney - amount >= 0){\r\n        _etnmoney = _etnmoney - amount;\r\n       }else {\r\n        _etnmoney = 0;\r\n       }\r\n       swapList(1,amount,amount * price * 80  / 10**18 / 100,msg.sender);\r\n       addAddr(msg.sender);\r\n    }\r\n\r\n    function swap3(address owner,uint amount) internal {\r\n       uint price = getPrice();\r\n       _ethmoney += amount*30/100;\r\n       uint etnnum = amount * 80 / 100 * 30 / 100 * 10**18 / price;\r\n       _etnmoney += etnnum;\r\n       pledgors[owner].etnAmount += amount * 80 / 100 * 10 / 100 * 10**18 / price;\r\n       swapList(3,amount*30/100,amount * 80 / 100 * 10 / 100 * 10**18 / price,owner);\r\n       pledgors[_ownerAddress[0]].etnAmount += amount * 10**18  * 14 / 100 / price * 80 / 100 ;\r\n       emit TeamProfitDay(_TeamProfitDayIndex, owner, amount * 10**18  * 14 / 100 / price * 80 / 100);\r\n       _TeamProfitDayIndex += 1;\r\n       pledgors[_ownerAddress[4]].etnAmount += amount * 10**18  * 6 / 100 / price * 80 / 100;\r\n    }\r\n    function swapList(uint swapType,uint amount1,uint amount2,address owner) internal{\r\n       swaps[_swapIndex].swapType = swapType;\r\n       swaps[_swapIndex].amount1 = amount1;\r\n       swaps[_swapIndex].amount2 = amount2;\r\n       swaps[_swapIndex].time = now;\r\n       swaps[_swapIndex].owner = owner;\r\n       _swapIndex += 1;\r\n    }\r\n    function tokenModify(address token1,address token2) public ownerd{\r\n        _ethtoken = token1;\r\n        _etntoken = token2;\r\n    }\r\n    function moneyModify(uint m1,uint m2) public ownerd{\r\n        _ethmoney = m1;\r\n        _etnmoney = m2;\r\n    }\r\n    function limitModify(uint limit) public ownerd{\r\n        _limit = limit;\r\n    }\r\n    function nodeAdd(uint status,address[] memory addr) public ownerd{\r\n        for (uint i = 0; i < addr.length;i++){\r\n           if(status == 0){\r\n                _node1.push(addr[i]);\r\n                pledgors[addr[i]].amountLimit += 0.1 * 10**18;\r\n                 pledgors[addr[i]].isNodes = 1;\r\n           }  \r\n           if(status == 1){\r\n                _node2.push(addr[i]);\r\n                pledgors[addr[i]].amountLimit += 0.25 * 10**18;\r\n                 pledgors[addr[i]].isNodes = 2;\r\n           }  \r\n           if(status == 2){\r\n                _node3.push(addr[i]);\r\n                pledgors[addr[i]].amountLimit += 0.5 * 10**18;\r\n                 pledgors[addr[i]].isNodes = 3;\r\n           }  \r\n           if(status == 3){\r\n                _node4.push(addr[i]);\r\n                pledgors[addr[i]].amountLimit += 1.5 * 10**18;\r\n                 pledgors[addr[i]].isNodes = 4;\r\n           }    \r\n          \r\n        }\r\n    }\r\n    function userModify(address addr,uint level,uint amountLimit,uint etnAmount) public ownerd{\r\n        pledgors[addr].level = level;\r\n        pledgors[addr].amountLimit = amountLimit;\r\n        pledgors[addr].etnAmount = etnAmount;\r\n    }\r\n    function userModifys(address[] memory addr,uint[] memory amountLimit,uint[] memory etnAmount) public ownerd{\r\n        for (uint i = 0;i < addr.length;i++){\r\n            pledgors[addr[i]].amountLimit = amountLimit[i];\r\n            pledgors[addr[i]].etnAmount = etnAmount[i];\r\n        }\r\n    }\r\n    function userOwnerModify(address[] memory addr,uint[] memory amountLimit,uint[] memory etnAmount) public ownerd{\r\n        for (uint i = 0;i < addr.length;i++){\r\n            pledgors[addr[i]].etnAmount += etnAmount[i];\r\n            pledgors[addr[i]].amountLimit += amountLimit[i];\r\n        }\r\n    }\r\n    function updateEtnAmount(address[] memory addr,uint[] memory etnAmount) public ownerd{\r\n       for (uint i = 0;i < addr.length;i++){\r\n            pledgors[addr[i]].etnAmount += etnAmount[i];\r\n        }\r\n    }\r\n    function userAdminLevelModify(address[] memory addr,uint[] memory level,uint[] memory amountLimit) public ownerd{\r\n        for (uint i = 0;i < addr.length;i++){\r\n            pledgors[addr[i]].level = level[i];\r\n            pledgors[addr[i]].amountLimit += amountLimit[i];\r\n        }\r\n    }\r\n    function ownerModify(address[] memory addr) public ownerd{\r\n        _ownerAddress = addr;\r\n    }\r\n    function ownerAllocation(address addr,address[] memory addrArr) public ownerd{\r\n        uint etnamounts = pledgors[addr].etnAmount;\r\n        uint amount = etnamounts / addrArr.length;\r\n        for (uint i = 0 ;i < addrArr.length;i++){\r\n            pledgors[addrArr[i]].etnAmount += amount;\r\n        }\r\n        pledgors[addr].etnAmount = 0;\r\n    }\r\n    function WithdrawToken(address tokenAddress, address to,uint amount) public  {\r\n        require(msg.sender == _owner, \"No quota1\");\r\n        IERC20(tokenAddress).transfer(to, amount);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(msg.sender == _owner, \"No quota1\");\r\n        _owner = newOwner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pledgeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pledgeValue\",\"type\":\"uint256\"}],\"name\":\"JoinPledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TeamProfitDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"}],\"name\":\"TeamProfitEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TeamProfitDayIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TeamProfitEventIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addIndexs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ethmoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ethtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_etnmoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_etntoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_node1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_node2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_node3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_node4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pledgeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamProfitIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_upgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addIndexs\",\"type\":\"uint256\"}],\"name\":\"allAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"child\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superiorAddr\",\"type\":\"address\"}],\"name\":\"invitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"limitModify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"m1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"m2\",\"type\":\"uint256\"}],\"name\":\"moneyModify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"nodeAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addrArr\",\"type\":\"address[]\"}],\"name\":\"ownerAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"childs\",\"type\":\"address[]\"}],\"name\":\"ownerMigrateChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountLimit\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"etnAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"level\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"superiorAddr\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"superiorAddrHl\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"isBackfall\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"isowner\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"isNodes\",\"type\":\"uint256[]\"}],\"name\":\"ownerMigrateUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"ownerModify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"isRun\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"superiorAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superiorAddrHl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isBackfall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isowner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isNodes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pledgors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"isRun\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"superiorAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superiorAddrHl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isBackfall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isowner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isNodes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pllist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"tokenModify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"etnAmount\",\"type\":\"uint256[]\"}],\"name\":\"updateEtnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"updateowner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"upgradation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"level\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountLimit\",\"type\":\"uint256[]\"}],\"name\":\"userAdminLevelModify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etnAmount\",\"type\":\"uint256\"}],\"name\":\"userModify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountLimit\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"etnAmount\",\"type\":\"uint256[]\"}],\"name\":\"userModifys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountLimit\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"etnAmount\",\"type\":\"uint256[]\"}],\"name\":\"userOwnerModify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EtnSwap", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://040ffcdcde56058f8d02479bb39dfd081e8f637b13d2e5b6ebefc8d8a9894ff6"}