{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/contracts/proxy/poker/poker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"../../interfaces/IBEP20.sol\\\";\\nimport \\\"../../interfaces/OwnableV2.sol\\\";\\n\\ncontract EvoGameV1 is OwnableV2\\n{\\n\\n    IBEP20 token;\\n/// Commission for offline contract work\\n    uint Fee = 2 * 10 ** 15;\\n\\n    constructor (address _token) \\n    {\\n        token = IBEP20(payable(_token));\\n    }\\n/// Frozen tokens that can be withdrawn by the user\\n    mapping (address => uint) public freezed;\\n\\n\\n\\n/// One transaction - one rent\\n    modifier unfreez(address user) \\n    {\\n        require(freezed[user] == 0, \\\"unfreez now\\\");\\n        _;\\n    }\\n\\n\\n/// You can withdraw only if there are tokens on defrosting\\n    modifier canUnfreez(address user)\\n    {\\n        require(freezed[user] > 0, \\\"unfreez now\\\");\\n        _;\\n    }\\n\\n\\n/// Checking that there is enough commission\\n    modifier enoughtFee(uint amount)\\n    {\\n        require( amount >= Fee, \\\"Not enought fee\\\");\\n        _;\\n    }\\n\\n\\n                        /// PUBLIC VIEW\\n/// Frezed amount\\n    function getFreezed (address user) public view returns(uint)\\n    {\\n        return freezed[user];\\n    } \\n\\n            /// PUBLIC PAYABLE\\n/// Unfreez and transfer tokens to user\\n    function getUnfreezAll() enoughtFee(msg.value) canUnfreez(msg.sender) public payable returns (bool)\\n    {\\n        payable(_owner).transfer(msg.value);\\n        token.transfer(msg.sender, getFreezed(msg.sender));\\n        freezed[msg.sender] = 0;\\n        return true;\\n    }\\n    \\n\\n            /// ADMIN\\n\\n/// Withdraw balance                     \\n    function withdraw() onlyOwner public\\n    {\\n        payable(_owner).transfer(address(this).balance);\\n    }\\n\\n/// TRANSFER \\n    function transferFromContract(address to,  uint amount) public onlyOwner returns (bool)\\n    {\\n        token.transfer(to, amount);\\n        return true;\\n    }\\n\\n/// SET UNFREEZED TOKEN TO USER            <-----------------  this function \\n    function SetUnfreez( address user, uint amount) public onlyOwner unfreez(user)\\n    {\\n        freezed[user] = amount;\\n    }\\n\\n/// Change token contract\\n    function SetToken (address _token) public onlyOwner\\n    {\\n        token = IBEP20(payable(_token));\\n    }\\n///    \\n}\\n\"\r\n    },\r\n    \"contracts/contracts/interfaces/OwnableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract OwnableV2 is Context\\n{\\n    address _owner;\\n    address public _newOwner;\\n    constructor()  \\n    {\\n        _owner = payable(msg.sender);\\n    }\\n\\n    modifier onlyOwner() \\n    {\\n        require(_msgSender() == _owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    function changeOwner(address newOwner) onlyOwner public\\n    {\\n        _newOwner = newOwner;\\n    }\\n    function confirm() public\\n    {\\n        require(_newOwner == msg.sender);\\n        _owner = _newOwner;\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/contracts/interfaces/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IBEP20 {\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address account) external view returns (uint);\\n    function transfer(address recipient, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function transferFrom(address sender,address recipient,uint amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract Context \\n{\\n    function _msgSender() internal view virtual returns (address) \\n    {\\n        return msg.sender;\\n    }\\n    function _msgData() internal view virtual returns (bytes calldata) \\n    {\\n        this; \\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"SetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetUnfreez\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFreezed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnfreezAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EvoGameV1", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c51c05b7ea1147a9c846136a6f64358db4d6548e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}