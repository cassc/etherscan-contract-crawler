{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"lost owner\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BycToken is IERC20, Ownable {\r\n    string public _name;\r\n    string public _symbol;\r\n    uint8 public _decimals;\r\n    uint256 public _tTotal;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    bool isOpen;\r\n\r\n    address fundAddress;\r\n    address otherAddr;\r\n\r\n    uint256 public _tranferFee;\r\n\r\n    uint256 public _LPFee;\r\n\r\n    mapping(address => bool) public _blackList;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    mapping(address => bool) public _boardMembers;\r\n\r\n    mapping(address => bool) public _lpBlackList;\r\n\r\n    modifier onlyFundAddress() {\r\n        require(fundAddress == msg.sender, \"!fundAddress\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory Name,\r\n        string memory Symbol,\r\n        uint8 Decimals,\r\n        uint256 Supply,\r\n        address FundAddress,\r\n        address _otherAddr\r\n    ) {\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        fundAddress = FundAddress;\r\n        otherAddr = _otherAddr;\r\n\r\n        minHolderNum = 50 * 10 ** Decimals;\r\n        minOrdinaryNum = 10 * 10 ** Decimals;\r\n\r\n        limitFeeMaxGas = 500000;\r\n        limitFeeMin = 5 * 10 ** Decimals;\r\n        minTimeSec = 400000;\r\n        compRete = 400;\r\n\r\n        _LPFee = 25;\r\n\r\n        isOpen = false;\r\n\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[otherAddr] = true;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _tTotal = total;\r\n        _balances[msg.sender] = total;\r\n        emit Transfer(address(0), msg.sender, total);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _allowances[sender][msg.sender] =\r\n            _allowances[sender][msg.sender] -\r\n            amount;\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(!_blackList[from] && !_blackList[to], \"black account!\");\r\n\r\n        uint256 balance = balanceOf(from);\r\n\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (map_LPList[from].enable || map_LPList[to].enable) {\r\n            require(isOpen || _boardMembers[from], \"trade is not open!\");\r\n\r\n            require(!_boardMembers[to], \"this account not quit!\");\r\n\r\n            if (map_LPList[from].enable) {\r\n                _funTransfer(from, to, amount, from);\r\n                processLP(from);\r\n            } else {\r\n                _funTransfer(from, to, amount, to);\r\n                addHolder(from, to);\r\n                processLP(to);\r\n            }\r\n        } else {\r\n            _tokenTransfer(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        address pairAddr\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n\r\n        if (_feeWhiteList[sender]) {\r\n            _takeTransfer(sender, recipient, tAmount);\r\n        } else {\r\n            uint256 feeAmount = (tAmount * _LPFee) / 1000;\r\n\r\n            _takeTransfer(sender, address(this), feeAmount);\r\n\r\n            map_LPList[pairAddr].totalAmount += feeAmount;\r\n\r\n            _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n\r\n        if (_feeWhiteList[sender] || _tranferFee == 0) {\r\n            _takeTransfer(sender, recipient, tAmount);\r\n        } else {\r\n            uint256 fee = (tAmount * _tranferFee) / 1000;\r\n\r\n            uint256 fees = (fee * 25) / 100;\r\n\r\n            uint256 recipientAmount = tAmount - fee;\r\n\r\n            _takeTransfer(sender, recipient, recipientAmount);\r\n\r\n            _takeTransfer(sender, fundAddress, fee - fees);\r\n            _takeTransfer(sender, otherAddr, fees);\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    struct LPList {\r\n        address pair;\r\n        bool enable;\r\n        address[] member;\r\n        mapping(address => uint256) member_map;\r\n        uint256 currentIndex;\r\n        uint256 lastMembers;\r\n        uint256 totalAmount;\r\n        uint256 lastTotalAmount;\r\n        uint256 lastBlockNumber;\r\n        mapping(address => uint256) recordBoardRate;\r\n    }\r\n\r\n    mapping(address => LPList) private map_LPList;\r\n\r\n    function addHolder(address adr, address pairAddr) private {\r\n        uint256 size;\r\n\r\n        assembly {\r\n            size := extcodesize(adr)\r\n        }\r\n\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n\r\n        if (0 == map_LPList[pairAddr].member_map[adr]) {\r\n            if (\r\n                0 == map_LPList[pairAddr].member.length ||\r\n                map_LPList[pairAddr].member[0] != adr\r\n            ) {\r\n                map_LPList[pairAddr].member_map[adr] = map_LPList[pairAddr]\r\n                    .member\r\n                    .length;\r\n                map_LPList[pairAddr].member.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private minHolderNum;\r\n    uint256 private minOrdinaryNum;\r\n    uint256 private limitFeeMin;\r\n    uint256 private limitFeeMaxGas;\r\n    uint256 private minTimeSec;\r\n    uint256 private compRete;\r\n\r\n    function processLP(address pairAddr) private {\r\n        LPList storage pairObj = map_LPList[pairAddr];\r\n\r\n        if (block.timestamp - pairObj.lastBlockNumber < minTimeSec) {\r\n            return;\r\n        }\r\n\r\n        IERC20 _lpPair = IERC20(pairAddr);\r\n\r\n        uint256 totalPair = _lpPair.totalSupply();\r\n\r\n        uint256 lastAmount = pairObj.lastTotalAmount;\r\n\r\n        uint256 shareholderCount = pairObj.lastMembers;\r\n\r\n        if (pairObj.lastMembers == 0) {\r\n            shareholderCount = pairObj.member.length;\r\n            pairObj.lastMembers = shareholderCount;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 iterations = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        address shareHolder;\r\n\r\n        uint256 tokenBalance;\r\n\r\n        uint256 minNum;\r\n\r\n        uint256 amount;\r\n\r\n        uint256 userPairBalance;\r\n\r\n        IERC20 FIST = IERC20(address(this));\r\n\r\n        while (gasUsed < limitFeeMaxGas && iterations < shareholderCount) {\r\n            if (pairObj.currentIndex >= shareholderCount) {\r\n                pairObj.currentIndex = 0;\r\n                pairObj.lastMembers = pairObj.member.length;\r\n            }\r\n\r\n            if (pairObj.currentIndex == 0) {\r\n                LPList storage pairObjCopy = pairObj;\r\n\r\n                lastAmount = pairObjCopy.totalAmount;\r\n\r\n                if (lastAmount < limitFeeMin) {\r\n                    pairObjCopy.lastBlockNumber = block.timestamp;\r\n                    break;\r\n                }\r\n\r\n                uint256 compProfit = (lastAmount * compRete) / 1000;\r\n                uint256 fees = (compProfit * 25) / 100;\r\n\r\n                uint256 userProfit = lastAmount - compProfit;\r\n\r\n                FIST.transfer(fundAddress, compProfit - fees);\r\n                FIST.transfer(otherAddr, fees);\r\n\r\n                pairObjCopy.totalAmount = 0;\r\n\r\n                pairObjCopy.lastTotalAmount = userProfit;\r\n                lastAmount = userProfit;\r\n            }\r\n\r\n            shareHolder = pairObj.member[pairObj.currentIndex];\r\n\r\n            if (!_lpBlackList[shareHolder]) {\r\n                tokenBalance = balanceOf(shareHolder);\r\n\r\n                if (_boardMembers[shareHolder]) {\r\n                    minNum = minHolderNum;\r\n                } else {\r\n                    minNum = minOrdinaryNum;\r\n                }\r\n\r\n                userPairBalance =\r\n                    _lpPair.balanceOf(shareHolder) +\r\n                    pairObj.recordBoardRate[shareHolder];\r\n\r\n                if (userPairBalance > 0) {\r\n                    amount = (lastAmount * userPairBalance) / totalPair;\r\n\r\n                    if (tokenBalance >= minNum) {\r\n                        FIST.transfer(shareHolder, amount);\r\n                    } else {\r\n                        FIST.transfer(fundAddress, amount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            pairObj.currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        pairObj.lastBlockNumber = block.timestamp;\r\n    }\r\n\r\n    function showPairInfo(\r\n        address pairAddr\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            address _pair,\r\n            bool _enable,\r\n            address[] memory _member,\r\n            uint256 _currentIndex,\r\n            uint256 _lastMembers,\r\n            uint256 _totalAmount,\r\n            uint256 _lastTotalAmount,\r\n            uint256 _lastBlockNumber\r\n        )\r\n    {\r\n        _pair = map_LPList[pairAddr].pair;\r\n        _enable = map_LPList[pairAddr].enable;\r\n        _member = map_LPList[pairAddr].member;\r\n        _currentIndex = map_LPList[pairAddr].currentIndex;\r\n        _lastMembers = map_LPList[pairAddr].lastMembers;\r\n        _totalAmount = map_LPList[pairAddr].totalAmount;\r\n        _lastTotalAmount = map_LPList[pairAddr].lastTotalAmount;\r\n        _lastBlockNumber = map_LPList[pairAddr].lastBlockNumber;\r\n        return (\r\n            _pair,\r\n            _enable,\r\n            _member,\r\n            _currentIndex,\r\n            _lastMembers,\r\n            _totalAmount,\r\n            _lastTotalAmount,\r\n            _lastBlockNumber\r\n        );\r\n    }\r\n\r\n    function showRecordBoardRate(\r\n        address pairAddr,\r\n        address addr\r\n    ) public view returns (uint256) {\r\n        return map_LPList[pairAddr].recordBoardRate[addr];\r\n    }\r\n\r\n    function setOpenStatus(bool _open) external onlyOwner {\r\n        isOpen = _open;\r\n    }\r\n\r\n    function setBoardMembers(\r\n        address addr,\r\n        bool enable\r\n    ) external onlyFundAddress {\r\n        _boardMembers[addr] = enable;\r\n    }\r\n\r\n    function setLPBlackList(\r\n        address addr,\r\n        bool enable\r\n    ) external onlyFundAddress {\r\n        _lpBlackList[addr] = enable;\r\n    }\r\n\r\n    function setRecordBoardRate(\r\n        address pairAddr,\r\n        address addr,\r\n        uint256 amount\r\n    ) external onlyFundAddress {\r\n        map_LPList[pairAddr].recordBoardRate[addr] = amount;\r\n    }\r\n\r\n    function setSwapPairList(\r\n        address pairAddr,\r\n        bool enable\r\n    ) external onlyFundAddress {\r\n        map_LPList[pairAddr].enable = enable;\r\n        map_LPList[pairAddr].pair = pairAddr;\r\n        map_LPList[pairAddr].lastBlockNumber = block.timestamp;\r\n    }\r\n\r\n    function depositFee(address pairAddr) external onlyFundAddress {\r\n        uint256 amount = map_LPList[pairAddr].totalAmount;\r\n        IERC20 FIST = IERC20(address(this));\r\n        FIST.transfer(fundAddress, amount);\r\n        map_LPList[pairAddr].totalAmount = 0;\r\n        map_LPList[pairAddr].lastTotalAmount = 0;\r\n        map_LPList[pairAddr].currentIndex = 0;\r\n        map_LPList[pairAddr].lastMembers = 0;\r\n    }\r\n\r\n    function setHolderCondition(\r\n        uint256 _minHolderNum,\r\n        uint256 _minOrdinaryNum,\r\n        uint256 _limitFeeMaxGas,\r\n        uint256 _limitFeeMin,\r\n        uint256 _minTimeSec,\r\n        uint256 _compRete\r\n    ) external onlyFundAddress {\r\n        minHolderNum = _minHolderNum;\r\n        minOrdinaryNum = _minOrdinaryNum;\r\n        limitFeeMaxGas = _limitFeeMaxGas;\r\n        limitFeeMin = _limitFeeMin;\r\n        minTimeSec = _minTimeSec;\r\n        compRete = _compRete;\r\n    }\r\n\r\n    function setFee(\r\n        uint256 tranferFee,\r\n        uint256 lPFee\r\n    ) external onlyFundAddress {\r\n        _tranferFee = tranferFee;\r\n        _LPFee = lPFee;\r\n    }\r\n\r\n    function setfundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n    }\r\n\r\n    function setBlackAddress(address addr, bool enable) external onlyOwner {\r\n        require(otherAddr != addr, \"don`t do this\");\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function setFeeWhiteList(\r\n        address addr,\r\n        bool enable\r\n    ) external onlyFundAddress {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function nextFundTime(address pairAddr) public view returns (uint256) {\r\n        return block.timestamp - map_LPList[pairAddr].lastBlockNumber;\r\n    }\r\n\r\n    function getFundInfo()\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        return (\r\n            minHolderNum,\r\n            minOrdinaryNum,\r\n            limitFeeMin,\r\n            limitFeeMaxGas,\r\n            minTimeSec,\r\n            compRete\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"Decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"Supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"FundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_otherAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_LPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_boardMembers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lpBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tranferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddr\",\"type\":\"address\"}],\"name\":\"depositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddr\",\"type\":\"address\"}],\"name\":\"nextFundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBoardMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lPFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minHolderNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOrdinaryNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitFeeMaxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitFeeMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTimeSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_compRete\",\"type\":\"uint256\"}],\"name\":\"setHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setLPBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setOpenStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRecordBoardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setfundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddr\",\"type\":\"address\"}],\"name\":\"showPairInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_member\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastMembers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastBlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"showRecordBoardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BycToken", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000b316022f2e6899da141de0de0d8f596c2270e3cd000000000000000000000000815219ce39dd3dff12abe9cea51498f8b18982700000000000000000000000000000000000000000000000000000000000000003427963000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034259430000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0ad0558ca641318d55900967986d36f6584f89a964f3750c1e9ce400fbc58895"}