{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SweetVault.sol\": {\r\n      \"content\": \"/**\\n                                                         __\\n     _____      __      ___    ___     ___     __       /\\\\_\\\\    ___\\n    /\\\\ '__`\\\\  /'__`\\\\   /'___\\\\ / __`\\\\  /'___\\\\ /'__`\\\\     \\\\/\\\\ \\\\  / __`\\\\\\n    \\\\ \\\\ \\\\_\\\\ \\\\/\\\\ \\\\_\\\\.\\\\_/\\\\ \\\\__//\\\\ \\\\_\\\\ \\\\/\\\\ \\\\__//\\\\ \\\\_\\\\.\\\\_  __\\\\ \\\\ \\\\/\\\\ \\\\_\\\\ \\\\\\n     \\\\ \\\\ ,__/\\\\ \\\\__/.\\\\_\\\\ \\\\____\\\\ \\\\____/\\\\ \\\\____\\\\ \\\\__/.\\\\_\\\\/\\\\_\\\\\\\\ \\\\_\\\\ \\\\____/\\n      \\\\ \\\\ \\\\/  \\\\/__/\\\\/_/\\\\/____/\\\\/___/  \\\\/____/\\\\/__/\\\\/_/\\\\/_/ \\\\/_/\\\\/___/\\n       \\\\ \\\\_\\\\\\n        \\\\/_/\\n\\n    The sweetest DeFi portfolio manager.\\n\\n**/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IFarm.sol\\\";\\nimport \\\"./interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"./interfaces/IPacocaVault.sol\\\";\\n\\ncontract SweetVault is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        // How many assets the user has provided.\\n        uint256 stake;\\n        // How many staked $PACOCA user had at his last action\\n        uint256 autoPacocaShares;\\n        // Pacoca shares not entitled to the user\\n        uint256 rewardDebt;\\n        // Timestamp of last user deposit\\n        uint256 lastDepositedTime;\\n    }\\n\\n    // Addresses\\n    address constant public WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    IERC20 constant public PACOCA = IERC20(0x55671114d774ee99D653D6C12460c780a67f1D18);\\n    IPacocaVault immutable public AUTO_PACOCA;\\n    IERC20 immutable public STAKED_TOKEN;\\n\\n    // Runtime data\\n    mapping(address => UserInfo) public userInfo; // Info of users\\n    uint256 public accSharesPerStakedToken; // Accumulated AUTO_PACOCA shares per staked token, times 1e18.\\n\\n    // Farm info\\n    IFarm immutable public STAKED_TOKEN_FARM;\\n    IERC20 immutable public FARM_REWARD_TOKEN;\\n    uint256 immutable public FARM_PID;\\n    bool immutable public IS_CAKE_STAKING;\\n    bool immutable public IS_WAULT;\\n    bool immutable public IS_BISWAP;\\n\\n    // Settings\\n    IPancakeRouter02 immutable public router;\\n    address[] public pathToPacoca; // Path from staked token to PACOCA\\n    address[] public pathToWbnb; // Path from staked token to WBNB\\n\\n    address public treasury;\\n    address public keeper;\\n    uint256 public keeperFee = 50; // 0.5%\\n    uint256 public constant keeperFeeUL = 100; // 1%\\n\\n    address public platform;\\n    uint256 public platformFee;\\n    uint256 public constant platformFeeUL = 500; // 5%\\n\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n    uint256 public buyBackRate;\\n    uint256 public constant buyBackRateUL = 300; // 5%\\n\\n    uint256 public earlyWithdrawFee = 100; // 1%\\n    uint256 public constant earlyWithdrawFeeUL = 300; // 3%\\n    uint256 public constant withdrawFeePeriod = 3 days;\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event EarlyWithdraw(address indexed user, uint256 amount, uint256 fee);\\n    event ClaimRewards(address indexed user, uint256 shares, uint256 amount);\\n\\n    // Setting updates\\n    event SetPathToPacoca(address[] oldPath, address[] newPath);\\n    event SetPathToWbnb(address[] oldPath, address[] newPath);\\n    event SetBuyBackRate(uint256 oldBuyBackRate, uint256 newBuyBackRate);\\n    event SetTreasury(address oldTreasury, address newTreasury);\\n    event SetKeeper(address oldKeeper, address newKeeper);\\n    event SetKeeperFee(uint256 oldKeeperFee, uint256 newKeeperFee);\\n    event SetPlatform(address oldPlatform, address newPlatform);\\n    event SetPlatformFee(uint256 oldPlatformFee, uint256 newPlatformFee);\\n    event SetEarlyWithdrawFee(uint256 oldEarlyWithdrawFee, uint256 newEarlyWithdrawFee);\\n\\n    constructor(\\n        address _autoPacoca,\\n        address _stakedToken,\\n        address _stakedTokenFarm,\\n        address _farmRewardToken,\\n        uint256 _farmPid,\\n        bool _isCakeStaking,\\n        address _router,\\n        address[] memory _pathToPacoca,\\n        address[] memory _pathToWbnb,\\n        address _owner,\\n        address _treasury,\\n        address _keeper,\\n        address _platform,\\n        uint256 _buyBackRate,\\n        uint256 _platformFee\\n    ) public {\\n        require(\\n            _pathToPacoca[0] == address(_farmRewardToken) && _pathToPacoca[_pathToPacoca.length - 1] == address(PACOCA),\\n            \\\"SweetVault: Incorrect path to PACOCA\\\"\\n        );\\n\\n        require(\\n            _pathToWbnb[0] == address(_farmRewardToken) && _pathToWbnb[_pathToWbnb.length - 1] == WBNB,\\n            \\\"SweetVault: Incorrect path to WBNB\\\"\\n        );\\n\\n        require(_buyBackRate <= buyBackRateUL);\\n        require(_platformFee <= platformFeeUL);\\n\\n        AUTO_PACOCA = IPacocaVault(_autoPacoca);\\n        STAKED_TOKEN = IERC20(_stakedToken);\\n        STAKED_TOKEN_FARM = IFarm(_stakedTokenFarm);\\n        FARM_REWARD_TOKEN = IERC20(_farmRewardToken);\\n        FARM_PID = _farmPid;\\n        IS_CAKE_STAKING = _isCakeStaking;\\n        IS_WAULT = _stakedTokenFarm == 0x22fB2663C7ca71Adc2cc99481C77Aaf21E152e2D;\\n        IS_BISWAP = _stakedTokenFarm == 0xDbc1A13490deeF9c3C12b44FE77b503c1B061739;\\n\\n        router = IPancakeRouter02(_router);\\n        pathToPacoca = _pathToPacoca;\\n        pathToWbnb = _pathToWbnb;\\n\\n        buyBackRate = _buyBackRate;\\n        platformFee = _platformFee;\\n\\n        transferOwnership(_owner);\\n        treasury = _treasury;\\n        keeper = _keeper;\\n        platform = _platform;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(keeper == msg.sender, \\\"SweetVault: caller is not the keeper\\\");\\n        _;\\n    }\\n\\n    // 1. Harvest rewards\\n    // 2. Collect fees\\n    // 3. Convert rewards to $PACOCA\\n    // 4. Stake to pacoca auto-compound vault\\n    function earn(\\n        uint256 _minPlatformOutput,\\n        uint256 _minKeeperOutput,\\n        uint256 _minBurnOutput,\\n        uint256 _minPacocaOutput\\n    ) external onlyKeeper {\\n        if (IS_CAKE_STAKING) {\\n            STAKED_TOKEN_FARM.leaveStaking(0);\\n        } else if (IS_WAULT) {\\n            STAKED_TOKEN_FARM.withdraw(FARM_PID, 0, true);\\n        } else {\\n            STAKED_TOKEN_FARM.withdraw(FARM_PID, 0);\\n        }\\n\\n        uint256 rewardTokenBalance = _rewardTokenBalance();\\n\\n        // Collect platform fees\\n        if (platformFee > 0) {\\n            _swap(\\n                rewardTokenBalance.mul(platformFee).div(10000),\\n                _minPlatformOutput,\\n                pathToWbnb,\\n                platform\\n            );\\n        }\\n\\n        // Collect keeper fees\\n        if (keeperFee > 0) {\\n            _swap(\\n                rewardTokenBalance.mul(keeperFee).div(10000),\\n                _minKeeperOutput,\\n                pathToWbnb,\\n                treasury\\n            );\\n        }\\n\\n        // Collect Burn fees\\n        if (buyBackRate > 0) {\\n            _swap(\\n                rewardTokenBalance.mul(buyBackRate).div(10000),\\n                _minBurnOutput,\\n                pathToPacoca,\\n                BURN_ADDRESS\\n            );\\n        }\\n\\n        // Convert remaining rewards to PACOCA\\n        _swap(\\n            _rewardTokenBalance(),\\n            _minPacocaOutput,\\n            pathToPacoca,\\n            address(this)\\n        );\\n\\n        uint256 previousShares = totalAutoPacocaShares();\\n        uint256 pacocaBalance = _pacocaBalance();\\n\\n        _approveTokenIfNeeded(\\n            PACOCA,\\n            pacocaBalance,\\n            address(AUTO_PACOCA)\\n        );\\n\\n        AUTO_PACOCA.deposit(pacocaBalance);\\n\\n        uint256 currentShares = totalAutoPacocaShares();\\n\\n        accSharesPerStakedToken = accSharesPerStakedToken.add(\\n            currentShares.sub(previousShares).mul(1e18).div(totalStake())\\n        );\\n    }\\n\\n    function deposit(uint256 _amount) external virtual nonReentrant {\\n        require(_amount > 0, \\\"SweetVault: amount must be greater than zero\\\");\\n\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        STAKED_TOKEN.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n\\n        _approveTokenIfNeeded(\\n            STAKED_TOKEN,\\n            _amount,\\n            address(STAKED_TOKEN_FARM)\\n        );\\n\\n        if (IS_CAKE_STAKING) {\\n            STAKED_TOKEN_FARM.enterStaking(_amount);\\n        } else if (IS_WAULT) {\\n            STAKED_TOKEN_FARM.deposit(FARM_PID, _amount, false);\\n        } else {\\n            STAKED_TOKEN_FARM.deposit(FARM_PID, _amount);\\n        }\\n\\n        user.autoPacocaShares = user.autoPacocaShares.add(\\n            user.stake.mul(accSharesPerStakedToken).div(1e18).sub(\\n                user.rewardDebt\\n            )\\n        );\\n        user.stake = user.stake.add(_amount);\\n        user.rewardDebt = user.stake.mul(accSharesPerStakedToken).div(1e18);\\n        user.lastDepositedTime = block.timestamp;\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    function withdraw(uint256 _amount) external virtual nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        require(_amount > 0, \\\"SweetVault: amount must be greater than zero\\\");\\n        require(user.stake >= _amount, \\\"SweetVault: withdraw amount exceeds balance\\\");\\n\\n        if (IS_CAKE_STAKING) {\\n            STAKED_TOKEN_FARM.leaveStaking(_amount);\\n        } else if (IS_WAULT) {\\n            STAKED_TOKEN_FARM.withdraw(FARM_PID, _amount, false);\\n        } else {\\n            STAKED_TOKEN_FARM.withdraw(FARM_PID, _amount);\\n        }\\n\\n        uint256 currentAmount = _amount;\\n\\n        if (block.timestamp < user.lastDepositedTime.add(withdrawFeePeriod)) {\\n            uint256 currentWithdrawFee = currentAmount.mul(earlyWithdrawFee).div(10000);\\n\\n            STAKED_TOKEN.safeTransfer(treasury, currentWithdrawFee);\\n\\n            currentAmount = currentAmount.sub(currentWithdrawFee);\\n\\n            emit EarlyWithdraw(msg.sender, _amount, currentWithdrawFee);\\n        }\\n\\n        user.autoPacocaShares = user.autoPacocaShares.add(\\n            user.stake.mul(accSharesPerStakedToken).div(1e18).sub(\\n                user.rewardDebt\\n            )\\n        );\\n        user.stake = user.stake.sub(_amount);\\n        user.rewardDebt = user.stake.mul(accSharesPerStakedToken).div(1e18);\\n\\n        // Withdraw pacoca rewards if user leaves\\n        if (user.stake == 0 && user.autoPacocaShares > 0) {\\n            _claimRewards(user.autoPacocaShares, false);\\n        }\\n\\n        STAKED_TOKEN.safeTransfer(msg.sender, currentAmount);\\n\\n        emit Withdraw(msg.sender, currentAmount);\\n    }\\n\\n    function claimRewards(uint256 _shares) external nonReentrant {\\n        _claimRewards(_shares, true);\\n    }\\n\\n    function _claimRewards(uint256 _shares, bool _update) internal {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        if (_update) {\\n            user.autoPacocaShares = user.autoPacocaShares.add(\\n                user.stake.mul(accSharesPerStakedToken).div(1e18).sub(\\n                    user.rewardDebt\\n                )\\n            );\\n\\n            user.rewardDebt = user.stake.mul(accSharesPerStakedToken).div(1e18);\\n        }\\n\\n        require(user.autoPacocaShares >= _shares, \\\"SweetVault: claim amount exceeds balance\\\");\\n\\n        user.autoPacocaShares = user.autoPacocaShares.sub(_shares);\\n\\n        uint256 pacocaBalanceBefore = _pacocaBalance();\\n\\n        AUTO_PACOCA.withdraw(_shares);\\n\\n        uint256 withdrawAmount = _pacocaBalance().sub(pacocaBalanceBefore);\\n\\n        _safePACOCATransfer(msg.sender, withdrawAmount);\\n\\n        emit ClaimRewards(msg.sender, _shares, withdrawAmount);\\n    }\\n\\n    function getExpectedOutputs() external view returns (\\n        uint256 platformOutput,\\n        uint256 keeperOutput,\\n        uint256 burnOutput,\\n        uint256 pacocaOutput\\n    ) {\\n        uint256 wbnbOutput = _getExpectedOutput(pathToWbnb);\\n        uint256 pacocaOutputWithoutFees = _getExpectedOutput(pathToPacoca);\\n\\n        platformOutput = wbnbOutput.mul(platformFee).div(10000);\\n        keeperOutput = wbnbOutput.mul(keeperFee).div(10000);\\n        burnOutput = pacocaOutputWithoutFees.mul(buyBackRate).div(10000);\\n\\n        pacocaOutput = pacocaOutputWithoutFees.sub(\\n            pacocaOutputWithoutFees.mul(platformFee).div(10000).add(\\n                pacocaOutputWithoutFees.mul(keeperFee).div(10000)\\n            ).add(\\n                pacocaOutputWithoutFees.mul(buyBackRate).div(10000)\\n            )\\n        );\\n    }\\n\\n    function _getExpectedOutput(\\n        address[] memory _path\\n    ) internal virtual view returns (uint256) {\\n        uint256 pending;\\n\\n        if (IS_WAULT) {\\n            pending = STAKED_TOKEN_FARM.pendingWex(FARM_PID, address(this));\\n        } else if (IS_BISWAP) {\\n            pending = STAKED_TOKEN_FARM.pendingBSW(FARM_PID, address(this));\\n        } else {\\n            pending = STAKED_TOKEN_FARM.pendingCake(FARM_PID, address(this));\\n        }\\n\\n        uint256 rewards = _rewardTokenBalance().add(pending);\\n\\n        uint256[] memory amounts = router.getAmountsOut(rewards, _path);\\n\\n        return amounts[amounts.length.sub(1)];\\n    }\\n\\n    function balanceOf(\\n        address _user\\n    ) external view returns (\\n        uint256 stake,\\n        uint256 pacoca,\\n        uint256 autoPacocaShares\\n    ) {\\n        UserInfo memory user = userInfo[_user];\\n\\n        uint256 pendingShares = user.stake.mul(accSharesPerStakedToken).div(1e18).sub(\\n            user.rewardDebt\\n        );\\n\\n        stake = user.stake;\\n        autoPacocaShares = user.autoPacocaShares.add(pendingShares);\\n        pacoca = autoPacocaShares.mul(AUTO_PACOCA.getPricePerFullShare()).div(1e18);\\n    }\\n\\n    function _approveTokenIfNeeded(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _spender\\n    ) internal {\\n        if (_token.allowance(address(this), _spender) < _amount) {\\n            _token.safeIncreaseAllowance(_spender, _amount);\\n        }\\n    }\\n\\n    function _rewardTokenBalance() internal view returns (uint256) {\\n        return FARM_REWARD_TOKEN.balanceOf(address(this));\\n    }\\n\\n    function _pacocaBalance() private view returns (uint256) {\\n        return PACOCA.balanceOf(address(this));\\n    }\\n\\n    function totalStake() public view returns (uint256) {\\n        return STAKED_TOKEN_FARM.userInfo(FARM_PID, address(this));\\n    }\\n\\n    function totalAutoPacocaShares() public view returns (uint256) {\\n        (uint256 shares, , ,) = AUTO_PACOCA.userInfo(address(this));\\n\\n        return shares;\\n    }\\n\\n    // Safe PACOCA transfer function, just in case if rounding error causes pool to not have enough\\n    function _safePACOCATransfer(address _to, uint256 _amount) private {\\n        uint256 balance = _pacocaBalance();\\n\\n        if (_amount > balance) {\\n            PACOCA.transfer(_to, balance);\\n        } else {\\n            PACOCA.transfer(_to, _amount);\\n        }\\n    }\\n\\n    function _swap(\\n        uint256 _inputAmount,\\n        uint256 _minOutputAmount,\\n        address[] memory _path,\\n        address _to\\n    ) internal virtual {\\n        _approveTokenIfNeeded(\\n            FARM_REWARD_TOKEN,\\n            _inputAmount,\\n            address(router)\\n        );\\n\\n        router.swapExactTokensForTokens(\\n            _inputAmount,\\n            _minOutputAmount,\\n            _path,\\n            _to,\\n            block.timestamp\\n        );\\n    }\\n\\n    function setPathToPacoca(address[] memory _path) external onlyOwner {\\n        require(\\n            _path[0] == address(FARM_REWARD_TOKEN) && _path[_path.length - 1] == address(PACOCA),\\n            \\\"SweetVault: Incorrect path to PACOCA\\\"\\n        );\\n\\n        address[] memory oldPath = pathToPacoca;\\n\\n        pathToPacoca = _path;\\n\\n        emit SetPathToPacoca(oldPath, pathToPacoca);\\n    }\\n\\n    function setPathToWbnb(address[] memory _path) external onlyOwner {\\n        require(\\n            _path[0] == address(FARM_REWARD_TOKEN) && _path[_path.length - 1] == WBNB,\\n            \\\"SweetVault: Incorrect path to WBNB\\\"\\n        );\\n\\n        address[] memory oldPath = pathToWbnb;\\n\\n        pathToWbnb = _path;\\n\\n        emit SetPathToWbnb(oldPath, pathToWbnb);\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        address oldTreasury = treasury;\\n\\n        treasury = _treasury;\\n\\n        emit SetTreasury(oldTreasury, treasury);\\n    }\\n\\n    function setKeeper(address _keeper) external onlyOwner {\\n        address oldKeeper = keeper;\\n\\n        keeper = _keeper;\\n\\n        emit SetKeeper(oldKeeper, keeper);\\n    }\\n\\n    function setKeeperFee(uint256 _keeperFee) external onlyOwner {\\n        require(_keeperFee <= keeperFeeUL, \\\"SweetVault: Keeper fee too high\\\");\\n\\n        uint256 oldKeeperFee = keeperFee;\\n\\n        keeperFee = _keeperFee;\\n\\n        emit SetKeeperFee(oldKeeperFee, keeperFee);\\n    }\\n\\n    function setPlatform(address _platform) external onlyOwner {\\n        address oldPlatform = platform;\\n\\n        platform = _platform;\\n\\n        emit SetPlatform(oldPlatform, platform);\\n    }\\n\\n    function setPlatformFee(uint256 _platformFee) external onlyOwner {\\n        require(_platformFee <= platformFeeUL, \\\"SweetVault: Platform fee too high\\\");\\n\\n        uint256 oldPlatformFee = platformFee;\\n\\n        platformFee = _platformFee;\\n\\n        emit SetPlatformFee(oldPlatformFee, platformFee);\\n    }\\n\\n    function setBuyBackRate(uint256 _buyBackRate) external onlyOwner {\\n        require(\\n            _buyBackRate <= buyBackRateUL,\\n            \\\"SweetVault: Buy back rate too high\\\"\\n        );\\n\\n        uint256 oldBuyBackRate = buyBackRate;\\n\\n        buyBackRate = _buyBackRate;\\n\\n        emit SetBuyBackRate(oldBuyBackRate, buyBackRate);\\n    }\\n\\n    function setEarlyWithdrawFee(uint256 _earlyWithdrawFee) external onlyOwner {\\n        require(\\n            _earlyWithdrawFee <= earlyWithdrawFeeUL,\\n            \\\"SweetVault: Early withdraw fee too high\\\"\\n        );\\n\\n        uint256 oldEarlyWithdrawFee = earlyWithdrawFee;\\n\\n        earlyWithdrawFee = _earlyWithdrawFee;\\n\\n        emit SetEarlyWithdrawFee(oldEarlyWithdrawFee, earlyWithdrawFee);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IFarm {\\n    function poolLength() external view returns (uint256);\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256);\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n    function pendingBSW(uint256 _pid, address _user) external view returns (uint256);\\n    function pendingWex(uint256 _pid, address _user) external view returns (uint256);\\n    function pendingEarnings(uint256 _pid, address _user) external view returns (uint256);\\n\\n    // Deposit LP tokens to MasterChef for CAKE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function deposit(uint256 _pid, uint256 _amount, bool _withdrawRewards) external;\\n    function deposit(uint256 _pid, uint256 _amount, address _referrer) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount, bool _withdrawRewards) external;\\n\\n    // Stake CAKE tokens to MasterChef\\n    function enterStaking(uint256 _amount) external;\\n\\n    // Withdraw CAKE tokens from STAKING.\\n    function leaveStaking(uint256 _amount) external;\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IPancakeRouter01.sol\\\";\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPacocaVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IPacocaVault {\\r\\n    event Deposit(address indexed sender, uint256 amount, uint256 shares, uint256 lastDepositedTime);\\r\\n    event Withdraw(address indexed sender, uint256 amount, uint256 shares);\\r\\n\\r\\n    function deposit(uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 _shares) external;\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n    function userInfo(address _user) external view returns (\\r\\n        uint256 shares,\\r\\n        uint256 lastDepositedTime,\\r\\n        uint256 pacocaAtLastUserAction,\\r\\n        uint256 lastUserActionTime\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoPacoca\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedTokenFarm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_farmPid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isCakeStaking\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pathToPacoca\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pathToWbnb\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"EarlyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyBackRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyBackRate\",\"type\":\"uint256\"}],\"name\":\"SetBuyBackRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEarlyWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEarlyWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"SetEarlyWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldKeeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"SetKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldKeeperFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newKeeperFee\",\"type\":\"uint256\"}],\"name\":\"SetKeeperFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oldPath\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newPath\",\"type\":\"address[]\"}],\"name\":\"SetPathToPacoca\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oldPath\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newPath\",\"type\":\"address[]\"}],\"name\":\"SetPathToWbnb\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPlatform\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPlatform\",\"type\":\"address\"}],\"name\":\"SetPlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPlatformFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPlatformFee\",\"type\":\"uint256\"}],\"name\":\"SetPlatformFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTO_PACOCA\",\"outputs\":[{\"internalType\":\"contract IPacocaVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FARM_PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FARM_REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_BISWAP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_CAKE_STAKING\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_WAULT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACOCA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN_FARM\",\"outputs\":[{\"internalType\":\"contract IFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accSharesPerStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pacoca\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoPacocaShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRateUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawFeeUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPlatformOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minKeeperOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBurnOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPacocaOutput\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedOutputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"platformOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keeperOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pacocaOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFeeUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathToPacoca\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathToWbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"}],\"name\":\"setBuyBackRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setEarlyWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keeperFee\",\"type\":\"uint256\"}],\"name\":\"setKeeperFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setPathToPacoca\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setPathToWbnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"setPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAutoPacocaShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoPacocaShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SweetVault", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d0cec3a6a0a905a643fa1b0502049fe1ebc0ee360000000000000000000000005bf6941f029424674bb93a43b79fc46bf4a67c21000000000000000000000000dbc1a13490deef9c3c12b44fe77b503c1b061739000000000000000000000000965f527d9159dce6288a2219db51fc6eef120dd1000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000028000000000000000000000000097b36d12936fa7e2b7746d3c6e76f464466923f90000000000000000000000000552e3a7bfae95f1ae7ceb1bed4d7d5eec38ae2a000000000000000000000000d0ceee9b502320c57467918a7fb4cab1c2efc7370000000000000000000000000552e3a7bfae95f1ae7ceb1bed4d7d5eec38ae2a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000965f527d9159dce6288a2219db51fc6eef120dd1000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce8200000000000000000000000055671114d774ee99d653d6c12460c780a67f1d180000000000000000000000000000000000000000000000000000000000000002000000000000000000000000965f527d9159dce6288a2219db51fc6eef120dd1000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}