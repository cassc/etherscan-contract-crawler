{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTraderTournament.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract NFTraderTournament is ReentrancyGuard, Ownable{\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _itemIds;\\r\\n\\r\\n    constructor() {\\r\\n\\r\\n    }\\r\\n\\r\\n    struct Tournament{\\r\\n        bool active;\\r\\n        bool privateTournament;\\r\\n        string name;\\r\\n        uint256 startAt;\\r\\n        uint256 endAt;                        \\r\\n        mapping(uint256 => Trade) trades;\\r\\n        uint256[] traders;\\r\\n        uint totalTrades;\\r\\n    }\\r\\n\\r\\n    struct Trade{\\r\\n        uint256 tournamentId;\\r\\n        uint256 openPrice;\\r\\n        uint256 openAt;\\r\\n        string asset;\\r\\n    }\\r\\n\\r\\n    event TournamentCreated(uint256 itemId, string name, uint256 startAt, uint256 endAt, bool active, bool privateTournament);\\r\\n    event TradeCreated(uint256 tokenId, uint256 openPrice, uint256 tournamentId, string asset, uint256 openAt);\\r\\n    event TournamentChanged(uint256 itemId, string name, uint256 startAt, uint256 endAt, bool active, bool privateTournament);\\r\\n\\r\\n    mapping(uint256 => Tournament) private tournaments;\\r\\n\\r\\n    function addTournament(string memory name, bool active, uint256 startAt, uint256 endAt, bool privateTournament) public onlyOwner{\\r\\n        require(endAt > startAt, \\\"End must greter than start\\\");\\r\\n        _itemIds.increment();\\r\\n        uint256 itemId = _itemIds.current();\\r\\n\\r\\n        Tournament storage tournament = tournaments[itemId];\\r\\n        tournament.active = active;\\r\\n        tournament.name = name;\\r\\n        tournament.startAt = startAt;\\r\\n        tournament.endAt = endAt;\\r\\n        tournament.totalTrades = 0;\\r\\n        tournament.privateTournament = privateTournament;        \\r\\n\\r\\n        emit TournamentCreated(itemId, name, startAt, endAt, active, privateTournament);\\r\\n    }\\r\\n\\r\\n    function addTrade(uint256 tokenId, uint256 openPrice, string memory asset, uint256 tournamentId) public{\\r\\n        uint256 openAt = block.timestamp;\\r\\n        Tournament storage tournament = tournaments[tournamentId];\\r\\n        if(tournament.privateTournament == true){\\r\\n            require(owner() == _msgSender(), \\\"Private tournament\\\");\\r\\n        }\\r\\n\\r\\n        require(tournament.active == true, \\\"Inactive tournament\\\");\\r\\n        require(openAt < tournament.endAt, \\\"Closed tournament\\\");\\r\\n        require(tournament.trades[tokenId].tournamentId == 0, \\\"Already has a trade\\\");\\r\\n        \\r\\n        tournament.trades[tokenId] = Trade(tournamentId, openPrice, openAt, asset);\\r\\n        tournament.traders.push(tokenId);\\r\\n        tournament.totalTrades += 1;\\r\\n        emit TradeCreated(tokenId, openPrice, tournamentId, asset, openAt);\\r\\n    }\\r\\n\\r\\n    function setTournamentActive(uint256 tournament, bool value) public onlyOwner{\\r\\n        tournaments[tournament].active = value;\\r\\n        emit TournamentChanged(tournament,\\r\\n         tournaments[tournament].name,  \\r\\n         tournaments[tournament].startAt, \\r\\n         tournaments[tournament].endAt, \\r\\n         tournaments[tournament].active, \\r\\n         tournaments[tournament].privateTournament);\\r\\n    }\\r\\n\\r\\n    function setTournamentEndAt(uint256 tournament, uint256 value) public onlyOwner{\\r\\n        require(value > tournaments[tournament].startAt, \\\"End must greter than start\\\");\\r\\n        tournaments[tournament].endAt = value;\\r\\n        emit TournamentChanged(tournament,\\r\\n         tournaments[tournament].name,  \\r\\n         tournaments[tournament].startAt,  \\r\\n         tournaments[tournament].endAt,  \\r\\n         tournaments[tournament].active, \\r\\n         tournaments[tournament].privateTournament);\\r\\n    }\\r\\n\\r\\n    function setTournamentStartAt(uint256 tournament, uint256 value) public onlyOwner{\\r\\n        require(value < tournaments[tournament].endAt, \\\"End must greter than start\\\");\\r\\n        tournaments[tournament].startAt = value;\\r\\n        emit TournamentChanged(tournament,\\r\\n         tournaments[tournament].name,  \\r\\n         tournaments[tournament].startAt,  \\r\\n         tournaments[tournament].endAt,  \\r\\n         tournaments[tournament].active, \\r\\n         tournaments[tournament].privateTournament);\\r\\n    }\\r\\n\\r\\n    function setTournamentPrivacy(uint256 tournament, bool value) public onlyOwner{\\r\\n        tournaments[tournament].privateTournament = value;\\r\\n        emit TournamentChanged(tournament,\\r\\n         tournaments[tournament].name,  \\r\\n         tournaments[tournament].startAt,  \\r\\n         tournaments[tournament].endAt,  \\r\\n         tournaments[tournament].active, \\r\\n         tournaments[tournament].privateTournament);\\r\\n    }\\r\\n\\r\\n    function getTournament(uint tournament) public view returns(bool active, string memory name, uint256 startAt, uint256 endAt, uint totalTrades, bool privateTournament){\\r\\n        return (tournaments[tournament].active, tournaments[tournament].name, tournaments[tournament].startAt, tournaments[tournament].endAt, tournaments[tournament].totalTrades, tournaments[tournament].privateTournament);\\r\\n    }\\r\\n\\r\\n    function getTrade(uint256 tournamentId, uint256 tokenId) public view returns(Trade memory){\\r\\n        return tournaments[tournamentId].trades[tokenId];\\r\\n    }\\r\\n\\r\\n    function getTrades(uint256 tournamentId) public view returns(Trade[] memory){\\r\\n        uint totalTrades = tournaments[tournamentId].totalTrades;\\r\\n        Trade[] memory trades = new Trade[](totalTrades);\\r\\n\\r\\n        for(uint i = 0; i < totalTrades; i++){\\r\\n            trades[i] = tournaments[tournamentId].trades[tournaments[tournamentId].traders[i]];\\r\\n        }\\r\\n        return trades;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"privateTournament\",\"type\":\"bool\"}],\"name\":\"TournamentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"privateTournament\",\"type\":\"bool\"}],\"name\":\"TournamentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"}],\"name\":\"TradeCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"privateTournament\",\"type\":\"bool\"}],\"name\":\"addTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"}],\"name\":\"addTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournament\",\"type\":\"uint256\"}],\"name\":\"getTournament\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTrades\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"privateTournament\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTrade\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"}],\"internalType\":\"struct NFTraderTournament.Trade\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"}],\"name\":\"getTrades\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"}],\"internalType\":\"struct NFTraderTournament.Trade[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournament\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTournamentActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournament\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTournamentEndAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournament\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTournamentPrivacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournament\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTournamentStartAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTraderTournament", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}