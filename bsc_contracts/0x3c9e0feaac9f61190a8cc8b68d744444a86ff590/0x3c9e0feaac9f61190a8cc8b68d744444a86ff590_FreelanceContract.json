{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract FreelanceContract {   \r\n\r\n    mapping(uint256 => Order) public orders;\r\n    mapping(uint256 => uint256) public escrowBalances;\r\n    mapping(uint256 => Proposal[]) public orderProposals;\r\n    mapping(address => bool) public bannedCustomers;\r\n    mapping(address => bool) public bannedExecutors;\r\n    mapping(address => bool) public admins;\r\n    mapping(address => uint256) public customerOrderCount;\r\n    mapping(address => uint256) public executorOrderCount;\r\n    mapping(address => uint256) public executorWrongOrderCount;\r\n\r\n    event OrderCreated(address indexed creator, uint256 indexed orderIndex);\r\n    event PersonalOrderCreated(address customer, uint256 orderId, address assignedExecutor);\r\n    event OrderCompleted(uint256 orderId);\r\n    event OrderCancelled(uint256 orderId);\r\n    event IpfsHashSet(uint256 orderId, string ipfsHash);\r\n    event ProposalSubmitted(uint256 orderId, address executor);\r\n    event ProposalAccepted(uint256 orderId, address executor);\r\n    event TokensDeposited(uint256 orderId, uint256 amount);\r\n    event TokensWithdrawn(uint256 orderId, uint256 amount);\r\n    event AdminAdded(address adminAddress);\r\n    event AdminRemoved(address adminAddress);\r\n    event PaymentRejected(uint256 orderId);\r\n    event OrderConfirmed(uint256 orderId);\r\n    event ExecutorUnbanned(address indexed executor);\r\n    event CustomerUnbanned(address indexed customer);\r\n    event ExecutorBanned( address indexed executor);\r\n    event CustomerBanned( address indexed customer);\r\n\r\n    uint256 public orderCount;\r\n    uint256 public orderIndex;\r\n    address public owner;\r\n    IERC20 private _token;\r\n\r\n    constructor(address tokenAddress) {\r\n        _token = IERC20(tokenAddress);\r\n        owner = msg.sender;\r\n        admins[owner] = true;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(admins[msg.sender] || msg.sender == owner, \"Only admins or the owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCustomerOrAdmin(uint256 orderId) {\r\n        Order storage order = orders[orderId];\r\n        require(\r\n            msg.sender == order.customer || msg.sender == owner || admins[msg.sender],\r\n            \"Only the order customer, owner or admin can perform this action\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    struct Order {\r\n        address payable customer;\r\n        string description;\r\n        string fullDescription;\r\n        string category;\r\n        uint256 price;\r\n        bool completed;\r\n        bool rejected;\r\n        bool confirmed;\r\n        address payable assignedExecutor;\r\n        string ipfsHash;\r\n    }\r\n\r\n    struct Proposal {\r\n        address payable executor;\r\n        uint256 orderId;\r\n        string message;\r\n        bool accepted;\r\n    }\r\n\r\n    function addAdmin(address adminAddress) public onlyAdmin {\r\n        admins[adminAddress] = true;\r\n        emit AdminAdded(adminAddress);\r\n    }\r\n\r\n    function removeAdmin(address adminAddress) public onlyAdmin {\r\n        require(adminAddress != owner, \"Cannot remove contract owner as admin\");\r\n        admins[adminAddress] = false;\r\n        emit AdminRemoved(adminAddress);\r\n    }\r\n\r\n    function createOrder(\r\n            string memory _description,\r\n            string memory _fullDescription,\r\n            string memory _category,\r\n            uint256 _price,\r\n            address payable _assignedExecutor\r\n        ) public {\r\n            uint256 newOrderIndex = orderCount;\r\n            orders[newOrderIndex] = Order(\r\n                payable(msg.sender),\r\n                _description,\r\n                _fullDescription,\r\n                _category,\r\n                _price,\r\n                false,\r\n                false,\r\n                false,\r\n                _assignedExecutor,\r\n                \"\"\r\n            );\r\n            orderCount++;\r\n            customerOrderCount[msg.sender]++;\r\n            if (_assignedExecutor != address(0)) {\r\n                emit PersonalOrderCreated(msg.sender, newOrderIndex, _assignedExecutor);\r\n            } else {\r\n                emit OrderCreated(msg.sender, newOrderIndex);\r\n            }\r\n    }\r\n\r\n    function submitProposal(uint256 orderId, string memory message) public {\r\n        Order storage order = orders[orderId];\r\n        require(order.assignedExecutor == address(0), \"Order is a personal order\");\r\n        uint256 proposalCount = orderProposals[orderId].length;\r\n        for (uint256 i = 0; i < proposalCount; i++) {\r\n            if (orderProposals[orderId][i].executor == msg.sender) {\r\n                revert(\"You have already submitted a proposal for this order\");\r\n            }\r\n        }\r\n        orderProposals[orderId].push(Proposal(payable(msg.sender), orderId, message, false));\r\n        emit ProposalSubmitted(orderId, msg.sender);\r\n    }\r\n\r\n    function acceptProposal(uint256 orderId, uint256 proposalIndex) public {\r\n        Order storage order = orders[orderId];\r\n        require(msg.sender == order.customer, \"Only the customer can accept a proposal\");\r\n        require(order.assignedExecutor == address(0), \"Order is a personal order\");\r\n        Proposal storage proposal = orderProposals[orderId][proposalIndex];\r\n        require(!proposal.accepted, \"Proposal is already accepted\");\r\n        proposal.accepted = true;\r\n        order.assignedExecutor = proposal.executor;\r\n        emit ProposalAccepted(orderId, proposal.executor);\r\n    }\r\n\r\n    function getOrderProposals(uint256 orderId) public view returns (Proposal[] memory) {\r\n        return orderProposals[orderId];\r\n    }\r\n\r\n    function cancelOrder(uint256 orderId) public {\r\n        Order storage order = orders[orderId];\r\n        require(!order.completed, \"Order is completed\");\r\n        require(msg.sender == order.customer, \"Only the customer can cancel the order\");\r\n        order.completed = true;\r\n        emit OrderCancelled(orderId);\r\n    }\r\n\r\n    function setIpfsHash(uint256 orderId, string memory ipfsHash) public {\r\n        require(msg.sender == orders[orderId].customer, \"Only the order customer can set the IPFS hash\");\r\n        orders[orderId].ipfsHash = ipfsHash;\r\n        emit IpfsHashSet(orderId, ipfsHash);\r\n    }\r\n\r\n    function depositTokens(uint256 orderId, uint256 amount) public {\r\n        Order storage order = orders[orderId];\r\n        require(msg.sender == order.customer, \"Only the order customer can deposit tokens\");\r\n        require(_token.allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\r\n        require(_token.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\r\n        escrowBalances[orderId] += amount;\r\n        emit TokensDeposited(orderId, amount);\r\n    }\r\n\r\n    function confirmCompletion(uint256 orderId) public {\r\n        Order storage order = orders[orderId];\r\n        require(msg.sender == order.assignedExecutor, \"Only the assigned executor can confirm completion\");\r\n        require(!order.completed, \"Order is already completed\");\r\n        require(!order.rejected, \"Payment was rejected by the assigned executor\");\r\n        require(!order.confirmed, \"Order is already confirmed\");\r\n        order.confirmed = true;\r\n        emit OrderConfirmed(orderId);\r\n    }\r\n\r\n    function rejectPayment(uint256 orderId) public {\r\n        Order storage order = orders[orderId];\r\n        require(msg.sender == order.assignedExecutor, \"Only the assigned executor can reject payment\");\r\n        require(!order.completed, \"Order is already completed\");\r\n        require(!order.rejected, \"Payment is already rejected\");\r\n        order.rejected = true;\r\n        emit PaymentRejected(orderId); \r\n    }\r\n\r\n    function withdrawTokensToExecutor(uint256 orderId) public onlyCustomerOrAdmin(orderId) {\r\n        Order storage order = orders[orderId];\r\n        require(order.confirmed, \"Executor has not confirmed the order yet\");\r\n        require(order.assignedExecutor != address(0), \"No assigned executor\");\r\n        uint256 amount = escrowBalances[orderId];\r\n        require(amount > 0, \"No tokens to withdraw\");\r\n        escrowBalances[orderId] = 0;\r\n        require(_token.transfer(order.assignedExecutor, amount), \"Transfer failed\");\r\n        order.completed = true;\r\n        emit TokensWithdrawn(orderId, amount);\r\n        executorOrderCount[order.assignedExecutor]++;\r\n    }\r\n\r\n    function withdrawTokens(uint256 orderId) public onlyCustomerOrAdmin(orderId) {\r\n        Order storage order = orders[orderId];\r\n        require(order.rejected, \"Executor has not rejected the order yet\");\r\n        uint256 amount = escrowBalances[orderId];\r\n        require(amount > 0, \"No tokens to withdraw\");\r\n        escrowBalances[orderId] = 0;\r\n        require(_token.transfer(order.customer, amount), \"Transfer failed\");\r\n        order.completed = true;\r\n        emit TokensWithdrawn(orderId, amount);\r\n        executorWrongOrderCount[order.assignedExecutor]++;\r\n    }\r\n\r\n    function adminConfirmCompletion(uint256 orderId) public onlyAdmin {\r\n        Order storage order = orders[orderId];\r\n        order.confirmed = !order.confirmed;\r\n        emit OrderConfirmed(orderId);\r\n    }\r\n\r\n    function adminRejectPayment(uint256 orderId) public onlyAdmin {\r\n        Order storage order = orders[orderId];\r\n        order.rejected = !order.rejected;\r\n        emit PaymentRejected(orderId); \r\n    }\r\n\r\n    function adminCompleted(uint256 orderId) public onlyAdmin {\r\n        Order storage order = orders[orderId];\r\n        order.completed = !order.completed;\r\n        emit OrderCompleted(orderId); \r\n    }\r\n\r\n    function banCustomer(address customer) public onlyAdmin {\r\n        bannedCustomers[customer] = true;\r\n        emit CustomerBanned(customer);\r\n    }\r\n\r\n    function banExecutor(address executor) public onlyAdmin {\r\n        bannedExecutors[executor] = true;\r\n        emit ExecutorBanned(executor);\r\n    }\r\n\r\n    function unbanCustomer(address customer) public onlyAdmin {\r\n        bannedCustomers[customer] = false;\r\n        emit CustomerUnbanned(customer);\r\n    }\r\n\r\n    function unbanExecutor(address executor) public onlyAdmin {\r\n        bannedExecutors[executor] = false;\r\n        emit ExecutorUnbanned(executor);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"CustomerBanned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"CustomerUnbanned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutorBanned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutorUnbanned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"IpfsHashSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"PaymentRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assignedExecutor\",\"type\":\"address\"}],\"name\":\"PersonalOrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"acceptProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"adminCompleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"adminConfirmCompletion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"adminRejectPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"banCustomer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"banExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bannedCustomers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bannedExecutors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"confirmCompletion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fullDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_assignedExecutor\",\"type\":\"address\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customerOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executorOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executorWrongOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"internalType\":\"struct FreelanceContract.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderProposals\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fullDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rejected\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"confirmed\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"assignedExecutor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"rejectPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"setIpfsHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"submitProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"unbanCustomer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"unbanExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"withdrawTokensToExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FreelanceContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3df18dc8f45a0a1682460bc7007bfe46d2487b52ebcfc5e7cd066c6e89e3e428"}