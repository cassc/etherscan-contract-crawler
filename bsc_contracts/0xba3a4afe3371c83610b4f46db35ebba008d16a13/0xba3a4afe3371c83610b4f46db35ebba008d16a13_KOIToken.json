{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n  \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n   \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n     function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n   \r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        \r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            \r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n    \r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    \r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    \r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   \r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    \r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n   \r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\n\r\ncontract TokenReceiver{\r\n    constructor (address token) public{\r\n        IERC20(token).approve(msg.sender,uint256(-1));\r\n    }\r\n}\r\n\r\ncontract KOIToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n\r\n    uint8 private _decimals = 9;\r\n    uint256 private _tTotal = 10000000 * 10 ** 9;\r\n\r\n    string private _name = \"KOI\";\r\n    string private _symbol = \"KOI\";\r\n    \r\n    uint public _buyShareFee = 30;\r\n    uint public _buyLpFee = 20;\r\n    uint public _buyMkFee = 10;\r\n    uint public totalBuyFee = 60;\r\n    \r\n    uint public _sellLpFee = 30;\r\n    uint public _sellLqFee = 20;\r\n    uint public _sellMkFee = 10;\r\n    uint public totalSellFee = 60;\r\n\r\n    uint public _transFee = 50;\r\n    address transReceiver;\r\n    address lpReceiver;\r\n    address buyMkAddress;\r\n    address sellMkAddress;\r\n    address shareReceiver;\r\n    \r\n    address public tokenReceiver;\r\n    \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    mapping(address => bool) public ammPairs;\r\n\r\n    bool inSwapAndLiquify;\r\n    address public uniswapV2Pair;\r\n    address public token;   \r\n    address  holder;\r\n\r\n    struct Interest{\r\n        uint256 index;\r\n        uint256 period;\r\n        uint256 lastSendTime;\r\n        uint minAward;\r\n        uint award;\r\n        uint sendCount;\r\n        IERC20  token;\r\n        EnumerableSet.AddressSet tokenHolder;\r\n    }\r\n    address  fromAddress;\r\n    address  toAddress;\r\n    Interest internal lpInterest;\r\n\r\n    uint public lpAmount;\r\n    uint public lqAmount;\r\n    uint public txAmount = 100e9;\r\n    uint public buyMkAmount;\r\n    uint public sellMkAmount;\r\n    uint public mkTxAmount = 10e9;\r\n\r\n    uint public swapStartTime;\r\n    uint public addPriceTokenAmount = 1e18;\r\n\r\n    mapping (address => address) public recommerMapping;\r\n\r\n    mapping(address => address[]) internal childMapping;\r\n\r\n    struct SendData {\r\n\t\taddress fromAddress;\r\n\t\tbool status;\r\n    }\r\n\t\r\n\tmapping(address => mapping(address => SendData)) public waitInviter;\r\n\r\n    mapping(address => mapping(uint => uint)) public sellAmountPerDays;\r\n\r\n    uint public sellRatio = 10;\r\n\r\n    uint public lpHolderCondition = 1e5;\r\n\r\n    constructor (\r\n        address _route,\r\n        address _holder,\r\n        address _token) public {\r\n        \r\n        holder = _holder;\r\n        _tOwned[holder] = _tTotal;\r\n        token = _token;\r\n        _isExcludedFromFee[_holder] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(_route);\r\n         \r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), token);\r\n        \r\n        ammPairs[uniswapV2Pair] = true;\r\n\r\n        tokenReceiver = address(new TokenReceiver(token));\r\n\r\n        _owner = msg.sender;\r\n        lpInterest.token = IERC20(uniswapV2Pair);\r\n        lpInterest.lastSendTime = block.timestamp;\r\n        lpInterest.minAward = 1e3;\r\n        lpInterest.period = 14400;\r\n        lpInterest.sendCount = 100;\r\n        emit Transfer(address(0), _holder, _tTotal);\r\n    }\r\n\r\n\r\n    function setsellRatio(uint _sellRatio)external onlyOwner{\r\n        sellRatio = _sellRatio;\r\n    }\r\n\r\n     function setSwapStartTime(uint _swapStartTime)external onlyOwner{\r\n        swapStartTime = _swapStartTime;\r\n    }\r\n\r\n\r\n    function setInterset(uint _minAward,uint _period,uint _sendCount)external onlyOwner{\r\n        lpInterest.minAward = _minAward;\r\n        lpInterest.period = _period;\r\n        lpInterest.sendCount = _sendCount;\r\n    }\r\n\r\n    function setLpTxAmount(uint _txAmount,uint _mkTxAmount)external onlyOwner{\r\n        txAmount = _txAmount;\r\n        mkTxAmount = _mkTxAmount;\r\n    }\r\n\r\n    function setAddress(\r\n            address _transReceiver,\r\n            address _lpReceiver,\r\n            address _buyMkAddress,\r\n            address _sellMkAddress,\r\n            address _shareReceiver\r\n    )external onlyOwner{\r\n        transReceiver = _transReceiver;\r\n        lpReceiver = _lpReceiver;\r\n        buyMkAddress = _buyMkAddress;\r\n        sellMkAddress = _sellMkAddress;\r\n        shareReceiver = _shareReceiver;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function excludeFromFee(address[] memory accounts) public onlyOwner {\r\n        for( uint i = 0; i < accounts.length; i++ ){\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function _take(uint256 tValue,address from,address to) private {\r\n        _tOwned[to] = _tOwned[to].add(tValue);\r\n        emit Transfer(from, to, tValue);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    struct Param{\r\n        bool takeFee;\r\n        bool isTransfer;\r\n        bool isSwapBuy;\r\n        uint tTransferAmount;\r\n        uint tLp;\r\n        uint tLq;\r\n        uint tBuyMk;\r\n        uint tSellMk;\r\n        uint tShare;\r\n        uint tTrans;\r\n        address user;\r\n    }\r\n\r\n    function _takeShare(uint tShare,address from,address user) private {\r\n        address parent = recommerMapping[user];\r\n        if( parent != address(0) ){\r\n            _take(tShare,from,parent);\r\n        }else{\r\n             _take(tShare,from,shareReceiver);\r\n        }\r\n    }\r\n\t\r\n\tfunction _setInvite(address to, address from) private {\r\n\t\tif (recommerMapping[from] != to){\r\n\t\t\trecommerMapping[to] = from;\r\n            childMapping[from].push(to);\r\n\t\t}\r\n\t}\r\n\r\n\r\n    function _initParam(uint256 tAmount,Param memory param) private view  {\r\n        uint tFee = 0;\r\n        if( param.takeFee ){\r\n            if( param.isTransfer){\r\n                param.tTrans = tAmount * _transFee / 1000;\r\n                tFee = param.tTrans;\r\n            }else{\r\n                if( param.isSwapBuy){\r\n                    param.tShare = tAmount * _buyShareFee / 1000;\r\n                    param.tLp = tAmount * _buyLpFee / 1000;\r\n                    param.tBuyMk = tAmount * _buyMkFee / 1000;\r\n                    tFee = tAmount * totalBuyFee / 1000;\r\n                }else{\r\n                    param.tLp = tAmount * _sellLpFee / 1000;\r\n                    param.tLq = tAmount * _sellLqFee / 1000;\r\n                    param.tSellMk = tAmount * _sellMkFee / 1000;\r\n                    tFee = tAmount * totalSellFee / 1000;\r\n                }\r\n            }\r\n        }\r\n        param.tTransferAmount = tAmount.sub(tFee);\r\n    }\r\n\r\n    function _takeFee(Param memory param,address from)private {\r\n        if( param.tBuyMk > 0 ){\r\n            _take(param.tBuyMk, from, address(this));\r\n            buyMkAmount += param.tBuyMk;\r\n        }\r\n        if( param.tSellMk > 0 ){\r\n            _take(param.tSellMk, from, address(this));\r\n            sellMkAmount += param.tSellMk;\r\n        }\r\n        if( param.tLq > 0 ){\r\n            _take(param.tLq, from, address(this));\r\n            lqAmount = param.tLq;\r\n        }\r\n        if( param.tLp > 0 ){\r\n            _take(param.tLp, from, address(this));\r\n            lpAmount += param.tLp;\r\n        }\r\n        if( param.tShare > 0 ){\r\n            _takeShare(param.tShare, from, param.user);\r\n        }\r\n         if( param.tTrans > 0 ){\r\n            _take(param.tTrans, from, transReceiver);\r\n        }\r\n    }\r\n\r\n    function _isLiquidity(address from,address to)internal view returns(bool isAdd,bool isDel){\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint r0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n        if( ammPairs[to] ){\r\n            if( token0 != address(this) && bal0 > r0 ){\r\n                isAdd = bal0 - r0 > addPriceTokenAmount;\r\n            }\r\n        }\r\n        if( ammPairs[from] ){\r\n            if( token0 != address(this) && bal0 < r0 ){\r\n                isDel = r0 - bal0 > 0; \r\n            }\r\n        }\r\n    }\r\n\r\n    function _sellableAmount(address owner,uint zero)internal view returns(uint v){\r\n        uint selled = sellAmountPerDays[owner][zero];\r\n        uint total = balanceOf(owner) + selled;\r\n        uint sellable = total * sellRatio / 100;\r\n        if( sellable > selled) {\r\n            v = sellable.sub(selled);\r\n        } \r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n         if(\r\n            !from.isContract() \r\n            && !to.isContract() \r\n            && to != address(0) \r\n            && (recommerMapping[to] == address(0) \r\n                || recommerMapping[from] == address(0))){\r\n\r\n            SendData memory sendData = waitInviter[from][to];\r\n\t\t\tbool doubleCheck = false;\r\n\t\t\tif (sendData.fromAddress == to){\r\n\t\t\t\tif (sendData.status && recommerMapping[from] == address(0)){\r\n\t\t\t\t\t_setInvite(from, to);\r\n\t\t\t\t}\r\n\t\t\t\tdoubleCheck = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!doubleCheck && recommerMapping[to] == address(0)){\r\n\t\t\t\tSendData memory mySend = SendData(from, true);\r\n\t\t\t\twaitInviter[to][from] = mySend;\r\n\t\t\t}\r\n        }\r\n\r\n        bool isAddLiquidity;\r\n        bool isDelLiquidity;\r\n        ( isAddLiquidity, isDelLiquidity) = _isLiquidity(from,to);\r\n\r\n         if( block.timestamp < swapStartTime  ){\r\n            if(ammPairs[from] && !isDelLiquidity){\r\n                require(_isExcludedFromFee[to] ,\"swap no start\");\r\n            }\r\n\r\n            if(ammPairs[to] && !isAddLiquidity){\r\n                require(_isExcludedFromFee[from] ,\"swap no start\");\r\n            }\r\n        }\r\n\r\n\r\n        if( \r\n            from != address(this)\r\n            && !inSwapAndLiquify \r\n            && !isAddLiquidity\r\n            && !ammPairs[from] \r\n            &&  ammPairs[to]\r\n            && IERC20(uniswapV2Pair).totalSupply() > 10000 ){\r\n            \r\n            inSwapAndLiquify = true;\r\n\r\n            if( lqAmount >= txAmount && lqAmount <= balanceOf(address(this))){\r\n                uint v = lqAmount;\r\n                lqAmount = 0;\r\n                swapAndLiquify(v);\r\n            }\r\n\r\n            if( buyMkAmount >= mkTxAmount && buyMkAmount <= balanceOf(address(this))){\r\n                uint v = buyMkAmount;\r\n                buyMkAmount = 0;\r\n                swapTokensForEth(v,buyMkAddress);\r\n            }\r\n\r\n            if( sellMkAmount >= mkTxAmount && sellMkAmount <= balanceOf(address(this))){\r\n                uint v = sellMkAmount;\r\n                sellMkAmount = 0;\r\n                swapTokensForEth(v,sellMkAddress);\r\n            }\r\n\r\n            if( lpAmount >= txAmount && lpAmount <= balanceOf(address(this))){\r\n                uint v = lpAmount;\r\n                lpAmount = 0;\r\n                swapAndLpAward(v);\r\n            }\r\n            inSwapAndLiquify = false;\r\n        }\r\n\r\n        Param memory param;\r\n       \r\n        bool takeFee = true;\r\n\r\n        if( \r\n            _isExcludedFromFee[from] \r\n            || _isExcludedFromFee[to] \r\n            || isAddLiquidity \r\n            || isDelLiquidity  ){\r\n\r\n                takeFee = false;\r\n            }\r\n\r\n        param.takeFee = takeFee;\r\n\r\n        if( takeFee ){\r\n\r\n            bool isTrans = !ammPairs[from] && !ammPairs[to];\r\n            param.isTransfer = isTrans;\r\n\r\n            if( !isTrans){\r\n\r\n                if( ammPairs[from]){\r\n                    param.isSwapBuy = true;\r\n                    param.user = to;\r\n                }\r\n\r\n                if( ammPairs[to]){\r\n                    param.user = from;\r\n\r\n                    uint zero = block.timestamp / 1 days * 1 days;\r\n                    uint sellable = _sellableAmount(from, zero);\r\n\r\n                    require(sellable > 0 ,\"not sell quota\");\r\n                    amount = amount > sellable ? sellable : amount;\r\n\r\n                    sellAmountPerDays[from][zero] += amount;\r\n                }\r\n            }\r\n        }\r\n        _initParam(amount,param);\r\n        \r\n        _tokenTransfer(from,to,amount,param);\r\n\r\n        if (fromAddress == address(0)) fromAddress = from;\r\n        if (toAddress == address(0)) toAddress = to;\r\n        if ( !ammPairs[fromAddress] ) {\r\n            setEst(fromAddress);\r\n        }\r\n        if ( !ammPairs[toAddress] ) {\r\n            setEst(toAddress);\r\n        }\r\n        fromAddress = from;\r\n        toAddress = to;\r\n\r\n        if (\r\n\r\n            from != address(this) \r\n            && lpInterest.lastSendTime + lpInterest.period < block.timestamp \r\n            && lpInterest.award > 100000\r\n            && lpInterest.award <= IERC20(token).balanceOf(address(this))\r\n            && lpInterest.token.totalSupply() > 1e5 ) {\r\n\r\n            lpInterest.lastSendTime = block.timestamp;\r\n            processEst();\r\n        }\r\n    }\r\n\r\n     function swapAndLpAward(uint256 v) private  {    \r\n        swapTokensForEth(v,tokenReceiver); \r\n        uint256 newBalance = IERC20(token).balanceOf(tokenReceiver);\r\n        IERC20(token).transferFrom(tokenReceiver,address(this),newBalance);\r\n        lpInterest.award += newBalance;\r\n    }\r\n\r\n     \r\n    function swapAndLiquify(uint256 contractTokenBalance) private  {    \r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        swapTokensForEth(half,tokenReceiver); \r\n\r\n        uint256 newBalance = IERC20(token).balanceOf(tokenReceiver);\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount,address to) private {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = token;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        \r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        IERC20(token).transferFrom(tokenReceiver,address(this),ethAmount);\r\n\r\n        IERC20(token).approve(address(uniswapV2Router), ethAmount);\r\n\r\n        uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            token,\r\n            tokenAmount,\r\n            ethAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            lpReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount,Param memory param) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(param.tTransferAmount);\r\n         emit Transfer(sender, recipient, param.tTransferAmount);\r\n        if(param.takeFee){\r\n            _takeFee(param,sender);\r\n        }\r\n    }\r\n\r\n    function processEst() private {\r\n        uint256 shareholderCount = lpInterest.tokenHolder.length();\r\n\r\n        if (shareholderCount == 0) return;\r\n\r\n        uint256 nowbanance = lpInterest.award;\r\n        uint256 surplusAmount = nowbanance;\r\n        uint256 iterations = 0;\r\n        uint index = lpInterest.index;\r\n        uint sendedCount = 0;\r\n        uint sendCountLimit = lpInterest.sendCount;\r\n\r\n        uint ts = lpInterest.token.totalSupply();\r\n        while (sendedCount < sendCountLimit && iterations < shareholderCount) {\r\n            if (index >= shareholderCount) {\r\n                index = 0;\r\n            }\r\n\r\n            address shareholder = lpInterest.tokenHolder.at(index);\r\n            uint256 amount = nowbanance.mul(lpInterest.token.balanceOf(shareholder)).div(ts);\r\n\r\n            if (\r\n                IERC20(token).balanceOf(address(this)) < amount \r\n                ||  surplusAmount < amount ) break;\r\n\r\n            if (amount >= 1e3) {\r\n                surplusAmount -= amount;\r\n                IERC20(token).transfer(shareholder, amount);\r\n            }\r\n            sendedCount ++;\r\n            iterations++;\r\n            index ++;\r\n        }\r\n        lpInterest.index = index;\r\n        lpInterest.award = surplusAmount;\r\n    }\r\n\r\n    function setEst(address owner) private {\r\n       \r\n        if( lpInterest.tokenHolder.contains(owner) ){\r\n            if( lpInterest.token.balanceOf(owner) < lpHolderCondition ) {\r\n                lpInterest.tokenHolder.remove(owner);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if( lpInterest.token.balanceOf(owner) > lpHolderCondition ){\r\n            lpInterest.tokenHolder.add(owner);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyShareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLqFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addPriceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMkAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpHolderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lqAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recommerMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellAmountPerDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMkAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyMkAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellMkAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shareReceiver\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sendCount\",\"type\":\"uint256\"}],\"name\":\"setInterset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mkTxAmount\",\"type\":\"uint256\"}],\"name\":\"setLpTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapStartTime\",\"type\":\"uint256\"}],\"name\":\"setSwapStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellRatio\",\"type\":\"uint256\"}],\"name\":\"setsellRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"waitInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KOIToken", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000de90f52419520710730ec01fbebe34ed5e9135b60000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce82", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1a91befaee072064b4ea03edb08ffc7e4b8170911f99b9b70ced6c6c3daaf300"}