{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2024-01-02\r\n*/\r\n\r\npragma solidity >=0.6.8;\r\ninterface ERC20 {\r\n    function transfer(address receiver, uint amount) external;\r\n    function transferFrom(address _from, address _to, uint256 _value)external;\r\n    function balanceOf(address receiver)external view  returns(uint256);\r\n    function mint(address account, uint amount)external;\r\n    function approve(address spender, uint amount) external returns (bool);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\ncontract ALITA is Ownable{\r\n    // ERC20\r\n\r\n    address public makert;\r\n    //address public ALITA=0x33679898CEb9DC930024dE84E7339d403191d8f6;\r\n    address public WBNB=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public USDT=0x55d398326f99059fF775485246999027B3197955;\r\n    mapping (address=>bool)public list;\r\n    mapping (address=>uint)public PriceUSDT;\r\n    mapping (address=>uint)public PriceBNB;\r\n    mapping (address=>uint)public PriceALITA;\r\n    uint public start;\r\n\r\n    // ================= Initial value ===============\r\n\r\n    constructor () {\r\n        makert=msg.sender;\r\n        start=block.timestamp;\r\n    }\r\n    receive() external payable{ \r\n    }\r\n    function setTokenpRICE(address token,uint b,uint c,uint d)public onlyOwner{\r\n      PriceUSDT[token]=b;\r\n      PriceBNB[token]=c;\r\n      PriceALITA[token]=d;\r\n    }\r\n    function setTokenList(address token,bool b)public onlyOwner{\r\n      list[token]=b;\r\n    }\r\n    function setMakert(address to)public  onlyOwner{\r\n        makert=to;\r\n    }\r\n    function setToken(address token,address to,uint _token)public onlyOwner{\r\n      ERC20(token).transfer(to,_token);\r\n    }\r\n    function setBNB(uint _token,address to)public onlyOwner{\r\n      payable(to).transfer(_token);\r\n    }\r\n    function appToken(address token)public onlyOwner{\r\n        ERC20(token).approve(address(0x10ED43C718714eb63d5aA57B78B54704E256024E), 2 ** 256 - 1);\r\n    }\r\n    function swap(address token,uint amount)public  returns (uint) {\r\n        require(list[msg.sender]);\r\n        if(block.timestamp > start + 300){\r\n            //usdt\r\n            PriceUSDT[token]=getTokenPriceUsdt(token,WBNB,USDT,1 ether);\r\n            start=block.timestamp;\r\n        }\r\n        require(PriceUSDT[token] > 0 && amount >0);\r\n        uint coin= amount * 1 ether / PriceUSDT[token];\r\n        ERC20(token).transfer(msg.sender,coin);\r\n        uint vav=getTokenPriceUsdt(USDT,WBNB,token,amount /2)*90/100;\r\n        swapTokenForTokens(USDT,WBNB,token,address(this),amount /2,vav);\r\n        return coin;\r\n    }\r\n    function swapBNB(address token,uint amount)public  returns (uint) {\r\n        require(list[msg.sender]);\r\n        if(block.timestamp > start + 300){\r\n            //bnb\r\n            PriceBNB[token]=getTokenPrice(token,WBNB,1 ether);\r\n            start=block.timestamp;\r\n        }\r\n        require(PriceBNB[token] > 0 && amount >0);\r\n        uint coin= amount * 1 ether / PriceBNB[token];\r\n        ERC20(token).transfer(msg.sender,coin);\r\n        uint vav=getTokenPrice(WBNB,token,amount /2)*90/100;\r\n        swapETHForTokens(amount /2,token,address(this),vav);\r\n        return coin;\r\n    }\r\n    // ================= Pair transfer ===============\r\n   function swapETHForTokens(uint256 ethAmount,address token,address to,uint va) internal {\r\n            IRouter pancakeRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n            // generate the pancake pair path of token -> weth\r\n            address[] memory path = new address[](2);\r\n            path[0] = pancakeRouter.WETH();\r\n            path[1] = token;\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\r\n            va, // accept any amount of BNB\r\n            path,\r\n            to,\r\n            block.timestamp + 360\r\n        );\r\n           \r\n    }\r\n    function swapTokenForTokens(address token,address token1,address token2,address to,uint amount0In,uint va) internal {\r\n        IRouter pancakeRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n           address[] memory path = new address[](3);\r\n           path[0] = token;\r\n           path[1] = token1;\r\n           path[2] = token2; \r\n           pancakeRouter.swapExactTokensForTokens(amount0In,va,path,to,block.timestamp+360);\r\n\r\n    }\r\n    function swapTokenForToken(address token,address token1,address to,uint amount0In) internal {\r\n        IRouter pancakeRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n           address[] memory path = new address[](2);\r\n           path[0] = token;\r\n           path[1] = token1; \r\n           pancakeRouter.swapExactTokensForTokens(amount0In,0,path,to,block.timestamp+360);\r\n\r\n    }\r\n    function getTokenPrice(address token,address token1,uint value) view public   returns(uint){\r\n        IRouter pancakeRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n           address[] memory routePath = new address[](2);\r\n           routePath[0] = token;\r\n           routePath[1] = token1;\r\n           return pancakeRouter.getAmountsOut(value,routePath)[1];    \r\n    }\r\n    function getTokenPriceUsdt(address token,address token1,address token2,uint value) view public   returns(uint){\r\n        IRouter pancakeRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n           address[] memory routePath = new address[](3);\r\n           routePath[0] = token;\r\n           routePath[1] = token1;\r\n           routePath[2] = token2;\r\n           return pancakeRouter.getAmountsOut(value,routePath)[2];    \r\n    }\r\n    function getTokenPriceToken(address token,uint value) view public   returns(uint){\r\n        uint coin= value * 1 ether / PriceUSDT[token];\r\n           return coin;    \r\n    }\r\n    function getTokenPriceTokenBNB(address token,uint value) view public   returns(uint){\r\n        uint coin= value * 1 ether / PriceBNB[token];\r\n           return coin;    \r\n    }\r\n    function getTokenPriceTokenALITA(address token,uint value) view public   returns(uint){\r\n        uint coin= value * 1 ether / PriceALITA[token];\r\n           return coin; \r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PriceALITA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PriceUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"appToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceTokenALITA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceTokenBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makert\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setMakert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setTokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setTokenpRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ALITA", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://17aede765273688a79ac5a7d33e5d064b450c87209f0dd3222c373de34f54e68"}