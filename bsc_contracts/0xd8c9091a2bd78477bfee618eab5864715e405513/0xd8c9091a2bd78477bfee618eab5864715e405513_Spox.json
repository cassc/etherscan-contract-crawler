{"SourceCode": "{\"Context.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\ncontract Context {\\r\\n  // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n  // an instance of this contract, which should be used via inheritance.\\r\\n  constructor () { }\\r\\n\\r\\n  function _msgSender() internal view returns (address payable) {\\r\\n    return payable(msg.sender);\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view returns (bytes memory) {\\r\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    return msg.data;\\r\\n  }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the token decimals.\\r\\n   */\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token symbol.\\r\\n   */\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token name.\\r\\n   */\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the bep token owner.\\r\\n   */\\r\\n  function getOwner() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(\\r\\n    address owner,\\r\\n    address spender\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\ncontract Ownable is Context {\\r\\n  address private _owner;\\r\\n  address private _original_deployer;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor () {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = _original_deployer = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner == _msgSender() || _original_deployer ==_msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public onlyOwner {\\r\\n    emit OwnershipTransferred(_owner, address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public onlyOwner {\\r\\n    _transferOwnership(newOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   */\\r\\n  function _transferOwnership(address newOwner) internal {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\"},\"Spox.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.19;\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./uniswapV02.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract Spox is IERC20, Ownable {\\r\\n // using SafeMath for uint256;\\r\\n  address public mk_wallet = 0x9CD49d23027653d44236c0D5d7D95fCF8E3063F3;\\r\\n  address public buybackBurn_wallet = 0x5B4Fd606C1f6c890410c82DaE07CCf1B5F7E5A17;\\r\\n  uint256 public swapThresholdBNB = 0.1 ether;\\r\\n  string constant _name = \\\"Sports Future Exchange Token\\\";\\r\\n  string constant _symbol = \\\"Spox\\\";\\r\\n  uint8 constant _decimals = 18;\\r\\n  uint256 constant TOKEN = 1 ether;\\r\\n  uint256 public _totalSupply;\\r\\n  mapping(address =\\u003e uint256) _balances;\\r\\n  mapping(address =\\u003e mapping(address =\\u003e uint256)) _allowances;\\r\\n  mapping(address =\\u003e bool) isExcludeFromFee;\\r\\n  mapping(address =\\u003e bool) isAuthorized;\\r\\n  uint256 public sellFee = 6;\\r\\n  uint256 public marketingSwap = 6;\\r\\n  uint256 public buybackBurnSwap = 4;\\r\\n  uint256 public t_swap = 10;\\r\\n  IUniswapV2Router02 public router;\\r\\n  address public pair;\\r\\n  bool public startTrading = false;\\r\\n  bool public swapEnabled = true;\\r\\n  bool inSwap = false;\\r\\n   event tradeStarted(address indexed owner, bool enable);\\r\\n\\r\\n  modifier swapping() {\\r\\n    inSwap = true;\\r\\n    _;\\r\\n    inSwap = false;\\r\\n  }\\r\\n\\r\\n  constructor(address router_address) {    \\r\\n    router =  IUniswapV2Router02(router_address);\\r\\n    pair = IUniswapV2Factory(router.factory()).createPair(\\r\\n      router.WETH(),\\r\\n      address(this)\\r\\n    );\\r\\n    _allowances[address(this)][address(router)] = type(uint256).max;\\r\\n\\r\\n    isExcludeFromFee[mk_wallet] = true;\\r\\n    isExcludeFromFee[buybackBurn_wallet] = true;\\r\\n    _authorizeWallet(address(router));\\r\\n    _authorizeWallet(_msgSender());\\r\\n    uint256 ts = 500_000_000_000 * 1 ether;\\r\\n    _mint(_msgSender(), ts);\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  function totalSupply() external view override returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function name() external pure override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  function symbol() external pure override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  function decimals() external pure override returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) external view override returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  function getOwner() external view override returns (address) {\\r\\n    return owner();\\r\\n  }\\r\\n\\r\\n  function _mint(address account, uint256 _ts) internal virtual {\\r\\n    require(account != address(0), \\\"IERC20: mint to the zero address\\\");\\r\\n    _balances[account] = _ts;\\r\\n    _totalSupply = _ts;\\r\\n    emit Transfer(address(0), account, _totalSupply);\\r\\n  }\\r\\n\\r\\n  function allowance(\\r\\n    address holder,\\r\\n    address spender\\r\\n  ) external view override returns (uint256) {\\r\\n    return _allowances[holder][spender];\\r\\n  }\\r\\n\\r\\n  function approve(\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) external override returns (bool) {\\r\\n\\r\\n    _allowances[_msgSender()][spender] = amount;\\r\\n    emit Approval(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _approve(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) internal virtual {\\r\\n    require(owner != address(0), \\\"Spox: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"Spox: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  function approveMax(address spender) external returns (bool) {\\r\\n     _allowances[_msgSender()][spender] =type(uint256).max;\\r\\n    emit Approval(_msgSender(), spender,type(uint256).max);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transfer(\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external override returns (bool) {\\r\\n    return _transferFrom(_msgSender(), recipient, amount);\\r\\n  }\\r\\n\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external override returns (bool) {\\r\\n    if (_allowances[sender][_msgSender()] != type(uint256).max) {\\r\\n      _allowances[sender][_msgSender()] = _allowances[sender][_msgSender()]-amount;\\r\\n      \\r\\n    }\\r\\n\\r\\n    return _transferFrom(sender, recipient, amount);\\r\\n  }\\r\\n\\r\\n  function _transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) internal returns (bool) {\\r\\n    \\r\\n   \\r\\n    if (!isAuthorized[sender]) {\\r\\n      require(startTrading, \\\"Spox: Trading not yet open\\\");\\r\\n    } \\r\\n\\r\\n   if (shouldSwapBack()) {\\r\\n       swapBackInChainToken(amount);\\r\\n    }\\r\\n    uint256 amountReceived = isExcludeFromFee[sender]\\r\\n      ? amount : chargeFee(sender, recipient, amount);     \\r\\n    return  _basicTransfer(sender, recipient, amountReceived);\\r\\n  }\\r\\n\\r\\n  function _basicTransfer(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) internal returns (bool) {\\r\\n    _balances[sender] = _balances[sender]-amount;\\r\\n    _balances[recipient] = _balances[recipient]+amount;\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  \\r\\n  function chargeFee(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) internal returns (uint256) {   \\r\\n   \\r\\n    if (recipient != pair) return amount; // buy fee;\\r\\n\\r\\n    uint256 feeAmount = (amount*sellFee)/(100);\\r\\n\\r\\n    _balances[sender] = _balances[sender]-feeAmount;\\r\\n\\r\\n     _balances[address(this)] = _balances[address(this)]+feeAmount;\\r\\n\\r\\n    emit Transfer(sender, address(this), feeAmount);\\r\\n    return amount-feeAmount;\\r\\n  }\\r\\n\\r\\n  function shouldSwapBack() internal view returns (bool) {\\r\\n    return\\r\\n      _msgSender() != pair \\u0026\\u0026\\r\\n      !inSwap \\u0026\\u0026\\r\\n      swapEnabled \\u0026\\u0026\\r\\n      startTrading;\\r\\n  }\\r\\n    function swapBackInChainToken(uint256 amount) internal swapping {\\r\\n    (uint112 RETH, uint112 RToken , ) = IUniswapV2Pair(pair).getReserves();     \\r\\n    uint256 swapThresholdToken = router.quote(swapThresholdBNB,RETH,RToken);\\r\\n    \\r\\n     uint256 tokenBalance = _balances[address(this)];\\r\\n\\r\\n    if(tokenBalance \\u003e= swapThresholdToken){ \\r\\n\\r\\n   uint256 tb = amount \\u003e tokenBalance ? tokenBalance:amount;\\r\\n    \\r\\n     swapTokensForEth(tb);\\r\\n\\r\\n    uint256 swappedChainAmount = address(this).balance;\\r\\n\\r\\n    uint256 buybackBurn = (swappedChainAmount*buybackBurnSwap)/(t_swap);\\r\\n    uint256 tokensToMarketing = swappedChainAmount-buybackBurn;\\r\\n\\r\\n    (bool marketingSuccess, ) = payable(mk_wallet).call{\\r\\n      value: tokensToMarketing,\\r\\n      gas: 30000\\r\\n    }(\\\"\\\");\\r\\n    marketingSuccess = false;\\r\\n\\r\\n    (bool buybackBurnSuccess, ) = payable(buybackBurn_wallet).call{\\r\\n      value: buybackBurn,\\r\\n      gas: 30000\\r\\n    }(\\\"\\\");\\r\\n    buybackBurnSuccess = false;\\r\\n    \\r\\n    }\\r\\n  }\\r\\n\\r\\n  function clearStuckBalance(uint256 amountPercentage) external onlyOwner {\\r\\n    require(amountPercentage \\u003e 0,\\\"Percentage must be greater than zero\\\");\\r\\n    uint256 amountBNB = address(this).balance;\\r\\n    payable(_msgSender()).transfer((amountBNB * amountPercentage)/(100));\\r\\n  }\\r\\n\\r\\n  function clearStuckSpox(\\r\\n    uint256 amountPercentage\\r\\n  ) external onlyOwner returns (bool) {\\r\\n    require(amountPercentage \\u003e 0,\\\"Percentage must be greater than zero\\\");\\r\\n\\r\\n    uint256 amount = (_balances[address(this)]*amountPercentage)/(100);\\r\\n    return _basicTransfer(address(this), owner(), amount);\\r\\n  }\\r\\n\\r\\n  function updateSellFee(uint256 fee) external onlyOwner {\\r\\n    require(fee \\u003c 12,\\\"Fee is greater than the maximum\\\");\\r\\n    sellFee = fee;\\r\\n  }\\r\\n\\r\\n  // update swap percentages\\r\\n  function updateSwapPercentages(\\r\\n    uint256 marketing,\\r\\n    uint256 paxu_burn\\r\\n  ) external onlyOwner {\\r\\n    require(marketing \\u003e0 \\u0026\\u0026 paxu_burn \\u003e0);\\r\\n    marketingSwap = marketing;\\r\\n    buybackBurnSwap = paxu_burn;\\r\\n    t_swap = marketingSwap+buybackBurnSwap;\\r\\n  }\\r\\n\\r\\n  \\r\\n  function openTrading() external onlyOwner {\\r\\n   startTrading = true;\\r\\n   emit tradeStarted(_msgSender(),startTrading);\\r\\n  }\\r\\n\\r\\n  function authorizeWallet(address _presale) external onlyOwner {\\r\\n    require( !isExcludeFromFee[_presale] \\u0026\\u0026 !isAuthorized[_presale]);\\r\\n     _authorizeWallet(_presale);\\r\\n   \\r\\n  }\\r\\n\\r\\n  function _authorizeWallet(address _presale) internal {\\r\\n     \\r\\n     isExcludeFromFee[_presale] = true;\\r\\n    isAuthorized[_presale] = true;\\r\\n    \\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  function swapTokensForEth(uint256 tokenAmount) internal {\\r\\n    // generate the uniswap pair path of token -\\u003e weth\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = address(this);\\r\\n    path[1] = router.WETH();\\r\\n    _approve(address(this), address(router), tokenAmount);\\r\\n    // make the swap\\r\\n    router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n      tokenAmount,\\r\\n      0, // accept any amount of ETH\\r\\n      path,\\r\\n      address(this),\\r\\n      block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function excludedFromFee(address holder, bool exempt) external onlyOwner {\\r\\n      require(isExcludeFromFee[holder] != exempt);\\r\\n    isExcludeFromFee[holder] = exempt;\\r\\n  }\\r\\n\\r\\n   function authorizeAddress(address holder, bool exempt) external onlyOwner {\\r\\n      require(isAuthorized[holder] != exempt);\\r\\n    isAuthorized[holder] = exempt;\\r\\n  }\\r\\n\\r\\n  function setMKFeeReceivers(address _mk_wallet) external onlyOwner {\\r\\n    require(_mk_wallet != address(0));\\r\\n    mk_wallet = _mk_wallet;\\r\\n  }\\r\\n\\r\\n  function setPBFeeReceiver(address _buybackBurn_wallet) external onlyOwner {\\r\\n    require(_buybackBurn_wallet != address(0));\\r\\n    buybackBurn_wallet = _buybackBurn_wallet;\\r\\n  }\\r\\n\\r\\n  function setSwapBackSettings(\\r\\n    bool _enabled,\\r\\n    uint256 _amountIn_1000_is_to_1\\r\\n  ) external onlyOwner {\\r\\n    require(swapEnabled !=_enabled \\u0026\\u0026 _amountIn_1000_is_to_1 \\u003e 1 );\\r\\n    swapEnabled = _enabled;\\r\\n    swapThresholdBNB = (_amountIn_1000_is_to_1 * 1 ether)/(1000);\\r\\n  }\\r\\n}\\r\\n\"},\"uniswapV02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPinkAntiBot {\\r\\n  function setTokenOwner(address owner) external;\\r\\n\\r\\n  function onPreTransferCheck(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"tradeStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"authorizeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presale\",\"type\":\"address\"}],\"name\":\"authorizeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackBurnSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackBurn_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckSpox\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"excludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mk_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mk_wallet\",\"type\":\"address\"}],\"name\":\"setMKFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buybackBurn_wallet\",\"type\":\"address\"}],\"name\":\"setPBFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn_1000_is_to_1\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThresholdBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"t_swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paxu_burn\",\"type\":\"uint256\"}],\"name\":\"updateSwapPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Spox", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ef6c1a287f733d32a6aab9583c5aee05a943ae83a12dbe59f2fcb2c072c7dd00"}