{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AaltoToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity 0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/IERC721.sol\\\";\\nimport \\\"./interfaces/IAaltoToken.sol\\\";\\n\\nimport \\\"./libs/SafeMathInt.sol\\\";\\nimport \\\"./ERC20Detailed.sol\\\";\\nimport \\\"./ProtocolFees.sol\\\";\\nimport \\\"./structs.sol\\\";\\n\\n/// @title Rebasing/Elastic supply token contract.\\n/// @author 0xBriz\\n/// @notice Modified flow of what started with Titano and expanded on by Safuu, Libero, etc.\\ncontract AaltoToken is\\n    ERC20Detailed,\\n    ProtocolFees,\\n    ReentrancyGuard,\\n    IAaltoToken\\n{\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n\\n    bool public initialDistributionFinished = false;\\n\\n    uint256 private constant MAX_UINT256 = ~uint256(0);\\n\\n    /* ================== TOKEN INFO =================== */\\n\\n    uint256 private constant DECIMALS = 18;\\n\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 550000 * 10**DECIMALS; // 550,000\\n\\n    uint256 private constant MAX_SUPPLY = 55 * 10**8 * 10**DECIMALS; // 5,550,000,000\\n\\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\\n    // Use the highest value that fits in a uint256 for max granularity.\\n    uint256 private constant TOTAL_GONS =\\n        MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n    // underscore to avoid clashing with base class\\n    uint256 private _totalSupply;\\n\\n    // The divisor or multiplier used for math operations.\\n    // Is set during each rebase as needed (= TOTAL_GONS / totalSupply)\\n    uint256 private _gonsPerFragment;\\n\\n    // The threshold used to determine when we should be swapping the\\n    // current contract balance to native/stable. See `shouldSwapBack`.\\n    // Can be reset by admin in `setSwapBackSettings`.\\n    uint256 private gonSwapThreshold = (TOTAL_GONS * 10) / 10000;\\n\\n    mapping(address => uint256) private _gonBalances;\\n\\n    mapping(address => uint256) private _lockedBalances;\\n\\n    // Mapping of contract approvals\\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\\n\\n    /* =================== BURN ADDRESSES =================== */\\n\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    /* ============== REBASE/LP ITEMS =============== */\\n\\n    uint256 private constant MAX_REBASE_FREQUENCY = 1800;\\n\\n    // Adds on to block timestamp during rebase to set `nextRebase` time.\\n    // nextRebase = block.timestamp + rebaseFrequency\\n    uint256 public rebaseFrequencySeconds = 900;\\n\\n    uint256 public nextRebase = block.timestamp + 31536000;\\n\\n    // 0.0239% per 15 minute rebase cycle\\n    uint256 public rewardYield = 239;\\n    uint256 public rewardYieldDenominator = 1000000;\\n\\n    bool public autoRebase = true;\\n\\n    // Cap on amount one sell transfer can be\\n    // Able to be updated by admin. Initial 10,000\\n    // This does not prevent multiple sells back to back, etc. though\\n    uint256 public maxSellTransactionAmount = 10000 * 10**18;\\n\\n    // Used to determine whether current liquidity is over/under a target threshold\\n    uint256 public targetLiquidity = 50;\\n    uint256 public targetLiquidityDenominator = 100;\\n\\n    // Determines whether swap backs are to native or stable\\n    bool public isLiquidityInNative = true;\\n\\n    bool public swapEnabled = true;\\n\\n    /* ================ CORE CONTRACTS ================ */\\n\\n    // Array of the core(native/stable) pairs\\n    address[] public corePairs;\\n\\n    // Mapping of the `corePairs` to simplify checks and reduce duplication\\n    mapping(address => bool) public isCorePair;\\n\\n    // Native LP pairing for this token\\n    IUniswapV2Pair public immutable nativeLiquidityPair;\\n\\n    // Stable coin based pairing for this token\\n    IUniswapV2Pair public immutable stableLiquidityPair;\\n\\n    address public immutable stableCoinAddress;\\n\\n    // Address of NFT contract that provides incentives/benefits for owners\\n    address public nftContractAddress;\\n\\n    // DEX router used for swaps and liquidity\\n    IUniswapV2Router02 public router;\\n\\n    // The staking token contract\\n    IStaking public staking;\\n\\n    bool public stakingEnabled = false;\\n\\n    constructor(\\n        address _routerAddress,\\n        address _stableCoinAddress,\\n        address _treasuryFeeReceiver,\\n        address _insuranceFeeReceiver,\\n        address _nftFeeReceiver,\\n        address _liquityTokensReceiver,\\n        address _stakingContractAddress\\n    )\\n        ERC20Detailed(\\\"Aalto Protocol\\\", \\\"AALTO\\\", uint8(DECIMALS))\\n        ProtocolFees(\\n            _treasuryFeeReceiver,\\n            _insuranceFeeReceiver,\\n            _nftFeeReceiver,\\n            _stakingContractAddress,\\n            _liquityTokensReceiver\\n        )\\n    {\\n        require(_routerAddress != address(0), \\\"AALTO: 0x0 _routerAddress\\\");\\n        require(\\n            _stableCoinAddress != address(0),\\n            \\\"AALTO: 0x0 _stableCoinAddress\\\"\\n        );\\n\\n        // Staking currently possible zero address\\n        if (_stakingContractAddress != address(0)) {\\n            staking = IStaking(_stakingContractAddress);\\n            stakingEnabled = true;\\n            isFeeExempt[_stakingContractAddress] = true;\\n        }\\n\\n        router = IUniswapV2Router02(_routerAddress);\\n\\n        // Create core native pairing\\n        address _nativeLiquidityPairAddress = IUniswapV2Factory(\\n            router.factory()\\n        ).createPair(address(this), router.WETH());\\n\\n        nativeLiquidityPair = IUniswapV2Pair(_nativeLiquidityPairAddress);\\n\\n        // Create stable pair\\n        address _stableLiquidityPairAddress = IUniswapV2Factory(\\n            router.factory()\\n        ).createPair(address(this), _stableCoinAddress);\\n\\n        stableCoinAddress = _stableCoinAddress;\\n        stableLiquidityPair = IUniswapV2Pair(_stableLiquidityPairAddress);\\n\\n        // Set the two new pairs used as reference for liquidity backing\\n        setAutomatedMarketMakerPair(_nativeLiquidityPairAddress, true);\\n        setAutomatedMarketMakerPair(_stableLiquidityPairAddress, true);\\n\\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n        _gonBalances[msg.sender] = TOTAL_GONS;\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n\\n        // Assign needed approvals to external contracts and self for stable coin\\n        IERC20(_stableCoinAddress).approve(address(router), uint256(-1));\\n        IERC20(_stableCoinAddress).approve(\\n            address(_stableLiquidityPairAddress),\\n            uint256(-1)\\n        );\\n        IERC20(_stableCoinAddress).approve(address(this), uint256(-1));\\n\\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\\n        _allowedFragments[address(this)][_nativeLiquidityPairAddress] = uint256(\\n            -1\\n        );\\n        _allowedFragments[address(this)][address(this)] = uint256(-1);\\n        _allowedFragments[address(this)][_stableLiquidityPairAddress] = uint256(\\n            -1\\n        );\\n\\n        emit Transfer(address(0x0), _treasuryFeeReceiver, _totalSupply);\\n    }\\n\\n    // Accepting donations\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Determines if a rebase should take place.\\n     * In this implementation it is simply a check for whether enough time has passed.\\n     */\\n    function shouldRebase() internal view returns (bool) {\\n        return nextRebase <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Utility function to determine if a transfer should have fees taken.\\n     */\\n    function shouldTakeFee(address _sender, address _recipient)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // If an address on either side of the transfer is exempt,\\n        // then the complete transfer is exempt.\\n        if (isFeeExempt[_sender] || isFeeExempt[_recipient]) {\\n            return false;\\n        } else if (feesOnNormalTransfers) {\\n            // This can be toggled by admins\\n            return true;\\n        } else {\\n            // If passing through the pair in any way. Buy/Sell\\n            return (isCorePair[_sender] || isCorePair[_recipient]);\\n        }\\n    }\\n\\n    function _rebase() private {\\n        if (!inSwap) {\\n            coreRebase(getSupplyDelta());\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs the core rebasing mechanism for the token supply.\\n     * Updates the total supply based on circulating supply and reward yeild (provided through supply delta).\\n     * Updates `_gonsPerFragment` according to new total supply and sets next rebase time.\\n     */\\n    function coreRebase(int256 _supplyDelta) private returns (uint256) {\\n        uint256 epoch = block.timestamp;\\n\\n        if (_supplyDelta == 0) {\\n            emit LogRebase(epoch, _totalSupply);\\n            return _totalSupply;\\n        }\\n\\n        if (_supplyDelta < 0) {\\n            _totalSupply = _totalSupply.sub(uint256(-_supplyDelta));\\n        } else {\\n            _totalSupply = _totalSupply.add(uint256(_supplyDelta));\\n        }\\n\\n        if (_totalSupply > MAX_SUPPLY) {\\n            _totalSupply = MAX_SUPPLY;\\n        }\\n\\n        // Setting this updates the base/divisor/multiplier used for important calculations across the contract.\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n\\n        nextRebase = epoch + rebaseFrequencySeconds;\\n\\n        emit LogRebase(epoch, _totalSupply);\\n\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Just a utility to run needed checks for `_transferFrom`.\\n     * Code looked cluttered/harder to read in that function\\n     */\\n    function _canTransfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) private view returns (bool) {\\n        // Avoid math overflow/underflow issues\\n        require(\\n            balanceOf(_sender) >= _amount,\\n            \\\"AALTO: transfer amount exceeds balance\\\"\\n        );\\n\\n        bool excludedAccount = isFeeExempt[_sender] || isFeeExempt[_recipient];\\n        // fee exempt accounts are able to perform setup operations/transfers until distribution is complete\\n        require(\\n            initialDistributionFinished || excludedAccount,\\n            \\\"AALTO: Trading not started yet\\\"\\n        );\\n\\n        // If someone is transferring into a pair(_recipient = one of our pair addresses), then they are selling\\n        if (isCorePair[_recipient] && !excludedAccount) {\\n            require(\\n                _amount <= maxSellTransactionAmount,\\n                \\\"AALTO: Exceeds max sell amount\\\"\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Runs checks to determine whether swapping to native/stable should take place.\\n     * The current contract balance (of itself), is swapped into the native or stable token.\\n     * Native or stable is determined by `isLiquidityInNative` in `swapBack()`\\n     */\\n    function shouldSwapBack() internal view returns (bool) {\\n        return\\n            !isCorePair[msg.sender] &&\\n            !inSwap &&\\n            swapEnabled &&\\n            totalBuyFee.add(totalSellFee) > 0 &&\\n            _gonBalances[address(this)] >= gonSwapThreshold;\\n    }\\n\\n    /**\\n     * @dev Reduces the amount of a transfer based on being a buy or sell transfer.\\n     * Needed checks should happen before calling this function.\\n     * Function only determines whether a buy or sell is in progress and reduces amount accordingly.\\n     * Contracts own internal balance is updated by the fee amount taken.\\n     */\\n    function takeFee(\\n        address _sender,\\n        address _recipient,\\n        uint256 _gonAmount\\n    ) internal returns (uint256) {\\n        // If _recipient is one of our pairs then someone is selling the token\\n        uint256 realFee = isCorePair[_recipient] ? totalSellFee : totalBuyFee;\\n\\n        // _gonAmount is already multiplied by _gonPerFragment at this point\\n        uint256 feeAmount = _gonAmount.mul(realFee).div(feeDenominator);\\n\\n        // Update balance of contract itself\\n        // Contract accumulates fee amounts until threshold is hit to distribute\\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\\n            feeAmount\\n        );\\n\\n        // format feeAmount back for outside viewing\\n        emit Transfer(_sender, address(this), feeAmount.div(_gonsPerFragment));\\n\\n        return _gonAmount.sub(feeAmount);\\n    }\\n\\n    /* ======================== TOKEN FUNCTIONS ========================= */\\n\\n    /**\\n     * @dev Calculates the current change between circulating supply and reward yield.\\n     * Changes to token supply through burns and previous rebase changes to `_gonsPerFragment`,\\n     * will cause this delta to be always changing.\\n     * This value determines the amount the total supply will be changed by.\\n     * And by association determine the new value for `_gonsPerFragment`.\\n     */\\n    function getSupplyDelta() public view returns (int256) {\\n        uint256 circulatingSupply = getCirculatingSupply();\\n        int256 supplyDelta = int256(\\n            circulatingSupply.mul(rewardYield).div(rewardYieldDenominator)\\n        );\\n\\n        return supplyDelta;\\n    }\\n\\n    /**\\n     * @dev Calculates the current supply in circulation.\\n     * The accounting for this is different than traditional ERC20\\n     * due to the nature of the elastic supply and rebasing.\\n     * Circulating supply is influenced by tokens burned and current value of `_gonsPerFragment`.\\n     */\\n    function getCirculatingSupply() public view returns (uint256) {\\n        return\\n            (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\\n                _gonsPerFragment\\n            );\\n    }\\n\\n    /**\\n     * @dev Intercepts typical transfers to perform protocol operations.\\n     * Delegates taking of fees and triggering a rebase as needed.\\n     */\\n    function _transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal notBlacklisted(msg.sender) returns (bool) {\\n        require(\\n            _canTransfer(_sender, _recipient, _amount),\\n            \\\"Aalto: Transfer failed\\\"\\n        );\\n\\n        // Skip rest of process and basic transfer if we initiated this transfer\\n        if (inSwap) {\\n            return _basicTransfer(_sender, _recipient, _amount);\\n        }\\n\\n        // Put the amount into proper formatting for our maths with `_gonsPerFragment`\\n        uint256 gonAmount = _amount.mul(_gonsPerFragment);\\n\\n        if (shouldSwapBack()) {\\n            swapBack();\\n        }\\n\\n        _gonBalances[_sender] = _gonBalances[_sender].sub(gonAmount);\\n\\n        // Deduct fees as needed before updating receiver balance\\n        uint256 gonAmountReceived = shouldTakeFee(_sender, _recipient)\\n            ? takeFee(_sender, _recipient, gonAmount)\\n            : gonAmount;\\n\\n        _gonBalances[_recipient] = _gonBalances[_recipient].add(\\n            gonAmountReceived\\n        );\\n\\n        emit Transfer(\\n            _sender,\\n            _recipient,\\n            // div(_gonsPerFragment) to place back in outside format\\n            gonAmountReceived.div(_gonsPerFragment)\\n        );\\n\\n        // shouldRebase = nextRebase <= block.timestamp\\n        if (shouldRebase() && autoRebase) {\\n            _rebase();\\n\\n            // If one of our pairs was not involved in this transfer,\\n            // then update the pairs last cumulative prices and blockTimestampLast\\n            if (!isCorePair[_sender] && !isCorePair[_recipient]) {\\n                manualSyncPairs();\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev The external facing transfer function.\\n     * Simply delegates the process to internal `_transferFrom`.\\n     */\\n    function transfer(address _to, uint256 _amount)\\n        external\\n        override\\n        validRecipient(_to)\\n        returns (bool)\\n    {\\n        _transferFrom(msg.sender, _to, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Performs a simple updating of balances.\\n     * This is only used when transfers are happening as the result\\n     * of swap operations we are performing internally.\\n     */\\n    function _basicTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        uint256 gonAmount = _amount.mul(_gonsPerFragment);\\n        _gonBalances[_from] = _gonBalances[_from].sub(gonAmount);\\n        _gonBalances[_to] = _gonBalances[_to].add(gonAmount);\\n\\n        emit Transfer(_from, _to, _amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev The external facing transferFrom function.\\n     * Only checks allowances and then delegates the rest of process to internal `_transferFrom`.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external override validRecipient(_to) returns (bool) {\\n        if (_allowedFragments[_from][msg.sender] != uint256(-1)) {\\n            _allowedFragments[_from][msg.sender] = _allowedFragments[_from][\\n                msg.sender\\n            ].sub(_value, \\\"Aalto: Insufficient Allowance\\\");\\n        }\\n\\n        _transferFrom(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Retrieves the amount that was used for INITIAL_FRAGMENTS_SUPPLY`.\\n     */\\n    function initialSupply() public pure returns (uint256) {\\n        return INITIAL_FRAGMENTS_SUPPLY;\\n    }\\n\\n    /**\\n     * @dev Retrieves the value for `MAX_SUPPLY`.\\n     */\\n    function maxSupply() public pure returns (uint256) {\\n        return MAX_SUPPLY;\\n    }\\n\\n    /**\\n     * @dev Retrieves the value for `TOTAL_GONS`.\\n     */\\n    function totalGons() public pure returns (uint256) {\\n        return TOTAL_GONS;\\n    }\\n\\n    function gonsPerFragment() public view override returns (uint256) {\\n        return _gonsPerFragment;\\n    }\\n\\n    /**\\n     * @dev Retrieves the current value for `_totalSupply`.\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n      @dev Retrieves the allowance amount of `_spender` for `_owner`s tokens.\\n     */\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowedFragments[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Retrieves the current amount of tokens held by `_who`.\\n     */\\n    function balanceOf(address _who) public view override returns (uint256) {\\n        return _gonBalances[_who].div(_gonsPerFragment);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total amount of tokens in lock staking by `_who`.\\n     * Details of lock times and current locks are in the staking contract itself.\\n     */\\n    function lockedBalanceOf(address _who) public view returns (uint256) {\\n        return _lockedBalances[_who].div(_gonsPerFragment);\\n    }\\n\\n    /**\\n     *  @dev Decreases allowance of `_spender` for callers tokens by `_subtractedValue`.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        external\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowedFragments[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowedFragments[msg.sender][_spender] = 0;\\n        } else {\\n            _allowedFragments[msg.sender][_spender] = oldValue.sub(\\n                _subtractedValue\\n            );\\n        }\\n        emit Approval(\\n            msg.sender,\\n            _spender,\\n            _allowedFragments[msg.sender][_spender]\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increases allowance of `_spender` for callers tokens for `_addedValue`.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        external\\n        returns (bool)\\n    {\\n        _allowedFragments[msg.sender][_spender] = _allowedFragments[msg.sender][\\n            _spender\\n        ].add(_addedValue);\\n\\n        emit Approval(\\n            msg.sender,\\n            _spender,\\n            _allowedFragments[msg.sender][_spender]\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Overrides default implementation of `approve` to manage approvals internally.\\n     */\\n    function approve(address spender, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _allowedFragments[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /* ======================== STAKING ========================= */\\n\\n    function stake(uint256 _poolId, uint256 _amount)\\n        external\\n        notBlacklisted(msg.sender)\\n        nonReentrant\\n        ifStakingEnabled\\n    {\\n        require(_amount > 0, \\\"AALTO: Can not stake zero\\\");\\n        require(\\n            balanceOf(msg.sender) >= _amount,\\n            \\\"AALTO: Insufficient balance\\\"\\n        );\\n\\n        _amount = _amount.mul(_gonsPerFragment);\\n\\n        // Locked balances still get the rebase effect\\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(_amount);\\n        _lockedBalances[msg.sender] = _lockedBalances[msg.sender].add(_amount);\\n\\n        // Any additional checks bubbled by staking contract\\n        staking.stake(_poolId, _amount, msg.sender);\\n    }\\n\\n    function withdrawStaking(uint256 _poolId) external nonReentrant {\\n        // Any additional checks bubbled by staking contract\\n        uint256 amountUnlocked = staking.withdraw(_poolId, msg.sender);\\n\\n        // Balances updated using the returned result\\n        // Would ideally want this after.\\n        // Function has guard and does not make untrusted external calls\\n        _lockedBalances[msg.sender] = _lockedBalances[msg.sender].sub(\\n            amountUnlocked\\n        );\\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].add(amountUnlocked);\\n    }\\n\\n    /**\\n     * @dev Allows user to move a stake from one pool to a higher lock time pool\\n     * User interacts through this contract for needed checks and balances\\n     */\\n    function moveToHigherPool(uint256 _currentPoolId, uint256 _newPoolId)\\n        external\\n        notBlacklisted(msg.sender)\\n        nonReentrant\\n        ifStakingEnabled\\n    {\\n        // Any additional checks bubbled by staking contract\\n        staking.moveToHigherPool(_currentPoolId, _newPoolId, msg.sender);\\n    }\\n\\n    function increaseStakeInCurrentPool(uint256 _poolId, uint256 _amount)\\n        external\\n        notBlacklisted(msg.sender)\\n        nonReentrant\\n        ifStakingEnabled\\n    {\\n        require(_amount > 0, \\\"AALTO: Can not stake zero\\\");\\n        require(\\n            balanceOf(msg.sender) >= _amount,\\n            \\\"AALTO: Insufficient balance\\\"\\n        );\\n\\n        _amount = _amount.mul(_gonsPerFragment);\\n\\n        // Shift balances\\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(_amount);\\n        _lockedBalances[msg.sender] = _lockedBalances[msg.sender].add(_amount);\\n\\n        // Any additional checks bubbled by staking contract\\n        staking.increaseStakeInCurrentPool(_poolId, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allow team to provide stake for a user.\\n     * Used for partnerships and such.\\n     * Tokens are immediately staked according to agreeement to avoid dumping.\\n     * Tokens need to come from Treasury\\n     */\\n    function stakeForUser(\\n        uint256 _poolId,\\n        address _forUser,\\n        uint256 _amount\\n    ) external notBlacklisted(_forUser) ifStakingEnabled onlyOwner {\\n        require(_amount > 0, \\\"AALTO: Can not stake zero\\\");\\n        require(\\n            balanceOf(treasuryFeeReceiver) >= _amount,\\n            \\\"AALTO: Treasury has insufficient balance\\\"\\n        );\\n\\n        _amount = _amount.mul(_gonsPerFragment);\\n\\n        // Shift balances\\n        _gonBalances[treasuryFeeReceiver] = _gonBalances[treasuryFeeReceiver]\\n            .sub(_amount);\\n        _lockedBalances[_forUser] = _lockedBalances[_forUser].add(_amount);\\n\\n        staking.stakeForUser(_poolId, _forUser, _amount);\\n    }\\n\\n    // function transferStake(uint256 _poolId, address _toUser)\\n    //     external\\n    //     notBlacklisted(msg.sender)\\n    //     notBlacklisted(_toUser)\\n    // {\\n\\n    // }\\n\\n    /* ====================== SWAP/LP RELATED FUNCTIONS =====================  */\\n\\n    /**\\n     * @dev Swaps current contract balance and provides liquidity.\\n     * Balance is swapped into the native token or into the stable token,\\n     * depending on current setting for `isLiquidityInNative`.\\n     */\\n    function _swapAndLiquify(uint256 _contractTokenAmount) private {\\n        uint256 half = _contractTokenAmount.div(2);\\n        uint256 otherHalf = _contractTokenAmount.sub(half);\\n\\n        if (isLiquidityInNative) {\\n            uint256 initialBalance = address(this).balance;\\n\\n            _swapTokensForNative(half, address(this));\\n\\n            uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n            _addLiquidityNative(otherHalf, newBalance);\\n\\n            emit SwapAndLiquify(half, newBalance, otherHalf);\\n        } else {\\n            uint256 stableBalanceBefore = IERC20(stableCoinAddress).balanceOf(\\n                address(this)\\n            );\\n\\n            // Swap half to stable to setup adding liquidity\\n            _swapTokensForStable(half, address(this));\\n\\n            uint256 stableBalanceAfter = IERC20(stableCoinAddress)\\n                .balanceOf(address(this))\\n                .sub(stableBalanceBefore);\\n\\n            _addLiquidityStable(otherHalf, stableBalanceAfter);\\n\\n            emit SwapAndLiquifyStable(half, stableBalanceAfter, otherHalf);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds liquidity for native token and \\\"this\\\" token.\\n     */\\n    function _addLiquidityNative(uint256 _tokenAmount, uint256 _nativeAmount)\\n        private\\n    {\\n        router.addLiquidityETH{value: _nativeAmount}(\\n            address(this),\\n            _tokenAmount,\\n            0,\\n            0,\\n            liquidityTokensReceiver,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Adds liquidity for the stable token and \\\"this\\\" token.\\n     */\\n    function _addLiquidityStable(uint256 _tokenAmount, uint256 _stableAmount)\\n        private\\n    {\\n        router.addLiquidity(\\n            address(this),\\n            stableCoinAddress,\\n            _tokenAmount,\\n            _stableAmount,\\n            0,\\n            0,\\n            liquidityTokensReceiver,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Used to swap some amount of this token into the native token.\\n     */\\n    function _swapTokensForNative(uint256 _tokenAmount, address _receiver)\\n        private\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            _tokenAmount,\\n            0,\\n            path,\\n            _receiver,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Used to swap some amount of this token into the stable token.\\n     */\\n    function _swapTokensForStable(uint256 _tokenAmount, address _receiver)\\n        private\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        path[2] = stableCoinAddress;\\n\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            _tokenAmount,\\n            0,\\n            path,\\n            _receiver,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs the swapping and transfer of contract balances to fee recipients.\\n     * Transfers to recipients is handled through setting them as receiver of DEX outputs.\\n     */\\n    function swapBack() internal swapping {\\n        uint256 realTotalFee = totalBuyFee.add(totalSellFee);\\n\\n        // targetLiquidity default is 50%\\n        // liquidityFee is applied if we are over target threshold\\n        uint256 dynamicLiquidityFee = isOverLiquified(\\n            targetLiquidity,\\n            targetLiquidityDenominator\\n        )\\n            ? 0\\n            : liquidityFee;\\n\\n        uint256 contractTokenBalance = contractBalance();\\n\\n        uint256 amountToLiquify = contractTokenBalance\\n            .mul(dynamicLiquidityFee.mul(2))\\n            .div(realTotalFee);\\n\\n        uint256 amountToInsuranceFund = contractTokenBalance\\n            .mul(buyFeeInsuranceFund.mul(2).add(sellFeeInsuranceFund))\\n            .div(realTotalFee);\\n\\n        uint256 amountToStakers = contractTokenBalance\\n            .mul(buyFeeStaking.mul(2).add(sellFeeStaking))\\n            .div(realTotalFee);\\n\\n        uint256 amountToBurn = contractTokenBalance.mul(burnFee.mul(2)).div(\\n            realTotalFee\\n        );\\n\\n        uint256 amountToTreasury = contractTokenBalance\\n            .sub(amountToLiquify)\\n            .sub(amountToInsuranceFund)\\n            .sub(amountToStakers)\\n            .sub(amountToBurn);\\n\\n        if (amountToLiquify > 0) {\\n            _swapAndLiquify(amountToLiquify);\\n        }\\n\\n        if (amountToInsuranceFund > 0) {\\n            _swapTokensForStable(amountToInsuranceFund, insuranceFeeReceiver);\\n        }\\n\\n        if (amountToTreasury > 0) {\\n            _swapTokensForStable(amountToTreasury, treasuryFeeReceiver);\\n        }\\n\\n        if (amountToStakers > 0) {\\n            _swapTokensForStable(amountToStakers, stakingFeeReceiver);\\n        }\\n\\n        if (amountToBurn > 0) {\\n            _basicTransfer(address(this), DEAD, amountToBurn);\\n        }\\n\\n        emit SwapBack(\\n            contractTokenBalance,\\n            amountToLiquify,\\n            amountToInsuranceFund,\\n            amountToTreasury\\n        );\\n    }\\n\\n    /* ====================== SWAP/LP HELPERS =====================  */\\n\\n    /**\\n     * @dev Function to check whether contract is over/under the target liquidity.\\n     * The target liquidity threshold can be admin adjusted as needed.\\n     */\\n    function isOverLiquified(uint256 target, uint256 accuracy)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return getLiquidityBacking(accuracy) > target;\\n    }\\n\\n    /**\\n     * @dev Totals up the amount of \\\"this\\\" token in each of the `corePairs` pairs.\\n     */\\n    function getLiquidityBacking(uint256 _accuracy)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 liquidityBalance = 0;\\n        uint256 divisor = 10**9;\\n        for (uint256 i = 0; i < corePairs.length; i++) {\\n            uint256 pairBalanceDivided = balanceOf(corePairs[i]).div(divisor);\\n            liquidityBalance.add(pairBalanceDivided);\\n        }\\n\\n        uint256 circulatingDivided = getCirculatingSupply().div(divisor);\\n\\n        return _accuracy.mul(liquidityBalance.mul(2)).div(circulatingDivided);\\n    }\\n\\n    /**\\n     * @dev Gets the `gonSwapThreshold` in format inline with current `_gonsPerFragment`\\n     */\\n    function checkSwapThreshold() external view returns (uint256) {\\n        return gonSwapThreshold.div(_gonsPerFragment);\\n    }\\n\\n    function manualSyncPairs() public {\\n        for (uint256 i = 0; i < corePairs.length; i++) {\\n            IUniswapV2Pair(corePairs[i]).sync();\\n        }\\n    }\\n\\n    /* ======================= ADMIN FUNCTIONS ========================= */\\n\\n    /**\\n     * @dev Sets contract address for staking/locking contract.\\n     */\\n    function setStaking(address _stakingContractAddress) external onlyOwner {\\n        require(\\n            _stakingContractAddress != address(0),\\n            \\\"AALTO: 0x0 _stakingContractAddress\\\"\\n        );\\n\\n        staking = IStaking(_stakingContractAddress);\\n        stakingEnabled = true;\\n        isFeeExempt[_stakingContractAddress] = true;\\n    }\\n\\n    function toggleStakingEnabled(bool _enabled) external onlyOwner {\\n        require(stakingEnabled != _enabled, \\\"AALTO: Value not changed\\\");\\n\\n        stakingEnabled = _enabled;\\n    }\\n\\n    /**\\n     * @dev Sets value for `initialDistributionFinished`.\\n     * @dev Transfers are not possible by anyone except those fee exempt until this is set.\\n     * Ability to toggle enables pausing during setup/launch in case of any issues.\\n     */\\n    function setInitialDistributionFinished(bool _finished) external onlyOwner {\\n        require(\\n            initialDistributionFinished != _finished,\\n            \\\"AALTO: Value not changed\\\"\\n        );\\n\\n        initialDistributionFinished = _finished;\\n    }\\n\\n    /**\\n     * @dev Sets value for `targetLiquidity` and associated denominator `targetLiquidityDenominator`.\\n     */\\n    function setTargetLiquidity(uint256 _target, uint256 _denominator)\\n        external\\n        onlyOwner\\n    {\\n        targetLiquidity = _target;\\n        targetLiquidityDenominator = _denominator;\\n    }\\n\\n    function setSwapBackSettings(\\n        bool _enabled,\\n        uint256 _numerator,\\n        uint256 _denomominator\\n    ) external onlyOwner {\\n        swapEnabled = _enabled;\\n        // gonSwapThreshold = TOTAL_GONS.div(_denomominator).mul(_numerator);\\n        // TODO: Audit recommendation (makes sense but test effects if any)\\n        gonSwapThreshold = TOTAL_GONS.mul(_numerator).div(_denomominator);\\n    }\\n\\n    /**\\n     * @dev Sets the contract address for the protocol NFT project.\\n     * NFT holders receive a portion of fees when active.\\n     */\\n    function setNftContract(address _nftContractAddress) external onlyOwner {\\n        require(\\n            _nftContractAddress != address(0),\\n            \\\"AALTO: 0x0 _nftContractAddress\\\"\\n        );\\n\\n        nftContractAddress = _nftContractAddress;\\n    }\\n\\n    function clearStuckBalance(address _receiver) external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(_receiver).transfer(balance);\\n    }\\n\\n    function rescueToken(address _tokenAddress, uint256 _amount)\\n        external\\n        onlyOwner\\n        returns (bool success)\\n    {\\n        return ERC20Detailed(_tokenAddress).transfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Toggles value for `autoRebase`.\\n     */\\n    function setAutoRebase(bool _autoRebase) external onlyOwner {\\n        require(autoRebase != _autoRebase, \\\"AALTO: Value not changed\\\");\\n\\n        autoRebase = _autoRebase;\\n    }\\n\\n    /**\\n      @dev Sets `rebaseFrequency`. \\n      @param _rebaseFrequencySeconds must be smaller than `MAX_REBASE_FREQUENCY`\\n     */\\n    function setRebaseFrequencySeconds(uint256 _rebaseFrequencySeconds)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _rebaseFrequencySeconds <= MAX_REBASE_FREQUENCY,\\n            \\\"AALTO: Rebase frequencey too high\\\"\\n        );\\n\\n        rebaseFrequencySeconds = _rebaseFrequencySeconds;\\n    }\\n\\n    /**\\n     * @dev Sets both `rewardYield` and `rewardYieldDenominator`\\n     */\\n    function setRewardYield(\\n        uint256 _rewardYield,\\n        uint256 _rewardYieldDenominator\\n    ) external onlyOwner {\\n        rewardYield = _rewardYield;\\n        rewardYieldDenominator = _rewardYieldDenominator;\\n    }\\n\\n    /**\\n      @dev Toggles value for `isLiquidityInNative`\\n     */\\n    function setIsLiquidityInNative(bool _value) external onlyOwner {\\n        require(isLiquidityInNative != _value, \\\"AALTO: Value not changed\\\");\\n\\n        isLiquidityInNative = _value;\\n    }\\n\\n    /**\\n     * @dev Overrides current `nextRebase` time\\n     */\\n    function setNextRebase(uint256 _nextRebase) external onlyOwner {\\n        nextRebase = _nextRebase;\\n    }\\n\\n    /**\\n     * @dev Sets `maxSellTransactionAmount`\\n     */\\n    function setMaxSellTransaction(uint256 _maxTxn) external onlyOwner {\\n        // Should be some sort of bounds for this, an event, suttin\\n        maxSellTransactionAmount = _maxTxn;\\n    }\\n\\n    /**\\n     * @dev Adds or removes an LP pair from the list used to track backing liquidity.\\n     */\\n    function setAutomatedMarketMakerPair(address _pair, bool _value)\\n        public\\n        onlyOwner\\n    {\\n        require(isCorePair[_pair] != _value, \\\"Value already set\\\");\\n\\n        isCorePair[_pair] = _value;\\n\\n        if (_value) {\\n            corePairs.push(_pair);\\n        } else {\\n            require(\\n                corePairs.length > 1,\\n                \\\"AALTO: Required at 1 pair in corePairs\\\"\\n            );\\n\\n            // Find the pair being set to false and remove from `_corePairs`\\n            for (uint256 i = 0; i < corePairs.length; i++) {\\n                if (corePairs[i] == _pair) {\\n                    corePairs[i] = corePairs[corePairs.length - 1];\\n                    corePairs.pop();\\n                    break;\\n                }\\n            }\\n        }\\n\\n        emit SetAutomatedMarketMakerPair(_pair, _value);\\n    }\\n\\n    /**\\n     * @dev Allows admins to manually trigger a rebase as needed.\\n     */\\n    function manualRebase() external onlyOwner {\\n        require(!inSwap, \\\"AALTO: In swap. Try again\\\");\\n        require(\\n            nextRebase <= block.timestamp,\\n            \\\"AALTO: Next rebase already passed\\\"\\n        );\\n\\n        coreRebase(getSupplyDelta());\\n        manualSyncPairs();\\n    }\\n\\n    /* =================  UI HELPERS  ==================== */\\n\\n    function contractBalance() public view returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    /* ================= MODIFIERS ================= */\\n\\n    bool inSwap;\\n\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    modifier validRecipient(address to) {\\n        require(to != address(0x0), \\\"Sending to zero address\\\");\\n        _;\\n    }\\n\\n    modifier ifStakingEnabled() {\\n        require(stakingEnabled, \\\"AALTO: Staking not enabled\\\");\\n        _;\\n    }\\n\\n    /* ================== EVENTS ==================== */\\n\\n    event SwapBack(\\n        uint256 contractTokenBalance,\\n        uint256 amountToLiquify,\\n        uint256 amountToRFV,\\n        uint256 amountToTreasury\\n    );\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 nativeReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n    event SwapAndLiquifyStable(\\n        uint256 tokensSwapped,\\n        uint256 stableReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\ninterface IUniswapV2Pair {\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function sync() external;\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\ninterface IStaking {\\n    function stake(\\n        uint256 _poolId,\\n        uint256 _amount,\\n        address _user\\n    ) external returns (bool);\\n\\n    function userCanWithdraw(uint256 _poolId, address _user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function withdraw(uint256 _poolId, address _user)\\n        external\\n        returns (uint256);\\n\\n    function increaseStakeInCurrentPool(\\n        uint256 _poolId,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function moveToHigherPool(\\n        uint256 _currentPoolId,\\n        uint256 _newPoolId,\\n        address _user\\n    ) external;\\n\\n    function stakeForUser(\\n        uint256 _poolId,\\n        address _forUser,\\n        uint256 _amount\\n    ) external;\\n\\n    function transferStake(\\n        uint256 _poolId,\\n        address _fromUser,\\n        address _toUser\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\n/**\\n * @dev We do not need the bloat of the entire OpenZeppelin interface for this.\\n */\\ninterface IERC721 {\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaltoToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\ninterface IAaltoToken {\\n    function gonsPerFragment() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SafeMathInt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != -1 || a != MIN_INT256);\\n\\n        return a / b;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nabstract contract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint8 _tokenDecimals\\n    ) {\\n        _name = _tokenName;\\n        _symbol = _tokenSymbol;\\n        _decimals = _tokenDecimals;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ProtocolFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity 0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./libs/SafeMathInt.sol\\\";\\nimport \\\"./structs.sol\\\";\\n\\ncontract ProtocolFees is Ownable {\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n\\n    struct FeeInfo {\\n        uint256 liquidityFee;\\n        uint256 burnFee;\\n        uint256 buyFeeTreasury;\\n        uint256 buyFeeInsuranceFund;\\n        uint256 buyFeeStakers;\\n        uint256 buyFeeNFT;\\n        uint256 buyFeeStaking;\\n        uint256 sellFeeTreasury;\\n        uint256 sellFeeInsuranceFund;\\n        uint256 sellFeeStakers;\\n        uint256 sellFeeNFT;\\n        uint256 sellFeeStaking;\\n        uint256 totalBuyFee;\\n        uint256 totalSellFee;\\n        uint256 feeDenominator;\\n    }\\n\\n    struct FeeReceivers {\\n        address treasuryFeeReceiver;\\n        address liquidityTokensReceiver;\\n        address insuranceFeeReceiver;\\n        address nftFeeReceiver;\\n        address stakingFeeReceiver;\\n    }\\n\\n    /* ================ FEE RECEIVERS ================== */\\n\\n    // `Treasure Trove` treasury address\\n    address public treasuryFeeReceiver;\\n\\n    // Receiver of LP tokens generated for protocol\\n    address public liquidityTokensReceiver;\\n\\n    // `Coral Preservation` Insurance Fund\\n    address public insuranceFeeReceiver;\\n\\n    // Address NFT holder incentive fees are sent to\\n    address public nftFeeReceiver;\\n\\n    // Address where `AALTO Reflections`fees for stakers are sent\\n    address public stakingFeeReceiver;\\n\\n    /* ================= FEES =================== */\\n\\n    // Max total fee % for any one buy/sell fee\\n    uint256 public constant MAX_FEE_RATE = 25;\\n\\n    // Mapping of addresses that that will not be charges transfer fees\\n    mapping(address => bool) internal isFeeExempt;\\n\\n    bool public feesOnNormalTransfers = true;\\n\\n    /* ================ NFT ITEMS ================== */\\n\\n    // Tier based protocol NFTs mapping\\n    mapping(address => ProtocolNft) public protocolNfts;\\n\\n    // Index based\\n    ProtocolNft[] public nfts;\\n\\n    uint256 public nftFeeDiscount = 2;\\n\\n    uint256 public nftFeeDiscountDenominator = 100;\\n\\n    bool public nftFeeDiscountEnabled = false;\\n\\n    /* =========== SHARED(BUY/SELL) FEES ============ */\\n\\n    // Rising Tide (Auto Liquidity) fee\\n    uint256 public liquidityFee = 3;\\n\\n    // `Mariana Trench`\\n    uint256 public burnFee = 2;\\n\\n    /* ================ BUY FEES ================== */\\n\\n    // Percentage of buy fee that goes to treasury\\n    uint256 public buyFeeTreasury = 3;\\n\\n    // `Coral Preservation` Insurance Fund fee\\n    uint256 public buyFeeInsuranceFund = 4;\\n\\n    // `AALTO Reflections`. Staking rewards\\n    uint256 public buyFeeStaking = 1;\\n\\n    uint256 public buyFeeNFT = 0;\\n\\n    uint256 public totalBuyFee =\\n        liquidityFee\\n            .add(burnFee)\\n            .add(buyFeeTreasury)\\n            .add(buyFeeInsuranceFund)\\n            .add(buyFeeStaking)\\n            .add(buyFeeNFT);\\n\\n    /* ================ SELL FEES ================== */\\n\\n    // `Treasure Trove` treasury fee\\n    uint256 public sellFeeTreasury = 8;\\n\\n    // `Coral Preservation` Insurance Fund fee\\n    uint256 public sellFeeInsuranceFund = 8;\\n\\n    // `AALTO Reflections`. Staking rewards\\n    uint256 public sellFeeStaking = 4;\\n\\n    uint256 public sellFeeNFT = 0;\\n\\n    // Sell fee is total of totalBuyFee + sell fees\\n    uint256 public totalSellFee =\\n        liquidityFee\\n            .add(burnFee)\\n            .add(sellFeeTreasury)\\n            .add(sellFeeInsuranceFund)\\n            .add(sellFeeStaking)\\n            .add(sellFeeNFT);\\n\\n    uint256 public feeDenominator = 100;\\n\\n    /* ================ BLACKLIST/BONUS LIST ================== */\\n\\n    // Cause some people choose to be sucky\\n    mapping(address => bool) internal blacklist;\\n\\n    // Addresses of early community members who helped along the way\\n    mapping(address => bool) internal samaritans;\\n\\n    constructor(\\n        address _treasuryFeeReceiver,\\n        address _insuranceFeeReceiver,\\n        address _nftFeeReceiver,\\n        address _stakingFeeReceiver,\\n        address _liquityTokensReceiver\\n    ) {\\n        require(\\n            _treasuryFeeReceiver != address(0),\\n            \\\"AALTO: 0x0 treasuryFeeReceiver\\\"\\n        );\\n        require(\\n            _insuranceFeeReceiver != address(0),\\n            \\\"AALTO: 0x0 _insuranceFeeReceiver\\\"\\n        );\\n        require(\\n            _stakingFeeReceiver != address(0),\\n            \\\"AALTO: 0x0 _stakingFeeReceiver\\\"\\n        );\\n        // require(\\n        //     _liquityTokensReceiver != address(0),\\n        //     \\\"AALTO: 0x0 _liquityTokensReceiver\\\"\\n        // );\\n        // _liquityTokensReceiver can be burned\\n        // nftFeeReceiver can be address(0) from start\\n\\n        treasuryFeeReceiver = _treasuryFeeReceiver;\\n        insuranceFeeReceiver = _insuranceFeeReceiver;\\n        nftFeeReceiver = _nftFeeReceiver;\\n        stakingFeeReceiver = _stakingFeeReceiver;\\n        liquidityTokensReceiver = _liquityTokensReceiver;\\n\\n        // Set initial/default fee exemptions\\n        isFeeExempt[treasuryFeeReceiver] = true;\\n        isFeeExempt[insuranceFeeReceiver] = true;\\n        isFeeExempt[stakingFeeReceiver] = true;\\n        isFeeExempt[address(this)] = true;\\n        isFeeExempt[msg.sender] = true;\\n    }\\n\\n    function checkFeeExempt(address _addr) external view returns (bool) {\\n        return isFeeExempt[_addr];\\n    }\\n\\n    /* ======================== UI/API HELPERS ========================= */\\n\\n    function getFees() public view returns (FeeInfo memory info) {\\n        info.liquidityFee = liquidityFee;\\n        info.burnFee = burnFee;\\n        info.buyFeeTreasury = buyFeeTreasury;\\n        info.buyFeeInsuranceFund = buyFeeInsuranceFund;\\n        info.buyFeeStakers = buyFeeStaking;\\n        info.buyFeeNFT = buyFeeNFT;\\n        info.buyFeeStaking = buyFeeStaking;\\n        info.sellFeeTreasury = sellFeeTreasury;\\n        info.sellFeeInsuranceFund = sellFeeInsuranceFund;\\n        info.sellFeeStakers = sellFeeStaking;\\n        info.sellFeeNFT = sellFeeNFT;\\n        info.sellFeeStaking = sellFeeStaking;\\n        info.totalBuyFee = totalBuyFee;\\n        info.totalSellFee = totalSellFee;\\n        info.feeDenominator = feeDenominator;\\n    }\\n\\n    function getFeeReceivers() public view returns (FeeReceivers memory) {\\n        return\\n            FeeReceivers(\\n                treasuryFeeReceiver,\\n                liquidityTokensReceiver,\\n                insuranceFeeReceiver,\\n                nftFeeReceiver,\\n                stakingFeeReceiver\\n            );\\n    }\\n\\n    /* ======================= ADMIN FUNCTIONS ======================= */\\n\\n    function updateBlacklist(address _who, bool _value) external onlyOwner {\\n        require(_who != address(0), \\\"AALTO: 0x0 who\\\");\\n        require(blacklist[_who] != _value, \\\"AALTO: Value not changed\\\");\\n\\n        blacklist[_who] = _value;\\n    }\\n\\n    function updateSamaritanlist(address _who, bool _value) external onlyOwner {\\n        require(_who != address(0), \\\"AALTO: 0x0 who\\\");\\n        require(samaritans[_who] != _value, \\\"AALTO: Value not changed\\\");\\n\\n        samaritans[_who] = _value;\\n    }\\n\\n    function setFeeExempt(address _addr, bool _value) external onlyOwner {\\n        require(isFeeExempt[_addr] != _value, \\\"AALTO: Value not changed\\\");\\n\\n        isFeeExempt[_addr] = _value;\\n    }\\n\\n    function setFeesOnNormalTransfers(bool _enabled) external onlyOwner {\\n        require(feesOnNormalTransfers != _enabled, \\\"AALTO: Value not changed\\\");\\n\\n        feesOnNormalTransfers = _enabled;\\n        emit UpdatFeeOnNormalTransferse(_enabled);\\n    }\\n\\n    function setFeeReceivers(\\n        address _treasuryReceiver,\\n        address _insuranceFundReceiver,\\n        address _nftFeeReceiver,\\n        address _stakingFeeReceiver\\n    ) external onlyOwner {\\n        require(\\n            _treasuryReceiver != address(0),\\n            \\\"AALTO: 0x0 _treasuryReceiver\\\"\\n        );\\n        require(\\n            _insuranceFundReceiver != address(0),\\n            \\\"AALTO: 0x0 _insuranceFundReceiver\\\"\\n        );\\n        require(\\n            _stakingFeeReceiver != address(0),\\n            \\\"AALTO: 0x0 stakingFeeReceiver\\\"\\n        );\\n        // _nftFeeReceiver can be 0x0\\n\\n        treasuryFeeReceiver = _treasuryReceiver;\\n        insuranceFeeReceiver = _insuranceFundReceiver;\\n        nftFeeReceiver = _nftFeeReceiver;\\n        stakingFeeReceiver = _stakingFeeReceiver;\\n\\n        emit UpdatFeeReceivers(\\n            _treasuryReceiver,\\n            _insuranceFundReceiver,\\n            _nftFeeReceiver,\\n            _stakingFeeReceiver\\n        );\\n    }\\n\\n    function setFees(\\n        uint256 _liquidityFee,\\n        uint256 _burnFee,\\n        uint256 _buyFeeInsuranceFund,\\n        uint256 _buyFeeTreasury,\\n        uint256 _buyFeeStaking,\\n        uint256 _buyFeeNFT,\\n        uint256 _sellFeeTreasury,\\n        uint256 _sellFeeInsuranceFund,\\n        uint256 _sellFeeStakers,\\n        uint256 _sellFeeNFT,\\n        uint256 _sellFeeStaking,\\n        uint256 _feeDenominator\\n    ) external onlyOwner {\\n        require(\\n            _liquidityFee <= MAX_FEE_RATE &&\\n                _burnFee <= MAX_FEE_RATE &&\\n                _buyFeeInsuranceFund <= MAX_FEE_RATE &&\\n                _buyFeeTreasury <= MAX_FEE_RATE &&\\n                _buyFeeStaking <= MAX_FEE_RATE &&\\n                _buyFeeNFT <= MAX_FEE_RATE &&\\n                _sellFeeTreasury <= MAX_FEE_RATE &&\\n                _sellFeeInsuranceFund <= MAX_FEE_RATE &&\\n                _sellFeeStakers <= MAX_FEE_RATE &&\\n                _sellFeeNFT <= MAX_FEE_RATE,\\n            \\\"AALTO: Max fee exceeded\\\"\\n        );\\n\\n        liquidityFee = _liquidityFee;\\n\\n        buyFeeTreasury = _buyFeeTreasury;\\n        buyFeeInsuranceFund = _buyFeeInsuranceFund;\\n        buyFeeStaking = _buyFeeStaking;\\n        buyFeeNFT = _buyFeeNFT;\\n        buyFeeStaking = _buyFeeStaking;\\n\\n        sellFeeTreasury = _sellFeeTreasury;\\n        sellFeeInsuranceFund = _sellFeeInsuranceFund;\\n        sellFeeNFT = _sellFeeNFT;\\n        sellFeeStaking = _sellFeeStaking;\\n\\n        totalBuyFee = liquidityFee\\n            .add(burnFee)\\n            .add(buyFeeTreasury)\\n            .add(buyFeeInsuranceFund)\\n            .add(buyFeeStaking)\\n            .add(buyFeeNFT);\\n\\n        totalSellFee = totalBuyFee\\n            .add(sellFeeTreasury)\\n            .add(sellFeeInsuranceFund)\\n            .add(sellFeeStaking)\\n            .add(sellFeeNFT);\\n\\n        feeDenominator = _feeDenominator;\\n\\n        require(\\n            totalBuyFee < feeDenominator / 4,\\n            \\\"AALTO: New totalBuyFee is > feeDenominator / 4\\\"\\n        );\\n    }\\n\\n    /* ================ MODIFIERS ================== */\\n\\n    modifier notBlacklisted(address _account) {\\n        require(blacklist[_account] == false, \\\"AALTO: Blacklisted account\\\");\\n        _;\\n    }\\n\\n    /* ================ EVENTS ================== */\\n\\n    event UpdatFeeOnNormalTransferse(bool indexed setTo);\\n    event UpdatFeeReceivers(\\n        address treasuryReceiver,\\n        address insuranceFundReceiver,\\n        address nftFeeReceiver,\\n        address stakingFeeReceiver\\n    );\\n    event UpdatNftDiscountEnabled(bool indexed setTo);\\n    event UpdatSamaritanDiscount(\\n        uint256 indexed _numerator,\\n        uint256 indexed _denominator\\n    );\\n    event UpdatSmaritanDiscountEnabled(bool indexed setTo);\\n    event UpdatNftDiscount(\\n        uint256 indexed _numerator,\\n        uint256 indexed _denominator\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\n// TODO: pack any structs members for storage optimizations as needed once types are settled\\nstruct LockPool {\\n    bool depositsEnabled;\\n    uint256 lockTimeSeconds;\\n    uint256 allocationPoints;\\n    uint256 amountLocked;\\n    uint256 lastRewardPaid; // Last time pool distributed rewards\\n}\\n\\n/**\\n * @dev Record for a user lock deposit\\n */\\nstruct UserLockRecord {\\n    // Restrict to one lock per pool/time lock\\n    // But user can add to stake amount\\n    uint256 poolId;\\n    uint256 startTime;\\n    uint256 endTime;\\n    uint256 amountLocked;\\n    uint256 startBlock;\\n    uint256 lastTimeRewardClaimed;\\n    uint256 lastBlockRewardClaimed;\\n}\\n\\n/**\\n * @dev Interface to track protocol incentivized NFT's\\n */\\nstruct ProtocolNft {\\n    bool active;\\n    address contractAddress;\\n    uint256 buyFeeDiscount;\\n    uint256 sellFeeDiscount;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_insuranceFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquityTokensReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquifyStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToLiquify\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRFV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToTreasury\",\"type\":\"uint256\"}],\"name\":\"SwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"setTo\",\"type\":\"bool\"}],\"name\":\"UpdatFeeOnNormalTransferse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuranceFundReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingFeeReceiver\",\"type\":\"address\"}],\"name\":\"UpdatFeeReceivers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"UpdatNftDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"setTo\",\"type\":\"bool\"}],\"name\":\"UpdatNftDiscountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"UpdatSamaritanDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"setTo\",\"type\":\"bool\"}],\"name\":\"UpdatSmaritanDiscountEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeInsuranceFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"corePairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesOnNormalTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeReceivers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"treasuryFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityTokensReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"insuranceFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingFeeReceiver\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolFees.FeeReceivers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeTreasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeInsuranceFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeTreasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeInsuranceFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDenominator\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtocolFees.FeeInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gonsPerFragment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseStakeInCurrentPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDistributionFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCorePair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityInNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTokensReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSyncPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPoolId\",\"type\":\"uint256\"}],\"name\":\"moveToHigherPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeLiquidityPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFeeDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFeeDiscountDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFeeDiscountEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nfts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeDiscount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolNfts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeDiscount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequencySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYieldDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeInsuranceFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoRebase\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_insuranceFundReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFeeInsuranceFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFeeTreasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFeeStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFeeNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeTreasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeInsuranceFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setFeesOnNormalTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_finished\",\"type\":\"bool\"}],\"name\":\"setInitialDistributionFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setIsLiquidityInNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextRebase\",\"type\":\"uint256\"}],\"name\":\"setNextRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"}],\"name\":\"setNftContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseFrequencySeconds\",\"type\":\"uint256\"}],\"name\":\"setRebaseFrequencySeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardYieldDenominator\",\"type\":\"uint256\"}],\"name\":\"setRewardYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContractAddress\",\"type\":\"address\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denomominator\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableLiquidityPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_forUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetLiquidityDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"toggleStakingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updateBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updateSamaritanlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"withdrawStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AaltoToken", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000570108e54d11348bd3734ff73dc55ec52c28d3ef0000000000000000000000004a95751bffff50e713aad9a1bc58386010a372500000000000000000000000006bcc0e231a4ac051b68dbc62f8882c04e2ba9f77000000000000000000000000000000000000000000000000000000000000dead000000000000000000000000d310f0a399a0f2e34ce5fb64eda32c58a0a5f01c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}