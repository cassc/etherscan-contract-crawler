{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-08-18\r\n// */\r\n//                   TOKENOMICS \r\n// BSC Wallet\t           percentage\t                     amount\r\n// Agartha\t               24.14%\t                    GOL17,500,000.00\r\n// Mining\t               15.52%\t                    GOL11,250,000.00\r\n// NFT\t                   17.24%\t                    GOL12,500,000.00\r\n// Gol Blockchain\t       27.59%\t                    GOL20,000,000.00\r\n// Rest\t                   15.52%\t                    GOL11,250,000.00\r\n// total BNB wallet\t       25.00%\t                    GOL72,500,000.00\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ///File: contracts/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n    \r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Errors.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Errors {\r\n    string constant MINT_DISABLED = \"Token: Minting is disabled\";\r\n    string constant BURN_DISABLED = \"Token: Burning is disabled\";\r\n    string constant MINT_ALREADY_ENABLED = \"Token: Minting is already enabled\";\r\n    string constant MINT_ALREADY_DISABLED = \"Token: Minting is already disabled\";\r\n    string constant BURN_ALREADY_ENABLED = \"Token: Burning is already enabled\";\r\n    string constant BURN_ALREADY_DISABLED = \"Token: Burning is already disabled\";\r\n    string constant NON_ZERO_ADDRESS = \"Token: Address can not be 0x0\";\r\n    string constant NOT_APPROVED = \"Token: You are not approved to spend this amount of tokens\";\r\n    string constant TRANSFER_EXCEEDS_BALANCE = \"Token: Transfer amount exceeds balance\";\r\n    string constant BURN_EXCEEDS_BALANCE = \"Token: Burn amount exceeds balance\";\r\n    string constant INSUFFICIENT_ALLOWANCE = \"Token: Insufficient allowance\";\r\n    string constant NOTHING_TO_WITHDRAW = \"Token: The balance must be greater than 0\";\r\n    string constant ALLOWANCE_BELOW_ZERO = \"Token: Decreased allowance below zero\";\r\n    string constant ABOVE_CAP = \"Token: Amount is above the cap\";\r\n\r\n    string constant NOT_OWNER = \"Ownable: Caller is not the owner\";\r\n    string constant OWNABLE_NON_ZERO_ADDRESS = \"Ownable: Address can not be 0x0\";\r\n\r\n    string constant NOT_ORACLE_OR_HANDLER = \"Oracle: Caller is not the oracle or handler\";\r\n    string constant ADDRESS_IS_HANDLER = \"Oracle: Address is already a Bridge Handler\";\r\n    string constant ADDRESS_IS_NOT_HANDLER = \"Oracle: Address is not a Bridge Handler\";\r\n    string constant TOKEN_NOT_ALLOWED_IN_BRIDGE = \"Oracle: Your token is not allowed in JM Bridge\";\r\n    string constant SET_HANDLER_ORACLE_FIRST = \"Oracle: Set the handler oracle address first\";\r\n    string constant ORACLE_NOT_SET = \"Oracle: No oracle set\";\r\n    string constant IS_NOT_ORACLE = \"Oracle: You are not the oracle\";\r\n    string constant NOT_ALLOWED_TO_EDIT_ORACLE = \"Oracle: Not allowed to edit the Handler Oracle address\";\r\n    string constant NON_ZERO_ADDRESS_SENDER = \"Oracle: Sender can not be 0x0\";\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), Errors.NOT_OWNER);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), Errors.OWNABLE_NON_ZERO_ADDRESS);\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/BridgeOracle.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface HandlerOracle {\r\n    function approveHandlerChange() external returns (bool);\r\n    function approveManualMint() external returns (bool);\r\n    function isTokenContract(address tokenContract) external view returns (bool);\r\n    function isAllowedToChangeOracle(address tokenContract) external view returns (bool);\r\n}\r\n\r\nabstract contract BridgeOracle is Ownable {\r\n    HandlerOracle internal _handlerOracle;\r\n    address private _bridgeHandler;\r\n\r\n    event BridgeHandlerSet(address indexed added);\r\n\r\n    /**\r\n     * @dev Returns true if the address is a bridge handler.\r\n     */\r\n    function isBridgeHandler(address account) public view returns (bool) {\r\n        return _bridgeHandler == account;\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the oracle or a bridge handler.\r\n     */\r\n    modifier onlyOracleAndBridge() {\r\n        require(_msgSender() != address(0), Errors.NON_ZERO_ADDRESS_SENDER);\r\n        require(isBridgeHandler(_msgSender()) || address(_handlerOracle) == _msgSender(), Errors.NOT_ORACLE_OR_HANDLER);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyHandlerOracle() {\r\n        require(_msgSender() != address(0), Errors.ORACLE_NOT_SET);\r\n        require(_msgSender() == address(_handlerOracle), Errors.IS_NOT_ORACLE);\r\n        _;\r\n    }\r\n\r\n    function approveOracleToSetHandler() public onlyOwner returns (bool) {\r\n        require(address(_handlerOracle) != address(0), Errors.SET_HANDLER_ORACLE_FIRST);\r\n        require(_handlerOracle.isTokenContract(address(this)) == true, Errors.TOKEN_NOT_ALLOWED_IN_BRIDGE);\r\n\r\n        return _handlerOracle.approveHandlerChange();\r\n    }\r\n    \r\n    function approveOracleToManualMint() public onlyOwner returns (bool) {\r\n        require(address(_handlerOracle) != address(0), Errors.SET_HANDLER_ORACLE_FIRST);\r\n        require(_handlerOracle.isTokenContract(address(this)) == true, Errors.TOKEN_NOT_ALLOWED_IN_BRIDGE);\r\n\r\n        return _handlerOracle.approveManualMint();\r\n    }\r\n\r\n    /**\r\n     * @dev Add handler address (`account`) that can mint and burn.\r\n     * Can only be called by the 'Handler Oracle Contract' after it was approved.\r\n     */\r\n    function setBridgeHandler(address account) public onlyHandlerOracle {\r\n        require(account != address(0), Errors.OWNABLE_NON_ZERO_ADDRESS);\r\n        require(!isBridgeHandler(account), Errors.ADDRESS_IS_HANDLER);\r\n\r\n        emit BridgeHandlerSet(account);\r\n        _bridgeHandler = account;\r\n    }\r\n\r\n    function setHandlerOracle(address newHandlerOracle) public onlyOwner {\r\n        require(HandlerOracle(newHandlerOracle).isTokenContract(address(this)) == true, Errors.TOKEN_NOT_ALLOWED_IN_BRIDGE);\r\n\r\n        if ( address(_handlerOracle) == address(0) ) {\r\n            _handlerOracle = HandlerOracle(newHandlerOracle);\r\n        } else {\r\n            require(_handlerOracle.isAllowedToChangeOracle(address(this)) == true, Errors.NOT_ALLOWED_TO_EDIT_ORACLE);\r\n\r\n            _handlerOracle = HandlerOracle(newHandlerOracle);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/GOLCOIN.sol\r\n\r\n// @Title GOLCOIN Bridged Token\r\n// @Author Team GOLCOIN\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract GOLCOIN is BridgeOracle, IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private constant _max = 290000000 * 10**18;\r\n    uint256 private _totalSupply;\r\n    uint256 private _totalBurned;\r\n\r\n    bool public isMintingEnabled = false;\r\n    bool public isBurningEnabled = true;\r\n    \r\n    string private _name = \"GOLCOIN\";\r\n    string private _symbol = \"GOLC\";\r\n    uint8 private _decimals = 18;\r\n\r\n    constructor() {\r\n        uint256 initialAmount = 72500000 * 10**18;\r\n        _totalSupply = initialAmount;\r\n        _balances[_msgSender()] = initialAmount;\r\n    }\r\n\r\n    modifier mintingEnabled() {\r\n        require(isMintingEnabled, Errors.MINT_DISABLED);\r\n        _;\r\n    }\r\n    \r\n    modifier burningEnabled() {\r\n        require(isBurningEnabled, Errors.BURN_DISABLED);\r\n        _;\r\n    }\r\n    \r\n    modifier nonZeroAddress(address _account) {\r\n        require(_account != address(0), Errors.NON_ZERO_ADDRESS);\r\n        _;\r\n    }\r\n    \r\n    modifier belowCap(uint256 amount) {\r\n        require(amount <= (_max - _totalSupply - _totalBurned), Errors.ABOVE_CAP);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalBurned() public view returns (uint256) {\r\n        return _totalBurned;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\r\n        address spender = _msgSender();\r\n        require(amount <= _allowances[from][spender], Errors.NOT_APPROVED);\r\n        \r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, Errors.ALLOWANCE_BELOW_ZERO);\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function enableMinting() public onlyHandlerOracle returns (string memory retMsg) {\r\n        require(!isMintingEnabled, Errors.MINT_ALREADY_ENABLED);\r\n        \r\n        isMintingEnabled = true;\r\n        emit MintingEnabled();\r\n        retMsg = \"Enabled Minting\";\r\n    }\r\n\r\n    function disableMinting() public onlyHandlerOracle returns (string memory retMsg) {\r\n        require(isMintingEnabled, Errors.MINT_ALREADY_DISABLED);\r\n        \r\n        isMintingEnabled = false;\r\n        emit MintingDisabled();\r\n        retMsg = \"Disabled Minting\";\r\n    }\r\n    \r\n    function enableBurning() public onlyHandlerOracle returns (string memory retMsg) {\r\n        require(!isBurningEnabled, Errors.BURN_ALREADY_ENABLED);\r\n        \r\n        isBurningEnabled = true;\r\n        emit BurningEnabled();\r\n        retMsg = \"Enabled Burning\";\r\n    }\r\n\r\n    function disableBurning() public onlyHandlerOracle returns (string memory retMsg) {\r\n        require(isBurningEnabled, Errors.BURN_ALREADY_DISABLED);\r\n        \r\n        isBurningEnabled = false;\r\n        emit BurningDisabled();\r\n        retMsg = \"Disabled Burning\";\r\n    }\r\n    \r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal nonZeroAddress(from) nonZeroAddress(to) {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, Errors.TRANSFER_EXCEEDS_BALANCE);\r\n        unchecked { _balances[from] = fromBalance - amount; }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Creates `amount` new tokens for `to`.\r\n     *\r\n     * See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the bridge or owner.\r\n     */\r\n    function mint(address to, uint256 amount) public onlyOracleAndBridge {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - minting and burning must be enabled.\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal mintingEnabled nonZeroAddress(account) belowCap(amount) {\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        address mintBy = _msgSender();\r\n        if ( isBridgeHandler(mintBy) ) {\r\n            emit BridgeMint(mintBy, account, amount);\r\n        } else {\r\n            emit ManualMint(mintBy, account, amount);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal burningEnabled nonZeroAddress(account) {\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, Errors.BURN_EXCEEDS_BALANCE);\r\n        unchecked { _balances[account] = accountBalance - amount; }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        address burnBy = _msgSender();\r\n        if ( isBridgeHandler(burnBy) || burnBy == address(_handlerOracle) ) {\r\n            emit BridgeBurn(account, burnBy, amount);\r\n        } else {\r\n            unchecked { _totalBurned += amount; }\r\n            emit NormalBurn(account, burnBy, amount);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This private function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) private nonZeroAddress(owner) nonZeroAddress(spender) {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, Errors.INSUFFICIENT_ALLOWANCE);\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        require(amount <= _allowances[account][_msgSender()], Errors.NOT_APPROVED);\r\n        \r\n        _spendAllowance(account, _msgSender(), amount);\r\n        _burn(account, amount);\r\n    }\r\n    \r\n    function withdrawBASE(address payable recipient) external onlyOwner nonZeroAddress(recipient) {\r\n        require(address(this).balance > 0, Errors.NOTHING_TO_WITHDRAW);\r\n\r\n        recipient.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawERC20token(address _token, address payable recipient) external onlyOwner nonZeroAddress(recipient) returns (bool) {\r\n        uint256 bal = IERC20(_token).balanceOf(address(this));\r\n        require(bal > 0, Errors.NOTHING_TO_WITHDRAW);\r\n\r\n        return IERC20(_token).transfer(recipient, bal);\r\n    }\r\n\r\n    // function withdrawTRC20token(trcToken _tokenID, address payable recipient) external onlyOwner nonZeroAddress(recipient) {\r\n    //     uint256 bal = address(this).tokenBalance(_tokenID);\r\n    //     require(bal > 0, Errors.NOTHING_TO_WITHDRAW);\r\n\r\n    //     recipient.transferToken(bal, _tokenID);\r\n    // }\r\n    \r\n    event BridgeMint(address indexed by, address indexed to, uint256 value);\r\n    event ManualMint(address indexed by, address indexed to, uint256 value);\r\n    event BridgeBurn(address indexed from, address indexed by, uint256 value);\r\n    event NormalBurn(address indexed from, address indexed to, uint256 value);\r\n    event MintingEnabled();\r\n    event MintingDisabled();\r\n    event BurningEnabled();\r\n    event BurningDisabled();\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BridgeBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"added\",\"type\":\"address\"}],\"name\":\"BridgeHandlerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BridgeMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BurningDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BurningEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ManualMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NormalBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveOracleToManualMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveOracleToSetHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBurning\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"retMsg\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMinting\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"retMsg\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBurning\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"retMsg\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMinting\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"retMsg\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBridgeHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurningEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setBridgeHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newHandlerOracle\",\"type\":\"address\"}],\"name\":\"setHandlerOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawBASE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GOLCOIN", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fb6991e84cd8e331713159b9f52833531b56175678e0cb964716ea30147be781"}