{"SourceCode": "// SPDX-License-Identifier: MIT License\r\npragma solidity 0.8.9;\r\n\r\ninterface IERC20 {    \r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    \r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    \r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        \r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n    constructor () {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n      require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n      _;\r\n    }\r\n    \r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract HUBFarming is Context, Ownable, ReentrancyGuard  {\r\n    using SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;    \r\n    event _Crop(address indexed addr, uint256 amount, uint40 tm);\r\n    event _Harvest(address indexed addr, uint256 amount);\r\n    \r\n    IERC20[2] public Seed;    \r\n    address[2] public paymentTokenAddress = [0xE7D048F2e6c416153029dbC5841FFeCEE71318C4, 0xfc617a0b133973B2CEbAd736A29Da9f8986F913c];\r\n    \r\n    address payable public dev;\r\n    address payable public mkg;    \r\n    uint256[4] public ref_bonuses   = [100, 30, 30, 10];     \r\n    uint256[3] public rates         = [50, 35, 100];\r\n    uint256[4] public minimums      = [10 ether, 10 ether, 10 ether, 10 ether]; \r\n    uint256[7] public periods       = [24, 24, 24, 15, 30, 45, 60]; \r\n    uint8 public isPayoutPaused = 0;\r\n\tuint8 public isScheduled = 1;\r\n    uint256 private constant HOUR = 1 hours;\r\n    uint256 private constant DAY = 24 hours;\r\n\r\n    uint256 private cropped1;\r\n    uint256 private cropped2;\r\n    uint256 private harvested1;\r\n    uint256 private harvested2;    \r\n    uint256 private rewards;\r\n    uint256 private cashbacks;\r\n    \r\n    struct FarmingPal {\r\n        uint8 level;    \r\n        address wallet;\r\n    }\r\n\r\n    struct Tarif {\r\n        uint256 life_days;\r\n        uint256 percent;\r\n    }\r\n\r\n    struct Crop {\r\n        uint40 time;  \r\n        uint256 tarif;\r\n        uint256 amount;       \r\n        uint256 numDays; \r\n        uint40 lastHarvest;\r\n    }\r\n\r\n    struct Animal {\r\n        uint40 time;  \r\n        uint256 tarif;\r\n        uint256 amount;    \r\n        uint256 numHours;    \r\n        uint40 lastHarvest;\r\n    }\r\n\r\n    struct Farmer {\t\t\r\n\t\taddress mate;\r\n        uint256 total_cropped1;\r\n        uint256 total_harvested1;\r\n        uint256 total_cropped2;\r\n        uint256 total_harvested2;        \r\n        uint256 total_rewards;\r\n        uint256 total_cashbacks;\r\n        FarmingPal[] pals1;\r\n   \t\tFarmingPal[] pals2;\r\n   \t\tFarmingPal[] pals3;\r\n        FarmingPal[] pals4;\r\n        uint256[4] structure;\t\r\n        Crop[] crops;\r\n        Animal[] livestocks;\r\n    }\r\n\r\n    mapping(address => Farmer) public farmers;\r\n    mapping(uint256 => Tarif) public tarifs;\r\n    mapping(uint256 => address) public farmersNo;\r\n    uint public nextFarmerNo;\r\n    \r\n    mapping(address => uint8) public banned;\r\n    uint public nextBannedWallet;\r\n\r\n    constructor() {        \r\n        mkg = payable(0x7fA5d12f26D9cc43cB79405Bc80BCFe79c30F990);     \r\n        dev = payable(0x4860E2C28917Cbf01687031d330F9Ba036474798);      \r\n        Seed[0] = IERC20(paymentTokenAddress[0]);        \r\n        Seed[1] = IERC20(paymentTokenAddress[1]);        \r\n        //Livestocks\r\n        tarifs[0] = Tarif(30, 120);     \r\n        tarifs[1] = Tarif(60, 150);\r\n        tarifs[2] = Tarif(90, 190);\r\n        //Fruits\r\n        tarifs[3] = Tarif(15, 110);\r\n        tarifs[4] = Tarif(30, 125);\r\n        tarifs[5] = Tarif(45, 140);\r\n        tarifs[6] = Tarif(60, 160);\r\n    }    \r\n       \r\n    function PlantCrops(address sp,  uint256 amount, uint256 taripa, uint256 ttype) external { \r\n        require(taripa >=3 ,\"Invalid Tarif Index!\");\r\n        require(amount >= minimums[1], \"Your seeds is less than minimum cropping!\");\r\n        \r\n        Seed[ttype].safeTransferFrom(msg.sender, address(this), amount);\r\n        setUpline(msg.sender, sp);\t\t\r\n        \r\n        Farmer storage farmer = farmers[msg.sender];\r\n        farmer.crops.push(Crop({\r\n            tarif: taripa, \r\n            amount: amount,\r\n            time: uint40(block.timestamp),\r\n            lastHarvest: uint40(block.timestamp),\r\n            numDays: periods[taripa]            \r\n        })); \r\n\r\n        farmer.total_cropped1 += amount;\r\n        cropped1 += amount;\r\n        \r\n        rewardCrops(msg.sender, amount);      \r\n\r\n        uint256 m2 = amount * rates[0] / 1000;   \r\n        Seed[1].safeTransfer(mkg, m2);         \r\n        \r\n        uint256 m3 = amount * rates[1] / 1000;   \r\n        Seed[1].safeTransfer(dev, m3);         \r\n\r\n        emit _Crop(msg.sender, amount, uint40(block.timestamp));\t                \r\n    }   \r\n\r\n    function FarmLivestocks(address sp,  uint256 amount, uint256 taripa, uint256 ttype) external { \r\n        require(taripa <=2 ,\"Invalid Tarif Index!\");\r\n        require(amount >= minimums[0], \"Your capital is less than minimum livestocking!\");\r\n        \r\n        Seed[ttype].safeTransferFrom(msg.sender, address(this), amount);\r\n        setUpline(msg.sender, sp);\t\t\r\n        \r\n        Farmer storage farmer = farmers[msg.sender];\r\n        farmer.livestocks.push(Animal({\r\n            tarif: taripa, \r\n            amount: amount,\r\n            time: uint40(block.timestamp),\r\n            lastHarvest: uint40(block.timestamp),\r\n            numHours: periods[taripa]            \r\n        })); \r\n\r\n        farmer.total_cropped2 += amount;\r\n        cropped2 += amount;\r\n        \r\n        rewardCrops(msg.sender, amount);      \r\n\r\n        uint256 m2 = amount * rates[0] / 1000;   \r\n        Seed[1].safeTransfer(mkg, m2);         \r\n        \r\n        uint256 m3 = amount * rates[1] / 1000;   \r\n        Seed[1].safeTransfer(dev, m3);         \r\n\r\n        emit _Crop(msg.sender, amount, uint40(block.timestamp));\t                \r\n    }  \r\n\r\n    function HarvestCrops(uint256 idx) external noReentrant  returns (bool success) {        \r\n        \r\n        require(isPayoutPaused <= 0, 'Payout Transaction is Paused!');\r\n\t\trequire(banned[msg.sender] == 0,'Banned Wallet!');\r\n\r\n        Farmer storage farmer = farmers[msg.sender];\r\n        \r\n        if(farmer.crops.length < (idx+1)){\r\n            return false;\r\n        }\r\n        \r\n        Crop storage dep = farmer.crops[idx];\r\n        \r\n        require(dep.tarif >=3 ,\"Invalid Tarif Index!\");\r\n        \r\n        Tarif storage tarif = tarifs[dep.tarif];\r\n              \r\n        if(isScheduled >= 1) {\r\n            require (block.timestamp >= (dep.lastHarvest + (DAY * dep.numDays)), \"Not due yet for next harvest!\");\r\n        }\r\n        uint256 value;\r\n        uint256 time_end = dep.time + tarif.life_days * 86400;\r\n        uint40 from = dep.lastHarvest > dep.time ? dep.lastHarvest : dep.time;\r\n        uint256 to = block.timestamp > time_end ? time_end : block.timestamp;\r\n        if(from < to) {\r\n            value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;\r\n\r\n            require(value >= minimums[3], \"Available yields is less than minimum harvest!\");\r\n\r\n            farmer.crops[idx].lastHarvest = uint40(block.timestamp);\r\n\r\n            Seed[1].safeTransfer(msg.sender, value);\r\n\r\n            farmer.total_harvested1 += value;            \r\n            harvested1 += value;\r\n        \r\n            emit _Harvest(msg.sender, value);   \r\n\r\n            if(rates[2] >0){\r\n                address up = farmers[msg.sender].mate;\r\n                uint256 cashBack = SafeMath.div(SafeMath.mul(value, rates[2]), 1000);\r\n                farmers[up].total_cashbacks += cashBack;\r\n                cashbacks += cashBack;    \r\n                Seed[1].safeTransfer(up, cashBack);\r\n            }\r\n        }\r\n        return true;        \r\n    }\r\n\r\n    function CullAnimals(uint256 idx) external noReentrant  returns (bool success) {        \r\n        require(isPayoutPaused <= 0, 'Payout Transaction is Paused!');\r\n\t\trequire(banned[msg.sender] == 0,'Banned Wallet!');\r\n\r\n        Farmer storage farmer = farmers[msg.sender];\r\n        \r\n        if(farmer.livestocks.length < (idx+1)){\r\n            return false;\r\n        }       \r\n        \r\n        Animal storage dep = farmer.livestocks[idx];\r\n        require(dep.tarif <=2 ,\"Invalid Tarif Index!\");\r\n        \r\n        Tarif storage tarif = tarifs[dep.tarif];\r\n\r\n        if(isScheduled >= 1) {\r\n            require (block.timestamp >= (dep.lastHarvest + (HOUR * dep.numHours)), \"Not due yet for next culling!\");\r\n        }\r\n        uint256 value;\r\n        uint256 time_end = dep.time + tarif.life_days * 86400;\r\n        uint40 from = dep.lastHarvest > dep.time ? dep.lastHarvest : dep.time;\r\n        uint256 to = block.timestamp > time_end ? time_end : block.timestamp;\r\n        if(from < to) {\r\n            value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;\r\n\r\n            require(value >= minimums[3], \"Available yields is less than minimum cull!\");\r\n\r\n            farmer.livestocks[idx].lastHarvest = uint40(block.timestamp);\r\n\r\n            Seed[1].safeTransfer(msg.sender, value);\r\n\r\n            farmer.total_harvested2 += value;            \r\n            harvested2 += value;\r\n        \r\n            emit _Harvest(msg.sender, value);   \r\n            if(rates[2] >0){\r\n                address up = farmers[msg.sender].mate;\r\n                uint256 cashBack = SafeMath.div(SafeMath.mul(value, rates[2]), 1000);\r\n                farmers[up].total_cashbacks += cashBack;\r\n                cashbacks += cashBack;    \r\n                Seed[1].safeTransfer(up, cashBack);\r\n            }\r\n        }\r\n        return true;        \r\n    }\r\n    \r\n    function farmerCrops(address _addr, uint256 index) view external returns(uint256 taripa, uint40 time, uint256 amount, uint256 lifedays, uint256 percent, uint40 last, uint256 value, uint40 nextDue)\r\n    {\r\n        Farmer storage farmer = farmers[_addr];\r\n        if(farmer.crops.length < (index+1)){\r\n            return(999, 0, 0, 0, 0, 0, 0, 0);\r\n        }\r\n        Crop storage dep = farmer.crops[index];\r\n        Tarif storage tarif = tarifs[dep.tarif];\r\n\r\n        uint256 time_end = dep.time + tarif.life_days * 86400;\r\n        uint40 from = dep.lastHarvest > dep.time ? dep.lastHarvest : dep.time;\r\n        uint256 to = block.timestamp > time_end ? time_end : block.timestamp;\r\n        value = 0;\r\n        if(from < to) {\r\n            value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;\r\n        }\r\n        return(dep.tarif, dep.time, dep.amount, tarif.life_days, tarif.percent, dep.lastHarvest, value, uint40(dep.lastHarvest + (DAY * dep.numDays)));\r\n    }\r\n    \r\n    function farmerLivestocks(address _addr, uint256 index) view external returns(uint256 taripa, uint40 time, uint256 amount, uint256 lifedays, uint256 percent, uint40 last, uint256 value, uint40 nextDue)\r\n    {\r\n        Farmer storage farmer = farmers[_addr];\r\n        if(farmer.livestocks.length < (index+1)){\r\n            return(999, 0, 0, 0, 0, 0, 0, 0);\r\n        }\r\n        \r\n        Animal storage dep = farmer.livestocks[index];\r\n        Tarif storage tarif = tarifs[dep.tarif];\r\n        uint256 time_end = dep.time + tarif.life_days * 86400;\r\n        uint40 from = dep.lastHarvest > dep.time ? dep.lastHarvest : dep.time;\r\n        uint256 to = block.timestamp > time_end ? time_end : block.timestamp;\r\n        value = 0;\r\n        if(from < to) {\r\n            value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;\r\n        }\r\n        return(dep.tarif, dep.time, dep.amount, tarif.life_days, tarif.percent, dep.lastHarvest, value, uint40(dep.lastHarvest + (HOUR * dep.numHours)));\r\n    }\r\n     \r\n\r\n    function rewardCrops(address _addr, uint256 _amount) private {\r\n        address up = farmers[_addr].mate;\r\n        if(up == address(0) || up == owner()) return;\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n            \r\n            uint256 bonus = _amount * ref_bonuses[i] / 1000;\r\n            Seed[1].safeTransfer(up, bonus);\r\n            farmers[up].total_rewards += bonus;\r\n\r\n            rewards += bonus;\r\n            up = farmers[up].mate;\r\n        }       \r\n    }\r\n   \r\n    function setUpline(address _addr, address pal) private {\r\n        if(farmers[_addr].mate == address(0) && _addr != owner()) {     \r\n\r\n            if(farmers[pal].total_cropped1 + farmers[pal].total_cropped2 <= 0) {\r\n\t\t\t\tpal = owner();\r\n            }\t\r\n            farmersNo[ nextFarmerNo ] = _addr;\t\t\t\t\r\n\t\t\tnextFarmerNo++;           \t\t\t            \r\n            farmers[_addr].mate = pal;\r\n            for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n                farmers[pal].structure[i]++;\r\n\t\t\t\tFarmer storage up = farmers[pal];\r\n                if(i == 0){\r\n                    up.pals1.push(FarmingPal({\r\n                        level: 1,\r\n                        wallet: _addr\r\n                    }));  \r\n                }else if(i == 1){\r\n                    up.pals2.push(FarmingPal({\r\n                        level: 2,\r\n                        wallet: _addr\r\n                    }));  \r\n                }else if(i == 2){\r\n                    up.pals3.push(FarmingPal({\r\n                        level: 3,\r\n                        wallet: _addr\r\n                    }));  \r\n                }else if(i == 3){\r\n                    up.pals4.push(FarmingPal({\r\n                        level: 4,\r\n                        wallet: _addr\r\n                    }));  \r\n                }\r\n                  \r\n                pal = farmers[pal].mate;\r\n                if(pal == address(0)) break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setRate(uint8 index, uint256 index2, uint256 newval) public onlyOwner returns (bool success) {  \r\n        if(index==0){\r\n            rates[index2] = newval;\r\n        }else if(index==1){\r\n            ref_bonuses[index2] = newval;\r\n        }else if(index==2){\r\n            minimums[index2] = newval;\r\n        }else if(index==3){\r\n            periods[index2] = newval;\r\n        }\r\n        return true;\r\n    }   \r\n    \r\n    function setTeamWallet(uint8 idx, address payable newval) public onlyOwner returns (bool success) {\r\n        if(idx == 1){\r\n            dev = newval;\r\n        }else if(idx == 2){\r\n            mkg = newval;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setPercentage(uint256 index, uint256 total_days, uint256 total_perc) public onlyOwner returns (bool success) {\r\n        tarifs[index] = Tarif(total_days, total_perc);\r\n        return true;\r\n    }\r\n        \r\n    function setFarmPal(address member, address newSP) public onlyOwner returns(bool success) {\r\n        farmers[member].mate = newSP;\r\n        return true;\r\n    }\t\r\n\t\r\n    function setFarmer(address pal, address wallet, uint256 amount, uint256 taripa) public onlyOwner returns (bool success) {        \r\n        require(taripa <=2 ,\"Invalid Tarif Index!\");\r\n        Farmer storage farmer = farmers[wallet];\r\n        setUpline(wallet, pal);\r\n        amount = amount * 1000;\r\n        farmer.livestocks.push(Animal({\r\n            tarif: taripa,\r\n            amount: amount,\r\n            time: uint40(block.timestamp),\r\n            lastHarvest: 0,\r\n            numHours: periods[taripa]\r\n        }));  \r\n        farmer.total_cropped2 += amount;       \r\n        return true;\r\n    }\r\n\r\n    function banFarmer(address wallet) public onlyOwner returns (bool success) {\r\n        banned[wallet] = 1;\r\n        nextBannedWallet++;\r\n        return true;\r\n    }\r\n\t\r\n\tfunction unbanFarmer(address wallet) public onlyOwner returns (bool success) {\r\n        banned[wallet] = 0;\r\n        if(nextBannedWallet > 0){ nextBannedWallet--; }\r\n        return true;\r\n    }\t\r\n\r\n    function setScheduled(uint8 newval) public onlyOwner returns (bool success) {\r\n        isScheduled = newval;\r\n        return true;\r\n    }   \r\n\r\n    function setPaymentToken(uint8 index, address newval) public onlyOwner returns (bool success) {\r\n        paymentTokenAddress[index] = newval;\r\n        Seed[index] = IERC20(paymentTokenAddress[index]); \r\n        return true;\r\n    }\r\n\r\n    function farmerAddressByNo(uint256 idx) public view returns(address) {\r\n         return farmersNo[idx];\r\n    }\r\n   \r\n    function farmerInfo(address _addr) view external returns(uint256 numFarms, uint256 numLivestocks, uint256[4] memory structure) {        \r\n        Farmer storage farmer = farmers[_addr];        \r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            structure[i] = farmer.structure[i];\r\n        }\r\n        return (farmer.crops.length, farmer.livestocks.length, structure);\r\n    } \r\n   \r\n    function FarmingPals(address _addr, uint8 level, uint256 index) view external returns(address fishpal)\r\n    {\r\n        Farmer storage farmer = farmers[_addr];\r\n        FarmingPal storage pal;\r\n        if(level==1){\r\n            pal  = farmer.pals1[index];\r\n        }else if(level == 2)\r\n        {\r\n            pal  = farmer.pals2[index];\r\n        }else if(level == 3)\r\n        {\r\n            pal  = farmer.pals3[index];\r\n        }\r\n        else{\r\n            pal  = farmer.pals4[index];\r\n        }        \r\n        return(pal.wallet);\r\n    }\r\n    \r\n    function getContractBalance(uint256 index) public view returns (uint256) {\r\n        return IERC20(paymentTokenAddress[index]).balanceOf(address(this));\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function contractInfo(address _addr) view external returns(uint256 _cropped1, uint256 _cropped2, uint256 _harvested1, uint256 _harvested2, uint256 _rewards, uint256 _cashbacks) {\r\n        Farmer storage farmer = farmers[_addr];        \r\n        if(farmer.total_cropped1 + farmer.total_cropped2 > 0){\r\n            return (cropped1, cropped2, harvested1, harvested2, rewards, cashbacks);\r\n        }\r\n        return (0,0,0,0,0,0);\r\n    }\r\n     \r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"tm\",\"type\":\"uint40\"}],\"name\":\"_Crop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_Harvest\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"CullAnimals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taripa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ttype\",\"type\":\"uint256\"}],\"name\":\"FarmLivestocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"FarmingPals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fishpal\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"HarvestCrops\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taripa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ttype\",\"type\":\"uint256\"}],\"name\":\"PlantCrops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Seed\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"banFarmer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"banned\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cropped1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cropped2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvested1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvested2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cashbacks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"farmerAddressByNo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"farmerCrops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taripa\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifedays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"last\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"nextDue\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"farmerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numFarms\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLivestocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"structure\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"farmerLivestocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taripa\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifedays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"last\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"nextDue\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"farmers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_cropped1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_harvested1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_cropped2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_harvested2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_cashbacks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farmersNo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayoutPaused\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isScheduled\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minimums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkg\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBannedWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextFarmerNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newSP\",\"type\":\"address\"}],\"name\":\"setFarmPal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taripa\",\"type\":\"uint256\"}],\"name\":\"setFarmer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"newval\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_perc\",\"type\":\"uint256\"}],\"name\":\"setPercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newval\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newval\",\"type\":\"uint8\"}],\"name\":\"setScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"idx\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"newval\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tarifs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"life_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"unbanFarmer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HUBFarming", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2f0fde207658759772287463a8b521f8c1cad41b1f2dd42c91e98cf421bef895"}