{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != - 1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? - a : a;\r\n    }\r\n\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ncontract Epoch {\r\n    uint256 constant public EPOCH_PERIOD = 28800;\r\n\r\n    uint256 constant public MULTIPLY = 1000000000;\r\n\r\n    uint256 public lastEpoch;\r\n    uint256 public lastEpochBlock;\r\n    uint256 public maxepoch = 60;\r\n\r\n    function start() internal {\r\n        lastEpochBlock = block.number;\r\n    }\r\n\r\n    function updateEpoch() internal {\r\n        uint256 epochCount = (block.number - lastEpochBlock) / EPOCH_PERIOD;\r\n        lastEpoch += epochCount;\r\n        lastEpochBlock += epochCount * EPOCH_PERIOD;\r\n    }\r\n\r\n    function getMultiplyByEpoch(uint256 epoch) public view returns (uint256) {\r\n        if (epoch < maxepoch) {\r\n            return 20000000;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function currentEpoch() public view returns (uint256) {\r\n        uint256 epochCount = (block.number - lastEpochBlock) / EPOCH_PERIOD;\r\n        return lastEpoch + epochCount;\r\n    }\r\n\r\n    function currentEpochBlock() public view returns (uint256) {\r\n        uint256 epochCount = (block.number - lastEpochBlock) / EPOCH_PERIOD;\r\n        return lastEpochBlock + epochCount * EPOCH_PERIOD;\r\n    }\r\n}\r\n\r\ncontract MiningToken is Epoch {\r\n    bool public miningStarted;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => bool) internal _mintExclude;\r\n\r\n    uint256 private _initialSupply;\r\n    uint256 private _totalSupplyEpoch;\r\n    uint256 private _totalSupplyBlock;\r\n\r\n    function initialSupply() public view returns (uint256) {\r\n        return _initialSupply;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        if (!miningStarted) return _initialSupply;\r\n\r\n        uint256 _currentEpoch = currentEpoch();\r\n\r\n        uint256 amount = _totalSupplyEpoch;\r\n        for (uint256 i = lastEpoch; i < _currentEpoch; i++) {\r\n            amount += amount * getMultiplyByEpoch(i) / MULTIPLY;\r\n        }\r\n\r\n        uint256 epochTotal = amount * getMultiplyByEpoch(_currentEpoch) / MULTIPLY;\r\n        return amount + epochTotal * (block.number - currentEpochBlock()) / EPOCH_PERIOD;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        if (!miningStarted) return _balances[account];\r\n\r\n        if (_mintExclude[account]) return _balances[account];\r\n\r\n        return _balances[account] * totalSupply() / _initialSupply;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _initialSupply += amount;\r\n        _totalSupplyEpoch += amount;\r\n        _totalSupplyBlock += amount;\r\n        _balances[account] += amount;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 initialAmount = amount * _initialSupply / _totalSupplyBlock;\r\n\r\n        if (_mintExclude[from]) {\r\n            require(_balances[from] >= amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[from] -= amount;\r\n        } else {\r\n            require(_balances[from] >= initialAmount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[from] -= initialAmount;\r\n        }\r\n\r\n        if (_mintExclude[to]) {\r\n            _balances[to] += amount;\r\n        } else {\r\n            _balances[to] += initialAmount;\r\n        }\r\n    }\r\n\r\n    function updateMining() internal {\r\n        uint256 _currentEpoch = currentEpoch();\r\n\r\n        uint256 amount = _totalSupplyEpoch;\r\n        for (uint256 i = lastEpoch; i < _currentEpoch; i++) {\r\n            amount += amount * getMultiplyByEpoch(i) / MULTIPLY;\r\n        }\r\n        _totalSupplyEpoch = amount;\r\n        uint256 epochTotal = amount * getMultiplyByEpoch(_currentEpoch) / MULTIPLY;\r\n        amount += epochTotal * (block.number - currentEpochBlock()) / EPOCH_PERIOD;\r\n        _totalSupplyBlock = amount;\r\n\r\n        updateEpoch();\r\n    }\r\n}\r\n\r\ncontract HTCTokenV3 is IERC20, Ownable, MiningToken {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint) public wards;\r\n\r\n    function rely(address usr) external auth {wards[usr] = 1;}\r\n\r\n    function deny(address usr) external auth {wards[usr] = 0;}\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"HTCTokenV3/not-authorized\");\r\n        _;\r\n    }\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    address private usdtToken = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public operationAddress = 0x60Ff6Acd28ff70563D0c45B8ed71E00d2E2297F0;\r\n    address public projct = 0x5649646d8C43c9c6586f2E6eCfAC6443Cd8D2162;\r\n    address private uniswapV2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    uint256 public fiveMinutesBlockNum = 100;\r\n\r\n    //sell & buy genesis fee\r\n    uint256 public buyAndSellGenesisFee = 40;\r\n    uint256 public reduceGenesisFee = 20;\r\n\r\n    uint256 public swapTokensAtAmount = 100000 * 1E18;\r\n\r\n    uint256 public _buyBurnFee = 5;\r\n    uint256 public _sellBurnFee = 15;\r\n\r\n    uint256 public _liquidityFee = 30;\r\n\r\n    uint256 public _rewardFee = 20;\r\n\r\n    uint256 public _whiteFee = 20;\r\n\r\n    uint256 public _burnFeeTotal;\r\n\r\n    address[30] public _whiteList;\r\n    address[25] public _topUserList;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name = \"HunterCoin\";\r\n    string private _symbol = \"HTC\";\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    bool inSwapAndLiquify;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n        address _uniswapV2Pair = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73).createPair(address(this), usdtToken);\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(operationAddress, true);\r\n        excludeFromFees(address(this), true);\r\n        //        excludeFromFees(projct, true);\r\n\r\n        _mintExclude[address(this)] = true;\r\n        _mintExclude[_uniswapV2Pair] = true;\r\n\r\n        _mint(projct, 5600000000 * 1e18);\r\n\r\n        _whiteList[0] = 0x7F346cf4929257885Ddd5E3C007c07EC5F4CF901;\r\n        _whiteList[1] = 0xf6F2A7A822F2a5A3ee2f3E1d2C38e8b9829031B0;\r\n        _whiteList[2] = 0x48C985d18178dcdc0F60Ff00E7125996a5dbA03B;\r\n        _whiteList[3] = 0xE93e952452EC80124304d9D811FBa46ABF4a4718;\r\n        _whiteList[4] = 0x7cBd33C3cc396E4228828D845D213ce422148438;\r\n        _whiteList[5] = 0x4B06ba6C1Eb3496F757E3cA12454679d89030DFC;\r\n        _whiteList[6] = 0x05D4E11625dAAb482EdbdeEDC001f0c9eD843d11;\r\n        _whiteList[7] = 0xcC12F1cE2bbC909D7F8b181acd7eB09A32a7Ed01;\r\n        _whiteList[8] = 0x22CCa8309F9517084F4C13eb0Ada247b69B5f5c3;\r\n        _whiteList[9] = 0xFBDAFf1902cfb65338977B6E75aC065876d1D64D;\r\n        _whiteList[10] = 0xe3121a102aC3Ca36983663F5247eB4E2400F8309;\r\n        _whiteList[11] = 0x9F230421B1F1803502Ab57e11218ba50cD9e3184;\r\n        _whiteList[12] = 0x4d97A2fF5138C86584754Af0622665A672C5ba17;\r\n        _whiteList[13] = 0x5788aD899b2557A2FCaBF1Eb5cb6Ee97c509104f;\r\n        _whiteList[14] = 0x1902C7f00B63Ca01ac35235cE2573bf834220adc;\r\n        _whiteList[15] = 0xf9Af5f25e50Bd7EbB8db7980972F46c3806778e0;\r\n        _whiteList[16] = 0xD44e83caA8eEC1432E52d162a4956532C1153D79;\r\n        _whiteList[17] = 0xaD4107eE5a617dDB165f5D68652a540c7429B0D0;\r\n        _whiteList[18] = 0xddb1203E869EDB39E2fBe3Fa6D9FF350bE8Bc100;\r\n        _whiteList[19] = 0xe540cf5AD7F1988B2e8D5447fF0609888Ba9202C;\r\n        _whiteList[20] = 0x7DD43E773f9D931bA273c3F6a0b8bE3498CAFF87;\r\n        _whiteList[21] = 0x82Bc053166754B9B95C3c540d67fa2184f98237a;\r\n        _whiteList[22] = 0xb71BB907a9F46df5feE754eBE9FaAab0A80DEb14;\r\n        _whiteList[23] = 0x18b8Ac842DdD2525d630cc17d2c332aFb47B5007;\r\n        _whiteList[24] = 0x9d1B3603054140b12039E04F0Af41c8a66b7B12D;\r\n        _whiteList[25] = 0xEeBBFf7c2873f4703Ee2BbC14303c21444F4786F;\r\n        _whiteList[26] = 0x8B3312a268b5FB62EB5636D879672d8C757076FE;\r\n        _whiteList[27] = 0x8B3312a268b5FB62EB5636D879672d8C757076FE;\r\n        _whiteList[28] = 0x8B3312a268b5FB62EB5636D879672d8C757076FE;\r\n        _whiteList[29] = 0x8B3312a268b5FB62EB5636D879672d8C757076FE;\r\n\r\n        _topUserList[0] = 0x622D2C6975E2d2aA4FB40A9f230b7Aa0E8a343cB;\r\n        _topUserList[1] = 0x702c838a589ae47fD2Cf5c11b39a7A8E1A0DC355;\r\n        _topUserList[2] = 0x83cBF803c459F090B0ab025d1a9cDe1BC8179173;\r\n        _topUserList[3] = 0xda9bD403bE011eC019Af39D42A7AFFAd9E9f33A8;\r\n        _topUserList[4] = 0xeD9815bAb5a7e256a5cffdF8820f88Bdd11d626a;\r\n        _topUserList[5] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[6] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[7] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[8] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[9] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[10] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[11] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[12] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[13] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[14] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[15] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[16] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[17] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[18] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[19] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[20] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[21] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[22] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[23] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n        _topUserList[24] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;\r\n    }\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override(MiningToken, IERC20) returns (uint256) {\r\n        return MiningToken.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override(MiningToken, IERC20) returns (uint256) {\r\n        return MiningToken.balanceOf(account);\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function totalBurn() public view returns (uint256) {\r\n        return _burnFeeTotal;\r\n    }\r\n\r\n    function setMintExclude(address account, bool state) external auth {\r\n        _mintExclude[account] = state;\r\n    }\r\n\r\n    function setOperation(address ust) external auth {\r\n        operationAddress = ust;\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 newAmount) external auth {\r\n        swapTokensAtAmount = newAmount;\r\n    }\r\n\r\n    function setmaxEpoch(uint256 maxEpoch) external auth {\r\n        maxepoch = maxEpoch;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public auth {\r\n        require(_isExcludedFromFees[account] != excluded, \"HTC: Account is already the value of 'excluded'\");\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) public auth {\r\n        require(automatedMarketMakerPairs[pair] != value, \"HTC: Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function topUserReward(uint256 rewardAmount) private {\r\n        uint256 perReward = rewardAmount.div(25);\r\n        for (uint i = 0; i < 25; i++) {\r\n            IERC20(usdtToken).transferFrom(operationAddress, _topUserList[i], perReward);\r\n        }\r\n    }\r\n\r\n    function getTopUserList() public view returns (address[25] memory){\r\n        return _topUserList;\r\n    }\r\n\r\n    function getWhiteList() public view returns (address[30] memory){\r\n        return _whiteList;\r\n    }\r\n\r\n    function setTopUserList(address _addr, uint _sort) public auth {\r\n        _topUserList[_sort] = _addr;\r\n    }\r\n\r\n    function setWhiteList(address _addr, uint _sort) public auth {\r\n        _whiteList[_sort] = _addr;\r\n    }\r\n\r\n    function whiteListReward(uint256 amount) private {\r\n        uint256 perReward = amount.div(30);\r\n        for (uint i = 0; i < 30; i++) {\r\n            IERC20(usdtToken).transferFrom(operationAddress, _whiteList[i], perReward);\r\n        }\r\n    }\r\n\r\n    function getGenesisFee() public view returns (uint256){\r\n        uint256 currentBlockNum = block.number;\r\n        uint256 times = currentBlockNum.sub(lastEpochBlock).div(fiveMinutesBlockNum);\r\n        uint256 genesisFee = times * reduceGenesisFee;\r\n        if (buyAndSellGenesisFee > genesisFee) {\r\n            return buyAndSellGenesisFee.sub(genesisFee);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        updateMining();\r\n\r\n        uint256 burnAmount;\r\n        bool takeFee = false;\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (address(this) != from && address(this) != to) {\r\n            if (canSwap && !automatedMarketMakerPairs[from]) {\r\n                swapAndLiquify(contractTokenBalance);\r\n            }\r\n\r\n            if (automatedMarketMakerPairs[from]) {\r\n                //buy\r\n                burnAmount = amount.mul(_buyBurnFee).div(1000);\r\n                takeFee = true;\r\n            } else if (automatedMarketMakerPairs[to]) {\r\n                //sell\r\n                burnAmount = amount.mul(_sellBurnFee).div(1000);\r\n                takeFee = true;\r\n            }\r\n\r\n            if (takeFee) {\r\n                uint256 genesisAmount = amount.mul(getGenesisFee()).div(1000);\r\n                _tokenTransfer(from, deadWallet, genesisAmount.add(burnAmount));\r\n                _burnFeeTotal = _burnFeeTotal.add(genesisAmount).add(burnAmount);\r\n\r\n                uint256 lpAmount = amount.mul(_liquidityFee).div(1000);\r\n                _tokenTransfer(from, address(this), lpAmount);\r\n\r\n                uint256 rewardAmount = amount.mul(_rewardFee).div(1000);\r\n                _tokenTransfer(from, address(this), rewardAmount);\r\n\r\n                uint256 whiteAmount = amount.mul(_whiteFee).div(1000);\r\n                _tokenTransfer(from, address(this), whiteAmount);\r\n\r\n                uint256 feeAmount = genesisAmount.add(burnAmount);\r\n                feeAmount = feeAmount.add(lpAmount).add(rewardAmount).add(whiteAmount);\r\n                amount = amount > feeAmount ? amount.sub(feeAmount) : 0;\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function init() public {\r\n        IERC20(address(this)).approve(uniswapV2Router, ~uint256(0));\r\n        IERC20(usdtToken).approve(uniswapV2Router, ~uint256(0));\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 swapAndLiquidityAmount = contractTokenBalance.mul(3).div(7);\r\n        uint256 half = swapAndLiquidityAmount.div(2);\r\n        uint256 otherHalf = swapAndLiquidityAmount.sub(half);\r\n\r\n        uint256 initialBalance = IERC20(usdtToken).balanceOf(address(operationAddress));\r\n\r\n        // swap tokens for USDT\r\n        swapTokensForUsdt(contractTokenBalance.sub(otherHalf));\r\n\r\n        // how much USDT did we just swap into?\r\n        uint256 newBalance = IERC20(usdtToken).balanceOf(address(operationAddress)).sub(initialBalance);\r\n        uint256 usdtLiquidityBalance = newBalance.mul(3).div(11);\r\n        uint256 usdtTopBalance = newBalance.sub(usdtLiquidityBalance).div(2);\r\n        uint256 usdtWhiteBalance = newBalance.sub(usdtLiquidityBalance).sub(usdtTopBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, usdtLiquidityBalance);\r\n\r\n        //reward\r\n        topUserReward(usdtTopBalance);\r\n        whiteListReward(usdtWhiteBalance);\r\n    }\r\n\r\n    function swapTokensForUsdt(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdtToken);\r\n\r\n        // make the swap\r\n        IUniswapV2Router(uniswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            operationAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {\r\n        IERC20(usdtToken).transferFrom(operationAddress, address(this), usdtAmount);\r\n\r\n        // add the liquidity\r\n        IUniswapV2Router(uniswapV2Router).addLiquidity(\r\n            address(this),\r\n            address(usdtToken),\r\n            tokenAmount,\r\n            usdtAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            operationAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function withdraw(address asses, uint256 amount, address ust) public auth {\r\n        IERC20(asses).transfer(ust, amount);\r\n    }\r\n\r\n\r\n    function _tokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        super._tokenTransfer(from, to, amount);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal override {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        require(!miningStarted, \"already start mining\");\r\n\r\n        super._mint(account, amount);\r\n\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        miningStarted = true;\r\n        start();\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPOCH_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"_setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_topUserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_whiteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_whiteList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAndSellGenesisFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fiveMinutesBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGenesisFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getMultiplyByEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopUserList\",\"outputs\":[{\"internalType\":\"address[25]\",\"name\":\"\",\"type\":\"address[25]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhiteList\",\"outputs\":[{\"internalType\":\"address[30]\",\"name\":\"\",\"type\":\"address[30]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxepoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projct\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceGenesisFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ust\",\"type\":\"address\"}],\"name\":\"setOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sort\",\"type\":\"uint256\"}],\"name\":\"setTopUserList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sort\",\"type\":\"uint256\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxEpoch\",\"type\":\"uint256\"}],\"name\":\"setmaxEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ust\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HTCTokenV3", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e90e6033f3d38fcfc9d1fd5797f1cea2fd098e17d04a7ca7f4c7569d0df6d95a"}