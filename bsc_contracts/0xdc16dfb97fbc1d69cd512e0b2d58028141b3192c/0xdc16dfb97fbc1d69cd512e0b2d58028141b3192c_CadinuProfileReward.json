{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/CadinuProfileReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ICadinuProfile {\\r\\n    function getUserProfile(address _userAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256, uint256, address, uint256, bool);\\r\\n}\\r\\n\\r\\nerror __errorWrongInputData();\\r\\nerror __errorUserNotRegistered();\\r\\nerror __errorUserPointsIsNotEnough();\\r\\nerror __errorExclusiveRewardIsTaken();\\r\\nerror __errorIndexOutOfRange();\\r\\nerror __errorCampaignIsEnded();\\r\\nerror __errorCannotBoostCampaign();\\r\\nerror __errorZeroIncrease();\\r\\nerror __ErrorCampaignIsNotStated();\\r\\nerror __errorCampaignIsNotEnded();\\r\\n\\r\\ncontract CadinuProfileReward is Ownable {\\r\\n    // Events\\r\\n    event CampaignStarted(uint256 id, address rewardToken);\\r\\n    event CampaignIsCharged(uint256 id, uint256 amount, uint256 totalAmountCharged);\\r\\n    event GlobalRewardWithdrawn(address user, uint256 campaignId, address rewardToken, uint256 amount);\\r\\n    event ExclusiveRewardWithdrawn(address user, uint256 campaignId, address rewardToken, uint256 amount);\\r\\n    event CampaignEnded(uint256 id);\\r\\n    event CampaignIsBoosted(uint256 id, uint256 globalIncreaseAmount, uint256 exclusiveIncreaseAmount);\\r\\n\\r\\n    constructor() Ownable(_msgSender()) {}\\r\\n\\r\\n    struct Campaign {\\r\\n        uint256 id;\\r\\n        address rewardToken;\\r\\n        uint256 exclusiveWinnerCount;\\r\\n        uint256[] exclusiveWinnerRewards;\\r\\n        uint256[] exclusiveWinnerPoints;\\r\\n        uint256 globalWinnerCount;\\r\\n        uint256[] globalWinnerRewards;\\r\\n        uint256[] globalWinnerPoints;\\r\\n        uint256 chargedAmount;\\r\\n        uint256 withdrawnAmount;\\r\\n        bool isStarted;\\r\\n        bool isBoosted;\\r\\n        bool isEnded;\\r\\n    }\\r\\n\\r\\n    struct ExclusiveData {\\r\\n        uint256 id;\\r\\n        bool[] takenExclusiveReward;\\r\\n        address[] winners;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        uint256 lastClaimPoints;\\r\\n        uint256 totalClaimReward;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Campaign) public cadinuCampaign;\\r\\n    mapping(address => User) public users;\\r\\n    mapping(uint256 => ExclusiveData) public exclusiveData;\\r\\n    address public constant PROFILE = 0xE78Ca4DaEACD4aD88F5873cf188625F5DD05781C;\\r\\n    uint256 public nextId = 0;\\r\\n\\r\\n    function startCampaign(\\r\\n        address _rewardToken,\\r\\n        uint256 _exclusiveWinnerCount,\\r\\n        uint256[] calldata _exclusiveWinnerRewards,\\r\\n        uint256[] calldata _exclusiveWinnerPoints,\\r\\n        uint256 _globalWinnerCount,\\r\\n        uint256[] calldata _globalWinnerRewards,\\r\\n        uint256[] calldata _globalWinnerPoints\\r\\n    ) external onlyOwner {\\r\\n        if (\\r\\n            _exclusiveWinnerRewards.length != _exclusiveWinnerCount\\r\\n                || _exclusiveWinnerPoints.length != _exclusiveWinnerCount\\r\\n                || _globalWinnerRewards.length != _globalWinnerCount || _globalWinnerPoints.length != _globalWinnerCount\\r\\n        ) {\\r\\n            revert __errorWrongInputData();\\r\\n        }\\r\\n        cadinuCampaign[nextId].id = nextId;\\r\\n        cadinuCampaign[nextId].rewardToken = _rewardToken;\\r\\n        cadinuCampaign[nextId].exclusiveWinnerCount = _exclusiveWinnerCount;\\r\\n        cadinuCampaign[nextId].globalWinnerCount = _globalWinnerCount;\\r\\n        cadinuCampaign[nextId].chargedAmount = 0;\\r\\n        cadinuCampaign[nextId].withdrawnAmount = 0;\\r\\n        cadinuCampaign[nextId].isStarted = true;\\r\\n        cadinuCampaign[nextId].isBoosted = false;\\r\\n        cadinuCampaign[nextId].isEnded = false;\\r\\n        exclusiveData[nextId].id = nextId;\\r\\n        exclusiveData[nextId].takenExclusiveReward = new bool[](_exclusiveWinnerCount);\\r\\n        exclusiveData[nextId].winners = new address[](_exclusiveWinnerCount);\\r\\n\\r\\n        for (uint256 ii = 0; ii < _exclusiveWinnerCount; ++ii) {\\r\\n            cadinuCampaign[nextId].exclusiveWinnerPoints.push(_exclusiveWinnerPoints[ii]);\\r\\n            cadinuCampaign[nextId].exclusiveWinnerRewards.push(_exclusiveWinnerRewards[ii]);\\r\\n        }\\r\\n        for (uint256 ii = 0; ii < _globalWinnerCount; ++ii) {\\r\\n            cadinuCampaign[nextId].globalWinnerPoints.push(_globalWinnerPoints[ii]);\\r\\n            cadinuCampaign[nextId].globalWinnerRewards.push(_globalWinnerRewards[ii]);\\r\\n        }\\r\\n        nextId += 1;\\r\\n        emit CampaignStarted(nextId - 1, _rewardToken);\\r\\n    }\\r\\n\\r\\n    function boostCampaign(uint256[] calldata _increaseGlobal, uint256[] calldata _increaseExclusive)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        uint256 id = nextId - 1;\\r\\n        uint256 sumExclusive = 0;\\r\\n        uint256 sumGlobal = 0;\\r\\n        if (cadinuCampaign[id].isStarted != true || cadinuCampaign[id].isEnded == true) {\\r\\n            revert __errorCannotBoostCampaign();\\r\\n        }\\r\\n        if (\\r\\n            _increaseExclusive.length != cadinuCampaign[id].exclusiveWinnerCount\\r\\n                || _increaseGlobal.length != cadinuCampaign[id].globalWinnerCount\\r\\n        ) {\\r\\n            revert __errorWrongInputData();\\r\\n        }\\r\\n        for (uint256 ii = 0; ii < cadinuCampaign[id].globalWinnerCount; ++ii) {\\r\\n            cadinuCampaign[id].globalWinnerRewards[ii] += _increaseGlobal[ii];\\r\\n            sumGlobal += _increaseGlobal[ii];\\r\\n        }\\r\\n        for (uint256 ii = 0; ii < cadinuCampaign[id].exclusiveWinnerCount; ++ii) {\\r\\n            cadinuCampaign[id].exclusiveWinnerRewards[ii] += _increaseExclusive[ii];\\r\\n            sumExclusive += _increaseExclusive[ii];\\r\\n        }\\r\\n        if (sumExclusive == 0 && sumGlobal == 0) revert __errorZeroIncrease();\\r\\n\\r\\n        emit CampaignIsBoosted(id, sumGlobal, sumExclusive);\\r\\n    }\\r\\n\\r\\n    function chargeCampaign(uint256 _amount) external onlyOwner {\\r\\n        uint256 currentId = nextId - 1;\\r\\n        if (cadinuCampaign[currentId].isEnded) revert __errorCampaignIsEnded();\\r\\n        IERC20(cadinuCampaign[currentId].rewardToken).transferFrom(_msgSender(), address(this), _amount);\\r\\n        cadinuCampaign[currentId].chargedAmount += _amount;\\r\\n        emit CampaignIsCharged(currentId, _amount, cadinuCampaign[currentId].chargedAmount);\\r\\n    }\\r\\n\\r\\n    function withdrawGlobalReward(uint256 _index) external {\\r\\n        uint256 currentId = nextId - 1;\\r\\n        (uint256 amount, uint256 pointsUsed) = calculateGlobalRewardData(_msgSender(), currentId, _index);\\r\\n        users[_msgSender()].lastClaimPoints += pointsUsed;\\r\\n        users[_msgSender()].totalClaimReward += amount;\\r\\n        cadinuCampaign[currentId].withdrawnAmount += amount;\\r\\n        IERC20(cadinuCampaign[currentId].rewardToken).transfer(_msgSender(), amount);\\r\\n        emit GlobalRewardWithdrawn(_msgSender(), currentId, cadinuCampaign[currentId].rewardToken, amount);\\r\\n    }\\r\\n\\r\\n    function calculateGlobalRewardData(address _user, uint256 _currentId, uint256 _index)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 amount, uint256 pointsUsed)\\r\\n    {\\r\\n        if (cadinuCampaign[_currentId].isEnded) revert __errorCampaignIsEnded();\\r\\n        if (_index >= cadinuCampaign[_currentId].globalWinnerCount) revert __errorIndexOutOfRange();\\r\\n        (, uint256 userPoints,,,, bool isRegistered) = ICadinuProfile(PROFILE).getUserProfile(_msgSender());\\r\\n        if (!isRegistered) revert __errorUserNotRegistered();\\r\\n        uint256 remainingPoints = userPoints - users[_user].lastClaimPoints;\\r\\n        if (remainingPoints < cadinuCampaign[_currentId].globalWinnerPoints[_index]) {\\r\\n            revert __errorUserPointsIsNotEnough();\\r\\n        }\\r\\n        amount = cadinuCampaign[_currentId].globalWinnerRewards[_index];\\r\\n        pointsUsed = cadinuCampaign[_currentId].globalWinnerPoints[_index];\\r\\n    }\\r\\n\\r\\n    function withdrawExclusiveReward(uint256 _index) external {\\r\\n        uint256 currentId = nextId - 1;\\r\\n        (uint256 amount, uint256 pointsUsed) = calculateExclusiveRewardData(_msgSender(), currentId, _index);\\r\\n        users[_msgSender()].lastClaimPoints += pointsUsed;\\r\\n        users[_msgSender()].totalClaimReward += amount;\\r\\n        cadinuCampaign[currentId].withdrawnAmount += amount;\\r\\n        exclusiveData[currentId].takenExclusiveReward[_index] = true;\\r\\n        exclusiveData[currentId].winners[_index] = _msgSender();\\r\\n        IERC20(cadinuCampaign[currentId].rewardToken).transfer(_msgSender(), amount);\\r\\n        emit ExclusiveRewardWithdrawn(_msgSender(), currentId, cadinuCampaign[currentId].rewardToken, amount);\\r\\n        if (_index == cadinuCampaign[currentId].exclusiveWinnerCount - 1) {\\r\\n            cadinuCampaign[currentId].isEnded = true;\\r\\n            emit CampaignEnded(currentId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateExclusiveRewardData(address _user, uint256 _currentId, uint256 _index)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 amount, uint256 pointsUsed)\\r\\n    {\\r\\n        if (cadinuCampaign[_currentId].isEnded) revert __errorCampaignIsEnded();\\r\\n        if (_index >= cadinuCampaign[_currentId].globalWinnerCount) revert __errorIndexOutOfRange();\\r\\n        if (exclusiveData[_currentId].takenExclusiveReward[_index]) revert __errorExclusiveRewardIsTaken();\\r\\n        (, uint256 userPoints,,,, bool isRegistered) = ICadinuProfile(PROFILE).getUserProfile(_msgSender());\\r\\n        if (!isRegistered) revert __errorUserNotRegistered();\\r\\n        uint256 remainingPoints = userPoints - users[_user].lastClaimPoints;\\r\\n        if (remainingPoints < cadinuCampaign[_currentId].exclusiveWinnerPoints[_index]) {\\r\\n            revert __errorUserPointsIsNotEnough();\\r\\n        }\\r\\n        amount = cadinuCampaign[_currentId].exclusiveWinnerRewards[_index];\\r\\n        pointsUsed = cadinuCampaign[_currentId].exclusiveWinnerPoints[_index];\\r\\n    }\\r\\n\\r\\n    function withdrawWrongToken(address _token) external onlyOwner {\\r\\n        uint256 currentId = nextId - 1;\\r\\n        if (_token != cadinuCampaign[currentId].rewardToken) {\\r\\n            IERC20(_token).transfer(_msgSender(), IERC20(_token).balanceOf(address(this)));\\r\\n        }\\r\\n        if (_token == cadinuCampaign[currentId].rewardToken && cadinuCampaign[currentId].isEnded) {\\r\\n            IERC20(_token).transfer(_msgSender(), IERC20(_token).balanceOf(address(this)));\\r\\n        }\\r\\n        if (_token == cadinuCampaign[currentId].rewardToken && !cadinuCampaign[currentId].isEnded) {\\r\\n            uint256 amount = IERC20(_token).balanceOf(address(this)) + cadinuCampaign[currentId].withdrawnAmount\\r\\n                - cadinuCampaign[currentId].chargedAmount;\\r\\n            IERC20(_token).transfer(_msgSender(), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUserUnusedPoints(address _user) external view returns (uint256) {\\r\\n        (, uint256 userPoints,,,,) = ICadinuProfile(PROFILE).getUserProfile(_msgSender());\\r\\n        return userPoints - users[_user].lastClaimPoints;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {Context} from \\\"../utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * The initial owner is set to the address provided by the deployer. This can\\r\\n * later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The caller account is not authorized to perform an operation.\\r\\n     */\\r\\n    error OwnableUnauthorizedAccount(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\r\\n     */\\r\\n    error OwnableInvalidOwner(address owner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address initialOwner) {\\r\\n        if (initialOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(initialOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            revert OwnableUnauthorizedAccount(_msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\r\\n     * caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `value` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorCampaignIsEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorCannotBoostCampaign\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorExclusiveRewardIsTaken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorUserNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorUserPointsIsNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorWrongInputData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"__errorZeroIncrease\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CampaignEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalIncreaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exclusiveIncreaseAmount\",\"type\":\"uint256\"}],\"name\":\"CampaignIsBoosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmountCharged\",\"type\":\"uint256\"}],\"name\":\"CampaignIsCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"CampaignStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExclusiveRewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GlobalRewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROFILE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_increaseGlobal\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_increaseExclusive\",\"type\":\"uint256[]\"}],\"name\":\"boostCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cadinuCampaign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exclusiveWinnerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalWinnerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chargedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBoosted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"calculateExclusiveRewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsUsed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"calculateGlobalRewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsUsed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"chargeCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exclusiveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserUnusedPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exclusiveWinnerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_exclusiveWinnerRewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_exclusiveWinnerPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_globalWinnerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_globalWinnerRewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_globalWinnerPoints\",\"type\":\"uint256[]\"}],\"name\":\"startCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastClaimPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"withdrawExclusiveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"withdrawGlobalReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawWrongToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CadinuProfileReward", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}