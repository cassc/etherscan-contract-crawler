{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n    address public nftAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public immutable _swapRouter;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 public walletLimit; \r\n    uint256 public limitBlocks = 1200; //1 hours\r\n    bool public enableWalletLimit;\r\n\r\n    uint256 public _buyLPDividendFee = 100; //\u4e70\u5165lp\u5206\u7ea2 \uff0c\u672c\u5e01\r\n    uint256 public _buyDestroyFee = 200; //\u4e70\u5165\u9500\u6bc1\uff0c\u672c\u5e01\r\n    uint256 public _buyLPFee = 200; //\u4e70\u5165\u56de\u6d41 \uff0c\u672c\u5e01+wbnb\r\n\r\n    uint256 public _sellHoldDividendFee = 50; //\u5356\u51fa\u6301\u5e01\u5206\u7ea2\uff0c\u672c\u5e01\r\n    uint256 public _sellNFTFee = 150; //\u5356\u51fanft\uff0cwbnb\r\n    uint256 public _sellLPFee = 200; //\u5356\u51fa\u56de\u6d41,\u672c\u5e01+wbnb\r\n    uint256 public _sellFundFee = 100; //\u5356\u51fa\u57fa\u91d1\u4f1a\uff0cwbnb\r\n\r\n    uint256 public startTradeBlock;\r\n    address public immutable _mainPair;\r\n    address public  immutable _weth;\r\n\r\n    DividendDistributor public _holderDividend;\r\n    DividendDistributor public _lpDividend;\r\n\r\n    address public lastLpProvider;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address NFTAddress, address FundAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _weth = swapRouter.WETH();\r\n        address mainPair = swapFactory.createPair(address(this), _weth);\r\n        _swapPairList[mainPair] = true;\r\n\r\n        _mainPair = mainPair;\r\n\r\n        uint256 tokenDecimals = 10 ** Decimals;\r\n        uint256 total = Supply * tokenDecimals;\r\n        _tTotal = total;\r\n\r\n        walletLimit = 200000000000 * tokenDecimals;\r\n\r\n        _balances[msg.sender] = total;\r\n        emit Transfer(address(0), msg.sender, total);\r\n\r\n        fundAddress = FundAddress;\r\n        nftAddress = NFTAddress;\r\n\r\n        _holderDividend = new DividendDistributor(address(this),address(this));\r\n        _lpDividend = new DividendDistributor(address(this),_mainPair);\r\n\r\n        _feeWhiteList[NFTAddress] = true;\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[nftAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(_holderDividend)] = true;\r\n        _feeWhiteList[address(_lpDividend)] = true;\r\n\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        address mainPair = _mainPair;\r\n        bool isAddLP;\r\n        bool takeFee;\r\n        bool isRemoveLP;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                takeFee = true;\r\n                if (to == _mainPair) {\r\n                    isAddLP = _isAddLiquidity();\r\n                    if (isAddLP) {\r\n                        takeFee = false;\r\n                        lastLpProvider = from;\r\n                    }\r\n                }\r\n\r\n                // takeFee = false; //onlyTest\r\n                if(!isAddLP) require(startTradeBlock>0,\"not open\");\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if(!_feeWhiteList[to] && enableWalletLimit && !_swapPairList[to]  && startTradeBlock + limitBlocks < block.number){\r\n            require(balanceOf(to) <= walletLimit,\"exceed wallet limit!\");\r\n        }\r\n\r\n        //add to  holder dividend\r\n        if(from != address(this) && !_swapPairList[from] && balanceOf(from)>0 ){\r\n            _holderDividend.addProvider(from);\r\n        }\r\n\r\n        if(to != address(this) && !_swapPairList[to] && balanceOf(to)>0 ){\r\n            _holderDividend.addProvider(to);\r\n        }\r\n\r\n        //add to lp dividend\r\n        if(lastLpProvider!=address(0)){\r\n            _lpDividend.addProvider(lastLpProvider);\r\n        }\r\n\r\n        if (!inSwap && from != address(this)&& !isAddLP && !isRemoveLP) {\r\n            if (to == mainPair) {\r\n                //\u89e6\u53d1\u6301\u5e01\u5206\u7ea2\u3002\r\n                _holderDividend.process(500000);\r\n            }else if(from == mainPair){\r\n                //\u89e6\u53d1lp\u5206\u7ea2\r\n                _lpDividend.process(500000);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity() internal view  returns (bool isAdd){\r\n        isAdd =  address(_swapRouter).balance > 0;\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            fundAddress,\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 senderBalance = _balances[sender];\r\n        senderBalance -= tAmount;\r\n        _balances[sender] = senderBalance;\r\n\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            bool isSell;\r\n            uint256 swapFeeAmount;\r\n            uint256 destroyFeeAmount;\r\n            if (_swapPairList[sender]) {//Buy\r\n                //lp\u5206\u7ea2\u5668\r\n                uint256 _buyLPDividendAmount = tAmount * (_buyLPDividendFee ) / 10000;\r\n                _takeTransfer(sender, address(_lpDividend), _buyLPDividendAmount);\r\n\r\n                feeAmount+=_buyLPDividendAmount;\r\n                swapFeeAmount = tAmount * (_buyLPFee ) / 10000;\r\n                destroyFeeAmount = tAmount * _buyDestroyFee / 10000;\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                isSell = true;\r\n                //\u6301\u5e01\u5206\u7ea2\u5668\r\n                uint256 _sellHoldDividendAmount = tAmount * (_sellHoldDividendFee ) / 10000;\r\n                _takeTransfer(sender, address(_holderDividend), _sellHoldDividendAmount);\r\n\r\n                feeAmount+=_sellHoldDividendAmount;\r\n                swapFeeAmount = tAmount * (_sellNFTFee + _sellLPFee + _sellFundFee) / 10000;\r\n            }\r\n\r\n            if (swapFeeAmount > 0) {\r\n                feeAmount += swapFeeAmount;\r\n                _takeTransfer(sender, address(this), swapFeeAmount);\r\n            }\r\n\r\n            if (destroyFeeAmount > 0) {\r\n                feeAmount += destroyFeeAmount;\r\n                _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyFeeAmount);\r\n            }\r\n\r\n            if (isSell && !inSwap) {\r\n                uint256 contractTokenBalance = _balances[address(this)];\r\n                uint256 numToSell = swapFeeAmount * 230 / 100;\r\n                if (numToSell > contractTokenBalance) {\r\n                    numToSell = contractTokenBalance;\r\n                }\r\n                swapTokenForFund(numToSell);\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) public lockTheSwap {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 lpFee = _buyLPFee + _sellLPFee;\r\n        uint256 fundFee =  _sellFundFee;\r\n        uint256 NFTFee = _sellNFTFee;\r\n        uint256 totalFee = lpFee + fundFee + NFTFee;\r\n\r\n        address distributor = address(this);\r\n        uint256 balance = distributor.balance;\r\n\r\n        uint256 lpAmount = tokenAmount * (lpFee/2) / totalFee;\r\n        totalFee -= lpFee / 2;\r\n\r\n        address weth = _weth;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = weth;\r\n        _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            distributor,\r\n            block.timestamp\r\n        );\r\n\r\n        balance = distributor.balance - balance;\r\n\r\n        uint256 fundBalance = balance * fundFee / totalFee;\r\n        if (fundBalance > 0) {\r\n            TransferHelper.safeTransferETH(fundAddress,fundBalance);\r\n        }\r\n\r\n        uint256 nftBalance = balance * NFTFee / totalFee;\r\n        if (nftBalance > 0) {\r\n           TransferHelper.safeTransferETH(nftAddress,nftBalance);\r\n        }\r\n\r\n        uint256 lpBalance = balance * (lpFee / 2)  / totalFee;\r\n        if (lpBalance > 0 && lpAmount > 0) {\r\n            _swapRouter.addLiquidityETH{value : lpBalance}(\r\n                address(this),\r\n                lpAmount,\r\n                0,\r\n                0,\r\n                fundAddress,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance(uint256 amount) external {\r\n        payable(fundAddress).transfer(amount);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        IERC20(token).transfer(fundAddress, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"T\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function setBuyFee(uint256 lpDividendFee, uint256 destroyFee, uint256 lpFee) external onlyOwner {\r\n        _buyLPDividendFee = lpDividendFee;\r\n        _buyDestroyFee = destroyFee;\r\n        _buyLPFee = lpFee;\r\n    }\r\n\r\n    function setSellFee(uint256 holdDividendFee, uint256 destroyFee, uint256 lpFee, uint256 fundFee) external onlyOwner {\r\n        _sellHoldDividendFee = holdDividendFee;\r\n        _sellNFTFee = destroyFee;\r\n        _sellLPFee = lpFee;\r\n        _sellFundFee = fundFee;\r\n    }\r\n\r\n    function setLPDividendExclude(address[] calldata addr,bool status) external onlyOwner{\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _lpDividend.setExclude(addr[i],status);\r\n        }\r\n    }\r\n\r\n    function setHolderDividendExclude(address[] calldata addr,bool status) external onlyOwner{\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _holderDividend.setExclude(addr[i],status);\r\n        }\r\n    }\r\n\r\n    function setEnableWalletLimit(bool status) external onlyOwner{\r\n        enableWalletLimit = status;\r\n    }\r\n}\r\n\r\ncontract SHJ  is AbsToken {\r\n    constructor() AbsToken(\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n        \"SHJ\",\r\n        \"SHJ\",\r\n        18,\r\n        1000000000000000,\r\n        address(0xA3cF44bCacC45FD23cb93354d299362291Cf24C3), //NFT\r\n        address(0xbE8e9B02983b6A0c9D7AE83Bf133D253Cb282dcA) //Fund\r\n    ){\r\n\r\n    }\r\n}\r\n\r\ncontract DividendDistributor {\r\n    address public _token;\r\n\r\n    address public _rewardToken;\r\n    address public _baseToken;\r\n\r\n    address[] public providers;\r\n    mapping(address => uint256) public providerIndex;\r\n    mapping(address => bool) public excludeProvider;\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public rewardCondition;\r\n    uint256 public progressLPTime;\r\n    uint256 public _progressBlockDebt = 300;\r\n\r\n    constructor (address rewardToken,address baseToken) {\r\n        _token = msg.sender;\r\n        _rewardToken = rewardToken;\r\n        _baseToken = baseToken;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    function getLPHolderLength() public view returns (uint256){\r\n        return providers.length;\r\n    }\r\n\r\n    function addProvider(address adr) external onlyToken {\r\n        if (0 == providerIndex[adr]) {\r\n            if (0 == providers.length || providers[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                providerIndex[adr] = providers.length;\r\n                providers.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function process(uint256 gas) external {\r\n        uint256 timestamp = block.timestamp;\r\n        if (progressLPTime + _progressBlockDebt > timestamp) {\r\n            return;\r\n        }\r\n        IERC20 baseToken = IERC20(_baseToken);\r\n        uint totalPair = baseToken.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        IERC20 token = IERC20(_rewardToken);\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        if (tokenBalance < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = providers.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = providers[currentIndex];\r\n            pairBalance = baseToken.balanceOf(shareHolder);\r\n            if (pairBalance > 0 && !excludeProvider[shareHolder]) {\r\n                amount = tokenBalance * pairBalance / totalPair;\r\n                if (amount > 0) {\r\n                    token.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPTime = timestamp;\r\n    }\r\n\r\n    function setExclude(address addr, bool enable) external onlyToken {\r\n        excludeProvider[addr] = enable;\r\n    }\r\n\r\n    function setRewardCondition(uint256 amount) external onlyToken {\r\n        rewardCondition = amount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_holderDividend\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpDividend\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellHoldDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLpProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setEnableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setHolderDividendExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setLPDividendExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"holdDividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokenForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SHJ", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19f84697fc4dea44dee725f810c0a870638d789208f4597655d2879af3aea628"}