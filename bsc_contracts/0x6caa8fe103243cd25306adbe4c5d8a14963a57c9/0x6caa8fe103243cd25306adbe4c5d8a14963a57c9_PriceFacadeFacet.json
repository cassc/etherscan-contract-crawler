{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/diamond/facets/PriceFacadeFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../security/OnlySelf.sol\\\";\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../interfaces/IPriceFacade.sol\\\";\\nimport \\\"../libraries/LibPriceFacade.sol\\\";\\nimport \\\"../libraries/LibAccessControlEnumerable.sol\\\";\\n\\ncontract PriceFacadeFacet is IPriceFacade, OnlySelf {\\n\\n    function initPriceFacadeFacet(uint16 lowPriceGapP, uint16 highPriceGapP, uint16 maxPriceDelay) external {\\n        LibAccessControlEnumerable.checkRole(Constants.DEPLOYER_ROLE);\\n        require(lowPriceGapP > 0 && highPriceGapP > lowPriceGapP && maxPriceDelay > 0, \\\"PriceFacadeFacet: Invalid parameters\\\");\\n        LibPriceFacade.initialize(lowPriceGapP, highPriceGapP, maxPriceDelay);\\n    }\\n\\n    // 0 means no update\\n    function setLowAndHighPriceGapP(uint16 lowPriceGapP, uint16 highPriceGapP) external override {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        require(lowPriceGapP > 0 || highPriceGapP > 0, \\\"PriceFacadeFacet: Update at least one\\\");\\n        LibPriceFacade.setLowAndHighPriceGapP(lowPriceGapP, highPriceGapP);\\n    }\\n\\n    function setTriggerLowAndHighPriceGapP(uint16 triggerLowPriceGapP, uint16 triggerHighPriceGapP) external override {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        require(triggerLowPriceGapP > 0 || triggerHighPriceGapP > 0, \\\"PriceFacadeFacet: Update at least one\\\");\\n        LibPriceFacade.setTriggerLowAndHighPriceGapP(triggerLowPriceGapP, triggerHighPriceGapP);\\n    }\\n\\n    function setMaxDelay(uint16 maxDelay) external override {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        require(maxDelay > 0, \\\"PriceFacadeFacet: maxDelay must be greater than 0\\\");\\n        LibPriceFacade.setMaxDelay(maxDelay);\\n    }\\n\\n    function getPriceFacadeConfig() external view override returns (Config memory) {\\n        LibPriceFacade.PriceFacadeStorage storage pfs = LibPriceFacade.priceFacadeStorage();\\n        return Config(pfs.lowPriceGapP, pfs.highPriceGapP, pfs.maxDelay, pfs.triggerLowPriceGapP, pfs.triggerHighPriceGapP);\\n    }\\n\\n    function getPrice(address token) external view override returns (uint256) {\\n        return LibPriceFacade.getPrice(token);\\n    }\\n\\n    function getPriceFromCacheOrOracle(address token) external view override returns (uint64 price, uint40 updatedAt) {\\n        return LibPriceFacade.getPriceFromCacheOrOracle(token);\\n    }\\n\\n    function requestPrice(bytes32 tradeHash, address token, RequestType requestType) external onlySelf override {\\n        LibPriceFacade.requestPrice(tradeHash, token, requestType);\\n    }\\n\\n    function requestPriceCallback(bytes32 requestId, uint64 price) external override {\\n        LibAccessControlEnumerable.checkRole(Constants.PRICE_FEEDER_ROLE);\\n        require(price > 0, \\\"PriceFacadeFacet: Invalid price\\\");\\n        LibPriceFacade.requestPriceCallback(requestId, price);\\n    }\\n\\n    function batchRequestPriceCallback(PriceCallbackParam[] calldata params) external override {\\n        LibAccessControlEnumerable.checkRole(Constants.PRICE_FEEDER_ROLE);\\n        for (uint256 i; i < params.length;) {\\n            require(params[i].price > 0, \\\"PriceFacadeFacet: Invalid price\\\");\\n            LibPriceFacade.requestPriceCallback(params[i].requestId, params[i].price);\\n            unchecked {++i;}\\n        }\\n    }\\n\\n    function confirmTriggerPrice(address token, uint64 price) external onlySelf override returns (bool available, uint64 upper, uint64 lower) {\\n        LibPriceFacade.PriceFacadeStorage storage pfs = LibPriceFacade.priceFacadeStorage();\\n        (uint64 beforePrice,) = LibPriceFacade.getPriceFromCacheOrOracle(pfs, token);\\n        uint64 priceGap = price > beforePrice ? price - beforePrice : beforePrice - price;\\n        uint gapPercentage = priceGap * 1e4 / beforePrice;\\n        if (gapPercentage > pfs.triggerHighPriceGapP) {\\n            return (false, 0, 0);\\n        }\\n        pfs.callbackPrices[token] = LibPriceFacade.LatestCallbackPrice(price, uint40(block.timestamp));\\n\\n        (upper, lower) = (price, price);\\n        if (gapPercentage >= pfs.triggerLowPriceGapP) {\\n            (upper, lower) = price > beforePrice ? (price, beforePrice) : (beforePrice, price);\\n        }\\n        return (true, upper, lower);\\n    }\\n}\\n\"\r\n    },\r\n    \"unchecked-counter/src/UC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                TYPE DEFINITION\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Counter type that bypasses checked arithmetic, designed to be used in for loops.\\n/// @dev Here's an example:\\n///\\n/// ```\\n/// for (UC i = ZERO; i < uc(100); i = i + ONE) {\\n///   i.into(); // or `i.unwrap()`\\n/// }\\n/// ```\\ntype UC is uint256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CONSTANTS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// Exports 1 as a typed constant.\\nUC constant ONE = UC.wrap(1);\\n\\n// Exports 0 as a typed constant.\\nUC constant ZERO = UC.wrap(0);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                LOGIC FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing { add as +, lt as <, lte as <= } for UC global;\\n\\n/// @notice Sums up `x` and `y` without checked arithmetic.\\nfunction add(UC x, UC y) pure returns (UC) {\\n    unchecked {\\n        return UC.wrap(UC.unwrap(x) + UC.unwrap(y));\\n    }\\n}\\n\\n/// @notice Checks if `x` is lower than `y`.\\nfunction lt(UC x, UC y) pure returns (bool) {\\n    return UC.unwrap(x) < UC.unwrap(y);\\n}\\n\\n/// @notice Checks if `x` is lower than or equal to `y`.\\nfunction lte(UC x, UC y) pure returns (bool) {\\n    return UC.unwrap(x) <= UC.unwrap(y);\\n}\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                CASTING FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing { into, unwrap } for UC global;\\n\\n/// @notice Alias for the `UC.unwrap` function.\\nfunction into(UC x) pure returns (uint256 result) {\\n    result = UC.unwrap(x);\\n}\\n\\n/// @notice Alias for the `UC.wrap` function.\\nfunction uc(uint256 x) pure returns (UC result) {\\n    result = UC.wrap(x);\\n}\\n\\n/// @notice Alias for the `UC.unwrap` function.\\nfunction unwrap(UC x) pure returns (uint256 result) {\\n    result = UC.unwrap(x);\\n}\\n\\n/// @notice Alias for the `UC.wrap` function.\\nfunction wrap(uint256 x) pure returns (UC result) {\\n    result = UC.wrap(x);\\n}\\n\"\r\n    },\r\n    \"/contracts/utils/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../dependencies/IWBNB.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    uint constant public BNB_CHAIN = 56;\\n    address constant public BNB_CHAIN_WRAPPED = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    uint constant public BNB_CHAIN_TESTNET = 97;\\n    address constant public BNB_CHAIN_TESTNET_WRAPPED = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;\\n\\n    uint constant public ARBITRUM_ONE = 42161;\\n    address constant public ARBITRUM_ONE_WRAPPED = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\\n\\n    uint constant public ARBITRUM_GOERLI = 421613;\\n    address constant public ARBITRUM_GOERLI_WRAPPED = 0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3;\\n\\n    function transfer(address token, address to, uint256 amount) internal {\\n        if (token != nativeWrapped()) {\\n            IERC20(token).safeTransfer(to, amount);\\n        } else {\\n            IWBNB(token).withdraw(amount);\\n            payable(to).sendValue(amount);\\n        }\\n    }\\n\\n    function transferFrom(address token, address from, uint256 amount) internal {\\n        if (token != nativeWrapped()) {\\n            IERC20(token).safeTransferFrom(from, address(this), amount);\\n        } else {\\n            require(msg.value >= amount, \\\"insufficient transfers\\\");\\n            IWBNB(token).deposit{value: amount}();\\n        }\\n    }\\n\\n    function nativeWrapped() internal view returns (address) {\\n        uint256 chainId = block.chainid;\\n        if (chainId == BNB_CHAIN) {\\n            return BNB_CHAIN_WRAPPED;\\n        } else if (chainId == BNB_CHAIN_TESTNET) {\\n            return BNB_CHAIN_TESTNET_WRAPPED;\\n        } else if (chainId == ARBITRUM_ONE) {\\n            return ARBITRUM_ONE_WRAPPED;\\n        } else if (chainId == ARBITRUM_GOERLI) {\\n            return ARBITRUM_GOERLI_WRAPPED;\\n        } else {\\n            revert(\\\"unsupported chain id\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nerror ZeroAddress();\\n\\ninterface IPriceFacadeError {\\n    error NonexistentRequestId(bytes32 requestId);\\n}\"\r\n    },\r\n    \"/contracts/utils/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype Price8 is uint64;\\ntype Qty10 is uint80;\\ntype Usd18 is uint96;\\n\\nlibrary Constants {\\n\\n    /*-------------------------------- Role --------------------------------*/\\n    // 0x0000000000000000000000000000000000000000000000000000000000000000\\n    bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\n    // 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\\n    bytes32 constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // 0xfc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c\\n    bytes32 constant DEPLOYER_ROLE = keccak256(\\\"DEPLOYER_ROLE\\\");\\n    // 0x62150a51582c26f4255242a3c4ca35fb04250e7315069523d650676aed01a56a\\n    bytes32 constant TOKEN_OPERATOR_ROLE = keccak256(\\\"TOKEN_OPERATOR_ROLE\\\");\\n    // 0xa6fbd0d4ef0ac50b4de984ab8f303863596293cce6d67dd6111979bcf56abe74\\n    bytes32 constant STAKE_OPERATOR_ROLE = keccak256(\\\"STAKE_OPERATOR_ROLE\\\");\\n    // 0xc24d2c87036c9189cc45e221d5dff8eaffb4966ee49ea36b4ffc88a2d85bf890\\n    bytes32 constant PRICE_FEED_OPERATOR_ROLE = keccak256(\\\"PRICE_FEED_OPERATOR_ROLE\\\");\\n    // 0x04fcf77d802b9769438bfcbfc6eae4865484c9853501897657f1d28c3f3c603e\\n    bytes32 constant PAIR_OPERATOR_ROLE = keccak256(\\\"PAIR_OPERATOR_ROLE\\\");\\n    // 0xfc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab\\n    bytes32 constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n    // 0x4e89f34ce8e0125b1b19130806ace319a8a06b7e1b4d6ef98c0eac043b6f119a\\n    bytes32 constant PREDICTION_KEEPER_ROLE = keccak256(\\\"PREDICTION_KEEPER_ROLE\\\");\\n    // 0x7d867aa9d791a9a4be418f90a2f248aa2c5f1348317792a6f6412f94df9819f7\\n    bytes32 constant PRICE_FEEDER_ROLE = keccak256(\\\"PRICE_FEEDER_ROLE\\\");\\n    // 0x8227712ef8ad39d0f26f06731ef0df8665eb7ada7f41b1ee089adf3c238862a2\\n    bytes32 constant MONITOR_ROLE = keccak256(\\\"MONITOR_ROLE\\\");\\n\\n    /*-------------------------------- Decimals --------------------------------*/\\n    uint8 constant public PRICE_DECIMALS = 8;\\n    uint8 constant public QTY_DECIMALS = 10;\\n    uint8 constant public USD_DECIMALS = 18;\\n\\n    uint16 constant public BASIS_POINTS_DIVISOR = 1e4;\\n    uint16 constant public MAX_LEVERAGE = 1e3;\\n    int256 constant public FUNDING_FEE_RATE_DIVISOR = 1e18;\\n    uint8 constant public FEED_DELAY_BLOCK = 10;\\n    uint8 constant public MAX_REQUESTS_PER_PAIR_IN_BLOCK = 100;\\n    uint256 constant public TIME_LOCK_DELAY = 2 hours;\\n    uint256 constant public TIME_LOCK_GRACE_PERIOD = 24 hours;\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/security/OnlySelf.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nabstract contract OnlySelf {\\n\\n    // Functions that add the onlySelf modifier can eliminate many basic parameter checks, such as address != address(0), etc.\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\\"only self call\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/libraries/LibPriceFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../interfaces/ITradingOpen.sol\\\";\\nimport \\\"../interfaces/ITradingClose.sol\\\";\\nimport \\\"../interfaces/IPredictUpDown.sol\\\";\\nimport {RequestType} from \\\"../interfaces/IPriceFacade.sol\\\";\\nimport \\\"./LibChainlinkPrice.sol\\\";\\nimport {IPriceFacadeError} from \\\"../../utils/Errors.sol\\\";\\nimport {ZERO, ONE, UC, uc, into} from \\\"unchecked-counter/src/UC.sol\\\";\\n\\nlibrary LibPriceFacade {\\n\\n    bytes32 constant PRICE_FACADE_POSITION = keccak256(\\\"apollox.price.facade.storage\\\");\\n\\n    struct LatestCallbackPrice {\\n        uint64 price;\\n        uint40 timestamp;\\n    }\\n\\n    struct IdInfo {\\n        bytes32 id;\\n        RequestType requestType;\\n    }\\n\\n    struct PendingPrice {\\n        uint256 blockNumber;\\n        address token;\\n        IdInfo[] ids;\\n    }\\n\\n    struct PriceFacadeStorage {\\n        // BTC/ETH/BNB/.../ =>\\n        mapping(address => LatestCallbackPrice) callbackPrices;\\n        // keccak256(token, block.number) =>\\n        mapping(bytes32 => PendingPrice) pendingPrices;\\n        uint16 lowPriceGapP;   // 1e4\\n        uint16 highPriceGapP;  // 1e4\\n        uint16 maxDelay;\\n        uint16 triggerLowPriceGapP;   // 1e4\\n        uint16 triggerHighPriceGapP;  // 1e4\\n    }\\n\\n    function priceFacadeStorage() internal pure returns (PriceFacadeStorage storage pfs) {\\n        bytes32 position = PRICE_FACADE_POSITION;\\n        assembly {\\n            pfs.slot := position\\n        }\\n    }\\n\\n    event SetLowPriceGapP(uint16 indexed oldLowPriceGapP, uint16 indexed lowPriceGapP);\\n    event SetHighPriceGapP(uint16 indexed oldHighPriceGapP, uint16 indexed highPriceGapP);\\n    event SetTriggerLowPriceGapP(uint16 indexed old, uint16 indexed triggerLowPriceGapP);\\n    event SetTriggerHighPriceGapP(uint16 indexed old, uint16 indexed triggerHighPriceGapP);\\n    event SetMaxDelay(uint16 indexed oldMaxDelay, uint16 indexed maxDelay);\\n    event RequestPrice(bytes32 indexed requestId, address indexed token);\\n    event PriceRejected(\\n        address indexed feeder, bytes32 indexed requestId, address indexed token,\\n        uint64 price, uint64 beforePrice, uint40 updatedAt\\n    );\\n    event PriceUpdated(\\n        address indexed feeder, bytes32 indexed requestId,\\n        address indexed token, uint64 price\\n    );\\n\\n    function initialize(uint16 lowPriceGapP, uint16 highPriceGapP, uint16 maxDelay) internal {\\n        PriceFacadeStorage storage pfs = priceFacadeStorage();\\n        require(pfs.lowPriceGapP == 0 && pfs.highPriceGapP == 0 && pfs.maxDelay == 0, \\\"LibPriceFacade: Already initialized\\\");\\n        _setLowPriceGapP(pfs, lowPriceGapP);\\n        _setHighPriceGapP(pfs, highPriceGapP);\\n        setMaxDelay(maxDelay);\\n    }\\n\\n    function _setLowPriceGapP(PriceFacadeStorage storage pfs, uint16 lowPriceGapP) private {\\n        uint16 old = pfs.lowPriceGapP;\\n        pfs.lowPriceGapP = lowPriceGapP;\\n        emit SetLowPriceGapP(old, lowPriceGapP);\\n    }\\n\\n    function _setHighPriceGapP(PriceFacadeStorage storage pfs, uint16 highPriceGapP) private {\\n        uint16 old = pfs.highPriceGapP;\\n        pfs.highPriceGapP = highPriceGapP;\\n        emit SetHighPriceGapP(old, highPriceGapP);\\n    }\\n\\n    function setLowAndHighPriceGapP(uint16 lowPriceGapP, uint16 highPriceGapP) internal {\\n        PriceFacadeStorage storage pfs = priceFacadeStorage();\\n        if (lowPriceGapP > 0 && highPriceGapP > 0) {\\n            require(highPriceGapP > lowPriceGapP, \\\"LibPriceFacade: highPriceGapP must be greater than lowPriceGapP\\\");\\n            _setLowPriceGapP(pfs, lowPriceGapP);\\n            _setHighPriceGapP(pfs, highPriceGapP);\\n        } else if (lowPriceGapP > 0) {\\n            require(pfs.highPriceGapP > lowPriceGapP, \\\"LibPriceFacade: highPriceGapP must be greater than lowPriceGapP\\\");\\n            _setLowPriceGapP(pfs, lowPriceGapP);\\n        } else {\\n            require(highPriceGapP > pfs.lowPriceGapP, \\\"LibPriceFacade: highPriceGapP must be greater than lowPriceGapP\\\");\\n            _setHighPriceGapP(pfs, highPriceGapP);\\n        }\\n    }\\n\\n    function _setTriggerLowPriceGapP(PriceFacadeStorage storage pfs, uint16 triggerLowPriceGapP) private {\\n        uint16 old = pfs.triggerLowPriceGapP;\\n        pfs.triggerLowPriceGapP = triggerLowPriceGapP;\\n        emit SetTriggerLowPriceGapP(old, triggerLowPriceGapP);\\n    }\\n\\n    function _setTriggerHighPriceGapP(PriceFacadeStorage storage pfs, uint16 triggerHighPriceGapP) private {\\n        uint16 old = pfs.triggerHighPriceGapP;\\n        pfs.triggerHighPriceGapP = triggerHighPriceGapP;\\n        emit SetTriggerHighPriceGapP(old, triggerHighPriceGapP);\\n    }\\n\\n    function setTriggerLowAndHighPriceGapP(uint16 triggerLowPriceGapP, uint16 triggerHighPriceGapP) internal {\\n        PriceFacadeStorage storage pfs = priceFacadeStorage();\\n        if (triggerLowPriceGapP > 0 && triggerHighPriceGapP > 0) {\\n            require(triggerHighPriceGapP > triggerLowPriceGapP, \\\"LibPriceFacade: triggerHighPriceGapP must be greater than triggerLowPriceGapP\\\");\\n            _setTriggerLowPriceGapP(pfs, triggerLowPriceGapP);\\n            _setTriggerHighPriceGapP(pfs, triggerHighPriceGapP);\\n        } else if (triggerLowPriceGapP > 0) {\\n            require(pfs.triggerHighPriceGapP > triggerLowPriceGapP, \\\"LibPriceFacade: triggerHighPriceGapP must be greater than triggerLowPriceGapP\\\");\\n            _setTriggerLowPriceGapP(pfs, triggerLowPriceGapP);\\n        } else {\\n            require(triggerHighPriceGapP > pfs.triggerLowPriceGapP, \\\"LibPriceFacade: triggerHighPriceGapP must be greater than triggerLowPriceGapP\\\");\\n            _setTriggerHighPriceGapP(pfs, triggerHighPriceGapP);\\n        }\\n    }\\n\\n    function setMaxDelay(uint16 maxDelay) internal {\\n        PriceFacadeStorage storage pfs = priceFacadeStorage();\\n        uint16 old = pfs.maxDelay;\\n        pfs.maxDelay = maxDelay;\\n        emit SetMaxDelay(old, maxDelay);\\n    }\\n\\n    function getPrice(address token) internal view returns (uint256) {\\n        (uint256 price, uint8 decimals,) = LibChainlinkPrice.getPriceFromChainlink(token);\\n        return decimals == 8 ? price : price * 1e8 / (10 ** decimals);\\n    }\\n\\n    function requestPrice(bytes32 id, address token, RequestType requestType) internal {\\n        PriceFacadeStorage storage pfs = priceFacadeStorage();\\n        bytes32 requestId = keccak256(abi.encode(token, block.number));\\n        PendingPrice storage pendingPrice = pfs.pendingPrices[requestId];\\n        require(pendingPrice.ids.length < Constants.MAX_REQUESTS_PER_PAIR_IN_BLOCK, \\\"LibPriceFacade: The requests for price retrieval are too frequent.\\\");\\n        pendingPrice.ids.push(IdInfo(id, requestType));\\n        if (pendingPrice.blockNumber != block.number) {\\n            pendingPrice.token = token;\\n            pendingPrice.blockNumber = block.number;\\n            emit RequestPrice(requestId, token);\\n        }\\n    }\\n\\n    function requestPriceCallback(bytes32 requestId, uint64 price) internal {\\n        PriceFacadeStorage storage pfs = priceFacadeStorage();\\n        PendingPrice memory pendingPrice = pfs.pendingPrices[requestId];\\n        IdInfo[] memory ids = pendingPrice.ids;\\n        if (pendingPrice.blockNumber == 0 || ids.length == 0) revert IPriceFacadeError.NonexistentRequestId(requestId);\\n\\n        (uint64 beforePrice, uint40 updatedAt) = getPriceFromCacheOrOracle(pfs, pendingPrice.token);\\n        uint64 priceGap = price > beforePrice ? price - beforePrice : beforePrice - price;\\n        uint gapPercentage = priceGap * 1e4 / beforePrice;\\n        // Excessive price difference. Reject this price\\n        if (gapPercentage > pfs.highPriceGapP) {\\n            emit PriceRejected(msg.sender, requestId, pendingPrice.token, price, beforePrice, updatedAt);\\n            return;\\n        }\\n        LatestCallbackPrice storage cachePrice = pfs.callbackPrices[pendingPrice.token];\\n        cachePrice.timestamp = uint40(block.timestamp);\\n        cachePrice.price = price;\\n        // The time interval is too long.\\n        // receive the current price but not use it\\n        // and wait for the next price to be fed.\\n        if (block.timestamp > updatedAt + pfs.maxDelay) {\\n            emit PriceRejected(msg.sender, requestId, pendingPrice.token, price, beforePrice, updatedAt);\\n            return;\\n        }\\n        uint64 upperPrice = price;\\n        uint64 lowerPrice = price;\\n        if (gapPercentage > pfs.lowPriceGapP) {\\n            (upperPrice, lowerPrice) = price > beforePrice ? (price, beforePrice) : (beforePrice, price);\\n        }\\n        for (UC i = ZERO; i < uc(ids.length); i = i + ONE) {\\n            IdInfo memory idInfo = ids[i.into()];\\n            if (idInfo.requestType == RequestType.OPEN) {\\n                try ITradingOpen(address(this)).marketTradeCallback(idInfo.id, upperPrice, lowerPrice) {} catch Error(string memory) {}\\n            } else if (idInfo.requestType == RequestType.CLOSE) {\\n                try ITradingClose(address(this)).closeTradeCallback(idInfo.id, upperPrice, lowerPrice) {} catch Error(string memory) {}\\n            } else {\\n                try IPredictUpDown(address(this)).predictionCallback(idInfo.id, price) {} catch Error(string memory) {}\\n            }\\n        }\\n        // Deleting data can save a little gas\\n        emit PriceUpdated(msg.sender, requestId, pendingPrice.token, price);\\n        delete pfs.pendingPrices[requestId];\\n    }\\n\\n    function getPriceFromCacheOrOracle(address token) internal view returns (uint64, uint40) {\\n        return getPriceFromCacheOrOracle(priceFacadeStorage(), token);\\n    }\\n\\n    function getPriceFromCacheOrOracle(PriceFacadeStorage storage pfs, address token) internal view returns (uint64, uint40) {\\n        LatestCallbackPrice memory cachePrice = pfs.callbackPrices[token];\\n        (uint256 price, uint8 decimals, uint256 oracleUpdatedAt) = LibChainlinkPrice.getPriceFromChainlink(token);\\n        require(price <= type(uint64).max && price * 1e8 / (10 ** decimals) <= type(uint64).max, \\\"LibPriceFacade: Invalid price\\\");\\n        uint40 updatedAt = cachePrice.timestamp >= oracleUpdatedAt ? cachePrice.timestamp : uint40(oracleUpdatedAt);\\n        // Take the newer price\\n        uint64 tokenPrice = cachePrice.timestamp >= oracleUpdatedAt ? cachePrice.price :\\n            (decimals == 8 ? uint64(price) : uint64(price * 1e8 / (10 ** decimals)));\\n        return (tokenPrice, updatedAt);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/libraries/LibPairsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./LibFeeManager.sol\\\";\\nimport \\\"../interfaces/IPriceFacade.sol\\\";\\nimport \\\"../interfaces/ITradingCore.sol\\\";\\nimport \\\"../interfaces/IPairsManager.sol\\\";\\nimport \\\"../interfaces/ISlippageManager.sol\\\";\\nimport {ZERO, ONE, UC, uc, into} from \\\"unchecked-counter/src/UC.sol\\\";\\n\\nlibrary LibPairsManager {\\n\\n    bytes32 constant PAIRS_MANAGER_STORAGE_POSITION = keccak256(\\\"apollox.pairs.manager.storage\\\");\\n\\n    /*\\n       tier    notionalUsd     maxLeverage      initialLostP        liqLostP\\n        1      (0 ~ 10,000]        20              95%                97.5%\\n        2    (10,000 ~ 50,000]     10              90%                 95%\\n        3    (50,000 ~ 100,000]     5              80%                 90%\\n        4    (100,000 ~ 200,000]    3              75%                 85%\\n        5    (200,000 ~ 500,000]    2              60%                 75%\\n        6    (500,000 ~ 800,000]    1              40%                 50%\\n    */\\n    struct LeverageMargin {\\n        uint256 notionalUsd;\\n        uint16 tier;\\n        uint16 maxLeverage;\\n        uint16 initialLostP; // 1e4\\n        uint16 liqLostP;     // 1e4\\n    }\\n\\n    struct SlippageConfig {\\n        string name;\\n        uint256 onePercentDepthAboveUsd;\\n        uint256 onePercentDepthBelowUsd;\\n        uint16 slippageLongP;       // 1e4\\n        uint16 slippageShortP;      // 1e4\\n        uint16 index;\\n        ISlippageManager.SlippageType slippageType;\\n        bool enable;\\n    }\\n\\n    struct Pair {\\n        // BTC/USD\\n        string name;\\n        // BTC address\\n        address base;\\n        uint16 basePosition;\\n        IPairsManager.PairType pairType;\\n        IPairsManager.PairStatus status;\\n\\n        uint16 slippageConfigIndex;\\n        uint16 slippagePosition;\\n\\n        uint16 feeConfigIndex;\\n        uint16 feePosition;\\n\\n        uint256 maxLongOiUsd;\\n        uint256 maxShortOiUsd;\\n        uint256 fundingFeePerBlockP;  // 1e18\\n        uint256 minFundingFeeR;       // 1e18\\n        uint256 maxFundingFeeR;       // 1e18\\n        // tier => LeverageMargin\\n        mapping(uint16 => LeverageMargin) leverageMargins;\\n        uint16 maxTier;\\n\\n        uint40 longHoldingFeeRate;    // 1e12\\n        uint40 shortHoldingFeeRate;   // 1e12\\n    }\\n\\n    struct PairsManagerStorage {\\n        // 0/1/2/3/.../ => SlippageConfig\\n        mapping(uint16 => SlippageConfig) slippageConfigs;\\n        // SlippageConfig index => pairs.base[]\\n        mapping(uint16 => address[]) slippageConfigPairs;\\n        mapping(address => Pair) pairs;\\n        address[] pairBases;\\n    }\\n\\n    function pairsManagerStorage() internal pure returns (PairsManagerStorage storage pms) {\\n        bytes32 position = PAIRS_MANAGER_STORAGE_POSITION;\\n        assembly {\\n            pms.slot := position\\n        }\\n    }\\n\\n    event AddPair(\\n        address indexed base,\\n        IPairsManager.PairType indexed pairType, IPairsManager.PairStatus indexed status,\\n        uint16 slippageConfigIndex, uint16 feeConfigIndex,\\n        string name, LeverageMargin[] leverageMargins\\n    );\\n    event UpdatePairMaxOi(\\n        address indexed base,\\n        uint256 oldMaxLongOiUsd, uint256 oldMaxShortOiUsd,\\n        uint256 maxLongOiUsd, uint256 maxShortOiUsd\\n    );\\n    event UpdatePairHoldingFeeRate(\\n        address indexed base,\\n        uint40 oldLongRate, uint40 oldShortRate,\\n        uint40 longRate, uint40 shortRate\\n    );\\n    event UpdatePairFundingFeeConfig(\\n        address indexed base,\\n        uint256 oldFundingFeePerBlockP, uint256 oldMinFundingFeeR, uint256 oldMaxFundingFeeR,\\n        uint256 fundingFeePerBlockP, uint256 minFundingFeeR, uint256 maxFundingFeeR\\n    );\\n    event RemovePair(address indexed base);\\n    event UpdatePairStatus(\\n        address indexed base,\\n        IPairsManager.PairStatus indexed oldStatus,\\n        IPairsManager.PairStatus indexed status\\n    );\\n    event UpdatePairSlippage(address indexed base, uint16 indexed oldSlippageConfigIndexed, uint16 indexed slippageConfigIndex);\\n    event UpdatePairFee(address indexed base, uint16 indexed oldFeeConfigIndex, uint16 indexed feeConfigIndex);\\n    event UpdatePairLeverageMargin(address indexed base, LeverageMargin[] leverageMargins);\\n\\n    function addPair(\\n        IPairsManager.PairSimple memory ps,\\n        uint16 slippageConfigIndex, uint16 feeConfigIndex,\\n        LeverageMargin[] calldata leverageMargins\\n    ) internal {\\n        PairsManagerStorage storage pms = pairsManagerStorage();\\n        require(pms.pairBases.length < 70, \\\"LibPairsManager: Exceed the maximum number\\\");\\n        Pair storage pair = pms.pairs[ps.base];\\n        require(pair.base == address(0), \\\"LibPairsManager: Pair already exists\\\");\\n        require(IPriceFacade(address(this)).getPrice(ps.base) > 0, \\\"LibPairsManager: No price feed has been configured for the pair\\\");\\n        {\\n            SlippageConfig memory slippageConfig = pms.slippageConfigs[slippageConfigIndex];\\n            require(slippageConfig.enable, \\\"LibPairsManager: Slippage configuration is not available\\\");\\n            (LibFeeManager.FeeConfig memory feeConfig, address[] storage feePairs) = LibFeeManager.getFeeConfigByIndex(feeConfigIndex);\\n            require(feeConfig.enable, \\\"LibPairsManager: Fee configuration is not available\\\");\\n\\n            pair.slippageConfigIndex = slippageConfigIndex;\\n            address[] storage slippagePairs = pms.slippageConfigPairs[slippageConfigIndex];\\n            pair.slippagePosition = uint16(slippagePairs.length);\\n            slippagePairs.push(ps.base);\\n\\n            pair.feeConfigIndex = feeConfigIndex;\\n            pair.feePosition = uint16(feePairs.length);\\n            feePairs.push(ps.base);\\n        }\\n        pair.name = ps.name;\\n        pair.base = ps.base;\\n        pair.basePosition = uint16(pms.pairBases.length);\\n        pms.pairBases.push(ps.base);\\n        pair.pairType = ps.pairType;\\n        pair.status = ps.status;\\n        pair.maxTier = uint16(leverageMargins.length);\\n        for (UC i = ONE; i <= uc(leverageMargins.length); i = i + ONE) {\\n            pair.leverageMargins[uint16(i.into())] = leverageMargins[uint16(i.into() - 1)];\\n        }\\n        emit AddPair(ps.base, ps.pairType, ps.status, slippageConfigIndex, feeConfigIndex, ps.name, leverageMargins);\\n    }\\n\\n    function updatePairMaxOi(address base, uint256 maxLongOiUsd, uint256 maxShortOiUsd) internal {\\n        PairsManagerStorage storage pms = pairsManagerStorage();\\n        Pair storage pair = pms.pairs[base];\\n        require(pair.base != address(0), \\\"LibPairsManager: Pair does not exist\\\");\\n\\n        uint256 oldMaxLongOiUsd = pair.maxLongOiUsd;\\n        uint256 oldMaxShortOiUsd = pair.maxShortOiUsd;\\n        pair.maxLongOiUsd = maxLongOiUsd;\\n        pair.maxShortOiUsd = maxShortOiUsd;\\n        emit UpdatePairMaxOi(base, oldMaxLongOiUsd, oldMaxShortOiUsd, maxLongOiUsd, maxShortOiUsd);\\n    }\\n\\n    function updatePairFundingFeeConfig(address base, uint256 fundingFeePerBlockP, uint256 minFundingFeeR, uint256 maxFundingFeeR) internal {\\n        require(maxFundingFeeR > minFundingFeeR, \\\"LibPairsManager: fundingFee parameter is invalid\\\");\\n        PairsManagerStorage storage pms = pairsManagerStorage();\\n        Pair storage pair = pms.pairs[base];\\n        require(pair.base != address(0), \\\"LibPairsManager: Pair does not exist\\\");\\n\\n        ITradingCore(address(this)).updatePairPositionInfo(base);\\n\\n        uint256 oldFundingFeePerBlockP = pair.fundingFeePerBlockP;\\n        uint256 oldMinFundingFeeR = pair.minFundingFeeR;\\n        uint256 oldMaxFundingFeeR = pair.maxFundingFeeR;\\n        pair.fundingFeePerBlockP = fundingFeePerBlockP;\\n        pair.minFundingFeeR = minFundingFeeR;\\n        pair.maxFundingFeeR = maxFundingFeeR;\\n        emit UpdatePairFundingFeeConfig(\\n            base, oldFundingFeePerBlockP, oldMinFundingFeeR, oldMaxFundingFeeR,\\n            fundingFeePerBlockP, minFundingFeeR, maxFundingFeeR\\n        );\\n    }\\n\\n    function updatePairHoldingFeeRate(address base, uint40 longHoldingFeeRate, uint40 shortHoldingFeeRate) internal {\\n        PairsManagerStorage storage pms = pairsManagerStorage();\\n        Pair storage pair = pms.pairs[base];\\n        require(pair.base != address(0), \\\"LibPairsManager: Pair does not exist\\\");\\n\\n        uint40 oldLongRate = pair.longHoldingFeeRate;\\n        uint40 oldShortRate = pair.shortHoldingFeeRate;\\n        pair.longHoldingFeeRate = longHoldingFeeRate;\\n        pair.shortHoldingFeeRate = shortHoldingFeeRate;\\n        emit UpdatePairHoldingFeeRate(base, oldLongRate, oldShortRate, longHoldingFeeRate, shortHoldingFeeRate);\\n    }\\n\\n    function removePair(address base) internal {\\n        PairsManagerStorage storage pms = pairsManagerStorage();\\n        Pair storage pair = pms.pairs[base];\\n        require(pair.base != address(0), \\\"LibPairsManager: Pair does not exist\\\");\\n\\n        ITradingCore.PairQty memory pairQty = ITradingCore(address(this)).getPairQty(base);\\n        require(pairQty.longQty == 0 && pairQty.shortQty == 0, \\\"LibPairsManager: Position is not 0\\\");\\n\\n        address[] storage slippagePairs = pms.slippageConfigPairs[pair.slippageConfigIndex];\\n        uint lastPositionSlippage = slippagePairs.length - 1;\\n        uint slippagePosition = pair.slippagePosition;\\n        if (slippagePosition != lastPositionSlippage) {\\n            address lastBase = slippagePairs[lastPositionSlippage];\\n            slippagePairs[slippagePosition] = lastBase;\\n            pms.pairs[lastBase].slippagePosition = uint16(slippagePosition);\\n        }\\n        slippagePairs.pop();\\n\\n        (, address[] storage feePairs) = LibFeeManager.getFeeConfigByIndex(pair.feeConfigIndex);\\n        uint lastPositionFee = feePairs.length - 1;\\n        uint feePosition = pair.feePosition;\\n        if (feePosition != lastPositionFee) {\\n            address lastBase = feePairs[lastPositionFee];\\n            feePairs[feePosition] = lastBase;\\n            pms.pairs[lastBase].feePosition = uint16(feePosition);\\n        }\\n        feePairs.pop();\\n\\n        address[] storage pairBases = pms.pairBases;\\n        uint lastPositionBase = pairBases.length - 1;\\n        uint basePosition = pair.basePosition;\\n        if (basePosition != lastPositionBase) {\\n            address lastBase = pairBases[lastPositionBase];\\n            pairBases[basePosition] = lastBase;\\n            pms.pairs[lastBase].basePosition = uint16(basePosition);\\n        }\\n        pairBases.pop();\\n        // Removing a pair does not delete the leverageMargins mapping data from the Pair struct.\\n        // If the pair is added again, a new leverageMargins value will be set during the addition,\\n        // which will overwrite the previous old value.\\n        delete pms.pairs[base];\\n        emit RemovePair(base);\\n    }\\n\\n    function updatePairStatus(address base, IPairsManager.PairStatus status) internal {\\n        Pair storage pair = pairsManagerStorage().pairs[base];\\n        require(pair.base != address(0), \\\"LibPairsManager: Pair does not exist\\\");\\n        require(pair.status != status, \\\"LibPairsManager: No change in status, no modification required\\\");\\n        IPairsManager.PairStatus oldStatus = pair.status;\\n        pair.status = status;\\n        emit UpdatePairStatus(base, oldStatus, status);\\n    }\\n\\n    function batchUpdatePairStatus(IPairsManager.PairType pairType, IPairsManager.PairStatus status) internal {\\n        PairsManagerStorage storage pms = pairsManagerStorage();\\n        address[] memory pairBases = pms.pairBases;\\n        for (UC i = ZERO; i < uc(pairBases.length); i = i + ONE) {\\n            Pair storage pair = pms.pairs[pairBases[i.into()]];\\n            if (pair.pairType == pairType) {\\n                IPairsManager.PairStatus oldStatus = pair.status;\\n                pair.status = status;\\n                emit UpdatePairStatus(pair.base, oldStatus, status);\\n            }\\n        }\\n    }\\n\\n    function updatePairSlippage(address base, uint16 slippageConfigIndex) internal {\\n        PairsManagerStorage storage pms = pairsManagerStorage();\\n        Pair storage pair = pms.pairs[base];\\n        require(pair.base != address(0), \\\"LibPairsManager: Pair does not exist\\\");\\n        SlippageConfig memory config = pms.slippageConfigs[slippageConfigIndex];\\n        require(config.enable, \\\"LibPairsManager: Slippage configuration is not available\\\");\\n\\n        uint16 oldSlippageConfigIndex = pair.slippageConfigIndex;\\n        address[] storage oldSlippagePairs = pms.slippageConfigPairs[oldSlippageConfigIndex];\\n        uint lastPositionSlippage = oldSlippagePairs.length - 1;\\n        uint oldSlippagePosition = pair.slippagePosition;\\n        if (oldSlippagePosition != lastPositionSlippage) {\\n            pms.pairs[oldSlippagePairs[lastPositionSlippage]].slippagePosition = uint16(oldSlippagePosition);\\n            oldSlippagePairs[oldSlippagePosition] = oldSlippagePairs[lastPositionSlippage];\\n        }\\n        oldSlippagePairs.pop();\\n\\n        pair.slippageConfigIndex = slippageConfigIndex;\\n        address[] storage slippagePairs = pms.slippageConfigPairs[slippageConfigIndex];\\n        pair.slippagePosition = uint16(slippagePairs.length);\\n        slippagePairs.push(base);\\n        emit UpdatePairSlippage(base, oldSlippageConfigIndex, slippageConfigIndex);\\n    }\\n\\n    function updatePairFee(address base, uint16 feeConfigIndex) internal {\\n        PairsManagerStorage storage pms = pairsManagerStorage();\\n        Pair storage pair = pms.pairs[base];\\n        require(pair.base != address(0), \\\"LibPairsManager: Pair does not exist\\\");\\n        (LibFeeManager.FeeConfig memory feeConfig, address[] storage feePairs) = LibFeeManager.getFeeConfigByIndex(feeConfigIndex);\\n        require(feeConfig.enable, \\\"LibPairsManager: Fee configuration is not available\\\");\\n\\n        uint16 oldFeeConfigIndex = pair.feeConfigIndex;\\n        (, address[] storage oldFeePairs) = LibFeeManager.getFeeConfigByIndex(oldFeeConfigIndex);\\n        uint lastPositionFee = oldFeePairs.length - 1;\\n        uint oldFeePosition = pair.feePosition;\\n        if (oldFeePosition != lastPositionFee) {\\n            pms.pairs[oldFeePairs[lastPositionFee]].feePosition = uint16(oldFeePosition);\\n            oldFeePairs[oldFeePosition] = oldFeePairs[lastPositionFee];\\n        }\\n        oldFeePairs.pop();\\n\\n        pair.feeConfigIndex = feeConfigIndex;\\n        pair.feePosition = uint16(feePairs.length);\\n        feePairs.push(base);\\n        emit UpdatePairFee(base, oldFeeConfigIndex, feeConfigIndex);\\n    }\\n\\n    function updatePairLeverageMargin(address base, LeverageMargin[] calldata leverageMargins) internal {\\n        PairsManagerStorage storage pms = pairsManagerStorage();\\n        Pair storage pair = pms.pairs[base];\\n        require(pair.base != address(0), \\\"LibPairsManager: Pair does not exist\\\");\\n\\n        uint maxTier = pair.maxTier > leverageMargins.length ? pair.maxTier : leverageMargins.length;\\n        for (UC i = ONE; i <= uc(maxTier); i = i + ONE) {\\n            if (i <= uc(leverageMargins.length)) {\\n                pair.leverageMargins[uint16(i.into())] = leverageMargins[uint16(i.into() - 1)];\\n            } else {\\n                delete pair.leverageMargins[uint16(i.into())];\\n            }\\n        }\\n        pair.maxTier = uint16(leverageMargins.length);\\n        emit UpdatePairLeverageMargin(base, leverageMargins);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/libraries/LibFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IFeeManager.sol\\\";\\nimport \\\"./LibBrokerManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary LibFeeManager {\\n\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 constant FEE_MANAGER_STORAGE_POSITION = keccak256(\\\"apollox.fee.manager.storage\\\");\\n\\n    struct FeeConfig {\\n        string name;\\n        uint16 index;\\n        uint16 openFeeP;     // 1e4\\n        uint16 closeFeeP;    // 1e4\\n        bool enable;\\n        uint24 shareP;       // 1e5\\n        uint24 minCloseFeeP; // 1e5\\n    }\\n\\n    struct FeeManagerStorage {\\n        // 0/1/2/3/.../ => FeeConfig\\n        mapping(uint16 => FeeConfig) feeConfigs;\\n        // feeConfig index => pair.base[]\\n        mapping(uint16 => address[]) feeConfigPairs;\\n        // USDT/BUSD/.../ => FeeDetail\\n        mapping(address => IFeeManager.FeeDetail) feeDetails;\\n        address daoRepurchase;\\n        address revenueAddress;\\n        // USDT/BUSD/.../ => Commission\\n        mapping(address token => LibBrokerManager.Commission) revenues;\\n    }\\n\\n    function feeManagerStorage() internal pure returns (FeeManagerStorage storage fms) {\\n        bytes32 position = FEE_MANAGER_STORAGE_POSITION;\\n        assembly {\\n            fms.slot := position\\n        }\\n    }\\n\\n    event AddFeeConfig(\\n        uint16 indexed index, uint16 openFeeP, uint16 closeFeeP, uint24 shareP, uint24 minCloseFeeP, string name\\n    );\\n    event RemoveFeeConfig(uint16 indexed index);\\n    event UpdateFeeConfig(uint16 indexed index,\\n        uint16 openFeeP, uint16 closeFeeP,\\n        uint24 shareP, uint24 minCloseFeeP\\n    );\\n    event SetDaoRepurchase(address indexed oldDaoRepurchase, address daoRepurchase);\\n    event SetRevenueAddress(address indexed oldRevenueAddress, address revenueAddress);\\n\\n    function initialize(address daoRepurchase, address revenueAddress) internal {\\n        FeeManagerStorage storage fms = feeManagerStorage();\\n        require(fms.daoRepurchase == address(0), \\\"LibFeeManager: Already initialized\\\");\\n        setDaoRepurchase(daoRepurchase);\\n        setRevenueAddress(revenueAddress);\\n        // default fee config\\n        fms.feeConfigs[0] = FeeConfig(\\\"Default Fee Rate\\\", 0, 8, 8, true, 0, 0);\\n        emit AddFeeConfig(0, 8, 8, 0, 0, \\\"Default Fee Rate\\\");\\n    }\\n\\n    function addFeeConfig(\\n        uint16 index, string calldata name, uint16 openFeeP, uint16 closeFeeP, uint24 shareP, uint24 minCloseFeeP\\n    ) internal {\\n        FeeManagerStorage storage fms = feeManagerStorage();\\n        FeeConfig storage config = fms.feeConfigs[index];\\n        require(!config.enable, \\\"LibFeeManager: Configuration already exists\\\");\\n        config.index = index;\\n        config.name = name;\\n        config.openFeeP = openFeeP;\\n        config.closeFeeP = closeFeeP;\\n        config.enable = true;\\n        config.shareP = shareP;\\n        config.minCloseFeeP = minCloseFeeP;\\n        emit AddFeeConfig(index, openFeeP, closeFeeP, shareP, minCloseFeeP, name);\\n    }\\n\\n    function removeFeeConfig(uint16 index) internal {\\n        FeeManagerStorage storage fms = feeManagerStorage();\\n        FeeConfig storage config = fms.feeConfigs[index];\\n        require(config.enable, \\\"LibFeeManager: Configuration not enabled\\\");\\n        require(fms.feeConfigPairs[index].length == 0, \\\"LibFeeManager: Cannot remove a configuration that is still in use\\\");\\n        delete fms.feeConfigs[index];\\n        emit RemoveFeeConfig(index);\\n    }\\n\\n    function updateFeeConfig(uint16 index, uint16 openFeeP, uint16 closeFeeP, uint24 shareP, uint24 minCloseFeeP) internal {\\n        FeeManagerStorage storage fms = feeManagerStorage();\\n        FeeConfig storage config = fms.feeConfigs[index];\\n        require(config.enable, \\\"LibFeeManager: Configuration not enabled\\\");\\n        config.openFeeP = openFeeP;\\n        config.closeFeeP = closeFeeP;\\n        config.shareP = shareP;\\n        config.minCloseFeeP = minCloseFeeP;\\n        emit UpdateFeeConfig(index, openFeeP, closeFeeP, shareP, minCloseFeeP);\\n    }\\n\\n    function setDaoRepurchase(address daoRepurchase) internal {\\n        require(daoRepurchase != address(0), \\\"LibFeeManager: daoRepurchase cannot be 0 address\\\");\\n        FeeManagerStorage storage fms = feeManagerStorage();\\n        address oldDaoRepurchase = fms.daoRepurchase;\\n        fms.daoRepurchase = daoRepurchase;\\n        emit SetDaoRepurchase(oldDaoRepurchase, daoRepurchase);\\n    }\\n\\n    function setRevenueAddress(address revenueAddress) internal {\\n        require(revenueAddress != address(0), \\\"LibFeeManager: revenueAddress cannot be 0 address\\\");\\n        FeeManagerStorage storage fms = feeManagerStorage();\\n        address oldRevenueAddress = fms.revenueAddress;\\n        fms.revenueAddress = revenueAddress;\\n        emit SetRevenueAddress(oldRevenueAddress, revenueAddress);\\n    }\\n\\n    function getFeeConfigByIndex(uint16 index) internal view returns (FeeConfig memory, address[] storage) {\\n        FeeManagerStorage storage fms = feeManagerStorage();\\n        return (fms.feeConfigs[index], fms.feeConfigPairs[index]);\\n    }\\n\\n    function chargeFee(address token, uint256 feeAmount, uint24 broker) internal returns (uint24 brokerId, uint256 brokerAmount, uint256 daoAmount, uint256 alpPoolAmount){\\n        FeeManagerStorage storage fms = feeManagerStorage();\\n        IFeeManager.FeeDetail storage detail = fms.feeDetails[token];\\n        detail.total += feeAmount;\\n\\n        (brokerAmount, brokerId, daoAmount, alpPoolAmount) = LibBrokerManager.updateBrokerCommission(token, feeAmount, broker);\\n        detail.brokerAmount += brokerAmount;\\n\\n        if (daoAmount > 0) {\\n            // The buyback address prefers to receive wrapped tokens since LPs are composed of wrapped tokens, for example: WBNB-APX LP.\\n            IERC20(token).safeTransfer(fms.daoRepurchase, daoAmount);\\n            detail.daoAmount += daoAmount;\\n        }\\n\\n        if (alpPoolAmount > 0) {\\n            IVault(address(this)).increase(token, alpPoolAmount);\\n            detail.alpPoolAmount += alpPoolAmount;\\n        }\\n\\n        uint256 revenue = feeAmount - brokerAmount - daoAmount - alpPoolAmount;\\n        if (revenue > 0) {\\n            LibBrokerManager.Commission storage c = fms.revenues[token];\\n            c.total += revenue;\\n            c.pending += revenue;\\n        }\\n        return (brokerId, brokerAmount, daoAmount, alpPoolAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/libraries/LibChainlinkPrice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary LibChainlinkPrice {\\n\\n    bytes32 constant CHAINLINK_PRICE_POSITION = keccak256(\\\"apollox.chainlink.price.storage\\\");\\n\\n    struct PriceFeed {\\n        address tokenAddress;\\n        address feedAddress;\\n        uint32 tokenAddressPosition;\\n    }\\n\\n    struct ChainlinkPriceStorage {\\n        mapping(address => PriceFeed) priceFeeds;\\n        address[] tokenAddresses;\\n    }\\n\\n    function chainlinkPriceStorage() internal pure returns (ChainlinkPriceStorage storage cps) {\\n        bytes32 position = CHAINLINK_PRICE_POSITION;\\n        assembly {\\n            cps.slot := position\\n        }\\n    }\\n\\n    event SupportChainlinkPriceFeed(address indexed token, address indexed priceFeed, bool supported);\\n\\n    function addChainlinkPriceFeed(address tokenAddress, address priceFeed) internal {\\n        ChainlinkPriceStorage storage cps = chainlinkPriceStorage();\\n        PriceFeed storage pf = cps.priceFeeds[tokenAddress];\\n        require(pf.feedAddress == address(0), \\\"LibChainlinkPrice: Can't add price feed that already exists\\\");\\n        AggregatorV3Interface oracle = AggregatorV3Interface(priceFeed);\\n        (, int256 price, ,,) = oracle.latestRoundData();\\n        require(price > 0, \\\"LibChainlinkPrice: Invalid priceFeed address\\\");\\n        pf.tokenAddress = tokenAddress;\\n        pf.feedAddress = priceFeed;\\n        pf.tokenAddressPosition = uint32(cps.tokenAddresses.length);\\n\\n        cps.tokenAddresses.push(tokenAddress);\\n        emit SupportChainlinkPriceFeed(tokenAddress, priceFeed, true);\\n    }\\n\\n    function removeChainlinkPriceFeed(address tokenAddress) internal {\\n        ChainlinkPriceStorage storage cps = chainlinkPriceStorage();\\n        PriceFeed storage pf = cps.priceFeeds[tokenAddress];\\n        address priceFeed = pf.feedAddress;\\n        require(priceFeed != address(0), \\\"LibChainlinkPrice: Price feed does not exist\\\");\\n\\n        uint256 lastPosition = cps.tokenAddresses.length - 1;\\n        uint256 tokenAddressPosition = pf.tokenAddressPosition;\\n        if (tokenAddressPosition != lastPosition) {\\n            address lastTokenAddress = cps.tokenAddresses[lastPosition];\\n            cps.tokenAddresses[tokenAddressPosition] = lastTokenAddress;\\n            cps.priceFeeds[lastTokenAddress].tokenAddressPosition = uint32(tokenAddressPosition);\\n        }\\n        cps.tokenAddresses.pop();\\n        delete cps.priceFeeds[tokenAddress];\\n        emit SupportChainlinkPriceFeed(tokenAddress, priceFeed, false);\\n    }\\n\\n    function getPriceFromChainlink(address token) internal view returns (uint256 price, uint8 decimals, uint256 updateTime) {\\n        ChainlinkPriceStorage storage cps = chainlinkPriceStorage();\\n        address priceFeed = cps.priceFeeds[token].feedAddress;\\n        require(priceFeed != address(0), \\\"LibChainlinkPrice: Price feed does not exist\\\");\\n        AggregatorV3Interface oracle = AggregatorV3Interface(priceFeed);\\n        (, int256 price_, ,uint256 updatedAt,) = oracle.latestRoundData();\\n        require(price_ > 0, \\\"LibChainlinkPrice: price cannot be negative\\\");\\n        price = uint256(price_);\\n        decimals = oracle.decimals();\\n        return (price, decimals, updatedAt);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/libraries/LibBrokerManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../utils/TransferHelper.sol\\\";\\nimport {ZERO, ONE, UC, uc, into} from \\\"unchecked-counter/src/UC.sol\\\";\\n\\nlibrary LibBrokerManager {\\n\\n    using TransferHelper for address;\\n\\n    bytes32 constant BROKER_MANAGER_STORAGE_POSITION = keccak256(\\\"apollox.broker.manager.storage\\\");\\n\\n    struct Broker {\\n        string name;\\n        string url;\\n        address receiver;\\n        uint24 id;\\n        uint24 brokerIndex;\\n        uint16 commissionP;\\n        uint16 daoShareP;\\n        uint16 alpPoolP;\\n    }\\n\\n    struct Commission {\\n        uint total;\\n        uint pending;\\n    }\\n\\n    struct BrokerManagerStorage {\\n        mapping(uint24 id => Broker) brokers;\\n        uint24[] brokerIds;\\n        mapping(uint24 id => mapping(address token => Commission)) brokerCommissions;\\n        // id => tokens\\n        mapping(uint24 id => address[]) brokerCommissionTokens;\\n        // token => total amount\\n        mapping(address => uint256) allPendingCommissions;\\n        uint24 defaultBroker;\\n    }\\n\\n    function brokerManagerStorage() internal pure returns (BrokerManagerStorage storage bms) {\\n        bytes32 position = BROKER_MANAGER_STORAGE_POSITION;\\n        assembly {\\n            bms.slot := position\\n        }\\n    }\\n\\n    event AddBroker(uint24 indexed id, Broker broker);\\n    event RemoveBroker(uint24 indexed id);\\n    event UpdateBrokerCommissionP(uint24 indexed id, uint16 commissionP, uint16 daoShareP, uint16 alpPoolP);\\n    event UpdateBrokerReceiver(uint24 indexed id, address oldReceiver, address receiver);\\n    event UpdateBrokerName(uint24 indexed id, string oldName, string name);\\n    event UpdateBrokerUrl(uint24 indexed id, string oldUrl, string url);\\n    event WithdrawBrokerCommission(\\n        uint24 indexed id, address indexed token,\\n        address indexed operator, uint256 amount\\n    );\\n\\n    function initialize(\\n        uint24 id, address receiver, string calldata name, string calldata url\\n    ) internal {\\n        BrokerManagerStorage storage bms = brokerManagerStorage();\\n        require(bms.defaultBroker == 0, \\\"LibBrokerManager: Already initialized\\\");\\n        bms.defaultBroker = id;\\n        addBroker(id, 1e4, 0, 0, receiver, name, url);\\n    }\\n\\n    function addBroker(\\n        uint24 id, uint16 commissionP, uint16 daoShareP, uint16 alpPoolP,\\n        address receiver, string calldata name, string calldata url\\n    ) internal {\\n        BrokerManagerStorage storage bms = brokerManagerStorage();\\n        require(bms.brokers[id].receiver == address(0), \\\"LibBrokerManager: Broker already exists\\\");\\n        Broker memory b = Broker(\\n            name, url, receiver, id, uint24(bms.brokerIds.length), commissionP, daoShareP, alpPoolP\\n        );\\n        bms.brokers[id] = b;\\n        bms.brokerIds.push(id);\\n        emit AddBroker(id, b);\\n    }\\n\\n    function _checkBrokerExist(BrokerManagerStorage storage bms, uint24 id) private view returns (Broker storage) {\\n        Broker storage b = bms.brokers[id];\\n        require(b.receiver != address(0), \\\"LibBrokerManager: broker does not exist\\\");\\n        return b;\\n    }\\n\\n    function removeBroker(uint24 id) internal {\\n        BrokerManagerStorage storage bms = brokerManagerStorage();\\n        require(id != bms.defaultBroker, \\\"LibBrokerManager: Default broker cannot be removed.\\\");\\n        withdrawCommission(id);\\n\\n        uint24[] storage brokerIds = bms.brokerIds;\\n        uint last = brokerIds.length - 1;\\n        uint removeBrokerIndex = bms.brokers[id].brokerIndex;\\n        if (removeBrokerIndex != last) {\\n            uint24 lastBrokerId = brokerIds[last];\\n            brokerIds[removeBrokerIndex] = lastBrokerId;\\n            bms.brokers[lastBrokerId].brokerIndex = uint24(removeBrokerIndex);\\n        }\\n        brokerIds.pop();\\n        delete bms.brokers[id];\\n        emit RemoveBroker(id);\\n    }\\n\\n    function updateBrokerCommissionP(uint24 id, uint16 commissionP, uint16 daoShareP, uint16 alpPoolP) internal {\\n        BrokerManagerStorage storage bms = brokerManagerStorage();\\n        Broker storage b = _checkBrokerExist(bms, id);\\n        b.commissionP = commissionP;\\n        b.daoShareP = daoShareP;\\n        b.alpPoolP = alpPoolP;\\n        emit UpdateBrokerCommissionP(id, commissionP, daoShareP, alpPoolP);\\n    }\\n\\n    function updateBrokerReceiver(uint24 id, address receiver) internal {\\n        BrokerManagerStorage storage bms = brokerManagerStorage();\\n        Broker storage b = _checkBrokerExist(bms, id);\\n        address oldReceiver = b.receiver;\\n        b.receiver = receiver;\\n        emit UpdateBrokerReceiver(id, oldReceiver, receiver);\\n    }\\n\\n    function updateBrokerName(uint24 id, string calldata name) internal {\\n        BrokerManagerStorage storage bms = brokerManagerStorage();\\n        Broker storage b = _checkBrokerExist(bms, id);\\n        string memory oldName = b.name;\\n        b.name = name;\\n        emit UpdateBrokerName(id, oldName, name);\\n    }\\n\\n    function updateBrokerUrl(uint24 id, string calldata url) internal {\\n        BrokerManagerStorage storage bms = brokerManagerStorage();\\n        Broker storage b = _checkBrokerExist(bms, id);\\n        string memory oldUrl = b.url;\\n        b.url = url;\\n        emit UpdateBrokerUrl(id, oldUrl, url);\\n    }\\n\\n    function withdrawCommission(uint24 id) internal {\\n        BrokerManagerStorage storage bms = brokerManagerStorage();\\n        Broker storage b = _checkBrokerExist(bms, id);\\n        address operator = msg.sender;\\n        address[] memory tokens = bms.brokerCommissionTokens[id];\\n        for (UC i = ZERO; i < uc(tokens.length); i = i + ONE) {\\n            Commission storage c = bms.brokerCommissions[id][tokens[i.into()]];\\n            if (c.pending > 0) {\\n                uint256 pending = c.pending;\\n                c.pending = 0;\\n                bms.allPendingCommissions[tokens[i.into()]] -= pending;\\n                tokens[i.into()].transfer(b.receiver, pending);\\n                emit WithdrawBrokerCommission(id, tokens[i.into()], operator, pending);\\n            }\\n        }\\n    }\\n\\n    function _getBrokerOrDefault(BrokerManagerStorage storage bms, uint24 id) private view returns (Broker memory) {\\n        Broker memory b = bms.brokers[id];\\n        if (b.receiver != address(0)) {\\n            return b;\\n        } else {\\n            return bms.brokers[bms.defaultBroker];\\n        }\\n    }\\n\\n    function updateBrokerCommission(\\n        address token, uint256 feeAmount, uint24 id\\n    ) internal returns (uint256 commission, uint24 brokerId, uint256 daoAmount, uint256 alpPoolAmount){\\n        BrokerManagerStorage storage bms = brokerManagerStorage();\\n\\n        Broker memory b = _getBrokerOrDefault(bms, id);\\n        commission = feeAmount * b.commissionP / 1e4;\\n        if (commission > 0) {\\n            Commission storage c = bms.brokerCommissions[b.id][token];\\n            if (c.total == 0) {\\n                bms.brokerCommissionTokens[b.id].push(token);\\n            }\\n            c.total += commission;\\n            c.pending += commission;\\n            bms.allPendingCommissions[token] += commission;\\n        }\\n        return (commission, b.id, feeAmount * b.daoShareP / 1e4, feeAmount * b.alpPoolP / 1e4);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/libraries/LibAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibAccessControlEnumerable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_POSITION = keccak256(\\\"apollox.access.control.storage\\\");\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct AccessControlStorage {\\n        mapping(bytes32 => RoleData) roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function accessControlStorage() internal pure returns (AccessControlStorage storage acs) {\\n        bytes32 position = ACCESS_CONTROL_STORAGE_POSITION;\\n        assembly {\\n            acs.slot := position\\n        }\\n    }\\n\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n            string(\\n                abi.encodePacked(\\n                    \\\"AccessControl: account \\\",\\n                    Strings.toHexString(account),\\n                    \\\" is missing role \\\",\\n                    Strings.toHexString(uint256(role), 32)\\n                )\\n            )\\n            );\\n        }\\n    }\\n\\n    function hasRole(bytes32 role, address account) internal view returns (bool) {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        return acs.roles[role].members[account];\\n    }\\n\\n    function grantRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (!hasRole(role, account)) {\\n            acs.roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n            acs.roleMembers[role].add(account);\\n        }\\n    }\\n\\n    function revokeRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (hasRole(role, account)) {\\n            acs.roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n            acs.roleMembers[role].remove(account);\\n        }\\n    }\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        bytes32 previousAdminRole = acs.roles[role].adminRole;\\n        acs.roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/diamond/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ITradingPortal.sol\\\";\\nimport \\\"./ITradingClose.sol\\\";\\n\\n/*\\n|-----------> 8 bit <-----------|\\n|---|---|---|---|---|---|---|---|\\n|   |   |   |   |   |   | 1 | 0 |\\n|---|---|---|---|---|---|---|---|\\n*/\\nenum FeatureSwitches {\\n    AS_MARGIN,\\n    AS_BET\\n}\\n\\ninterface IVault {\\n\\n    event CloseTradeRemoveLiquidity(address indexed token, uint256 amount);\\n\\n    struct Token {\\n        address tokenAddress;\\n        uint16 weight;\\n        uint16 feeBasisPoints;\\n        uint16 taxBasisPoints;\\n        bool stable;\\n        bool dynamicFee;\\n        bool asMargin;\\n        bool asBet;\\n    }\\n\\n    struct LpItem {\\n        address tokenAddress;\\n        int256 value;\\n        uint8 decimals;\\n        int256 valueUsd; // decimals = 18\\n        uint16 targetWeight;\\n        uint16 feeBasisPoints;\\n        uint16 taxBasisPoints;\\n        bool dynamicFee;\\n    }\\n\\n    struct MarginToken {\\n        address token;\\n        bool switchOn;\\n        uint8 decimals;\\n        uint256 price;\\n    }\\n\\n    function addToken(\\n        address tokenAddress, uint16 feeBasisPoints, uint16 taxBasisPoints,\\n        bool stable, bool dynamicFee, bool asMargin, bool asBet, uint16[] calldata weights\\n    ) external;\\n\\n    function removeToken(address tokenAddress, uint16[] calldata weights) external;\\n\\n    function updateToken(address tokenAddress, uint16 feeBasisPoints, uint16 taxBasisPoints, bool dynamicFee) external;\\n\\n    function updateTokenFeature(address tokenAddress, bool asMargin, bool asBet) external;\\n\\n    function changeWeight(uint16[] calldata weights) external;\\n\\n    function setSecurityMarginP(uint16 _securityMarginP) external;\\n\\n    function securityMarginP() external view returns (uint16);\\n\\n    function tokensV3() external view returns (Token[] memory);\\n\\n    function getTokenByAddress(address tokenAddress) external view returns (Token memory);\\n\\n    function getTokenForTrading(address tokenAddress) external view returns (MarginToken memory);\\n\\n    function getTokenForPrediction(address tokenAddress) external view returns (MarginToken memory);\\n\\n    function itemValue(address token) external view returns (LpItem memory lpItem);\\n\\n    function totalValue() external view returns (LpItem[] memory lpItems);\\n\\n    function increase(address token, uint256 amounts) external;\\n\\n    function decreaseByCloseTrade(address token, uint256 amount) external returns (ITradingClose.SettleToken[] memory);\\n\\n    function decrease(address token, uint256 amount) external;\\n\\n    function maxWithdrawAbleUsd() external view returns (int256);\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/ITradingPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IBook.sol\\\";\\nimport \\\"./ITrading.sol\\\";\\n\\ninterface ITradingPortal is ITrading, IBook {\\n\\n    event FundingFeeAddLiquidity(address indexed token, uint256 amount);\\n    event MarketPendingTrade(address indexed user, bytes32 indexed tradeHash, OpenDataInput trade);\\n    event UpdateTradeTp(address indexed user, bytes32 indexed tradeHash, uint256 oldTp, uint256 tp);\\n    event UpdateTradeSl(address indexed user, bytes32 indexed tradeHash, uint256 oldSl, uint256 sl);\\n    event UpdateMargin(address indexed user, bytes32 indexed tradeHash, uint256 beforeMargin, uint256 margin);\\n\\n    function openMarketTrade(OpenDataInput memory openData) external;\\n\\n    function openMarketTradeBNB(OpenDataInput memory openData) external payable;\\n\\n    function updateTradeTp(bytes32 tradeHash, uint64 takeProfit) external;\\n\\n    function updateTradeSl(bytes32 tradeHash, uint64 stopLoss) external;\\n\\n    // stopLoss is allowed to be equal to 0, which means the sl setting is removed.\\n    // takeProfit must be greater than 0\\n    function updateTradeTpAndSl(bytes32 tradeHash, uint64 takeProfit, uint64 stopLoss) external;\\n\\n    function settleLpFundingFee(uint256 lpReceiveFundingFeeUsd) external;\\n\\n    function closeTrade(bytes32 tradeHash) external;\\n\\n    function addMargin(bytes32 tradeHash, uint96 amount) external payable;\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/ITradingOpen.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ITrading.sol\\\";\\nimport \\\"./ITradingChecker.sol\\\";\\n\\ninterface ITradingOpen is ITrading {\\n\\n    event PendingTradeRefund(address indexed user, bytes32 indexed tradeHash, ITradingChecker.Refund refund);\\n    event OpenMarketTrade(address indexed user, bytes32 indexed tradeHash, OpenTrade ot);\\n\\n    struct LimitOrder {\\n        bytes32 orderHash;\\n        address user;\\n        uint64 entryPrice;\\n        address pairBase;\\n        address tokenIn;\\n        uint96 margin;\\n        uint64 stopLoss;\\n        uint64 takeProfit;\\n        uint24 broker;\\n        bool isLong;\\n        uint96 openFee;\\n        uint96 executionFee;\\n        uint80 qty;\\n    }\\n\\n    function limitOrderDeal(LimitOrder memory, uint256 marketPrice) external;\\n\\n    function marketTradeCallback(bytes32 tradeHash, uint upperPrice, uint lowerPrice) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/ITradingCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ISlippageManager.sol\\\";\\n\\ninterface ITradingCore {\\n\\n    event UpdatePairPositionInfo(\\n        address indexed pairBase, uint256 lastBlock, uint256 longQty, uint256 shortQty,\\n        int256 longAccFundingFeePerShare, uint64 lpLongAvgPrice, uint64 lpShortAvgPrice\\n    );\\n    event UpdatePairAccFundingFeePerShare(\\n        address indexed pairBase, uint256 lastBlock, int256 longAccFundingFeePerShare, uint256 marketPrice\\n    );\\n\\n    struct PairQty {\\n        uint256 longQty;\\n        uint256 shortQty;\\n    }\\n\\n    struct PairPositionInfo {\\n        uint256 lastFundingFeeBlock;\\n        uint256 longQty;                   // 1e10\\n        uint256 shortQty;                  // 1e10\\n        // shortAcc = longAcc * -1\\n        int256 longAccFundingFeePerShare;  // 1e18\\n        uint64 lpLongAvgPrice;             // 1e8\\n        address pairBase;\\n        uint16 pairIndex;\\n        uint64 lpShortAvgPrice;\\n    }\\n\\n    struct LpMarginTokenUnPnl {\\n        address token;\\n        int256 unPnlUsd;\\n    }\\n\\n    struct MarginPct {\\n        address token;\\n        uint256 pct;   // 1e4\\n    }\\n\\n    function getPairQty(address pairBase) external view returns (PairQty memory);\\n\\n    function slippagePrice(address pairBase, uint256 marketPrice, uint256 qty, bool isLong) external view returns (uint256);\\n\\n    function slippagePrice(\\n        PairQty memory pairQty,\\n        ISlippageManager.SlippageConfig memory sc,\\n        uint256 marketPrice, uint256 qty, bool isLong\\n    ) external pure returns (uint256);\\n\\n    function triggerPrice(address pairBase, uint256 limitPrice, uint256 qty, bool isLong) external view returns (uint256);\\n\\n    function triggerPrice(\\n        PairQty memory pairQty,\\n        ISlippageManager.SlippageConfig memory sc,\\n        uint256 limitPrice, uint256 qty, bool isLong\\n    ) external pure returns (uint256);\\n\\n    function lastLongAccFundingFeePerShare(address pairBase) external view returns (int256);\\n\\n    function updatePairPositionInfo(\\n        address pairBase, uint userPrice, uint marketPrice, uint qty, bool isLong, bool isOpen\\n    ) external returns (int256 longAccFundingFeePerShare);\\n\\n    function updatePairPositionInfo(address pairBase) external;\\n\\n    function lpUnrealizedPnlUsd() external view returns (int256 totalUsd, LpMarginTokenUnPnl[] memory);\\n\\n    function lpUnrealizedPnlUsd(address targetToken) external view returns (int256 totalUsd, int256 tokenUsd);\\n\\n    function lpNotionalUsd() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/ITradingClose.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ITrading.sol\\\";\\nimport \\\"./IOrderAndTradeHistory.sol\\\";\\n\\ninterface ITradingClose is ITrading {\\n\\n    event CloseTradeSuccessful(address indexed user, bytes32 indexed tradeHash, IOrderAndTradeHistory.CloseInfo closeInfo);\\n    event ExecuteCloseSuccessful(address indexed user, bytes32 indexed tradeHash, ExecutionType executionType, IOrderAndTradeHistory.CloseInfo closeInfo);\\n    event CloseTradeReceived(address indexed user, bytes32 indexed tradeHash, address indexed token, uint256 amount);\\n    event CloseTradeAddLiquidity(address indexed token, uint256 amount);\\n    event ExecuteCloseRejected(address indexed user, bytes32 indexed tradeHash, ExecutionType executionType, uint64 execPrice, uint64 marketPrice);\\n\\n    enum ExecutionType {TP, SL, LIQ}\\n    struct TpSlOrLiq {\\n        bytes32 tradeHash;\\n        uint64 price;\\n        ExecutionType executionType;\\n    }\\n\\n    struct SettleToken {\\n        address token;\\n        uint256 amount;\\n        uint8 decimals;\\n    }\\n\\n    function closeTradeCallback(bytes32 tradeHash, uint upperPrice, uint lowerPrice) external;\\n\\n    function executeTpSlOrLiq(TpSlOrLiq[] memory) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/ITradingChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IBook.sol\\\";\\nimport \\\"./IPairsManager.sol\\\";\\nimport \\\"./ILimitOrder.sol\\\";\\nimport \\\"./ITrading.sol\\\";\\n\\ninterface ITradingChecker {\\n\\n    enum Refund {\\n        NO, SWITCH, PAIR_STATUS, AMOUNT_IN, USER_PRICE, MIN_NOTIONAL_USD, MAX_NOTIONAL_USD,\\n        MAX_LEVERAGE, TP, SL, PAIR_OI, OPEN_LOST, SYSTEM, FEED_DELAY, PRICE_PROTECTION\\n    }\\n\\n    function checkTp(\\n        address pairBase, bool isLong, uint takeProfit, uint entryPrice, uint leverage_10000\\n    ) external view returns (bool);\\n\\n    function checkSl(bool isLong, uint stopLoss, uint entryPrice) external pure returns (bool);\\n\\n    function checkLimitOrderTp(ILimitOrder.LimitOrder calldata order) external view;\\n\\n    function openLimitOrderCheck(IBook.OpenDataInput calldata data) external view;\\n\\n    function executeLimitOrderCheck(\\n        ILimitOrder.LimitOrder calldata order, uint256 marketPrice\\n    ) external view returns (bool result, uint96 openFee, uint96 executionFee, Refund refund);\\n\\n    function checkMarketTradeTp(ITrading.OpenTrade calldata) external view;\\n\\n    function openMarketTradeCheck(IBook.OpenDataInput calldata data) external view;\\n\\n    function marketTradeCallbackCheck(\\n        ITrading.PendingTrade calldata pt, uint256 marketPrice\\n    ) external view returns (bool result, uint96 openFee, uint96 executionFee, uint256 entryPrice, Refund refund);\\n\\n    function executeLiquidateCheck(\\n        ITrading.OpenTrade calldata ot, uint256 marketPrice, uint256 closePrice\\n    ) external view returns (bool needLiq, int256 pnl, int256 fundingFee, uint256 closeFee, uint256 holdingFee);\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/ITrading.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ITrading {\\n\\n    struct PendingTrade {\\n        address user;\\n        uint24 broker;\\n        bool isLong;\\n        uint64 price;      // 1e8\\n        address pairBase;\\n        uint96 amountIn;   // tokenIn decimals\\n        address tokenIn;\\n        uint80 qty;        // 1e10\\n        uint64 stopLoss;   // 1e8\\n        uint64 takeProfit; // 1e8\\n        uint128 blockNumber;\\n    }\\n\\n    struct OpenTrade {\\n        address user;\\n        uint32 userOpenTradeIndex;\\n        uint64 entryPrice;     // 1e8\\n        address pairBase;\\n        address tokenIn;\\n        uint96 margin;         // tokenIn decimals\\n        uint64 stopLoss;       // 1e8\\n        uint64 takeProfit;     // 1e8\\n        uint24 broker;\\n        bool isLong;\\n        uint96 openFee;        // tokenIn decimals\\n        int256 longAccFundingFeePerShare; // 1e18\\n        uint96 executionFee;   // tokenIn decimals\\n        uint40 timestamp;\\n        uint80 qty;            // 1e10\\n\\n        uint40 holdingFeeRate; // 1e12\\n        uint256 openBlock;\\n    }\\n\\n    struct MarginBalance {\\n        address token;\\n        uint256 price;\\n        uint8 decimals;\\n        uint256 balanceUsd;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/ISlippageManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IPairsManager.sol\\\";\\nimport \\\"../libraries/LibPairsManager.sol\\\";\\n\\ninterface ISlippageManager {\\n\\n    event AddSlippageConfig(\\n        uint16 indexed index, ISlippageManager.SlippageType indexed slippageType,\\n        uint256 onePercentDepthAboveUsd, uint256 onePercentDepthBelowUsd,\\n        uint16 slippageLongP, uint16 slippageShortP, string name\\n    );\\n    event RemoveSlippageConfig(uint16 indexed index);\\n    event UpdateSlippageConfig(\\n        uint16 indexed index, ISlippageManager.SlippageType indexed slippageType,\\n        uint256 onePercentDepthAboveUsd, uint256 onePercentDepthBelowUsd,\\n        uint16 slippageLongP, uint16 slippageShortP\\n    );\\n\\n    enum SlippageType{FIXED, ONE_PERCENT_DEPTH, NET_POSITION}\\n\\n    struct SlippageConfig {\\n        uint256 onePercentDepthAboveUsd;\\n        uint256 onePercentDepthBelowUsd;\\n        uint16 slippageLongP;       // 1e4\\n        uint16 slippageShortP;      // 1e4\\n        SlippageType slippageType;\\n    }\\n\\n    function addSlippageConfig(\\n        string calldata name, uint16 index, SlippageType slippageType,\\n        uint256 onePercentDepthAboveUsd, uint256 onePercentDepthBelowUsd,\\n        uint16 slippageLongP, uint16 slippageShortP\\n    ) external;\\n\\n    function removeSlippageConfig(uint16 index) external;\\n\\n    function updateSlippageConfig(\\n        uint16 index, SlippageType slippageType,\\n        uint256 onePercentDepthAboveUsd, uint256 onePercentDepthBelowUsd,\\n        uint16 slippageLongP, uint16 slippageShortP\\n    ) external;\\n\\n    function getSlippageConfigByIndex(uint16 index) external view returns (LibPairsManager.SlippageConfig memory, IPairsManager.PairSimple[] memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/IPriceFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nenum RequestType {CLOSE, OPEN, PREDICT}\\n\\ninterface IPriceFacade {\\n\\n    struct Config {\\n        uint16 lowPriceGapP;\\n        uint16 highPriceGapP;\\n        uint16 maxDelay;\\n        uint16 triggerLowPriceGapP;   // 1e4\\n        uint16 triggerHighPriceGapP;  // 1e4\\n    }\\n\\n    struct PriceCallbackParam {\\n        bytes32 requestId;\\n        uint64 price;\\n    }\\n\\n    function setLowAndHighPriceGapP(uint16 lowPriceGapP, uint16 highPriceGapP) external;\\n\\n    function setTriggerLowAndHighPriceGapP(uint16 triggerLowPriceGapP, uint16 triggerHighPriceGapP) external;\\n\\n    function setMaxDelay(uint16 maxDelay) external;\\n\\n    function getPriceFacadeConfig() external view returns (Config memory);\\n\\n    function getPrice(address token) external view returns (uint256);\\n\\n    function getPriceFromCacheOrOracle(address token) external view returns (uint64 price, uint40 updatedAt);\\n\\n    function requestPrice(bytes32 tradeHash, address token, RequestType requestType) external;\\n\\n    function requestPriceCallback(bytes32 requestId, uint64 price) external;\\n\\n    function batchRequestPriceCallback(PriceCallbackParam[] calldata params) external;\\n\\n    function confirmTriggerPrice(address token, uint64 price) external returns (bool, uint64, uint64);\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/IPredictionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nenum Period{MINUTE1, MINUTE5, MINUTE10, MINUTE15, MINUTE30, HOUR1, HOUR2, HOUR3, HOUR4, HOUR6, HOUR8, HOUR12, DAY1}\\nenum PredictionPairStatus{AVAILABLE, CLOSE_ONLY, CLOSED}\\n\\nstruct PredictionPeriod {\\n    uint256 maxUpUsd;     // USD 1e18\\n    uint256 maxDownUsd;   // USD 1e18\\n    Period period;\\n    PredictionPairStatus status;\\n    uint16 winRatio;      // 1e4\\n    uint16 openFeeP;      // 1e4\\n    uint16 winCloseFeeP;  // 1e4\\n    uint16 loseCloseFeeP; // 1e4\\n}\\n\\ninterface IPredictionManager {\\n\\n    event AddPredictionPair(address indexed base, string name, PredictionPeriod[] predictionPeriods);\\n    event RemovePredictionPair(address indexed base);\\n    event UpdatePredictionPairStatus(address indexed base, PredictionPairStatus status);\\n    event UpdatePredictionPairPeriodMaxCap(address indexed base, Period indexed period, uint256 maxUpUsd, uint256 maxDownUsd);\\n    event UpdatePredictionPairPeriodWinRatio(address indexed base, Period indexed period, uint16 winRatio);\\n    event UpdatePredictionPairPeriodFee(address indexed base, Period indexed period, uint16 openFeeP, uint16 winCloseFeeP, uint16 loseCloseFeeP);\\n    event AddPeriodForPredictionPair(address indexed base, PredictionPeriod[] predictionPeriods);\\n    event ReplacePredictionPairPeriod(address indexed base, PredictionPeriod[] predictionPeriods);\\n\\n    struct PeriodCap {\\n        Period period;\\n        uint256 maxUpUsd;     // USD 1e18\\n        uint256 maxDownUsd;   // USD 1e18\\n    }\\n\\n    struct PeriodWinRatio {\\n        Period period;\\n        uint16 winRatio;\\n    }\\n\\n    struct PeriodFee {\\n        Period period;\\n        uint16 openFeeP;      // 1e4\\n        uint16 winCloseFeeP;  // 1e4\\n        uint16 loseCloseFeeP; // 1e4\\n    }\\n\\n    struct PredictionPairView {\\n        string name;\\n        address base;\\n        PredictionPeriod[] predictionPeriods;\\n    }\\n\\n    function addPredictionPair(\\n        address base, string calldata name, PredictionPeriod[] calldata predictionPeriods\\n    ) external;\\n\\n    function removePredictionPair(address base) external;\\n\\n    function updatePredictionPairStatus(address base, PredictionPairStatus status) external;\\n\\n    function updatePredictionPairMaxCap(address base, PeriodCap[] calldata periodCaps) external;\\n\\n    function updatePredictionPairWinRatio(address base, PeriodWinRatio[] calldata periodWinRatios) external;\\n\\n    function updatePredictionPairFee(address base, PeriodFee[] calldata periodFees) external;\\n\\n    function addPeriodForPredictionPair(address base, PredictionPeriod[] calldata predictionPeriods) external;\\n\\n    function replacePredictionPairPeriod(address base, PredictionPeriod[] calldata predictionPeriods) external;\\n\\n    function getPredictionPairByBase(address base) external returns (PredictionPairView memory);\\n\\n    function predictionPairs(uint start, uint8 size) external returns (PredictionPairView[] memory);\\n\\n    function getPredictionPeriod(address base, Period period) external returns (PredictionPeriod memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/IPredictUpDown.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {Period} from \\\"./IPredictionManager.sol\\\";\\n\\nstruct PendingPrediction {\\n    address tokenIn;\\n    uint96 amountIn;     // tokenIn decimals\\n    address predictionPairBase;\\n    uint96 openFee;      // tokenIn decimals\\n    address user;\\n    uint64 price;        // 1e8\\n    uint24 broker;\\n    bool isUp;\\n    uint128 blockNumber;\\n    Period period;\\n}\\n\\nstruct OpenPrediction {\\n    address tokenIn;\\n    uint96 betAmount;      // tokenIn decimals\\n    address predictionPairBase;\\n    uint96 openFee;        // tokenIn decimals\\n    address user;\\n    uint96 betAmountUsd;\\n    uint32 userOpenPredictIndex;\\n    uint64 entryPrice;     // 1e8\\n    uint40 startTime;\\n    uint24 broker;\\n    bool isUp;\\n    Period period;\\n}\\n\\nstruct PredictionMarket {\\n    uint96 upUsd;\\n    uint96 downUsd;\\n}\\n\\ninterface IPredictUpDown {\\n\\n    event PredictAndBetPending(address indexed user, uint256 indexed id, PendingPrediction pp);\\n    event PendingPredictionRefund(address indexed user, uint256 indexed id, PredictionRefund refund);\\n    event PredictAndBet(address indexed user, uint256 indexed id, OpenPrediction op);\\n    event SettlePredictionReject(uint256 indexed id, Period period, uint256 correctTime);\\n    event SettlePredictionSuccessful(\\n        uint256 indexed id, bool win, uint256 endPrice, address token, uint256 profitOrLoss, uint256 closeFee\\n    );\\n\\n    enum PredictionRefund{NO, FEED_DELAY, USER_PRICE}\\n\\n    struct PredictionInput {\\n        address predictionPairBase;\\n        bool isUp;\\n        Period period;\\n        address tokenIn;\\n        uint96 amountIn;\\n        uint64 price;\\n        uint24 broker;\\n    }\\n\\n    struct SettlePrediction {\\n        uint256 id;\\n        uint64 price;\\n    }\\n\\n    struct PredictionView {\\n        uint256 id;\\n        address tokenIn;\\n        uint96 betAmount;      // tokenIn decimals\\n        address predictionPairBase;\\n        uint96 openFee;        // tokenIn decimals\\n        uint64 entryPrice;     // 1e8\\n        uint40 startTime;\\n        bool isUp;\\n        Period period;\\n    }\\n\\n    function predictAndBet(PredictionInput memory pi) external;\\n\\n    function predictAndBetBNB(PredictionInput memory pi) external payable;\\n\\n    function predictionCallback(bytes32 id, uint256 price) external;\\n\\n    function settlePredictions(SettlePrediction[] calldata) external;\\n\\n    function getPredictionById(uint256 id) external view returns (PredictionView memory);\\n\\n    function getPredictions(address user, address predictionPairBase) external view returns (PredictionView[] memory);\\n\\n    function getPredictionMarket(\\n        address predictionPairBase, Period[] calldata periods\\n    ) external view returns (PredictionMarket[] memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/IPairsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./ISlippageManager.sol\\\";\\nimport \\\"../libraries/LibPairsManager.sol\\\";\\n\\ninterface IPairsManager {\\n    enum PairType{CRYPTO, STOCKS, FOREX, INDICES, COMMODITIES}\\n    enum PairStatus{AVAILABLE, REDUCE_ONLY, CLOSE}\\n\\n    struct PairSimple {\\n        // BTC/USD\\n        string name;\\n        // BTC address\\n        address base;\\n        PairType pairType;\\n        PairStatus status;\\n    }\\n\\n    struct PairView {\\n        // BTC/USD\\n        string name;\\n        // BTC address\\n        address base;\\n        uint16 basePosition;\\n        PairType pairType;\\n        PairStatus status;\\n        uint256 maxLongOiUsd;\\n        uint256 maxShortOiUsd;\\n        uint256 fundingFeePerBlockP;  // 1e18\\n        uint256 minFundingFeeR;       // 1e18\\n        uint256 maxFundingFeeR;       // 1e18\\n\\n        LibPairsManager.LeverageMargin[] leverageMargins;\\n\\n        uint16 slippageConfigIndex;\\n        uint16 slippagePosition;\\n        LibPairsManager.SlippageConfig slippageConfig;\\n\\n        uint16 feeConfigIndex;\\n        uint16 feePosition;\\n        LibFeeManager.FeeConfig feeConfig;\\n\\n        uint40 longHoldingFeeRate;    // 1e12\\n        uint40 shortHoldingFeeRate;   // 1e12\\n    }\\n\\n    struct PairMaxOiAndFundingFeeConfig {\\n        uint256 maxLongOiUsd;\\n        uint256 maxShortOiUsd;\\n        uint256 fundingFeePerBlockP;\\n        uint256 minFundingFeeR;\\n        uint256 maxFundingFeeR;\\n    }\\n\\n    struct LeverageMargin {\\n        uint256 notionalUsd;\\n        uint16 maxLeverage;\\n        uint16 initialLostP; // 1e4\\n        uint16 liqLostP;     // 1e4\\n    }\\n\\n    struct FeeConfig {\\n        uint16 openFeeP;     // 1e4\\n        uint16 closeFeeP;    // 1e4\\n        uint24 shareP;       // 1e5\\n        uint24 minCloseFeeP; // 1e5\\n    }\\n\\n    struct TradingPair {\\n        // BTC address\\n        address base;\\n        string name;\\n        PairType pairType;\\n        PairStatus status;\\n        PairMaxOiAndFundingFeeConfig pairConfig;\\n        LeverageMargin[] leverageMargins;\\n        ISlippageManager.SlippageConfig slippageConfig;\\n        FeeConfig feeConfig;\\n    }\\n\\n    struct UpdatePairMaxOiParam {\\n        address base;\\n        uint256 maxLongOiUsd;\\n        uint256 maxShortOiUsd;\\n    }\\n\\n    function addPair(\\n        address base, string calldata name,\\n        PairType pairType, PairStatus status,\\n        PairMaxOiAndFundingFeeConfig calldata pairConfig,\\n        uint16 slippageConfigIndex, uint16 feeConfigIndex,\\n        LibPairsManager.LeverageMargin[] calldata leverageMargins,\\n        uint40 longHoldingFeeRate, uint40 shortHoldingFeeRate\\n    ) external;\\n\\n    function updatePairMaxOi(address base, uint256 maxLongOiUsd, uint256 maxShortOiUsd) external;\\n\\n    function batchUpdatePairMaxOi(UpdatePairMaxOiParam[] calldata params) external;\\n\\n    function updatePairHoldingFeeRate(address base, uint40 longHoldingFeeRate, uint40 shortHoldingFeeRate) external;\\n\\n    function updatePairFundingFeeConfig(\\n        address base, uint256 fundingFeePerBlockP, uint256 minFundingFeeR, uint256 maxFundingFeeR\\n    ) external;\\n\\n    function removePair(address base) external;\\n\\n    function updatePairStatus(address base, PairStatus status) external;\\n\\n    function batchUpdatePairStatus(PairType pairType, PairStatus status) external;\\n\\n    function updatePairSlippage(address base, uint16 slippageConfigIndex) external;\\n\\n    function updatePairFee(address base, uint16 feeConfigIndex) external;\\n\\n    function updatePairLeverageMargin(address base, LibPairsManager.LeverageMargin[] calldata leverageMargins) external;\\n\\n    function pairsV3() external view returns (PairView[] memory);\\n\\n    function getPairByBaseV3(address base) external view returns (PairView memory);\\n\\n    function getPairForTrading(address base) external view returns (TradingPair memory);\\n\\n    function getPairConfig(address base) external view returns (PairMaxOiAndFundingFeeConfig memory);\\n\\n    function getPairFeeConfig(address base) external view returns (FeeConfig memory);\\n\\n    function getPairHoldingFeeRate(address base, bool isLong) external view returns (uint40 holdingFeeRate);\\n\\n    function getPairSlippageConfig(address base) external view returns (ISlippageManager.SlippageConfig memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/IOrderAndTradeHistory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IOrderAndTradeHistory {\\n\\n    enum ActionType {LIMIT, CANCEL_LIMIT, SYSTEM_CANCEL, OPEN, CLOSE, TP, SL, LIQUIDATED}\\n\\n    struct OrderInfo {\\n        address user;\\n        uint96 amountIn;\\n        address tokenIn;\\n        uint80 qty;\\n        bool isLong;\\n        address pairBase;\\n        uint64 entryPrice;\\n    }\\n\\n    struct TradeInfo {\\n        uint96 margin;\\n        uint96 openFee;\\n        uint96 executionFee;\\n        uint40 openTimestamp;\\n    }\\n\\n    struct CloseInfo {\\n        uint64 closePrice;  // 1e8\\n        int96 fundingFee;   // tokenIn decimals\\n        uint96 closeFee;    // tokenIn decimals\\n        int96 pnl;          // tokenIn decimals\\n        uint96 holdingFee;  // tokenIn decimals\\n    }\\n\\n    struct ActionInfo {\\n        bytes32 hash;\\n        uint40 timestamp;\\n        ActionType actionType;\\n    }\\n\\n    struct OrderAndTradeHistory {\\n        bytes32 hash;\\n        uint40 timestamp;\\n        string pair;\\n        ActionType actionType;\\n        address tokenIn;\\n        bool isLong;\\n        uint96 amountIn;           // tokenIn decimals\\n        uint80 qty;                // 1e10\\n        uint64 entryPrice;         // 1e8\\n\\n        uint96 margin;             // tokenIn decimals\\n        uint96 openFee;            // tokenIn decimals\\n        uint96 executionFee;       // tokenIn decimals\\n\\n        uint64 closePrice;         // 1e8\\n        int96 fundingFee;          // tokenIn decimals\\n        uint96 closeFee;           // tokenIn decimals\\n        int96 pnl;                 // tokenIn decimals\\n        uint96 holdingFee;         // tokenIn decimals\\n        uint40 openTimestamp;\\n    }\\n\\n    function createLimitOrder(bytes32 orderHash, OrderInfo calldata) external;\\n\\n    function cancelLimitOrder(bytes32 orderHash, ActionType aType) external;\\n\\n    function limitTrade(bytes32 tradeHash, TradeInfo calldata) external;\\n\\n    function marketTrade(bytes32 tradeHash, OrderInfo calldata, TradeInfo calldata) external;\\n\\n    function closeTrade(bytes32 tradeHash, CloseInfo calldata, ActionType aType) external;\\n\\n    function updateMargin(bytes32 tradeHash, uint96 newMargin) external;\\n\\n    function getOrderAndTradeHistoryV2(\\n        address user, uint start, uint8 size\\n    ) external view returns (OrderAndTradeHistory[] memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/ILimitOrder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IBook.sol\\\";\\nimport \\\"./ITradingChecker.sol\\\";\\n\\ninterface ILimitOrder is IBook {\\n\\n    event OpenLimitOrder(address indexed user, bytes32 indexed orderHash, OpenDataInput data);\\n    event UpdateOrderTp(address indexed user, bytes32 indexed orderHash, uint256 oldTp, uint256 tp);\\n    event UpdateOrderSl(address indexed user, bytes32 indexed orderHash, uint256 oldSl, uint256 sl);\\n    event ExecuteLimitOrderRejected(address indexed user, bytes32 indexed orderHash, ITradingChecker.Refund refund);\\n    event LimitOrderRefund(address indexed user, bytes32 indexed orderHash, ITradingChecker.Refund refund);\\n    event CancelLimitOrder(address indexed user, bytes32 indexed orderHash);\\n    event ExecuteLimitOrderSuccessful(address indexed user, bytes32 indexed orderHash);\\n\\n    struct LimitOrderView {\\n        bytes32 orderHash;\\n        string pair;\\n        address pairBase;\\n        bool isLong;\\n        address tokenIn;\\n        uint96 amountIn;    // tokenIn decimals\\n        uint80 qty;         // 1e10\\n        uint64 limitPrice;  // 1e8\\n        uint64 stopLoss;    // 1e8\\n        uint64 takeProfit;  // 1e8\\n        uint24 broker;\\n        uint40 timestamp;\\n    }\\n\\n    struct LimitOrder {\\n        address user;\\n        uint32 userOpenOrderIndex;\\n        uint64 limitPrice;   // 1e8\\n        // pair.base\\n        address pairBase;\\n        uint96 amountIn;     // tokenIn decimals\\n        address tokenIn;\\n        bool isLong;\\n        uint24 broker;\\n        uint64 stopLoss;     // 1e8\\n        uint80 qty;          // 1e10\\n        uint64 takeProfit;   // 1e8\\n        uint40 timestamp;\\n    }\\n\\n    function openLimitOrder(OpenDataInput memory openData) external;\\n\\n    function openLimitOrderBNB(OpenDataInput memory openData) external payable;\\n\\n    function updateOrderTp(bytes32 orderHash, uint64 takeProfit) external;\\n\\n    function updateOrderSl(bytes32 orderHash, uint64 stopLoss) external;\\n\\n    // stopLoss is allowed to be equal to 0, which means the sl setting is removed.\\n    // takeProfit must be greater than 0\\n    function updateOrderTpAndSl(bytes32 orderHash, uint64 takeProfit, uint64 stopLoss) external;\\n\\n    function executeLimitOrder(KeeperExecution[] memory) external;\\n\\n    function cancelLimitOrder(bytes32 orderHash) external;\\n\\n    function getLimitOrderByHash(bytes32 orderHash) external view returns (LimitOrderView memory);\\n\\n    function getLimitOrders(address user, address pairBase) external view returns (LimitOrderView[] memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../libraries/LibFeeManager.sol\\\";\\nimport \\\"./IPairsManager.sol\\\";\\nimport {CommissionInfo} from \\\"./IBrokerManager.sol\\\";\\n\\ninterface IFeeManager {\\n\\n    event AddFeeConfig(\\n        uint16 indexed index, uint16 openFeeP, uint16 closeFeeP, uint24 shareP, uint24 minCloseFeeP, string name\\n    );\\n    event RemoveFeeConfig(uint16 indexed index);\\n    event UpdateFeeConfig(uint16 indexed index,\\n        uint16 openFeeP, uint16 closeFeeP,\\n        uint24 shareP, uint24 minCloseFeeP\\n    );\\n    event SetDaoRepurchase(address indexed oldDaoRepurchase, address daoRepurchase);\\n    event SetRevenueAddress(address indexed oldRevenueAddress, address revenueAddress);\\n    event OpenFee(\\n        address indexed token, uint256 totalFee, uint256 daoAmount,\\n        uint24 brokerId, uint256 brokerAmount, uint256 alpPoolAmount\\n    );\\n    event CloseFee(\\n        address indexed token, uint256 totalFee, uint256 daoAmount,\\n        uint24 brokerId, uint256 brokerAmount, uint256 alpPoolAmount\\n    );\\n    event PredictionOpenFee(\\n        address indexed token, uint256 totalFee, uint256 daoAmount,\\n        uint24 brokerId, uint256 brokerAmount, uint256 alpPoolAmount\\n    );\\n    event PredictionCloseFee(\\n        address indexed token, uint256 totalFee, uint256 daoAmount,\\n        uint24 brokerId, uint256 brokerAmount, uint256 alpPoolAmount\\n    );\\n    event WithdrawRevenue(address indexed token, address indexed operator, uint256 amount);\\n\\n    struct FeeDetail {\\n        // total accumulated fees, include DAO/referral fee\\n        uint256 total;\\n        // accumulated DAO repurchase funds\\n        uint256 daoAmount;\\n        uint256 brokerAmount;\\n        uint256 alpPoolAmount;\\n    }\\n\\n    function addFeeConfig(\\n        uint16 index, string calldata name, uint16 openFeeP, uint16 closeFeeP, uint24 shareP, uint24 minCloseFeeP\\n    ) external;\\n\\n    function removeFeeConfig(uint16 index) external;\\n\\n    function updateFeeConfig(uint16 index, uint16 openFeeP, uint16 closeFeeP, uint24 shareP, uint24 minCloseFeeP) external;\\n\\n    function setDaoRepurchase(address daoRepurchase) external;\\n\\n    function setRevenueAddress(address revenueAddress) external;\\n\\n    function getFeeConfigByIndex(uint16 index) external view returns (LibFeeManager.FeeConfig memory, IPairsManager.PairSimple[] memory);\\n\\n    function getFeeDetails(address[] calldata tokens) external view returns (FeeDetail[] memory);\\n\\n    function feeAddress() external view returns (address daoRepurchase, address revenueAddress);\\n\\n    function revenues(address[] calldata tokens) external view returns (CommissionInfo[] memory);\\n\\n    function chargeOpenFee(address token, uint256 openFee, uint24 broker) external returns (uint24);\\n\\n    function chargePredictionOpenFee(address token, uint256 openFee, uint24 broker) external returns (uint24);\\n\\n    function chargeCloseFee(address token, uint256 closeFee, uint24 broker) external;\\n\\n    function chargePredictionCloseFee(address token, uint256 closeFee, uint24 broker) external;\\n\\n    function withdrawRevenue(address[] calldata tokens) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/IBrokerManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nstruct CommissionInfo {\\n    address token;\\n    uint total;\\n    uint pending;\\n}\\n\\ninterface IBrokerManager {\\n\\n    struct BrokerInfo {\\n        string name;\\n        string url;\\n        address receiver;\\n        uint24 id;\\n        uint16 commissionP;\\n        uint16 daoShareP;\\n        uint16 alpPoolP;\\n        CommissionInfo[] commissions;\\n    }\\n\\n    function addBroker(\\n        uint24 id, uint16 commissionP, uint16 daoShareP, uint16 alpPoolP,\\n        address receiver, string calldata name, string calldata url\\n    ) external;\\n\\n    function removeBroker(uint24 id) external;\\n\\n    function updateBrokerCommissionP(uint24 id, uint16 commissionP, uint16 daoShareP, uint16 alpPoolP) external;\\n\\n    function updateBrokerReceiver(uint24 id, address receiver) external;\\n\\n    function updateBrokerName(uint24 id, string calldata name) external;\\n\\n    function updateBrokerUrl(uint24 id, string calldata url) external;\\n\\n    function getBrokerById(uint24 id) external view returns (BrokerInfo memory);\\n\\n    function brokers(uint start, uint8 length) external view returns (BrokerInfo[] memory);\\n\\n    function withdrawCommission(uint24 id) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/diamond/interfaces/IBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IBook {\\n\\n    struct OpenDataInput {\\n        // Pair.base\\n        address pairBase;\\n        bool isLong;\\n        // BUSD/USDT address\\n        address tokenIn;\\n        uint96 amountIn;   // tokenIn decimals\\n        uint80 qty;        // 1e10\\n        // Limit Order: limit price\\n        // Market Trade: worst price acceptable\\n        uint64 price;      // 1e8\\n        uint64 stopLoss;   // 1e8\\n        uint64 takeProfit; // 1e8\\n        uint24 broker;\\n    }\\n\\n    struct KeeperExecution {\\n        bytes32 hash;\\n        uint64 price;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/dependencies/IWBNB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IWBNB {\\n    function deposit() external payable;\\n\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"NonexistentRequestId\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"}],\"internalType\":\"struct IPriceFacade.PriceCallbackParam[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"batchRequestPriceCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"}],\"name\":\"confirmTriggerPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"upper\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lower\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFacadeConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"lowPriceGapP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"highPriceGapP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxDelay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"triggerLowPriceGapP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"triggerHighPriceGapP\",\"type\":\"uint16\"}],\"internalType\":\"struct IPriceFacade.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPriceFromCacheOrOracle\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint40\",\"name\":\"updatedAt\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lowPriceGapP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"highPriceGapP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxPriceDelay\",\"type\":\"uint16\"}],\"name\":\"initPriceFacadeFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tradeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"}],\"name\":\"requestPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"}],\"name\":\"requestPriceCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lowPriceGapP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"highPriceGapP\",\"type\":\"uint16\"}],\"name\":\"setLowAndHighPriceGapP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxDelay\",\"type\":\"uint16\"}],\"name\":\"setMaxDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"triggerLowPriceGapP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"triggerHighPriceGapP\",\"type\":\"uint16\"}],\"name\":\"setTriggerLowAndHighPriceGapP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PriceFacadeFacet", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}