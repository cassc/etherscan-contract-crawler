{"SourceCode": "// SPDX-License-Identifier:MIT\r\npragma solidity 0.8.17;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Launchpad is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public _decimals = 18;\r\n    uint256 public _maximumLimitPer;\r\n\r\n    struct IcoParam {\r\n        uint bnbUnitRation;\r\n        uint256 BnbAmount;\r\n        address BnbAmountReciever;\r\n        address token;\r\n        uint256 tokenNum;\r\n\r\n        mapping (uint256 => address) tokenToAddress;\r\n        mapping (uint256 => uint256) tokenToAddressNum;\r\n        uint256 tokenToAddressCount;\r\n    }\r\n\r\n    struct TokenToAddressParam{\r\n        uint256 perCent;\r\n        address tokenReceiver;\r\n    }\r\n\r\n    mapping (uint256 => IcoParam) public  IcoParams;\r\n\r\n    address public _market;\r\n    uint256 ticket = 1 * 10**16 wei;\r\n    IERC20 _usdtToken;\r\n\r\n    mapping(address =>    mapping(address => uint256)) public _userDepositToken;\r\n    event userTransferTokenEvent(address indexed addr, uint indexed time,uint  num,uint  index); //\u6682\u65f6\u672a\u7528\u4e0a\r\n    event userTransferTokenByTokenAddrEvent(address indexed addr, uint indexed time,uint  num,address  tokenAddr);\r\n    event JoinLaunchpad(address indexed addr, uint indexed time,uint  num); //\u8fdb\u884cICO\u7684\u5730\u5740\uff0c\u65f6\u95f4\uff0c\u4ee5\u53ca\u8d2d\u4e70\u6240\u7528usdt\u7684\u6570\u91cf\r\n    event userClaimBankEvent(address indexed addr,uint indexed amount,address indexed tokenAddr ,uint  time);\r\n    event claimTokenEvent(address indexed to,uint256 amount,address rewardAddress,uint256 time);\r\n\r\n    constructor () {\r\n                IcoParam storage ip = IcoParams[0];\r\n\r\n                ip.bnbUnitRation = 100; // token \u7684\u5360\u6bd4\r\n                          //1000000000_000000000 1ether 5000000_000000000 *1 wei 0.005 ether\r\n                ip.BnbAmount = 5000000_000000000 *1 wei; //bnb \u6536\u53d6\r\n                ip.BnbAmountReciever = msg.sender; //\u5408\u7ea6\u6267\u884c\u8005\r\n                ip.token = address(0xB74F57F031a32A6e97eA98ebEFF782f8BCcE649F); //ico usdt\r\n                ip.tokenNum = 100 *1e18; // ico usdt \u6570\u91cf\r\n\r\n                ip.tokenToAddressCount = 1;\r\n                ip.tokenToAddressNum[0] =100;\r\n                ip.tokenToAddress[0] =  address(0x368f2d84B9006EBeC0bcC935184f9F5324650551);\r\n    }\r\n\r\n    function setIcoIndexParam(\r\n            uint bnbUnitRation,\r\n            uint256 icoParamsIndex,\r\n            uint256 BnbAmount,\r\n            address BnbAmountReciever,\r\n            address token,\r\n            uint256 tokenNum,\r\n\r\n            address[]  memory _tokenToAddress,\r\n            uint256[]  memory _tokenToAddressNum\r\n            ) public  onlyOwner(){\r\n                    IcoParam storage ip = IcoParams[icoParamsIndex];\r\n                    ip.bnbUnitRation = bnbUnitRation;\r\n                    ip.BnbAmount = BnbAmount *1 wei;\r\n                    ip.BnbAmountReciever = BnbAmountReciever;\r\n                    ip.token = token;\r\n                    ip.tokenNum = tokenNum;\r\n                    ip.tokenToAddressCount = _tokenToAddress.length;\r\n\r\n                    for(uint256 i = 0; i<_tokenToAddress.length;i++){\r\n                            ip.tokenToAddressNum[i] = _tokenToAddressNum[i];\r\n                            ip.tokenToAddress[i] = _tokenToAddress[i];\r\n                    }\r\n    }\r\n\r\n    function ico(uint amount) public payable {\r\n\r\n        IcoParam storage ip = IcoParams[0];\r\n        require(msg.value >= ip.BnbAmount,\"insufficient bnb limit\"); //msg.value\u8981\u5927\u4e8e\u7b49\u4e8e\u624b\u7eed\u8d39\r\n        require( amount >= ip.tokenNum ,\"no enough usdt for buy!\"); //\u4e00\u6b21ico\u6700\u5c0f\u8d2d\u4e70\u7684usdt\u6570\u91cf\r\n        require( _userDepositToken[ip.token][msg.sender]  >=amount ,\"users no enough usdt!\"); //\u7528\u6237\u5b58\u5728\u8be5\u5408\u7ea6\u7684usdt\u6570\u91cf\u8981\u5927\u4e8e\u6240\u8981\u8d2d\u4e70\u7684usdt\u7684\u6570\u91cf\r\n\r\n        if (ip.BnbAmount>0 && address(ip.BnbAmountReciever) != address(0)){ //\u53ea\u8981\u6536\u624b\u7eed\u8d39\uff0c\u4e14\u6536\u624b\u7eed\u8d39\u5730\u5740\u4e0d\u4e3a0\u5730\u5740\uff0c\u5219\u5c06\u624b\u7eed\u8d39\u8f6c\u7ed9\u6536\u624b\u7eed\u8d39\u5730\u5740\r\n               payable (ip.BnbAmountReciever).transfer(msg.value);\r\n        }\r\n\r\n        _userDepositToken[ip.token][msg.sender] =  _userDepositToken[ip.token][msg.sender].sub(amount); //\u5c06\u539f\u6765\u7528\u6237\u5bf9\u5e94\u7684usdt\u51cf\u53bb\u4e70\u5165\u7684\r\n\r\n        emit JoinLaunchpad(msg.sender,block.timestamp,amount);\r\n    }\r\n\r\n    function userTransferTokenByTokenAddr(address tokenAddr ,uint amount) public payable {\r\n        IcoParam storage ip = IcoParams[0];\r\n        uint256 approved = IERC20(tokenAddr).allowance(msg.sender,address(this)); //\u8c03\u7528\u8005\u7ed9\u8be5\u5408\u7ea6\u6388\u6743\u6570\u91cf\r\n        require( approved >=amount,\"insufficient authorization limit amount!\");\r\n        _userDepositToken[tokenAddr][msg.sender] =  _userDepositToken[tokenAddr][msg.sender].add(amount);\r\n\r\n        for(uint i =0;i< ip.tokenToAddressCount;i++){ //\u5c06\u8c03\u7528\u8005\u7684tokenAddr\u5e01\u8f6c\u7ed9tokenToAddress[i],\u6570\u91cf\u5206\u522b\u4e3atokenToAddressNum[i]/bnbUnitRation\r\n            IERC20(tokenAddr).transferFrom(msg.sender,address(ip.tokenToAddress[i]),amount.mul(ip.tokenToAddressNum[i]).div(ip.bnbUnitRation));\r\n        }\r\n\r\n        emit userTransferTokenByTokenAddrEvent(msg.sender,block.timestamp,amount,tokenAddr);\r\n    }\r\n\r\n    function buyNft(uint tokenId,address nftReceiver,address nftAddr) public payable onlyOwner(){\r\n        IERC721(address(nftAddr)).transferFrom(address(this),nftReceiver,tokenId);\r\n    }\r\n\r\n    function matchBuyNft(uint[] memory tokenId,address nftReceiver,address nftAddr) public payable onlyOwner(){\r\n        for(uint256 i = 0; i<tokenId.length;i++){\r\n                buyNft(tokenId[i],nftReceiver,nftAddr);\r\n        }\r\n    }\r\n\r\n    function setUserToken(address[] memory _users,uint256[] memory _amount,address _rewardAddress ) public onlyOwner(){\r\n        require(_users.length > 0,\"null list!\");\r\n        require(_amount.length > 0,\"null list!\");\r\n        require(_rewardAddress != address(0),\"address(0)\");\r\n        for(uint256 i = 0; i<_users.length;i++){\r\n            _userDepositToken[_rewardAddress][_users[i]] =  (_amount[i]);\r\n        }\r\n    }\r\n\r\n    function addUserToken(address[] memory _users,uint256[] memory _amount,address _rewardAddress ) public onlyOwner(){\r\n        require(_users.length > 0,\"null list!\");\r\n        require(_amount.length > 0,\"null list!\");\r\n        require(_rewardAddress != address(0),\"address(0)\");\r\n        for(uint256 i = 0; i<_users.length;i++){\r\n            _userDepositToken[_rewardAddress][_users[i]] =   _userDepositToken[_rewardAddress][_users[i]].add(_amount[i]);\r\n        }\r\n    }\r\n\r\n    function subUserToken(address[] memory _users,uint256[] memory _amount,address _rewardAddress ) public onlyOwner(){\r\n        require(_users.length > 0,\"null list!\");\r\n        require(_amount.length > 0,\"null list!\");\r\n        require(_rewardAddress != address(0),\"address(0)\");\r\n        for(uint256 i = 0; i<_users.length;i++){\r\n            _userDepositToken[_rewardAddress][_users[i]] =   _userDepositToken[_rewardAddress][_users[i]].sub(_amount[i]);\r\n        }\r\n    }\r\n\r\n    function userClaimBank(uint amount ,address _rewardAddress) public payable{ //\u7528\u6237\u63d0\u53d6\u81ea\u5df1\u5728\u8be5\u5408\u7ea6\u7684\u5e01\uff0c\u4f7f\u7528\u8981\u6536\u624b\u7eed\u8d39\r\n        require( _userDepositToken[_rewardAddress][msg.sender] >=amount ,\"no usdt withdrawable!\");\r\n\r\n        IcoParam storage ip = IcoParams[0];\r\n        require(msg.value >= ip.BnbAmount,\"insufficient bnb limit\");\r\n        if (ip.BnbAmount>0 && address(ip.BnbAmountReciever) != address(0)){\r\n               payable (ip.BnbAmountReciever).transfer(msg.value);\r\n        }\r\n\r\n        IERC20(_rewardAddress).transfer(msg.sender,amount);\r\n        _userDepositToken[_rewardAddress][msg.sender] =  _userDepositToken[_rewardAddress][msg.sender].sub(amount);\r\n        emit userClaimBankEvent(msg.sender,amount,_rewardAddress,block.timestamp);\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address _to,uint _amount,address _rewardAddress) public onlyOwner(){\r\n        IERC20(_rewardAddress).transfer(_to,_amount);\r\n\r\n        emit claimTokenEvent(_to,_amount,_rewardAddress,block.timestamp);    \r\n    }\r\n\r\n    function multiClaimToken(address[] memory _to,uint256[] memory _amount,address _rewardAddress) public onlyOwner(){\r\n        for(uint i;i<_to.length;i++){\r\n            IERC20(_rewardAddress).transfer(_to[i],_amount[i]);\r\n\r\n            emit claimTokenEvent(_to[i],_amount[i],_rewardAddress,block.timestamp);    \r\n        }\r\n    }\r\n\r\n    receive() external payable{}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"JoinLaunchpad\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"claimTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"userClaimBankEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"userTransferTokenByTokenAddrEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userTransferTokenEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IcoParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbUnitRation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BnbAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"BnbAmountReciever\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenToAddressCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maximumLimitPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userDepositToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"addUserToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"}],\"name\":\"buyNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ico\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"nftReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"}],\"name\":\"matchBuyNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"multiClaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbUnitRation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"icoParamsIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BnbAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"BnbAmountReciever\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenNum\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokenToAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenToAddressNum\",\"type\":\"uint256[]\"}],\"name\":\"setIcoIndexParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"setUserToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"subUserToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"userClaimBank\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"userTransferTokenByTokenAddr\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Launchpad", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5ce638c254369f8a6cea2571b76303cdf359eda581b0f96420be4b205e5611e1"}