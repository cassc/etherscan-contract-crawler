{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/libs/IBEP20.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract IBEP20 {\r\n  mapping(address => uint256) internal _balances;\r\n  mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n  uint256 public _totalSupply;\r\n  uint8 public _decimals;\r\n  string public _symbol;\r\n  string public _name;\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view virtual returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view virtual returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view virtual returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the token name.\r\n   */\r\n  function name() external view virtual returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view virtual returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(\r\n    address recipient,\r\n    uint256 amount\r\n  ) external virtual returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address spender\r\n  ) external view virtual returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(\r\n    address spender,\r\n    uint256 amount\r\n  ) external virtual returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external virtual returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/libs/Context.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this;\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File: contracts/libs/SafeMath.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/libs/Ownable.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  using SafeMath for uint256;\r\n\r\n  address internal _owner;\r\n  uint256 internal _signatureLimit = 2;\r\n  mapping(bytes32 => uint256) internal _signatureCount;\r\n  mapping(address => bool) internal _admins;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    _admins[msgSender] = true;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(_admins[_msgSender()], \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  modifier multSignature(uint256 amount, address receipt) {\r\n    require(_admins[_msgSender()], \"Ownable: caller is not the admin\");\r\n    bytes32 txHash = encodeTransactionData(amount, receipt);\r\n    if (_signatureCount[txHash].add(1) >= _signatureLimit) {\r\n      _;\r\n      _signatureCount[txHash] = 0;\r\n    } else {\r\n      _signatureCount[txHash]++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n\r\n  function setSignatureLimit(uint256 signature) public onlyOwner {\r\n    _signatureLimit = signature;\r\n  }\r\n\r\n  function isAdmin(address uid) public view returns (bool) {\r\n    return _admins[uid];\r\n  }\r\n\r\n  function setAdmin(address admin) public onlyOwner {\r\n    _admins[admin] = true;\r\n  }\r\n\r\n  function removeAdmin(address admin) public onlyOwner {\r\n    _admins[admin] = false;\r\n  }\r\n\r\n  function encodeTransactionData(\r\n    uint256 amount,\r\n    address receipt\r\n  ) private pure returns (bytes32) {\r\n    return keccak256(abi.encode(amount, receipt));\r\n  }\r\n}\r\n\r\n// File: contracts/libs/SmartVault.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ncontract SmartVault {\r\n  mapping(address => bool) private _owner;\r\n\r\n  constructor(address creator) {\r\n    _owner[msg.sender] = true;\r\n    _owner[creator] = true;\r\n  }\r\n\r\n  function transfer(address token, address to, uint256 amount) public {\r\n    require(_owner[msg.sender], \"permission denied\");\r\n    amount = amount == 0 ? IBEP20(token).balanceOf(address(this)) : amount;\r\n    IBEP20(token).transfer(to, amount);\r\n  }\r\n}\r\n\r\n// File: contracts/libs/IUniswapV2Pair.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Pair {\r\n  function factory() external view returns (address);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n  function sync() external;\r\n}\r\n\r\n// File: contracts/libs/IUniswapV2Factory.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(\r\n    address indexed token0,\r\n    address indexed token1,\r\n    address pair,\r\n    uint256\r\n  );\r\n\r\n  function getPair(\r\n    address _tokenA,\r\n    address _tokenB\r\n  ) external view returns (address pair);\r\n\r\n  function allPairs(uint256) external view returns (address pair);\r\n\r\n  function allPairsLength() external view returns (uint256);\r\n\r\n  function createPair(\r\n    address _tokenA,\r\n    address _tokenB\r\n  ) external returns (address pair);\r\n\r\n  function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: contracts/libs/IUniswapV2Router.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Router {\r\n  function factory() external pure returns (address);\r\n\r\n  function getAmountsOut(\r\n    uint256 amountIn,\r\n    address[] calldata path\r\n  ) external view returns (uint256[] memory amounts);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/T3913.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ncontract T3913 is IBEP20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  struct User {\r\n    address uid;\r\n    address pid;\r\n    uint256 time;\r\n  }\r\n\r\n  mapping(address => User) internal _users;\r\n  mapping(address => User[]) internal _inviters;\r\n  mapping(address => bool) internal _robots;\r\n  mapping(address => bool) internal _excluded;\r\n  mapping(address => bool) internal _v2Pairs;\r\n  mapping(address => bool) internal _burnNot;\r\n  mapping(address => uint256) internal _burnTime;\r\n  mapping(address => uint256) internal _deposits;\r\n  mapping(address => uint256) internal _dividendTemp;\r\n  mapping(address => uint256) internal _dividendIndex;\r\n  mapping(address => mapping(address => bool)) internal _relationInvite;\r\n  mapping(address => uint256) internal _dividendTempTime;\r\n  mapping(address => uint256) internal _diviendTime;\r\n  mapping(address => uint256) internal _dividendTotal;\r\n  mapping(address => uint256) internal _inviteTotal;\r\n\r\n  IUniswapV2Router internal _v2Router;\r\n\r\n  SmartVault internal _smartVault_usdt;\r\n  SmartVault internal _smartVault_dividend_1;\r\n  SmartVault internal _smartVault_dividend_2;\r\n  SmartVault internal _smartVault_invite;\r\n  SmartVault internal _smartVault_transit;\r\n\r\n  IBEP20 internal _USDT;\r\n  IBEP20 internal _T9419;\r\n  address internal _v2Pair;\r\n\r\n  uint256 internal constant MAX = type(uint256).max;\r\n  uint256 internal constant RBASE = 10000;\r\n  uint256 internal _feeBurn;\r\n  uint256 internal _feeLP_usdt;\r\n  uint256 internal _depositTotal;\r\n\r\n  uint256 internal _maxTxUSDTLP = 50e18;\r\n  uint256 internal _dividendRate = 40;\r\n  uint256 internal _dividendCycle = 24 hours;\r\n  uint256 internal _burnCycle = 60 minutes;\r\n  uint256 internal _burnCycleLP = 30 minutes;\r\n  uint256 internal _burnRate = 60;\r\n  uint256 internal _burnRateLP = 75;\r\n  uint256 internal _burnAssignRateDividend = 2500;\r\n  uint256 internal _burnAssignRatePool = 1800; // default 16%\r\n  uint256 internal _inviteRate = 700;\r\n  uint256 internal _inviteRateLP = 200;\r\n\r\n  uint256 internal _pullRate = 10;\r\n  uint256 internal _pullAssignRate = 1100;\r\n\r\n  uint256 internal _dividendTotalIndex;\r\n  uint256 internal _diviendBase = 0;\r\n  uint256 internal _maxDividend = 20;\r\n  uint256 internal _time;\r\n\r\n  constructor(\r\n    address router,\r\n    address usdt,\r\n    address t9419,\r\n    address receipt,\r\n    uint256 time\r\n  ) {\r\n    _v2Router = IUniswapV2Router(router);\r\n\r\n    _v2Pair = IUniswapV2Factory(_v2Router.factory()).createPair(\r\n      usdt,\r\n      address(this)\r\n    );\r\n\r\n    _USDT = IBEP20(usdt);\r\n    _T9419 = IBEP20(t9419);\r\n\r\n    _time = time;\r\n\r\n    require(address(usdt) < address(this), \"invalid token address\");\r\n\r\n    _v2Pairs[_v2Pair] = true;\r\n\r\n    _smartVault_usdt = new SmartVault(msg.sender);\r\n    _smartVault_transit = new SmartVault(msg.sender);\r\n    _smartVault_dividend_1 = new SmartVault(msg.sender);\r\n    _smartVault_dividend_2 = new SmartVault(msg.sender);\r\n    _smartVault_invite = new SmartVault(msg.sender);\r\n\r\n    _burnNot[address(_smartVault_usdt)] = true;\r\n    _burnNot[address(_smartVault_invite)] = true;\r\n    _burnNot[address(_smartVault_transit)] = true;\r\n    _burnNot[address(_smartVault_dividend_1)] = true;\r\n    _burnNot[address(_smartVault_dividend_2)] = true;\r\n    _burnNot[address(this)] = true;\r\n    _burnNot[receipt] = true;\r\n\r\n    _name = \"3913 token\";\r\n    _symbol = \"3913\";\r\n    _decimals = 18;\r\n    _totalSupply = 16000000000000 * 10 ** uint256(_decimals);\r\n    _balances[receipt] = _totalSupply;\r\n    emit Transfer(address(0), receipt, _totalSupply);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() public view override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() public view override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token name.\r\n   */\r\n  function name() public view override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _uid) public view override returns (uint256) {\r\n    return _balances[_uid].sub(burnAmount(_uid));\r\n  }\r\n\r\n  function burnAmount(address uid) public view returns (uint256) {\r\n    if (_burnNot[uid]) return 0;\r\n    if (_v2Pairs[uid]) return 0;\r\n    if (_burnTime[uid] == 0) return 0;\r\n    if (_totalSupply <= 39130000e18) return 0;\r\n    if (block.timestamp.sub(_burnTime[uid]) < _burnCycle) return 0;\r\n\r\n    uint256 multi = block.timestamp.sub(_burnTime[uid]).div(_burnCycle);\r\n    uint256 amount = _balances[uid].mul(_burnRate).div(100000).mul(multi);\r\n\r\n    if (_totalSupply.sub(amount) < 39130000e18) {\r\n      amount = _totalSupply.sub(39130000e18);\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  function burnAmountPair(address uid) private view returns (uint256) {\r\n    if (block.timestamp.sub(_burnTime[uid]) < _burnCycleLP) return 0;\r\n    uint256 multi = block.timestamp.sub(_burnTime[uid]).div(_burnCycleLP);\r\n    return _balances[uid].mul(_burnRateLP).div(100000).mul(multi);\r\n  }\r\n\r\n  function getTokenPrice(\r\n    address token1,\r\n    address token2,\r\n    uint256 amount\r\n  ) public view returns (uint256 price) {\r\n    if (block.chainid == 1337) return amount;\r\n    amount = amount == 0 ? 1e18 : amount;\r\n    address[] memory _path = new address[](2);\r\n    _path[0] = address(token1);\r\n    _path[1] = address(token2);\r\n    uint256[] memory _amounts = _v2Router.getAmountsOut(amount, _path);\r\n    return _amounts[1];\r\n  }\r\n\r\n  function transfer(\r\n    address token,\r\n    address to,\r\n    uint256 amount\r\n  ) external onlyAdmin returns (bool) {\r\n    return IBEP20(token).transfer(to, amount);\r\n  }\r\n\r\n  function _bindInvite(address to) private {\r\n    address from = msg.sender;\r\n    if (_v2Pairs[from]) return;\r\n    if (_v2Pairs[to]) return;\r\n\r\n    if (!_relationInvite[to][from]) {\r\n      if (!_relationInvite[from][to]) {\r\n        _relationInvite[from][to] = true;\r\n      }\r\n    } else {\r\n      if (_users[from].uid == address(0)) {\r\n        _users[from] = User(from, to, block.timestamp);\r\n        _inviters[to].push(_users[from]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function transfer(\r\n    address to,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    _bindInvite(to);\r\n    address from = _msgSender();\r\n    return _transfer(from, to, amount);\r\n  }\r\n\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  ) external view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    // burnPairs();\r\n    return true;\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    _transfer(from, to, amount);\r\n    if (_allowances[from][msg.sender] != MAX) {\r\n      _approve(from, msg.sender, _allowances[from][msg.sender].sub(amount));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  ) public returns (bool) {\r\n    _approve(\r\n      msg.sender,\r\n      spender,\r\n      _allowances[msg.sender][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) public returns (bool) {\r\n    _approve(\r\n      msg.sender,\r\n      spender,\r\n      _allowances[msg.sender][spender].sub(subtractedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function _isLiquidity(\r\n    address from,\r\n    address to\r\n  ) private view returns (bool isAdd, bool isDel) {\r\n    address v2Pair;\r\n    if (_v2Pairs[from]) {\r\n      v2Pair = from;\r\n    } else if (_v2Pairs[to]) {\r\n      v2Pair = to;\r\n    } else {\r\n      return (false, false);\r\n    }\r\n    address token0 = IUniswapV2Pair(address(v2Pair)).token0();\r\n\r\n    (uint256 r0, , ) = IUniswapV2Pair(address(v2Pair)).getReserves();\r\n    uint256 bal0 = IBEP20(token0).balanceOf(address(v2Pair));\r\n\r\n    if (token0 != address(this)) {\r\n      if (_v2Pairs[to] && bal0 > r0) isAdd = true;\r\n      if (_v2Pairs[from] && bal0 < r0) isDel = true;\r\n    }\r\n  }\r\n\r\n  function _burnToken(address uid) private {\r\n    if (_totalSupply <= 39130000e18) return;\r\n    if (!_v2Pairs[uid]) {\r\n      uint256 amount = burnAmount(uid);\r\n      if (amount > 0) {\r\n        _burnTime[uid] = block.timestamp;\r\n        _balances[uid] -= amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(uid, address(0), amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  function burnPairs() public {\r\n    address pair;\r\n    address to;\r\n    uint256 amount;\r\n    uint256 amountDividend;\r\n\r\n    pair = _v2Pair;\r\n    amount = burnAmountPair(pair);\r\n    if (amount > 0) {\r\n      to = address(_smartVault_usdt);\r\n      _burnTime[pair] = block.timestamp;\r\n      _balances[pair] -= amount;\r\n\r\n      amountDividend = amount.mul(_burnAssignRateDividend).div(RBASE);\r\n      uint256 amount_pool = amount.mul(_burnAssignRatePool).div(RBASE);\r\n      uint256 amount_invite = amount.sub(amountDividend).sub(amount_pool);\r\n\r\n      // c2 pool\r\n      _balances[to] += amount_pool;\r\n      emit Transfer(pair, to, amount_pool);\r\n\r\n      // c1\r\n      _balances[address(_smartVault_dividend_1)] += amountDividend;\r\n      emit Transfer(pair, address(_smartVault_dividend_1), amountDividend);\r\n      // c2 invite\r\n      _balances[address(_smartVault_invite)] += amount_invite;\r\n      emit Transfer(pair, address(_smartVault_invite), amount_invite);\r\n\r\n      IUniswapV2Pair(pair).sync();\r\n      addLiquidity();\r\n    }\r\n  }\r\n\r\n  function _takeTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal returns (bool) {\r\n    if (_burnTime[to] == 0) {\r\n      _burnTime[to] = block.timestamp;\r\n    }\r\n    if (_balances[from] == 0) {\r\n      _burnTime[from] = 0;\r\n    }\r\n    _balances[to] = _balances[to].add(amount);\r\n    emit Transfer(from, to, amount);\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal returns (bool) {\r\n    require(!_robots[from], \"is robot\");\r\n    require(from != address(0), \"BEP20: transfer from the zero address\");\r\n    require(to != address(0), \"BEP20: transfer to the zero address\");\r\n    require(amount > 0, \"BEP20: transfer amount must be greater than zero\");\r\n\r\n    (bool isAdd, bool isDel) = _isLiquidity(from, to);\r\n    updateTime();\r\n    _burnToken(from);\r\n    _burnToken(to);\r\n    if (_v2Pairs[to] && !isAdd && from != address(this)) {\r\n      burnPairs();\r\n    }\r\n\r\n    if (_v2Pairs[from] && !isDel) {\r\n      _inviteBonus(to, amount);\r\n    }\r\n\r\n    if (amount == _balances[from] && !isDel) {\r\n      amount = amount.sub(0.001e18);\r\n    }\r\n    _balances[from] = _balances[from].sub(amount);\r\n\r\n    bool isSwap;\r\n    bool isSell;\r\n    uint256 rateBurn;\r\n    uint256 rateLP;\r\n\r\n    if (_v2Pairs[from] && !isDel && to != address(_smartVault_transit)) {\r\n      if (!_excluded[to]) {\r\n        isSwap = true;\r\n        rateBurn = 200;\r\n        rateLP = 200;\r\n      }\r\n    } else if (_v2Pairs[to] && !isAdd && from != address(this)) {\r\n      isSell = true;\r\n      if (!_excluded[from]) {\r\n        isSwap = true;\r\n        rateBurn = 200;\r\n        rateLP = 200;\r\n      }\r\n    }\r\n\r\n    if (isSwap) {\r\n      uint256 fee1 = amount.mul(rateBurn).div(RBASE);\r\n      uint256 fee2 = amount.mul(rateLP).div(RBASE);\r\n      _takeTransfer(from, address(this), fee1.add(fee2));\r\n      amount = amount.sub(fee1.add(fee2));\r\n      _feeBurn = _feeBurn.add(fee1);\r\n      _feeLP_usdt = _feeLP_usdt.add(fee2);\r\n\r\n      if (isSell && from != address(this)) {\r\n        if (\r\n          getTokenPrice(address(this), address(_USDT), _feeBurn) >= _maxTxUSDTLP\r\n        ) {\r\n          _tokenSell(\r\n            address(this),\r\n            address(_USDT),\r\n            address(_smartVault_transit),\r\n            _feeBurn\r\n          );\r\n          _feeBurn = 0;\r\n          uint256 _balance_u = _USDT.balanceOf(address(_smartVault_transit));\r\n          _smartVault_transit.transfer(\r\n            address(_USDT),\r\n            address(this),\r\n            _balance_u\r\n          );\r\n          // by 9419 to burn\r\n          _tokenBuy(address(_USDT), address(_T9419), address(0), _balance_u);\r\n        }\r\n        _addLiquidity();\r\n      }\r\n    }\r\n\r\n    _takeTransfer(from, to, amount);\r\n    return true;\r\n  }\r\n\r\n  function _inviteBonus(address to, uint256 amount) private {\r\n    if (_users[to].pid != address(0)) {\r\n      uint256 balance_t = _balances[address(_smartVault_invite)];\r\n      if (balance_t == 0) return;\r\n\r\n      uint256 bunusAmount = amount.mul(_inviteRate).div(RBASE);\r\n      bunusAmount = bunusAmount > balance_t ? balance_t : bunusAmount;\r\n\r\n      _smartVault_invite.transfer(address(this), _users[to].pid, bunusAmount);\r\n    }\r\n  }\r\n\r\n  function updateTime() public {\r\n    uint256 time = _time;\r\n    if (time.add(_dividendCycle) > block.timestamp) return;\r\n    do {\r\n      time = time.add(_dividendCycle);\r\n    } while (time.add(_dividendCycle) < block.timestamp);\r\n    _time = time;\r\n    _updateIndex();\r\n  }\r\n\r\n  function _updateIndex() private {\r\n    uint256 dividend_base = _balances[address(_smartVault_dividend_1)]\r\n      .mul(_dividendRate)\r\n      .div(RBASE);\r\n    if (dividend_base > 0) {\r\n      _smartVault_dividend_1.transfer(\r\n        address(this),\r\n        address(_smartVault_dividend_2),\r\n        dividend_base\r\n      );\r\n    }\r\n    _diviendBase = _balances[address(_smartVault_dividend_2)];\r\n    _dividendTotalIndex = getAmountPledgeLPTotal();\r\n  }\r\n\r\n  function _tokenSell(\r\n    address token1,\r\n    address token2,\r\n    address to,\r\n    uint256 swapAmount\r\n  ) internal {\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(token1);\r\n    path[1] = address(token2);\r\n    IBEP20(token1).approve(address(_v2Router), swapAmount);\r\n    _v2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n      swapAmount,\r\n      0,\r\n      path,\r\n      to,\r\n      block.timestamp.add(60)\r\n    );\r\n  }\r\n\r\n  function _tokenBuy(\r\n    address token1,\r\n    address token2,\r\n    address to,\r\n    uint256 swapAmount\r\n  ) internal {\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(token1);\r\n    path[1] = address(token2);\r\n    IBEP20(token1).approve(address(_v2Router), swapAmount);\r\n    _v2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n      swapAmount,\r\n      0,\r\n      path,\r\n      to,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function _addLiquidity() private {\r\n    if (\r\n      getTokenPrice(address(this), address(_USDT), _feeLP_usdt) >= _maxTxUSDTLP\r\n    ) {\r\n      _tokenSell(\r\n        address(this),\r\n        address(_USDT),\r\n        address(_smartVault_usdt),\r\n        _feeLP_usdt\r\n      );\r\n      _feeLP_usdt = 0;\r\n    }\r\n    uint256 usdt_num = _USDT.balanceOf(address(_smartVault_usdt));\r\n    if (usdt_num > 0) {\r\n      uint256 t3913_num = getTokenPrice(\r\n        address(_USDT),\r\n        address(this),\r\n        usdt_num\r\n      );\r\n      if (_balances[address(_smartVault_invite)] >= t3913_num) {\r\n        _smartVault_invite.transfer(address(this), address(this), t3913_num);\r\n        _smartVault_usdt.transfer(address(_USDT), address(this), usdt_num);\r\n        _addLiquidityUSDT(usdt_num, t3913_num);\r\n      }\r\n    }\r\n  }\r\n\r\n  function addLiquidity() public {\r\n    uint256 t3913_value = getTokenPrice(\r\n      address(this),\r\n      address(_USDT),\r\n      _balances[address(_smartVault_usdt)]\r\n    );\r\n\r\n    if (t3913_value == 0) return;\r\n\r\n    uint256 sell_3913 = getTokenPrice(\r\n      address(_USDT),\r\n      address(this),\r\n      t3913_value.div(2)\r\n    );\r\n\r\n    _smartVault_usdt.transfer(address(this), address(this), 0);\r\n\r\n    _tokenSell(\r\n      address(this),\r\n      address(_USDT),\r\n      address(_smartVault_transit),\r\n      sell_3913\r\n    );\r\n\r\n    uint256 usdt_num = _USDT.balanceOf(address(_smartVault_transit));\r\n    _smartVault_transit.transfer(address(_USDT), address(this), 0);\r\n\r\n    uint256 _amountA = usdt_num;\r\n    uint256 _amountB = getTokenPrice(address(_USDT), address(this), _amountA);\r\n    if (_amountB > _balances[address(this)]) return;\r\n    _addLiquidityUSDT(_amountA, _amountB);\r\n  }\r\n\r\n  function _addLiquidityUSDT(uint256 amountA, uint256 amountB) private {\r\n    uint256 amountADesired = amountA;\r\n    uint256 amountBDesired = amountB;\r\n    uint256 amountAMin = 0;\r\n    uint256 amountBMin = 0;\r\n    uint256 deadline = block.timestamp;\r\n    address to = address(0);\r\n\r\n    address tokenA = address(_USDT);\r\n    address tokenB = address(this);\r\n\r\n    _USDT.approve(address(_v2Router), amountA);\r\n    _approve(address(this), address(_v2Router), amountB);\r\n\r\n    _v2Router.addLiquidity(\r\n      tokenA,\r\n      tokenB,\r\n      amountADesired,\r\n      amountBDesired,\r\n      amountAMin,\r\n      amountBMin,\r\n      to,\r\n      deadline\r\n    );\r\n  }\r\n\r\n  function pledge(uint256 amount) public {\r\n    updateTime();\r\n    address uid = msg.sender;\r\n    if (hasDividend(uid)) {\r\n      dividend();\r\n    }\r\n    IBEP20(_v2Pair).transferFrom(uid, address(this), amount);\r\n\r\n    _deposits[uid] += amount;\r\n    _depositTotal += amount;\r\n\r\n    _dividendTemp[uid] += amount;\r\n    _dividendTempTime[uid] = _time.add(_dividendCycle);\r\n\r\n    if (_diviendTime[uid] == 0) {\r\n      _diviendTime[uid] = _time;\r\n    }\r\n  }\r\n\r\n  function getAmountLPView(address uid) public view returns (uint256) {\r\n    uint256 lp = _deposits[uid];\r\n    uint256 balance = balanceOf(_v2Pair);\r\n    uint256 total = IBEP20(_v2Pair).totalSupply();\r\n    if (total == 0) return 0;\r\n    return lp.mul(balance).div(total);\r\n  }\r\n\r\n  function getAmountLP(address uid) public view returns (uint256) {\r\n    uint256 lp = _dividendIndex[uid];\r\n    if (_time >= _dividendTempTime[uid]) {\r\n      lp += _dividendTemp[uid];\r\n    }\r\n    uint256 balance = balanceOf(_v2Pair);\r\n    uint256 total = IBEP20(_v2Pair).totalSupply();\r\n    if (total == 0) return 0;\r\n    return lp.mul(balance).div(total);\r\n  }\r\n\r\n  function getAmountLPTotal() public view returns (uint256) {\r\n    return _balances[_v2Pair];\r\n  }\r\n\r\n  function getAmountPledgeLPTotal() public view returns (uint256) {\r\n    uint256 lp = _depositTotal;\r\n    uint256 balance = balanceOf(_v2Pair);\r\n    uint256 total = IBEP20(_v2Pair).totalSupply();\r\n    if (total == 0) return 0;\r\n    return lp.mul(balance).div(total);\r\n  }\r\n\r\n  function hasDividend(address uid) public view returns (bool) {\r\n    if (_diviendTime[uid] == 0) return false;\r\n    if (_balances[address(_smartVault_dividend_2)] == 0) return false;\r\n    if (_diviendTime[uid] == _time) return false;\r\n    return true;\r\n  }\r\n\r\n  function dividendAmount(address uid) public view returns (uint256) {\r\n    if (!hasDividend(uid)) return 0;\r\n    return dividendAmountBase(uid);\r\n  }\r\n\r\n  function dividendAmountBase(address uid) public view returns (uint256) {\r\n    uint256 amountLP = getAmountLP(uid);\r\n    if (amountLP == 0) return 0;\r\n    uint256 amountLPTotal = _dividendTotalIndex;\r\n    if (amountLPTotal == 0) return 0;\r\n    return _diviendBase.mul(amountLP).div(amountLPTotal);\r\n  }\r\n\r\n  function dividend() public {\r\n    updateTime();\r\n    address uid = msg.sender;\r\n    require(hasDividend(uid), \"no dividend\");\r\n\r\n    uint256 amount = dividendAmount(uid);\r\n    _smartVault_dividend_2.transfer(address(this), uid, amount);\r\n    _dividendTotal[uid] += amount;\r\n\r\n    if (_users[uid].pid != address(0)) {\r\n      uint256 dividendInvite = dividendAmountBase(_users[uid].pid);\r\n      if (dividendInvite > 0) {\r\n        uint256 bonusBase = dividendInvite > amount ? amount : dividendInvite;\r\n        uint256 inviteBonus = bonusBase.mul(_inviteRateLP).div(RBASE);\r\n        if (inviteBonus > 0) {\r\n          _smartVault_dividend_1.transfer(\r\n            address(this),\r\n            _users[uid].pid,\r\n            inviteBonus\r\n          );\r\n          _inviteTotal[_users[uid].pid] += inviteBonus;\r\n        }\r\n      }\r\n    }\r\n    if (_dividendTemp[uid] > 0 && _time >= _dividendTempTime[uid]) {\r\n      _dividendIndex[uid] += _dividendTemp[uid];\r\n      _dividendTemp[uid] = 0;\r\n    }\r\n    _diviendTime[uid] = _time;\r\n  }\r\n\r\n  function hasWithdraw(address uid) public view returns (bool) {\r\n    return _deposits[uid] > 0;\r\n  }\r\n\r\n  function withdraw() public {\r\n    address uid = msg.sender;\r\n    require(hasWithdraw(uid), \"no LP\");\r\n\r\n    updateTime();\r\n    if (hasDividend(uid)) {\r\n      dividend();\r\n    }\r\n\r\n    _diviendTime[uid] = 0;\r\n    uint256 amount = _deposits[uid];\r\n    if (amount > 0) {\r\n      _deposits[uid] = 0;\r\n      _dividendIndex[uid] = 0;\r\n      _dividendTemp[uid] = 0;\r\n      _depositTotal -= amount;\r\n      IBEP20(_v2Pair).transfer(uid, amount);\r\n    }\r\n  }\r\n\r\n  function getParams(\r\n    address uid\r\n  )\r\n    public\r\n    view\r\n    returns (\r\n      uint256 totalLP,\r\n      uint256 myLP,\r\n      uint256 myLPIndex,\r\n      uint256 pledgeTotalLP,\r\n      uint256 pledgeTotalLPIndex,\r\n      uint256 amount,\r\n      uint256 dividendTotal,\r\n      uint256 inviteTotal,\r\n      bool isDividend,\r\n      bool isWithdraw\r\n    )\r\n  {\r\n    totalLP = getAmountLPTotal();\r\n    myLP = getAmountLPView(uid);\r\n    myLPIndex = getAmountLP(uid);\r\n    pledgeTotalLP = getAmountPledgeLPTotal();\r\n    pledgeTotalLPIndex = _dividendTotalIndex;\r\n    amount = dividendAmount(uid);\r\n    dividendTotal = _dividendTotal[uid];\r\n    inviteTotal = _inviteTotal[uid];\r\n    isDividend = hasDividend(uid);\r\n    isWithdraw = hasWithdraw(uid);\r\n  }\r\n\r\n  function isRobot(address _uid) external view returns (bool) {\r\n    return _robots[_uid];\r\n  }\r\n\r\n  function getV2Pair(address _pair) external view returns (bool) {\r\n    return _v2Pairs[_pair];\r\n  }\r\n\r\n  function getMarketing()\r\n    external\r\n    view\r\n    returns (\r\n      address smart_invite,\r\n      address smart_dividend_1,\r\n      address smart_dividend_2,\r\n      address smart_usdt,\r\n      address smart_transit\r\n    )\r\n  {\r\n    return (\r\n      address(_smartVault_invite),\r\n      address(_smartVault_dividend_1),\r\n      address(_smartVault_dividend_2),\r\n      address(_smartVault_usdt),\r\n      address(_smartVault_transit)\r\n    );\r\n  }\r\n\r\n  function setInviteRate(uint256 rate, uint256 rateLP) external onlyOwner {\r\n    require(rate > 0, \"invalid parameter: rate\");\r\n    require(rateLP > 0, \"invalid parameter: rateLP\");\r\n    _inviteRate = rate;\r\n    _inviteRateLP = rateLP;\r\n  }\r\n\r\n  function setDividendRate(uint256 rate) external onlyOwner {\r\n    require(rate > 0, \"invalid parameter: rate\");\r\n    _dividendRate = rate;\r\n  }\r\n\r\n  function setV2Pair(address _pair) external onlyOwner {\r\n    require(_pair != address(0), \"is zero address\");\r\n    _v2Pairs[_pair] = true;\r\n  }\r\n\r\n  function unsetV2Pair(address _pair) external onlyOwner {\r\n    require(_pair != address(0), \"is zero address\");\r\n    delete _v2Pairs[_pair];\r\n  }\r\n\r\n  function setBurnNot(address uid) external onlyOwner {\r\n    _burnNot[uid] = true;\r\n  }\r\n\r\n  function unsetBurnNot(address uid) external onlyOwner {\r\n    _burnNot[uid] = false;\r\n  }\r\n\r\n  function setBurnAssignRate(uint256 rate1, uint256 rate2) external onlyOwner {\r\n    require(rate1 > 0, \"invalid parameter: rate1\");\r\n    require(rate2 > 0, \"invalid parameter: rate2\");\r\n    _burnAssignRateDividend = rate1;\r\n    _burnAssignRatePool = rate2;\r\n  }\r\n\r\n  function setRobot(address _uid) external onlyOwner {\r\n    require(!_robots[_uid]);\r\n    _robots[_uid] = true;\r\n  }\r\n\r\n  function unsetRobot(address _uid) external onlyOwner {\r\n    require(_robots[_uid]);\r\n    _robots[_uid] = false;\r\n  }\r\n\r\n  function setExcluded(address uid) external onlyOwner {\r\n    _excluded[uid] = true;\r\n  }\r\n\r\n  function unsetExcluded(address uid) external onlyOwner {\r\n    _excluded[uid] = false;\r\n  }\r\n\r\n  function setMaxTxUSDTLP(uint256 amount) external onlyOwner {\r\n    _maxTxUSDTLP = amount;\r\n  }\r\n\r\n  function setPullRate(uint256 rate) external onlyOwner {\r\n    require(rate > 0, \"invalid parameter: rate\");\r\n    _pullRate = rate;\r\n  }\r\n\r\n  function setPullAssignRate(uint256 rate) external onlyOwner {\r\n    require(rate > 0, \"invalid parameter: rate\");\r\n    _pullAssignRate = rate;\r\n  }\r\n\r\n  function setDividendCycle(uint256 sec) external onlyOwner {\r\n    require(sec > 0, \"invalid parameter: sec\");\r\n    _dividendCycle = sec;\r\n  }\r\n\r\n  function setBurnCycle(uint256 sec) external onlyOwner {\r\n    require(sec > 0, \"invalid parameter: sec\");\r\n    _burnCycle = sec;\r\n  }\r\n\r\n  function setBurnCycleLP(uint256 sec) external onlyOwner {\r\n    require(sec > 0, \"invalid parameter: sec\");\r\n    _burnCycleLP = sec;\r\n  }\r\n\r\n  function setBurnRate(uint256 rate) external onlyOwner {\r\n    require(rate > 0, \"invalid parameter: rate\");\r\n    _burnRate = rate;\r\n  }\r\n\r\n  function setBurnRateLP(uint256 rate) external onlyOwner {\r\n    require(rate > 0, \"invalid parameter: rate\");\r\n    _burnRateLP = rate;\r\n  }\r\n\r\n  function setMaxDividend(uint256 max) external onlyOwner {\r\n    require(_maxDividend > 0, \"invalid parameter\");\r\n    require(_maxDividend != max);\r\n    _maxDividend = max;\r\n  }\r\n\r\n  function getUser(address uid) external view returns (User memory) {\r\n    return _users[uid];\r\n  }\r\n\r\n  function getFeeLP() external view returns (uint256 usdt) {\r\n    return _feeLP_usdt;\r\n  }\r\n\r\n  function defaultPair() external view returns (address usdt) {\r\n    usdt = _v2Pair;\r\n  }\r\n\r\n  function getBalanceLP(\r\n    address uid,\r\n    address pair\r\n  ) external view returns (uint256) {\r\n    return IBEP20(pair).balanceOf(uid);\r\n  }\r\n\r\n  function inviteList(\r\n    address uid,\r\n    uint256 page,\r\n    uint256 pageSize\r\n  ) external view returns (User[] memory user, uint256 total) {\r\n    total = _inviters[uid].length;\r\n    if (total == 0) return (user, total);\r\n    page = page < 1 ? 1 : page;\r\n    pageSize = pageSize > total ? total : pageSize;\r\n    uint256 start = (page.sub(1)).mul(pageSize);\r\n    uint256 end = start.add(pageSize);\r\n    if (end > total) end = total;\r\n    user = new User[](end.sub(start));\r\n    for (uint256 i = start; i < end; i++) {\r\n      user[i.sub(start)] = _inviters[uid][i];\r\n    }\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t9419\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"burnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"dividendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"dividendAmountBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"getAmountLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountLPTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"getAmountLPView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountPledgeLPTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getBalanceLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"smart_invite\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smart_dividend_1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smart_dividend_2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smart_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smart_transit\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"getParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myLPIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeTotalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeTotalLPIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividendTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteTotal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDividend\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct T3913.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getV2Pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"hasDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"hasWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"inviteList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct T3913.User[]\",\"name\":\"user\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"isRobot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate2\",\"type\":\"uint256\"}],\"name\":\"setBurnAssignRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sec\",\"type\":\"uint256\"}],\"name\":\"setBurnCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sec\",\"type\":\"uint256\"}],\"name\":\"setBurnCycleLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"setBurnNot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setBurnRateLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sec\",\"type\":\"uint256\"}],\"name\":\"setDividendCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setDividendRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"setExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateLP\",\"type\":\"uint256\"}],\"name\":\"setInviteRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxUSDTLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setPullAssignRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setPullRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"setRobot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signature\",\"type\":\"uint256\"}],\"name\":\"setSignatureLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"unsetBurnNot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"unsetExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"unsetRobot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"unsetV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "T3913", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000086335cb69e4e28fad231dae3e206ce90849a547700000000000000000000000014c1a70ae0e5766462ae7e08cd833825905eccfa000000000000000000000000000000000000000000000000000000006543c780", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://01b938e4710acc43207b7c1a945b4f3f2b88b3f817075624763d46d3cb29159b"}