{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nSky Shiba\r\n\r\nTG: https://t.me/SKY_SHIBA\r\nWeb: https://skytoken.finance\r\n\r\n\r\n\r\nC U ON THE MOON\r\n*/\r\n\r\n/*\r\nMIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory tokenName,\r\n        string memory tokenSymbol,\r\n        uint8 tokenDecimals\r\n    ) {\r\n        _name = tokenName;\r\n        _symbol = tokenSymbol;\r\n        _decimals = tokenDecimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n    \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\ninterface IMaster {\r\n    function rebase() external;\r\n}\r\n\r\ninterface IDistributor {\r\n    function startDistribution() external;\r\n    function setDistributionParameters(uint256 _minPeriod, uint256 _minDistribution, uint256 _gas) external;\r\n    function setShares(address shareholder, uint256 amount) external;\r\n    function process() external;\r\n    function deposit() external payable;\r\n    function claim(address shareholder) external;\r\n    function getUnpaidRewards(address shareholder) external view returns (uint256);\r\n    function getPaidRewards(address shareholder) external view returns (uint256);\r\n    function getClaimTime(address shareholder) external view returns (uint256);\r\n    function countShareholders() external view returns (uint256);\r\n    function getTotalRewards() external view returns (uint256);\r\n    function getTotalRewarded() external view returns (uint256);\r\n    function migrate(address distributor) external;\r\n}\r\n\r\ninterface IAntiSnipe {\r\n    function transferCheck(address from, address to, uint256 amount) external returns (bool checked);\r\n}\r\n\r\ncontract SkyShiba is ERC20Detailed, Ownable {\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n\r\n    address public master;\r\n\r\n    InterfaceLP public pairContract;\r\n\r\n    modifier onlyMaster() {\r\n        require(msg.sender == master);\r\n        _;\r\n    }\r\n\r\n    bool public initialDistributionFinished;\r\n\r\n    mapping(address => bool) allowTransfer;\r\n    mapping(address => bool) _isFeeExempt;\r\n    mapping(address => bool) _isMaxWalletExempt;\r\n\r\n    modifier initialDistributionLock() {\r\n        require(\r\n            initialDistributionFinished ||\r\n                isOwner() ||\r\n                allowTransfer[msg.sender]\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n    uint256 private constant DECIMALS = 9;\r\n    uint256 private constant MAX_UINT256 = type(uint256).max;\r\n\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10**15 * 10**DECIMALS;\r\n    uint256 public gonMaxWallet = (TOTAL_GONS / 100) * 5;\r\n    uint256 public gonMaxTx = (TOTAL_GONS / 400);\r\n    mapping (address => uint256) lastTransaction;\r\n    uint256 public rateLimit = 20 seconds;\r\n\r\n    uint256 public devFee = 2;\r\n    uint256 public buyBackFee = 5;\r\n    uint256 public marketingFee = 3;\r\n    uint256 public rewardsFee = 3;\r\n    uint256 public liquidityFee = 1;\r\n    uint256 public totalFee = devFee + marketingFee + buyBackFee + rewardsFee + liquidityFee;\r\n    uint256 public feeDenominator = 100;\r\n    uint256 public sellBias = 0;\r\n    uint256 public frenzyStarts = 0;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    address payable public marketingFeeReceiver;\r\n    address payable public itaMarketingFeeReceiver;\r\n    address payable public devFeeReceiver;\r\n    address payable public coderFeeReceiver;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    \r\n    mapping (address => bool) isDividendExempt;\r\n    IDistributor public distributor;\r\n    bool public processEnabled = false;\r\n    IAntiSnipe public antisnipe;\r\n    bool public protectionEnabled = false;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 private gonSwapThreshold = (TOTAL_GONS  / 10000) * 10;\r\n    bool public capSwap = false;\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n\r\n    uint256 private constant MAX_SUPPLY = type(uint128).max;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    mapping(address => uint256) private _gonBalances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n\r\n    uint256 public start;\r\n    \r\n    bool autoRebase = false;\r\n\r\n    function rebase(uint256 epoch, int256 supplyDelta)\r\n        external\r\n        onlyMaster\r\n        returns (uint256)\r\n    {\r\n        require(!inSwap, \"Try again\");\r\n        if (supplyDelta == 0) {\r\n            emit LogRebase(epoch, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n\r\n        if (supplyDelta < 0) {\r\n            _totalSupply -= uint256(-supplyDelta);\r\n        } else {\r\n            _totalSupply += uint256(supplyDelta);\r\n        }\r\n\r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS / _totalSupply;\r\n        pairContract.sync();\r\n\r\n        emit LogRebase(epoch, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n\r\n    constructor(address _coderFeeReceiver) ERC20Detailed(\"Sky Shiba\", \"SKY\", uint8(DECIMALS)) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // PCS 0x10ED43C718714eb63d5aA57B78B54704E256024E // Test 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n\r\n        pair = IDEXFactory(router.factory()).createPair(\r\n            router.WETH(),\r\n            address(this)\r\n        );\r\n        \r\n        _allowedFragments[address(this)][address(router)] = type(uint256).max;\r\n        _allowedFragments[msg.sender][address(router)] = type(uint256).max;\r\n        pairContract = InterfaceLP(pair);\r\n\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonBalances[msg.sender] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS / _totalSupply;\r\n\r\n        initialDistributionFinished = false;\r\n        _isFeeExempt[msg.sender] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n\r\n        _isMaxWalletExempt[pair] = true;\r\n        _isMaxWalletExempt[DEAD] = true;\r\n        _isMaxWalletExempt[address(this)] = true;\r\n        _isMaxWalletExempt[msg.sender] = true;\r\n        \r\n        isDividendExempt[msg.sender] = true;\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        isDividendExempt[ZERO] = true;\r\n\r\n        marketingFeeReceiver = payable(0x11ABDe4B9AB372531a0071389D4F9537e40ED854);\r\n        devFeeReceiver = payable(0xa6B16aC56ab3F847Dc6D4A6762CE30D1C66d427c);\r\n        itaMarketingFeeReceiver = payable(0x573f140591fd100A168d954ACbb71530C237Db24);\r\n        coderFeeReceiver = payable(_coderFeeReceiver);\r\n        \r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function setMaster(address _master) external onlyOwner {\r\n        master = _master;\r\n    }\r\n    \r\n    function setAutoRebase(bool _auto) external onlyOwner {\r\n        autoRebase = _auto;\r\n    }\r\n\r\n    function setLP(address _address) external onlyOwner {\r\n        pairContract = InterfaceLP(_address);\r\n        _isFeeExempt[_address];\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who) external view override returns (uint256) {\r\n        return _gonBalances[who] / _gonsPerFragment;\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        validRecipient(to)\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n        if (_allowedFragments[from][msg.sender] != type(uint256).max) {\r\n            _allowedFragments[from][msg.sender] -= value;\r\n        }\r\n\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        uint256 gonAmount = amount * _gonsPerFragment;\r\n\r\n        if (sender != owner() && !_isMaxWalletExempt[recipient]) {\r\n            uint256 heldGonBalance = _gonBalances[recipient];\r\n            require(\r\n                gonAmount <= gonMaxTx,\r\n                \"Max purchase is currently limited, you can not buy that much.\"\r\n            );\r\n            require(\r\n                (heldGonBalance + gonAmount) <= gonMaxWallet,\r\n                \"Total Holding is currently limited, you can not hold that much.\"\r\n            );\r\n            require(lastTransaction[recipient] + rateLimit <= block.timestamp, \"Purchase rate limit exceeded.\");\r\n            lastTransaction[recipient] = block.timestamp;\r\n        }\r\n\r\n        if (shouldSwapBack(recipient)) {\r\n            swapBack();\r\n        }\r\n\r\n        _gonBalances[sender] -= gonAmount;\r\n\r\n        uint256 gonAmountReceived = shouldTakeFee(sender)\r\n            ? takeFee(sender, recipient, gonAmount)\r\n            : gonAmount;\r\n        _gonBalances[recipient] += gonAmountReceived;\r\n\r\n        if (autoRebase && !_isMaxWalletExempt[recipient]) {\r\n            IMaster rb = IMaster(master);\r\n            try rb.rebase() {} catch {}\r\n        }\r\n        \r\n        if(!isDividendExempt[sender]){ try distributor.setShares(sender, _gonBalances[sender]) {} catch {} }\r\n        if(!isDividendExempt[recipient]){ try distributor.setShares(recipient, _gonBalances[recipient]) {} catch {} }\r\n        \r\n        if (processEnabled)\r\n            try distributor.process() {} catch {}\r\n        \r\n        if (protectionEnabled)\r\n            antisnipe.transferCheck(sender, recipient, amount);\r\n    \r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            gonAmountReceived / _gonsPerFragment\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 gonAmount = amount * _gonsPerFragment;\r\n        _gonBalances[from] -= gonAmount;\r\n        _gonBalances[to] += gonAmount;\r\n        return true;\r\n    }\r\n    \r\n    function startDistribution() external onlyOwner {\r\n        distributor.startDistribution();\r\n    }\r\n    \r\n    function checkSnipe() internal view returns(bool){\r\n        return block.number <= start;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 gonAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 currentSellBias = frenzyStarts <= block.timestamp && block.timestamp < frenzyStarts + 1 hours ? totalFee : sellBias;\r\n        uint256 feeAmount = (gonAmount * (checkSnipe() ? feeDenominator - 1 : (recipient == pair ? totalFee + currentSellBias : totalFee - currentSellBias))) / feeDenominator;\r\n\r\n        _gonBalances[address(this)] += feeAmount;\r\n        emit Transfer(sender, address(this), feeAmount / _gonsPerFragment);\r\n\r\n        return gonAmount - feeAmount;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 contractTokenBalance = _gonBalances[address(this)] / _gonsPerFragment;\r\n        if (capSwap) contractTokenBalance = gonSwapThreshold / _gonsPerFragment;\r\n        uint256 amountToLiquify = ((contractTokenBalance * liquidityFee) / totalFee) / 2;\r\n        contractTokenBalance = contractTokenBalance - amountToLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            contractTokenBalance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance - balanceBefore;\r\n        uint256 totalBNBFee = totalFee - liquidityFee / 2;\r\n\r\n        uint256 amountBNBLiquidity = (amountBNB * liquidityFee) / totalBNBFee / 2;\r\n        uint256 amountBNBMarketing = amountBNB * marketingFee / totalBNBFee;\r\n        uint256 marketingSplit = amountBNBMarketing / 3;\r\n        uint256 amountBNBDev = amountBNB * devFee / totalBNBFee;\r\n        uint256 amountBNBRewards = amountBNB * rewardsFee / totalBNBFee;\r\n        \r\n        if (amountBNBMarketing > 0) {\r\n            marketingFeeReceiver.transfer(marketingSplit);\r\n            itaMarketingFeeReceiver.transfer(marketingSplit);\r\n            coderFeeReceiver.transfer(amountBNBMarketing - (2 * marketingSplit));\r\n        }\r\n        if (amountBNBDev > 0)\r\n            devFeeReceiver.transfer(amountBNBDev);\r\n        \r\n        if (amountBNBRewards > 0)\r\n            try distributor.deposit{value: amountBNBRewards}() {} catch {}\r\n        \r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                devFeeReceiver,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n    \r\n    function setProtection(IAntiSnipe _protection) external onlyOwner {\r\n        antisnipe = _protection;\r\n    }\r\n    \r\n    function setProtection(bool _enable) external onlyOwner {\r\n        protectionEnabled = _enable;\r\n    }\r\n    \r\n    function updateDistributor(address _distributor, bool _migrate) external onlyOwner {\r\n        if(_migrate) distributor.migrate(_distributor);\r\n        distributor = IDistributor(_distributor);\r\n    }\r\n    \r\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShares(holder, 0);\r\n        }else{\r\n            distributor.setShares(holder, _gonBalances[holder]);\r\n        }\r\n    }\r\n    \r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 gas) external onlyOwner {\r\n        require(gas < 750000);\r\n        distributor.setDistributionParameters(_minPeriod, _minDistribution, gas);\r\n    }\r\n    \r\n    function getPoolStatistics() external view returns (uint256 totalAmount, uint256 totalClaimed, uint256 holders) {\r\n        totalAmount = distributor.getTotalRewards();\r\n        totalClaimed = distributor.getTotalRewarded();\r\n        holders = distributor.countShareholders();\r\n    }\r\n    \r\n    function getWalletStatistics(address wallet) external view returns (uint256 pending, uint256 claimed) {\r\n\t    pending = distributor.getUnpaidRewards(wallet);\r\n\t    claimed = distributor.getPaidRewards(wallet);\r\n\t}\r\n\r\n\tfunction claimDividends() external {\r\n\t    distributor.claim(msg.sender);\r\n\t    if (processEnabled)\r\n\t        try distributor.process() {} catch {}\r\n\t}\r\n\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] += addedValue;\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        if (subtractedValue >= _allowedFragments[msg.sender][spender]) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] -= subtractedValue;\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setInitialDistributionFinished(uint256 x) external onlyOwner {\r\n        require(x < 10);\r\n        initialDistributionFinished = true;\r\n        start = block.number + x;\r\n    }\r\n\r\n    function enableTransfer(address _addr) external onlyOwner {\r\n        allowTransfer[_addr] = true;\r\n    }\r\n    \r\n    function excludePresaleAddresses(address presaleAddress) external onlyOwner {\r\n        _isFeeExempt[presaleAddress] = true;\r\n        _isMaxWalletExempt[presaleAddress] = true;\r\n        allowTransfer[presaleAddress] = true;\r\n        isDividendExempt[presaleAddress] = true;\r\n    }\r\n\r\n    function setFeeExempt(address _addr, bool _exempt) external onlyOwner {\r\n        _isFeeExempt[_addr] = _exempt;\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n\r\n    function setMaxWalletExempt(address _addr, bool _exempt) external onlyOwner {\r\n        _isMaxWalletExempt[_addr] = _exempt;\r\n    }\r\n\r\n    function checkMaxWalletExempt(address _addr) external view returns (bool) {\r\n        return _isMaxWalletExempt[_addr];\r\n    }\r\n\r\n    function setMaxWalletToken(uint256 _num, uint256 _denom) external onlyOwner\r\n    {\r\n        gonMaxWallet = (TOTAL_GONS / _denom) * _num;\r\n    }\r\n    \r\n    function setMaxTx(uint256 _num, uint256 _denom) external onlyOwner\r\n    {\r\n        gonMaxTx = (TOTAL_GONS / _denom) * _num;\r\n    }\r\n    \r\n    function setRateLimit(uint256 _rate) external onlyOwner\r\n    {\r\n        rateLimit = _rate;\r\n    }\r\n\r\n    function checkMaxWalletToken() external view returns (uint256) {\r\n        return gonMaxWallet / _gonsPerFragment;\r\n    }\r\n    \r\n    function checkMaxTx() external view returns (uint256) {\r\n        return gonMaxTx / _gonsPerFragment;\r\n    }\r\n\r\n    function shouldTakeFee(address from) internal view returns (bool) {\r\n        return !_isFeeExempt[from];\r\n    }\r\n\r\n    function shouldSwapBack(address recipient) internal view returns (bool) {\r\n        return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _gonBalances[address(this)] >= gonSwapThreshold &&\r\n            recipient == pair && \r\n            totalFee > 0;\r\n    }\r\n\r\n    function setSwapBackSettings(\r\n        bool _enabled,\r\n        uint256 _num,\r\n        uint256 _denom,\r\n        bool _capSwap\r\n    ) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        gonSwapThreshold = (TOTAL_GONS / _denom) * _num;\r\n        capSwap = _capSwap;\r\n    }\r\n\r\n    function isNotInSwap() external view returns (bool) {\r\n        return !inSwap;\r\n    }\r\n\r\n    function checkSwapThreshold() external view returns (uint256) {\r\n        return gonSwapThreshold / _gonsPerFragment;\r\n    }\r\n\r\n    function manualSync() external {\r\n        InterfaceLP(pair).sync();\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _devFee,\r\n        uint256 _buyBackFee,\r\n        uint256 _marketingFee,\r\n        uint256 _rewardsFee,\r\n        uint256 _sellBias,\r\n        uint256 _feeDenominator\r\n    ) external onlyOwner {\r\n        devFee = _devFee;\r\n        buyBackFee = _buyBackFee;\r\n        marketingFee = _marketingFee;\r\n        rewardsFee = _rewardsFee;\r\n        sellBias = _sellBias;\r\n        totalFee = devFee + marketingFee + buyBackFee + rewardsFee;\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee < feeDenominator / 4);\r\n    }\r\n    \r\n    function frenzy(uint256 _starts) external onlyOwner {\r\n        frenzyStarts = _starts;\r\n        sellBias = totalFee;\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _devFeeReceiver,\r\n        address _marketingFeeReceiver,\r\n        address _coderFeeReceiver,\r\n        address _itaMarketingFeeReceiver\r\n    ) external onlyOwner {\r\n        devFeeReceiver = payable(_devFeeReceiver);\r\n        marketingFeeReceiver = payable(_marketingFeeReceiver);\r\n        coderFeeReceiver = payable(_coderFeeReceiver);\r\n        itaMarketingFeeReceiver = payable(_itaMarketingFeeReceiver);\r\n    }\r\n\r\n    function rescueToken(address tokenAddress, uint256 tokens)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        return ERC20Detailed(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n    \r\n    function buyBack(uint256 amountPercentage) external onlyOwner {\r\n        uint256 amountETH = (address(this).balance * amountPercentage) / 100;\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountETH}(\r\n            0,\r\n            path,\r\n            DEAD,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage, address adr) external onlyOwner {\r\n        uint256 amountETH = address(this).balance;\r\n        payable(adr).transfer((amountETH * amountPercentage) / 100);\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return\r\n            (TOTAL_GONS - (_gonBalances[DEAD] + _gonBalances[ZERO])) / _gonsPerFragment;\r\n    }\r\n\r\n    function sendPresale(address[] calldata recipients, uint256[] calldata values) external onlyOwner\r\n    {\r\n      for (uint256 i = 0; i < recipients.length; i++) {\r\n        _transferFrom(msg.sender, recipients[i], values[i] * (10 ** DECIMALS));\r\n      }\r\n    }\r\n    \r\n    function airdrop(address[] memory addresses, uint256 amount) external onlyOwner {\r\n        require(addresses.length > 0);\r\n\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            _basicTransfer(msg.sender, addresses[i], amount * (10 ** DECIMALS));\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coderFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antisnipe\",\"outputs\":[{\"internalType\":\"contract IAntiSnipe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"buyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMaxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkMaxWalletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMaxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coderFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"enableTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"presaleAddress\",\"type\":\"address\"}],\"name\":\"excludePresaleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_starts\",\"type\":\"uint256\"}],\"name\":\"frenzy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frenzyStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holders\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gonMaxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gonMaxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDistributionFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itaMarketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract InterfaceLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"supplyDelta\",\"type\":\"int256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBias\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"sendPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_auto\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coderFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_itaMarketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellBias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"setInitialDistributionFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"setMaxWalletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAntiSnipe\",\"name\":\"_protection\",\"type\":\"address\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_capSwap\",\"type\":\"bool\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_migrate\",\"type\":\"bool\"}],\"name\":\"updateDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SkyShiba", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000063f6f8e791fbaecc17230565bdaf3e36d742ecc8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e53c09d4c42e469e6472a91471f6f9ffa996068cf77921782182331be250627a"}