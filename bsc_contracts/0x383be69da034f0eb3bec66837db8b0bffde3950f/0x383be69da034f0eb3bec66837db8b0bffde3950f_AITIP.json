{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n pragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"not owner\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    address public marketAddress = address(0xCD9354CE6EBBF5b822005873dE9Fe4331AbC4e27);\r\n    address public consensusAddress = address(0xDda772a1B3941904E309673eDFdB048B0eB00153);\r\n    address public nodeAddress = address(0x733699803AD491BBFc2149a2C4C6Eff9d5f773c0);\r\n    address public techAddress = address(0x4aDCb86d733aB500Efb15a6d6de0B7678F4D8943);\r\n    address public inviterAddress = address(0x4A1ae936309DEb2258aD72B3374E6a2A5c58e92B);\r\n    \r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 public constant MAX = ~uint256(0);\r\n\r\n    uint256 public _lpDividendFee = 0;\r\n    uint256 public _sellFeeRate = 1000;\r\n    uint256 public _buyFeeRate = 1000;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startTradeTime;\r\n    uint256 public startAddLPBlock;\r\n\r\n    address public uniswapV2PairBNB;\r\n    address public uniswapV2PairUSDT;    \r\n\r\n    uint256 public TOTAL_GONS;\r\n    uint256 public _lastRebasedTime=0;\r\n    uint256 public _gonsPerFragment;\r\n    uint256 public usdtPairBalance;\r\n    uint256 public bnbPairBalance;\r\n    uint256 public thisTokenBalance=0;\r\n\r\n    uint256 public _usdtBalance = 0;\r\n\r\n    address public _mainPair;\r\n\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    uint256 public _limitAmount;\r\n\r\n    uint256 public constant MAX_UINT256 = type(uint256).max;\r\n    uint256 public constant MAX_SUPPLY = 1000000000000000 * 1e18;\r\n    uint256 private startTime = 1661252400; \r\n    uint256 private _totalSupply;\r\n    uint256 public rebaseRate = 10366;\r\n\r\n    mapping(uint256 => uint256) public dayPrice;\r\n    uint256 public checkCanBuyDelay = 10;\r\n    uint256 public maxPriceRate = 110;\r\n    uint256 public maxPriceSellRate = 99;\r\n\r\n\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    mapping (address => bool) public _roler;\r\n    mapping (address => address) public inviter;\r\n    mapping (address => address) public preInviter;\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address FundAddress, address ReceiveAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        IERC20(USDTAddress).approve(RouterAddress, MAX);\r\n        _allowances[address(this)][RouterAddress] = MAX;\r\n\r\n        _usdt = USDTAddress;\r\n        _swapRouter = swapRouter;\r\n        \r\n        \r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), USDTAddress);\r\n        uniswapV2PairUSDT = swapPair;\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n\r\n         _tTotal = total;\r\n         _totalSupply = _tTotal;\r\n\r\n\r\n        TOTAL_GONS = MAX_UINT256 / 1e10 - (MAX_UINT256 / 1e10 % _tTotal);\r\n        _balances[ReceiveAddress] = TOTAL_GONS;\r\n\r\n        _gonsPerFragment = TOTAL_GONS / _tTotal;   \r\n\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n\r\n        holderRewardCondition = 1 * 10 ** Decimals;\r\n\r\n        _feeWhiteList[address(_tokenDistributor)] = true;\r\n\r\n\r\n\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n\r\n        if (account == uniswapV2PairUSDT){\r\n            return usdtPairBalance;\r\n        }else if (account == uniswapV2PairBNB){\r\n            return bnbPairBalance;\r\n        }else if (account == address(this)){\r\n            return thisTokenBalance;\r\n        }else {\r\n            return _balances[account] / _gonsPerFragment;\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n\r\n        uint256 fromBalance;\r\n        if (from == uniswapV2PairUSDT) {\r\n            fromBalance = usdtPairBalance;\r\n        } else if (from == uniswapV2PairBNB) {\r\n            fromBalance = bnbPairBalance;\r\n        } else if (from == address(this)){\r\n            fromBalance = thisTokenBalance;\r\n        }else {\r\n            fromBalance = _balances[from] / _gonsPerFragment;\r\n        }\r\n\r\n        _rebase(from);\r\n\r\n\r\n        uint256 balance = fromBalance;\r\n        require(balance >= amount, \"balance Not Enough\");\r\n\r\n         uint256 day = today();\r\n         if (0 == dayPrice[day]) {\r\n            dayPrice[day] = tokenPrice();\r\n         }\r\n\r\n\r\n        if (_swapPairList[from]) {\r\n            _checkCanBuy(to);\r\n        }\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount = balance * 99999 / 100000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        bool takeFee;\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            takeFee = true;\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            \r\n            if (0 == startAddLPBlock) {\r\n                if (_feeWhiteList[from] && to == _mainPair && IERC20(to).totalSupply() == 0) {\r\n                    startAddLPBlock = block.number;\r\n                }\r\n            }\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                takeFee = true;\r\n\r\n                bool isAdd;\r\n                if (_swapPairList[to]) {\r\n                    isAdd = _isAddLiquidity();\r\n                    if (isAdd) {\r\n                        takeFee = false;\r\n                    }\r\n                }\r\n\r\n                if(0 == startTradeBlock)\r\n                {\r\n                    require(isAdd,\"Add Liquidity Only\");\r\n                }\r\n\r\n\r\n                if (block.number < startTradeBlock + 4) {\r\n                    _funTransfer(from, to, amount);\r\n                    return;\r\n                }\r\n            }\r\n        }        \r\n\r\n        \r\n\r\n        bool shouldInvite = (inviter[to] == address(0) \r\n            && !isContract(from) && !isContract(to));\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if (shouldInvite) {\r\n            preInviter[to] = from;\r\n        }\r\n\r\n        if(inviter[from]==address(0) && preInviter[from]==to)\r\n        {\r\n            inviter[from] = to;\r\n        }\r\n\r\n        if (from != address(this)) {\r\n            if (_swapPairList[to]) {\r\n                addHolder(from);\r\n            }\r\n            processReward(500000);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function _rebase(address from) internal {\r\n\r\n\r\n        if(_totalSupply<=getContractNum(1000000000000))\r\n        {\r\n            rebaseRate = 10366;\r\n        }else if(_totalSupply<=getContractNum(10000000000000))\r\n        {\r\n            rebaseRate = 8293;\r\n        }else if(_totalSupply<=getContractNum(100000000000000))\r\n        {\r\n            rebaseRate = 6219;\r\n        }else if(_totalSupply<=getContractNum(1000000000000000))\r\n        {\r\n            rebaseRate = 4146;\r\n        }\r\n        \r\n        \r\n        if (\r\n            _totalSupply < MAX_SUPPLY &&\r\n            from != uniswapV2PairUSDT  &&\r\n            from != uniswapV2PairBNB  &&\r\n            _lastRebasedTime > 0 &&\r\n            block.timestamp >= (_lastRebasedTime + 15 minutes) &&\r\n            block.timestamp < (startTime + 3650 days)\r\n        ) {\r\n            uint256 deltaTime = block.timestamp - _lastRebasedTime;\r\n            uint256 times = deltaTime / (15 minutes);\r\n            uint256 epoch = times * 15;\r\n\r\n            for (uint256 i = 0; i < times; i++) {\r\n                _totalSupply = _totalSupply\r\n                * (10 ** 8 + rebaseRate)\r\n                / (10 ** 8);\r\n            }\r\n\r\n            _gonsPerFragment = TOTAL_GONS / _totalSupply;\r\n            _lastRebasedTime = _lastRebasedTime + times * 15 minutes;\r\n\r\n            emit LogRebase(epoch, _totalSupply);\r\n        }\r\n    }\r\n    \r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        address token0 = mainPair.token0();\r\n        if (token0 == address(this)) {\r\n            return false;\r\n        }\r\n        (uint r0,,) = mainPair.getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(address(mainPair));\r\n        isAdd = bal0 > r0;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        address token0 = mainPair.token0();\r\n        if (token0 == address(this)) {\r\n            return false;\r\n        }\r\n        (uint r0,,) = mainPair.getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(address(mainPair));\r\n        isRemove = r0 > bal0;\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n\r\n        uint256 gonAmount = tAmount * _gonsPerFragment;\r\n\r\n        if (sender == uniswapV2PairUSDT){\r\n            usdtPairBalance = usdtPairBalance - tAmount;\r\n        } else if (sender == uniswapV2PairBNB){\r\n            bnbPairBalance = bnbPairBalance - tAmount;\r\n        } else if (sender == address(this)){\r\n            thisTokenBalance = thisTokenBalance - tAmount;\r\n        }else {\r\n            _balances[sender] = _balances[sender] - gonAmount;\r\n        }\r\n\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(sender, fundAddress, feeAmount);\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n\r\n        uint256 gonAmount = tAmount * _gonsPerFragment;\r\n        if (sender == uniswapV2PairUSDT){\r\n            usdtPairBalance = usdtPairBalance - tAmount;\r\n        } else if (sender == uniswapV2PairBNB){\r\n            bnbPairBalance = bnbPairBalance - tAmount;\r\n        } else if (sender == address(this)){\r\n            thisTokenBalance = thisTokenBalance-tAmount;\r\n        }else {\r\n            _balances[sender] = _balances[sender] - gonAmount;\r\n        }\r\n\r\n        \r\n\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n\r\n            if(sender==uniswapV2PairUSDT)\r\n            {\r\n\r\n                require(tAmount <= 205000000 * 10 ** _decimals, \"Max:200000000\");\r\n\r\n                uint256 buyFee = tAmount * 3 /100;\r\n                if (buyFee > 0) {\r\n                    feeAmount += buyFee;\r\n                    _takeTransfer(sender, address(this), buyFee);\r\n                }\r\n\r\n                uint256 deadAmount = tAmount * 2 /100;\r\n                if (deadAmount > 0) {\r\n                    feeAmount += deadAmount;\r\n                    _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), deadAmount);\r\n                }\r\n\r\n                _takeInviterFee(sender, recipient, tAmount);\r\n\r\n                uint256 inviterFee = tAmount * 5 /100;\r\n                feeAmount += inviterFee;                \r\n\r\n\r\n            }else if(recipient==uniswapV2PairUSDT)\r\n            {\r\n                uint256 sellFee = tAmount * _sellFeeRate / 10000;\r\n                if (sellFee > 0) {\r\n                    feeAmount += sellFee;\r\n                    _takeTransfer(sender, address(this), sellFee);\r\n                }\r\n\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n                uint256 numTokensSellToFund = sellFee * 10;\r\n                if (numTokensSellToFund > contractTokenBalance) {\r\n                    numTokensSellToFund = contractTokenBalance;\r\n                }\r\n              \r\n                if(numTokensSellToFund > 0 )\r\n                {                   \r\n\r\n                    swapTokenForFund(numTokensSellToFund);\r\n\r\n                    address usdt = _usdt;\r\n                    IERC20 USDT = IERC20(usdt);\r\n                    uint256 usdtNum;\r\n                    uint256 usdtBalance = USDT.balanceOf(address(this));\r\n\r\n                    usdtNum = usdtBalance * 2 / 13;\r\n                    USDT.transfer(_mainPair, usdtNum);\r\n\r\n                    usdtNum = usdtBalance * 3 / 13;\r\n                    USDT.transfer(marketAddress, usdtNum);\r\n\r\n                    usdtNum = usdtBalance * 4 / 13;\r\n                    USDT.transfer(consensusAddress, usdtNum);\r\n\r\n                    usdtNum = usdtBalance * 2 / 13;\r\n                    USDT.transfer(nodeAddress, usdtNum);\r\n\r\n                    usdtNum = usdtBalance * 2 / 13;\r\n                    USDT.transfer(techAddress, usdtNum);\r\n                }\r\n\r\n            }                 \r\n            \r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        address usdt = _usdt;\r\n        address tokenDistributor = address(_tokenDistributor);\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            tokenDistributor,\r\n            block.timestamp\r\n        );\r\n\r\n        usdtBalance = USDT.balanceOf(tokenDistributor) - usdtBalance;\r\n        USDT.transferFrom(tokenDistributor, address(this), usdtBalance);\r\n    }\r\n\r\n    function _takeTransfer(address sender, address to, uint256 tAmount) private {\r\n\r\n        uint256 gonAmount = tAmount * _gonsPerFragment;\r\n\r\n        if (to == uniswapV2PairUSDT){\r\n            usdtPairBalance = usdtPairBalance + tAmount;\r\n        } else if (to == uniswapV2PairBNB){\r\n            bnbPairBalance = bnbPairBalance + tAmount;\r\n        } else if (to == address(this)){\r\n            thisTokenBalance = thisTokenBalance + tAmount;\r\n        }else {\r\n            _balances[to] = _balances[to] + gonAmount;\r\n        }\r\n\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setTradeFee(uint256 sellFeeRate,uint256 buyFeeRate)external onlyOwner {\r\n        _buyFeeRate = buyFeeRate;\r\n        _sellFeeRate = sellFeeRate;\r\n\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n        startTradeTime = block.timestamp;\r\n        _lastRebasedTime = startTradeTime;\r\n        startTime = startTradeTime;\r\n    }\r\n\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimContractToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            _tokenDistributor.claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n\r\n    function getHolderLength() public view returns (uint256){\r\n        return holders.length;\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public holderRewardCondition;\r\n    uint256 public progressRewardBlock;\r\n    uint256 public _progressBlockDebt = 200;\r\n\r\n    function processReward(uint256 gas) private {\r\n        if (0 == startTradeBlock) {\r\n            return;\r\n        }\r\n        if (progressRewardBlock + _progressBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        address sender = address(_tokenDistributor);\r\n        uint256 balance = balanceOf(sender);\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = balance * tokenBalance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    _tokenTransfer(sender, shareHolder, amount, false);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setProgressBlockDebt(uint256 progressBlockDebt) external onlyOwner {\r\n        _progressBlockDebt = progressBlockDebt;\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender, address recipient, uint256 tAmount\r\n    ) private {\r\n\r\n        address cur = sender;\r\n        address rAddress = sender;\r\n        if (isContract(sender)) {\r\n            cur = recipient;\r\n        } \r\n        uint8[2] memory inviteRate = [30, 20];\r\n        for (uint8 i = 0; i < inviteRate.length; i++) {\r\n            uint8 rate = inviteRate[i];\r\n            cur = inviter[cur];\r\n            rAddress = cur;\r\n            if (cur == address(0))\r\n            {\r\n                cur = fundAddress;\r\n                rAddress = inviterAddress;\r\n            }else{                \r\n                if(balanceOf(cur) < 100000000 * 10 ** _decimals)\r\n                {\r\n                    rAddress = inviterAddress;\r\n                }\r\n            }\r\n             \r\n            uint256 curTAmount = tAmount * rate / 1000;\r\n            \r\n            _takeTransfer(sender, rAddress, curTAmount);\r\n        }\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n\r\n\r\n    function setSwapRoler(address addr, bool state) public onlyOwner {\r\n        _roler[addr] = state;\r\n    }\r\n\r\n    function getContractNum(uint256 num) internal view returns (uint256)\r\n    {\r\n        return num * 10 **_decimals;\r\n    }\r\n\r\n    function today() public view returns (uint256){\r\n        return block.timestamp / 86400;\r\n    }\r\n\r\n    function tokenPrice() public view returns (uint256){\r\n        ISwapPair swapPair = ISwapPair(_mainPair);\r\n        (uint256 reverse0,uint256 reverse1,) = swapPair.getReserves();\r\n        address token0 = swapPair.token0();\r\n        uint256 usdtReverse;\r\n        uint256 tokenReverse;\r\n        if (_usdt == token0) {\r\n            usdtReverse = reverse0;\r\n            tokenReverse = reverse1;\r\n        } else {\r\n            usdtReverse = reverse1;\r\n            tokenReverse = reverse0;\r\n        }\r\n        if (0 == tokenReverse) {\r\n            return 0;\r\n        }\r\n        return 10 ** _decimals * usdtReverse / tokenReverse;\r\n    }\r\n\r\n    function _checkCanBuy(address to) private view {\r\n        if (0 == startTradeBlock || block.number <= startTradeBlock + checkCanBuyDelay) {\r\n            return;\r\n        }\r\n        if (_feeWhiteList[to]) {\r\n            return;\r\n        }\r\n        uint256 todayPrice = dayPrice[today()];\r\n        if (0 == todayPrice) {\r\n            return;\r\n        }\r\n        uint256 price = tokenPrice();\r\n        uint256 priceRate = price * 100 / todayPrice;\r\n        require(priceRate <= maxPriceRate, \"maxPriceRate\");\r\n    }\r\n\r\n}\r\n\r\ncontract AITIP is AbsToken {\r\n    constructor() AbsToken( \r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"AITIP\",\r\n        \"AITIP\",\r\n        18,\r\n        200000000000,\r\n        address(0xea99F41e27F0a3F478A89F218C06D6B6D4325dD3),\r\n        address(0xea99F41e27F0a3F478A89F218C06D6B6D4325dD3)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_GONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_gonsPerFragment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_progressBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_roler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbPairBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCanBuyDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consensusAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceSellRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"progressBlockDebt\",\"type\":\"uint256\"}],\"name\":\"setProgressBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setSwapRoler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeRate\",\"type\":\"uint256\"}],\"name\":\"setTradeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2PairBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2PairUSDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtPairBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AITIP", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c1ac0b13851c60ae3209d48c91a759733e4c42118ea144555077363660558bd6"}