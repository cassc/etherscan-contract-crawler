{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMetaCourtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMetaCourtToken is IERC20{\\n    \\n\\tfunction MAX_SUPPLY() external returns (uint256);\\n\\tfunction mint(address to, uint256 amount) external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMetaStorageRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\ninterface IMetaStorageRegistry {\\n\\n    function admin() external view returns (address);\\n\\n    function metaCourtToken() external view returns (address);\\n\\n    function oldToken() external view returns (address);\\n\\n\\n\\tfunction vesting() external view returns (address);\\n\\n\\tfunction presale() external view returns (address);\\n\\n\\n    function seed() external view returns (address);\\n\\n    function publicSale() external view returns (address);\\n\\n    function isAdmin(address _caller) external view returns (bool);\\n\\n\\tfunction isSystemContract(address _contract) external view returns(bool);\\n\\n\\n \\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMetaVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\ninterface IMetaVesting  {\\n\\n    function release() external returns(uint);\\n\\tfunction getAccVesting(address) external returns( uint256 start,\\n        uint256 tgePerc,\\n        uint256 cliff,\\n        uint256 totalAmount,\\n        uint256 released,\\n        uint256 vestingPrc,\\n        uint256 duration,\\n        uint256 period);\\n}\"\r\n    },\r\n    \"contracts/SeedContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport \\\"./interfaces/IMetaStorageRegistry.sol\\\";\\nimport \\\"./interfaces/IMetaCourtToken.sol\\\";\\nimport \\\"./interfaces/IMetaVesting.sol\\\";\\n\\n/**\\n * @title SeedContract\\n * @dev This contract manages the seed sale of the MetaCourt tokens.\\n */\\ncontract SeedContract  {\\n\\n    // The registry contract used for administrative functions.\\n    IMetaStorageRegistry  public registry;\\n\\n\\tuint256 public totalMintedAmount;\\n\\n    /**\\n     * @dev Modifier to restrict access to admin-only functions.\\n     */\\n    modifier onlyAdmin() {\\n        require(registry.isAdmin(msg.sender), \\\"SeedContract :: Unauthorized\\\");\\n        _;\\n    } \\n\\n    /// @dev Emitted when funds are transferred.\\n    /// @param receiver The address of the receiver of the funds.\\n    /// @param amount The amount of funds transferred.\\n    event FundsTransferred(address receiver, uint256 amount);\\n\\n\\n    /**\\n     * @notice Initializes the contract with the MetaStorageRegistry.\\n     * @param metaStorageRegistry_ The address of the MetaStorageRegistry contract.\\n     */\\n    constructor(address metaStorageRegistry_){\\n        require(metaStorageRegistry_!= address(0),\\\"SeedContract :: Address(0)\\\");\\n        registry = IMetaStorageRegistry(metaStorageRegistry_);\\n    }\\n\\n    /**\\n     * @notice Transfers funds from the contract to a specified receiver.\\n     * @param receiver The address to receive the funds.\\n     * @param amt The amount of funds to transfer.\\n     */\\n    function transferFunds(address receiver,uint256 amt) external onlyAdmin {\\n        require(receiver!=address(0),\\\"SeedContract :: Address(0)\\\");\\n\\t\\t(,,,uint256 maxAmount,,,,) = IMetaVesting(registry.vesting()).getAccVesting(address(this));\\n\\t\\trequire(totalMintedAmount+amt<=maxAmount,\\\"SeedContract :: MAX\\\");\\n        IMetaCourtToken _metaToken = IMetaCourtToken(registry.metaCourtToken());\\n        _metaToken.mint(receiver, amt);\\n        emit FundsTransferred(receiver, amt);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true,\r\n          \"optimizerSteps\": \"dhfoDgvulfnTUtnIf\"\r\n        }\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metaStorageRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IMetaStorageRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SeedContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000b52625162fcdb82a0897d40f21f59883b4e1fdf8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}