{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RoyaltyFeeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// LooksRare unopinionated libraries\\nimport {OwnableTwoSteps} from \\\"@looksrare/contracts-libs/contracts/OwnableTwoSteps.sol\\\";\\n\\n// Royalty Fee Registry interface\\nimport {IRoyaltyFeeRegistry} from \\\"./interfaces/IRoyaltyFeeRegistry.sol\\\";\\n\\n// Constants\\nimport {ONE_HUNDRED_PERCENT_IN_BP} from \\\"./constants/NumericConstants.sol\\\";\\n\\ncontract RoyaltyFeeRegistry is IRoyaltyFeeRegistry, OwnableTwoSteps {\\n    struct FeeInfo {\\n        address setter;\\n        address receiver;\\n        uint256 fee;\\n    }\\n\\n    // Limit (if enforced for fee royalty in basis point (10,000 = 100%)\\n    uint256 public royaltyFeeLimit;\\n\\n    mapping(address => FeeInfo) private _royaltyFeeInfoCollection;\\n\\n    event NewRoyaltyFeeLimit(uint256 royaltyFeeLimit);\\n    event RoyaltyFeeUpdate(address indexed collection, address indexed setter, address indexed receiver, uint256 fee);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _owner Owner address\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    constructor(address _owner, uint256 _royaltyFeeLimit) OwnableTwoSteps(_owner) {\\n        require(_royaltyFeeLimit <= 9_500, \\\"Owner: Royalty fee limit too high\\\");\\n        royaltyFeeLimit = _royaltyFeeLimit;\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external onlyOwner {\\n        require(_royaltyFeeLimit <= 9_500, \\\"Owner: Royalty fee limit too high\\\");\\n        royaltyFeeLimit = _royaltyFeeLimit;\\n\\n        emit NewRoyaltyFeeLimit(_royaltyFeeLimit);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external onlyOwner {\\n        require(fee <= royaltyFeeLimit, \\\"Registry: Royalty fee too high\\\");\\n        _royaltyFeeInfoCollection[collection] = FeeInfo({setter: setter, receiver: receiver, fee: fee});\\n\\n        emit RoyaltyFeeUpdate(collection, setter, receiver, fee);\\n    }\\n\\n    /**\\n     * @notice Calculate royalty info for a collection address and a sale gross amount\\n     * @param collection collection address\\n     * @param amount amount\\n     * @return receiver address and amount received by royalty recipient\\n     */\\n    function royaltyInfo(address collection, uint256 amount) external view returns (address, uint256) {\\n        return (\\n            _royaltyFeeInfoCollection[collection].receiver,\\n            (amount * _royaltyFeeInfoCollection[collection].fee) / ONE_HUNDRED_PERCENT_IN_BP\\n        );\\n    }\\n\\n    /**\\n     * @notice View royalty info for a collection address\\n     * @param collection collection address\\n     */\\n    function royaltyFeeInfoCollection(address collection) external view returns (address, address, uint256) {\\n        return (\\n            _royaltyFeeInfoCollection[collection].setter,\\n            _royaltyFeeInfoCollection[collection].receiver,\\n            _royaltyFeeInfoCollection[collection].fee\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/OwnableTwoSteps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Interfaces\\nimport {IOwnableTwoSteps} from \\\"./interfaces/IOwnableTwoSteps.sol\\\";\\n\\n/**\\n * @title OwnableTwoSteps\\n * @notice This contract offers transfer of ownership in two steps with potential owner\\n *         having to confirm the transaction to become the owner.\\n *         Renouncement of the ownership is also a two-step process since the next potential owner is the address(0).\\n * @author LooksRare protocol team (\ud83d\udc40,\ud83d\udc8e)\\n */\\nabstract contract OwnableTwoSteps is IOwnableTwoSteps {\\n    /**\\n     * @notice Address of the current owner.\\n     */\\n    address public owner;\\n\\n    /**\\n     * @notice Address of the potential owner.\\n     */\\n    address public potentialOwner;\\n\\n    /**\\n     * @notice Ownership status.\\n     */\\n    Status public ownershipStatus;\\n\\n    /**\\n     * @notice Modifier to wrap functions for contracts that inherit this contract.\\n     */\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _owner The contract's owner\\n     */\\n    constructor(address _owner) {\\n        owner = _owner;\\n        emit NewOwner(_owner);\\n    }\\n\\n    /**\\n     * @notice This function is used to cancel the ownership transfer.\\n     * @dev This function can be used for both cancelling a transfer to a new owner and\\n     *      cancelling the renouncement of the ownership.\\n     */\\n    function cancelOwnershipTransfer() external onlyOwner {\\n        Status _ownershipStatus = ownershipStatus;\\n        if (_ownershipStatus == Status.NoOngoingTransfer) {\\n            revert NoOngoingTransferInProgress();\\n        }\\n\\n        if (_ownershipStatus == Status.TransferInProgress) {\\n            delete potentialOwner;\\n        }\\n\\n        delete ownershipStatus;\\n\\n        emit CancelOwnershipTransfer();\\n    }\\n\\n    /**\\n     * @notice This function is used to confirm the ownership renouncement.\\n     */\\n    function confirmOwnershipRenouncement() external onlyOwner {\\n        if (ownershipStatus != Status.RenouncementInProgress) {\\n            revert RenouncementNotInProgress();\\n        }\\n\\n        delete owner;\\n        delete ownershipStatus;\\n\\n        emit NewOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice This function is used to confirm the ownership transfer.\\n     * @dev This function can only be called by the current potential owner.\\n     */\\n    function confirmOwnershipTransfer() external {\\n        if (ownershipStatus != Status.TransferInProgress) {\\n            revert TransferNotInProgress();\\n        }\\n\\n        if (msg.sender != potentialOwner) {\\n            revert WrongPotentialOwner();\\n        }\\n\\n        owner = msg.sender;\\n        delete ownershipStatus;\\n        delete potentialOwner;\\n\\n        emit NewOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @notice This function is used to initiate the transfer of ownership to a new owner.\\n     * @param newPotentialOwner New potential owner address\\n     */\\n    function initiateOwnershipTransfer(address newPotentialOwner) external onlyOwner {\\n        if (ownershipStatus != Status.NoOngoingTransfer) {\\n            revert TransferAlreadyInProgress();\\n        }\\n\\n        ownershipStatus = Status.TransferInProgress;\\n        potentialOwner = newPotentialOwner;\\n\\n        /**\\n         * @dev This function can only be called by the owner, so msg.sender is the owner.\\n         *      We don't have to SLOAD the owner again.\\n         */\\n        emit InitiateOwnershipTransfer(msg.sender, newPotentialOwner);\\n    }\\n\\n    /**\\n     * @notice This function is used to initiate the ownership renouncement.\\n     */\\n    function initiateOwnershipRenouncement() external onlyOwner {\\n        if (ownershipStatus != Status.NoOngoingTransfer) {\\n            revert TransferAlreadyInProgress();\\n        }\\n\\n        ownershipStatus = Status.RenouncementInProgress;\\n\\n        emit InitiateOwnershipRenouncement();\\n    }\\n\\n    function _onlyOwner() private view {\\n        if (msg.sender != owner) revert NotOwner();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRoyaltyFeeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRoyaltyFeeRegistry\\n * @author LooksRare protocol team (\ud83d\udc40,\ud83d\udc8e)\\n */\\ninterface IRoyaltyFeeRegistry {\\n    /**\\n     * @notice This function returns the royalty information for a collection at a given transaction price.\\n     * @param collection Collection address\\n     * @param price Transaction price\\n     * @return receiver Receiver address\\n     * @return royaltyFee Royalty fee amount\\n     */\\n    function royaltyInfo(\\n        address collection,\\n        uint256 price\\n    ) external view returns (address receiver, uint256 royaltyFee);\\n}\\n\"\r\n    },\r\n    \"contracts/constants/NumericConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev 100% represented in basis point is 10_000.\\n */\\nuint256 constant ONE_HUNDRED_PERCENT_IN_BP = 10_000;\\n\\n/**\\n * @dev The maximum length of a proof for a batch order is 10.\\n *      The maximum merkle tree that can used for signing has a height of\\n *      2**10 = 1_024.\\n */\\nuint256 constant MAX_CALLDATA_PROOF_LENGTH = 10;\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/interfaces/IOwnableTwoSteps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IOwnableTwoSteps\\n * @author LooksRare protocol team (\ud83d\udc40,\ud83d\udc8e)\\n */\\ninterface IOwnableTwoSteps {\\n    /**\\n     * @notice This enum keeps track of the ownership status.\\n     * @param NoOngoingTransfer The default status when the owner is set\\n     * @param TransferInProgress The status when a transfer to a new owner is initialized\\n     * @param RenouncementInProgress The status when a transfer to address(0) is initialized\\n     */\\n    enum Status {\\n        NoOngoingTransfer,\\n        TransferInProgress,\\n        RenouncementInProgress\\n    }\\n\\n    /**\\n     * @notice This is returned when there is no transfer of ownership in progress.\\n     */\\n    error NoOngoingTransferInProgress();\\n\\n    /**\\n     * @notice This is returned when the caller is not the owner.\\n     */\\n    error NotOwner();\\n\\n    /**\\n     * @notice This is returned when there is no renouncement in progress but\\n     *         the owner tries to validate the ownership renouncement.\\n     */\\n    error RenouncementNotInProgress();\\n\\n    /**\\n     * @notice This is returned when the transfer is already in progress but the owner tries\\n     *         initiate a new ownership transfer.\\n     */\\n    error TransferAlreadyInProgress();\\n\\n    /**\\n     * @notice This is returned when there is no ownership transfer in progress but the\\n     *         ownership change tries to be approved.\\n     */\\n    error TransferNotInProgress();\\n\\n    /**\\n     * @notice This is returned when the ownership transfer is attempted to be validated by the\\n     *         a caller that is not the potential owner.\\n     */\\n    error WrongPotentialOwner();\\n\\n    /**\\n     * @notice This is emitted if the ownership transfer is cancelled.\\n     */\\n    event CancelOwnershipTransfer();\\n\\n    /**\\n     * @notice This is emitted if the ownership renouncement is initiated.\\n     */\\n    event InitiateOwnershipRenouncement();\\n\\n    /**\\n     * @notice This is emitted if the ownership transfer is initiated.\\n     * @param previousOwner Previous/current owner\\n     * @param potentialOwner Potential/future owner\\n     */\\n    event InitiateOwnershipTransfer(address previousOwner, address potentialOwner);\\n\\n    /**\\n     * @notice This is emitted when there is a new owner.\\n     */\\n    event NewOwner(address newOwner);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@looksrare/=node_modules/@looksrare/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"solmate/=node_modules/solmate/\",\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 18000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NoOngoingTransferInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RenouncementNotInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferAlreadyInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPotentialOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CancelOwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitiateOwnershipRenouncement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"potentialOwner\",\"type\":\"address\"}],\"name\":\"InitiateOwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"NewRoyaltyFeeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RoyaltyFeeUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmOwnershipRenouncement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateOwnershipRenouncement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"initiateOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipStatus\",\"outputs\":[{\"internalType\":\"enum IOwnableTwoSteps.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"royaltyFeeInfoCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RoyaltyFeeRegistry", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "18000", "ConstructorArguments": "000000000000000000000000798a48fd2e0db03f5c9e547529da2db212ba9213000000000000000000000000000000000000000000000000000000000000251c", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}