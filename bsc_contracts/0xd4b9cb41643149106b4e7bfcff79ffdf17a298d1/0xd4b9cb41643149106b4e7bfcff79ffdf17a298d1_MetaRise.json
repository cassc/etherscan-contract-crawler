{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract MetaRise is ReentrancyGuard {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\taddress private tokenAddr = address(0x55d398326f99059fF775485246999027B3197955);\r\n    IERC20 public token;\r\n\r\n\tuint256 constant private PERCENTS_DIVIDER = 10000;\r\n    uint256 constant private ACTIVATE_PRICE = 50 ether;\r\n    uint256 constant private REACTIVATE_REWARD = 40 ether;\r\n    uint256 constant private REWARD_REMAINS = 10 ether;\r\n    uint256 constant private DIRECT_COMMISSION = 10 ether;\r\n    uint256 constant private ACTIVATE_OWNER_FEE = 5 ether;\r\n    uint256 constant private REACTIVATE_OWNER_FEE = 10 ether;\r\n    uint256 constant private REFERRAL_COMMISSION = 30 ether;\r\n    uint256 constant private DEACTIVATE_STEP = 90 ether;\r\n    uint256 constant private MAX_DIRECT_REFERRAL = 3;\r\n    uint256 constant private MAX_ROI_PROFIT = 20000;\r\n    uint256 constant private DAILY_PROFIT = 200;\r\n    uint256 constant private MINIMUM_CLAIM = 5 ether;\r\n    uint256 constant private STOP_ROI_STEP = 2;\r\n    uint256 constant private  TIME_STEP = 1 days;\r\n    uint256 public MAX_SEARCH_ADDRESS = 600;\r\n\r\n\tstruct User {\r\n        uint256 id;\r\n        uint256 joinDate;\r\n        uint256 originReferrer;\r\n        uint256 mainReferrer;\r\n        uint256 currentProfit;\r\n        uint256 downlineCount;\r\n        uint256[] referral;\r\n        uint256 totalDirectCommission;\r\n        uint256 missedDirectCommission;\r\n        uint256 totalReferralCommissionPaid;\r\n        uint256 totalReferralCommissionReceived;\r\n        uint256 missedCommission;\r\n        uint256[] savedSearchArray;\r\n        uint256 currentSearchIndex;\r\n\t}\r\n\r\n    struct UserROI {\r\n        uint256 id;\r\n        uint256 roiCheckpoint;\r\n        uint256 roiFinishCheckpoint;\r\n        uint256 reactivateCount;\r\n        uint256 withdrawn;\r\n\t}\r\n\r\n\tmapping (address => User) public users;\r\n    mapping (address => UserROI) public usersROI;\r\n    mapping(uint256 => address) public userList;\r\n\r\n    uint256 public currentID = 1;\r\n\r\n\tuint256 public totalUsers;\r\n    uint256 public totalActiveAmount;\r\n    uint256 public totalReActiveCount;\r\n    uint256 public totalDirectReferralPaid;\r\n    uint256 public totalDirectReferralMissed;\r\n    uint256 public totalCommissionPaid;\r\n    uint256 public totalCommissionReceived;\r\n    uint256 public totalCommissionMissed;\r\n    uint256 public TotalRewardClaimed;\r\n\taddress public ownerWallet;\r\n    bool public initial;\r\n\r\n\r\n\tevent Activate(address userAddress, uint256 indexed id, uint256 timestamp);\r\n    event ReActivate(address userAddress, uint256 indexed id, uint256 timestamp);\r\n    event OwnerFeePaid(uint256 amount, uint256 timestamp);\r\n    event DirectCommissionPaid(uint256 fromID, uint256 toID, uint256 timestamp);\r\n    event DirectCommissionMissed(uint256 fromID, uint256 toID, uint256 timestamp);\r\n    event ReferralCommissionReceived(uint256 fromID, uint256 toID, uint256 timestamp);\r\n    event ReferralCommissionPaid(uint256 userID, uint256 timestamp);\r\n    event ReferralCommissionMissed(uint256 fromID, uint256 toID, uint256 timestamp);\r\n    event DailyProfitClaimed(address userAddress, uint256 amount, uint256 timestamp);\r\n\r\n\tconstructor() {\r\n\t\townerWallet = address(0x33ec6197C2049902f4082Ea3daffdb3AbCD5C42B);\r\n\t\ttoken = IERC20(tokenAddr);\r\n\t}\r\n\r\n    function activateProject() public {\r\n        require(msg.sender == ownerWallet, \"Only owner\");\r\n        require(!initial, \"Only once\");\r\n        User memory userStruct;\r\n        UserROI memory userROIStruct;\r\n        uint256[] memory deafultArray;\r\n        userStruct = User({\r\n            id: currentID,\r\n            joinDate: block.timestamp,\r\n            originReferrer: 0,\r\n            mainReferrer: 0,\r\n            currentProfit: 0,\r\n            downlineCount: 0,\r\n            referral: new uint256[](0),\r\n            totalDirectCommission: 0,\r\n            missedDirectCommission: 0,\r\n            totalReferralCommissionPaid: 0,\r\n            totalReferralCommissionReceived:0,\r\n            missedCommission: 0,\r\n            savedSearchArray: deafultArray,\r\n            currentSearchIndex: 0\r\n        });\r\n        userROIStruct = UserROI({\r\n            id: currentID,\r\n            roiCheckpoint: block.timestamp,\r\n            roiFinishCheckpoint: 0,\r\n            reactivateCount:0,\r\n            withdrawn: 0\r\n        });\r\n\r\n\r\n        users[ownerWallet] = userStruct;\r\n        usersROI[ownerWallet] = userROIStruct;\r\n        userList[currentID] = ownerWallet;\r\n        currentID++;\r\n        totalUsers++;\r\n        initial = true;\r\n    }\r\n\r\n    function activate(uint256 referrer) public noReentrant {\r\n        require(initial , \"Project not launch yet\");\r\n        require(users[msg.sender].joinDate == 0, \"Activate only once\");\r\n        require(users[userList[referrer]].joinDate != 0, \"Referrer is not valid\");\r\n        require(ACTIVATE_PRICE <= token.allowance(msg.sender, address(this)), \"Low allowance\"); \r\n        token.safeTransferFrom(msg.sender, address(this), ACTIVATE_PRICE);\r\n\r\n        uint256 refID = users[userList[referrer]].id;\r\n        if (users[userList[refID]].referral.length >= MAX_DIRECT_REFERRAL) {\r\n            refID = _findFreeReferrer(refID);\r\n        }\r\n\r\n        User memory userStruct;\r\n        UserROI memory userROIStruct;\r\n        uint256[] memory deafultArray;\r\n        userStruct = User({\r\n            id: currentID,\r\n            joinDate: block.timestamp,\r\n            originReferrer: users[userList[referrer]].id,\r\n            mainReferrer: refID,\r\n            currentProfit: 0,\r\n            downlineCount: 0,\r\n            referral: new uint256[](0),\r\n            totalDirectCommission: 0,\r\n            missedDirectCommission: 0,\r\n            totalReferralCommissionPaid: 0,\r\n            totalReferralCommissionReceived: 0,\r\n            missedCommission: 0,\r\n            savedSearchArray: deafultArray,\r\n            currentSearchIndex: 0\r\n        });\r\n\r\n        userROIStruct = UserROI({\r\n            id: currentID,\r\n            roiCheckpoint: block.timestamp,\r\n            roiFinishCheckpoint: 0,\r\n            reactivateCount:0,\r\n            withdrawn: 0\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        usersROI[msg.sender] = userROIStruct;\r\n        users[userList[users[msg.sender].originReferrer]].downlineCount++;\r\n        userList[currentID] = msg.sender;\r\n        users[userList[users[msg.sender].mainReferrer]].referral.push(currentID);\r\n        currentID++;\r\n        totalUsers++;\r\n        totalActiveAmount += ACTIVATE_PRICE;\r\n\r\n        _payCommission(msg.sender, 0);\r\n\r\n        emit Activate(msg.sender, users[msg.sender].id, block.timestamp);\r\n    }\r\n\r\n    function claimAndReactivate() public noReentrant {\r\n        require(initial , \"Project not launch yet\");\r\n        require(users[msg.sender].joinDate > 0, \"Activate first\");\r\n        require(users[msg.sender].currentProfit >= DEACTIVATE_STEP, \"User is active\");\r\n\r\n        _payCommission(msg.sender, 1);\r\n        users[msg.sender].currentProfit = users[msg.sender].currentProfit - DEACTIVATE_STEP;\r\n        usersROI[msg.sender].reactivateCount++;\r\n        totalReActiveCount ++;\r\n        if(usersROI[msg.sender].reactivateCount == STOP_ROI_STEP){\r\n            usersROI[msg.sender].roiFinishCheckpoint = block.timestamp;\r\n        }\r\n        emit ReActivate(msg.sender, users[msg.sender].id, block.timestamp);\r\n    }\r\n\r\n    function claimDailyProfit() public noReentrant{\r\n\t\tUserROI storage user = usersROI[msg.sender];\r\n\r\n\t\tuint256 totalAmount = getUserDividends(msg.sender);\r\n\t\trequire(totalAmount >= MINIMUM_CLAIM, \"Dividend must be more than minimum claim\");\r\n        require(totalAmount <=  getContractBalance(), \"Not enough contract balance\");\r\n\r\n\t\tuser.roiCheckpoint = user.roiFinishCheckpoint < block.timestamp && user.roiFinishCheckpoint != 0 ? user.roiFinishCheckpoint : block.timestamp;\r\n\t\tuser.withdrawn += totalAmount;\r\n        TotalRewardClaimed += totalAmount;\r\n\r\n        token.safeTransfer(msg.sender, totalAmount); \r\n\t\temit DailyProfitClaimed(msg.sender, totalAmount, block.timestamp);\r\n\t}\r\n\r\n    function _payCommission(address userAddress, uint8 resourceType) internal {\r\n        User storage user = users[userAddress];\r\n        address originUser = userList[user.originReferrer];\r\n        address mainReferrer = userList[user.mainReferrer];\r\n        bool isOriginActivate = isUserActive(originUser);\r\n        bool isMainActivate = isUserActive(mainReferrer);\r\n\r\n        if(resourceType == 0) {\r\n            if(isOriginActivate) {\r\n                users[originUser].totalDirectCommission += DIRECT_COMMISSION;\r\n                totalDirectReferralPaid += DIRECT_COMMISSION;\r\n                users[originUser].currentProfit += DIRECT_COMMISSION;\r\n                emit DirectCommissionPaid(user.id, user.originReferrer, block.timestamp);\r\n            } else {\r\n                users[originUser].missedDirectCommission += DIRECT_COMMISSION;\r\n                totalDirectReferralMissed += DIRECT_COMMISSION;\r\n                emit DirectCommissionMissed(user.id, user.originReferrer, block.timestamp);\r\n            }\r\n        } else { \r\n            totalCommissionPaid += REACTIVATE_REWARD;\r\n            users[userAddress].totalReferralCommissionPaid += REACTIVATE_REWARD;\r\n            token.safeTransfer(userAddress, REACTIVATE_REWARD); \r\n            emit ReferralCommissionPaid(user.id, block.timestamp);\r\n        }\r\n        \r\n        if (mainReferrer != address(0)) {\r\n            if(isMainActivate){\r\n                users[mainReferrer].currentProfit += REFERRAL_COMMISSION;\r\n                totalCommissionReceived += REFERRAL_COMMISSION;\r\n                users[mainReferrer].totalReferralCommissionReceived += REFERRAL_COMMISSION;\r\n                emit ReferralCommissionReceived(user.id, users[mainReferrer].id, block.timestamp);\r\n            }else{\r\n                users[mainReferrer].missedCommission += REFERRAL_COMMISSION;\r\n                totalCommissionMissed += REFERRAL_COMMISSION;\r\n                emit ReferralCommissionMissed(user.id, users[mainReferrer].id, block.timestamp);\r\n            }\r\n        }\r\n        if(resourceType == 0){\r\n            token.safeTransfer(ownerWallet, ACTIVATE_OWNER_FEE);\r\n        } else {\r\n            token.safeTransfer(ownerWallet, REACTIVATE_OWNER_FEE); \r\n        }\r\n        emit OwnerFeePaid(resourceType == 0 ? ACTIVATE_OWNER_FEE : REACTIVATE_OWNER_FEE, block.timestamp);\r\n    }\r\n\r\n    function _findFreeReferrer(uint256 _user) internal returns (uint256) {\r\n        if (users[userList[_user]].referral.length < MAX_DIRECT_REFERRAL) {\r\n            return _user;\r\n        }\r\n        uint256[] storage referrals = users[userList[_user]].savedSearchArray;\r\n        if(referrals.length == 0){\r\n            referrals.push(users[userList[_user]].referral[0]);\r\n            referrals.push(users[userList[_user]].referral[1]);\r\n            referrals.push(users[userList[_user]].referral[2]);\r\n        }\r\n\r\n        uint256 freeReferrer;\r\n        bool noFreeReferrer = true;\r\n        uint256 maxBuildAddress = (MAX_SEARCH_ADDRESS / MAX_DIRECT_REFERRAL) - 1;\r\n        for (uint256 i = users[userList[_user]].currentSearchIndex; i < MAX_SEARCH_ADDRESS; i++) {\r\n            if (users[userList[referrals[i]]].referral.length == MAX_DIRECT_REFERRAL) {\r\n                if (i < maxBuildAddress) {\r\n                    referrals.push(users[userList[referrals[i]]].referral[0]);\r\n                    referrals.push(users[userList[referrals[i]]].referral[1]);\r\n                    referrals.push(users[userList[referrals[i]]].referral[2]);\r\n                    users[userList[_user]].currentSearchIndex++;\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, \"No Free Referrer\");\r\n        return freeReferrer;\r\n    }\r\n    \r\n\r\n    function findFreeReferrer(uint256 _user) public view returns (uint256) {\r\n        if (users[userList[_user]].referral.length < MAX_DIRECT_REFERRAL) {\r\n            return _user;\r\n        }\r\n        uint256[] memory referrals = users[userList[_user]].savedSearchArray;\r\n        if(referrals.length == 0){\r\n            referrals[0] = users[userList[_user]].referral[0];\r\n            referrals[1] = users[userList[_user]].referral[1];\r\n            referrals[2] = users[userList[_user]].referral[2];\r\n        }\r\n\r\n        uint256 freeReferrer;\r\n        bool noFreeReferrer = true;\r\n        uint256 maxBuildAddress = (MAX_SEARCH_ADDRESS / MAX_DIRECT_REFERRAL) - 1;\r\n        for (uint256 i = users[userList[_user]].currentSearchIndex; i < MAX_SEARCH_ADDRESS; i++) {\r\n            if (users[userList[referrals[i]]].referral.length == MAX_DIRECT_REFERRAL) {\r\n                if (i < maxBuildAddress) {\r\n                    referrals[(i + 1) * MAX_DIRECT_REFERRAL] = users[userList[referrals[i]]].referral[0];\r\n                    referrals[(i + 1) * MAX_DIRECT_REFERRAL + 1] = users[userList[referrals[i]]].referral[1];\r\n                    referrals[(i + 1) * MAX_DIRECT_REFERRAL + 2] = users[userList[referrals[i]]].referral[2];\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, \"No Free Referrer\");\r\n        return freeReferrer;\r\n    }\r\n\r\n    function getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUserROI storage user = usersROI[userAddress];\r\n\t\tuint256 totalAmount;\r\n        uint256 maxProfit = ACTIVATE_PRICE * MAX_ROI_PROFIT / PERCENTS_DIVIDER;\r\n        \r\n        uint256 share = ACTIVATE_PRICE * DAILY_PROFIT / PERCENTS_DIVIDER;\r\n        uint256 from = user.roiCheckpoint;\r\n        uint256 to = user.roiFinishCheckpoint < block.timestamp && user.roiFinishCheckpoint != 0 ? user.roiFinishCheckpoint : block.timestamp;\r\n        if (from < to) {\r\n            totalAmount = share * (to - from) / TIME_STEP;\r\n        }\r\n        if (user.withdrawn + totalAmount >= maxProfit) {\r\n            totalAmount = maxProfit - user.withdrawn;\r\n        }\r\n\t\treturn totalAmount;\r\n\t}\r\n\r\n    function setMaxSearchAddress(uint256 amount) public {\r\n        require(msg.sender == ownerWallet, \"Only owner\");\r\n\t\tMAX_SEARCH_ADDRESS = amount;\r\n\t}\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function isUserActive(address userAddress) public view returns (bool) {\r\n\t\tif((users[userAddress].currentProfit < DEACTIVATE_STEP && userAddress != address(0)) || userAddress == ownerWallet){\r\n            return true;\r\n        } else{\r\n            return false;\r\n        }\r\n\t}\r\n\r\n\tfunction getSiteInfo() public view returns(uint256 _totalUsers, uint256 _totalActiveAmount, uint256 _totalReActiveCount, uint256 _totalDirectReferralPaid, uint256 _totalDirectReferralMissed, uint256 _totalCommissionPaid, uint256 _totalCommissionReceived , uint256 _totalCommissionMissed, uint256 _TotalRewardClaimed) {\r\n\t\treturn(totalUsers, totalActiveAmount, totalReActiveCount, totalDirectReferralPaid, totalDirectReferralMissed, totalCommissionPaid, totalCommissionReceived, totalCommissionMissed, TotalRewardClaimed);\r\n\t}\r\n\r\n    function getUserMainReferrer(address userAddress) public view returns(address) {\r\n\t\treturn userList[users[userAddress].mainReferrer];\r\n\t}\r\n\r\n    function getUserOriginReferrer(address userAddress) public view returns(address) {\r\n\t\treturn userList[users[userAddress].originReferrer];\r\n\t}\r\n    \r\n    function getUserReferral(address userAddress) public view returns(uint256[] memory) {\r\n\t\treturn users[userAddress].referral;\r\n\t}\r\n\r\n    function getUserSavedSearchArray(address userAddress) public view returns(uint256[] memory) {\r\n\t\treturn users[userAddress].savedSearchArray;\r\n\t}\r\n\r\n    function getUserReferralLength(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].referral.length;\r\n\t}\r\n\r\n    function treeView(address _user) public view returns (address[] memory,bool[] memory, uint256[] memory ) {\r\n        address[] memory referrals = new address[](3);\r\n        bool[] memory activeStatus = new bool[](3);\r\n        uint256[] memory IDs = new uint256[](3);\r\n        IDs[0] = users[_user].referral.length > 0 ? users[_user].referral[0] : 0;\r\n        IDs[1] = users[_user].referral.length > 1 ? users[_user].referral[1] : 0;\r\n        IDs[2] = users[_user].referral.length > 2 ? users[_user].referral[2] : 0;\r\n        for (uint256 i = 0; i < 3; i++) {\r\n            activeStatus[i] = isUserActive(userList[IDs[i]]);\r\n            referrals[i] = userList[IDs[i]];\r\n        }\r\n        return (referrals, activeStatus, IDs);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Activate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DailyProfitClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DirectCommissionMissed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DirectCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReActivate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionMissed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SEARCH_ADDRESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalRewardClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndReactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDailyProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalActiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReActiveCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDirectReferralPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDirectReferralMissed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCommissionPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCommissionReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCommissionMissed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalRewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMainReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserOriginReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferral\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserSavedSearchArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initial\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isUserActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSearchAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalActiveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommissionMissed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommissionPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommissionReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDirectReferralMissed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDirectReferralPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReActiveCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"treeView\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downlineCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDirectCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missedDirectCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferralCommissionPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferralCommissionReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missedCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSearchIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiCheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiFinishCheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reactivateCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MetaRise", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9200d9c886fbdf2965cfe920befb14e07e1243430f23a40c78f76f902427f88"}