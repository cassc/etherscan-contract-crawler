{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n \r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}  \r\n\r\ninterface IERC1155SoulBond is IERC1155, IERC1155MetadataURI {\r\n    event BoundSingle(address indexed operator, address indexed source, uint256 id, uint256 value);\r\n    event BoundBatch(address indexed operator, address indexed source, uint256[] id, uint256[] value);\r\n\r\n    function boundOf(address account, uint256 id) external view returns (uint256 amount);\r\n\r\n    function boundOfBatch(address[] memory accounts, uint256[] memory ids) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUnitag is IERC1155SoulBond {\r\n    event CollectionCreated(address indexed operator, string collectionName);\r\n    event CollectionURIChanged(address indexed operator, string collectionName, string newUri);\r\n    event OwnershipTransferred(address indexed operator, address indexed newOwner, string collectionName);\r\n    event SetupTag(address indexed operator, string collectionName, string tagName, uint256 value);\r\n    event CollectionValueChanged(address indexed source, uint256 id, uint256 value);\r\n    event OperatorAdded(address indexed operator, address indexed addedOperator, string collectionName);\r\n    event OperatorRemoved(address indexed operator, address indexed removedOperator, string collectionName);\r\n\r\n    function createCollection(string calldata collectionName, string calldata uri_, address callbackHandler) external returns (uint256 collectionId);\r\n\r\n    function setupTag(string calldata collectionName, string calldata tagName, uint256 value) external;\r\n\r\n    function transferOwner(string calldata collectionName, address newOwner) external;\r\n\r\n    function addOperator(string calldata collectionName, address operator) external;\r\n\r\n    function removeOperator(string calldata collectionName, address operator) external;\r\n\r\n    function mint(address to, uint256 tagId, uint256 amount, bool bindImmediately) external;\r\n\r\n    function bind(address source, uint256 tagId, uint256 value) external;\r\n\r\n    function mintBatch(address to, uint256[] calldata tagIds, uint256[] calldata amounts, bool bindImmediately) external;\r\n\r\n    function bindBatch(address source, uint256[] calldata tagIds, uint256[] calldata amounts) external;\r\n\r\n    function available(string calldata collectionName) external view returns (bool);\r\n\r\n    function collectionById(uint256 collectionId) external view returns (address owner, string memory name, string memory uri_);\r\n\r\n    function collectionByName(string calldata collectionName) external view returns (uint256 collectionId, address owner, string memory name, string memory uri_);\r\n\r\n    function operatorsById(uint256 collectionId) external view returns (address[] memory operators_);\r\n\r\n    function operatorsByName(string calldata collectionName) external view returns (address[] memory operators_);\r\n\r\n    function tagById(uint256 tagId) external view returns (uint256 collectionId, uint256 value, string memory name);\r\n\r\n    function tagByName(string calldata collectionName, string calldata tagName) external view returns (uint256 tagId, uint256 collectionId, uint256 value, string memory name);\r\n\r\n    function tagByFullName(string calldata tagFullName) external view returns (uint256 tagId, uint256 collectionId, uint256 value, string memory name);\r\n}\r\n\r\n\r\ninterface IUnitagMinter {\r\n    function mint(address to, uint256 tagId, uint256 amount, bool bindImmediately, bytes calldata signature) external; \r\n    function mintBatch(address to, uint256[] calldata tagIds, uint256[] calldata amounts, bool bindImmediately, bytes calldata signature) external;\r\n}\r\n\r\n\r\ninterface IUnitagRelationRegistry {\r\n    /**\r\n     * @dev Set relationship through operators\r\n     * @param collectionId the id of the collection\r\n     * @param accounts  the accounts to set\r\n     * @param signature the signatures of the accounts\r\n     */\r\n    function setParent(uint256 collectionId, address[] calldata accounts, bytes calldata signature) external;\r\n\r\n    /**\r\n     * @dev check if the account account has ancestor\r\n     * @param collectionId the id of the collection\r\n     * @param account the account to query\r\n     */\r\n    function hasAncestor(uint256 collectionId, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Get direct ancestor of one account(parent)\r\n     * @param collectionId the id of the collection\r\n     * @param account the account to query\r\n     */\r\n    function ancestor(uint256 collectionId, address account) external view returns (address);\r\n\r\n    /**\r\n     * @dev Get multi level ancestor of one account\r\n     * @param collectionId the id of the collection\r\n     * @param account the account to query\r\n     * @param level the levels to query\r\n     */\r\n    function ancestors(uint256 collectionId, address account, uint256 level) external view returns (address[] memory _ancestors);\r\n}\r\n\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\r\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides a function to batch together multiple calls in a single external call.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract Multicall {\r\n    /**\r\n     * @dev Receives and executes a batch of function calls on this contract.\r\n     */\r\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\r\n        results = new bytes[](data.length);\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\r\n        }\r\n        return results;\r\n    }\r\n}\r\n\r\n\r\nabstract contract PrizeDepositStorageV2 is Multicall {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event DepositPrize(address indexed sender, uint256 indexed collectionId, address indexed payToken, uint256 amount);\r\n    event WithdrawPrize(address indexed sender, uint256 indexed collectionId, address indexed payToken, uint256 amount);\r\n    event SetupPrize(address indexed operator, uint256 tagId, address payToken, uint32 supply, uint256 unitShare);\r\n    event TrimPrize(address indexed operator, uint256 tagId, address payToken);\r\n    event ClaimPrize(address indexed recipient, uint256 tagId, uint256 units, address payToken, uint256 amount);\r\n    event RefParamSet(address indexed operator, uint256 collectionId, uint256 feePercentage, uint256 level1, uint256 level2);\r\n    event Referral(address indexed source, address indexed recipient, uint256 level, address payToken, uint256 amount);\r\n\r\n    struct PrizePackage {\r\n        uint32 supply; // 0 for unlimited\r\n        uint32 rest;\r\n        uint192 unitShare;\r\n        address payToken;\r\n    }\r\n\r\n    address private constant nativeCurrency = address(0x0);\r\n    address private constant zeroAddress = address(0x0);\r\n\r\n    // tagId => prizeId[]\r\n    mapping(uint256 => mapping(address => PrizePackage)) internal _tagPrizes;\r\n    mapping(uint256 => EnumerableSet.AddressSet) internal _tagPrizeTokens;\r\n\r\n    mapping(uint256 => uint256) internal _collectionRefParam; // collectionId=>fee\r\n\r\n    // project=>token=>rest\r\n    mapping(uint256 => mapping(address => uint256)) internal _prizePool;\r\n    IUnitagRelationRegistry public immutable relationRegistry;\r\n\r\n    uint256 public constant PERCENTAGE_BASE = 10000;\r\n\r\n    constructor(address relationRegistry_) {\r\n        relationRegistry = IUnitagRelationRegistry(relationRegistry_);\r\n    }\r\n\r\n    function _setRefParams(address operator, uint256 collectionId, uint256 feePercentage, uint256 level1, uint256 level2) internal {\r\n        require(feePercentage <= PERCENTAGE_BASE, \"UnitagPrizeDeposit: invalid ref level\");\r\n        require(level1 <= PERCENTAGE_BASE, \"UnitagPrizeDeposit: invalid L1 percentage\");\r\n        require(level2 <= PERCENTAGE_BASE, \"UnitagPrizeDeposit: invalid L2 percentage\");\r\n        require(level1 + level2 <= PERCENTAGE_BASE, \"UnitagPrizeDeposit: invalid L1+L2 percentage\");\r\n        _collectionRefParam[collectionId] = (feePercentage << 64) | (level2 << 32) | level1;\r\n        emit RefParamSet(operator, collectionId, feePercentage, level1, level2);\r\n    }\r\n\r\n    function _refParams(uint256 collectionId) internal view returns (uint256 feePercentage, uint256 level1, uint256 level2) {\r\n        uint256 refParams = _collectionRefParam[collectionId];\r\n        level1 = refParams & type(uint32).max;\r\n        level2 = (refParams >> 32) & type(uint32).max;\r\n        feePercentage = refParams >> 64;\r\n    }\r\n\r\n    function _prizePoolOf(uint256 collectionId, address token) internal view returns (uint256) {\r\n        return _prizePool[collectionId][token];\r\n    }\r\n\r\n    function _prizeOf(uint256 tagId) internal view returns (PrizePackage[] memory prizes) {\r\n        EnumerableSet.AddressSet storage prizeTokens = _tagPrizeTokens[tagId];\r\n        uint256 prizeCount = prizeTokens.length();\r\n        prizes = new PrizePackage[](prizeCount);\r\n        mapping(address => PrizePackage) storage _prizes = _tagPrizes[tagId];\r\n        for (uint256 index = 0; index < prizeCount; ++index) {\r\n            address payToken = prizeTokens.at(index);\r\n            prizes[index] = _prizes[payToken];\r\n            prizes[index].payToken = payToken;\r\n        }\r\n    }\r\n\r\n    function _depositPrize(address sender, uint256 collectionId, address payToken, uint256 amount) internal {\r\n        uint256 balance = _transferInToken(sender, payToken, amount);\r\n        _prizePool[collectionId][payToken] += balance;\r\n        emit DepositPrize(sender, collectionId, payToken, balance);\r\n    }\r\n\r\n    function _withdrawPrize(address recipient, uint256 collectionId, address payToken, uint256 amount) internal {\r\n        uint256 balance = _prizePool[collectionId][payToken];\r\n        require(balance >= amount, \"UnitagPrizeDeposit: not enought prize\");\r\n        _prizePool[collectionId][payToken] = balance - amount;\r\n        _transferOutToken(recipient, payToken, amount);\r\n        emit WithdrawPrize(recipient, collectionId, payToken, amount);\r\n    }\r\n\r\n    function _setupPrize(address operator, uint256 tagId, address payToken, uint32 supply, uint192 unitShare) internal {\r\n        if (unitShare == 0) _tagPrizeTokens[tagId].remove(payToken);\r\n        else {\r\n            _tagPrizeTokens[tagId].add(payToken);\r\n            PrizePackage storage prize = _tagPrizes[tagId][payToken];\r\n            prize.supply = supply;\r\n            prize.rest = supply;\r\n            prize.unitShare = unitShare;\r\n            prize.payToken = payToken;\r\n        }\r\n        emit SetupPrize(operator, tagId, payToken, supply, unitShare);\r\n    }\r\n\r\n    function _claimPrize(address recipient, uint256 collectionId, uint256 tagId, uint256 amount) internal {\r\n        uint256 prizeCount = _tagPrizeTokens[tagId].length();\r\n        address[] memory payTokens = new address[](prizeCount);\r\n        uint256[] memory payAmounts = new uint256[](prizeCount);\r\n        uint256[] memory units = new uint256[](prizeCount);\r\n        uint256 rCount;\r\n        for (uint256 index = 0; index < prizeCount; ++index) {\r\n            address payToken = _tagPrizeTokens[tagId].at(index);\r\n            {\r\n                PrizePackage storage prize = _tagPrizes[tagId][payToken];\r\n                uint256 balance = _prizePool[collectionId][payToken];\r\n                {\r\n                    uint256 _units = amount;\r\n                    uint256 unitShare = prize.unitShare;\r\n                    if (balance < unitShare) continue;\r\n                    if (prize.supply > 0) {\r\n                        uint256 rest = prize.rest;\r\n                        _units = _min(rest, amount);\r\n                        if (_units == 0) continue;\r\n                        prize.rest = uint32(rest - _units);\r\n                    }\r\n                    _units = _min(balance / unitShare, _units);\r\n\r\n                    uint256 sendAmount = _units * unitShare;\r\n                    balance -= sendAmount;\r\n\r\n                    payTokens[rCount] = payToken;\r\n                    payAmounts[rCount] = sendAmount;\r\n                    units[rCount] = _units;\r\n                }\r\n                _prizePool[collectionId][payToken] = balance;\r\n                ++rCount;\r\n            }\r\n        }\r\n        if (rCount > 0) {\r\n            if (rCount != payTokens.length) {\r\n                assembly {\r\n                    mstore(payTokens, rCount)\r\n                    mstore(payAmounts, rCount)\r\n                    mstore(units, rCount)\r\n                }\r\n            }\r\n            _transferOutTokenWithAncesors(collectionId, recipient, tagId, units, payTokens, payAmounts);\r\n        }\r\n    }\r\n\r\n    function trimPrize(uint256 tagId) public {\r\n        mapping(address => PrizePackage) storage prizes = _tagPrizes[tagId];\r\n        EnumerableSet.AddressSet storage prizeTokens = _tagPrizeTokens[tagId];\r\n        uint256 prizeCount = prizeTokens.length();\r\n        for (uint256 index = 0; index < prizeCount; ) {\r\n            address prizeToken = prizeTokens.at(index);\r\n            if (prizes[prizeToken].supply > 0 && prizes[prizeToken].rest == 0) {\r\n                --prizeCount;\r\n                prizeTokens.remove(prizeToken);\r\n                emit TrimPrize(msg.sender, tagId, prizeToken);\r\n            } else ++index;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param collectionId the id of the collection\r\n     * @param accounts  the accounts to set\r\n     * @param signature the signatures of the accounts\r\n     */\r\n    function setParent(uint256 collectionId, address[] calldata accounts, bytes calldata signature) public {\r\n        relationRegistry.setParent(collectionId, accounts, signature);\r\n    }\r\n\r\n    function _transferOutToken(address recipient, address payToken, uint256 value) private {\r\n        if (payToken == nativeCurrency) {\r\n            (bool success, ) = recipient.call{value: value}(\"\");\r\n            require(success, \"Address: unable to send value, recipient may have reverted\");\r\n        } else IERC20(payToken).safeTransfer(recipient, value);\r\n    }\r\n\r\n    function _transferOutTokenWithAncesors(uint256 collectionId, address recipient, uint256 tagId, uint256[] memory units, address[] memory payTokens, uint256[] memory values) private {\r\n        address ancestors0;\r\n        address ancestors1;\r\n        (, uint256 level1, uint256 level2) = _refParams(collectionId);\r\n        {\r\n            address[] memory ancestors = relationRegistry.ancestors(collectionId, recipient, 2);\r\n            if (ancestors.length == 2) {\r\n                ancestors0 = ancestors[0];\r\n                ancestors1 = ancestors[1];\r\n            } else if (ancestors.length == 1) {\r\n                ancestors0 = ancestors[0];\r\n                level2 = 0;\r\n            } else {\r\n                level1 = 0;\r\n                level2 = 0;\r\n            }\r\n        }\r\n\r\n        uint256 tokenCount = payTokens.length;\r\n        for (uint256 index = 0; index < tokenCount; ++index) {\r\n            uint256 value = values[index];\r\n            address payToken = payTokens[index];\r\n            uint256 feeTotal;\r\n            if (level1 != 0) {\r\n                uint256 fee = (value * level1) / PERCENTAGE_BASE;\r\n                feeTotal += fee;\r\n                _transferOutToken(ancestors0, payToken, fee);\r\n                emit Referral(recipient, ancestors0, 1, payToken, fee);\r\n            }\r\n            if (level2 != 0) {\r\n                uint256 fee = (value * level2) / PERCENTAGE_BASE;\r\n                feeTotal += fee;\r\n                _transferOutToken(ancestors1, payToken, fee);\r\n                emit Referral(recipient, ancestors1, 2, payToken, fee);\r\n            }\r\n            _transferOutToken(recipient, payToken, value - feeTotal);\r\n            emit ClaimPrize(recipient, tagId, units[index], payToken, value - feeTotal);\r\n        }\r\n    }\r\n\r\n    function _transferInToken(address spender, address payToken, uint256 value) private returns (uint256) {\r\n        if (payToken == nativeCurrency) {\r\n            return msg.value;\r\n        } else {\r\n            IERC20 erc20 = IERC20(payToken);\r\n            uint256 balanceBefore = erc20.balanceOf(address(this));\r\n            IERC20(payToken).safeTransferFrom(spender, address(this), value);\r\n            return erc20.balanceOf(address(this)) - balanceBefore;\r\n        }\r\n    }\r\n\r\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract UnitagPrizeDepositMinter is PrizeDepositStorageV2 {\r\n    IUnitag public immutable unitag;\r\n    IUnitagMinter public immutable unitagMinter;\r\n\r\n    constructor(address unitag_, address unitagMinter_, address relationRegistry_) PrizeDepositStorageV2(relationRegistry_) {\r\n        unitag = IUnitag(unitag_);\r\n        unitagMinter = IUnitagMinter(unitagMinter_);\r\n    }\r\n\r\n    function prizeOf(string calldata tagFullName) public view returns (PrizePackage[] memory prizes) {\r\n        (uint256 tagId, , , ) = unitag.tagByFullName(tagFullName);\r\n        prizes = _prizeOf(tagId);\r\n    }\r\n\r\n    function prizePoolOf(string calldata collectionName, address payToken) public view returns (uint256) {\r\n        (uint256 collectionId, , , ) = unitag.collectionByName(collectionName);\r\n        return _prizePoolOf(collectionId, payToken);\r\n    }\r\n\r\n    function setRefParams(string calldata collectionName, uint256 feePercentage, uint256 level1, uint256 level2) external {\r\n        (uint256 collectionId, address owner, , ) = unitag.collectionByName(collectionName);\r\n        require(owner == msg.sender, \"Require collection owner\");\r\n        _setRefParams(msg.sender, collectionId, feePercentage, level1, level2);\r\n    }\r\n\r\n    function refParams(string calldata collectionName) public view returns (uint256 feePercentage, uint256 level1, uint256 level2) {\r\n        (uint256 collectionId, , , ) = unitag.collectionByName(collectionName);\r\n        (feePercentage, level1, level2) = _refParams(collectionId);\r\n    }\r\n\r\n    function depositPrize(string calldata collectionName, address payToken, uint256 amount) external payable {\r\n        (uint256 collectionId, , , ) = unitag.collectionByName(collectionName);\r\n        _depositPrize(msg.sender, collectionId, payToken, amount);\r\n    }\r\n\r\n    function withdrawPrize(string calldata collectionName, address payToken, uint256 amount, address recipient) external {\r\n        (uint256 collectionId, address owner, , ) = unitag.collectionByName(collectionName);\r\n        require(owner == msg.sender, \"Require collection owner\");\r\n        _withdrawPrize(recipient, collectionId, payToken, amount);\r\n    }\r\n\r\n    function setupPrize(string calldata collectionName, string calldata tagName, address payToken, uint32 supply, uint192 unitShare) external {\r\n        (, address owner, , ) = unitag.collectionByName(collectionName);\r\n        require(owner == msg.sender, \"Require collection owner\");\r\n        (uint256 tagId, , , ) = unitag.tagByName(collectionName, tagName);\r\n        _setupPrize(msg.sender, tagId, payToken, supply, unitShare);\r\n    }\r\n\r\n    function mint(address to, uint256 tagId, uint256 amount, bool bindImmediately, bytes calldata signature) external {\r\n        unitagMinter.mint(to, tagId, amount, bindImmediately, signature);\r\n        if (bindImmediately) {\r\n            (uint256 collectionId, , ) = unitag.tagById(tagId);\r\n            _claimPrize(to, collectionId, tagId, amount);\r\n        }\r\n    }\r\n\r\n    function mintBatch(address to, uint256[] calldata tagIds, uint256[] calldata amounts, bool bindImmediately, bytes calldata signature) external {\r\n        unitagMinter.mintBatch(to, tagIds, amounts, bindImmediately, signature);\r\n        if (bindImmediately) {\r\n            uint256 tagLength = tagIds.length;\r\n            if (tagLength > 0) {\r\n                (uint256 collectionId, , ) = unitag.tagById(tagIds[0]);\r\n                for (uint256 index = 0; index < tagLength; ++index) {\r\n                    _claimPrize(to, collectionId, tagIds[index], amounts[index]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function validAsCollectionOwner(uint256 collectionId, address target) private view {\r\n        (address owner, , ) = unitag.collectionById(collectionId);\r\n        require(owner == target, \"Require collection owner\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unitag_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unitagMinter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relationRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tagId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level2\",\"type\":\"uint256\"}],\"name\":\"RefParamSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tagId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"supply\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitShare\",\"type\":\"uint256\"}],\"name\":\"SetupPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tagId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"}],\"name\":\"TrimPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawPrize\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositPrize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tagId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bindImmediately\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"bindImmediately\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tagFullName\",\"type\":\"string\"}],\"name\":\"prizeOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"supply\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rest\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"unitShare\",\"type\":\"uint192\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"}],\"internalType\":\"struct PrizeDepositStorageV2.PrizePackage[]\",\"name\":\"prizes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"}],\"name\":\"prizePoolOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"}],\"name\":\"refParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relationRegistry\",\"outputs\":[{\"internalType\":\"contract IUnitagRelationRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setParent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level2\",\"type\":\"uint256\"}],\"name\":\"setRefParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tagName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"supply\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"unitShare\",\"type\":\"uint192\"}],\"name\":\"setupPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tagId\",\"type\":\"uint256\"}],\"name\":\"trimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitag\",\"outputs\":[{\"internalType\":\"contract IUnitag\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitagMinter\",\"outputs\":[{\"internalType\":\"contract IUnitagMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnitagPrizeDepositMinter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "0000000000000000000000002e22b5cabfd8cd25e620c49863dae687877e93e200000000000000000000000040f78bc961623624e8d0f93569847271bd788ebe000000000000000000000000f2ca24856f5652645f078589dbc5081dff17d80f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f77ed28ec0e3bca801611efa490154c18c4e8ea08d3789259530ca434130201b"}