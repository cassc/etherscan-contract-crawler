{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mask/DepositMerge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./DepositSystem.sol\\\";\\nimport \\\"./MergeAddrAll.sol\\\";\\nimport \\\"./IMerge.sol\\\";\\n\\n\\ncontract DepositMerge is Initializable,DepositSystem,MergeAddrAll {\\n\\n    mapping(address => bool) private  owners;\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n  * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owners[msg.sender], \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    function setOwner(address owner,bool auth) public onlyOwner {\\n        owners[owner] = auth;\\n    }\\n\\n    function isOwner(address owner) public view returns (bool) {\\n        return owners[owner];\\n    }\\n\\n    modifier onlyRegister() {\\n        require(\\n            IMerge(sysAddrs.levelAddr).isRegister(msg.sender),\\n            \\\"The address is not registered\\\"\\n        );\\n        _;\\n    }\\n\\n    uint private unlocked;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"DepositPeople: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    struct RewardInfo {\\n        uint256 levelAmount;\\n        uint256 refAmount;\\n        uint256 staticAmount;\\n        uint256 topDayAmount;\\n        uint256 topWeekAmount;\\n        uint256 nodeAmount;\\n        uint256 mgAmount;\\n    }\\n    mapping(address => address[]) private inviteAddress;\\n\\n    function initialize(\\n        address owner_\\n    ) public initializer {\\n        unlocked = 1;\\n        owners[owner_] = true;\\n\\n        sys.startTimes = block.timestamp;\\n        sys.amountMax = ~uint256(0);\\n        sys.xPower = 200;\\n\\n        sysPercents.push(20);//level\\n        sysPercents.push(16);//refer\\n        sysPercents.push(43);//static\\n        sysPercents.push(10);//node\\n        sysPercents.push(2);//day\\n        sysPercents.push(2);//week\\n        sysPercents.push(2);//mgSwap\\n\\n        sysPercents.push(2);//dev\\n        sysPercents.push(3);//com\\n    }\\n\\n\\n    function adminSetSysLevelPercent(uint256[] memory lvPercent_) external onlyOwner {\\n        IMerge(sysAddrs.levelAddr).setSysLevelPercents(lvPercent_);\\n    }\\n    function adminSetRefPercent(uint256[] memory perc_) external onlyOwner {\\n        IMerge(sysAddrs.referAddr).setRefPercents(perc_);\\n    }\\n    function adminSetSysPercent(uint256[] memory sysPercent_) external onlyOwner {\\n        require(sysPercent_.length == 9,\\\"sysPercent_ length error\\\");\\n        for (uint i=0; i<sysPercent_.length; i++) {\\n            sysPercents[i] = sysPercent_[i];\\n        }\\n    }\\n    function adminSetSysX(uint256 xPower) external onlyOwner {\\n        sys.xPower = xPower;\\n        IMerge(sysAddrs.levelAddr).setXPower(xPower);\\n    }\\n    function adminSetStaticX(uint256 sPower) external onlyOwner {\\n        IMerge(sysAddrs.staticAddr).setSysSPower(sPower);\\n    }\\n    function adminSetMaxDeposit(uint256 max) external onlyOwner {\\n        sys.amountMax = max;\\n    }\\n    function adminSetNodeUser(address[] memory addrs) external onlyOwner {\\n        IMerge(sysAddrs.nodeAddr).setNodeUser(addrs);\\n    }\\n    function adminRemoveNodeUser(address[] memory addrs) external onlyOwner {\\n        IMerge(sysAddrs.nodeAddr).removeNodeUser(addrs);\\n    }\\n    function adminSetLevelUpAmount(uint256 lv, uint256 amount) external onlyOwner {\\n        IMerge(sysAddrs.levelAddr).setLevelUpAmount(lv,amount);\\n    }\\n    function adminSetAddList(address addr, bool isL) external onlyOwner{\\n        IMerge(sysAddrs.mgAddr).addList(addr,isL);\\n    }\\n\\n    function register(address ref) external {\\n        IMerge(sysAddrs.levelAddr).register(msg.sender,ref);\\n        sys.totalRegister += 1;\\n        inviteAddress[ref].push(msg.sender);\\n    }\\n\\n    function deposit(uint256 amount) external onlyRegister {\\n        require(\\n            amount >= minDeposit && amount <= sys.amountMax,\\n            \\\"The amount must be greater than 30\\\"\\n        );\\n        sys.totalAmount += amount;\\n        sys.totalAmountX += amount * sys.xPower / xPowerBase;\\n        uint256 hisDeposit = IMerge(sysAddrs.levelAddr).getUser(msg.sender).hisDeposit;\\n        if (hisDeposit == 0) {\\n            sys.totalDepositUsers++;\\n        }\\n        _depositThis(msg.sender,amount);\\n    }\\n\\n    function _depositThis(address addr,uint256 amount) private {\\n        SysAddrs memory addrs = sysAddrs;\\n\\n        IERC20 mask = IERC20(addrs.mask);\\n\\n\\n        uint256 hisX = IMerge(sysAddrs.levelAddr).getUser(addr).hisDepositX;\\n\\n        for (uint i=0; i < contractAddrs.length; i++) {\\n            uint256 amt = amount * sysPercents[i] / percentBase;\\n            mask.transferFrom(addr,contractAddrs[i],amt);\\n            IMerge(contractAddrs[i]).updatePool(addr,amt,amount,hisX,sys.totalAmount, sys.totalAmountX);\\n        }\\n\\n        mask.transferFrom(addr, devAddr, amount * sysPercents[7] / percentBase);\\n        mask.transferFrom(addr, comAddr, amount * sysPercents[8] / percentBase);\\n    }\\n\\n    function withdrawReward(address contractAddr) external lock {\\n        uint256 hisDepositX = IMerge(sysAddrs.levelAddr).getUser(msg.sender).hisDepositX;\\n        uint256 x = IMerge(contractAddr).withdraw(msg.sender,hisDepositX);\\n        if (x == hisDepositX) {\\n            return;\\n        }\\n        IMerge(sysAddrs.levelAddr).updateHisDepositX(msg.sender,x);\\n        IMerge(sysAddrs.staticAddr).updateStaticUserHisX(msg.sender,x,sys.totalAmount,sys.totalAmountX);\\n        sys.totalAmountX -= hisDepositX - x;\\n        if (x != 0) {\\n            return;\\n        }\\n        _removeAddr(msg.sender);\\n    }\\n\\n    function _removeAddr(address addr) private {\\n        IMerge(sysAddrs.staticAddr).removeAddr(addr,sys.totalAmount,sys.totalAmountX);\\n        IMerge(sysAddrs.topDayAddr).removeAddr(addr,sys.totalAmount,sys.totalAmountX);\\n        IMerge(sysAddrs.topWeekAddr).removeAddr(addr,sys.totalAmount,sys.totalAmountX);\\n    }\\n\\n    function pendingReward(address addr) external view returns(RewardInfo memory) {\\n        SysAddrs memory addrs = sysAddrs;\\n        RewardInfo memory ri;\\n        ri.refAmount = IMerge(addrs.referAddr).pendingReward(addr);\\n        ri.levelAmount = IMerge(addrs.levelAddr).pendingReward(addr);\\n        ri.staticAmount = IMerge(addrs.staticAddr).pendingReward(addr,sys.totalAmount,sys.totalAmountX);\\n        ri.topDayAmount = IMerge(addrs.topDayAddr).pendingReward(addr);\\n        ri.topWeekAmount = IMerge(addrs.topWeekAddr).pendingReward(addr);\\n        ri.mgAmount = IMerge(addrs.mgSwapAddr).pendingReward(addr);\\n        ri.nodeAmount = IMerge(addrs.nodeAddr).pendingReward(addr);\\n        return ri;\\n    }\\n\\n    function getUser(address addr) external view returns(IMerge.User memory user) {\\n        user = IMerge(sysAddrs.levelAddr).getUser(addr);\\n        user.refCount = inviteAddress[addr].length;\\n        return user;\\n    }\\n\\n    function getPoolInfo() external view returns(IMerge.PoolInfo[] memory) {\\n        SysAddrs memory addrs = sysAddrs;\\n        IMerge.PoolInfo[] memory pi = new IMerge.PoolInfo[](7);\\n        (uint256 nextTime, uint256 nextBalance) = IMerge(addrs.referAddr).getNextBalance();\\n        pi[0] = IMerge.PoolInfo(addrs.referAddr,\\\"ref\\\",nextBalance,nextTime);\\n\\n        (nextTime, nextBalance) = IMerge(addrs.levelAddr).getNextBalance();\\n        pi[1] = IMerge.PoolInfo(addrs.referAddr,\\\"level\\\",nextBalance,nextTime);\\n\\n        (nextTime, nextBalance) = IMerge(addrs.staticAddr).getNextBalance();\\n        pi[2] = IMerge.PoolInfo(addrs.referAddr,\\\"static\\\",nextBalance,nextTime);\\n\\n        (nextTime, nextBalance) = IMerge(addrs.topDayAddr).getNextBalance();\\n        pi[3] = IMerge.PoolInfo(addrs.referAddr,\\\"topDay\\\",nextBalance,nextTime);\\n\\n        (nextTime, nextBalance) = IMerge(addrs.topWeekAddr).getNextBalance();\\n        pi[4] = IMerge.PoolInfo(addrs.referAddr,\\\"topWeek\\\",nextBalance,nextTime);\\n\\n        (nextTime, nextBalance) = IMerge(addrs.mgSwapAddr).getNextBalance();\\n        pi[5] = IMerge.PoolInfo(addrs.referAddr,\\\"merge\\\",nextBalance,nextTime);\\n\\n        (nextTime, nextBalance) = IMerge(addrs.nodeAddr).getNextBalance();\\n        pi[6] = IMerge.PoolInfo(addrs.referAddr,\\\"node\\\",nextBalance,nextTime);\\n\\n        return pi;\\n    }\\n\\n    function getLevelPoolInfo() external view returns(IMerge.LevelPoolInfo[] memory) {\\n        return IMerge(sysAddrs.levelAddr).getLevelPoolInfo();\\n    }\\n\\n    function getInviteAddress(address addr) external view returns(IMerge.User[] memory) {\\n        address[] memory  addrs = inviteAddress[addr];\\n        IMerge.User[] memory userPers = new IMerge.User[](addrs.length);\\n        for (uint i=0; i<addrs.length; i++) {\\n            userPers[i] = IMerge(sysAddrs.levelAddr).getUser(addrs[i]);\\n        }\\n        return userPers;\\n    }\\n\\n    function getPoolList(address contractAddr) external view returns(IMerge.PoolUser[] memory) {\\n        return IMerge(contractAddr).getPoolList();\\n    }\\n\\n    function getSysLevelPercent() external view returns (uint256[] memory) {\\n        return IMerge(sysAddrs.levelAddr).getSysLevelPercent();\\n    }\\n    function getLevelUpAmount() external view returns(uint256[] memory) {\\n        return IMerge(sysAddrs.levelAddr).getLevelUpAmount();\\n    }\\n    function getRefPercents() external returns(uint256[] memory) {\\n        return IMerge(sysAddrs.referAddr).getRefPercents();\\n    }\\n    function getSysSPower() external returns(uint256) {\\n        return IMerge(sysAddrs.staticAddr).getSysSPower();\\n    }\\n    function getNodes() external view returns (IMerge.NodeUser[] memory) {\\n        return IMerge(sysAddrs.nodeAddr).getNodes();\\n    }\\n    function getTeam(address addr) external view returns(IMerge.UserTeam memory) {\\n        return IMerge(sysAddrs.levelAddr).getTeam(addr);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/mask/DepositSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ncontract DepositSystem {\\n\\n    uint256 internal constant daySec = 1 days;\\n    uint256 internal constant utc4 = 4 * 60 * 60;\\n\\n    address internal constant devAddr = 0xa1E0684A1Cc2237b36d372c0959D8B3b81dd3884;\\n\\n    address internal constant comAddr = 0x318B12Cb488A5065C810Dd7Cf0B19e4559378b83;\\n\\n    uint256 internal constant minDeposit = 30e18;\\n\\n\\n    uint256 internal constant percentBase = 100;\\n\\n    uint256[] internal sysPercents;\\n\\n    struct Sys {\\n        uint256 totalRegister;\\n        uint256 totalDepositUsers;\\n        uint256 totalAmount;\\n        uint256 totalAmountX;\\n        uint256 startTimes;\\n        uint256 nowTimes;\\n        uint256 lastTimes;\\n        uint256 amountMax;\\n        uint256 xPower;\\n    }\\n    uint256 internal constant xPowerBase = 100;\\n    Sys internal sys;\\n\\n    function getSysPercent() external view virtual returns (uint256[] memory) {\\n        return sysPercents;\\n    }\\n\\n    function getSys() external view virtual returns (Sys memory) {\\n        Sys memory sy = sys;\\n        sy.nowTimes = block.timestamp;\\n        return sys;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mask/MergeAddrAll.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ncontract MergeAddrAll {\\n\\n    address public constant defaultRefer = 0xA1a12F5Eb74c55F4955A396eFbFC88ed71Af2725;\\n    address public constant defaultLastRefer = 0x731F4397A4a399b0Fe231F795FA164c80dBF0849;\\n\\n    uint256 public constant servicePercent = 5;\\n    address public constant feesOn = 0x4e1F623Db32084ffCd269059f953B93D49B91083;\\n\\n    struct SysAddrs {\\n        address depositMask;\\n        address defaultAddr;\\n        address defaultLastRefer;\\n        address staticAddr;\\n        address referAddr;\\n        address levelAddr;\\n        address topDayAddr;\\n        address topWeekAddr;\\n        address mgSwapAddr;\\n        address nodeAddr;\\n        address mgAddr;\\n        address mask;\\n        address router;\\n    }\\n\\n    SysAddrs internal sysAddrs;\\n\\n    address[] internal contractAddrs;\\n\\n    function setSysAddrs(address dtMask_, address static_, address refer_,\\n        address level_, address topDay_, address topWeek_,\\n        address mgSwap_, address node_, address mg_, address mask_, address router_) external {\\n\\n        if (mask_ == address(0)) {\\n            mask_ = 0x2eD9a5C8C13b93955103B9a7C167B67Ef4d568a3;\\n        }\\n\\n        if (sysAddrs.staticAddr != address(0) ||\\n            sysAddrs.mgAddr != address(0) || sysAddrs.mask != address(0)) {\\n            return;\\n        }\\n\\n\\n\\n        sysAddrs.staticAddr = static_;\\n        sysAddrs.referAddr = refer_;\\n        sysAddrs.levelAddr = level_;\\n        sysAddrs.topDayAddr = topDay_;\\n        sysAddrs.topWeekAddr = topWeek_;\\n        sysAddrs.mgSwapAddr = mgSwap_;\\n        sysAddrs.nodeAddr = node_;\\n        sysAddrs.router = router_;\\n\\n        contractAddrs.push(level_);\\n        contractAddrs.push(refer_);\\n        contractAddrs.push(static_);\\n        contractAddrs.push(node_);\\n        contractAddrs.push(topDay_);\\n        contractAddrs.push(topWeek_);\\n        contractAddrs.push(mgSwap_);\\n\\n\\n        sysAddrs.depositMask = dtMask_;\\n        sysAddrs.mgAddr = mg_;\\n        sysAddrs.mask = mask_;\\n\\n        sysAddrs.defaultAddr = defaultRefer;\\n        sysAddrs.defaultLastRefer = defaultLastRefer;\\n    }\\n\\n    function getSysAddrs() external view returns(SysAddrs memory) {\\n        return sysAddrs;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mask/IMerge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMergeUser.sol\\\";\\n\\ninterface IMerge is IMergeUser {\\n\\n    struct PoolInfo {\\n        address contractAddr;\\n        string poolName;\\n        uint256 balance;\\n        uint256 nextTime;\\n    }\\n\\n    struct Sys {\\n        uint256 totalRegister;\\n        uint256 totalAmount;\\n        uint256 totalAmountX;\\n        address peopleAddr;\\n        uint256 startTimes;\\n        uint256 nowTimes;\\n        uint256 lastTimes;\\n        uint256 amountMax;\\n        uint256 xPower;\\n        uint256 dXPower;\\n        uint256 fees;\\n    }\\n\\n    struct LevelPoolInfo {\\n        uint256 daoCount;\\n        uint256 balance;\\n    }\\n\\n    struct PoolUser {\\n        address addr;\\n        uint256 value;\\n    }\\n\\n    struct NodeUser {\\n        address addr;\\n        uint256 balance;\\n        uint256 isNode;\\n        uint256 lv;\\n        uint256 timestamp;\\n    }\\n\\n    function getUser(address addr) external view returns (User memory);\\n    function pendingTopRewardUser(address addr) external view  returns (uint256,uint256,uint256);\\n    function register(address addr,address ref) external;\\n    function isRegister(address addr) external returns(bool);\\n\\n    function pendingRefAmount(address addr) external view returns (uint256);\\n    function updateTopAmt(address addr,uint256 dayAmt,uint256 createdTime,uint256 wekAmt,uint256 monAmt) external;\\n\\n    function updateWorldReward(address addr, uint256 amount,uint256 hisDepositX, uint256 totalAmountX) external;\\n\\n    function withdraw(address addr,uint256 hisDepositX) external returns (uint256 x);\\n\\n    function withdrawTopReward(\\n        address addr,\\n        uint256 tpIndex,\\n        uint256 hisDepositX\\n    ) external returns (uint256 x);\\n\\n    function withdrawWorld(address addr, uint256 totalAmountX) external;\\n\\n    function withdrawStaticReward(address addr, uint256 hisDepositX, uint256 totalAmount, uint256 totalAmountX) external returns (uint256 x);\\n    function removeAddr(address addr,uint256 totalAmount,uint256 totalAmountX) external;\\n\\n    function updateHisDepositX(address addr, uint256 hisDepositX) external;\\n\\n    function settleNode() external;\\n    function setNodeUser(address[] memory addrs) external;\\n    function removeNodeUser(address[] memory addrs) external;\\n    function setToAdmin(address addr) external;\\n    function getNodeUser() external view returns (address[] memory);\\n\\n    function setSysXPower(uint256 x) external;\\n    function setSysSPower(uint256 sysSPower_) external;\\n    function getNextBalance() external view returns (uint256 nextTime,uint256 nextBalance);\\n    function getNextWorldSwapBalance(uint256 totalAmountX) external view returns (uint256 nextTime,uint256 nextBalance);\\n    function getNextTopBalance(uint256 tpIndex) external view returns (uint256 nextTime,uint256 nextBalance);\\n    function swapWorldBurn(uint256 amount) external;\\n    function getNodeUserInfo() external view returns(User[] memory beforeUser, User[] memory afterUser);\\n\\n\\n    function pendingWorldReward(address addr,uint256 hisDepositX,uint256 totalAmountX) external view returns (uint256);\\n\\n    function removeWorldAddr(address addr,uint256 totalAmountX) external;\\n\\n    function getLevelPoolInfo() external view returns(LevelPoolInfo[] memory);\\n\\n    function updateStaticUserHisX(address addr,uint256 hisX, uint256 totalAmount,uint256 totalAmountX) external;\\n\\n    function updatePool(address addr, uint256 amt,uint256 amount, uint256 hisDepositX, uint256 totalAmount,uint256 totalAmountX) external;\\n    function setXPower(uint256 xPower) external;\\n    function getSysLevelPercent() external view returns (uint256[] memory);\\n    function setSysLevelPercents(uint256[] memory lvPercent_) external;\\n    function getLevelUpAmount() external view returns(uint256[] memory);\\n    function setLevelUpAmount(uint256 lv, uint256 amount) external;\\n\\n    function swapExactTokensForTokens( uint256 amountIn,uint256 amountOutMin,address[] memory path,address to,uint256 deadline ) external  returns (uint256[] memory amounts) ;\\n    function burn(uint256 amount) external;\\n    function availableAir() external view returns(uint256);\\n    function ariDrop(address to, uint256 amount) external;\\n    function setRefPercents(uint256[] memory perc_) external;\\n    function pendingReward(address addr) external view returns(uint256 amt);\\n    function pendingReward(address addr,uint256 totalAmount,uint256 totalAmountX) external view returns (uint256);\\n    function getPoolList() external view returns (PoolUser[] memory);\\n    function getWeekOtherAmount(address addr) external view returns(uint256);\\n    function getRefPercents() external returns(uint256[] memory);\\n    function getSysSPower() external returns(uint256);\\n    function getNodes() external view returns (NodeUser[] memory);\\n    function getTeam(address addr) external view returns(UserTeam memory);\\n    function addList(address addr, bool isL) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mask/IMergeUser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IMergeUser {\\n    struct User {\\n        address addr;\\n        address ref;\\n        uint256 depositCount;\\n        uint256 refCount;\\n        uint256 level;\\n        uint256 createdTime;\\n        uint256 hisDeposit;\\n        uint256 hisDepositX;\\n        uint256 totalTeamDeposit;\\n        uint256 totalLevel101Deposit;\\n        uint256 otherTeamDeposit;\\n        address maxTeamAddr;\\n        uint256 maxTeamDeposit;\\n        uint256 thisWeekAmount;\\n    }\\n\\n    struct UserWeekBeforeTotal {\\n        uint256 totalTeamDeposit;\\n        uint256 maxTeamDeposit;\\n        uint256 timestamp;\\n    }\\n\\n    struct UserTeam {\\n        address addr;\\n        uint256 totalTeamCountRef;\\n        uint256 totalTeamCount;\\n        uint256 maxTeamCountRef;\\n        uint256 maxTeamCount;\\n        uint256 otherTeamCountRef;\\n        uint256 otherTeamCount;\\n        uint256 total101CountRef;\\n        uint256 total101Count;\\n    }\\n\\n    function getUser(address addr) external view returns(User memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@quant-finance/=node_modules/@quant-finance/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"adminRemoveNodeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isL\",\"type\":\"bool\"}],\"name\":\"adminSetAddList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminSetLevelUpAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"adminSetMaxDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"adminSetNodeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"perc_\",\"type\":\"uint256[]\"}],\"name\":\"adminSetRefPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sPower\",\"type\":\"uint256\"}],\"name\":\"adminSetStaticX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lvPercent_\",\"type\":\"uint256[]\"}],\"name\":\"adminSetSysLevelPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sysPercent_\",\"type\":\"uint256[]\"}],\"name\":\"adminSetSysPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xPower\",\"type\":\"uint256\"}],\"name\":\"adminSetSysX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLastRefer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRefer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesOn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInviteAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hisDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hisDepositX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTeamDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLevel101Deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherTeamDeposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maxTeamAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTeamDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thisWeekAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IMergeUser.User[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLevelPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"daoCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IMerge.LevelPoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLevelUpAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IMerge.NodeUser[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IMerge.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"getPoolList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IMerge.PoolUser[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRefPercents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSys\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalRegister\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDepositUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nowTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xPower\",\"type\":\"uint256\"}],\"internalType\":\"struct DepositSystem.Sys\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSysAddrs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositMask\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultLastRefer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staticAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"levelAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"topDayAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"topWeekAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mgSwapAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mgAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mask\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"internalType\":\"struct MergeAddrAll.SysAddrs\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSysLevelPercent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSysPercent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSysSPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTeam\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTeamCountRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTeamCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTeamCountRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTeamCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherTeamCountRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherTeamCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total101CountRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total101Count\",\"type\":\"uint256\"}],\"internalType\":\"struct IMergeUser.UserTeam\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hisDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hisDepositX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTeamDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLevel101Deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherTeamDeposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maxTeamAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTeamDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thisWeekAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IMergeUser.User\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"levelAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staticAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topDayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topWeekAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mgAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DepositMerge.RewardInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"servicePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"auth\",\"type\":\"bool\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dtMask_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"static_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"level_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"topDay_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"topWeek_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mgSwap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"node_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mg_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mask_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"setSysAddrs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DepositMerge", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}