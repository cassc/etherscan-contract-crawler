{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IBEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Mora is Ownable {\r\n    uint256 public nativeFees = 100;\r\n    uint256 public tokenFees = 1;\r\n    uint256 public otherTokenFees = 10;\r\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    function setNativeFees(uint256 _taxFees) external onlyOwner {\r\n        require(_taxFees < 5000, \"Max fees\");\r\n        nativeFees = _taxFees;\r\n    }\r\n\r\n    function setTokenFees(uint256 _taxFees) external onlyOwner {\r\n        tokenFees = _taxFees;\r\n    }\r\n\r\n    function setOtherTokenFees(uint256 _taxFees) external onlyOwner {\r\n        otherTokenFees = _taxFees;\r\n    }\r\n\r\n    function withdraw() external onlyOwner returns (bool) {\r\n        require(getBnbBalance() > 0, \"Insufficient contract balances\");\r\n        (bool success, ) = owner().call{value: getBnbBalance()}(\"\");\r\n        require(success, \"BNB Payment failed\");\r\n        return success;\r\n    }\r\n\r\n    function withdrawTokens(address _token) external onlyOwner returns (bool) {\r\n        require(getTokenBalance(_token) > 0, \"Insufficient contract balances\");\r\n        bool success = tokenInstance(_token).transfer(\r\n            owner(),\r\n            getTokenBalance(_token)\r\n        );\r\n        require(success, \"USDT Payment failed\");\r\n        return success;\r\n    }\r\n\r\n    function sendValue(address recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Low balance\");\r\n        (bool success, ) = payable(recipient).call{value: amount}(\"\");\r\n        require(success, \"BNB Payment failed\");\r\n    }\r\n\r\n    function transactionFees(address _receipient, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        sendValue(_receipient, amount);\r\n    }\r\n\r\n    function send(address payable recipient)\r\n        external\r\n        payable\r\n        checkParameter(recipient, msg.value)\r\n    {\r\n        uint256 tax = (msg.value * nativeFees) / 10000;\r\n        sendValue(recipient, (msg.value - tax));\r\n    }\r\n\r\n    function transfer(\r\n        address _token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external checkParameter(recipient, amount) {\r\n        require(\r\n            tokenInstance(_token).balanceOf(_msgSender()) >= amount,\r\n            \"Insufficient amount\"\r\n        );\r\n        uint256 ourAllowance = tokenInstance(_token).allowance(\r\n            _msgSender(),\r\n            address(this)\r\n        );\r\n        require(amount <= ourAllowance, \"Make sure to add enough allowance\");\r\n        if (_token != usdt) {\r\n            tokenFees = otherTokenFees;\r\n        }\r\n        uint256 decimal = tokenInstance(_token).decimals();\r\n        uint256 taxAmount = tokenFees * 10**decimal;\r\n        tokenInstance(_token).transferFrom(\r\n            _msgSender(),\r\n            recipient,\r\n            amount - taxAmount\r\n        );\r\n        if (tokenFees > 0)\r\n            tokenInstance(_token).transferFrom(\r\n                _msgSender(),\r\n                address(this),\r\n                taxAmount\r\n            );\r\n    }\r\n\r\n    modifier checkParameter(address _address, uint256 amount) {\r\n        require(_address != address(0), \"trnasfer to the zero address\");\r\n        require(amount > 0, \"Invalid amount\");\r\n        _;\r\n    }\r\n\r\n    function getBnbBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getTokenBalance(address _token) public view returns (uint256) {\r\n        return tokenInstance(_token).balanceOf(address(this));\r\n    }\r\n\r\n    function isContract(address _addr) public view returns (bool iscontract) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    function tokenInstance(address _token) private view returns (IBEP20) {\r\n        require(isContract(_token), \"Invalid token Address\");\r\n        return IBEP20(_token);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBnbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"iscontract\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherTokenFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxFees\",\"type\":\"uint256\"}],\"name\":\"setNativeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxFees\",\"type\":\"uint256\"}],\"name\":\"setOtherTokenFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxFees\",\"type\":\"uint256\"}],\"name\":\"setTokenFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transactionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Mora", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9858899b323505788b71a29eb30dde6cec6836d22363a02bab54eeb263872683"}