{"SourceCode": "pragma solidity ^0.6.0;\r\n// SPDX-License-Identifier: Unlicensed\r\n    library SafeMath {//konwnsec//IERC20 \u63a5\u53e3\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (a == 0) {\r\n                return 0; \r\n            }\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c; \r\n        }\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n            uint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return c; \r\n        }\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            assert(b <= a);\r\n            return a - b; \r\n        }\r\n\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            assert(c >= a);\r\n            return c; \r\n        }\r\n    }\r\n\r\n    interface Erc20Token {//konwnsec//ERC20 \u63a5\u53e3\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address _who) external view returns (uint256);\r\n        function transfer(address _to, uint256 _value) external;\r\n        function allowance(address _owner, address _spender) external view returns (uint256);\r\n        function transferFrom(address _from, address _to, uint256 _value) external;\r\n        function approve(address _spender, uint256 _value) external; \r\n        function burnFrom(address _from, uint256 _value) external; \r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n \r\n// \u57fa\u7c7b\u5408\u7ea6\r\n    contract Base {\r\n        using SafeMath for uint;\r\n        Erc20Token constant internal USDT  = Erc20Token(0x55d398326f99059fF775485246999027B3197955); \r\n        Erc20Token constant internal EPT   = Erc20Token(0xCDAbD94A40e25E80Cd4CE1D73C8f93e368BD1069); \r\n        Erc20Token constant internal ARR   = Erc20Token(0xb37b866871882124C3E7E301d936C29089c43987); \r\n \r\n\r\n\r\n        uint256 EPTRate  = 1000;\r\n        uint256 ARRRate  = 1000;\r\n        uint256 ATTRate  = 1000;\r\n\r\n \r\n        uint256 authenticationO   = 0;\r\n        uint256 authenticationP   = 0;\r\n        uint256 authenticationC   = 1;\r\n        uint256 dayMax   = 10000000000000000000000000000000000000;\r\n        uint256 dayAll   = 0;\r\n        uint256 times   = 0;\r\n\r\n        address  public  _owner;\r\n        address  public Operator;\r\n        bool  public Open;\r\n\r\n\r\n    function setEPTRate (uint256 newRate,uint256 tokenType) public onlyOperator() onlyOpen()  {\r\n        if(tokenType == 0){\r\n            EPTRate =newRate;\r\n        }\r\n        else  if(tokenType == 1){\r\n            ARRRate =newRate;\r\n        }\r\n        else if(tokenType == 2){\r\n            ATTRate =newRate;\r\n        }\r\n    }\r\n\r\n    modifier onlyOpen() {\r\n        require(Open, \"_owner Open\"); _;\r\n    }\r\n\r\n    modifier onlyauthentication() {\r\n        require(authenticationC == authenticationO);\r\n        require(authenticationC == authenticationP);_;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Permission denied\"); _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == Operator, \"Permission denied\"); _;\r\n    }\r\n    modifier isZeroAddr(address addr) {\r\n        require(addr != address(0), \"Cannot b'e a zero address\"); _; \r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner onlyauthentication {\r\n        require(newOwner != address(0));\r\n         authenticationC = authenticationC.add(1);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function setDayMax(uint256 Quantity) public onlyOwner onlyauthentication {\r\n        authenticationC = authenticationC.add(1);\r\n        dayMax = Quantity;\r\n    }\r\n\r\n\r\n    \r\n\r\n    function setAuthenticationP() public onlyOperator {\r\n        authenticationP = authenticationC;\r\n    }\r\n\r\n    function setAuthenticationO() public onlyOwner {\r\n        authenticationO = authenticationC;\r\n    }\r\n\r\n\r\n     function setOpenOrClose() public onlyOwner {\r\n        Open = !Open;\r\n    }\r\n\r\n\r\n    function transferOperatorship(address newOperator) public onlyOperator onlyauthentication {\r\n        require(newOperator != address(0));\r\n        authenticationC = authenticationC.add(1);\r\n        Operator = newOperator;\r\n    }\r\n\r\n \r\n\r\n  \r\n    receive() external payable {}  \r\n}\r\n\r\ncontract jr is Base {\r\n \r\n \r\n    constructor()\r\n    public {\r\n        _owner = msg.sender; \r\n        Operator = msg.sender; \r\n    }\r\n\r\n     function Recharge(uint256 Quantity,uint256 tokenType) public   {\r\n          if(tokenType == 0){\r\n            EPT.transferFrom(address(msg.sender), address(this), Quantity);\r\n         }\r\n        else if(tokenType == 1){\r\n            ARR.transferFrom(address(msg.sender), address(this), Quantity);\r\n         }\r\n        else  if(tokenType == 2){\r\n            USDT.transferFrom(address(msg.sender), address(this), Quantity);\r\n         }\r\n    }\r\n\r\n     function withdrawal(address Addrs,uint256 Quantity,uint256 tokenType) public onlyOperator() onlyOpen(){\r\n        if(times<=block.timestamp){\r\n            times = block.timestamp.add(86400);\r\n            dayAll = 0;\r\n        }\r\n        dayAll = dayAll.add(Quantity);\r\n        require(dayAll <= dayMax, \"dayMax\");\r\n          if(tokenType == 0){\r\n            EPT.transfer(Addrs, Quantity);\r\n         }\r\n        else if(tokenType == 1){\r\n            ARR.transfer(Addrs, Quantity);\r\n         }\r\n        else     if(tokenType == 2){\r\n            USDT.transfer(Addrs, Quantity);\r\n         }\r\n    }\r\n\r\n    function withdrawalbatch(address[] calldata  Addrs,uint256[] calldata Quantity,uint256 tokenType) public onlyOperator() onlyOpen(){\r\n        if(times<=block.timestamp){\r\n            times = block.timestamp.add(86400);\r\n            dayAll = 0;\r\n        }\r\n        for (uint256 i = 0; i < Addrs.length; i++) {\r\n            address add = Addrs[i];\r\n            uint256 Q = Quantity[i];\r\n            if (add != address(0))\r\n            {\r\n                dayAll = dayAll.add(Q);\r\n                require(dayAll <= dayMax, \"dayMax\");\r\n                if(tokenType == 0){\r\n                    EPT.transfer(add, Q);\r\n                }\r\n                else if(tokenType == 1){\r\n                    ARR.transfer(add, Q);\r\n                }\r\n                else if(tokenType == 2){\r\n                    USDT.transfer(add, Q);\r\n                }\r\n            }\r\n        }\r\n    }\r\n   \r\n    function extract(uint256 Quantity,uint256 tokenType)public  {\r\n        if(tokenType == 0){\r\n            EPT.transferFrom(address(msg.sender), address(1), Quantity.mul(EPTRate).div(1000));\r\n         }\r\n        else  if(tokenType == 1){\r\n            EPT.transferFrom(address(msg.sender), address(1), Quantity.mul(ARRRate).div(1000));\r\n         }\r\n        else if(tokenType == 2){\r\n            EPT.transferFrom(address(msg.sender), address(1), Quantity.mul(ATTRate).div(1000));\r\n         }\r\n\r\n    }\r\n \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"Recharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"extract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAuthenticationO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAuthenticationP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Quantity\",\"type\":\"uint256\"}],\"name\":\"setDayMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"setEPTRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOpenOrClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperatorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Addrs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Quantity\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"withdrawalbatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "jr", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://50ee24b4dda03bc91453f40ad4bd0017a59ba9cdfdca0ec0c451727252502429"}