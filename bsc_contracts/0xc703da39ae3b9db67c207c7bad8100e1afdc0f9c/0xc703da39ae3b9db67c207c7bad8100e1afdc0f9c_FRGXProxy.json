{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/FRGX.sol\r\n\r\n\r\npragma solidity 0.8.18;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n * \r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n * \r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     * \r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal virtual view returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     * \r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback () payable external {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive () payable external {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     * \r\n     * If overriden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {\r\n    }\r\n}\r\n\r\ninterface IForsage {\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n    }\r\n\r\n    function users(address userAddress) external view returns(uint id, address referrer, uint partnersCount);\r\n    function id1() external view returns(address);\r\n    function multisig() external view returns(address);\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns(address);\r\n}\r\n\r\ninterface IV2SwapRouter {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable;\r\n    // function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external;\r\n}\r\n\r\ninterface IV2Pool {\r\n    function mint(address to) external returns (uint liquidity);\r\n}\r\n\r\ncontract TokenStorage {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function withdraw(IERC20 token, address to, uint amount) public {\r\n        require(msg.sender == owner, \"TokenStorage: onlyOwner\");\r\n\r\n        token.transfer(to, amount);\r\n    }\r\n}\r\n\r\ncontract FRGXBasic is Ownable {\r\n    address public impl;\r\n\r\n    IForsage public forsage;\r\n    IPancakeFactory public pancakeFactory;\r\n    IV2SwapRouter public pancakeV2Router;\r\n    address public wBNB;\r\n    address public busd;\r\n    address public locker;\r\n    \r\n    mapping (address => bool) public pools;\r\n\r\n    TokenStorage public tokenStorage;\r\n\r\n    address public marketingPool;\r\n    mapping(address => bool) public blackList;\r\n\r\n    // farming block\r\n    uint public totalShares;\r\n\r\n    uint public totalReward; \r\n    uint public pointsPerShare;\r\n    mapping(address => bool) public accountsWithFId;\r\n    mapping(address => uint256) public rewardDebt;\r\n    uint public unlockTimestamp;\r\n    uint public restrictionTimestamp;\r\n\r\n    event DividendsDistributed(address account, uint sent);\r\n    event RefRewards(address indexed from, address indexed to, uint amount);\r\n}\r\n\r\ncontract FRGXProxy is Proxy, FRGXBasic {\r\n    \r\n    constructor(address _impl) {\r\n        impl = _impl;\r\n    }\r\n    \r\n    function update(address newImpl) public onlyOwner {\r\n        impl = newImpl;\r\n    }\r\n    \r\n    function _implementation() internal override view returns (address) {\r\n        return impl;\r\n    }\r\n}\r\n\r\ncontract FRGXFactory is Ownable {\r\n    FRGX impl;\r\n\r\n    function deployImpl() public onlyOwner {\r\n        impl = new FRGX();\r\n    }\r\n\r\n    function init(uint busdPoolBalance, uint unlockTimestamp) public payable onlyOwner {\r\n        \r\n        FRGXProxy proxy = new FRGXProxy(address(impl));\r\n\r\n        FRGX instance = FRGX(address(proxy));\r\n        instance.init();\r\n        \r\n        IPancakeFactory pancakeFactory = instance.pancakeFactory();\r\n        IV2SwapRouter pancakeRouter = instance.pancakeV2Router();\r\n\r\n        uint balance = instance.balanceOf(address(this));\r\n        instance.approve(address(pancakeRouter), balance);\r\n\r\n        address tokenStorage = address(instance.locker());\r\n\r\n        pancakeRouter.addLiquidityETH{value: msg.value}(address(instance), balance/2, balance/2, msg.value, tokenStorage, block.timestamp + 1000);\r\n\r\n        IERC20 busd = IERC20(instance.busd());\r\n\r\n        busd.transferFrom(msg.sender, address(this), busdPoolBalance);\r\n        busd.approve(address(pancakeRouter), busdPoolBalance);\r\n\r\n        pancakeRouter.addLiquidity(address(busd), address(instance), busdPoolBalance, balance/2, busdPoolBalance, balance/2, tokenStorage, block.timestamp + 1000);\r\n\r\n        instance.changePool(pancakeFactory.getPair(instance.wBNB(), address(proxy)), true);\r\n        instance.changePool(pancakeFactory.getPair(instance.busd(), address(proxy)), true);\r\n\r\n        instance.lock(unlockTimestamp);\r\n        instance.transferOwnership(msg.sender);\r\n    }\r\n}\r\n \r\ncontract FRGX is FRGXBasic, ERC20 {\r\n    // prod\r\n    // IPancakeFactory public constant pankakeFactory = IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\r\n    // IV2SwapRouter public constant pancakeV2Router = IV2SwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    // address public constant wBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    // IForsage public forsage = IForsage(0x5acc84a3e955Bdd76467d3348077d003f00fFB97);\r\n    \r\n    // test\r\n    // IPancakeFactory public constant pankakeFactory = IPancakeFactory(0x6725F303b657a9451d8BA641348b6761A6CC7a17);\r\n    // IV2SwapRouter public constant pancakeV2Router = IV2SwapRouter(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\r\n    // address public constant wBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;\r\n    \r\n    function name() public pure override returns(string memory) {\r\n        return \"FRGX\";\r\n    } \r\n\r\n    function symbol() public pure override returns(string memory) {\r\n        return \"FRGX\";\r\n    }\r\n\r\n     constructor() ERC20(\"\", \"\") {}\r\n\r\n    function init() public onlyOwner {\r\n        pancakeFactory = IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\r\n        pancakeV2Router = IV2SwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        wBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        forsage = IForsage(0x5acc84a3e955Bdd76467d3348077d003f00fFB97);\r\n        busd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        marketingPool = 0xd633Baba8142653900fCd9AB422F1514C795f75C;\r\n        locker = 0x377d133039C19242Bc6699C17a200727257cF2fd;\r\n\r\n        _mint(msg.sender, 21000000e18);\r\n        _approve(address(this), address(pancakeV2Router), type(uint).max);\r\n        tokenStorage = new TokenStorage();\r\n    }\r\n\r\n    function lock(uint _unlockTimestamp) public onlyOwner {\r\n        unlockTimestamp = _unlockTimestamp;\r\n        restrictionTimestamp = unlockTimestamp + 30 minutes;\r\n    }\r\n\r\n    function changePool(address poolAddress, bool status) public onlyOwner {\r\n        pools[poolAddress] = status;\r\n    }\r\n\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        _spendAllowance(account, _msgSender(), amount);\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function hasFId(address account) public view returns(bool) {\r\n        (uint _id ,,) = forsage.users(account);\r\n        return (_id > 0);\r\n    }\r\n\r\n    function updateBlacklist(address[] memory accounts, bool status) public onlyOwner {\r\n        for(uint i = 0; i < accounts.length; i++) {\r\n            blackList[accounts[i]] = status;\r\n        }\r\n    }\r\n\r\n    function _checkRestriction(uint256 amount) private view returns(bool) {\r\n        if(block.timestamp > restrictionTimestamp) {\r\n            return true;\r\n        }\r\n        // 85\r\n        // 260\r\n        // 1050\r\n        // 5250\r\n        // 26250\r\n        // 78450\r\n        // 262500\r\n\r\n        uint[7] memory availableAmounts = [uint256(85e18), 260e18, 1050e18, 5250e18, 26250e18, 78450e18, 262500e18];\r\n\r\n        for(uint i = 0; i < availableAmounts.length; i++) {\r\n            if(amount / 1e15 == availableAmounts[i] / 1e15) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual override  {\r\n        require(block.timestamp >= unlockTimestamp, \"transfer temprorary locked\");\r\n        require(!blackList[from] && !blackList[to], \"blackList\");\r\n        require(tx.gasprice <= 15 gwei, \"tx.gasprice should be less or equal 15 gwei\"); \r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _distributeDividends(to);\r\n        _distributeDividends(from);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        _balances[from] = fromBalance - amount;\r\n\r\n        if(from == address(this) || to == address(this)) {\r\n            if(accountsWithFId[from]) {\r\n                totalShares-= amount;\r\n            }\r\n\r\n            _balances[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n\r\n            if(hasFId(to)) {\r\n                if(!accountsWithFId[to]) {\r\n                    totalShares+= super.balanceOf(to);\r\n                    accountsWithFId[to] = true;\r\n                    rewardDebt[to] = pointsPerShare * super.balanceOf(to) / 1e18;\r\n                } else {\r\n                    totalShares+= amount;\r\n                }\r\n            }\r\n\r\n            _updateRewardsDebt(from);\r\n            _updateRewardsDebt(to);\r\n            return;\r\n        }\r\n        \r\n        uint fee;\r\n\r\n        if(pools[from]) {\r\n            require(_checkRestriction(amount), \"amount restricted\");\r\n            if(!hasFId(to)) {\r\n                fee = amount * 6 / 100;\r\n                _balances[to]+= amount - fee;\r\n                _balances[address(this)]+= fee;\r\n                emit Transfer(from, to, amount - fee);\r\n                emit Transfer(from, address(this), fee);\r\n\r\n                totalReward+= amount*3/100;\r\n                if(totalShares > 0) {\r\n                    pointsPerShare+= amount*3/100 * 1e18 / totalShares;\r\n                }\r\n                \r\n                _distribute15(from, amount);\r\n            } else {\r\n                fee = amount * 5 / 100;\r\n                _balances[to]+= amount - fee;\r\n                _balances[address(this)]+= fee;\r\n                emit Transfer(from, to, amount - fee);\r\n                emit Transfer(from, address(this), fee);\r\n\r\n                if(!accountsWithFId[to]) {\r\n                    totalShares+= super.balanceOf(to);\r\n                    accountsWithFId[to] = true;\r\n                    rewardDebt[to] = pointsPerShare * super.balanceOf(to) / 1e18;\r\n                } else {\r\n                    totalShares+= amount - fee;\r\n                }\r\n                \r\n                _distribute10(from, to, amount);\r\n            }\r\n        } else if(pools[to]) {\r\n            require(_checkRestriction(amount), \"amount restricted\");\r\n            if(!hasFId(from)) {\r\n                fee = amount * 6 / 100;\r\n                _balances[to]+= amount - fee;\r\n                _balances[address(this)]+= fee;\r\n                emit Transfer(from, to, amount - fee);\r\n                emit Transfer(from, address(this), fee);\r\n\r\n                totalReward+= amount*3/100;\r\n                if(totalShares > 0) {\r\n                    pointsPerShare+= amount*3/100 * 1e18 / totalShares;\r\n                }\r\n                _distribute15(to, amount);\r\n            } else {\r\n                fee = amount * 5 / 100;\r\n                _balances[to]+= amount - fee;\r\n                _balances[address(this)]+= fee;\r\n                emit Transfer(from, to, amount - fee);\r\n                emit Transfer(from, address(this), fee);\r\n\r\n                if(!accountsWithFId[from]) {\r\n                    totalShares+= super.balanceOf(from);\r\n                    accountsWithFId[from] = true;\r\n                    rewardDebt[from] = pointsPerShare * super.balanceOf(from) / 1e18;\r\n                } else {\r\n                    totalShares-= amount;\r\n                }\r\n                \r\n                _distribute10(to, from, amount);\r\n            } \r\n        } else {\r\n            _balances[to]+= amount;\r\n            emit Transfer(from, to, amount);\r\n            if(accountsWithFId[from]) {\r\n                totalShares-= amount;\r\n            }\r\n            if(hasFId(to)) {\r\n                if(!accountsWithFId[to]) {\r\n                    totalShares+= super.balanceOf(to);\r\n                    accountsWithFId[to] = true;\r\n                    rewardDebt[to] = pointsPerShare * super.balanceOf(to) / 1e18;\r\n                } else {\r\n                    totalShares+= amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        _updateRewardsDebt(from);\r\n        _updateRewardsDebt(to);\r\n    }\r\n\r\n    function _distribute15(address poolAddress, uint256 amount) private {\r\n        _updateLiquidityPool(poolAddress, amount * 1 / 100);\r\n        _burn(address(this), amount * 1 / 100);\r\n        _updateMarketingPool(amount * 1 / 100);\r\n    }\r\n\r\n    function _distribute10(address poolAddress, address account, uint256 amount) private {\r\n        _updateLiquidityPool(poolAddress, amount * 5 / 1000);\r\n        _burn(address(this), amount * 5 / 1000);\r\n        _updateMarketingPool(amount * 1 / 100);\r\n        _refReward(account, amount);\r\n    }\r\n\r\n    function _refReward(address account, uint256 amount) private {\r\n        address id1 = forsage.id1();\r\n        \r\n        if(account == id1) {\r\n            _sendRefRewards(account, account, amount * 15 / 1000);\r\n            _sendRefRewards(account, account, amount * 10 / 1000);\r\n            _sendRefRewards(account, account, amount * 5 / 1000);\r\n            return;\r\n        }\r\n\r\n        (,address referrerAddress, ) = forsage.users(account);\r\n        _sendRefRewards(account, referrerAddress, amount * 15 / 1000);\r\n\r\n        if(referrerAddress == id1) {\r\n            _sendRefRewards(account, referrerAddress, amount * 10 / 1000);\r\n            _sendRefRewards(account, referrerAddress, amount * 5 / 1000);\r\n            return;\r\n        }\r\n\r\n        (,referrerAddress, ) = forsage.users(referrerAddress);\r\n        _sendRefRewards(account, referrerAddress, amount * 10 / 1000);\r\n        \r\n        if(referrerAddress == id1) {\r\n            _sendRefRewards(account, referrerAddress, amount * 5 / 1000);\r\n            return;\r\n        }\r\n\r\n        (,referrerAddress, ) = forsage.users(referrerAddress);\r\n        _sendRefRewards(account, referrerAddress, amount * 5 / 1000);\r\n    }\r\n\r\n    function _sendRefRewards(address account, address to, uint256 amount) private {\r\n        address id1 = forsage.id1();\r\n        if(to == id1) {\r\n            to = 0xD175f05906C5770E1E7fc34A57F09CD0f6CeBE10;\r\n        }\r\n        _transfer(address(this), to, amount);\r\n        emit RefRewards(account, to, amount);\r\n    }\r\n\r\n    \r\n    function _updateLiquidityPool(address callerPoolAddress, uint amount) private {\r\n        address poolAddress = pancakeFactory.getPair(wBNB, address(this));\r\n        address tokenToSwap = wBNB;\r\n        if(poolAddress == callerPoolAddress) {\r\n            poolAddress = pancakeFactory.getPair(busd, address(this));\r\n            tokenToSwap = busd;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = tokenToSwap;\r\n\r\n        pancakeV2Router.swapExactTokensForTokens(\r\n            amount / 2,\r\n            1,\r\n            path,\r\n            address(tokenStorage),\r\n            block.timestamp + 100\r\n        );\r\n\r\n        tokenStorage.withdraw(IERC20(tokenToSwap), address(this), IERC20(tokenToSwap).balanceOf(address(tokenStorage)));\r\n       \r\n        IERC20(tokenToSwap).transfer(poolAddress, IERC20(tokenToSwap).balanceOf(address(this)));\r\n        _transfer(address(this), poolAddress, amount/2);\r\n\r\n        IV2Pool(poolAddress).mint(address(this));\r\n\r\n        // lock liquidity\r\n        IERC20(poolAddress).transfer(locker, IERC20(poolAddress).balanceOf(address(this)));\r\n    }\r\n\r\n    function _updateMarketingPool(uint amount) private {\r\n        _transfer(address(this), marketingPool, amount);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return super.balanceOf(account) + cumulativeDividendsOf(account);\r\n    }\r\n\r\n    // farming block\r\n\r\n    function update(uint storedAmount) internal {\r\n        totalReward+= storedAmount;\r\n        if(totalShares > 0) {\r\n            pointsPerShare+= storedAmount * 1e18 / totalShares;\r\n        }\r\n    }\r\n\r\n    function _distributeDividends(address account) internal {\r\n        if(!accountsWithFId[account]) {\r\n            return;\r\n        }\r\n        \r\n        uint toSend = pointsPerShare * super.balanceOf(account) / 1e18 - rewardDebt[account];\r\n        if(toSend == 0) {\r\n            return;\r\n        }\r\n        rewardDebt[account]+= toSend;\r\n\r\n        _transfer(address(this), account, toSend);\r\n        emit DividendsDistributed(account, toSend);\r\n    }\r\n\r\n    function _updateRewardsDebt(address account) internal {\r\n        rewardDebt[account] = pointsPerShare * super.balanceOf(account) / 1e18;\r\n    }\r\n\r\n    function cumulativeDividendsOf(address account) public view returns (uint256) {\r\n        if(!accountsWithFId[account]) {\r\n            return 0;\r\n        }\r\n        return pointsPerShare * super.balanceOf(account) / 1e18 - rewardDebt[account];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"DividendsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefRewards\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountsWithFId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forsage\",\"outputs\":[{\"internalType\":\"contract IForsage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeFactory\",\"outputs\":[{\"internalType\":\"contract IPancakeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Router\",\"outputs\":[{\"internalType\":\"contract IV2SwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictionTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStorage\",\"outputs\":[{\"internalType\":\"contract TokenStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FRGXProxy", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ba0786cca576b8df1f7bc50bdc117f8be1f46b62", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0xba0786cca576b8df1f7bc50bdc117f8be1f46b62", "SwarmSource": "ipfs://10cf33ca597e0bd33495743b83a105d84406c64321e25e6df98312eea407a8d8"}