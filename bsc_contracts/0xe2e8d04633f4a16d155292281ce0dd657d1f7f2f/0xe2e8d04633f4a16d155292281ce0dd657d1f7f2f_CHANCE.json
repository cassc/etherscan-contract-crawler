{"SourceCode": "/* \r\n\r\nhttps://t.me/chancebsc\r\nhttps://discord.gg/gfRfy5WxSm\r\n\r\n         _____\r\n        |A .  | _____\r\n        | /.\\ ||A ^  | _____\r\n        |(_._)|| / \\ ||A _  | _____\r\n        |  |  || \\ / || ( ) ||A_ _ |\r\n        |____V||  .  ||(_'_)||( v )|\r\n               |____V||  |  || \\ / |\r\n                      |____V||  .  |\r\n                             |____V/\r\n\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"ERROR: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"ERROR: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract CHANCE is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string _name = \"CHANCE\";\r\n    string _symbol = \"CHANCE\";\r\n    uint8 constant _decimals = 0;\r\n    uint256 _totalSupply = 1000000000000;\r\n    uint256 public _maxTxAmount = (_totalSupply) / 200;\r\n    uint256 public _maxWalletSize = (_totalSupply) / 100;\r\n    uint256 public _totalProportion = _totalSupply;\r\n\r\n    mapping(address => bool) isFeeExempt;\r\n    mapping(address => bool) isTxLimitExempt;\r\n    mapping(address => uint256) public _rOwned;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n\r\n    uint256 teamFeeBuy = 0;\r\n    uint256 reflectionFeeBuy = 1;\r\n\r\n    uint256 teamFeeSell = 1;\r\n    uint256 reflectionFeeSell = 0;\r\n\r\n    uint256 feeDenominator = 100;\r\n    uint256 totalFeeBuy = teamFeeBuy + reflectionFeeBuy;\r\n    uint256 totalFeeSell = teamFeeSell + reflectionFeeSell;\r\n    address teamFeeReceiver;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    bool public tradingOpen = false;\r\n    bool public claimingFees = true;\r\n    bool alternateSwaps = true;\r\n    uint256 smallSwapThreshold = (_totalSupply * 20) / 1000;\r\n    uint256 largeSwapThreshold = (_totalSupply * 30) / 1000;\r\n    uint256 public swapThreshold = smallSwapThreshold;\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        router = IDEXRouter(ROUTER);\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        _allowances[address(this)][msg.sender] = type(uint256).max;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[address(router)] = true;\r\n        isTxLimitExempt[pair] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        teamFeeReceiver = msg.sender;\r\n        _rOwned[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function changeName(string memory newName) external onlyOwner {\r\n        _name = newName;\r\n    }\r\n\r\n    function changeSymbol(string memory newSymbol) external onlyOwner {\r\n        _symbol = newSymbol;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function allowance(\r\n        address holder,\r\n        address spender\r\n    ) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function viewFeesBuy()\r\n        external\r\n        view\r\n        returns (uint256, uint256, uint256, uint256)\r\n    {\r\n        return (teamFeeBuy, reflectionFeeBuy, totalFeeBuy, feeDenominator);\r\n    }\r\n\r\n    function viewFeesSell()\r\n        external\r\n        view\r\n        returns (uint256, uint256, uint256, uint256)\r\n    {\r\n        return (teamFeeSell, reflectionFeeSell, totalFeeSell, feeDenominator);\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\r\n                .sub(amount, \"ERROR: Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        if (\r\n            recipient != pair &&\r\n            recipient != DEAD &&\r\n            !isTxLimitExempt[recipient]\r\n        ) {\r\n            require(\r\n                balanceOf(recipient) + amount <= _maxWalletSize,\r\n                \"ERROR: Max wallet exceeded\"\r\n            );\r\n        }\r\n        if (\r\n            recipient != pair &&\r\n            recipient != DEAD &&\r\n            !isTxLimitExempt[recipient]\r\n        ) {\r\n            require(tradingOpen, \"ERROR: Trading not open yet\");\r\n        }\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n        _rOwned[sender] = _rOwned[sender].sub(\r\n            proportionAmount,\r\n            \"ERROR: Insufficient Balance\"\r\n        );\r\n        uint256 proportionReceived = shouldTakeFee(sender)\r\n            ? takeFeeInProportions(\r\n                sender == pair ? true : false,\r\n                sender,\r\n                recipient,\r\n                proportionAmount\r\n            )\r\n            : proportionAmount;\r\n        _rOwned[recipient] = _rOwned[recipient].add(proportionReceived);\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            tokenFromReflection(proportionReceived)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function tokensToProportion(uint256 tokens) public view returns (uint256) {\r\n        return tokens.mul(_totalProportion).div(_totalSupply);\r\n    }\r\n\r\n    function tokenFromReflection(\r\n        uint256 proportion\r\n    ) public view returns (uint256) {\r\n        return proportion.mul(_totalSupply).div(_totalProportion);\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n        _rOwned[sender] = _rOwned[sender].sub(\r\n            proportionAmount,\r\n            \"ERROR: Insufficient Balance\"\r\n        );\r\n        _rOwned[recipient] = _rOwned[recipient].add(proportionAmount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(\r\n            amount <= _maxTxAmount || isTxLimitExempt[sender],\r\n            \"ERROR: TX Limit Exceeded\"\r\n        );\r\n    }\r\n\r\n    function getTotalFeeBuy(bool) public view returns (uint256) {\r\n        return totalFeeBuy;\r\n    }\r\n\r\n    function getTotalFeeSell(bool) public view returns (uint256) {\r\n        return totalFeeSell;\r\n    }\r\n\r\n    function takeFeeInProportions(\r\n        bool buying,\r\n        address sender,\r\n        address receiver,\r\n        uint256 proportionAmount\r\n    ) internal returns (uint256) {\r\n        uint256 proportionFeeAmount = buying == true\r\n            ? proportionAmount.mul(getTotalFeeBuy(receiver == pair)).div(\r\n                feeDenominator\r\n            )\r\n            : proportionAmount.mul(getTotalFeeSell(receiver == pair)).div(\r\n                feeDenominator\r\n            );\r\n        uint256 proportionReflected = buying == true\r\n            ? proportionFeeAmount.mul(reflectionFeeBuy).div(totalFeeBuy)\r\n            : proportionFeeAmount.mul(reflectionFeeSell).div(totalFeeSell);\r\n        _totalProportion = _totalProportion.sub(proportionReflected);\r\n        uint256 _proportionToContract = proportionFeeAmount.sub(\r\n            proportionReflected\r\n        );\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(\r\n            _proportionToContract\r\n        );\r\n        emit Transfer(\r\n            sender,\r\n            address(this),\r\n            tokenFromReflection(_proportionToContract)\r\n        );\r\n        emit Reflect(proportionReflected, _totalProportion);\r\n        return proportionAmount.sub(proportionFeeAmount);\r\n    }\r\n\r\n    function clearStuckBalance() external onlyOwner {\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: address(this).balance,\r\n            gas: 30000\r\n        }(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function clearForeignToken(\r\n        address tokenAddress,\r\n        uint256 tokens\r\n    ) public returns (bool) {\r\n        require(isTxLimitExempt[msg.sender]);\r\n        if (tokens == 0) {\r\n            tokens = IERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function changeFees(\r\n        uint256 _reflectionFeeBuy,\r\n        uint256 _teamFeeBuy,\r\n        uint256 _feeDenominator,\r\n        uint256 _reflectionFeeSell,\r\n        uint256 _teamFeeSell\r\n    ) external onlyOwner {\r\n        reflectionFeeBuy = _reflectionFeeBuy;\r\n        teamFeeBuy = _teamFeeBuy;\r\n        totalFeeBuy = reflectionFeeBuy.add(teamFeeBuy);\r\n        reflectionFeeSell = _reflectionFeeSell;\r\n        teamFeeSell = _teamFeeSell;\r\n        totalFeeSell = reflectionFeeSell.add(teamFeeSell);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFeeBuy <= 10, \"ERROR: Cannot set buy fees above 10%\");\r\n        require(totalFeeSell <= 10, \"ERROR: Cannot set sell fees above 10%\");\r\n    }\r\n\r\n    function setMaxWalletPercent_base1000(\r\n        uint256 maxWallPercent_base1000\r\n    ) external onlyOwner {\r\n        require(\r\n            maxWallPercent_base1000 >= _totalSupply / 1000,\r\n            \"ERROR: Cannot set max wallet below .1%\"\r\n        );\r\n        _maxWalletSize = (_totalSupply * maxWallPercent_base1000) / 1000;\r\n    }\r\n\r\n    function setMaxTxPercent_base1000(\r\n        uint256 maxTXPercentage_base1000\r\n    ) external onlyOwner {\r\n        require(\r\n            maxTXPercentage_base1000 >= _totalSupply.mul(2).div(1000),\r\n            \"ERROR: Cannot set max transaction below .2%\"\r\n        );\r\n        _maxTxAmount = (_totalSupply * maxTXPercentage_base1000) / 1000;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(\r\n        address holder,\r\n        bool exempt\r\n    ) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFeeReceivers(address _teamFeeReceiver) external onlyOwner {\r\n        teamFeeReceiver = _teamFeeReceiver;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(\r\n        uint256 accuracy\r\n    ) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(\r\n        uint256 target,\r\n        uint256 accuracy\r\n    ) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    function multiAirdrop(\r\n        address from,\r\n        address[] calldata addresses,\r\n        uint256[] calldata tokens\r\n    ) external onlyOwner {\r\n        require(\r\n            addresses.length < 501,\r\n            \"ERROR: Airdrop limit is 500 addresses\"\r\n        );\r\n        require(\r\n            addresses.length == tokens.length,\r\n            \"ERROR: Mismatch between address and token count\"\r\n        );\r\n        uint256 antibot = 0;\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            antibot = antibot + tokens[i];\r\n        }\r\n        require(balanceOf(from) >= antibot, \"ERROR: Insufficient Tokens\");\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            _basicTransfer(from, addresses[i], tokens[i]);\r\n        }\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountToken);\r\n    event Reflect(uint256 amountReflected, uint256 newTotalProportion);\r\n}\r\n\r\n/* \r\n\r\n         _____\r\n        |A .  | _____\r\n        | /.\\ ||A ^  | _____\r\n        |(_._)|| / \\ ||A _  | _____\r\n        |  |  || \\ / || ( ) ||A_ _ |\r\n        |____V||  .  ||(_'_)||( v )|\r\n               |____V||  |  || \\ / |\r\n                      |____V||  .  |\r\n                             |____V/\r\n\r\nhttps://t.me/chancebsc\r\nhttps://discord.gg/gfRfy5WxSm\r\n\r\n*/", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReflected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalProportion\",\"type\":\"uint256\"}],\"name\":\"Reflect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflectionFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamFeeSell\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getTotalFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getTotalFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTXPercentage_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFeesBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFeesSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CHANCE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bfd7810b18c84795cdfe2eb851871d5c07edd2fe39378d3a3cf69c33fbd4e5d7"}