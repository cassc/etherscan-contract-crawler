{"SourceCode": "pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n \r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\npragma experimental ABIEncoderV2;\r\ncontract OnlineGameAlliance is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private blackAddress;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 100000000000* 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"OnlineGameAlliance\";\r\n    string private _symbol = \"OGA\";\r\n    uint8 private _decimals = 18;\r\n    \r\n    uint256 public _taxFee = 2; \r\n    uint256 private _previousTaxFee = _taxFee; \r\n                                   \r\n    uint256 public _liquidityFee = 2;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n\r\n    uint256 public _liquidityPoolFee = 5;\r\n    uint256 private _previousLiquidityPoolFee = _liquidityPoolFee;\r\n\r\n    uint256 public _liquidityNftFee = 1;\r\n    uint256 private _previousLiquidityNftFee = _liquidityNftFee;\r\n\r\n    uint256 public _liquidityBurnFee = 5;\r\n    uint256 private _previousLiquidityBurnFee = _liquidityBurnFee;\r\n\r\n    uint256 public _transferFee = 10;\r\n    uint256 private _previousTransferFee = _transferFee;\r\n\r\n    address public swapBurnAddr;\r\n    address public swapPoolAddr;\r\n    address public swapNFTAddr;\r\n    address public transferBurnAddr;\r\n    address private liquidityRecipient;\r\n\r\n    IUniswapV2Router02 public immutable  uniswapV2Router;\r\n    address public immutable  uniswapV2Pair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public pause = false;\r\n    \r\n    \r\n    uint256 public _maxTxAmount = 1000000000 * 10**18;\r\n    uint256 private numTokensSellToAddToLiquidity = 5000000 * 10**18;\r\n    \r\n    event swapBurn(address from,address to, uint256 amount);\r\n    event TransferEnabledUpdated(bool enabled);\r\n    event poolReward(address from,address to, uint256 amount);\r\n    event nftReward(address from,address to, uint256 amount);\r\n    event transferBurn(address from,address to, uint256 amount);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier transferPause{\r\n        require(!pause,\"Transfer Pause\");\r\n        _;\r\n    }\r\n    \r\n    constructor (\r\n        address  swapBurnAddr_,\r\n        address  swapPoolAddr_,\r\n        address  swapNFTAddr_,\r\n        address  transferBurnAddr_\r\n    ) public {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        swapBurnAddr = swapBurnAddr_;\r\n        swapPoolAddr = swapPoolAddr_;\r\n        swapNFTAddr = swapNFTAddr_;\r\n        transferBurnAddr = transferBurnAddr_;\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         // Create a pancake pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n        //exclude owner ,this contract,swapPool and swapNFTPool from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[swapPoolAddr] = true;\r\n        _isExcludedFromFee[swapNFTAddr] = true;\r\n        liquidityRecipient = owner();\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,) = _get_T_L_Values(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,) = _get_T_L_Values(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            uint256 rTransferAmount = _get_rTransferAmount(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    function excludeFromFee(address account) public onlyOwner {\r\n        require(!_isExcludedFromFee[account],\"Account is already excluded\");\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        require(_isExcludedFromFee[account],\"Account is already include\");\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    function addBlackAddress(address account) public onlyOwner {\r\n        require(!blackAddress[account],\"Account is already black\");\r\n        blackAddress[account] = true;\r\n    }\r\n\r\n    function removeBlackAddress(address account) public onlyOwner {\r\n        require(blackAddress[account],\"Account is not black\");\r\n        blackAddress[account] = false;\r\n    }\r\n\r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n        _taxFee = taxFee;\r\n    }\r\n    \r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n\r\n    function setSwapBurnFeePercent(uint256 liquidityBurnFee) external onlyOwner() {\r\n        _liquidityBurnFee = liquidityBurnFee;\r\n    }\r\n    \r\n    function setSwapPoolFeePercent(uint256 liquidityPoolFee) external onlyOwner() {\r\n        _liquidityPoolFee = liquidityPoolFee;\r\n    }\r\n    function setSwapNFTFeePercent(uint256 liquidityNftFee) external onlyOwner() {\r\n        _liquidityNftFee = liquidityNftFee;\r\n    }\r\n    \r\n    function setTransferBurnFeePercent(uint256 transferFee) external onlyOwner() {\r\n        _transferFee = transferFee;\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\r\n            10**2\r\n        );\r\n    }\r\n    function setSwapAndLiquifyMinBalance(uint256 minTokenSwapBalance_) external onlyOwner() {\r\n        numTokensSellToAddToLiquidity = minTokenSwapBalance_;\r\n        emit MinTokensBeforeSwapUpdated( minTokenSwapBalance_);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setTransferEnabled(bool _enabled) public onlyOwner {\r\n        pause = _enabled;\r\n        emit TransferEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setSwapBurnAddr(address swapBurnAddr_) external onlyOwner() {\r\n        swapBurnAddr = swapBurnAddr_;\r\n    }\r\n\r\n    function setSwapPoolAddr(address swapPoolAddr_) external onlyOwner() {\r\n        swapPoolAddr = swapPoolAddr_;\r\n    }\r\n\r\n    function setSwapNFTAddr(address swapNFTAddr_) external onlyOwner() {\r\n        swapNFTAddr = swapNFTAddr_;\r\n    }\r\n\r\n    function setTransferBurnAddr(address transferBurnAddr_) external onlyOwner() {\r\n        transferBurnAddr = transferBurnAddr_;\r\n    }\r\n\r\n    function setliquidityRecipient(address liquidityRecipient_) external onlyOwner() {\r\n        liquidityRecipient = liquidityRecipient_;\r\n    }\r\n\r\n    function rebackFund(address token, address rebacAccount, uint256 rebackAmount) external onlyOwner() {\r\n        require(token != address(this));\r\n        IERC20(token).transfer(rebacAccount,rebackAmount);\r\n    }\r\n\r\n\r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    struct TvalueData{\r\n        uint256 _tLiquidityBurnFee;\r\n        uint256 _tLiquidityPoolFee;\r\n        uint256 _tLiquidityFee;\r\n        uint256 _tTaxFee;\r\n        uint256 _tLiquidityNftFee;\r\n        uint256 _tTransferFee;\r\n        uint256 _tTransferAmount;\r\n    }\r\n    function _getTValues(uint256 tAmount) private view returns (TvalueData memory){\r\n        uint256 tLiquidityBurnFee = calculateLiquidityBurnFee(tAmount);\r\n        uint256 tLiquidityPoolFee = calculateLiquidityPoolFee(tAmount);\r\n        uint256 tLiquidityFee = calculateLiquidityFee(tAmount);\r\n        uint256 tTaxFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidityNftFee = calculateLiquidityNftFee(tAmount);\r\n        uint256 tTransferFee = calculateTransferFee(tAmount);\r\n        uint256 bal = tLiquidityBurnFee.add(tLiquidityPoolFee).add(tLiquidityFee).add(tTaxFee);\r\n        uint256 tTransferAmount = tAmount.sub(bal).sub(tLiquidityNftFee).sub(tTransferFee);\r\n        TvalueData memory tdata = TvalueData(\r\n            tLiquidityBurnFee,\r\n            tLiquidityPoolFee,\r\n            tLiquidityFee,     \r\n            tTaxFee,           \r\n            tLiquidityNftFee, \r\n            tTransferFee,     \r\n            tTransferAmount  \r\n        );\r\n        return tdata;\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _get_T_L_Values(tAmount);\r\n        BPNValue memory data =_get_B_P_N_Values(tAmount);\r\n        (uint256 rTransferBurnAmount, uint256 tTransferBurnAmount) =  _get_TB_Values(tAmount);\r\n        uint256 rTransferAmount = _get_rTransferAmount(tAmount);\r\n        \r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        \r\n        _tOwned[swapBurnAddr] = _tOwned[swapBurnAddr].add(data.tLiquidityBurnFee);\r\n        _rOwned[swapBurnAddr] = _rOwned[swapBurnAddr].add(data.rSwapBurnFee);\r\n        \r\n        _tOwned[swapPoolAddr] = _tOwned[swapPoolAddr].add(data.tLiquidityPoolFee);\r\n        _rOwned[swapPoolAddr] = _rOwned[swapPoolAddr].add(data.rSwapPoolFee);\r\n        \r\n        _tOwned[swapNFTAddr] = _tOwned[swapNFTAddr].add(data.tLiquidityNftFee);\r\n        _rOwned[swapNFTAddr] = _rOwned[swapNFTAddr].add(data.rSwapNFTFee);\r\n        \r\n        _tOwned[transferBurnAddr] = _tOwned[transferBurnAddr].add(tTransferBurnAmount);\r\n        _rOwned[transferBurnAddr] = _rOwned[transferBurnAddr].add(rTransferBurnAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if(data.tLiquidityBurnFee != 0 ){emit Transfer(sender, swapBurnAddr, data.tLiquidityBurnFee);}\r\n        if(data.tLiquidityPoolFee != 0 ){emit Transfer(sender, swapPoolAddr, data.tLiquidityPoolFee);}\r\n        if(data.tLiquidityNftFee != 0 ){emit Transfer(sender, swapNFTAddr, data.tLiquidityNftFee);}\r\n        if(tTransferBurnAmount != 0 ){emit Transfer(sender, transferBurnAddr, tTransferBurnAmount);}\r\n    }\r\n\r\n    \r\n    function _getTaxAndLiquidityRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 r_T_L_TransferAmount = rFee.add(rLiquidity);\r\n        return (rAmount, r_T_L_TransferAmount, rFee); //\r\n    }\r\n    function _get_T_L_Values(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        TvalueData memory tData = _getTValues(tAmount);\r\n        \r\n        (uint256 rAmount, , uint256 rFee) = _getTaxAndLiquidityRValues(tAmount, tData._tTaxFee, tData._tLiquidityFee, _getRate());\r\n        return (rAmount, rFee, tData._tTransferAmount, tData._tTaxFee, tData._tLiquidityFee);\r\n    }\r\n\r\n   \r\n    struct BPNValue{\r\n        uint256 rSwapBurnFee;\r\n        uint256 rSwapPoolFee;\r\n        uint256 rSwapNFTFee;\r\n        uint256 tLiquidityBurnFee;\r\n        uint256 tLiquidityPoolFee;\r\n        uint256 tLiquidityNftFee;\r\n    }\r\n    function _getBurnAndPoolAndNFTRValues(uint256 tSwapBurnFee, uint256 tSwapPoolFee, uint256 tSwapNFTFee, uint256 currentRate) private pure returns (uint256, uint256, uint256,uint256) {\r\n        uint256 rSwapBurnFee = tSwapBurnFee.mul(currentRate);\r\n        uint256 rSwapPoolFee = tSwapPoolFee.mul(currentRate);\r\n        uint256 rSwapNFTFee = tSwapNFTFee.mul(currentRate);\r\n        uint256 r_B_P_N_TransferAmount = rSwapBurnFee.add(rSwapPoolFee).add(rSwapNFTFee);\r\n        return (rSwapBurnFee,rSwapPoolFee,rSwapNFTFee,r_B_P_N_TransferAmount); //\r\n    }\r\n    //clear deep buger\r\n    function _get_B_P_N_Values(uint256 tAmount) private view returns (BPNValue memory) {\r\n        TvalueData memory tData = _getTValues(tAmount);\r\n        \r\n        (uint256 rSwapBurnFee,uint256 rSwapPoolFee , uint256 rSwapNFTFee,) = _getBurnAndPoolAndNFTRValues(tData._tLiquidityBurnFee, tData._tLiquidityPoolFee,tData._tLiquidityNftFee, _getRate());\r\n        \r\n        BPNValue memory adata = BPNValue(\r\n            rSwapBurnFee, \r\n            rSwapPoolFee, \r\n            rSwapNFTFee,\r\n            tData._tLiquidityBurnFee, \r\n            tData._tLiquidityPoolFee,\r\n            tData._tLiquidityNftFee\r\n\r\n        );\r\n        return adata;\r\n    }\r\n    \r\n    function _getTransferBurnRValues(uint256 tTransferBurnFee, uint256 currentRate) private pure returns (uint256) {\r\n        uint256 rTransferBurnFee = tTransferBurnFee.mul(currentRate);\r\n        return (rTransferBurnFee); //\r\n    }\r\n    function _get_TB_Values(uint256 tAmount) private view returns (uint256, uint256) {\r\n        TvalueData memory tData = _getTValues(tAmount);\r\n        uint256 rTransferBurnFee = _getTransferBurnRValues(tData._tTransferFee, _getRate());\r\n        return (rTransferBurnFee, tData._tTransferFee);\r\n    }\r\n    \r\n    function _get_rTransferAmount(uint256 tAmount) private view returns(uint256){\r\n        TvalueData memory tData = _getTValues(tAmount);\r\n        uint256 rate = _getRate();\r\n        (uint256 rAmount,uint256 r_T_L_TransferAmount,) = _getTaxAndLiquidityRValues(tAmount, tData._tTaxFee, tData._tLiquidityFee, rate);\r\n        (,,,uint256 r_B_P_N_TransferAmount) = _getBurnAndPoolAndNFTRValues(tData._tLiquidityBurnFee, tData._tLiquidityPoolFee,tData._tLiquidityNftFee,rate);\r\n        uint256 rTransferBurnFee = _getTransferBurnRValues(tData._tTransferFee, rate);\r\n        uint256 rTransferAmount = rAmount.sub(r_T_L_TransferAmount).sub(r_B_P_N_TransferAmount).sub(rTransferBurnFee);\r\n        return rTransferAmount;\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n    \r\n    function calculateLiquidityBurnFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityBurnFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function calculateLiquidityPoolFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityPoolFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function calculateLiquidityNftFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityNftFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function calculateTransferFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_transferFee).div(\r\n            10**2\r\n        );\r\n    }\r\n    \r\n    function removeSwapFee() private {\r\n        if(\r\n            _liquidityBurnFee == 0      \r\n            && _liquidityPoolFee == 0   \r\n            && _liquidityFee == 0       \r\n            && _taxFee == 0             \r\n            && _liquidityNftFee == 0    \r\n        ) return;\r\n        \r\n        _previousLiquidityBurnFee = _liquidityBurnFee;\r\n        _previousLiquidityPoolFee = _liquidityPoolFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityNftFee = _liquidityNftFee;\r\n        \r\n        _liquidityBurnFee = 0;\r\n        _liquidityPoolFee = 0;\r\n        _liquidityFee = 0;\r\n        _taxFee = 0;\r\n        _liquidityNftFee = 0;\r\n    }\r\n    \r\n    function restoreSwapFee() private {\r\n        _liquidityBurnFee = _previousLiquidityBurnFee;\r\n        _liquidityPoolFee = _previousLiquidityPoolFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityNftFee = _previousLiquidityNftFee;\r\n    }\r\n\r\n    function removeTransferFee() private {\r\n        if(_transferFee == 0 ) return;\r\n        \r\n        _previousTransferFee = _transferFee;\r\n\r\n        _transferFee = 0;\r\n\r\n    }\r\n    \r\n    function restoreTransferFee() private {\r\n        _transferFee = _previousTransferFee;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private transferPause{\r\n        require(!blackAddress[from], \"OGA: transfer from the blackAddress\");\r\n        require(!blackAddress[to], \"OGA: transfer from the blackAddress\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if(from != owner() && to != owner())\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        if(contractTokenBalance >= _maxTxAmount)\r\n        {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n        \r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            //add liquidity\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n        \r\n        //indicates if fee should be deducted from transfer\r\n        bool swapFee = true;\r\n        bool transferFee = true;\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (from != uniswapV2Pair && to != uniswapV2Pair){\r\n\r\n\r\n            \r\n            if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n                \r\n                swapFee = false;\r\n                transferFee = false;\r\n            }else{\r\n\r\n                swapFee = false;\r\n                transferFee = true;\r\n            }\r\n        } else {\r\n            if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n                swapFee = false;\r\n                transferFee = false;\r\n            }else{\r\n                swapFee = true;\r\n                transferFee = false;\r\n            }\r\n\r\n        }\r\n        \r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from,to,amount,swapFee,transferFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityRecipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool swapFee,bool transferFee) private {\r\n        if(!swapFee)\r\n            removeSwapFee();\r\n        if(!transferFee)\r\n            removeTransferFee();\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!swapFee)\r\n            restoreSwapFee();\r\n        if(!transferFee)\r\n            restoreTransferFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _get_T_L_Values(tAmount);\r\n        BPNValue memory data =_get_B_P_N_Values(tAmount);\r\n        (uint256 rTransferBurnAmount, uint256 tTransferBurnAmount) =  _get_TB_Values(tAmount);\r\n        uint256 rTransferAmount = _get_rTransferAmount(tAmount);\r\n        \r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n        \r\n        _tOwned[swapBurnAddr] = _tOwned[swapBurnAddr].add(data.tLiquidityBurnFee);\r\n        _rOwned[swapBurnAddr] = _rOwned[swapBurnAddr].add(data.rSwapBurnFee);\r\n        \r\n        _tOwned[swapPoolAddr] = _tOwned[swapPoolAddr].add(data.tLiquidityPoolFee);\r\n        _rOwned[swapPoolAddr] = _rOwned[swapPoolAddr].add(data.rSwapPoolFee);\r\n        \r\n        _tOwned[swapNFTAddr] = _tOwned[swapNFTAddr].add(data.tLiquidityNftFee);\r\n        _rOwned[swapNFTAddr] = _rOwned[swapNFTAddr].add(data.rSwapNFTFee);\r\n        \r\n        _tOwned[transferBurnAddr] = _tOwned[transferBurnAddr].add(tTransferBurnAmount);\r\n        _rOwned[transferBurnAddr] = _rOwned[transferBurnAddr].add(rTransferBurnAmount);\r\n\r\n\r\n\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        \r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if(data.tLiquidityBurnFee != 0 ){emit Transfer(sender, swapBurnAddr, data.tLiquidityBurnFee);}\r\n        if(data.tLiquidityPoolFee != 0 ){emit Transfer(sender, swapPoolAddr, data.tLiquidityPoolFee);}\r\n        if(data.tLiquidityNftFee != 0 ){emit Transfer(sender, swapNFTAddr, data.tLiquidityNftFee);}\r\n        if(tTransferBurnAmount != 0 ){emit Transfer(sender, transferBurnAddr, tTransferBurnAmount);}\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        \r\n        (uint256 rAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _get_T_L_Values(tAmount);\r\n        BPNValue memory data =_get_B_P_N_Values(tAmount);\r\n        (uint256 rTransferBurnAmount, uint256 tTransferBurnAmount) =  _get_TB_Values(tAmount);\r\n        uint256 rTransferAmount = _get_rTransferAmount(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);      \r\n\r\n        \r\n        _tOwned[swapBurnAddr] = _tOwned[swapBurnAddr].add(data.tLiquidityBurnFee);\r\n        _rOwned[swapBurnAddr] = _rOwned[swapBurnAddr].add(data.rSwapBurnFee);\r\n        \r\n        _tOwned[swapPoolAddr] = _tOwned[swapPoolAddr].add(data.tLiquidityPoolFee);\r\n        _rOwned[swapPoolAddr] = _rOwned[swapPoolAddr].add(data.rSwapPoolFee);\r\n       \r\n        _tOwned[swapNFTAddr] = _tOwned[swapNFTAddr].add(data.tLiquidityNftFee);\r\n        _rOwned[swapNFTAddr] = _rOwned[swapNFTAddr].add(data.rSwapNFTFee);\r\n        _tOwned[transferBurnAddr] = _tOwned[transferBurnAddr].add(tTransferBurnAmount);\r\n        _rOwned[transferBurnAddr] = _rOwned[transferBurnAddr].add(rTransferBurnAmount);\r\n\r\n\r\n\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if(data.tLiquidityBurnFee != 0 ){emit Transfer(sender, swapBurnAddr, data.tLiquidityBurnFee);}\r\n        if(data.tLiquidityPoolFee != 0 ){emit Transfer(sender, swapPoolAddr, data.tLiquidityPoolFee);}\r\n        if(data.tLiquidityNftFee != 0 ){emit Transfer(sender, swapNFTAddr, data.tLiquidityNftFee);}\r\n        if(tTransferBurnAmount != 0 ){emit Transfer(sender, transferBurnAddr, tTransferBurnAmount);}\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        \r\n        (uint256 rAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _get_T_L_Values(tAmount);\r\n        BPNValue memory data =_get_B_P_N_Values(tAmount);\r\n        (uint256 rTransferBurnAmount, uint256 tTransferBurnAmount) =  _get_TB_Values(tAmount);\r\n        uint256 rTransferAmount = _get_rTransferAmount(tAmount);\r\n        \r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n\r\n\r\n        _tOwned[swapBurnAddr] = _tOwned[swapBurnAddr].add(data.tLiquidityBurnFee);\r\n        _rOwned[swapBurnAddr] = _rOwned[swapBurnAddr].add(data.rSwapBurnFee);\r\n \r\n        _tOwned[swapPoolAddr] = _tOwned[swapPoolAddr].add(data.tLiquidityPoolFee);\r\n        _rOwned[swapPoolAddr] = _rOwned[swapPoolAddr].add(data.rSwapPoolFee);\r\n\r\n        _tOwned[swapNFTAddr] = _tOwned[swapNFTAddr].add(data.tLiquidityNftFee);\r\n        _rOwned[swapNFTAddr] = _rOwned[swapNFTAddr].add(data.rSwapNFTFee);\r\n\r\n        _tOwned[transferBurnAddr] = _tOwned[transferBurnAddr].add(tTransferBurnAmount);\r\n        _rOwned[transferBurnAddr] = _rOwned[transferBurnAddr].add(rTransferBurnAmount);\r\n\r\n\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if(data.tLiquidityBurnFee != 0 ){emit Transfer(sender, swapBurnAddr, data.tLiquidityBurnFee);}\r\n        if(data.tLiquidityPoolFee != 0 ){emit Transfer(sender, swapPoolAddr, data.tLiquidityPoolFee);}\r\n        if(data.tLiquidityNftFee != 0 ){emit Transfer(sender, swapNFTAddr, data.tLiquidityNftFee);}\r\n        if(tTransferBurnAmount != 0 ){emit Transfer(sender, transferBurnAddr, tTransferBurnAmount);}\r\n    }\r\n\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBurnAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPoolAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapNFTAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transferBurnAddr_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TransferEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"nftReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"poolReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferBurn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityNftFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBlackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rebacAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rebackAmount\",\"type\":\"uint256\"}],\"name\":\"rebackFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokenSwapBalance_\",\"type\":\"uint256\"}],\"name\":\"setSwapAndLiquifyMinBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBurnAddr_\",\"type\":\"address\"}],\"name\":\"setSwapBurnAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityBurnFee\",\"type\":\"uint256\"}],\"name\":\"setSwapBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapNFTAddr_\",\"type\":\"address\"}],\"name\":\"setSwapNFTAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityNftFee\",\"type\":\"uint256\"}],\"name\":\"setSwapNFTFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapPoolAddr_\",\"type\":\"address\"}],\"name\":\"setSwapPoolAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPoolFee\",\"type\":\"uint256\"}],\"name\":\"setSwapPoolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferBurnAddr_\",\"type\":\"address\"}],\"name\":\"setTransferBurnAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"setTransferBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTransferEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityRecipient_\",\"type\":\"address\"}],\"name\":\"setliquidityRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBurnAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapNFTAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPoolAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBurnAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OnlineGameAlliance", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000dead0000000000000000000000005671ce9b4c75cc465767b663f8105c600ba9aa920000000000000000000000005671ce9b4c75cc465767b663f8105c600ba9aa92000000000000000000000000000000000000000000000000000000000000dead", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://13d05acee256523603691b279ee4cc4be921674d8a59763fca5ddd4e1eab1774"}