{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Barn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721Receiver.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./Woolf.sol\\\";\\r\\nimport \\\"./WOOL.sol\\\";\\r\\n\\r\\ncontract Barn is Ownable, IERC721Receiver, Pausable {\\r\\n  \\r\\n  // maximum alpha score for a Wolf\\r\\n  uint8 public constant MAX_ALPHA = 8;\\r\\n\\r\\n  // struct to store a stake\\u0027s token, owner, and earning values\\r\\n  struct Stake {\\r\\n    uint16 tokenId;\\r\\n    uint80 value;\\r\\n    address owner;\\r\\n  }\\r\\n\\r\\n  event TokenStaked(address owner, uint256 tokenId, uint256 value);\\r\\n  event SheepClaimed(uint256 tokenId, uint256 earned, bool unstaked);\\r\\n  event WolfClaimed(uint256 tokenId, uint256 earned, bool unstaked);\\r\\n\\r\\n  // reference to the Woolf NFT contract\\r\\n  Woolf woolf;\\r\\n  // reference to the $WOOL contract for minting $WOOL earnings\\r\\n  WOOL wool;\\r\\n\\r\\n  // maps tokenId to stake\\r\\n  mapping(uint256 =\\u003e Stake) public barn; \\r\\n  // maps alpha to all Wolf stakes with that alpha\\r\\n  mapping(uint256 =\\u003e Stake[]) public pack; \\r\\n  // tracks location of each Wolf in Pack\\r\\n  mapping(uint256 =\\u003e uint256) public packIndices; \\r\\n  // total alpha scores staked\\r\\n  uint256 public totalAlphaStaked = 0; \\r\\n  // any rewards distributed when no wolves are staked\\r\\n  uint256 public unaccountedRewards = 0; \\r\\n  // amount of $WOOL due for each alpha point staked\\r\\n  uint256 public woolPerAlpha = 0; \\r\\n\\r\\n  // sheep earn 10000 $WOOL per day\\r\\n  uint256 public constant DAILY_WOOL_RATE = 10000 ether;\\r\\n  // sheep must have 2 days worth of $WOOL to unstake or else it\\u0027s too cold\\r\\n  uint256 public constant MINIMUM_TO_EXIT = 2 days;\\r\\n  // wolves take a 20% tax on all $WOOL claimed\\r\\n  uint256 public constant WOOL_CLAIM_TAX_PERCENTAGE = 20;\\r\\n  // there will only ever be (roughly) 2.4 billion $WOOL earned through staking\\r\\n  uint256 public constant MAXIMUM_GLOBAL_WOOL = 2400000000 ether;\\r\\n\\r\\n  // amount of $WOOL earned so far\\r\\n  uint256 public totalWoolEarned;\\r\\n  // number of Sheep staked in the Barn\\r\\n  uint256 public totalSheepStaked;\\r\\n  // the last time $WOOL was claimed\\r\\n  uint256 public lastClaimTimestamp;\\r\\n\\r\\n  // emergency rescue to allow unstaking without any checks but without $WOOL\\r\\n  bool public rescueEnabled = false;\\r\\n\\r\\n  /**\\r\\n   * @param _woolf reference to the Woolf NFT contract\\r\\n   * @param _wool reference to the $WOOL token\\r\\n   */\\r\\n  constructor(address _woolf, address _wool) { \\r\\n    woolf = Woolf(_woolf);\\r\\n    wool = WOOL(_wool);\\r\\n  }\\r\\n\\r\\n  /** STAKING */\\r\\n\\r\\n  /**\\r\\n   * adds Sheep and Wolves to the Barn and Pack\\r\\n   * @param account the address of the staker\\r\\n   * @param tokenIds the IDs of the Sheep and Wolves to stake\\r\\n   */\\r\\n  function addManyToBarnAndPack(address account, uint16[] calldata tokenIds) external {\\r\\n    require(account == _msgSender() || _msgSender() == address(woolf), \\\"DONT GIVE YOUR TOKENS AWAY\\\");\\r\\n    for (uint i = 0; i \\u003c tokenIds.length; i++) {\\r\\n      if (_msgSender() != address(woolf)) { // dont do this step if its a mint + stake\\r\\n        require(woolf.ownerOf(tokenIds[i]) == _msgSender(), \\\"AINT YO TOKEN\\\");\\r\\n        woolf.transferFrom(_msgSender(), address(this), tokenIds[i]);\\r\\n      } else if (tokenIds[i] == 0) {\\r\\n        continue; // there may be gaps in the array for stolen tokens\\r\\n      }\\r\\n\\r\\n      if (isSheep(tokenIds[i])) \\r\\n        _addSheepToBarn(account, tokenIds[i]);\\r\\n      else \\r\\n        _addWolfToPack(account, tokenIds[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * adds a single Sheep to the Barn\\r\\n   * @param account the address of the staker\\r\\n   * @param tokenId the ID of the Sheep to add to the Barn\\r\\n   */\\r\\n  function _addSheepToBarn(address account, uint256 tokenId) internal whenNotPaused _updateEarnings {\\r\\n    barn[tokenId] = Stake({\\r\\n      owner: account,\\r\\n      tokenId: uint16(tokenId),\\r\\n      value: uint80(block.timestamp)\\r\\n    });\\r\\n    totalSheepStaked += 1;\\r\\n    emit TokenStaked(account, tokenId, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * adds a single Wolf to the Pack\\r\\n   * @param account the address of the staker\\r\\n   * @param tokenId the ID of the Wolf to add to the Pack\\r\\n   */\\r\\n  function _addWolfToPack(address account, uint256 tokenId) internal {\\r\\n    uint256 alpha = _alphaForWolf(tokenId);\\r\\n    totalAlphaStaked += alpha; // Portion of earnings ranges from 8 to 5\\r\\n    packIndices[tokenId] = pack[alpha].length; // Store the location of the wolf in the Pack\\r\\n    pack[alpha].push(Stake({\\r\\n      owner: account,\\r\\n      tokenId: uint16(tokenId),\\r\\n      value: uint80(woolPerAlpha)\\r\\n    })); // Add the wolf to the Pack\\r\\n    emit TokenStaked(account, tokenId, woolPerAlpha);\\r\\n  }\\r\\n\\r\\n  /** CLAIMING / UNSTAKING */\\r\\n\\r\\n  /**\\r\\n   * realize $WOOL earnings and optionally unstake tokens from the Barn / Pack\\r\\n   * to unstake a Sheep it will require it has 2 days worth of $WOOL unclaimed\\r\\n   * @param tokenIds the IDs of the tokens to claim earnings from\\r\\n   * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\r\\n   */\\r\\n  function claimManyFromBarnAndPack(uint16[] calldata tokenIds, bool unstake) external whenNotPaused _updateEarnings {\\r\\n    require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\r\\n    uint256 owed = 0;\\r\\n    for (uint i = 0; i \\u003c tokenIds.length; i++) {\\r\\n      if (isSheep(tokenIds[i]))\\r\\n        owed += _claimSheepFromBarn(tokenIds[i], unstake);\\r\\n      else\\r\\n        owed += _claimWolfFromPack(tokenIds[i], unstake);\\r\\n    }\\r\\n    if (owed == 0) return;\\r\\n    wool.mint(_msgSender(), owed);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * realize $WOOL earnings for a single Sheep and optionally unstake it\\r\\n   * if not unstaking, pay a 20% tax to the staked Wolves\\r\\n   * if unstaking, there is a 50% chance all $WOOL is stolen\\r\\n   * @param tokenId the ID of the Sheep to claim earnings from\\r\\n   * @param unstake whether or not to unstake the Sheep\\r\\n   * @return owed - the amount of $WOOL earned\\r\\n   */\\r\\n  function _claimSheepFromBarn(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\r\\n    Stake memory stake = barn[tokenId];\\r\\n    require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\r\\n    require(!(unstake \\u0026\\u0026 block.timestamp - stake.value \\u003c MINIMUM_TO_EXIT), \\\"GONNA BE COLD WITHOUT TWO DAY\\u0027S WOOL\\\");\\r\\n    if (totalWoolEarned \\u003c MAXIMUM_GLOBAL_WOOL) {\\r\\n      owed = (block.timestamp - stake.value) * DAILY_WOOL_RATE / 1 days;\\r\\n    } else if (stake.value \\u003e lastClaimTimestamp) {\\r\\n      owed = 0; // $WOOL production stopped already\\r\\n    } else {\\r\\n      owed = (lastClaimTimestamp - stake.value) * DAILY_WOOL_RATE / 1 days; // stop earning additional $WOOL if it\\u0027s all been earned\\r\\n    }\\r\\n    if (unstake) {\\r\\n      if (random(tokenId) \\u0026 1 == 1) { // 50% chance of all $WOOL stolen\\r\\n        _payWolfTax(owed);\\r\\n        owed = 0;\\r\\n      }\\r\\n      delete barn[tokenId];\\r\\n      totalSheepStaked -= 1;\\r\\n      woolf.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // send back Sheep\\r\\n    } else {\\r\\n      _payWolfTax(owed * WOOL_CLAIM_TAX_PERCENTAGE / 100); // percentage tax to staked wolves\\r\\n      owed = owed * (100 - WOOL_CLAIM_TAX_PERCENTAGE) / 100; // remainder goes to Sheep owner\\r\\n      barn[tokenId] = Stake({\\r\\n        owner: _msgSender(),\\r\\n        tokenId: uint16(tokenId),\\r\\n        value: uint80(block.timestamp)\\r\\n      }); // reset stake\\r\\n    }\\r\\n    emit SheepClaimed(tokenId, owed, unstake);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * realize $WOOL earnings for a single Wolf and optionally unstake it\\r\\n   * Wolves earn $WOOL proportional to their Alpha rank\\r\\n   * @param tokenId the ID of the Wolf to claim earnings from\\r\\n   * @param unstake whether or not to unstake the Wolf\\r\\n   * @return owed - the amount of $WOOL earned\\r\\n   */\\r\\n  function _claimWolfFromPack(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\r\\n    require(woolf.ownerOf(tokenId) == address(this), \\\"AINT A PART OF THE PACK\\\");\\r\\n    uint256 alpha = _alphaForWolf(tokenId);\\r\\n    Stake memory stake = pack[alpha][packIndices[tokenId]];\\r\\n    require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\r\\n    owed = (alpha) * (woolPerAlpha - stake.value); // Calculate portion of tokens based on Alpha\\r\\n    if (unstake) {\\r\\n      totalAlphaStaked -= alpha; // Remove Alpha from total staked\\r\\n      Stake memory lastStake = pack[alpha][pack[alpha].length - 1];\\r\\n      pack[alpha][packIndices[tokenId]] = lastStake; // Shuffle last Wolf to current position\\r\\n      packIndices[lastStake.tokenId] = packIndices[tokenId];\\r\\n      pack[alpha].pop(); // Remove duplicate\\r\\n      delete packIndices[tokenId]; // Delete old mapping\\r\\n      woolf.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // Send back Wolf\\r\\n    } else {\\r\\n      pack[alpha][packIndices[tokenId]] = Stake({\\r\\n        owner: _msgSender(),\\r\\n        tokenId: uint16(tokenId),\\r\\n        value: uint80(woolPerAlpha)\\r\\n      }); // reset stake\\r\\n    }\\r\\n    emit WolfClaimed(tokenId, owed, unstake);\\r\\n  }\\r\\n  \\r\\n  function getWolfOwner(uint256 tokenId) external view returns (address) {\\r\\n      uint256 alpha = _alphaForWolf(tokenId);\\r\\n      Stake memory stake = pack[alpha][packIndices[tokenId]];\\r\\n      return stake.owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * emergency unstake tokens\\r\\n   * @param tokenIds the IDs of the tokens to claim earnings from\\r\\n   */\\r\\n  function rescue(uint256[] calldata tokenIds) external {\\r\\n    require(rescueEnabled, \\\"RESCUE DISABLED\\\");\\r\\n    uint256 tokenId;\\r\\n    Stake memory stake;\\r\\n    Stake memory lastStake;\\r\\n    uint256 alpha;\\r\\n    for (uint i = 0; i \\u003c tokenIds.length; i++) {\\r\\n      tokenId = tokenIds[i];\\r\\n      if (isSheep(tokenId)) {\\r\\n        stake = barn[tokenId];\\r\\n        require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\r\\n        delete barn[tokenId];\\r\\n        totalSheepStaked -= 1;\\r\\n        woolf.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // send back Sheep\\r\\n        emit SheepClaimed(tokenId, 0, true);\\r\\n      } else {\\r\\n        alpha = _alphaForWolf(tokenId);\\r\\n        stake = pack[alpha][packIndices[tokenId]];\\r\\n        require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\r\\n        totalAlphaStaked -= alpha; // Remove Alpha from total staked\\r\\n        lastStake = pack[alpha][pack[alpha].length - 1];\\r\\n        pack[alpha][packIndices[tokenId]] = lastStake; // Shuffle last Wolf to current position\\r\\n        packIndices[lastStake.tokenId] = packIndices[tokenId];\\r\\n        pack[alpha].pop(); // Remove duplicate\\r\\n        delete packIndices[tokenId]; // Delete old mapping\\r\\n        woolf.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // Send back Wolf\\r\\n        emit WolfClaimed(tokenId, 0, true);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** ACCOUNTING */\\r\\n\\r\\n  /** \\r\\n   * add $WOOL to claimable pot for the Pack\\r\\n   * @param amount $WOOL to add to the pot\\r\\n   */\\r\\n  function _payWolfTax(uint256 amount) internal {\\r\\n    if (totalAlphaStaked == 0) { // if there\\u0027s no staked wolves\\r\\n      unaccountedRewards += amount; // keep track of $WOOL due to wolves\\r\\n      return;\\r\\n    }\\r\\n    // makes sure to include any unaccounted $WOOL \\r\\n    woolPerAlpha += (amount + unaccountedRewards) / totalAlphaStaked;\\r\\n    unaccountedRewards = 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * tracks $WOOL earnings to ensure it stops once 2.4 billion is eclipsed\\r\\n   */\\r\\n  modifier _updateEarnings() {\\r\\n    if (totalWoolEarned \\u003c MAXIMUM_GLOBAL_WOOL) {\\r\\n      totalWoolEarned += \\r\\n        (block.timestamp - lastClaimTimestamp)\\r\\n        * totalSheepStaked\\r\\n        * DAILY_WOOL_RATE / 1 days; \\r\\n      lastClaimTimestamp = block.timestamp;\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /** ADMIN */\\r\\n\\r\\n  /**\\r\\n   * allows owner to enable \\\"rescue mode\\\"\\r\\n   * simplifies accounting, prioritizes tokens out in emergency\\r\\n   */\\r\\n  function setRescueEnabled(bool _enabled) external onlyOwner {\\r\\n    rescueEnabled = _enabled;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * enables owner to pause / unpause minting\\r\\n   */\\r\\n  function setPaused(bool _paused) external onlyOwner {\\r\\n    if (_paused) _pause();\\r\\n    else _unpause();\\r\\n  }\\r\\n\\r\\n  /** READ ONLY */\\r\\n\\r\\n  /**\\r\\n   * checks if a token is a Sheep\\r\\n   * @param tokenId the ID of the token to check\\r\\n   * @return sheep - whether or not a token is a Sheep\\r\\n   */\\r\\n  function isSheep(uint256 tokenId) public view returns (bool sheep) {\\r\\n    (sheep, , , , , , , , , ) = woolf.tokenTraits(tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * gets the alpha score for a Wolf\\r\\n   * @param tokenId the ID of the Wolf to get the alpha score for\\r\\n   * @return the alpha score of the Wolf (5-8)\\r\\n   */\\r\\n  function _alphaForWolf(uint256 tokenId) internal view returns (uint8) {\\r\\n    ( , , , , , , , , , uint8 alphaIndex) = woolf.tokenTraits(tokenId);\\r\\n    return MAX_ALPHA - alphaIndex; // alpha index is 0-3\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * chooses a random Wolf thief when a newly minted token is stolen\\r\\n   * @param seed a random value to choose a Wolf from\\r\\n   * @return the owner of the randomly selected Wolf thief\\r\\n   */\\r\\n  function randomWolfOwner(uint256 seed) external view returns (address) {\\r\\n    if (totalAlphaStaked == 0) return address(0x0);\\r\\n    uint256 bucket = (seed \\u0026 0xFFFFFFFF) % totalAlphaStaked; // choose a value from 0 to total alpha staked\\r\\n    uint256 cumulative;\\r\\n    seed \\u003e\\u003e= 32;\\r\\n    // loop through each bucket of Wolves with the same alpha score\\r\\n    for (uint i = MAX_ALPHA - 3; i \\u003c= MAX_ALPHA; i++) {\\r\\n      cumulative += pack[i].length * i;\\r\\n      // if the value is not inside of that bucket, keep going\\r\\n      if (bucket \\u003e= cumulative) continue;\\r\\n      // get the address of a random Wolf with that alpha score\\r\\n      return pack[i][seed % pack[i].length].owner;\\r\\n    }\\r\\n    return address(0x0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * generates a pseudorandom number\\r\\n   * @param seed a value ensure different outcomes for different sources in the same block\\r\\n   * @return a pseudorandom value\\r\\n   */\\r\\n  function random(uint256 seed) internal view returns (uint256) {\\r\\n    return uint256(keccak256(abi.encodePacked(\\r\\n      tx.origin,\\r\\n      blockhash(block.number - 1),\\r\\n      block.timestamp,\\r\\n      seed\\r\\n    )));\\r\\n  }\\r\\n\\r\\n  function onERC721Received(\\r\\n        address,\\r\\n        address from,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n      require(from == address(0x0), \\\"Cannot send tokens to Barn directly\\\");\\r\\n      return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n  \\r\\n}\"},\"BarnApi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IBarn {\\r\\n    function barn(uint256 tokenId) external view returns (uint16, uint80, address);\\r\\n    function pack(uint256 tokenId, uint256 i) external view returns (uint16, uint80, address);\\r\\n    function getWolfOwner(uint256 tokenId) external view returns (address);\\r\\n    function packIndices(uint256 tokenId) external view returns (uint256);\\r\\n    function totalWoolEarned() external view returns (uint256);\\r\\n    function MAXIMUM_GLOBAL_WOOL() external view returns (uint256);\\r\\n    function DAILY_WOOL_RATE() external view returns (uint256);\\r\\n    function lastClaimTimestamp() external view returns (uint256);\\r\\n    function WOOL_CLAIM_TAX_PERCENTAGE() external view returns (uint256);\\r\\n    function woolPerAlpha() external view returns (uint256);\\r\\n    function MAX_ALPHA() external view returns (uint8);\\r\\n    function tokenOfOwnerByIndex(address user, uint256 i) external view returns (uint256);\\r\\n    function balanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    function isSheep(uint256 tokenId) external view returns (bool sheep);\\r\\n}\\r\\n\\r\\ninterface IWoolf {\\r\\n    struct SheepWolf {\\r\\n      bool isSheep;\\r\\n      uint8 fur;\\r\\n      uint8 head;\\r\\n      uint8 ears;\\r\\n      uint8 eyes;\\r\\n      uint8 nose;\\r\\n      uint8 mouth;\\r\\n      uint8 neck;\\r\\n      uint8 feet;\\r\\n      uint8 alphaIndex;\\r\\n    }\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n    function balanceOf(address user) external view returns (uint256);\\r\\n    function getTokenTraits(uint256 tokenId) external view returns (SheepWolf memory);\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n    function tokenOfOwnerByIndex(address user, uint256 i) external view returns (uint256);\\r\\n}\\r\\n\\r\\n\\r\\ncontract BarnApi {\\r\\n  IWoolf woolf = IWoolf(0x1d293cad3476f064cB684A37Ede558f8C1114a7a);\\r\\n  function getUserWoolfIds(address user) public view returns(uint256[] memory list) {\\r\\n    uint256 num = woolf.balanceOf(user);\\r\\n    list = new uint256[](num);\\r\\n    for (uint256 i = 0; i \\u003c num; i++) {\\r\\n      list[i] = woolf.tokenOfOwnerByIndex(user, i);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getWoolfInfo(uint256[] calldata ids) public view returns(IWoolf.SheepWolf[] memory list) {\\r\\n    list = new IWoolf.SheepWolf[](ids.length);\\r\\n    for (uint256 i = 0; i \\u003c ids.length; i++) {\\r\\n      list[i] = woolf.getTokenTraits(ids[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getWoolfURI(uint256[] calldata ids) public view returns(string[] memory list) {\\r\\n    list = new string[](ids.length);\\r\\n    for (uint256 i = 0; i \\u003c ids.length; i++) {\\r\\n      list[i] = woolf.tokenURI(ids[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getUserBarnWoolfIds(IBarn barn, address user) public view returns(uint256[] memory list) {\\r\\n    uint256 num = barn.balanceOf(user);\\r\\n    list = new uint256[](num);\\r\\n    for (uint256 i = 0; i \\u003c num; i++) {\\r\\n      list[i] = barn.tokenOfOwnerByIndex(user, i);\\r\\n    }\\r\\n  }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastvalue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue\\u0027s index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        return _values(set._inner);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\nimport \\\"./IERC721Receiver.sol\\\";\\r\\nimport \\\"./IERC721Metadata.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\nimport \\\"./ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 =\\u003e address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length \\u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[from] -= 1;\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"},\"ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"./IERC721Enumerable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\r\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\r\\n * account.\\r\\n */\\r\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\r\\n    // Mapping from owner to list of owned token IDs\\r\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) private _ownedTokens;\\r\\n\\r\\n    // Mapping from token ID to index of the owner tokens list\\r\\n    mapping(uint256 =\\u003e uint256) private _ownedTokensIndex;\\r\\n\\r\\n    // Array with all token ids, used for enumeration\\r\\n    uint256[] private _allTokens;\\r\\n\\r\\n    // Mapping from token id to position in the allTokens array\\r\\n    mapping(uint256 =\\u003e uint256) private _allTokensIndex;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\r\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index \\u003c ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n        return _ownedTokens[owner][index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _allTokens.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index \\u003c ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return _allTokens[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            _addTokenToAllTokensEnumeration(tokenId);\\r\\n        } else if (from != to) {\\r\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\r\\n        }\\r\\n        if (to == address(0)) {\\r\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\r\\n        } else if (to != from) {\\r\\n            _addTokenToOwnerEnumeration(to, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension\\u0027s ownership-tracking data structures.\\r\\n     * @param to address representing the new owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\r\\n     */\\r\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\r\\n        uint256 length = ERC721.balanceOf(to);\\r\\n        _ownedTokens[to][length] = tokenId;\\r\\n        _ownedTokensIndex[tokenId] = length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension\\u0027s token tracking data structures.\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\r\\n     */\\r\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\r\\n        _allTokensIndex[tokenId] = _allTokens.length;\\r\\n        _allTokens.push(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension\\u0027s ownership-tracking data structures. Note that\\r\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\r\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\r\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\r\\n     */\\r\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\r\\n        // To prevent a gap in from\\u0027s tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\r\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary\\r\\n        if (tokenIndex != lastTokenIndex) {\\r\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\r\\n\\r\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\r\\n        }\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _ownedTokensIndex[tokenId];\\r\\n        delete _ownedTokens[from][lastTokenIndex];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension\\u0027s token tracking data structures.\\r\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\r\\n     */\\r\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\r\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\r\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\r\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\r\\n        // an \\u0027if\\u0027 statement (like in _removeTokenFromOwnerEnumeration)\\r\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\r\\n\\r\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _allTokensIndex[tokenId];\\r\\n        _allTokens.pop();\\r\\n    }\\r\\n}\\r\\n\"},\"Farmer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./ERC721Enumerable.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\ncontract Farmer is ERC721Enumerable, Ownable, Pausable {\\r\\n    uint16 public minted;\\r\\n    uint16 public MAX_TOKENS = 20000;\\r\\n\\r\\n    constructor() ERC721 (\\\"Wolf Game DAO Farmer\\\", \\\"FARMER\\\") {}\\r\\n\\r\\n    function mint(uint256 amount) external payable whenNotPaused {\\r\\n        require(minted + amount \\u003c= 20000, \\\"All tokens minted.\\\");\\r\\n        require(amount \\u003e 0 \\u0026\\u0026 amount \\u003c= 10, \\\"Invalid mint amount\\\");\\r\\n        uint256 cost = amount * 10000 * 1 ether;\\r\\n        ERC20(0xA46346bC9d110907b5ACE36B53263320baf1cD21).transferFrom(msg.sender, address(this), cost);\\r\\n        for (uint8 i = 0; i \\u003c amount; i++) {\\r\\n            minted++;\\r\\n            _safeMint(msg.sender, minted);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawERC721(address _token, uint _id, address _to) public onlyOwner {\\r\\n        IERC721 token = IERC721(_token);\\r\\n        token.safeTransferFrom(address(this), _to, _id);\\r\\n    }\\r\\n    \\r\\n    function withdraw(address _token, address _to) public onlyOwner{\\r\\n        if (_token == address(0x0)) {\\r\\n            payable(_to).transfer(address(this).balance);\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        IERC20 token = IERC20(_token);\\r\\n        token.transfer(_to, token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function setPaused(bool _paused) external onlyOwner {\\r\\n        if (_paused) _pause();\\r\\n        else _unpause();\\r\\n    }\\r\\n}\\r\\n    \\r\\n\\r\\n\"},\"IBarn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE \\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBarn {\\r\\n  function addManyToBarnAndPack(address account, uint16[] calldata tokenIds) external;\\r\\n  function randomWolfOwner(uint256 seed) external view returns (address);\\r\\n}\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Enumerable is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n     * Use along with {totalSupply} to enumerate all tokens.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\"},\"ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE \\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITraits {\\r\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\"},\"IWoolf.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWoolf {\\r\\n\\r\\n  // struct to store each token\\u0027s traits\\r\\n  struct SheepWolf {\\r\\n    bool isSheep;\\r\\n    uint8 fur;\\r\\n    uint8 head;\\r\\n    uint8 ears;\\r\\n    uint8 eyes;\\r\\n    uint8 nose;\\r\\n    uint8 mouth;\\r\\n    uint8 neck;\\r\\n    uint8 feet;\\r\\n    uint8 alphaIndex;\\r\\n  }\\r\\n\\r\\n\\r\\n  function getPaidTokens() external view returns (uint256);\\r\\n  function getTokenTraits(uint256 tokenId) external view returns (SheepWolf memory);\\r\\n}\"},\"Land.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./ERC721Enumerable.sol\\\";\\r\\nimport \\\"./BarnApi.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\ncontract Land is ERC721Enumerable, Ownable, Pausable {\\r\\n    uint16 public minted;\\r\\n    uint16 public freeMinted = 10000;\\r\\n\\r\\n    BarnApi barn = BarnApi(0x88f7cE1f1c1C0cA6726A11Af50C5A3E30FF596De);\\r\\n    IWoolf woolf = IWoolf(0x1d293cad3476f064cB684A37Ede558f8C1114a7a);\\r\\n\\r\\n    address BARN_ADDRESS = 0x176306230DD1B6628B1C1E4c06EC2eF864FF8ec4;\\r\\n\\r\\n    mapping(uint16 =\\u003e bool) public claimedTokenIdList;\\r\\n\\r\\n    constructor() ERC721 (\\\"Wolf Game DAO Land - Genesis\\\", \\\"LAND\\\") {}\\r\\n\\r\\n    function mint(uint256 amount) external payable whenNotPaused {\\r\\n        require(minted + amount \\u003c= 10000, \\\"All tokens minted.\\\");\\r\\n        require(amount == 1 || amount == 5 || amount == 10, \\\"Invalid mint amount\\\");\\r\\n        if (amount == 1) {\\r\\n            require(msg.value == 1 ether, \\\"Invalid Money\\\");\\r\\n            minted++;\\r\\n            _safeMint(msg.sender, minted);\\r\\n        } \\r\\n        \\r\\n        if (amount == 5) {\\r\\n            require(msg.value == 4.5 ether, \\\"Invalid Money\\\");\\r\\n            for (uint8 i = 0; i \\u003c 5; i++) {\\r\\n                minted++;\\r\\n                _safeMint(msg.sender, minted);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (amount == 10) {\\r\\n            require(msg.value == 8.8 ether, \\\"Invalid Money\\\");\\r\\n            for (uint8 i = 0; i \\u003c 10; i++) {\\r\\n                minted++;\\r\\n                _safeMint(msg.sender, minted);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function freeMint(uint16[] calldata tokenIds) external whenNotPaused {\\r\\n        require(freeMinted + tokenIds.length \\u003c= 20000, \\\"tokens all claimed\\\");\\r\\n        uint256[] memory userWoolfBarn = barn.getUserBarnWoolfIds(IBarn(BARN_ADDRESS), msg.sender);\\r\\n        for (uint i = 0; i \\u003c tokenIds.length; i++) {\\r\\n            require(tokenIds[i] \\u003c= 10000, \\\"not a gen0\\\");\\r\\n            require(claimedTokenIdList[tokenIds[i]] != true, \\\"token claimed\\\");\\r\\n\\r\\n            bool mintable = false;\\r\\n            if (woolf.ownerOf(tokenIds[i]) == msg.sender) {\\r\\n                mintable = true;\\r\\n            } else {\\r\\n                for (uint k = 0; k \\u003c userWoolfBarn.length; k++) {\\r\\n                    if (userWoolfBarn[k] == tokenIds[i]) {\\r\\n                        mintable = true;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            require(mintable == true, \\\"no claimable tokens\\\");\\r\\n            claimedTokenIdList[tokenIds[i]] = true;\\r\\n            freeMinted++;\\r\\n            _safeMint(msg.sender, freeMinted);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawERC721(address _token, uint _id, address _to) public onlyOwner {\\r\\n        IERC721 token = IERC721(_token);\\r\\n        token.safeTransferFrom(address(this), _to, _id);\\r\\n    }\\r\\n    \\r\\n    function withdraw(address _token, address _to) public onlyOwner{\\r\\n        if (_token == address(0x0)) {\\r\\n            payable(_to).transfer(address(this).balance);\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        IERC20 token = IERC20(_token);\\r\\n        token.transfer(_to, token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function setPaused(bool _paused) external onlyOwner {\\r\\n        if (_paused) _pause();\\r\\n        else _unpause();\\r\\n    }\\r\\n\\r\\n    function setBarnAddress(address _addr) external onlyOwner {\\r\\n        BARN_ADDRESS = _addr;\\r\\n    }\\r\\n}\"},\"LandPlant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./ERC721Enumerable.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Farmer.sol\\\";\\nimport \\\"./Land.sol\\\";\\nimport \\\"./WOOL.sol\\\";\\nimport \\\"./Milk.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\n\\ninterface WoolPouch {\\n    function mintPouch(uint256 booster, address recipient) external;\\n}\\n\\ninterface MyWoolf {\\n    struct SheepWolf {\\n        bool isSheep;\\n        uint8 fur;\\n        uint8 head;\\n        uint8 ears;\\n        uint8 eyes;\\n        uint8 nose;\\n        uint8 mouth;\\n        uint8 neck;\\n        uint8 feet;\\n        uint8 alphaIndex;\\n    }\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function getTokenTraits(uint256 tokenId)\\n        external\\n        view\\n        returns (SheepWolf memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function tokenOfOwnerByIndex(address user, uint256 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\\ncontract LandPlant is Ownable, Pausable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    uint8 public constant MAX_ALPHA = 8;\\n    uint256 public constant COST_BURN_STAKE_LAND = 10000 ether;\\n    uint256 public constant COST_BURN_PLANT_LAND = 500 ether;\\n    uint256 public constant COST_PRIZE_PLANT_LAND = 4500 ether;\\n\\n    WoolPouch public pouch;\\n\\n    MyWoolf public woolf;\\n    Farmer public farmer;\\n    Land public land;\\n    WOOL public wool;\\n    Milk public milk;\\n\\n    mapping(address =\\u003e EnumerableSet.UintSet) private userLandsMap;\\n    mapping(address =\\u003e EnumerableSet.UintSet) private userFarmersMap;\\n\\n    mapping(uint256 =\\u003e LandToPool) public landPool;\\n    mapping(uint256 =\\u003e LandWork) public landWork;\\n    mapping(uint256 =\\u003e uint256) public landBooster;\\n    mapping(uint256 =\\u003e LandMilk) public landMilkMap;\\n\\n    mapping(uint256 =\\u003e uint256) public landFarmer;\\n    mapping(uint256 =\\u003e uint256) public farmerLand;\\n\\n    mapping(uint256 =\\u003e uint256) public animalLand;\\n\\n    mapping(uint256 =\\u003e LandAnimal[]) public landAnimal;\\n    mapping(uint256 =\\u003e uint256) public animalIndices;\\n\\n    uint256 public totalLandStaked;\\n    uint256 public totalLandPlanted;\\n    uint256 public totalWoolNum;\\n    uint256 public totalBooster;\\n    uint256 public milkSpeed = 1e18;\\n\\n    event LandStaked(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 value\\n    );\\n    event LandUnStaked(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 value\\n    );\\n    event LandWorked(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 farmerId,\\n        uint256 value\\n    );\\n    event LandUnWorked(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 farmerId,\\n        uint256 value\\n    );\\n    event LandHarvested(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 value\\n    );\\n    event AnimalStaked(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 animalId,\\n        uint256 value\\n    );\\n    event AnimalUnStaked(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 animalId,\\n        uint256 value\\n    );\\n\\n    struct LandToPool {\\n        uint16 tokenId;\\n        bool staked;\\n        bool worked;\\n        bool hasFarmer;\\n        uint16 hasWolf;\\n        uint16 hasSheep;\\n        address owner;\\n    }\\n\\n    struct LandWork {\\n        uint16 farmerId;\\n        uint80 value;\\n        address owner;\\n    }\\n\\n    struct LandAnimal {\\n        uint16 animalId;\\n        uint80 value;\\n        address owner;\\n    }\\n\\n    struct LandMilk {\\n        uint256 unharvestedAmount;\\n        uint256 sheepCount;\\n        uint256 lastBlockNumber;\\n    }\\n\\n    constructor(\\n        address _wool,\\n        address _framer,\\n        address _land,\\n        address _woolf,\\n        address _milk\\n    ) {\\n        wool = WOOL(_wool);\\n        farmer = Farmer(_framer);\\n        land = Land(_land);\\n        woolf = MyWoolf(_woolf);\\n        milk = Milk(_milk);\\n    }\\n\\n    function setWoolPouchAddress(address _address) external onlyOwner {\\n        pouch = WoolPouch(_address);\\n    }\\n\\n    function getBaseNumber() external view returns (uint256) {\\n        return (wool.balanceOf(address(pouch)) * 100) / totalBooster;\\n    }\\n\\n    function stakeLand(uint16[] calldata tokenIds, uint16[] calldata farmerIds)\\n        external\\n        payable\\n        whenNotPaused\\n    {\\n        require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n        require(tokenIds.length \\u003e 0, \\\"Invalid stake amount\\\");\\n        require(tokenIds.length == farmerIds.length, \\\"length mismatch\\\");\\n        uint256 totalWoolCost = 0;\\n        for (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n            require(tokenIds[i] != 0 \\u0026\\u0026 farmerIds[i] != 0, \\\"TokenId ZERO\\\");\\n            require(land.ownerOf(tokenIds[i]) == _msgSender(), \\\"AINT YO TOKEN\\\");\\n            require(\\n                farmer.ownerOf(farmerIds[i]) == _msgSender(),\\n                \\\"AINT YO farmer\\\"\\n            );\\n\\n            land.transferFrom(_msgSender(), address(this), tokenIds[i]);\\n            farmer.transferFrom(_msgSender(), address(this), farmerIds[i]);\\n\\n            userLandsMap[_msgSender()].add(tokenIds[i]);\\n            userFarmersMap[_msgSender()].add(farmerIds[i]);\\n\\n            totalWoolCost += 1;\\n\\n            _stakeLand(_msgSender(), tokenIds[i], farmerIds[i]);\\n        }\\n        require(totalWoolCost \\u003e 0, \\\"totalWoolCost ZERO\\\");\\n        require(\\n            msg.value == (totalWoolCost * 5 ether) / 100,\\n            \\\"Invalid BNB amount\\\"\\n        );\\n        wool.transferFrom(\\n            _msgSender(),\\n            0x000000000000000000000000000000000000dEaD,\\n            totalWoolCost * COST_BURN_STAKE_LAND\\n        );\\n    }\\n\\n    function unstakeLand(uint16[] calldata tokenIds) external whenNotPaused {\\n        require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n        require(tokenIds.length \\u003e 0, \\\"Invalid stake amount\\\");\\n        for (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n            if (tokenIds[i] == 0) {\\n                continue;\\n            }\\n            require(\\n                landPool[tokenIds[i]].owner == _msgSender(),\\n                \\\"AINT YO LAND\\\"\\n            );\\n            land.transferFrom(address(this), _msgSender(), tokenIds[i]);\\n            farmer.transferFrom(\\n                address(this),\\n                _msgSender(),\\n                landFarmer[tokenIds[i]]\\n            );\\n            userLandsMap[_msgSender()].remove(tokenIds[i]);\\n            userFarmersMap[_msgSender()].remove(landFarmer[tokenIds[i]]);\\n            _unstakeLand(_msgSender(), tokenIds[i]);\\n        }\\n    }\\n\\n    function _stakeLand(\\n        address account,\\n        uint256 tokenId,\\n        uint256 farmerId\\n    ) internal whenNotPaused {\\n        landPool[tokenId] = LandToPool({\\n            owner: account,\\n            tokenId: uint16(tokenId),\\n            staked: true,\\n            hasFarmer: true,\\n            hasWolf: 0,\\n            hasSheep: 0,\\n            worked: false\\n        });\\n        landFarmer[tokenId] = farmerId;\\n        farmerLand[farmerId] = tokenId;\\n        totalLandStaked += 1;\\n        emit LandStaked(account, tokenId, block.timestamp);\\n    }\\n\\n    function _unstakeLand(address account, uint256 tokenId)\\n        internal\\n        whenNotPaused\\n    {\\n        LandToPool memory pool = landPool[tokenId];\\n        uint256 farmerId = landFarmer[tokenId];\\n        if (pool.worked) {\\n            _unplantLand(account, tokenId, farmerId);\\n        } else {\\n            LandAnimal[] memory animals = landAnimal[tokenId];\\n            if (animals.length \\u003e 0) {\\n                for (uint256 i = animals.length - 1; i \\u003e= 0; i--) {\\n                    _unstakeAnimal(account, tokenId, animals[i].animalId);\\n                    if (i == 0) break;\\n                }\\n            }\\n        }\\n\\n        delete landPool[tokenId];\\n        totalLandStaked -= 1;\\n        emit LandUnStaked(account, tokenId, block.timestamp);\\n    }\\n\\n    function _landBooster(uint256 tokenId) internal view returns (uint256) {\\n        uint256 _booster = 100;\\n        for (uint8 i = 0; i \\u003c landAnimal[tokenId].length; i++) {\\n            uint16 animalId = landAnimal[tokenId][i].animalId;\\n            if (_isSheep(animalId)) {\\n                if (animalId \\u003c= 10000) {\\n                    _booster += 30;\\n                } else {\\n                    _booster += 15;\\n                }\\n            } else {\\n                if (_alphaForWolf(animalId) == 5) {\\n                    _booster += 20;\\n                } else if (_alphaForWolf(animalId) == 6) {\\n                    _booster += 30;\\n                } else if (_alphaForWolf(animalId) == 7) {\\n                    _booster += 40;\\n                } else if (_alphaForWolf(animalId) == 8) {\\n                    _booster += 50;\\n                }\\n            }\\n        }\\n        return _booster;\\n    }\\n\\n    function plantLand(uint16 tokenId) external whenNotPaused {\\n        require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n        require(tokenId \\u003e 0, \\\"Token ID illegal\\\");\\n        require(!landPool[tokenId].worked, \\\"Already worked\\\");\\n        require(landPool[tokenId].owner == _msgSender(), \\\"AINT YO Land\\\");\\n\\n        _plantLand(tokenId);\\n\\n        if (tokenId \\u003c= 10000) {\\n            wool.transferFrom(\\n                _msgSender(),\\n                address(pouch),\\n                COST_PRIZE_PLANT_LAND.div(2)\\n            );\\n            wool.transferFrom(\\n                _msgSender(),\\n                0x000000000000000000000000000000000000dEaD,\\n                COST_BURN_PLANT_LAND.div(2)\\n            );\\n        } else {\\n            wool.transferFrom(\\n                _msgSender(),\\n                address(pouch),\\n                COST_PRIZE_PLANT_LAND\\n            );\\n            wool.transferFrom(\\n                _msgSender(),\\n                0x000000000000000000000000000000000000dEaD,\\n                COST_BURN_PLANT_LAND\\n            );\\n        }\\n    }\\n\\n    function unplantLand(uint16 tokenId) external whenNotPaused {\\n        require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n        require(tokenId \\u003e 0, \\\"Token ID illegal\\\");\\n        uint256 farmerId = landFarmer[tokenId];\\n        require(farmerId \\u003e 0, \\\"Farmer ID illegal\\\");\\n        LandToPool memory pool = landPool[tokenId];\\n        require(pool.owner == _msgSender(), \\\"AINT YO Land\\\");\\n        farmer.transferFrom(address(this), _msgSender(), farmerId);\\n        _unplantLand(_msgSender(), tokenId, farmerId);\\n    }\\n\\n    function _plantLand(uint256 tokenId) internal whenNotPaused {\\n        LandToPool storage pool = landPool[tokenId];\\n        pool.worked = true;\\n        landWork[tokenId] = LandWork({\\n            owner: _msgSender(),\\n            farmerId: uint16(landFarmer[tokenId]),\\n            value: uint80(block.timestamp)\\n        });\\n        landBooster[tokenId] = _landBooster(tokenId);\\n        totalBooster = totalBooster.add(landBooster[tokenId]);\\n        totalLandPlanted += 1;\\n        totalWoolNum += COST_PRIZE_PLANT_LAND;\\n        emit LandWorked(\\n            _msgSender(),\\n            tokenId,\\n            landFarmer[tokenId],\\n            block.timestamp\\n        );\\n    }\\n\\n    function _unplantLand(\\n        address account,\\n        uint256 tokenId,\\n        uint256 farmerId\\n    ) internal whenNotPaused {\\n        LandAnimal[] memory animals = landAnimal[tokenId];\\n        if (animals.length \\u003e 0) {\\n            for (uint256 i = animals.length - 1; i \\u003e= 0; i--) {\\n                _unstakeAnimal(account, tokenId, animals[i].animalId);\\n                if (i == 0) break;\\n            }\\n        }\\n        LandToPool storage pool = landPool[tokenId];\\n        pool.hasFarmer = false;\\n        pool.worked = false;\\n        delete landFarmer[tokenId];\\n        delete farmerLand[farmerId];\\n        delete landWork[tokenId];\\n\\n        totalBooster = totalBooster.sub(landBooster[tokenId]);\\n        landBooster[tokenId] = 0;\\n        totalLandPlanted -= 1;\\n        emit LandUnWorked(account, tokenId, farmerId, block.timestamp);\\n    }\\n\\n    function harvest(uint16[] calldata tokenIds) external whenNotPaused {\\n        require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n        require(tokenIds.length \\u003e 0, \\\"Invalid harvest amount\\\");\\n        for (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n            if (tokenIds[i] == 0) {\\n                continue;\\n            }\\n            require(\\n                landPool[tokenIds[i]].owner == _msgSender(),\\n                \\\"AINT YO TOKEN\\\"\\n            );\\n            require(landPool[tokenIds[i]].worked, \\\"Not Worked\\\");\\n            if (tokenIds[i] \\u003c= 10000) {\\n                require(\\n                    landWork[tokenIds[i]].value \\u003c=\\n                        uint80(block.timestamp - 3 * 3600),\\n                    \\\"Not At Time\\\"\\n                );\\n            } else {\\n                require(\\n                    landWork[tokenIds[i]].value \\u003c=\\n                        uint80(block.timestamp - 6 * 3600),\\n                    \\\"Not At Time\\\"\\n                );\\n            }\\n            pouch.mintPouch(landBooster[tokenIds[i]], _msgSender());\\n            landWork[tokenIds[i]].value = uint80(block.timestamp);\\n            landPool[tokenIds[i]].worked = false;\\n\\n            totalBooster = totalBooster.sub(landBooster[tokenIds[i]]);\\n            landBooster[tokenIds[i]] = 0;\\n\\n            emit LandHarvested(_msgSender(), tokenIds[i], block.timestamp);\\n        }\\n    }\\n\\n    function harvestMilk(uint16[] calldata tokenIds) external whenNotPaused {\\n        require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n        require(tokenIds.length \\u003e 0, \\\"Invalid harvest amount\\\");\\n        for (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n            require(\\n                landPool[tokenIds[i]].owner == _msgSender(),\\n                \\\"AINT YO TOKEN\\\"\\n            );\\n\\n            LandMilk storage landMilk = landMilkMap[tokenIds[i]];\\n            if (landMilk.lastBlockNumber \\u003e 0) {\\n                uint256 newMilkAmount = block\\n                    .number\\n                    .sub(landMilk.lastBlockNumber)\\n                    .mul(landMilk.sheepCount)\\n                    .mul(milkSpeed);\\n                milk.mint(\\n                    _msgSender(),\\n                    landMilk.unharvestedAmount.add(newMilkAmount)\\n                );\\n                landMilk.unharvestedAmount = 0;\\n                landMilk.lastBlockNumber = block.number;\\n            }\\n        }\\n    }\\n\\n    function fastHarvest(uint16[] calldata tokenIds) external whenNotPaused {\\n        require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n        require(tokenIds.length \\u003e 0, \\\"Invalid harvest amount\\\");\\n        uint256 totalWoolCost = 0;\\n        for (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n            if (tokenIds[i] == 0) {\\n                continue;\\n            }\\n            require(\\n                landPool[tokenIds[i]].owner == _msgSender(),\\n                \\\"AINT YO TOKEN\\\"\\n            );\\n            require(landPool[tokenIds[i]].worked, \\\"Not Worked\\\");\\n            totalWoolCost += 2500 ether;\\n            pouch.mintPouch(landBooster[tokenIds[i]], _msgSender());\\n            landWork[tokenIds[i]].value = uint80(block.timestamp);\\n            landPool[tokenIds[i]].worked = false;\\n\\n            totalBooster = totalBooster.sub(landBooster[tokenIds[i]]);\\n            landBooster[tokenIds[i]] = 0;\\n\\n            emit LandHarvested(_msgSender(), tokenIds[i], block.timestamp);\\n        }\\n        if (totalWoolCost \\u003e 0)\\n            wool.transferFrom(\\n                _msgSender(),\\n                0x000000000000000000000000000000000000dEaD,\\n                totalWoolCost\\n            );\\n    }\\n\\n    function stakeAnimal(uint16 tokenId, uint16[] calldata animalIds)\\n        external\\n        whenNotPaused\\n    {\\n        require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n        require(tokenId \\u003e 0, \\\"Token ID illegal\\\");\\n        require(animalIds.length \\u003e 0, \\\"Invalid stake amount\\\");\\n        require(landPool[tokenId].owner == _msgSender(), \\\"AINT YO Land\\\");\\n        require(\\n            landAnimal[tokenId].length + animalIds.length \\u003c= 2,\\n            \\\"Too many staked animals\\\"\\n        );\\n        for (uint256 i = 0; i \\u003c animalIds.length; i++) {\\n            if (animalIds[i] == 0) {\\n                continue;\\n            }\\n            require(\\n                woolf.ownerOf(animalIds[i]) == _msgSender(),\\n                \\\"AINT YO TOKEN\\\"\\n            );\\n            _stakeAnimal(_msgSender(), tokenId, animalIds[i]);\\n            woolf.transferFrom(_msgSender(), address(this), animalIds[i]);\\n        }\\n    }\\n\\n    function unstakeAnimal(uint16 tokenId, uint16[] calldata animalIds)\\n        external\\n        whenNotPaused\\n    {\\n        require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n        require(tokenId \\u003e 0, \\\"Token ID illegal\\\");\\n        require(animalIds.length \\u003e 0, \\\"Invalid stake amount\\\");\\n        LandToPool memory pool = landPool[tokenId];\\n        require(pool.owner == _msgSender(), \\\"AINT YO Land\\\");\\n        for (uint256 i = animalIds.length - 1; i \\u003e= 0; i--) {\\n            require(animalLand[animalIds[i]] == tokenId, \\\"AINT YO TOKEN\\\");\\n            _unstakeAnimal(_msgSender(), tokenId, animalIds[i]);\\n            if (i == 0) break;\\n        }\\n    }\\n\\n    function _isSheep(uint256 tokenId) internal view returns (bool sheep) {\\n        return woolf.getTokenTraits(tokenId).isSheep;\\n    }\\n\\n    function _alphaForWolf(uint256 tokenId) internal view returns (uint8) {\\n        uint8 alphaIndex = woolf.getTokenTraits(tokenId).alphaIndex;\\n        return MAX_ALPHA - alphaIndex; // alpha index is 0-3\\n    }\\n\\n    function _stakeAnimal(\\n        address account,\\n        uint256 tokenId,\\n        uint256 animalId\\n    ) internal whenNotPaused {\\n        animalIndices[animalId] = landAnimal[tokenId].length;\\n        landAnimal[tokenId].push(\\n            LandAnimal({\\n                owner: _msgSender(),\\n                animalId: uint16(animalId),\\n                value: uint80(block.timestamp)\\n            })\\n        );\\n        animalLand[animalId] = tokenId;\\n        // 15 20 30 40 50\\n        if (_isSheep(animalId)) {\\n            landPool[tokenId].hasSheep += 1;\\n            if (landMilkMap[tokenId].lastBlockNumber == 0) {\\n                landMilkMap[tokenId] = LandMilk({\\n                    unharvestedAmount: 0,\\n                    sheepCount: 1,\\n                    lastBlockNumber: block.number\\n                });\\n            } else {\\n                LandMilk storage landMilk = landMilkMap[tokenId];\\n                landMilk.unharvestedAmount = landMilk.unharvestedAmount.add(\\n                    block\\n                        .number\\n                        .sub(landMilk.lastBlockNumber)\\n                        .mul(landMilk.sheepCount)\\n                        .mul(milkSpeed)\\n                );\\n                landMilk.sheepCount += 1;\\n                landMilk.lastBlockNumber = block.number;\\n            }\\n        } else {\\n            landPool[tokenId].hasWolf += 1;\\n        }\\n        emit AnimalStaked(account, tokenId, animalId, block.timestamp);\\n    }\\n\\n    function _unstakeAnimal(\\n        address account,\\n        uint256 tokenId,\\n        uint256 animalId\\n    ) internal whenNotPaused {\\n        LandAnimal memory lastAnimal = landAnimal[tokenId][\\n            landAnimal[tokenId].length - 1\\n        ];\\n        landAnimal[tokenId][animalIndices[animalId]] = lastAnimal;\\n        animalIndices[lastAnimal.animalId] = animalIndices[animalId];\\n        landAnimal[tokenId].pop(); // Remove duplicate\\n        delete animalIndices[animalId];\\n        delete animalLand[animalId];\\n        LandToPool storage pool = landPool[tokenId];\\n        // 15 20 30 40 50\\n        if (_isSheep(animalId)) {\\n            pool.hasSheep -= 1;\\n            LandMilk storage landMilk = landMilkMap[tokenId];\\n            landMilk.unharvestedAmount = landMilk.unharvestedAmount.add(\\n                block\\n                    .number\\n                    .sub(landMilk.lastBlockNumber)\\n                    .mul(landMilk.sheepCount)\\n                    .mul(milkSpeed)\\n            );\\n            landMilk.sheepCount -= 1;\\n            landMilk.lastBlockNumber = block.number;\\n        } else {\\n            pool.hasWolf -= 1;\\n        }\\n        woolf.transferFrom(address(this), account, animalId);\\n        emit AnimalUnStaked(account, tokenId, animalId, block.timestamp);\\n    }\\n\\n    function withdrawERC721(\\n        address _token,\\n        uint256 _id,\\n        address _to\\n    ) public onlyOwner {\\n        IERC721 token = IERC721(_token);\\n        token.safeTransferFrom(address(this), _to, _id);\\n    }\\n\\n    function withdraw(address _token, address _to) public onlyOwner {\\n        if (_token == address(0x0)) {\\n            payable(_to).transfer(address(this).balance);\\n            return;\\n        }\\n\\n        ERC20 token = ERC20(_token);\\n        token.transfer(_to, token.balanceOf(address(this)));\\n    }\\n\\n    function setMilkSpeed(uint256 _milkSpeed) external onlyOwner {\\n        milkSpeed = _milkSpeed;\\n    }\\n\\n    function setPaused(bool _paused) external onlyOwner {\\n        if (_paused) _pause();\\n        else _unpause();\\n    }\\n\\n    function getLandsTotalNumber(address _userAddr)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return userLandsMap[_userAddr].length();\\n    }\\n\\n    function getUserLandIds(\\n        address _userAddr,\\n        uint256 _fromIndex,\\n        uint256 _toIndex\\n    ) external view returns (uint256[] memory landIds) {\\n        uint256 length = userLandsMap[_userAddr].length();\\n        if (_toIndex \\u003e length) _toIndex = length;\\n        require(_fromIndex \\u003c _toIndex, \\\"Index is wrong\\\");\\n\\n        landIds = new uint256[](_toIndex - _fromIndex);\\n        for (uint256 i = _fromIndex; i \\u003c _toIndex; i++) {\\n            uint256 landId = userLandsMap[_userAddr].at(i);\\n            landIds[i - _fromIndex] = landId;\\n        }\\n    }\\n\\n    function getFarmersTotalNumber(address _userAddr)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return userFarmersMap[_userAddr].length();\\n    }\\n\\n    function getUserFarmerIds(\\n        address _userAddr,\\n        uint256 _fromIndex,\\n        uint256 _toIndex\\n    ) external view returns (uint256[] memory farmerIds) {\\n        uint256 length = userFarmersMap[_userAddr].length();\\n        if (_toIndex \\u003e length) _toIndex = length;\\n        require(_fromIndex \\u003c _toIndex, \\\"Index is wrong\\\");\\n\\n        farmerIds = new uint256[](_toIndex - _fromIndex);\\n        for (uint256 i = _fromIndex; i \\u003c _toIndex; i++) {\\n            uint256 landId = userFarmersMap[_userAddr].at(i);\\n            farmerIds[i - _fromIndex] = landId;\\n        }\\n    }\\n}\\n\"},\"Milk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract Milk is ERC20, Ownable {\\r\\n\\r\\n  // a mapping from an address to whether or not it can mint / burn\\r\\n  mapping(address =\\u003e bool) controllers;\\r\\n  \\r\\n  constructor() ERC20(\\\"MILK\\\", \\\"MILK\\\") { }\\r\\n\\r\\n  /**\\r\\n   * mints $MILK to a recipient\\r\\n   * @param to the recipient of the $WOOL\\r\\n   * @param amount the amount of $WOOL to mint\\r\\n   */\\r\\n  function mint(address to, uint256 amount) external {\\r\\n    require(controllers[msg.sender], \\\"Only controllers can mint\\\");\\r\\n    _mint(to, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * burns $WOOL from a holder\\r\\n   * @param from the holder of the $WOOL\\r\\n   * @param amount the amount of $WOOL to burn\\r\\n   */\\r\\n  function burn(address from, uint256 amount) external {\\r\\n    require(controllers[msg.sender], \\\"Only controllers can burn\\\");\\r\\n    _burn(from, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * enables an address to mint / burn\\r\\n   * @param controller the address to enable\\r\\n   */\\r\\n  function addController(address controller) external onlyOwner {\\r\\n    controllers[controller] = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * disables an address from minting / burning\\r\\n   * @param controller the address to disbale\\r\\n   */\\r\\n  function removeController(address controller) external onlyOwner {\\r\\n    controllers[controller] = false;\\r\\n  }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n  /**\\r\\n  * @dev Multiplies two numbers, throws on overflow.\\r\\n  */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Integer division of two numbers, truncating the quotient.\\r\\n  */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n    // uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n  */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    assert(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Adds two numbers, throws on overflow.\\r\\n  */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    c = a + b;\\r\\n    assert(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n}\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp \\u003e\\u003e= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\r\\n            value \\u003e\\u003e= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\"},\"Traits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\nimport \\\"./ITraits.sol\\\";\\r\\nimport \\\"./IWoolf.sol\\\";\\r\\n\\r\\ncontract Traits is Ownable, ITraits {\\r\\n\\r\\n  using Strings for uint256;\\r\\n\\r\\n  // struct to store each trait\\u0027s data for metadata and rendering\\r\\n  struct Trait {\\r\\n    string name;\\r\\n    string png;\\r\\n  }\\r\\n\\r\\n  // mapping from trait type (index) to its name\\r\\n  string[9] _traitTypes = [\\r\\n    \\\"Fur\\\",\\r\\n    \\\"Head\\\",\\r\\n    \\\"Ears\\\",\\r\\n    \\\"Eyes\\\",\\r\\n    \\\"Nose\\\",\\r\\n    \\\"Mouth\\\",\\r\\n    \\\"Neck\\\",\\r\\n    \\\"Feet\\\",\\r\\n    \\\"Alpha\\\"\\r\\n  ];\\r\\n  // storage of each traits name and base64 PNG data\\r\\n  mapping(uint8 =\\u003e mapping(uint8 =\\u003e Trait)) public traitData;\\r\\n  // mapping from alphaIndex to its score\\r\\n  string[4] _alphas = [\\r\\n    \\\"8\\\",\\r\\n    \\\"7\\\",\\r\\n    \\\"6\\\",\\r\\n    \\\"5\\\"\\r\\n  ];\\r\\n\\r\\n  IWoolf public woolf;\\r\\n\\r\\n  constructor() {}\\r\\n\\r\\n  /** ADMIN */\\r\\n\\r\\n  function setWoolf(address _woolf) external onlyOwner {\\r\\n    woolf = IWoolf(_woolf);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * administrative to upload the names and images associated with each trait\\r\\n   * @param traitType the trait type to upload the traits for (see traitTypes for a mapping)\\r\\n   * @param traits the names and base64 encoded PNGs for each trait\\r\\n   */\\r\\n  function uploadTraits(uint8 traitType, uint8[] calldata traitIds, Trait[] calldata traits) external onlyOwner {\\r\\n    require(traitIds.length == traits.length, \\\"Mismatched inputs\\\");\\r\\n    for (uint i = 0; i \\u003c traits.length; i++) {\\r\\n      traitData[traitType][traitIds[i]] = Trait(\\r\\n        traits[i].name,\\r\\n        traits[i].png\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** RENDER */\\r\\n\\r\\n  /**\\r\\n   * generates an \\u003cimage\\u003e element using base64 encoded PNGs\\r\\n   * @param trait the trait storing the PNG data\\r\\n   * @return the \\u003cimage\\u003e element\\r\\n   */\\r\\n  function drawTrait(Trait memory trait) internal pure returns (string memory) {\\r\\n    return string(abi.encodePacked(\\r\\n      \\u0027\\u003cimage x=\\\"4\\\" y=\\\"4\\\" width=\\\"32\\\" height=\\\"32\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,\\u0027,\\r\\n      trait.png,\\r\\n      \\u0027\\\"/\\u003e\\u0027\\r\\n    ));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * generates an entire SVG by composing multiple \\u003cimage\\u003e elements of PNGs\\r\\n   * @param tokenId the ID of the token to generate an SVG for\\r\\n   * @return a valid SVG of the Sheep / Wolf\\r\\n   */\\r\\n  function drawSVG(uint256 tokenId) public view returns (string memory) {\\r\\n    IWoolf.SheepWolf memory s = woolf.getTokenTraits(tokenId);\\r\\n    uint8 shift = s.isSheep ? 0 : 9;\\r\\n\\r\\n    string memory svgString = string(abi.encodePacked(\\r\\n      drawTrait(traitData[0 + shift][s.fur]),\\r\\n      s.isSheep ? drawTrait(traitData[1 + shift][s.head]) : drawTrait(traitData[1 + shift][s.alphaIndex]),\\r\\n      s.isSheep ? drawTrait(traitData[2 + shift][s.ears]) : \\u0027\\u0027,\\r\\n      drawTrait(traitData[3 + shift][s.eyes]),\\r\\n      s.isSheep ? drawTrait(traitData[4 + shift][s.nose]) : \\u0027\\u0027,\\r\\n      drawTrait(traitData[5 + shift][s.mouth]),\\r\\n      s.isSheep ? \\u0027\\u0027 : drawTrait(traitData[6 + shift][s.neck]),\\r\\n      s.isSheep ? drawTrait(traitData[7 + shift][s.feet]) : \\u0027\\u0027\\r\\n    ));\\r\\n\\r\\n    return string(abi.encodePacked(\\r\\n      \\u0027\\u003csvg id=\\\"woolf\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 40 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\u003e\\u0027,\\r\\n      svgString,\\r\\n      \\\"\\u003c/svg\\u003e\\\"\\r\\n    ));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * generates an attribute for the attributes array in the ERC721 metadata standard\\r\\n   * @param traitType the trait type to reference as the metadata key\\r\\n   * @param value the token\\u0027s trait associated with the key\\r\\n   * @return a JSON dictionary for the single attribute\\r\\n   */\\r\\n  function attributeForTypeAndValue(string memory traitType, string memory value) internal pure returns (string memory) {\\r\\n    return string(abi.encodePacked(\\r\\n      \\u0027{\\\"trait_type\\\":\\\"\\u0027,\\r\\n      traitType,\\r\\n      \\u0027\\\",\\\"value\\\":\\\"\\u0027,\\r\\n      value,\\r\\n      \\u0027\\\"}\\u0027\\r\\n    ));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * generates an array composed of all the individual traits and values\\r\\n   * @param tokenId the ID of the token to compose the metadata for\\r\\n   * @return a JSON array of all of the attributes for given token ID\\r\\n   */\\r\\n  function compileAttributes(uint256 tokenId) public view returns (string memory) {\\r\\n    IWoolf.SheepWolf memory s = woolf.getTokenTraits(tokenId);\\r\\n    string memory traits;\\r\\n    if (s.isSheep) {\\r\\n      traits = string(abi.encodePacked(\\r\\n        attributeForTypeAndValue(_traitTypes[0], traitData[0][s.fur].name),\\u0027,\\u0027,\\r\\n        attributeForTypeAndValue(_traitTypes[1], traitData[1][s.head].name),\\u0027,\\u0027,\\r\\n        attributeForTypeAndValue(_traitTypes[2], traitData[2][s.ears].name),\\u0027,\\u0027,\\r\\n        attributeForTypeAndValue(_traitTypes[3], traitData[3][s.eyes].name),\\u0027,\\u0027,\\r\\n        attributeForTypeAndValue(_traitTypes[4], traitData[4][s.nose].name),\\u0027,\\u0027,\\r\\n        attributeForTypeAndValue(_traitTypes[5], traitData[5][s.mouth].name),\\u0027,\\u0027,\\r\\n        attributeForTypeAndValue(_traitTypes[7], traitData[7][s.feet].name),\\u0027,\\u0027\\r\\n      ));\\r\\n    } else {\\r\\n      traits = string(abi.encodePacked(\\r\\n        attributeForTypeAndValue(_traitTypes[0], traitData[9][s.fur].name),\\u0027,\\u0027,\\r\\n        attributeForTypeAndValue(_traitTypes[1], traitData[10][s.alphaIndex].name),\\u0027,\\u0027,\\r\\n        attributeForTypeAndValue(_traitTypes[3], traitData[12][s.eyes].name),\\u0027,\\u0027,\\r\\n        attributeForTypeAndValue(_traitTypes[5], traitData[14][s.mouth].name),\\u0027,\\u0027,\\r\\n        attributeForTypeAndValue(_traitTypes[6], traitData[15][s.neck].name),\\u0027,\\u0027,\\r\\n        attributeForTypeAndValue(\\\"Alpha Score\\\", _alphas[s.alphaIndex]),\\u0027,\\u0027\\r\\n      ));\\r\\n    }\\r\\n    return string(abi.encodePacked(\\r\\n      \\u0027[\\u0027,\\r\\n      traits,\\r\\n      \\u0027{\\\"trait_type\\\":\\\"Generation\\\",\\\"value\\\":\\u0027,\\r\\n      tokenId \\u003c= woolf.getPaidTokens() ? \\u0027\\\"Gen 0\\\"\\u0027 : \\u0027\\\"Gen 1\\\"\\u0027,\\r\\n      \\u0027},{\\\"trait_type\\\":\\\"Type\\\",\\\"value\\\":\\u0027,\\r\\n      s.isSheep ? \\u0027\\\"Sheep\\\"\\u0027 : \\u0027\\\"Wolf\\\"\\u0027,\\r\\n      \\u0027}]\\u0027\\r\\n    ));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * generates a base64 encoded metadata response without referencing off-chain content\\r\\n   * @param tokenId the ID of the token to generate the metadata for\\r\\n   * @return a base64 encoded JSON dictionary of the token\\u0027s metadata and SVG\\r\\n   */\\r\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n    IWoolf.SheepWolf memory s = woolf.getTokenTraits(tokenId);\\r\\n\\r\\n    string memory metadata = string(abi.encodePacked(\\r\\n      \\u0027{\\\"name\\\": \\\"\\u0027,\\r\\n      s.isSheep ? \\u0027Sheep #\\u0027 : \\u0027Wolf #\\u0027,\\r\\n      tokenId.toString(),\\r\\n      \\u0027\\\", \\\"description\\\": \\\"Thousands of Sheep and Wolves compete on a farm in the metaverse. A tempting prize of $WOOL awaits, with deadly high stakes. All the metadata and images are generated and stored 100% on-chain. No IPFS. NO API. Just the Ethereum blockchain.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,\\u0027,\\r\\n      base64(bytes(drawSVG(tokenId))),\\r\\n      \\u0027\\\", \\\"attributes\\\":\\u0027,\\r\\n      compileAttributes(tokenId),\\r\\n      \\\"}\\\"\\r\\n    ));\\r\\n\\r\\n    return string(abi.encodePacked(\\r\\n      \\\"data:application/json;base64,\\\",\\r\\n      base64(bytes(metadata))\\r\\n    ));\\r\\n  }\\r\\n\\r\\n  /** BASE 64 - Written by Brech Devos */\\r\\n  \\r\\n  string internal constant TABLE = \\u0027ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\u0027;\\r\\n\\r\\n  function base64(bytes memory data) internal pure returns (string memory) {\\r\\n    if (data.length == 0) return \\u0027\\u0027;\\r\\n    \\r\\n    // load the table into memory\\r\\n    string memory table = TABLE;\\r\\n\\r\\n    // multiply by 4/3 rounded up\\r\\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n    // add some extra buffer at the end required for the writing\\r\\n    string memory result = new string(encodedLen + 32);\\r\\n\\r\\n    assembly {\\r\\n      // set the actual output length\\r\\n      mstore(result, encodedLen)\\r\\n      \\r\\n      // prepare the lookup table\\r\\n      let tablePtr := add(table, 1)\\r\\n      \\r\\n      // input ptr\\r\\n      let dataPtr := data\\r\\n      let endPtr := add(dataPtr, mload(data))\\r\\n      \\r\\n      // result ptr, jump over length\\r\\n      let resultPtr := add(result, 32)\\r\\n      \\r\\n      // run over the input, 3 bytes at a time\\r\\n      for {} lt(dataPtr, endPtr) {}\\r\\n      {\\r\\n          dataPtr := add(dataPtr, 3)\\r\\n          \\r\\n          // read 3 bytes\\r\\n          let input := mload(dataPtr)\\r\\n          \\r\\n          // write 4 characters\\r\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\r\\n          resultPtr := add(resultPtr, 1)\\r\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\r\\n          resultPtr := add(resultPtr, 1)\\r\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\r\\n          resultPtr := add(resultPtr, 1)\\r\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\r\\n          resultPtr := add(resultPtr, 1)\\r\\n      }\\r\\n      \\r\\n      // padding with \\u0027=\\u0027\\r\\n      switch mod(mload(data), 3)\\r\\n      case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\r\\n      case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\r\\n    }\\r\\n    \\r\\n    return result;\\r\\n  }\\r\\n}\"},\"WOOL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract WOOL is ERC20, Ownable {\\r\\n\\r\\n  // a mapping from an address to whether or not it can mint / burn\\r\\n  mapping(address =\\u003e bool) controllers;\\r\\n  \\r\\n  constructor() ERC20(\\\"WOOL\\\", \\\"WOOL\\\") { }\\r\\n\\r\\n  /**\\r\\n   * mints $WOOL to a recipient\\r\\n   * @param to the recipient of the $WOOL\\r\\n   * @param amount the amount of $WOOL to mint\\r\\n   */\\r\\n  function mint(address to, uint256 amount) external {\\r\\n    require(controllers[msg.sender], \\\"Only controllers can mint\\\");\\r\\n    _mint(to, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * burns $WOOL from a holder\\r\\n   * @param from the holder of the $WOOL\\r\\n   * @param amount the amount of $WOOL to burn\\r\\n   */\\r\\n  function burn(address from, uint256 amount) external {\\r\\n    require(controllers[msg.sender], \\\"Only controllers can burn\\\");\\r\\n    _burn(from, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * enables an address to mint / burn\\r\\n   * @param controller the address to enable\\r\\n   */\\r\\n  function addController(address controller) external onlyOwner {\\r\\n    controllers[controller] = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * disables an address from minting / burning\\r\\n   * @param controller the address to disbale\\r\\n   */\\r\\n  function removeController(address controller) external onlyOwner {\\r\\n    controllers[controller] = false;\\r\\n  }\\r\\n  \\r\\n  function exchange() external {\\r\\n      require(tx.origin == msg.sender);\\r\\n      ERC20 oldWool = ERC20(0xdeFe17E96f89c359AA2325a196f07ACe730CE329);\\r\\n      uint256 woolBalance = oldWool.balanceOf(msg.sender);\\r\\n      require(woolBalance \\u003e 0, \\u0027insufficient wool\\u0027);\\r\\n \\r\\n      oldWool.transferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, woolBalance);\\r\\n      _mint(msg.sender, woolBalance);\\r\\n  }\\r\\n}\\r\\n\"},\"Woolf.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./ERC721Enumerable.sol\\\";\\r\\nimport \\\"./IWoolf.sol\\\";\\r\\nimport \\\"./IBarn.sol\\\";\\r\\nimport \\\"./ITraits.sol\\\";\\r\\nimport \\\"./WOOL.sol\\\";\\r\\n\\r\\ninterface RandomPicker {\\r\\n    function getRandom(uint256 seed) external view returns (uint256);\\r\\n    function addNonce() external;\\r\\n}\\r\\n\\r\\ncontract Woolf is IWoolf, ERC721Enumerable, Ownable, Pausable {\\r\\n  RandomPicker public random;\\r\\n  Woolf public woolfV1;\\r\\n\\r\\n  // mint price\\r\\n  uint256 public MINT_PRICE = .16 ether;\\r\\n  // max number of tokens that can be minted - 50000 in production\\r\\n  uint256 public immutable MAX_TOKENS;\\r\\n  // number of tokens that can be claimed for free - 20% of MAX_TOKENS\\r\\n  uint256 public PAID_TOKENS;\\r\\n  // number of tokens have been minted so far\\r\\n  uint16 public minted = 12301;\\r\\n\\r\\n  // mapping from tokenId to a struct containing the token\\u0027s traits\\r\\n  mapping(uint256 =\\u003e SheepWolf) public tokenTraits;\\r\\n  // mapping from hashed(tokenTrait) to the tokenId it\\u0027s associated with\\r\\n  // used to ensure there are no duplicates\\r\\n  mapping(uint256 =\\u003e uint256) public existingCombinations;\\r\\n\\r\\n  // list of probabilities for each trait type\\r\\n  // 0 - 9 are associated with Sheep, 10 - 18 are associated with Wolves\\r\\n  uint8[][18] public rarities;\\r\\n  // list of aliases for Walker\\u0027s Alias algorithm\\r\\n  // 0 - 9 are associated with Sheep, 10 - 18 are associated with Wolves\\r\\n  uint8[][18] public aliases;\\r\\n\\r\\n  // reference to the Barn for choosing random Wolf thieves\\r\\n  IBarn public barn;\\r\\n  // reference to $WOOL for burning on mint\\r\\n  WOOL public wool;\\r\\n  // reference to Traits\\r\\n  ITraits public traits;\\r\\n\\r\\n  /** \\r\\n   * instantiates contract and rarity tables\\r\\n   */\\r\\n  constructor(address _wool, address _traits, uint256 _maxTokens, address _woolfV1) ERC721(\\\"Wolf Game\\\", \\u0027WGAME\\u0027) { \\r\\n    wool = WOOL(_wool);\\r\\n    traits = ITraits(_traits);\\r\\n    MAX_TOKENS = _maxTokens;\\r\\n    PAID_TOKENS = _maxTokens / 5;\\r\\n    woolfV1 = Woolf(_woolfV1);\\r\\n\\r\\n    // I know this looks weird but it saves users gas by making lookup O(1)\\r\\n    // A.J. Walker\\u0027s Alias Algorithm\\r\\n    // sheep\\r\\n    // fur\\r\\n    rarities[0] = [15, 50, 200, 250, 255];\\r\\n    aliases[0] = [4, 4, 4, 4, 4];\\r\\n    // head\\r\\n    rarities[1] = [190, 215, 240, 100, 110, 135, 160, 185, 80, 210, 235, 240, 80, 80, 100, 100, 100, 245, 250, 255];\\r\\n    aliases[1] = [1, 2, 4, 0, 5, 6, 7, 9, 0, 10, 11, 17, 0, 0, 0, 0, 4, 18, 19, 19];\\r\\n    // ears\\r\\n    rarities[2] =  [255, 30, 60, 60, 150, 156];\\r\\n    aliases[2] = [0, 0, 0, 0, 0, 0];\\r\\n    // eyes\\r\\n    rarities[3] = [221, 100, 181, 140, 224, 147, 84, 228, 140, 224, 250, 160, 241, 207, 173, 84, 254, 220, 196, 140, 168, 252, 140, 183, 236, 252, 224, 255];\\r\\n    aliases[3] = [1, 2, 5, 0, 1, 7, 1, 10, 5, 10, 11, 12, 13, 14, 16, 11, 17, 23, 13, 14, 17, 23, 23, 24, 27, 27, 27, 27];\\r\\n    // nose\\r\\n    rarities[4] = [175, 100, 40, 250, 115, 100, 185, 175, 180, 255];\\r\\n    aliases[4] = [3, 0, 4, 6, 6, 7, 8, 8, 9, 9];\\r\\n    // mouth\\r\\n    rarities[5] = [80, 225, 227, 228, 112, 240, 64, 160, 167, 217, 171, 64, 240, 126, 80, 255];\\r\\n    aliases[5] = [1, 2, 3, 8, 2, 8, 8, 9, 9, 10, 13, 10, 13, 15, 13, 15];\\r\\n    // neck\\r\\n    rarities[6] = [255];\\r\\n    aliases[6] = [0];\\r\\n    // feet\\r\\n    rarities[7] = [243, 189, 133, 133, 57, 95, 152, 135, 133, 57, 222, 168, 57, 57, 38, 114, 114, 114, 255];\\r\\n    aliases[7] = [1, 7, 0, 0, 0, 0, 0, 10, 0, 0, 11, 18, 0, 0, 0, 1, 7, 11, 18];\\r\\n    // alphaIndex\\r\\n    rarities[8] = [255];\\r\\n    aliases[8] = [0];\\r\\n\\r\\n    // wolves\\r\\n    // fur\\r\\n    rarities[9] = [210, 90, 9, 9, 9, 150, 9, 255, 9];\\r\\n    aliases[9] = [5, 0, 0, 5, 5, 7, 5, 7, 5];\\r\\n    // head\\r\\n    rarities[10] = [255];\\r\\n    aliases[10] = [0];\\r\\n    // ears\\r\\n    rarities[11] = [255];\\r\\n    aliases[11] = [0];\\r\\n    // eyes\\r\\n    rarities[12] = [135, 177, 219, 141, 183, 225, 147, 189, 231, 135, 135, 135, 135, 246, 150, 150, 156, 165, 171, 180, 186, 195, 201, 210, 243, 252, 255];\\r\\n    aliases[12] = [1, 2, 3, 4, 5, 6, 7, 8, 13, 3, 6, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 26, 26];\\r\\n    // nose\\r\\n    rarities[13] = [255];\\r\\n    aliases[13] = [0];\\r\\n    // mouth\\r\\n    rarities[14] = [239, 244, 249, 234, 234, 234, 234, 234, 234, 234, 130, 255, 247];\\r\\n    aliases[14] = [1, 2, 11, 0, 11, 11, 11, 11, 11, 11, 11, 11, 11];\\r\\n    // neck\\r\\n    rarities[15] = [75, 180, 165, 120, 60, 150, 105, 195, 45, 225, 75, 45, 195, 120, 255];\\r\\n    aliases[15] = [1, 9, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 14, 12, 14];\\r\\n    // feet \\r\\n    rarities[16] = [255];\\r\\n    aliases[16] = [0];\\r\\n    // alphaIndex\\r\\n    rarities[17] = [8, 160, 73, 255]; \\r\\n    aliases[17] = [2, 3, 3, 3];\\r\\n  }\\r\\n\\r\\n  /** EXTERNAL */\\r\\n\\r\\n  /** \\r\\n   * mint a token - 90% Sheep, 10% Wolves\\r\\n   * The first 20% are free to claim, the remaining cost $WOOL\\r\\n   */\\r\\n  function mint(uint256 amount, bool stake) external payable whenNotPaused {\\r\\n    require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\r\\n    require(minted + amount \\u003c= MAX_TOKENS, \\\"All tokens minted\\\");\\r\\n    require(amount \\u003e 0 \\u0026\\u0026 amount \\u003c= 10, \\\"Invalid mint amount\\\");\\r\\n    if (minted \\u003c PAID_TOKENS) {\\r\\n      require(minted + amount \\u003c= PAID_TOKENS, \\\"All tokens on-sale already sold\\\");\\r\\n      require(amount * MINT_PRICE == msg.value, \\\"Invalid payment amount\\\");\\r\\n    } else {\\r\\n      require(msg.value == 0);\\r\\n    }\\r\\n\\r\\n    uint256 totalWoolCost = 0;\\r\\n    uint16[] memory tokenIds = stake ? new uint16[](amount) : new uint16[](0);\\r\\n    uint256 seed;\\r\\n    for (uint i = 0; i \\u003c amount; i++) {\\r\\n      minted++;\\r\\n      random.addNonce();\\r\\n      seed = random.getRandom(minted);\\r\\n      address recipient = selectRecipient(seed);\\r\\n      if (!stake || recipient != _msgSender()) {\\r\\n        _safeMint(recipient, minted);\\r\\n      } else {\\r\\n        _safeMint(address(barn), minted);\\r\\n        tokenIds[i] = minted;\\r\\n      }\\r\\n      generate(minted, seed);\\r\\n      totalWoolCost += mintCost(minted);\\r\\n    }\\r\\n    \\r\\n    if (totalWoolCost \\u003e 0) wool.burn(_msgSender(), totalWoolCost);\\r\\n    if (stake) barn.addManyToBarnAndPack(_msgSender(), tokenIds);\\r\\n  }\\r\\n  \\r\\n  // for v1 transfer to v2, packIndices corespounding\\r\\n  function emergencyMint(uint256 tokenId, address recipient) external onlyOwner whenNotPaused {\\r\\n      _safeMint(recipient, tokenId);\\r\\n  }\\r\\n  \\r\\n  function upgradeMint(uint16[] calldata tokenIds) external whenNotPaused {\\r\\n      require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\r\\n      for (uint i = 0; i \\u003c tokenIds.length; i++) {\\r\\n          ERC721(0x79c6AD13b3deFE0A706557Df3540de15c0adD0A3).transferFrom(_msgSender(), 0x000000000000000000000000000000000000dEaD, tokenIds[i]);\\r\\n          _safeMint(msg.sender, tokenIds[i]);\\r\\n      }\\r\\n  }\\r\\n\\r\\n  /** \\r\\n   * the first 20% are paid in ETH\\r\\n   * the next 20% are 20000 $WOOL\\r\\n   * the next 40% are 40000 $WOOL\\r\\n   * the final 20% are 80000 $WOOL\\r\\n   * @param tokenId the ID to check the cost of to mint\\r\\n   * @return the cost of the given token ID\\r\\n   */\\r\\n  function mintCost(uint256 tokenId) public view returns (uint256) {\\r\\n    if (tokenId \\u003c= PAID_TOKENS) return 0;\\r\\n    if (tokenId \\u003c= MAX_TOKENS * 2 / 5) return 20000 ether;\\r\\n    if (tokenId \\u003c= MAX_TOKENS * 4 / 5) return 40000 ether;\\r\\n    return 80000 ether;\\r\\n  }\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public virtual override {\\r\\n    // Hardcode the Barn\\u0027s approval so that users don\\u0027t have to waste gas approving\\r\\n    if (_msgSender() != address(barn))\\r\\n      require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n    _transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  /** INTERNAL */\\r\\n\\r\\n  /**\\r\\n   * generates traits for a specific token, checking to make sure it\\u0027s unique\\r\\n   * @param tokenId the id of the token to generate traits for\\r\\n   * @param seed a pseudorandom 256 bit number to derive traits from\\r\\n   * @return t - a struct of traits for the given token ID\\r\\n   */\\r\\n  function generate(uint256 tokenId, uint256 seed) internal returns (SheepWolf memory t) {\\r\\n    t = selectTraits(seed);\\r\\n    if (existingCombinations[structToHash(t)] == 0) {\\r\\n      tokenTraits[tokenId] = t;\\r\\n      existingCombinations[structToHash(t)] = tokenId;\\r\\n      return t;\\r\\n    }\\r\\n    return generate(tokenId, random.getRandom(seed));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * uses A.J. Walker\\u0027s Alias algorithm for O(1) rarity table lookup\\r\\n   * ensuring O(1) instead of O(n) reduces mint cost by more than 50%\\r\\n   * probability \\u0026 alias tables are generated off-chain beforehand\\r\\n   * @param seed portion of the 256 bit seed to remove trait correlation\\r\\n   * @param traitType the trait type to select a trait for \\r\\n   * @return the ID of the randomly selected trait\\r\\n   */\\r\\n  function selectTrait(uint16 seed, uint8 traitType) internal view returns (uint8) {\\r\\n    uint8 trait = uint8(seed) % uint8(rarities[traitType].length);\\r\\n    if (seed \\u003e\\u003e 8 \\u003c rarities[traitType][trait]) return trait;\\r\\n    return aliases[traitType][trait];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * the first 20% (ETH purchases) go to the minter\\r\\n   * the remaining 80% have a 10% chance to be given to a random staked wolf\\r\\n   * @param seed a random value to select a recipient from\\r\\n   * @return the address of the recipient (either the minter or the Wolf thief\\u0027s owner)\\r\\n   */\\r\\n  function selectRecipient(uint256 seed) internal view returns (address) {\\r\\n    if (minted \\u003c= PAID_TOKENS || ((seed \\u003e\\u003e 245) % 10) != 0) return _msgSender(); // top 10 bits haven\\u0027t been used\\r\\n    address thief = barn.randomWolfOwner(seed \\u003e\\u003e 144); // 144 bits reserved for trait selection\\r\\n    if (thief == address(0x0)) return _msgSender();\\r\\n    return thief;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * selects the species and all of its traits based on the seed value\\r\\n   * @param seed a pseudorandom 256 bit number to derive traits from\\r\\n   * @return t -  a struct of randomly selected traits\\r\\n   */\\r\\n  function selectTraits(uint256 seed) internal view returns (SheepWolf memory t) {    \\r\\n    t.isSheep = (seed \\u0026 0xFFFF) % 10 != 0;\\r\\n    uint8 shift = t.isSheep ? 0 : 9;\\r\\n    seed \\u003e\\u003e= 16;\\r\\n    t.fur = selectTrait(uint16(seed \\u0026 0xFFFF), 0 + shift);\\r\\n    seed \\u003e\\u003e= 16;\\r\\n    t.head = selectTrait(uint16(seed \\u0026 0xFFFF), 1 + shift);\\r\\n    seed \\u003e\\u003e= 16;\\r\\n    t.ears = selectTrait(uint16(seed \\u0026 0xFFFF), 2 + shift);\\r\\n    seed \\u003e\\u003e= 16;\\r\\n    t.eyes = selectTrait(uint16(seed \\u0026 0xFFFF), 3 + shift);\\r\\n    seed \\u003e\\u003e= 16;\\r\\n    t.nose = selectTrait(uint16(seed \\u0026 0xFFFF), 4 + shift);\\r\\n    seed \\u003e\\u003e= 16;\\r\\n    t.mouth = selectTrait(uint16(seed \\u0026 0xFFFF), 5 + shift);\\r\\n    seed \\u003e\\u003e= 16;\\r\\n    t.neck = selectTrait(uint16(seed \\u0026 0xFFFF), 6 + shift);\\r\\n    seed \\u003e\\u003e= 16;\\r\\n    t.feet = selectTrait(uint16(seed \\u0026 0xFFFF), 7 + shift);\\r\\n    seed \\u003e\\u003e= 16;\\r\\n    t.alphaIndex = selectTrait(uint16(seed \\u0026 0xFFFF), 8 + shift);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * converts a struct to a 256 bit hash to check for uniqueness\\r\\n   * @param s the struct to pack into a hash\\r\\n   * @return the 256 bit hash of the struct\\r\\n   */\\r\\n  function structToHash(SheepWolf memory s) internal pure returns (uint256) {\\r\\n    return uint256(bytes32(\\r\\n      abi.encodePacked(\\r\\n        s.isSheep,\\r\\n        s.fur,\\r\\n        s.head,\\r\\n        s.eyes,\\r\\n        s.mouth,\\r\\n        s.neck,\\r\\n        s.ears,\\r\\n        s.feet,\\r\\n        s.alphaIndex\\r\\n      )\\r\\n    ));\\r\\n  }\\r\\n\\r\\n  /** READ */\\r\\n\\r\\n  function getTokenTraits(uint256 tokenId) external view override returns (SheepWolf memory) {\\r\\n    if (tokenId \\u003c= 12301) return woolfV1.getTokenTraits(tokenId);\\r\\n    else return tokenTraits[tokenId];\\r\\n  }\\r\\n\\r\\n  function getPaidTokens() external view override returns (uint256) {\\r\\n    return PAID_TOKENS;\\r\\n  }\\r\\n\\r\\n  /** ADMIN */\\r\\n\\r\\n  /**\\r\\n   * called after deployment so that the contract can get random wolf thieves\\r\\n   * @param _barn the address of the Barn\\r\\n   */\\r\\n  function setBarn(address _barn) external onlyOwner {\\r\\n    barn = IBarn(_barn);\\r\\n  }\\r\\n  \\r\\n  function setRandomAddress(address _address) external onlyOwner {\\r\\n      random = RandomPicker(_address);\\r\\n  }\\r\\n\\r\\n  function setOldWoolfAddress(address _address) external onlyOwner {\\r\\n      woolfV1 = Woolf(_address);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * allows owner to withdraw funds from minting\\r\\n   */\\r\\n  function withdraw() external onlyOwner {\\r\\n    payable(owner()).transfer(address(this).balance);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * updates the number of tokens for sale\\r\\n   */\\r\\n  function setPaidTokens(uint256 _paidTokens) external onlyOwner {\\r\\n    PAID_TOKENS = _paidTokens;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * enables owner to pause / unpause minting\\r\\n   */\\r\\n  function setPaused(bool _paused) external onlyOwner {\\r\\n    if (_paused) _pause();\\r\\n    else _unpause();\\r\\n  }\\r\\n\\r\\n  /** RENDER */\\r\\n  \\r\\n  function setMintPrice(uint256 _price) external onlyOwner {\\r\\n      MINT_PRICE = _price;\\r\\n  }\\r\\n\\r\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n    return traits.tokenURI(tokenId);\\r\\n  }\\r\\n}\\r\\n\"},\"WoolPouch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./ERC721Enumerable.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\ninterface Random {\\n    function getRandom(uint256 seed, uint256 range) external view returns (uint256);\\n    function addNonce() external;\\n}\\n\\ninterface LandPlant {\\n    function getBaseNumber() external view returns (uint256);\\n}\\n\\ncontract WoolPouch is ERC721Enumerable, Ownable, Pausable {\\n    Random public random;\\n    uint256 public minted;\\n    address public woolAddress = 0xA46346bC9d110907b5ACE36B53263320baf1cD21;\\n    address public landPlantAddress = 0xDF5B4BcEd98Dd413a254EFd8D478186721a2cD73;\\n    mapping(uint256 =\\u003e string) public uriData;\\n\\n    constructor() ERC721 (\\\"Wolf Game DAO Wool Pouch\\\", \\\"WOOLP\\\") {}\\n\\n    struct Pouch {\\n        uint256 rarity;\\n        uint256 booster;\\n        uint256 random;\\n        bool opened;\\n    }\\n\\n    struct Payout {\\n        uint256 minPayout;\\n        uint256 maxPayout;\\n    }\\n\\n    mapping(uint256 =\\u003e Pouch) public Pouches;\\n    mapping(uint256 =\\u003e uint256) public woolClaimed;\\n\\n    mapping(uint256 =\\u003e Payout) public PouchPayouts; // rarity =\\u003e payout\\n    mapping(address =\\u003e uint256) public openRankings; // address =\\u003e opencount\\n\\n    function open(uint256 id) public whenNotPaused {\\n        require(tx.origin == _msgSender(), \\\"Only from EOA\\\");\\n        require(Pouches[id].opened == false, \\\"Pouch already opened.\\\");\\n        require(id \\u003e 0, \\\"Token ID illegal\\\");\\n        ERC721(address(this)).safeTransferFrom(_msgSender(), 0x000000000000000000000000000000000000dEaD, id);\\n        uint256 rarity = Pouches[id].rarity;\\n        uint256 booster = Pouches[id].booster;\\n        uint256 payout = _calcPayout(rarity, booster);\\n        Pouches[id].opened = true;\\n        woolClaimed[id] = payout;\\n        openRankings[_msgSender()]++;\\n        ERC20(woolAddress).transfer(_msgSender(), payout);\\n    }\\n\\n    function _calcPayout(uint256 rarity, uint256 booster) internal returns (uint256) {\\n        uint256 baseNumber = _getBaseNumber();\\n        uint256 seed = random.getRandom(minted, 10000) + 1;\\n        random.addNonce();\\n        uint256 payout = 0;\\n        if (rarity == 0) {\\n            payout = baseNumber * seed / 10000; // rarity 0 payout\\n        } else {\\n            payout = PouchPayouts[rarity].maxPayout * seed / 10000; // rarity 1 2\\n            if (payout \\u003c PouchPayouts[rarity].minPayout) {\\n                payout = PouchPayouts[rarity].minPayout;\\n            }\\n        }\\n        return payout * booster / 100;\\n    }\\n\\n    function mintPouch(uint256 booster, address recipient) external {\\n        require(_msgSender() == landPlantAddress, \\\"invalid call\\\");\\n        minted++;\\n        uint256 seed = random.getRandom(minted, 100) + 1;\\n        random.addNonce();\\n        Pouches[minted].random = seed;\\n        Pouches[minted].booster = booster;\\n        Pouches[minted].rarity = 0;\\n\\n        if (seed % 10 == 6) {\\n            Pouches[minted].rarity = 1;\\n        }\\n\\n        if (seed == 99) {\\n            Pouches[minted].rarity = 2;\\n        }\\n        \\n        _safeMint(recipient, minted);\\n    }\\n\\n    function _getBaseNumber() internal view returns (uint256) {\\n        LandPlant pool = LandPlant(landPlantAddress);\\n        return pool.getBaseNumber();\\n    }\\n\\n    function setWoolAddress(address _newAddr) external onlyOwner {\\n        woolAddress = _newAddr;\\n    }\\n\\n    function setLandPlantAddress(address _newAddr) external onlyOwner {\\n        landPlantAddress = _newAddr;\\n    }\\n\\n    function setPouchPayouts(uint256 rarity, uint256 _min, uint256 _max) external onlyOwner {\\n        PouchPayouts[rarity].minPayout = _min;\\n        PouchPayouts[rarity].maxPayout = _max;\\n    }\\n\\n    function setRandomAddress(address _address) external onlyOwner {\\n        random = Random(_address);\\n    }\\n\\n    function withdrawERC721(address _token, uint _id, address _to) public onlyOwner {\\n        IERC721 token = IERC721(_token);\\n        token.safeTransferFrom(address(this), _to, _id);\\n    }\\n\\n    function withdraw(address _token, address _to) public onlyOwner{\\n        if (_token == address(0x0)) {\\n            payable(_to).transfer(address(this).balance);\\n            return;\\n        }\\n\\n        ERC20 token = ERC20(_token);\\n        token.transfer(_to, token.balanceOf(address(this)));\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return uriData[Pouches[tokenId].rarity];\\n    }\\n\\n    function seturi(uint256 _id, string calldata _uri) external onlyOwner {\\n        uriData[_id] = _uri;\\n    }\\n\\n    function setPaused(bool _paused) external onlyOwner {\\n        if (_paused) _pause();\\n        else _unpause();\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PouchPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Pouches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"booster\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"opened\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landPlantAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"booster\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintPouch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"openRankings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"random\",\"outputs\":[{\"internalType\":\"contract Random\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setLandPlantAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setPouchPayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRandomAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setWoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"seturi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uriData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"woolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"woolClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WoolPouch", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://235f25e80eb33db18c7b2ba20378de024149c0615712790f074f4a2b37112ced"}