{"SourceCode": "{\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n    \\n    function symbol() external view returns(string memory);\\n    \\n    function name() external view returns(string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n    \\n    /**\\n     * @dev Returns the number of decimal places\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\n\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Owner\\n * @dev Set \\u0026 change owner\\n */\\ncontract Ownable {\\n\\n    address private owner;\\n    \\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n    \\n    // modifier to check if caller is owner\\n    modifier onlyOwner() {\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\n        // changes to the state and to Ether balances are reverted.\\n        // This used to consume all gas in old EVM versions, but not anymore.\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\n        // As a second argument, you can also provide an explanation about what went wrong.\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Set contract deployer as owner\\n     */\\n    constructor() {\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\n        emit OwnerSet(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Change owner\\n     * @param newOwner address of new owner\\n     */\\n    function changeOwner(address newOwner) public onlyOwner {\\n        emit OwnerSet(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Return owner address \\n     * @return address of owner\\n     */\\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n}\"},\"TruthSeekers.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\n\\ninterface IFeeReceiver {\\n    function trigger() external;\\n}\\n\\ninterface ISwapper {\\n    function buy(address user) external payable;\\n    function sell(address user) external;\\n}\\n\\ninterface IPair {\\n    function sync() external;\\n}\\n\\n/**\\n    Modular Upgradeable Token\\n    Token System Designed By DeFi Mark\\n */\\ncontract TRUTH is IERC20, Ownable {\\n\\n    // total supply\\n    uint256 private _totalSupply = 11_200_000 * 10**18;\\n\\n    // token data\\n    string private constant _name = \\u0027Truth Seekers\\u0027;\\n    string private constant _symbol = \\u0027TRUTH\\u0027;\\n    uint8  private constant _decimals = 18;\\n\\n    // balances\\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    // Swapper\\n    address public swapper;\\n\\n    // Amount Burned\\n    uint256 public totalBurned;\\n\\n    // Taxation on transfers\\n    uint256 public buyFee             = 0;\\n    uint256 public sellFee            = 1500;\\n    uint256 public transferFee        = 0;\\n    uint256 public constant TAX_DENOM = 10000;\\n\\n    // permissions\\n    struct Permissions {\\n        bool isFeeExempt;\\n        bool isLiquidityPool;\\n        bool canSellBurn;\\n        bool isPauseExempt;\\n        bool isBlacklisted;\\n    }\\n    mapping ( address =\\u003e Permissions ) public permissions;\\n\\n    // Fee Recipients\\n    address public sellFeeRecipient;\\n    address public buyFeeRecipient;\\n    address public transferFeeRecipient;\\n\\n    // Trigger Fee Recipients\\n    bool public triggerBuyRecipient = false;\\n    bool public triggerTransferRecipient = true;\\n    bool public triggerSellRecipient = false;\\n\\n    // Ownership Functions\\n    bool public tradingPaused = true;\\n\\n    // events\\n    event SetBuyFeeRecipient(address recipient);\\n    event SetSellFeeRecipient(address recipient);\\n    event SetTransferFeeRecipient(address recipient);\\n    event SetFeeExemption(address account, bool isFeeExempt);\\n    event SetCanSellBurn(address account, bool canSellBurn);\\n    event SetAutomatedMarketMaker(address account, bool isMarketMaker);\\n    event SetFees(uint256 buyFee, uint256 sellFee, uint256 transferFee);\\n    event SetSwapper(address newSwapper);\\n    event SetAutoTriggers(bool triggerBuy, bool triggerSell, bool triggerTransfer);\\n\\n    constructor() {\\n\\n        // exempt sender for tax-free initial distribution\\n        permissions[msg.sender].isFeeExempt = true;\\n        permissions[msg.sender].isPauseExempt = true;\\n\\n        // initial supply allocation\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    /////////////////////////////////\\n    /////    ERC20 FUNCTIONS    /////\\n    /////////////////////////////////\\n\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n    \\n    function name() public pure override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /** Transfer Function */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        if (msg.sender == recipient) {\\n            return _sell(amount, msg.sender);\\n        } else {\\n            return _transferFrom(msg.sender, recipient, amount);\\n        }\\n    }\\n\\n    /** Transfer Function */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        require(\\n            _allowances[sender][msg.sender] \\u003e= amount,\\n            \\u0027Insufficient Allowance\\u0027\\n        );\\n        _allowances[sender][msg.sender] -= amount;\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n\\n    /////////////////////////////////\\n    /////   PUBLIC FUNCTIONS    /////\\n    /////////////////////////////////\\n\\n    function burn(uint256 amount) external returns (bool) {\\n        return _burn(msg.sender, amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) external returns (bool) {\\n        require(\\n            _allowances[account][msg.sender] \\u003e= amount,\\n            \\u0027Insufficient Allowance\\u0027\\n        );\\n        _allowances[account][msg.sender] -= amount;\\n        return _burn(account, amount);\\n    }\\n\\n    function sell(uint256 amount) external returns (bool) {\\n        return _sell(amount, msg.sender);\\n    }\\n\\n    function sellFor(uint256 amount, address recipient) external returns (bool) {\\n        return _sell(amount, recipient);\\n    }\\n\\n    function buyFor(address account) external payable {\\n        ISwapper(swapper).buy{value: msg.value}(account);\\n    }\\n\\n    receive() external payable {\\n        ISwapper(swapper).buy{value: address(this).balance}(msg.sender);\\n    }\\n\\n    function sellBurn(\\n        uint256 amount,\\n        address to,\\n        address router,\\n        address receiveToken,\\n        uint256 excess\\n    ) external {\\n        require(\\n            permissions[msg.sender].canSellBurn == true,\\n            \\u0027Invalid Permissions\\u0027\\n        );\\n        require(\\n            to != address(0),\\n            \\u0027Invalid Params\\u0027\\n        );\\n        require(\\n            _balances[msg.sender] \\u003e= amount,\\n            \\u0027Insufficient Balance\\u0027\\n        );\\n\\n        // Instantiate Router\\n        IUniswapV2Router02 _router = IUniswapV2Router02(router);\\n\\n        if (amount \\u003e 0) {\\n\\n            // allocate balance to address(this)\\n            _balances[msg.sender] -= amount;\\n            _balances[address(this)] += amount;\\n            emit Transfer(msg.sender, address(this), amount);\\n\\n            // approve tokens for router\\n            _allowances[address(this)][router] = amount;\\n\\n            // swap path\\n            address[] memory path = new address[](2);\\n            path[0] = address(this);\\n            path[1] = receiveToken;\\n\\n            // sell tokens for underlying\\n            if (receiveToken == _router.WETH()) {\\n                _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                    amount,\\n                    0,\\n                    path,\\n                    to,\\n                    block.timestamp + 1000\\n                );\\n            } else {\\n                _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                    amount,\\n                    0,\\n                    path,\\n                    to,\\n                    block.timestamp + 1000\\n                );\\n            }\\n\\n            // clear memory\\n            delete path;\\n        }\\n\\n        // calculate amount to burn\\n        uint256 amountToBurn = amount + excess;\\n\\n        // fetch pair address\\n        address pair = IUniswapV2Factory(_router.factory()).getPair(address(this), receiveToken);\\n        require(\\n            pair != address(0),\\n            \\u0027No Pair\\u0027\\n        );\\n\\n        // ensure enough balance exists in the pair with at least 1 token extra\\n        require(\\n            _balances[pair] \\u003e= ( amountToBurn + 10**18 ),\\n            \\u0027Amount Exceeds Pair Balance Plus Min Reserve\\u0027\\n        );\\n\\n        // burn tokens from the pair\\n        _burn(pair, amountToBurn);\\n\\n        // sync the LP with the new values\\n        IPair(pair).sync();\\n    }\\n\\n    /////////////////////////////////\\n    /////    OWNER FUNCTIONS    /////\\n    /////////////////////////////////\\n\\n    function withdraw(address token) external onlyOwner {\\n        require(token != address(0), \\u0027Zero Address\\u0027);\\n        bool s = IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n        require(s, \\u0027Failure On Token Withdraw\\u0027);\\n    }\\n\\n    function withdrawBNB() external onlyOwner {\\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(s);\\n    }\\n\\n    function setTransferFeeRecipient(address recipient) external onlyOwner {\\n        require(recipient != address(0), \\u0027Zero Address\\u0027);\\n        transferFeeRecipient = recipient;\\n        permissions[recipient].isFeeExempt = true;\\n        emit SetTransferFeeRecipient(recipient);\\n    }\\n\\n    function setBuyFeeRecipient(address recipient) external onlyOwner {\\n        require(recipient != address(0), \\u0027Zero Address\\u0027);\\n        buyFeeRecipient = recipient;\\n        permissions[recipient].isFeeExempt = true;\\n        emit SetBuyFeeRecipient(recipient);\\n    }\\n\\n    function setSellFeeRecipient(address recipient) external onlyOwner {\\n        require(recipient != address(0), \\u0027Zero Address\\u0027);\\n        sellFeeRecipient = recipient;\\n        permissions[recipient].isFeeExempt = true;\\n        emit SetSellFeeRecipient(recipient);\\n    }\\n\\n    function registerAutomatedMarketMaker(address account) external onlyOwner {\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\n        require(!permissions[account].isLiquidityPool, \\u0027Already An AMM\\u0027);\\n        permissions[account].isLiquidityPool = true;\\n        emit SetAutomatedMarketMaker(account, true);\\n    }\\n\\n    function unRegisterAutomatedMarketMaker(address account) external onlyOwner {\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\n        require(permissions[account].isLiquidityPool, \\u0027Not An AMM\\u0027);\\n        permissions[account].isLiquidityPool = false;\\n        emit SetAutomatedMarketMaker(account, false);\\n    }\\n\\n    function setAutoTriggers(\\n        bool autoBuyTrigger,\\n        bool autoTransferTrigger,\\n        bool autoSellTrigger\\n    ) external onlyOwner {\\n        triggerBuyRecipient = autoBuyTrigger;\\n        triggerTransferRecipient = autoTransferTrigger;\\n        triggerSellRecipient = autoSellTrigger;\\n        emit SetAutoTriggers(autoBuyTrigger, autoSellTrigger, autoTransferTrigger);\\n    }\\n\\n    function setFees(uint _buyFee, uint _sellFee, uint _transferFee) external onlyOwner {\\n        require(\\n            _buyFee \\u003c= 2500,\\n            \\u0027Buy Fee Too High\\u0027\\n        );\\n        require(\\n            _sellFee \\u003c= 2500,\\n            \\u0027Sell Fee Too High\\u0027\\n        );\\n        require(\\n            _transferFee \\u003c= 2500,\\n            \\u0027Transfer Fee Too High\\u0027\\n        );\\n\\n        buyFee = _buyFee;\\n        sellFee = _sellFee;\\n        transferFee = _transferFee;\\n\\n        emit SetFees(_buyFee, _sellFee, _transferFee);\\n    }\\n\\n    function setFeeExempt(address account, bool isExempt) external onlyOwner {\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\n        permissions[account].isFeeExempt = isExempt;\\n        emit SetFeeExemption(account, isExempt);\\n    }\\n\\n    function setCanSellBurn(address account, bool canSellBurn) external onlyOwner {\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\n        permissions[account].canSellBurn = canSellBurn;\\n        emit SetCanSellBurn(account, canSellBurn);\\n    }\\n\\n    function pauseTrading() external onlyOwner {\\n        tradingPaused = true;\\n    }\\n\\n    function resumeTrading() external onlyOwner {\\n        tradingPaused = false;\\n    }\\n\\n    function setIsPausedExempt(address user, bool isPauseExempt) external onlyOwner {\\n        permissions[user].isPauseExempt = isPauseExempt;\\n    }\\n\\n    function setIsBlacklisted(address user, bool isBlacklisted) external onlyOwner {\\n        permissions[user].isBlacklisted = isBlacklisted;\\n    }\\n\\n    function setSwapper(address newSwapper) external onlyOwner {\\n        require(\\n            newSwapper != address(0),\\n            \\u0027Zero Address\\u0027\\n        );\\n        swapper = newSwapper;\\n        emit SetSwapper(newSwapper);\\n    }\\n\\n\\n    /////////////////////////////////\\n    /////     READ FUNCTIONS    /////\\n    /////////////////////////////////\\n\\n    function getTax(address sender, address recipient, uint256 amount) public view returns (uint256, address, bool) {\\n        if ( permissions[sender].isFeeExempt || permissions[recipient].isFeeExempt ) {\\n            return (0, address(0), false);\\n        }\\n        return permissions[sender].isLiquidityPool ? \\n               ((amount * buyFee) / TAX_DENOM, buyFeeRecipient, triggerBuyRecipient) : \\n               permissions[recipient].isLiquidityPool ? \\n               ((amount * sellFee) / TAX_DENOM, sellFeeRecipient, triggerSellRecipient) :\\n               ((amount * transferFee) / TAX_DENOM, transferFeeRecipient, triggerTransferRecipient);\\n    }\\n\\n\\n    //////////////////////////////////\\n    /////   INTERNAL FUNCTIONS   /////\\n    //////////////////////////////////\\n\\n    /** Internal Transfer */\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        require(\\n            recipient != address(0),\\n            \\u0027Zero Recipient\\u0027\\n        );\\n        require(\\n            amount \\u003e 0,\\n            \\u0027Zero Amount\\u0027\\n        );\\n        require(\\n            amount \\u003c= _balances[sender],\\n            \\u0027Insufficient Balance\\u0027\\n        );\\n        require(\\n            permissions[sender].isBlacklisted == false,\\n            \\u0027Sender Blacklisted\\u0027\\n        );\\n        if (tradingPaused) {\\n            require(\\n                permissions[sender].isPauseExempt,\\n                \\u0027Not Pause Exempt\\u0027\\n            );\\n        }\\n        \\n        // decrement sender balance\\n        _balances[sender] -= amount;\\n\\n        // fee for transaction\\n        (uint256 fee, address feeDestination, bool trigger) = getTax(sender, recipient, amount);\\n\\n        // give amount to recipient less fee\\n        uint256 sendAmount = amount - fee;\\n        _balances[recipient] += sendAmount;\\n        emit Transfer(sender, recipient, sendAmount);\\n\\n        // allocate fee if any\\n        if (fee \\u003e 0) {\\n\\n            // if recipient field is valid\\n            bool isValidRecipient = feeDestination != address(0) \\u0026\\u0026 feeDestination != address(this);\\n\\n            // allocate amount to recipient\\n            address feeRecipient = isValidRecipient ? feeDestination : address(this);\\n            _balances[feeRecipient] += fee;\\n            emit Transfer(sender, feeRecipient, fee);\\n\\n            // if valid and trigger is enabled, trigger tokenomics mid transfer\\n            if (trigger \\u0026\\u0026 isValidRecipient) {\\n                IFeeReceiver(feeRecipient).trigger();\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burn(address account, uint256 amount) internal returns (bool) {\\n        require(\\n            account != address(0),\\n            \\u0027Zero Address\\u0027\\n        );\\n        require(\\n            amount \\u003e 0,\\n            \\u0027Zero Amount\\u0027\\n        );\\n        require(\\n            amount \\u003c= _balances[account],\\n            \\u0027Insufficient Balance\\u0027\\n        );\\n        \\n        // delete from balance and supply\\n        _balances[account] -= amount;\\n        _totalSupply -= amount;\\n\\n        // increment total burned\\n        unchecked {\\n            totalBurned += amount;\\n        }\\n\\n        // emit transfer\\n        emit Transfer(account, address(0), amount);\\n        return true;\\n    }\\n\\n    function _sell(uint256 amount, address recipient) internal returns (bool) {\\n        require(\\n            amount \\u003e 0,\\n            \\u0027Zero Amount\\u0027\\n        );\\n        require(\\n            recipient != address(0) \\u0026\\u0026 recipient != address(this) \\u0026\\u0026 recipient != swapper,\\n            \\u0027Invalid Recipient\\u0027\\n        );\\n        require(\\n            amount \\u003c= _balances[msg.sender],\\n            \\u0027Insufficient Balance\\u0027\\n        );\\n\\n        // re-allocate balances\\n        _balances[msg.sender] -= amount;\\n        _balances[swapper] += amount;\\n        emit Transfer(msg.sender, swapper, amount);\\n\\n        // sell token for user\\n        ISwapper(swapper).sell(recipient);\\n        return true;\\n    }\\n\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerSell\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerTransfer\",\"type\":\"bool\"}],\"name\":\"SetAutoTriggers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarketMaker\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetBuyFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canSellBurn\",\"type\":\"bool\"}],\"name\":\"SetCanSellBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"}],\"name\":\"SetFeeExemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetSellFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"SetSwapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetTransferFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TAX_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canSellBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPauseExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerAutomatedMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"name\":\"sellBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sellFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoBuyTrigger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoTransferTrigger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoSellTrigger\",\"type\":\"bool\"}],\"name\":\"setAutoTriggers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setBuyFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canSellBurn\",\"type\":\"bool\"}],\"name\":\"setCanSellBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"setIsBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPauseExempt\",\"type\":\"bool\"}],\"name\":\"setIsPausedExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setSellFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setTransferFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerBuyRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerSellRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTransferRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unRegisterAutomatedMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TRUTH", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8af431c1c6e23ec93e1886d93866a24d1b9e30c34256e42f8063139333ae3433"}