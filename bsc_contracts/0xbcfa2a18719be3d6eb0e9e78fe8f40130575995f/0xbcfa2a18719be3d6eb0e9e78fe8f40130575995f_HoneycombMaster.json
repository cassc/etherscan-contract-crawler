{"SourceCode": "/**\r\n *Submitted for verification at snowtrace.io on 2021-11-03\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// pragma solidity ^0.8.6;\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface MintableToken is IERC20 {\r\n    function mint(address dest, uint256 amount) external;\r\n    function transferOwnership(address _minterAddress) external;\r\n}\r\n\r\n//owned by the HoneycombMaster contract\r\ninterface IHoneycombStrategy {\r\n    // Deposit amount of tokens for 'caller' to address 'to'\r\n    function deposit(address caller, address to, uint256 tokenAmount, uint256 shareAmount) external;\r\n    // Transfer tokens from strategy for 'caller' to address 'to'\r\n    function withdraw(address caller, address to, uint256 tokenAmount, uint256 shareAmount, uint256 withdrawalFeeBP) external;\r\n    function inCaseTokensGetStuck(IERC20 token, address to, uint256 amount) external;\r\n    function setAllowances() external;\r\n    function revokeAllowance(address token, address spender) external;\r\n    function migrate(address newStrategy) external;\r\n    function onMigration() external;\r\n    function pendingTokens(uint256 pid, address user, uint256 amount) external view returns (address[] memory, uint256[] memory);\r\n    function transferOwnership(address newOwner) external;\r\n    function setPerformanceFeeBips(uint256 newPerformanceFeeBips) external;\r\n}\r\n\r\ninterface IStakingRewards {\r\n    function userInfo(uint256, address) external view returns (uint256, uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n    function rewardPerToken() external view returns (uint256);\r\n    function earned(address account) external view returns (uint256);\r\n    function getRewardForDuration() external view returns (uint256);\r\n    function deposit(uint256 pid, uint256 amount) external;\r\n    function withdraw(uint256 pid, uint256 amount) external;\r\n    function stakeWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    function withdraw(uint256 amount) external;\r\n    function getReward() external;\r\n    function pendingCake(uint256 pid, address user) external view returns (uint256);\r\n    function exit() external;\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event RewardsDurationUpdated(uint256 newDuration);\r\n    event Recovered(address token, uint256 amount);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IEarningsReferral {\r\n    function recordReferral(address _user, address _referrer) external;\r\n    function recordReferralCommission(address _referrer, uint256 _commission) external;\r\n    function getReferrer(address _user) external view returns (address);\r\n    function updateOperator(address _operator, bool _status) external;\r\n    function drainBEP20Token(IERC20 _token, uint256 _amount, address _to) external;\r\n}\r\n\r\ncontract HoneycombStrategyBase is IHoneycombStrategy, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    HoneycombMaster public immutable honeycombMaster;\r\n    IERC20 public immutable depositToken;\r\n    uint256 public performanceFeeBips;\r\n    uint256 internal constant MAX_UINT = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n    uint256 internal constant ACC_EARNING_PRECISION = 1e18;\r\n    uint256 internal constant MAX_BIPS = 10000;\r\n\r\n    constructor(\r\n        HoneycombMaster _honeycombMaster,\r\n        IERC20 _depositToken\r\n        ){\r\n        honeycombMaster = _honeycombMaster;\r\n        depositToken = _depositToken;\r\n        transferOwnership(address(_honeycombMaster));\r\n    }\r\n\r\n    //returns zero address and zero tokens since base strategy does not distribute rewards\r\n    function pendingTokens(uint256, address, uint256) external view virtual override\r\n        returns (address[] memory, uint256[] memory) {\r\n        address[] memory _rewardTokens = new address[](1);\r\n        _rewardTokens[0] = address(0);\r\n        uint256[] memory _pendingAmounts = new uint256[](1);\r\n        _pendingAmounts[0] = 0;\r\n        return(_rewardTokens, _pendingAmounts);\r\n    }\r\n\r\n    function deposit(address, address, uint256, uint256) external virtual override onlyOwner {\r\n    }\r\n\r\n    function withdraw(address, address to, uint256 tokenAmount, uint256, uint256 withdrawalFeeBP) external virtual override onlyOwner {\r\n        if (tokenAmount > 0) {\r\n            if (withdrawalFeeBP > 0) {\r\n                uint256 withdrawalFee = tokenAmount * withdrawalFeeBP / 10000;\r\n                depositToken.safeTransfer(honeycombMaster.performanceFeeAddress(), withdrawalFee);\r\n                tokenAmount -= withdrawalFee;\r\n            }\r\n            depositToken.safeTransfer(to, tokenAmount);\r\n        }\r\n    }\r\n\r\n    function inCaseTokensGetStuck(IERC20 token, address to, uint256 amount) external virtual override onlyOwner {\r\n        require(amount > 0, \"cannot recover 0 tokens\");\r\n        require(address(token) != address(depositToken), \"cannot recover deposit token\");\r\n        token.safeTransfer(to, amount);\r\n    }\r\n\r\n    function setAllowances() external virtual override onlyOwner {\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke token allowance\r\n     * @param token address\r\n     * @param spender address\r\n     */\r\n    function revokeAllowance(address token, address spender) external virtual override onlyOwner {\r\n        IERC20(token).safeApprove(spender, 0);\r\n    }\r\n\r\n    function migrate(address newStrategy) external virtual override onlyOwner {\r\n        uint256 toTransfer = depositToken.balanceOf(address(this));\r\n        depositToken.safeTransfer(newStrategy, toTransfer);\r\n    }\r\n\r\n    function onMigration() external virtual override onlyOwner {\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual override(Ownable, IHoneycombStrategy) onlyOwner {\r\n        Ownable.transferOwnership(newOwner);\r\n    }\r\n\r\n    function setPerformanceFeeBips(uint256 newPerformanceFeeBips) external virtual override onlyOwner {\r\n        require(newPerformanceFeeBips <= MAX_BIPS, \"input too high\");\r\n        performanceFeeBips = newPerformanceFeeBips;\r\n    }\r\n}\r\n\r\n//owned by an HoneycombStrategy contract\r\ncontract HoneycombStrategyStorage is Ownable {\r\n    //scaled up by ACC_EARNING_PRECISION\r\n    uint256 public rewardTokensPerShare;\r\n    uint256 internal constant ACC_EARNING_PRECISION = 1e18;\r\n\r\n    //pending reward = (user.amount * rewardTokensPerShare) / ACC_EARNING_PRECISION - user.rewardDebt\r\n    mapping(address => uint256) public rewardDebt;\r\n\r\n    function increaseRewardDebt(address user, uint256 shareAmount) external onlyOwner {\r\n        rewardDebt[user] += (rewardTokensPerShare * shareAmount) / ACC_EARNING_PRECISION;\r\n    }\r\n\r\n    function decreaseRewardDebt(address user, uint256 shareAmount) external onlyOwner {\r\n        rewardDebt[user] -= (rewardTokensPerShare * shareAmount) / ACC_EARNING_PRECISION;\r\n    }\r\n\r\n    function setRewardDebt(address user, uint256 userShares) external onlyOwner {\r\n        rewardDebt[user] = (rewardTokensPerShare * userShares) / ACC_EARNING_PRECISION;\r\n    }\r\n\r\n    function increaseRewardTokensPerShare(uint256 amount) external onlyOwner {\r\n        rewardTokensPerShare += amount;\r\n    }\r\n}\r\n\r\ncontract HoneycombStrategyForPancake is HoneycombStrategyBase {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public constant rewardToken = IERC20(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82); //CAKE token\r\n    IStakingRewards public immutable stakingContract;\r\n    HoneycombStrategyStorage public immutable honeycombStrategyStorage;\r\n    uint256 public immutable pid;\r\n    uint256 public immutable pidHoneycomb;\r\n    //total harvested by the contract all time\r\n    uint256 public totalHarvested;\r\n\r\n    //total amount harvested by each user\r\n    mapping(address => uint256) public harvested;\r\n\r\n    event Harvest(address indexed caller, address indexed to, uint256 harvestedAmount);\r\n\r\n    constructor(\r\n        HoneycombMaster _honeycombMaster,\r\n        IERC20 _depositToken,\r\n        uint256 _pid,\r\n        uint256 _pidHoneycomb,\r\n        IStakingRewards _stakingContract\r\n        )\r\n        HoneycombStrategyBase(_honeycombMaster, _depositToken)\r\n    {\r\n        pid = _pid;\r\n        pidHoneycomb = _pidHoneycomb;\r\n        stakingContract = _stakingContract;\r\n        honeycombStrategyStorage = new HoneycombStrategyStorage();\r\n        _depositToken.safeApprove(address(_stakingContract), MAX_UINT);\r\n    }\r\n\r\n    //PUBLIC FUNCTIONS\r\n    /**\r\n    * @notice Reward token balance that can be claimed\r\n    * @dev Staking rewards accrue to contract on each deposit/withdrawal\r\n    * @return Unclaimed rewards\r\n    */\r\n    function checkReward() public view returns (uint256) {\r\n        return stakingContract.pendingCake(pid, address(this));\r\n    }\r\n\r\n    function pendingRewards(address user) public view returns (uint256) {\r\n        uint256 userShares = honeycombMaster.userShares(pidHoneycomb, user);\r\n        uint256 unclaimedRewards = checkReward();\r\n        uint256 rewardTokensPerShare = honeycombStrategyStorage.rewardTokensPerShare();\r\n        uint256 totalShares = honeycombMaster.totalShares(pidHoneycomb);\r\n        uint256 userRewardDebt = honeycombStrategyStorage.rewardDebt(user);\r\n        uint256 multiplier =  rewardTokensPerShare;\r\n        if(totalShares > 0) {\r\n            multiplier = multiplier + ((unclaimedRewards * ACC_EARNING_PRECISION) / totalShares);\r\n        }\r\n        uint256 totalRewards = (userShares * multiplier) / ACC_EARNING_PRECISION;\r\n        uint256 userPendingRewards = (totalRewards >= userRewardDebt) ?  (totalRewards - userRewardDebt) : 0;\r\n        return userPendingRewards;\r\n    }\r\n\r\n    function rewardTokens() external view virtual returns(address[] memory) {\r\n        address[] memory _rewardTokens = new address[](1);\r\n        _rewardTokens[0] = address(rewardToken);\r\n        return(_rewardTokens);\r\n    }\r\n\r\n    function pendingTokens(uint256, address user, uint256) external view override\r\n        returns (address[] memory, uint256[] memory) {\r\n        address[] memory _rewardTokens = new address[](1);\r\n        _rewardTokens[0] = address(rewardToken);\r\n        uint256[] memory _pendingAmounts = new uint256[](1);\r\n        _pendingAmounts[0] = pendingRewards(user);\r\n        return(_rewardTokens, _pendingAmounts);\r\n    }\r\n\r\n    //EXTERNAL FUNCTIONS\r\n    function harvest() external {\r\n        _claimRewards();\r\n        _harvest(msg.sender, msg.sender);\r\n    }\r\n\r\n    //OWNER-ONlY FUNCTIONS\r\n    function deposit(address caller, address to, uint256 tokenAmount, uint256 shareAmount) external override onlyOwner {\r\n        _claimRewards();\r\n        _harvest(caller, to);\r\n        if (tokenAmount > 0) {\r\n            stakingContract.deposit(pid, tokenAmount);\r\n        }\r\n        if (shareAmount > 0) {\r\n            honeycombStrategyStorage.increaseRewardDebt(to, shareAmount);\r\n        }\r\n    }\r\n\r\n    function withdraw(address caller, address to, uint256 tokenAmount, uint256 shareAmount, uint256 withdrawalFeeBP) external override onlyOwner {\r\n        _claimRewards();\r\n        _harvest(caller, to);\r\n        if (tokenAmount > 0) {\r\n            stakingContract.withdraw(pid, tokenAmount);\r\n            if (withdrawalFeeBP > 0) {\r\n                uint256 withdrawalFee = tokenAmount * withdrawalFeeBP / 10000;\r\n                depositToken.safeTransfer(honeycombMaster.performanceFeeAddress(), withdrawalFee);\r\n                tokenAmount -= withdrawalFee;\r\n            }\r\n            depositToken.safeTransfer(to, tokenAmount);\r\n        }\r\n        if (shareAmount > 0) {\r\n            honeycombStrategyStorage.decreaseRewardDebt(to, shareAmount);\r\n        }\r\n    }\r\n\r\n    function migrate(address newStrategy) external override onlyOwner {\r\n        _claimRewards();\r\n        (uint256 toWithdraw, ) = stakingContract.userInfo(pid, address(this));\r\n        if (toWithdraw > 0) {\r\n            stakingContract.withdraw(pid, toWithdraw);\r\n            depositToken.safeTransfer(newStrategy, toWithdraw);\r\n        }\r\n        uint256 rewardsToTransfer = rewardToken.balanceOf(address(this));\r\n        if (rewardsToTransfer > 0) {\r\n            rewardToken.safeTransfer(newStrategy, rewardsToTransfer);\r\n        }\r\n        honeycombStrategyStorage.transferOwnership(newStrategy);\r\n    }\r\n\r\n    function onMigration() external override onlyOwner {\r\n        uint256 toStake = depositToken.balanceOf(address(this));\r\n        stakingContract.deposit(pid, toStake);\r\n    }\r\n\r\n    function setAllowances() external override onlyOwner {\r\n        depositToken.safeApprove(address(stakingContract), 0);\r\n        depositToken.safeApprove(address(stakingContract), MAX_UINT);\r\n    }\r\n\r\n    //INTERNAL FUNCTIONS\r\n    //claim any as-of-yet unclaimed rewards\r\n    function _claimRewards() internal {\r\n        uint256 unclaimedRewards = checkReward();\r\n        uint256 totalShares = honeycombMaster.totalShares(pidHoneycomb);\r\n        if (unclaimedRewards > 0 && totalShares > 0) {\r\n            stakingContract.deposit(pid, 0);\r\n            honeycombStrategyStorage.increaseRewardTokensPerShare((unclaimedRewards * ACC_EARNING_PRECISION) / totalShares);\r\n        }\r\n    }\r\n\r\n    function _harvest(address caller, address to) internal {\r\n        uint256 userShares = honeycombMaster.userShares(pidHoneycomb, caller);\r\n        uint256 totalRewards = (userShares * honeycombStrategyStorage.rewardTokensPerShare()) / ACC_EARNING_PRECISION;\r\n        uint256 userRewardDebt = honeycombStrategyStorage.rewardDebt(caller);\r\n        uint256 userPendingRewards = (totalRewards >= userRewardDebt) ?  (totalRewards - userRewardDebt) : 0;\r\n        honeycombStrategyStorage.setRewardDebt(caller, userShares);\r\n        if (userPendingRewards > 0) {\r\n            totalHarvested += userPendingRewards;\r\n            if (performanceFeeBips > 0) {\r\n                uint256 performanceFee = (userPendingRewards * performanceFeeBips) / MAX_BIPS;\r\n                _safeRewardTokenTransfer(honeycombMaster.performanceFeeAddress(), performanceFee);\r\n                userPendingRewards = userPendingRewards - performanceFee;\r\n            }\r\n            harvested[to] += userPendingRewards;\r\n            emit Harvest(caller, to, userPendingRewards);\r\n            _safeRewardTokenTransfer(to, userPendingRewards);\r\n        }\r\n    }\r\n\r\n    //internal wrapper function to avoid reverts due to rounding\r\n    function _safeRewardTokenTransfer(address user, uint256 amount) internal {\r\n        uint256 rewardTokenBal = rewardToken.balanceOf(address(this));\r\n        if (amount > rewardTokenBal) {\r\n            rewardToken.safeTransfer(user, rewardTokenBal);\r\n        } else {\r\n            rewardToken.safeTransfer(user, amount);\r\n        }\r\n    }\r\n}\r\n\r\n// The HoneycombMaster is the master of rewards. He can make reward and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once reward is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract HoneycombMaster is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many shares the user currently has\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 lastDepositTimestamp; // Timestamp of the last deposit.\r\n        \r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of Rewards\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accEarningPerShare) / ACC_EARNING_PRECISION - user.rewardDebt\r\n        //\r\n        // Whenever a user harvest from a pool, here's what happens:\r\n        //   1. The pool's `accEarningPerShare` gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 want; // Address of LP token contract.\r\n        IHoneycombStrategy strategy; // Address of strategy for pool\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. earnings to distribute per block.\r\n        uint256 lastRewardTime; // Last block number that earnings distribution occurs.\r\n        uint256 accEarningPerShare; // Accumulated earnings per share, times ACC_EARNING_PRECISION. See below.\r\n        uint16 depositFeeBP; // Deposit fee in basis points\r\n        uint256 totalShares; //total number of shares in the pool\r\n        uint256 lpPerShare; //number of LP tokens per share, times ACC_EARNING_PRECISION\r\n        bool isWithdrawFee;      // if the pool has withdraw fee\r\n    }\r\n\r\n    // The main reward token!\r\n    MintableToken public immutable earningToken;\r\n    // The block when mining starts.\r\n    uint256 public startTime;\r\n    //development endowment\r\n    address public dev;\r\n    //performance fee address -- receives performance fees from strategies\r\n    address public performanceFeeAddress;\r\n    // amount of reward emitted per second\r\n    uint256 public earningsPerSecond;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    //allocations to dev and nest addresses, expressed in BIPS\r\n    uint256 public devMintBips = 1000;\r\n    //whether the onlyApprovedContractOrEOA is turned on or off\r\n    bool public onlyApprovedContractOrEOAStatus;\r\n\r\n    uint256 internal constant ACC_EARNING_PRECISION = 1e18;\r\n    uint256 internal constant MAX_BIPS = 10000;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    //mappping for tracking contracts approved to build on top of this one\r\n    mapping(address => bool) public approvedContracts;\r\n    //tracks historic deposits of each address. deposits[pid][user] is the total deposits for that user to that honeycomb\r\n    mapping(uint256 => mapping(address => uint256)) public deposits;\r\n    //tracks historic withdrawals of each address. withdrawals[pid][user] is the total withdrawals for that user from that honeycomb\r\n    mapping(uint256 => mapping(address => uint256)) public withdrawals;\r\n\r\n    uint256[] public withdrawalFeeIntervals = [1];\r\n    uint16[] public withdrawalFeeBP = [0, 0];\r\n    uint16 public constant MAX_WITHDRAWAL_FEE_BP = 300;\r\n    uint16 public constant MAX_DEPOSIT_FEE_BP = 400;\r\n    \r\n    // Earnings referral contract address.\r\n    IEarningsReferral public earningReferral;\r\n    // Referral commission rate in basis points.\r\n    uint16 public referralCommissionRate = 300;\r\n    // Max referral commission rate: 20%.\r\n    uint16 public constant MAXIMUM_REFERRAL_COMMISSION_RATE = 2000;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\r\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event DevSet(address indexed oldAddress, address indexed newAddress);\r\n    event PerformanceFeeAddressSet(address indexed oldAddress, address indexed newAddress);\r\n    event ReferralCommissionPaid(address indexed user, address indexed referrer, uint256 commissionAmount);\r\n\r\n    /**\r\n     * @notice Throws if called by smart contract\r\n     */\r\n    modifier onlyApprovedContractOrEOA() {\r\n        if (onlyApprovedContractOrEOAStatus) {\r\n            require(tx.origin == msg.sender || approvedContracts[msg.sender], \"HoneycombMaster::onlyApprovedContractOrEOA\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        MintableToken _earningToken,\r\n        uint256 _startTime,\r\n        address _dev,\r\n        address _performanceFeeAddress,\r\n        uint256 _earningsPerSecond\r\n    ) {\r\n        require(_startTime > block.timestamp, \"must start in future\");\r\n        earningToken = _earningToken;\r\n        startTime = _startTime;\r\n        dev = _dev;\r\n        performanceFeeAddress = _performanceFeeAddress;\r\n        earningsPerSecond = _earningsPerSecond;\r\n        emit DevSet(address(0), _dev);\r\n        emit PerformanceFeeAddressSet(address(0), _performanceFeeAddress);\r\n    }\r\n\r\n    //VIEW FUNCTIONS\r\n    function poolLength() public view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // View function to see total pending reward in = on frontend.\r\n    function pendingEarnings(uint256 pid, address userAddr) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        UserInfo storage user = userInfo[pid][userAddr];\r\n        uint256 accEarningPerShare = pool.accEarningPerShare;\r\n        uint256 poolShares = pool.totalShares;\r\n        if (block.timestamp > pool.lastRewardTime && poolShares != 0) {\r\n            uint256 earningsReward = (reward(pool.lastRewardTime, block.timestamp) * pool.allocPoint) / totalAllocPoint;\r\n            accEarningPerShare = accEarningPerShare + (\r\n                (earningsReward * ACC_EARNING_PRECISION) / poolShares\r\n            );\r\n        }\r\n        return ((user.amount * accEarningPerShare) / ACC_EARNING_PRECISION) - user.rewardDebt;\r\n    }\r\n\r\n    // view function to get all pending rewards, from HoneycombMaster, Strategy, and Rewarder\r\n    function pendingTokens(uint256 pid, address user) external view\r\n        returns (address[] memory, uint256[] memory) {\r\n        uint256 earningAmount = pendingEarnings(pid, user);\r\n        (address[] memory strategyTokens, uint256[] memory strategyRewards) =\r\n            poolInfo[pid].strategy.pendingTokens(pid, user, earningAmount);\r\n\r\n        uint256 rewardsLength = 1;\r\n        for (uint256 j = 0; j < strategyTokens.length; j++) {\r\n            if (strategyTokens[j] != address(0)) {\r\n                rewardsLength += 1;\r\n            }\r\n        }\r\n        address[] memory _rewardTokens = new address[](rewardsLength);\r\n        uint256[] memory _pendingAmounts = new uint256[](rewardsLength);\r\n        _rewardTokens[0] = address(earningToken);\r\n        _pendingAmounts[0] = pendingEarnings(pid, user);\r\n        for (uint256 m = 0; m < strategyTokens.length; m++) {\r\n            if (strategyTokens[m] != address(0)) {\r\n                _rewardTokens[m + 1] = strategyTokens[m];\r\n                _pendingAmounts[m + 1] = strategyRewards[m];\r\n            }\r\n        }\r\n        return(_rewardTokens, _pendingAmounts);\r\n    }\r\n\r\n    // Return reward over the period _from to _to.\r\n    function reward(uint256 _lastRewardTime, uint256 _currentTime) public view returns (uint256) {\r\n        return ((_currentTime - _lastRewardTime) * earningsPerSecond);\r\n    }\r\n\r\n    //convenience function to get the yearly emission of reward at the current emission rate\r\n    function earningPerYear() public view returns(uint256) {\r\n        //31536000 = seconds per year = 365 * 24 * 60 * 60\r\n        return (earningsPerSecond * 31536000);\r\n    }\r\n\r\n    //convenience function to get the yearly emission of reward at the current emission rate, to a given honeycomb\r\n    function earningPerYearToHoneycomb(uint256 pid) public view returns(uint256) {\r\n        return ((earningPerYear() * poolInfo[pid].allocPoint) / totalAllocPoint);\r\n    }\r\n\r\n    //convenience function to get the total number of shares in an honeycomb\r\n    function totalShares(uint256 pid) public view returns(uint256) {\r\n        return poolInfo[pid].totalShares;\r\n    }\r\n\r\n    //convenience function to get the total amount of LP tokens in an honeycomb\r\n    function totalLP(uint256 pid) public view returns(uint256) {\r\n        return (poolInfo[pid].lpPerShare * totalShares(pid) / ACC_EARNING_PRECISION);\r\n    }\r\n\r\n    //convenience function to get the shares of a single user in an honeycomb\r\n    function userShares(uint256 pid, address user) public view returns(uint256) {\r\n        return userInfo[pid][user].amount;\r\n    }\r\n\r\n    //WRITE FUNCTIONS\r\n    /// @notice Update reward variables of the given pool.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    function updatePool(uint256 pid) public {\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        if (block.timestamp > pool.lastRewardTime) {\r\n            uint256 poolShares = pool.totalShares;\r\n            if (poolShares == 0 || pool.allocPoint == 0) {\r\n                pool.lastRewardTime = block.timestamp;\r\n                return;\r\n            }\r\n            uint256 earningReward = (reward(pool.lastRewardTime, block.timestamp) * pool.allocPoint) / totalAllocPoint;\r\n            pool.lastRewardTime = block.timestamp;\r\n            if (earningReward > 0) {\r\n                uint256 toDev = (earningReward * devMintBips) / MAX_BIPS;\r\n                pool.accEarningPerShare = pool.accEarningPerShare + (\r\n                    (earningReward * ACC_EARNING_PRECISION) / poolShares\r\n                );\r\n                earningToken.mint(dev, toDev);\r\n                earningToken.mint(address(this), earningReward);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    /// @notice Deposit LP tokens to HoneycombMaster for reward allocation.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param amount LP token amount to deposit.\r\n    /// @param to The receiver of `amount` deposit benefit.\r\n    function deposit(uint256 pid, uint256 amount, address to, address _referrer) external onlyApprovedContractOrEOA {\r\n        uint256 totalAmount = amount;\r\n        updatePool(pid);\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        if (amount > 0) {\r\n            UserInfo storage user = userInfo[pid][to];\r\n            \r\n            if (address(earningReferral) != address(0) && _referrer != address(0) && _referrer != msg.sender) {\r\n                earningReferral.recordReferral(msg.sender, _referrer);\r\n            }\r\n            \r\n            if (pool.depositFeeBP > 0) {\r\n                uint256 depositFee = amount * pool.depositFeeBP / 10000;\r\n                pool.want.safeTransferFrom(address(msg.sender), performanceFeeAddress, depositFee);\r\n                amount = amount - depositFee;\r\n            }\r\n\r\n            //find number of new shares from amount\r\n            uint256 newShares = (amount * ACC_EARNING_PRECISION) / pool.lpPerShare;\r\n\r\n            //transfer tokens directly to strategy\r\n            pool.want.safeTransferFrom(\r\n                address(msg.sender),\r\n                address(pool.strategy),\r\n                amount\r\n            );\r\n            //tell strategy to deposit newly transferred tokens and process update\r\n            pool.strategy.deposit(msg.sender, to, amount, newShares);\r\n\r\n            //track new shares\r\n            pool.totalShares = pool.totalShares + newShares;\r\n            user.amount = user.amount + newShares;\r\n            user.rewardDebt = user.rewardDebt + ((newShares * pool.accEarningPerShare) / ACC_EARNING_PRECISION);\r\n            user.lastDepositTimestamp = block.timestamp;\r\n            //track deposit for profit tracking\r\n            deposits[pid][to] += totalAmount;\r\n\r\n            emit Deposit(msg.sender, pid, totalAmount, to);\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraw LP tokens from HoneycombMaster.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param amountShares amount of shares to withdraw.\r\n    /// @param to Receiver of the LP tokens.\r\n    function withdraw(uint256 pid, uint256 amountShares, address to) external onlyApprovedContractOrEOA {\r\n        updatePool(pid);\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        require(user.amount >= amountShares, \"withdraw: not good\");\r\n\r\n        if (amountShares > 0) {\r\n            //find amount of LP tokens from shares\r\n            uint256 lpFromShares = (amountShares * pool.lpPerShare) / ACC_EARNING_PRECISION;\r\n\r\n            uint256 withdrawFeeBP;\r\n            if (pool.isWithdrawFee) {\r\n                withdrawFeeBP = getWithdrawFee(pid, msg.sender);\r\n            }\r\n\r\n            //track withdrawal for profit tracking\r\n            withdrawals[pid][to] += lpFromShares;\r\n            //tell strategy to withdraw lpTokens, send to 'to', and process update\r\n            pool.strategy.withdraw(msg.sender, to, lpFromShares, amountShares, withdrawFeeBP);\r\n\r\n            //track removed shares\r\n            user.amount = user.amount - amountShares;\r\n            uint256 rewardDebtOfShares = ((amountShares * pool.accEarningPerShare) / ACC_EARNING_PRECISION);\r\n            uint256 userRewardDebt = user.rewardDebt;\r\n            user.rewardDebt = (userRewardDebt >= rewardDebtOfShares) ?\r\n                (userRewardDebt - rewardDebtOfShares) : 0;\r\n            pool.totalShares = pool.totalShares - amountShares;\r\n\r\n            emit Withdraw(msg.sender, pid, amountShares, to);\r\n        }\r\n    }\r\n\r\n    /// @notice Harvest proceeds for transaction sender to `to`.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param to Receiver of rewards.\r\n    function harvest(uint256 pid, address to) external onlyApprovedContractOrEOA {\r\n        updatePool(pid);\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n\r\n        //find all time rewards for all of user's shares\r\n        uint256 accumulatedEarnings = (user.amount * pool.accEarningPerShare) / ACC_EARNING_PRECISION;\r\n        //subtract out the rewards they have already been entitled to\r\n        uint256 pendings = accumulatedEarnings - user.rewardDebt;\r\n        //update user reward debt\r\n        user.rewardDebt = accumulatedEarnings;\r\n\r\n        //send remainder as reward\r\n        if (pendings > 0) {\r\n            safeEarningsTransfer(to, pendings);\r\n            payReferralCommission(msg.sender, pendings);\r\n        }\r\n\r\n        //call strategy to update\r\n        pool.strategy.withdraw(msg.sender, to, 0, 0, 0);\r\n\r\n        emit Harvest(msg.sender, pid, pendings);\r\n    }\r\n\r\n    /// @notice Withdraw LP tokens from HoneycombMaster.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param amountShares amount of shares to withdraw.\r\n    /// @param to Receiver of the LP tokens.\r\n    function withdrawAndHarvest(uint256 pid, uint256 amountShares, address to) external onlyApprovedContractOrEOA {\r\n        updatePool(pid);\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        require(user.amount >= amountShares, \"withdraw: not good\");\r\n\r\n        //find all time rewards for all of user's shares\r\n        uint256 accumulatedEarnings = (user.amount * pool.accEarningPerShare) / ACC_EARNING_PRECISION;\r\n        //subtract out the rewards they have already been entitled to\r\n        uint256 pendings = accumulatedEarnings - user.rewardDebt;\r\n        //find amount of LP tokens from shares\r\n        uint256 lpToSend = (amountShares * pool.lpPerShare) / ACC_EARNING_PRECISION;\r\n\r\n        uint256 withdrawFeeBP;\r\n        if (pool.isWithdrawFee) {\r\n            withdrawFeeBP = getWithdrawFee(pid, msg.sender);\r\n        }\r\n\r\n        //track withdrawal for profit tracking\r\n        withdrawals[pid][to] += lpToSend;\r\n        //tell strategy to withdraw lpTokens, send to 'to', and process update\r\n        pool.strategy.withdraw(msg.sender, to, lpToSend, amountShares, withdrawFeeBP);\r\n\r\n        //track removed shares\r\n        user.amount = user.amount - amountShares;\r\n        uint256 rewardDebtOfShares = ((amountShares * pool.accEarningPerShare) / ACC_EARNING_PRECISION);\r\n        user.rewardDebt = accumulatedEarnings - rewardDebtOfShares;\r\n        pool.totalShares = pool.totalShares - amountShares;\r\n\r\n        //handle rewards\r\n        if (pendings > 0) {\r\n            safeEarningsTransfer(to, pendings);\r\n            payReferralCommission(msg.sender, pendings);\r\n        }\r\n\r\n        emit Withdraw(msg.sender, pid, amountShares, to);\r\n        emit Harvest(msg.sender, pid, pendings);\r\n    }\r\n\r\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param to Receiver of the LP tokens.\r\n    function emergencyWithdraw(uint256 pid, address to) external onlyApprovedContractOrEOA {\r\n        //skip pool update\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        uint256 amountShares = user.amount;\r\n        //find amount of LP tokens from shares\r\n        uint256 lpFromShares = (amountShares * pool.lpPerShare) / ACC_EARNING_PRECISION;\r\n\r\n        uint256 withdrawFeeBP;\r\n        if (pool.isWithdrawFee) {\r\n            withdrawFeeBP = getWithdrawFee(pid, msg.sender);\r\n        }\r\n\r\n        //track withdrawal for profit tracking\r\n        withdrawals[pid][to] += lpFromShares;\r\n        //tell strategy to withdraw lpTokens, send to 'to', and process update\r\n        pool.strategy.withdraw(msg.sender, to, lpFromShares, amountShares, withdrawFeeBP);\r\n\r\n        //track removed shares\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.totalShares = pool.totalShares - amountShares;\r\n\r\n        emit EmergencyWithdraw(msg.sender, pid, amountShares, to);\r\n    }\r\n\r\n    //OWNER-ONLY FUNCTIONS\r\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\r\n    /// @param _allocPoint AP of the new pool.\r\n    /// @param _want Address of the LP ERC-20 token.\r\n    /// @param _withUpdate True if massUpdatePools should be called prior to pool updates.\r\n    function add(uint256 _allocPoint, uint16 _depositFeeBP, IERC20 _want, bool _withUpdate,\r\n        bool _isWithdrawFee, IHoneycombStrategy _strategy)\r\n        external onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardTime =\r\n            block.timestamp > startTime ? block.timestamp : startTime;\r\n        totalAllocPoint = totalAllocPoint + _allocPoint;\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                want: _want,\r\n                strategy: _strategy,\r\n                allocPoint: _allocPoint,\r\n                lastRewardTime: lastRewardTime,\r\n                accEarningPerShare: 0,\r\n                depositFeeBP: _depositFeeBP,\r\n                isWithdrawFee: _isWithdrawFee,\r\n                totalShares: 0,\r\n                lpPerShare: ACC_EARNING_PRECISION\r\n            })\r\n        );\r\n    }\r\n\r\n    /// @notice Update the given pool's reward allocation point, withdrawal fee, and `IRewarder` contract. Can only be called by the owner.\r\n    /// @param _pid The index of the pool. See `poolInfo`.\r\n    /// @param _allocPoint New AP of the pool.\r\n    /// @param _withUpdate True if massUpdatePools should be called prior to pool updates.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        uint16 _depositFeeBP,\r\n        bool _withUpdate,\r\n        bool _isWithdrawFee\r\n    ) external onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = (totalAllocPoint - poolInfo[_pid].allocPoint) + _allocPoint;\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\r\n        poolInfo[_pid].isWithdrawFee = _isWithdrawFee;\r\n    }\r\n\r\n    //used to migrate an honeycomb from using one strategy to another\r\n    function migrateStrategy(uint256 pid, IHoneycombStrategy newStrategy) external onlyOwner {\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        //migrate funds from old strategy to new one\r\n        pool.strategy.migrate(address(newStrategy));\r\n        //update strategy in storage\r\n        pool.strategy = newStrategy;\r\n        newStrategy.onMigration();\r\n    }\r\n\r\n    //used in emergencies, or if setup of an honeycomb fails\r\n    function setStrategy(uint256 pid, IHoneycombStrategy newStrategy, bool transferOwnership, address newOwner)\r\n        external onlyOwner {\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        if (transferOwnership) {\r\n            pool.strategy.transferOwnership(newOwner);\r\n        }\r\n        pool.strategy = newStrategy;\r\n    }\r\n\r\n    function manualMint(address dest, uint256 amount) external onlyOwner {\r\n        earningToken.mint(dest, amount);\r\n    }\r\n\r\n    function transferMinter(address newMinter) external onlyOwner {\r\n        require(newMinter != address(0));\r\n        earningToken.transferOwnership(newMinter);\r\n    }\r\n\r\n    function setDev(address _dev) external onlyOwner {\r\n        require(_dev != address(0));\r\n        emit DevSet(dev, _dev);\r\n        dev = _dev;\r\n    }\r\n\r\n    function setPerfomanceFeeAddress(address _performanceFeeAddress) external onlyOwner {\r\n        require(_performanceFeeAddress != address(0));\r\n        emit PerformanceFeeAddressSet(performanceFeeAddress, _performanceFeeAddress);\r\n        performanceFeeAddress = _performanceFeeAddress;\r\n    }\r\n\r\n    function setDevMintBips(uint256 _devMintBips) external onlyOwner {\r\n        require(_devMintBips <= MAX_BIPS, \"combined dev & nest splits too high\");\r\n        devMintBips = _devMintBips;\r\n    }\r\n\r\n    function setEarningsEmission(uint256 newEarningsPerSecond, bool withUpdate) external onlyOwner {\r\n        if (withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        earningsPerSecond = newEarningsPerSecond;\r\n    }\r\n\r\n    //ACCESS CONTROL FUNCTIONS\r\n    function modifyApprovedContracts(address[] calldata contracts, bool[] calldata statuses) external onlyOwner {\r\n        require(contracts.length == statuses.length, \"input length mismatch\");\r\n        for (uint256 i = 0; i < contracts.length; i++) {\r\n            approvedContracts[contracts[i]] = statuses[i];\r\n        }\r\n    }\r\n\r\n    function setOnlyApprovedContractOrEOAStatus(bool newStatus) external onlyOwner {\r\n        onlyApprovedContractOrEOAStatus = newStatus;\r\n    }\r\n\r\n    //STRATEGY MANAGEMENT FUNCTIONS\r\n    function inCaseTokensGetStuck(uint256 pid, IERC20 token, address to, uint256 amount) external onlyOwner {\r\n        IHoneycombStrategy strat = poolInfo[pid].strategy;\r\n        strat.inCaseTokensGetStuck(token, to, amount);\r\n    }\r\n\r\n    function setAllowances(uint256 pid) external onlyOwner {\r\n        IHoneycombStrategy strat = poolInfo[pid].strategy;\r\n        strat.setAllowances();\r\n    }\r\n\r\n    function revokeAllowance(uint256 pid, address token, address spender) external onlyOwner {\r\n        IHoneycombStrategy strat = poolInfo[pid].strategy;\r\n        strat.revokeAllowance(token, spender);\r\n    }\r\n\r\n    function setPerformanceFeeBips(uint256 pid, uint256 newPerformanceFeeBips) external onlyOwner {\r\n        IHoneycombStrategy strat = poolInfo[pid].strategy;\r\n        strat.setPerformanceFeeBips(newPerformanceFeeBips);\r\n    }\r\n\r\n    //STRATEGY-ONLY FUNCTIONS\r\n    //an autocompounding strategy calls this function to account for new LP tokens that it earns\r\n    function accountAddedLP(uint256 pid, uint256 amount) external {\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        require(msg.sender == address(pool.strategy), \"only callable by strategy contract\");\r\n        pool.lpPerShare = pool.lpPerShare + ((amount * ACC_EARNING_PRECISION) / pool.totalShares);\r\n    }\r\n\r\n    //INTERNAL FUNCTIONS\r\n    // Safe reward transfer function, just in case if rounding error causes pool to not have enough earnings.\r\n    function safeEarningsTransfer(address _to, uint256 _amount) internal {\r\n        uint256 earningsBal = earningToken.balanceOf(address(this));\r\n        bool transferSuccess = false;\r\n        if (_amount > earningsBal) {\r\n            earningToken.mint(address(this), _amount - earningsBal);\r\n        }\r\n        transferSuccess = earningToken.transfer(_to, _amount);\r\n        require(transferSuccess, \"safeEarningsTransfer: transfer failed\");\r\n    }\r\n    \r\n    function getWithdrawFee(uint256 _pid, address _user) public view returns (uint16) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        if (!pool.isWithdrawFee)\r\n            return 0;\r\n        uint256 elapsed = block.timestamp - user.lastDepositTimestamp;\r\n        uint i = 0;\r\n        for (; i < withdrawalFeeIntervals.length; i++) {\r\n            if (elapsed < withdrawalFeeIntervals[i])\r\n                break;\r\n        }\r\n        return withdrawalFeeBP[i];\r\n    }\r\n    \r\n    function setWithdrawFee(uint256[] memory _withdrawalFeeIntervals, uint16[] memory _withdrawalFeeBP) public onlyOwner {\r\n        require (_withdrawalFeeIntervals.length + 1 == _withdrawalFeeBP.length, 'setWithdrawFee: _withdrawalFeeBP length is one more than _withdrawalFeeIntervals length');\r\n        require (_withdrawalFeeBP.length > 0, 'setWithdrawFee: _withdrawalFeeBP length is one more than 0');\r\n        for (uint i = 0; i < _withdrawalFeeIntervals.length - 1; i++) {\r\n            require (_withdrawalFeeIntervals[i] < _withdrawalFeeIntervals[i + 1], 'setWithdrawFee: The interval must be ascending');\r\n        }\r\n        for (uint i = 0; i < _withdrawalFeeBP.length; i++) {\r\n            require (_withdrawalFeeBP[i] <= MAX_WITHDRAWAL_FEE_BP, 'setWithdrawFee: invalid withdrawal fee basis points');\r\n        }\r\n        withdrawalFeeIntervals = _withdrawalFeeIntervals;\r\n        withdrawalFeeBP = _withdrawalFeeBP;\r\n    }\r\n    \r\n    // Update the earning referral contract address by the owner\r\n    function setEarningsReferral(IEarningsReferral _earningReferral) public onlyOwner {\r\n        earningReferral = _earningReferral;\r\n    }\r\n\r\n    // Update referral commission rate by the owner\r\n    function setReferralCommissionRate(uint16 _referralCommissionRate) public onlyOwner {\r\n        require(_referralCommissionRate <= MAXIMUM_REFERRAL_COMMISSION_RATE, \"setReferralCommissionRate: invalid referral commission rate basis points\");\r\n        referralCommissionRate = _referralCommissionRate;\r\n    }\r\n\r\n    // Pay referral commission to the referrer who referred this user.\r\n    function payReferralCommission(address _user, uint256 _pending) internal {\r\n        if (address(earningReferral) != address(0) && referralCommissionRate > 0) {\r\n            address referrer = earningReferral.getReferrer(_user);\r\n            uint256 commissionAmount = _pending * referralCommissionRate / 10000;\r\n\r\n            if (referrer != address(0) && commissionAmount > 0) {\r\n                earningToken.mint(referrer, commissionAmount);\r\n                earningReferral.recordReferralCommission(referrer, commissionAmount);\r\n                emit ReferralCommissionPaid(_user, referrer, commissionAmount);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract MintableToken\",\"name\":\"_earningToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_performanceFeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_earningsPerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DevSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PerformanceFeeAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionAmount\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_REFERRAL_COMMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_FEE_BP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAWAL_FEE_BP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"accountAddedLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"contract IERC20\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isWithdrawFee\",\"type\":\"bool\"},{\"internalType\":\"contract IHoneycombStrategy\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devMintBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earningPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"earningPerYearToHoneycomb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earningReferral\",\"outputs\":[{\"internalType\":\"contract IEarningsReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earningToken\",\"outputs\":[{\"internalType\":\"contract MintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earningsPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IHoneycombStrategy\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"modifyApprovedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyApprovedContractOrEOAStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"pendingEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"contract IHoneycombStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEarningPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWithdrawFee\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralCommissionRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isWithdrawFee\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devMintBips\",\"type\":\"uint256\"}],\"name\":\"setDevMintBips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEarningsPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"setEarningsEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEarningsReferral\",\"name\":\"_earningReferral\",\"type\":\"address\"}],\"name\":\"setEarningsReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setOnlyApprovedContractOrEOAStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_performanceFeeAddress\",\"type\":\"address\"}],\"name\":\"setPerfomanceFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPerformanceFeeBips\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeBips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_referralCommissionRate\",\"type\":\"uint16\"}],\"name\":\"setReferralCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IHoneycombStrategy\",\"name\":\"newStrategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferOwnership\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_withdrawalFeeIntervals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_withdrawalFeeBP\",\"type\":\"uint16[]\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"totalLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"transferMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAndHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalFeeBP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalFeeIntervals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HoneycombMaster", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000edb3301437b255310ccdcb5be9f7367649476960000000000000000000000000000000000000000000000000000000062da9f5000000000000000000000000031b8cf8244a964e80ac13d31476051194f12bd54000000000000000000000000b289b9f1aa81ea597c45c6eda8dfbba97deae93c00000000000000000000000000000000000000000000000000766c7d74835555", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f10b585396595f39a006a871476fe6f370284f074fd2ec7107073437e9432ac5"}