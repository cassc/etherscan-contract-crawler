{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-12-19\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface ISwapRouter {\r\n    // \u8fd4\u56de\u4ea4\u6362\u8def\u7531\u5408\u7ea6\u7684\u5de5\u5382\u5408\u7ea6\u5730\u5740\r\n    function factory() external pure returns (address);\r\n\r\n    // \u8fd4\u56de Wrapped Ether (WETH) \u5408\u7ea6\u5730\u5740\r\n    function WETH() external pure returns (address);\r\n\r\n    // \u4ea4\u6362\u6307\u5b9a\u6570\u91cf\u7684\u4ee3\u5e01\u4ee5\u83b7\u5f97\u53e6\u4e00\u79cd\u4ee3\u5e01\uff0c\u5e76\u652f\u6301\u5728\u8f6c\u8d26\u4ee3\u5e01\u65f6\u6536\u53d6\u8d39\u7528\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n    // \u6dfb\u52a0\u4ee3\u5e01\u6d41\u52a8\u6027\u5230 Uniswap \u6c60\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u6613\u5bf9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6613\u5bf9\u5408\u7ea6\u5730\u5740\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface ISwapPair {\r\n    // \u83b7\u53d6\u4ea4\u6613\u5bf9\u7684\u50a8\u5907\u91cf\u548c\u4e0a\u4e00\u4e2a\u5757\u7684\u65f6\u95f4\u6233\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    // \u83b7\u53d6\u4ea4\u6613\u5bf9\u4e2d\u7684 token0 \u5730\u5740\r\n    function token0() external view returns (address);\r\n\r\n    // \u66f4\u65b0\u4ea4\u6613\u5bf9\u72b6\u6001\r\n    function sync() external;\r\n\r\n    // \u83b7\u53d6\u4ea4\u6613\u5bf9\u7684\u603b\u4f9b\u5e94\u91cf\r\n    function totalSupply() external view returns (uint);\r\n}\r\ncontract BLT {\r\n    address public suplp = 0x872eCfF6F0C01f5A73EaAFd69a34Aab583a00Ef8;\r\n    address public supnft =0xBe7906FB9346755Db2Fa5ACddF9808e18a5B6858;\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    string public symbol;\r\n    uint8  public decimals;\r\n    uint256 public limitamount = 30;\r\n    uint256 public totalSupply;\r\n    uint256 public buytotal = 50;  // \u4e70\u5356\u603b\u8d39\u7387\r\n    uint256 public buylpfee = 15;  // \u4e70\u5356lp\u5206\u7ea2\r\n    uint256 public buynftfee = 25;  // nft\u5206\u7ea2\r\n    uint256 public buyburn = 10;  // \u9500\u6bc1\r\n    uint256 public buytotal1 = 300;  // \u4e70\u5356\u603b\u8d39\u7387\r\n    uint256 public buylpfee1 =  90;  // \u4e70\u5356lp\u5206\u7ea2\r\n    uint256 public buynftfee1 = 150;  // nft\u5206\u7ea2\r\n    uint256 public buyburn1 = 60;  // \u9500\u6bc1\r\n    address public lpwallet;   // lp\u5206\u7ea2\u94b1\u5305\r\n    address public NFTwallet;  // NFT\u5206\u7ea2\u94b1\u5305\r\n    uint256 public startTime; // \u8ba1\u65f6\u5f00\u59cb\u7684\u65f6\u95f4\u6233\r\n    uint256 public sellstartTime; // \u8ba1\u65f6\u5f00\u59cb\u7684\u65f6\u95f4\u6233\r\n    uint256 public countdownDuration = 8 minutes; // \u5012\u8ba1\u65f6\u7684\u65f6\u957f\r\n    uint256 public sellcountdownDuration = 10 minutes; // \u5012\u8ba1\u65f6\u7684\u65f6\u957f\r\n    address public owners;\r\n    address public blackwoner;\r\n    ISwapRouter public  _swapRouter;  // Uniswap \u4ea4\u6362\u8def\u7531\u5408\u7ea6\r\n    address public router;  // \u8def\u7531\u5408\u7ea6\u5730\u5740\r\n    address public mainPair;//\u4ea4\u6613\u5bf9\u5730\u5740\r\n    mapping(address =>uint)public isadd;//\u662f\u5426\u6dfb\u52a0\u8fc7\u6d41\u52a8\r\n    mapping(address => bool)public whiteList;//\u767d\u540d\u5355\r\n    mapping(address => bool)public blackList;//\u9ed1\u540d\u5355\r\n    mapping(address =>uint256)public whiteListLPamount;\r\n    mapping(address =>uint256 )public pendingburn;\r\n    mapping(address => uint256) public _balanceOf;\r\n    mapping(address =>uint256)public addresslptokenlimit;\r\n    mapping(address =>uint256)public oneadd;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    enum Status {open, close} //\u4e70\u5356\u5f00\u5173\r\n    Status public nowstatus;\r\n    constructor(string memory _name, \r\n    string memory _symbol, \r\n    uint8 _decimals, \r\n    uint256 _initialSupply,\r\n    address _lpwallet,\r\n    address _NFTwallet,\r\n    address _router,\r\n    address _usdt) {\r\n        owners = msg.sender;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _initialSupply.mul(10**uint256(_decimals));\r\n        _balanceOf[msg.sender] = totalSupply;     \r\n        lpwallet = _lpwallet;\r\n        NFTwallet = _NFTwallet;\r\n       // \u521d\u59cb\u5316\u4ea4\u6362\u8def\u7531\u5408\u7ea6\u548c\u8bbe\u7f6e\u5408\u7ea6\u5730\u5740\r\n        ISwapRouter swapRouter = ISwapRouter(_router);\r\n\r\n        _swapRouter = swapRouter;\r\n         // \u83b7\u53d6 Uniswap \u5de5\u5382\u5408\u7ea6\u5e76\u521b\u5efa\u4e3b\u4ea4\u6613\u5bf9\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address _mainPair = swapFactory.createPair(address(this), _usdt);\r\n          // \u8bbe\u7f6e\u4e3b\u4ea4\u6613\u5bf9\u5730\u5740\r\n        mainPair = _mainPair;\r\n        router = _router;\r\n        nowstatus = Status.close;\r\n    }\r\n    function addwhiteList(address _address,uint256 _amount)external{\r\n    require(msg.sender == owners,\"no balance\");\r\n    addresslptokenlimit[_address] = _amount;\r\n    if(_amount!=IERC20(mainPair).balanceOf(_address)){\r\n        addresslptokenlimit[_address] = IERC20(mainPair).balanceOf(_address);\r\n    }\r\n    whiteList[_address] = true;\r\n    }\r\n    function setadmin(address _address)external{\r\n         require(msg.sender == owners,\"no balance\");\r\n         owners = _address;\r\n       \r\n    }\r\n   //\u5f00\u542f\r\n     function Open()external{\r\n           require(msg.sender == owners,\"no allowance\");\r\n           nowstatus = Status.open;\r\n     }\r\n      //\u65f6\u9650\u5f00\u542f\r\n     function Opentime()external{\r\n           require(msg.sender == owners,\"no allowance\");\r\n           sellstartTime = block.timestamp;\r\n           startTime = block.timestamp; // \u8bb0\u5f55\u5f00\u59cb\u65f6\u95f4\r\n     }\r\n      function Close()external{\r\n           require(msg.sender == owners,\"no allowance\");\r\n           nowstatus = Status.close;\r\n     }\r\n      function setblackwoner(address _address)external{\r\n           require(msg.sender == owners,\"no allowance\");\r\n           \r\n           blackwoner = _address;\r\n     }\r\n   function setlimit(uint256 _amount)external{\r\n          require(msg.sender == owners,\"no allowance\");\r\n          limitamount = _amount;\r\n     }\r\n    function setblacklist(address _blackList)external{\r\n         require(msg.sender == owners||msg.sender ==blackwoner,\"no allowance\");\r\n         require(_blackList!=mainPair||_blackList!=router,\"\");\r\n          addresslptokenlimit[_blackList] = IERC20(mainPair).balanceOf(_blackList);\r\n          blackList[_blackList] = true;\r\n    }\r\n      function deleteblacklist(address _blackList)external{\r\n         require(msg.sender == owners,\"no allowance\");\r\n        addresslptokenlimit[_blackList] = IERC20(mainPair).balanceOf(_blackList);\r\n         blackList[_blackList] = false;\r\n    }\r\n       function setsuplp(address _address)external{\r\n           require(msg.sender == owners,\"no allowance\");\r\n           suplp = _address;\r\n     }\r\n     function setsupnft(address _address)external{\r\n           require(msg.sender == owners,\"no allowance\");\r\n           supnft = _address;\r\n     }\r\n     function setwhiteListLPamount(address _address,uint256 _uint)external{\r\n         require(msg.sender == owners,\"no allowance\");\r\n         whiteListLPamount[_address] =_uint;\r\n    }\r\n      function setaddresslptokenlimit(address _address,uint256 _uint)external{\r\n         require(msg.sender == owners,\"no allowance\");\r\n         addresslptokenlimit[_address] =_uint;\r\n    }\r\n    function setpendingburn(address _address,uint256 _uint)external{\r\n         require(msg.sender == owners,\"no allowance\");\r\n         pendingburn[_address] =_uint;\r\n    }\r\n   function balanceOf(address _address)public view returns(uint256 amount){\r\n       if(blackList[_address]){\r\n        return 0;   \r\n       }\r\n       if(whiteList[_address]){\r\n       return _balanceOf[_address].sub(pendingburn[_address]);\r\n      }\r\n      return _balanceOf[_address];\r\n  }\r\n    function transfer(address _to, uint256 _value) external returns (bool success) {\r\n        require(nowstatus == Status.open,\"is closed!\");\r\n        require(msg.sender == owners||msg.sender == mainPair,\"is closed!\");\r\n        require(_balanceOf[msg.sender] >= _value, \"Insufficient balance\");\r\n        require(balanceOf(msg.sender) >= _value, \"Insufficient balance\");\r\n        require(!blackList[_to],\"black address!\");\r\n        require(msg.sender == mainPair||msg.sender == owners,\"no allowance transfer\");\r\n        require((startTime != 0 && sellstartTime != 0)||msg.sender == owners, \"Countdown not finished yet\");\r\n        require(block.timestamp >= startTime + countdownDuration||msg.sender == owners||whiteList[_to], \"Countdown not finished yet\");\r\n        if (msg.sender == mainPair && _to!=suplp && _to!=supnft) {\r\n            uint256 buytotalvalue = _value.mul(buytotal).div(1000);\r\n            uint256 buyburnfeevalue = _value.mul(buyburn).div(1000);\r\n            uint256 buylpfeevalue = _value.mul(buylpfee).div(1000);\r\n            uint256 buyNFTfee = _value.mul(buynftfee).div(1000);\r\n             if (whiteList[_to]){\r\n                whiteListLPamount[_to] = IERC20(mainPair).balanceOf(_to);\r\n    \r\n                if(addresslptokenlimit[_to]>IERC20(mainPair).balanceOf(_to)){\r\n                      pendingburn[_to] =pendingburn[_to].add( _value.sub(buytotalvalue));\r\n                      addresslptokenlimit[_to] = IERC20(mainPair).balanceOf(_to);\r\n                      _balanceOf[address(0)] = _balanceOf[address(0)].add(_value.sub(buytotalvalue));\r\n                  emit   Transfer(msg.sender, address(0),  _value.sub(buytotalvalue));\r\n                }\r\n                 if(addresslptokenlimit[_to]<IERC20(mainPair).balanceOf(_to)){\r\n                      addresslptokenlimit[_to] = IERC20(mainPair).balanceOf(_to);\r\n                }\r\n                if(_value.add(_balanceOf[_to])>(uint256(10).mul(10**decimals)).add(pendingburn[_to])){\r\n                    return false;\r\n                }\r\n            }\r\n            if(_value.add(_balanceOf[_to])>(uint256(limitamount).mul(10**decimals)).add(pendingburn[_to])){\r\n                return false;\r\n            }\r\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value.sub(buytotalvalue));\r\n            // lp\u5206\u7ea2\u6c60\r\n            _balanceOf[lpwallet] = _balanceOf[lpwallet].add(buylpfeevalue);\r\n            // NFT\u5206\u7ea2\u6c60 \r\n            _balanceOf[NFTwallet] = _balanceOf[NFTwallet].add(buyNFTfee);\r\n            // \u9500\u6bc1\r\n            _balanceOf[address(0)] = _balanceOf[address(0)].add(buyburnfeevalue);\r\n             emit Transfer(msg.sender, address(0), buyburnfeevalue);\r\n             emit Transfer(msg.sender, lpwallet, buylpfeevalue);\r\n             emit Transfer(msg.sender, NFTwallet, buyNFTfee);\r\n             emit Transfer(msg.sender, _to, _value.sub(buytotalvalue));\r\n            return true;\r\n        } else {\r\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);  \r\n            emit Transfer(msg.sender, _to, _value);  \r\n            return true;\r\n        }\r\n    }\r\n    function approve(address _spender, uint256 _value) external returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n\r\n    // \u5224\u65ad\u5730\u5740\u662f\u5426\u662f\u5408\u7ea6\u5730\u5740\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\r\n        require(nowstatus == Status.open,\"is closed!\");\r\n        require(msg.sender == owners||msg.sender ==router,\"is closed!\");\r\n        require(_to != address(0), \"Invalid address\");\r\n        require(_balanceOf[_from] >= _value, \"Insufficient balance\");\r\n        require(balanceOf(_from) >= _value, \"Insufficient balance\");\r\n        require(msg.sender == router||msg.sender == owners,\"no allowance transfer\");\r\n        require(!blackList[_from],\"black address!\");\r\n        require((startTime != 0 && sellstartTime != 0)||msg.sender == owners||whiteList[_from]||_from == owners, \"Countdown not finished yet\");\r\n        require(block.timestamp >= startTime + countdownDuration||msg.sender == owners||whiteList[_from]||_from == owners, \"Countdown not finished yet\");\r\n        if (msg.sender == router&& msg.sig == 0x23b872dd && _from!=suplp && _from!=supnft){\r\n               if (_from ==owners&&oneadd[_from]==0){\r\n            require(allowance[_from][msg.sender] >= _value, \"Allowance exceeded\");\r\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n            addresslptokenlimit[_from] = IERC20(mainPair).balanceOf(_from);\r\n            oneadd[_from]=1;\r\n        \r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n            }\r\n \r\n                 addresslptokenlimit[_from] = IERC20(mainPair).balanceOf(_from);\r\n           \r\n            if(block.timestamp < sellstartTime + sellcountdownDuration){\r\n                uint256 saletotalvalue1 = _value.mul(buytotal1).div(1000);\r\n                uint256 saleburnfeevalue1 = _value.mul(buyburn1).div(1000);\r\n                uint256 salelpfeevalue1 = _value.mul(buylpfee1).div(1000);\r\n                uint256 buyNFTfee1 = _value.mul(buynftfee1).div(1000);\r\n                 require(allowance[_from][msg.sender] >= (_value.sub(saletotalvalue1)), \"Allowance exceeded\");\r\n         \r\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value.sub(saletotalvalue1));\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value.sub(saletotalvalue1));\r\n            \r\n            // lp\u5206\u7ea2\u6c60\r\n            _balanceOf[lpwallet] = _balanceOf[lpwallet].add(salelpfeevalue1);\r\n            // NFT\u5206\u7ea2\u6c60 \r\n            _balanceOf[NFTwallet] = _balanceOf[NFTwallet].add(buyNFTfee1);\r\n            // \u9500\u6bc1\r\n            _balanceOf[address(0)] = _balanceOf[address(0)].add(saleburnfeevalue1);\r\n\r\n            emit Transfer(_from, _to, _value.sub(saletotalvalue1));\r\n            emit Transfer(_from, lpwallet, salelpfeevalue1);\r\n            emit Transfer(_from, NFTwallet, buyNFTfee1);\r\n            emit Transfer(_from, address(0), saleburnfeevalue1);\r\n            return true;\r\n             }\r\n            uint256 saletotalvalue = _value.mul(buytotal).div(1000);\r\n            uint256 saleburnfeevalue = _value.mul(buyburn).div(1000);\r\n            uint256 salelpfeevalue = _value.mul(buylpfee).div(1000);\r\n            uint256 buyNFTfee = _value.mul(buynftfee).div(1000);\r\n\r\n            require(allowance[_from][msg.sender] >= (_value.sub(saletotalvalue)), \"Allowance exceeded\");\r\n     \r\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value.sub(saletotalvalue));\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value.sub(saletotalvalue));\r\n        \r\n            // lp\u5206\u7ea2\u6c60\r\n            _balanceOf[lpwallet] = _balanceOf[lpwallet].add(salelpfeevalue);\r\n            // NFT\u5206\u7ea2\u6c60 \r\n            _balanceOf[NFTwallet] = _balanceOf[NFTwallet].add(buyNFTfee);\r\n            // \u9500\u6bc1\r\n            _balanceOf[address(0)] = _balanceOf[address(0)].add(saleburnfeevalue);\r\n            emit Transfer(_from, _to, _value.sub(saletotalvalue));\r\n            emit Transfer(_from, lpwallet, salelpfeevalue);\r\n            emit Transfer(_from, NFTwallet, buyNFTfee);\r\n            emit Transfer(_from, address(0), saleburnfeevalue);\r\n            return true;\r\n        } else {\r\n            require(allowance[_from][msg.sender] >= _value, \"Allowance exceeded\");\r\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n            \r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpwallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NFTwallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTwallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Opentime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addresslptokenlimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addwhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackwoner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyburn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyburn1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buylpfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buylpfee1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buynftfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buynftfee1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buytotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buytotal1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countdownDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackList\",\"type\":\"address\"}],\"name\":\"deleteblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isadd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpwallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nowstatus\",\"outputs\":[{\"internalType\":\"enum BLT.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oneadd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingburn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellcountdownDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellstartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uint\",\"type\":\"uint256\"}],\"name\":\"setaddresslptokenlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setadmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackList\",\"type\":\"address\"}],\"name\":\"setblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setblackwoner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uint\",\"type\":\"uint256\"}],\"name\":\"setpendingburn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setsuplp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setsupnft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uint\",\"type\":\"uint256\"}],\"name\":\"setwhiteListLPamount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suplp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supnft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListLPamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BLT", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000004e0c000000000000000000000000872ecff6f0c01f5a73eaafd69a34aab583a00ef8000000000000000000000000be7906fb9346755db2fa5acddf9808e18a5b685800000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000000000000000000000342544c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000342544c0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1727bf9fa9257ce5187911267d76d97ae16da3af307c56e73d9adb838b90c41e"}