{"SourceCode": "pragma solidity ^0.8.16;\r\n\r\ninterface IPizzaCoin {\r\n    function mint(address user, uint256 money) external;\r\n\r\n    function burn(address user, uint256 coins) external;\r\n}\r\n\r\ncontract PizzaTowerV2 {\r\n    struct Tower {\r\n        uint256 money;\r\n        uint256 money2;\r\n        uint256 money3;\r\n        uint256 yield;\r\n        uint256 timestamp;\r\n        address ref;\r\n        uint256 refs;\r\n        uint256 refs2;\r\n        uint256 refs3;\r\n        uint256 refMoney;\r\n        uint8[8] chefs;\r\n    }\r\n    mapping(address => Tower) public towers;\r\n    uint256 public totalChefs;\r\n    uint256 public totalTowers;\r\n\r\n    IPizzaCoin public constant PizzaCoin = IPizzaCoin(0xf9eC2B8FfB7A9aCA3b142939a63Fd5572CD3a308);\r\n\r\n    function upgradeTower(address ref, uint256 floorId) external {\r\n        require(floorId < 8, \"Max 8 floors\");\r\n        address user = msg.sender;\r\n        towers[user].chefs[floorId]++;\r\n        uint256 chefs = towers[user].chefs[floorId];\r\n        uint256 coins = getUpgradePrice(floorId, chefs);\r\n        PizzaCoin.burn(user, coins);\r\n        if (towers[user].timestamp == 0) {\r\n            if (towers[ref].timestamp != 0) {\r\n                towers[user].money += coins * 3; // 3% cashback\r\n                towers[user].ref = ref;\r\n                towers[ref].refs++;\r\n                address ref2 = towers[ref].ref;\r\n                if (towers[ref2].timestamp != 0) {\r\n                    towers[ref2].refs2++;\r\n                    address ref3 = towers[ref2].ref;\r\n                    if (towers[ref3].timestamp != 0) {\r\n                        towers[ref3].refs3++;\r\n                    }\r\n                }\r\n            }\r\n            totalTowers++;\r\n            towers[user].timestamp = block.timestamp;\r\n        }\r\n        syncTower(user);\r\n        totalChefs++;\r\n        ref = towers[user].ref;\r\n        if (ref != address(0)) {\r\n            towers[ref].refMoney += coins * 7;\r\n            towers[ref].money += coins * 7;\r\n            address ref2 = towers[ref].ref;\r\n            if (ref2 != address(0)) {\r\n                towers[ref2].refMoney += coins * 3;\r\n                towers[ref2].money += coins * 3;\r\n                address ref3 = towers[ref2].ref;\r\n                if (ref3 != address(0)) {\r\n                    towers[ref3].refMoney += coins * 1;\r\n                    towers[ref3].money += coins * 1;\r\n                }\r\n            }\r\n        }\r\n        towers[user].yield += getYield(floorId, chefs);\r\n    }\r\n\r\n    function withdrawMoney() external {\r\n        address user = msg.sender;\r\n        uint256 money = towers[user].money;\r\n        require(money > 0, \"Zero money\");\r\n        towers[user].money = 0;\r\n        towers[user].money3 += money;\r\n        PizzaCoin.mint(user, money);\r\n    }\r\n\r\n    function collectMoney() external {\r\n        address user = msg.sender;\r\n        syncTower(user);\r\n        towers[user].money += towers[user].money2;\r\n        towers[user].money2 = 0;\r\n    }\r\n\r\n    function getChefs(address addr) external view returns (uint8[8] memory) {\r\n        return towers[addr].chefs;\r\n    }\r\n\r\n    function syncTower(address user) internal {\r\n        uint256 timestamp = towers[user].timestamp;\r\n        require(timestamp > 0, \"User is not registered\");\r\n        towers[user].money2 += (block.timestamp / 3600 - timestamp / 3600) * towers[user].yield;\r\n        towers[user].timestamp = block.timestamp;\r\n    }\r\n\r\n    function getUpgradePrice(uint256 floorId, uint256 chefId) internal pure returns (uint256) {\r\n        if (chefId == 1) return [500, 1500, 4500, 13500, 40500, 120000, 365000, 1000000][floorId];\r\n        if (chefId == 2) return [625, 1800, 5600, 16800, 50600, 150000, 456000, 1200000][floorId];\r\n        if (chefId == 3) return [780, 2300, 7000, 21000, 63000, 187000, 570000, 1560000][floorId];\r\n        if (chefId == 4) return [970, 3000, 8700, 26000, 79000, 235000, 713000, 2000000][floorId];\r\n        if (chefId == 5) return [1200, 3600, 11000, 33000, 98000, 293000, 890000, 2500000][floorId];\r\n        revert(\"Incorrect chefId\");\r\n    }\r\n\r\n    function getYield(uint256 floorId, uint256 chefId) internal pure returns (uint256) {\r\n        if (chefId == 1) return [52, 170, 526, 1615, 4965, 15100, 48000, 137000][floorId];\r\n        if (chefId == 2) return [66, 206, 657, 2017, 6230, 19000, 60500, 167000][floorId];\r\n        if (chefId == 3) return [85, 265, 826, 2530, 7800, 23800, 76000, 221000][floorId];\r\n        if (chefId == 4) return [107, 348, 1030, 3155, 9800, 30000, 96000, 287000][floorId];\r\n        if (chefId == 5) return [134, 419, 1310, 4030, 12350, 38000, 121000, 365000][floorId];\r\n        revert(\"Incorrect chefId\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"PizzaCoin\",\"outputs\":[{\"internalType\":\"contract IPizzaCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getChefs\",\"outputs\":[{\"internalType\":\"uint8[8]\",\"name\":\"\",\"type\":\"uint8[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChefs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"towers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refs2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refs3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refMoney\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"floorId\",\"type\":\"uint256\"}],\"name\":\"upgradeTower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PizzaTowerV2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4d53a1fe24a961de096ea6c6ea7bc3ecf7c02a39ceff2d700feedeb31c47a525"}