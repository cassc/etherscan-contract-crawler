{"SourceCode": "pragma solidity ^0.8.3;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n// The link contract interface is used to connect the phase two contract to the token contract\r\ninterface LinkContract{\r\n    function _execute() external returns(uint);  \r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256); \r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor (){\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 timeInSeconds) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + timeInSeconds;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime , \"Contract is locked\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n// pragma solidity >=0.5.0;\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract DDrops is Ownable, IERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint) private _balances;\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcludedFromCooldown;\r\n    mapping (address => bool) private _isExcludedFromMaxBuyMaxSell;\r\n    mapping (address => bool) private _isBlacklisted;\r\n\r\n    bool private _phase2 = false;\r\n    bool private _canBurn = false;\r\n    bool private _blacklistMode = true;\r\n    bool private _cooldownModeEnabled = true;\r\n    uint private _cooldownTimerInterval = 60;\r\n    mapping (address => uint) private _cooldownTimer;\r\n    \r\n    string private constant _name = \"DDrops\";\r\n    string private constant _symbol = \"DOP\";\r\n    uint8 private constant _decimals = 9;\r\n    uint private constant _totalSupply = 3375 * 10 ** 5 * 10 ** _decimals;\r\n    \r\n    receive () external payable {}\r\n\r\n    uint private _buyContributionFee;\r\n    uint private _sellContributionFee;\r\n    uint private _previousBuyContributionFee;\r\n    uint private _previousSellContributionFee;\r\n\r\n    uint private _maxBuy;\r\n    uint private _maxSell;\r\n    \r\n    uint private _maxTrxAmount =  _totalSupply;\r\n    uint private _amountToLiquify = 1 * 10 ** 5 * 10 ** _decimals;\r\n    \r\n    address private _treasureWalletAddress;\r\n    address private _developementWalletAddress;\r\n    address private _uniswapV2RouterAddress;\r\n    address private _linkContractAddress;\r\n\r\n    \r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n    address private _uniswapV2Pair;\r\n    \r\n    bool private _lock;\r\n    bool private _swapAndLiquifyEnabled = true;\r\n\r\n    event SwapAndLiquifiedUpdate (bool value);  \r\n    \r\n    /** Getter functions for private variables **/\r\n     function isSwapEnabled() public view returns (bool){\r\n        return _swapAndLiquifyEnabled;\r\n    }\r\n    function isBlackListMode() public view returns (bool){\r\n        return _blacklistMode;\r\n    }\r\n    function isCoolDownMode() public view returns (bool){\r\n        return _cooldownModeEnabled;\r\n    }\r\n    function getTreasureWallet() public view returns (address) {\r\n        return _treasureWalletAddress;\r\n    }    \r\n    function getMaxBuy() public view returns (uint){\r\n        return _maxBuy;\r\n    }\r\n    function getMaxSell() public view returns (uint){\r\n        return _maxSell;\r\n    }\r\n    function getBuyContributionFee() public view returns (uint){\r\n        return _buyContributionFee;\r\n    }\r\n    function getSellContributionFee() public view returns (uint){\r\n        return _sellContributionFee;\r\n    }\r\n    function getCooldownTimeInterval() public view returns (uint){\r\n        return _cooldownTimerInterval;\r\n    }\r\n    function isExcludedFromFee(address account) public view returns(bool){\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    function getMaxTrxAmount() public view returns (uint){\r\n        return _maxTrxAmount;\r\n    }\r\n\r\n    /***** onlyOwner functions to change private parameters *****/\r\n\r\n    //Enable burn through dxSale\r\n    function setCanBurn(bool _value) external onlyOwner{\r\n        _canBurn = _value;\r\n    }\r\n\r\n    //Use te exclude/include account form maxBuy and maxSell\r\n    function excludedFromMaxBuyMaxSell(address _account) external onlyOwner{\r\n        _isExcludedFromMaxBuyMaxSell[_account] = true;\r\n    }\r\n\r\n    function includedInMaxBuyMaxSell(address _account) external onlyOwner{\r\n        _isExcludedFromMaxBuyMaxSell[_account] = false;\r\n    }\r\n\r\n    // enable cooldown between trades and set the timeinterval between trades\r\n    function setCooldownMode(bool _value, uint _timeInterval) external onlyOwner {\r\n        _cooldownModeEnabled = _value;\r\n        _cooldownTimerInterval = _timeInterval;\r\n    }\r\n    //Enable blacklisting\r\n    function setBlacklistMode(bool _value) external onlyOwner{\r\n        _blacklistMode = _value;\r\n    }\r\n    //Add or remove one or more addresses from the black list, make sure to send enough gas\r\n    function manage_blacklist(address[] calldata _addresses, bool _value) external onlyOwner {\r\n        for (uint256 i; i < _addresses.length; ++i) {\r\n            _isBlacklisted[_addresses[i]] = _value;\r\n        }\r\n    }\r\n    // Set uniswapV2RouterAddress\r\n    function setRouterAddress(address _newRouterAddress, bool _migrate) external onlyOwner{\r\n        _uniswapV2RouterAddress = _newRouterAddress;\r\n        IUniswapV2Router02 __uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);\r\n        _uniswapV2Router = __uniswapV2Router;\r\n        if(_migrate == true) {_uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());}\r\n    }    \r\n    // Set total amount of tokens that can be traded per transaction\r\n    function setMaxTrxAmount (uint _newMaxTrxAmount) external onlyOwner returns (bool){\r\n        _maxTrxAmount = _newMaxTrxAmount;\r\n        return true;\r\n    }\r\n    // Set amount of tokens to swap for BNB if this is set to more than the maxTrxAmount maxTrxAmount is used instead\r\n    function setAmountToLiquify(uint _newAmountToLiquify) external onlyOwner returns (bool){\r\n        _amountToLiquify = _newAmountToLiquify;\r\n        return true;\r\n    }\r\n    // Set the amount of BUY contribution fee, limited to max 15% \r\n    function setBuyContributionFee(uint _newBuyContributionFee) external onlyOwner returns (bool){\r\n        require(_newBuyContributionFee <= 50);\r\n        _buyContributionFee = _newBuyContributionFee;\r\n        return true;\r\n    }\r\n    // Set the amount of SELL contribution fee, limited to max 20%\r\n    function setSellContributionFee(uint _newSellContributionFee) external onlyOwner returns (bool){\r\n        require(_newSellContributionFee <= 50);\r\n        _sellContributionFee = _newSellContributionFee;\r\n        return true;\r\n    }\r\n    function setSwapAndLiquifyEnabled(bool _newValue) external onlyOwner returns (bool){\r\n        _swapAndLiquifyEnabled = _newValue;\r\n        \r\n        emit SwapAndLiquifiedUpdate(_newValue);\r\n        return true;\r\n    }\r\n    \r\n    function setDevelopementWallet(address _newDevelopementWallet) external onlyOwner returns (bool){\r\n        _developementWalletAddress = _newDevelopementWallet;\r\n        return true;\r\n    }\r\n    \r\n     function setTreasureWallet(address _newTreasureWallet) external onlyOwner returns (bool){\r\n        _treasureWalletAddress = _newTreasureWallet;\r\n        return true;\r\n    }\r\n    \r\n    function excludeFromFee(address _account) external onlyOwner{\r\n        _isExcludedFromFee[_account] = true;\r\n    }\r\n    \r\n     function includeInFee(address _account) external onlyOwner{\r\n        _isExcludedFromFee[_account] = false;\r\n    }\r\n\r\n    function excludeFromCooldown(address _account) external onlyOwner{\r\n        _isExcludedFromCooldown[_account] = true;\r\n    }\r\n\r\n    function includeInCooldown(address _account) external onlyOwner{\r\n        _isExcludedFromCooldown[_account] = false;\r\n    }\r\n\r\n    function setPhase2(bool _newValue) external onlyOwner{\r\n        _phase2 = _newValue;\r\n    }\r\n\r\n    function setMaxBuy(uint _newMaxBuy) external onlyOwner{\r\n        _maxBuy = _newMaxBuy;\r\n    }\r\n    function setMaxSell(uint _newMaxSell) external onlyOwner{\r\n        _maxSell = _newMaxSell;\r\n    }\r\n    /******************* End of onlyOwner functions*********************/\r\n    modifier noReEntry {\r\n        _lock = true;\r\n        _;\r\n        _lock = false;\r\n    }\r\n    \r\n    constructor() {\r\n\r\n        _maxBuy = 1000000*10**_decimals;\r\n        _maxSell = 400000*10**_decimals;\r\n        _maxTrxAmount = 10000000*10**_decimals;\r\n        _balances[_msgSender()] = 3375 * 10 ** 5 * 10 ** _decimals;\r\n        \r\n        _buyContributionFee = 50; //this is also the normal transaction fee\r\n        _sellContributionFee = 50;\r\n\r\n        _treasureWalletAddress = 0x6260845ea07Bfe5A8B5463b83B1d3B2c53D2dCE8;\r\n        _developementWalletAddress = 0xE1032FF98B26b634393612E59819DcEe39F8c4b8;\r\n        _uniswapV2RouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n        IUniswapV2Router02 __uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);\r\n        _uniswapV2Pair = IUniswapV2Factory(__uniswapV2Router.factory()).createPair(address(this), __uniswapV2Router.WETH());\r\n        _uniswapV2Router = __uniswapV2Router;\r\n        \r\n        //exclude owner,and this contract form fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _isExcludedFromMaxBuyMaxSell[address(this)] = true;\r\n        _isExcludedFromMaxBuyMaxSell[owner()] = true;\r\n\r\n        _isExcludedFromCooldown[owner()] = true;\r\n        _isExcludedFromCooldown[address(this)] = true;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n    \r\n    function burn(uint _amount) public {\r\n        require(_amount > 0, \"Burn amount must be greater than zero\");\r\n        require(_amount <= _balances[msg.sender], \"Not enough fonds to complete the transaction\");\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\r\n        _balances[0x000000000000000000000000000000000000dEaD] = _balances[0x000000000000000000000000000000000000dEaD].add(_amount);\r\n        \r\n    }\r\n    \r\n    function name() public pure returns (string memory){\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public pure returns (string memory){\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public pure returns (uint8){\r\n        return _decimals;\r\n        \r\n    }\r\n    \r\n    function totalSupply() public pure override returns (uint256){\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256){\r\n        return _balances[account];\r\n    }\r\n\r\n     function allowance(address owner, address spender) public view override returns (uint256){\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool){\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool){\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), _allowances[_sender][_msgSender()].sub(_amount, \"ERC20: Transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _amount) private{\r\n        require(_from != address(0), \"ERC20: transfer from the zero address\");\r\n        if (_canBurn == false) {require(_to != address(0), \"ERC20: transfer to the zero address\");}\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(_amount <= _balances[_from], \"Insufficient funds\");\r\n        \r\n        if(_from != owner() && _to != owner()) {require(_amount <= _maxTrxAmount, \"Transfer amount exceeds the maxTrxAmount.\");}\r\n\r\n        // Check for cooldownTimer\r\n        if (\r\n            _from == _uniswapV2Pair &&\r\n            _cooldownModeEnabled &&\r\n            !_isExcludedFromCooldown[_to]\r\n            ){\r\n            require(_cooldownTimer[_to] < block.timestamp,\"You have to wait before making a new transaction\");\r\n            _cooldownTimer[_to] = block.timestamp + _cooldownTimerInterval;\r\n        }\r\n        else if(\r\n            _to == _uniswapV2Pair &&\r\n            _cooldownModeEnabled &&\r\n            !_isExcludedFromCooldown[_from]\r\n            ){\r\n            require(_cooldownTimer[_from] < block.timestamp,\"You have to wait before making a new transaction\");\r\n            _cooldownTimer[_from] = block.timestamp + _cooldownTimerInterval;\r\n        }\r\n\r\n        // Requiring that maxBuy and maxSell are respected\r\n        if(_from == _uniswapV2Pair && !_isExcludedFromMaxBuyMaxSell[_to]) require(_amount <= _maxBuy,\"Token amount exceeds maxBuy\");\r\n        if(_to == _uniswapV2Pair && !_isExcludedFromMaxBuyMaxSell[_from]) require(_amount <= _maxSell,\"Token amount exceeds maxSell\");\r\n\r\n        // Check for blacklist\r\n        if(_blacklistMode){require(!_isBlacklisted[_from] && !_isBlacklisted[_to],\"Transaction between these two accounts is blacklisted\");}       \r\n        \r\n            \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n            \r\n        if(contractTokenBalance >= _maxTrxAmount)\r\n        {\r\n            contractTokenBalance = _maxTrxAmount;\r\n        }\r\n        \r\n        bool overMinTokenBalance = contractTokenBalance >= _amountToLiquify;\r\n        \r\n        if (\r\n            _swapAndLiquifyEnabled &&\r\n            overMinTokenBalance &&\r\n            _from != _uniswapV2Pair &&\r\n            _phase2 == false &&\r\n            !_lock\r\n        ) {\r\n            contractTokenBalance =_amountToLiquify;\r\n            //send funds to wallets\r\n            swapAndLiquify(contractTokenBalance);\r\n        }else if(\r\n            _swapAndLiquifyEnabled &&\r\n            overMinTokenBalance &&\r\n            _from != _uniswapV2Pair &&\r\n            _phase2 == true &&\r\n            !_lock\r\n        ){\r\n            LinkContract _link = LinkContract(_linkContractAddress);\r\n            _balances[address(this)] = _balances[address(this)].sub(contractTokenBalance);\r\n            _balances[_linkContractAddress] = _balances[_linkContractAddress].add(contractTokenBalance);\r\n            _link._execute();\r\n\r\n        }\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        \r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[_from] || _isExcludedFromFee[_to]){\r\n            takeFee = false;\r\n        }\r\n        //Here we initiate the transfer fuction\r\n        _transferToken(_from, _to, _amount, takeFee);\r\n    }\r\n    \r\n    function _transferToken(address _from, address _to, uint _amount, bool takeFee) private {\r\n\r\n        if(!takeFee) removeAllFee();\r\n\r\n        uint _takeContribution;\r\n        //Code Below: decide if its a buy or sell order and adjust tax accoirdingly    \r\n        if (_to == _uniswapV2Pair){\r\n            _takeContribution = _calculateAbsoluteSellContributionFee(_amount);\r\n        }else{\r\n            _takeContribution = _calculateAbsoluteBuyContributionFee(_amount);\r\n        }\r\n        uint trAmountToRecipient = _amount.sub(_takeContribution);\r\n        uint trAmountToContract = _takeContribution;\r\n\r\n        _balances[_from] = _balances[_from].sub(_amount);\r\n        _balances[_to] = _balances[_to].add(trAmountToRecipient);\r\n        _balances[address(this)] = _balances[address(this)].add(trAmountToContract);\r\n        \r\n        if(!takeFee){restoreAllFee();}\r\n\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n     function _approve(address _owner, address _spender, uint256 _amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n    \r\n    function swapAndLiquify(uint256 contractTokenBalance) private noReEntry{\r\n        \r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // here we swap DOP for BNB\r\n        _swapTokensForBnb(contractTokenBalance);\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        \r\n        //here we share the fee between the two wallets, treasureWallet = 4%, developementWallet = 2% from a total of 6% fee which results into a 60/40 ratio;\r\n        uint256 _developementWalletAmount = newBalance.div(100).mul(40);\r\n        uint256 _treasureWalletAmount = newBalance.div(100).mul(60);\r\n        \r\n        //here we send the funds to the designated wallets\r\n        sendValue(payable(_developementWalletAddress), _developementWalletAmount);\r\n        sendValue(payable(_treasureWalletAddress), _treasureWalletAmount);\r\n    }\r\n    \r\n    //This function swaps DOP for BNB\r\n    function _swapTokensForBnb(uint256 tokenAmount) private{\r\n        // generate the uniswap pair path of token -> wbnb\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if((_buyContributionFee == 0)&&(_sellContributionFee == 0)) return;\r\n        \r\n        _previousBuyContributionFee = _buyContributionFee;\r\n        _previousSellContributionFee = _sellContributionFee;\r\n         \r\n        _buyContributionFee = _sellContributionFee = 0;    \r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _buyContributionFee = _previousBuyContributionFee;\r\n        _sellContributionFee = _previousSellContributionFee;\r\n    }\r\n    //Note buyContributionFee is the same as reqular transaction fee \r\n    function _calculateAbsoluteBuyContributionFee(uint amount) internal view returns (uint){\r\n        return amount.mul(_buyContributionFee).div(10**2);\r\n    }\r\n\r\n    function _calculateAbsoluteSellContributionFee(uint amount) internal view returns (uint){\r\n        return amount.mul(_sellContributionFee).div(10**2);\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifiedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeFromCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludedFromMaxBuyMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyContributionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCooldownTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTrxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellContributionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasureWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includeInCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includedInMaxBuyMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBlackListMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCoolDownMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInSeconds\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"manage_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmountToLiquify\",\"type\":\"uint256\"}],\"name\":\"setAmountToLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBlacklistMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBuyContributionFee\",\"type\":\"uint256\"}],\"name\":\"setBuyContributionFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setCanBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeInterval\",\"type\":\"uint256\"}],\"name\":\"setCooldownMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDevelopementWallet\",\"type\":\"address\"}],\"name\":\"setDevelopementWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxBuy\",\"type\":\"uint256\"}],\"name\":\"setMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxSell\",\"type\":\"uint256\"}],\"name\":\"setMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxTrxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTrxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"setPhase2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_migrate\",\"type\":\"bool\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSellContributionFee\",\"type\":\"uint256\"}],\"name\":\"setSellContributionFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasureWallet\",\"type\":\"address\"}],\"name\":\"setTreasureWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DDrops", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7575d51378e69b6d46f46e78e74f1d152b442dd4cd4131ee1ee55ff58f343fa3"}