{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity >=0.8.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    /*function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    function nonces(address owner) external view returns (uint);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);*/\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Token is IERC20{\r\n\r\n    struct Stake{\r\n        address account;\r\n        uint256 amount;\r\n    }\r\n\r\n    uint256 [3] public privateSaleTotalTokens;//total private sale tokens for each\r\n    uint256 [3] public privateSaleEnd;//dstribution time and distribution flag != 0\r\n    Stake [] [3] public privateSaleList;//editable to determine distribution\r\n    mapping(address=>uint256) [3] public privateSaleBalance;//amount of private sale current lockup balance after distribution\r\n    uint256 [3] public privateSaleToDistribute;//tokens undistrbuted\r\n    uint8 public completedSales;\r\n\r\n    uint256 public totalTeamTokens = 2800000000;//max team tokens\r\n    Stake [] public teamList;//editable to determine distribution\r\n    uint256 public teamVestingStart;//furthest private sale end date\r\n    mapping(address=>uint256) public teamTokenBalance;//amount from distribution\r\n    uint256 public teamToDistribute;//tokens undistrbuted\r\n    bool public canWithdraw;//withdraw extra tokens not sold or sent to team\r\n\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public override immutable totalSupply;\r\n    mapping(address=>uint256) public override balanceOf;\r\n    mapping(address=>mapping(address=>uint256)) public override allowance;\r\n    address private owner;\r\n\r\n    modifier unFinalized(uint8 saleIndex){\r\n        require(privateSaleEnd[saleIndex]==0,\"already distributed\");\r\n        _;\r\n    }\r\n    modifier finalized(uint8 saleIndex){\r\n        require(privateSaleEnd[saleIndex]!=0,\"not distributed\");\r\n        _;\r\n    }\r\n    modifier onlyOwner(){\r\n        require(msg.sender==owner,\"not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals){\r\n        owner = msg.sender;\r\n        uint256 _totalSupply = 10000000000*10**_decimals;\r\n        (name,symbol,decimals,totalSupply) = (_name,_symbol,_decimals,_totalSupply);\r\n        balanceOf[address(0)] = 3800000000 *10**_decimals;\r\n        balanceOf[msg.sender]= 6200000000*10**_decimals;\r\n        privateSaleTotalTokens[0] = 250000000*10**_decimals;\r\n        privateSaleTotalTokens[1] = 350000000*10**_decimals;\r\n        privateSaleTotalTokens[2] = 400000000*10**_decimals;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) private{\r\n        require(spendableBalance(sender)>=amount,\"insuffficient unlocked balance\");\r\n        balanceOf[sender] = balanceOf[sender].sub(amount);\r\n        balanceOf[recipient] = balanceOf[recipient].add(amount);\r\n        emit Transfer(sender,recipient,amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(allowance[sender][msg.sender]>=amount,\"Not Approved\");\r\n        allowance[sender][msg.sender] = allowance[sender][msg.sender].sub(amount);\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool){\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function clearPrivateSale(uint8 saleIndex)unFinalized(saleIndex) onlyOwner external{\r\n        delete privateSaleList[saleIndex];\r\n        privateSaleToDistribute[saleIndex]=0;\r\n    }\r\n    function addToPrivateSale(uint8 saleIndex, address buyer,uint256 amount)unFinalized(saleIndex) onlyOwner external{\r\n        amount = amount *10**decimals;\r\n        require(privateSaleToDistribute[saleIndex]+amount<=privateSaleTotalTokens[saleIndex]);\r\n        privateSaleList[saleIndex].push(Stake(buyer,amount));\r\n        privateSaleToDistribute[saleIndex] = privateSaleToDistribute[saleIndex].add(amount);\r\n    }\r\n    function addMultipleToPrivateSale(uint8 saleIndex, address[] memory buyers,uint256 [] memory amounts)unFinalized(saleIndex) onlyOwner external{\r\n        for(uint256 i=0;i<buyers.length;i++){\r\n            amounts[i] = amounts[i] *10**decimals;\r\n            require(privateSaleToDistribute[saleIndex]+amounts[i]<=privateSaleTotalTokens[saleIndex]);\r\n            privateSaleList[saleIndex].push(Stake(buyers[i],amounts[i]));\r\n            privateSaleToDistribute[saleIndex] = privateSaleToDistribute[saleIndex].add(amounts[i]);\r\n        }\r\n    }\r\n    function clearTeam()unFinalized(2) onlyOwner external{\r\n        delete teamList;\r\n        teamToDistribute = 0;\r\n    }\r\n    function addToTeam(address member,uint256 amount)unFinalized(2) onlyOwner external{\r\n        amount = amount *10**decimals;\r\n        require(teamToDistribute+amount<=totalTeamTokens);\r\n        teamList.push(Stake(member,amount));\r\n        teamToDistribute = teamToDistribute.add(amount);\r\n    }\r\n\r\n    function addMultipleToTeam(address[] memory members,uint256[] memory amounts)unFinalized(2) onlyOwner external{\r\n        for(uint256 i=0;i<members.length;i++){\r\n            amounts[i] = amounts[i] *10**decimals;\r\n            require(teamToDistribute+amounts[i]<=totalTeamTokens);\r\n            teamList.push(Stake(members[i],amounts[i]));\r\n            teamToDistribute = teamToDistribute.add(amounts[i]);\r\n        }\r\n    }\r\n    function distributePrivateSale(uint8 saleIndex)unFinalized(saleIndex) onlyOwner external{\r\n        require(block.timestamp!=0);//unlikely edge case\r\n        for(uint256 i=0;i<privateSaleList[saleIndex].length;i++){\r\n            _transfer(address(0),privateSaleList[saleIndex][i].account,privateSaleList[saleIndex][i].amount);\r\n            privateSaleBalance[saleIndex][privateSaleList[saleIndex][i].account] = privateSaleBalance[saleIndex][privateSaleList[saleIndex][i].account].add(privateSaleList[saleIndex][i].amount);\r\n        }\r\n        completedSales++;\r\n        privateSaleEnd[saleIndex] = block.timestamp;\r\n        if(completedSales==3){\r\n            for(uint256 i=0;i<teamList.length;i++){\r\n                _transfer(address(0),teamList[i].account,teamList[i].amount);\r\n                teamTokenBalance[teamList[i].account] = teamTokenBalance[teamList[i].account].add(teamList[i].amount);\r\n            }\r\n            teamVestingStart = block.timestamp;\r\n            canWithdraw=true;\r\n        }\r\n    }\r\n    function spendableBalance(address account) public view returns(uint256) {\r\n        uint256 lockedTokens;\r\n        for(uint8 i=0;i<privateSaleEnd.length;i++){\r\n            lockedTokens = lockedTokens.add(lockedBalanceFromSale(account,i));\r\n        }\r\n        if(teamVestingStart > 0 && teamTokenBalance[account] > 0 &&  block.timestamp < teamVestingStart + 31557600){\r\n            if(block.timestamp > teamVestingStart){\r\n                lockedTokens = lockedTokens.add((teamVestingStart + 31557600 - block.timestamp).mul(teamTokenBalance[account]).div(31557600));\r\n            }\r\n            else{\r\n                lockedTokens = lockedTokens.add(teamTokenBalance[account]);\r\n            }\r\n        }\r\n        return balanceOf[account].sub(lockedTokens);\r\n    }\r\n    function lockedBalanceFromSale(address account, uint8 saleIndex) public view returns(uint256){\r\n        //private sale balance and not past maturity\r\n        if(privateSaleBalance[saleIndex][account] > 0 && block.timestamp < privateSaleEnd[saleIndex] + 39447000){\r\n            //before 3 month lockup ends entire balance is locked\r\n            if(block.timestamp < privateSaleEnd[saleIndex] + 7889400){\r\n                return privateSaleBalance[saleIndex][account];\r\n            }\r\n            //immature portion = (maturity - currentTime / maturity) * balance\r\n            else{\r\n                return (privateSaleEnd[saleIndex] + 39447000 - block.timestamp).mul(privateSaleBalance[saleIndex][account]).div(31557600);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    function withdrawLeftoverPrivateSale(uint8 saleIndex) finalized(saleIndex) onlyOwner external{\r\n        require(teamVestingStart!=0 && canWithdraw==true);\r\n        //all \"ToDistribute\" balances are already distributed\r\n        _transfer(address(0),owner,totalTeamTokens - teamToDistribute + privateSaleTotalTokens[0] - privateSaleToDistribute[0]+ privateSaleTotalTokens[1] - privateSaleToDistribute[1]+ privateSaleTotalTokens[2] - privateSaleToDistribute[2]);\r\n        canWithdraw = false;\r\n    }\r\n\r\n    //function privateSaleSend for token lockup multisend\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"saleIndex\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addMultipleToPrivateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addMultipleToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"saleIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToPrivateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"saleIndex\",\"type\":\"uint8\"}],\"name\":\"clearPrivateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completedSales\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"saleIndex\",\"type\":\"uint8\"}],\"name\":\"distributePrivateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"saleIndex\",\"type\":\"uint8\"}],\"name\":\"lockedBalanceFromSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"privateSaleBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"privateSaleEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"privateSaleList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"privateSaleToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"privateSaleTotalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"spendableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamVestingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTeamTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"saleIndex\",\"type\":\"uint8\"}],\"name\":\"withdrawLeftoverPrivateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000a4d6167696343726166740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d43525400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://29ebdb1dc0054feea1eff6b237f48a8c48a411928215e6942d7e08f49df9911e"}