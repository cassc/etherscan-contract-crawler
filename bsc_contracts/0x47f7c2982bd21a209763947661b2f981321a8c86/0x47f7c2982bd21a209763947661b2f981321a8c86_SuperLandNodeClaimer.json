{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface INFT {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function getCurrentCycle() external view returns (uint256);\r\n    function UpdateCycleReward(uint256 amount) external returns (bool);\r\n    function cycleReward(uint256 cycle) external view returns (uint256);\r\n    function getHashForClaim(uint256 cycle) external view returns (uint256,uint256);\r\n    function ProcessTokenRequest(address account,uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract SuperLandNodeClaimer is Ownable {\r\n\r\n    address public matrixAddress = 0xde8256d1B5772102f0b470Ea1AaD698f463188C5;\r\n    address public ticketAddress = 0xe7b03c84FD2EcA8C605097b96AFd69153886aad7;\r\n    address public usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    bool locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    mapping(address => mapping(uint256 => mapping(uint256 => bool))) public claimed;\r\n    mapping(address => uint256) public totalClaimed;\r\n\r\n    constructor() {}\r\n\r\n    function claimTicketReward(address account,uint256 cycle,uint256 list) public noReentrant returns (bool) {\r\n        (bool isWinner,,uint256 reward) = checkWinner(account,cycle,list);\r\n        require(isWinner,\"Account Not Is Winner This Cycle\");\r\n        require(!claimed[account][cycle][list],\"Account Claimed This Cycle\");\r\n        claimed[account][cycle][list] = true;\r\n        totalClaimed[account] += reward;\r\n        IERC20(usdtAddress).transferFrom(matrixAddress,account,reward);\r\n        return true;\r\n    }\r\n\r\n    function checkWinner(address account,uint256 cycle,uint256 list) public view returns (bool isWinner_,bool isJackpot_,uint256 reward_) {\r\n        bool isWinner;\r\n        bool isJackpot;\r\n        INFT ticketNFT = INFT(ticketAddress);\r\n        uint256 currentCycle = ticketNFT.getCurrentCycle();\r\n        uint256 reward = ticketNFT.cycleReward(cycle);\r\n        if(cycle==0){ reward -= 100000000000000000000; }\r\n        (uint256 hash,uint256 count) = ticketNFT.getHashForClaim(cycle);\r\n        require(cycle<currentCycle,\"This Cycle Was Not Ended!\");\r\n        uint256 winnerTicket = hashToNumber(hash,count,list);\r\n        address winnerAddress = ticketNFT.ownerOf(winnerTicket);\r\n        if(winnerAddress==account){\r\n            isWinner = true;\r\n            if(list==0){\r\n                isJackpot = true;\r\n                reward = reward / 2;\r\n            }else{\r\n                reward = reward / 20;\r\n            }\r\n        }\r\n        return (isWinner,isJackpot,reward);\r\n    }\r\n\r\n    function getWinnerCycle(uint256 cycle) public view returns (uint256[] memory ticketNumber_,address[] memory winnerAddress_) {\r\n        INFT ticketNFT = INFT(ticketAddress);\r\n        uint256 currentCycle = ticketNFT.getCurrentCycle();\r\n        (uint256 hash,uint256 count) = ticketNFT.getHashForClaim(cycle);\r\n        require(cycle<currentCycle,\"This Cycle Was Not Ended!\");\r\n        uint256[] memory result = new uint256[](11);\r\n        address[] memory winner = new address[](11);\r\n        for(uint256 i = 0; i < 11; i++){\r\n            result[i] = hashToNumber(hash,count,i);\r\n            winner[i] = ticketNFT.ownerOf(result[i]);\r\n        }\r\n        return (result,winner);\r\n    }\r\n\r\n    function hashToNumber(uint256 hash,uint256 count,uint256 index) public pure returns (uint256) {\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(hash, count, index)));\r\n        uint256 randomNumber = uint256(keccak256(abi.encodePacked(seed)));\r\n        return (randomNumber % count) + 1;\r\n    }\r\n\r\n    function callWithData(address to,bytes memory data) public onlyOwner returns (bytes memory) {\r\n        (bool success,bytes memory result) = to.call(data);\r\n        require(success);\r\n        return result;\r\n    }\r\n\r\n    function callWithValue(address to,bytes memory data,uint256 amount) public onlyOwner returns (bytes memory) {\r\n        (bool success,bytes memory result) = to.call{ value: amount }(data);\r\n        require(success);\r\n        return result;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callWithData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"callWithValue\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"list\",\"type\":\"uint256\"}],\"name\":\"checkWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWinner_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isJackpot_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"list\",\"type\":\"uint256\"}],\"name\":\"claimTicketReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"getWinnerCycle\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketNumber_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"winnerAddress_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"hashToNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matrixAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SuperLandNodeClaimer", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9db551b0fc40562e658e5d796f75bf7fff5f3470453ac1bc09674e6c96f32e6e"}