{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakeSwapRouter {\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n\r\ncontract Airdrop {\r\n\r\n    mapping(address => bool) public admins;\r\n\r\n    modifier isAdmin() {\r\n        require(admins[msg.sender], \"Caller is not admin\");\r\n        _;\r\n    }\r\n\r\n    IPancakeSwapRouter public pancakeSwapRouter;\r\n\r\n    constructor(address _pancakeSwapRouterAddress) {\r\n        admins[msg.sender] = true;\r\n        pancakeSwapRouter = IPancakeSwapRouter(_pancakeSwapRouterAddress);\r\n    }\r\n\r\n    function addAdmin(address _admin) public isAdmin {\r\n        admins[_admin] = true;\r\n    }\r\n\r\n    function removeAdmin(address _admin) public isAdmin {\r\n        admins[_admin] = false;\r\n    }\r\n\r\n    function getTokenBalance(address tokenAddress) external view returns (uint256) {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function drop(address token, address[] calldata users, uint256[] calldata amounts) external isAdmin {\r\n        uint256 len = users.length;\r\n        require(\r\n            len == amounts.length,\r\n            'Invalid Lengths'\r\n        );\r\n\r\n        uint256 totalAmount = 0;\r\n        for (uint i = 0; i < len; i++) {\r\n            totalAmount += amounts[i];\r\n        }\r\n\r\n        // Ensure the contract has enough tokens to cover the airdrop\r\n        require(\r\n            IERC20(token).balanceOf(address(this)) >= totalAmount,\r\n            \"Insufficient token balance for airdrop\"\r\n        );\r\n\r\n        for (uint i = 0; i < len;) {\r\n            require(\r\n                IERC20(token).transfer(users[i], amounts[i]),\r\n                'Failure On Transfer'\r\n            );\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function dropNative(address[] calldata users, uint256[] calldata amounts) external payable isAdmin {\r\n        uint256 len = users.length;\r\n        require(\r\n            len == amounts.length,\r\n            'Invalid Lengths'\r\n        );\r\n\r\n        uint256 totalAmount = 0;\r\n        for (uint i = 0; i < len; i++) {\r\n            totalAmount += amounts[i];\r\n        }\r\n\r\n        // Ensure the contract has received enough Ether to cover the airdrop\r\n        require(msg.value >= totalAmount, \"Insufficient funds for airdrop\");\r\n\r\n        for (uint i = 0; i < len;) {\r\n            // Transfer native token (e.g., Ether) to the specified user\r\n            (bool success, ) = users[i].call{value: amounts[i]}(\"\");\r\n            require(success, \"Failed to send native token\");\r\n            unchecked { ++i; }\r\n        }\r\n\r\n        // If there's any remaining Ether, send it back to the admin\r\n        uint256 remainingBalance = address(this).balance;\r\n        if (remainingBalance > 0) {\r\n            (bool success, ) = payable(msg.sender).call{value: remainingBalance}(\"\");\r\n            require(success, \"Failed to refund remaining balance\");\r\n        }\r\n    }\r\n\r\n    function swapNativeToToken(address token) external isAdmin {\r\n        require(address(this).balance > 0, \"Insufficient BNB balance\");\r\n\r\n        // Set a reasonable deadline, for example, 15 minutes from now\r\n        uint deadline = block.timestamp + 15 minutes;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeSwapRouter.WETH();\r\n        path[1] = token;\r\n\r\n        // Fetch the current estimated return amount\r\n        uint[] memory estimatedAmounts = pancakeSwapRouter.getAmountsOut(address(this).balance, path);\r\n        // Set amountOutMin to 90% of the estimated return amount\r\n        uint256 amountOutMin = estimatedAmounts[1] * 90 / 100;\r\n\r\n        // Swap the entire BNB balance to the specified token\r\n        pancakeSwapRouter.swapExactETHForTokens{value: address(this).balance}(\r\n            amountOutMin,\r\n            path,\r\n            address(this),\r\n            deadline\r\n        );\r\n    }\r\n\r\n    function withdraw(address token) external isAdmin {\r\n        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawBNB() external isAdmin {\r\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(s);\r\n    }\r\n\r\n        // Function to receive Ether. msg.data must be empty\r\n    receive() external payable {}\r\n\r\n    // Fallback function is called when msg.data is not empty\r\n    fallback() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeSwapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"drop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"dropNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"swapNativeToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Airdrop", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://000ac178d0e1f568816b6293c1ebdd58bad8a542783c9dd162eb4b36f527f81e"}