{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n/// @title Optimized overflow and underflow safe math operations\r\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"SafeMath: addition overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(x == 0 || (z = x * y) / x == y, \"SafeMath: multiplication overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(y > 0, \"SafeMath: division by zero\");\r\n        return x / y;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(y != 0, \"SafeMath: modulo by zero\");\r\n        return x % y;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x > y ? x : y;\r\n    }\r\n\r\n     // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function feeTo() external view returns (address);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function kLast() external view returns (uint);\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IPinkLock {\r\n    function lock(\r\n        address owner,\r\n        address token,\r\n        bool isLpToken,\r\n        uint256 amount,\r\n        uint256 unlockDate,\r\n        string memory description\r\n    ) external returns (uint256 id);\r\n}\r\n\r\ninterface IMintRouter {\r\n    function factory() external view returns (address);\r\n}\r\n\r\ninterface IMintFactory {\r\n    function conf(uint x) external view returns (uint begin, address token, uint period, uint m, uint n, uint s);\r\n    function set0(uint256 x) external;\r\n    function mint(address h, uint256 t, uint256 x, uint256 y, uint256 z) external view returns (uint256);\r\n}\r\n\r\ninterface IEcologyFactory {\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\ncontract WjToken is Context, IERC20, Ownable{\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    event Invited(address indexed from, address indexed to);\r\n    event MintUnlock(address indexed token);\r\n    event MintLocked(address indexed token, address indexed to, uint256 value);\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name = 'WJ3.0 Token';\r\n    string private _symbol = 'WJ';\r\n\r\n    uint256 private _totalSupply = 210000 * 1e18;\r\n    uint256 private constant BURN_MAX = 189000 * 1e18;\r\n\r\n    address private immutable pair;\r\n    address private immutable token0;\r\n    address private immutable sfactory;\r\n    address private immutable efactory;\r\n    address private immutable mrouter;\r\n    address private immutable pinklock;\r\n    //uint8 private _decimals = 18;\r\n\r\n    struct Tp{\r\n        address a;\r\n        address b; \r\n        address c;\r\n        uint32 d;\r\n        uint256 e;\r\n        uint256 f;\r\n        uint256 g;\r\n        uint256 h;\r\n        uint256 i;\r\n        uint256 j;\r\n        uint256 k;\r\n        uint256 l;  \r\n        uint256 m;      \r\n        uint256 v;     \r\n    }\r\n\r\n    //uses single storage slot\r\n    struct Volume{\r\n        uint8 s;          \r\n        uint48 t;        \r\n        uint200 v; \r\n    }\r\n\r\n    struct Tms {\r\n        uint48 time;\r\n        uint104 mint;\r\n        uint104 send;\r\n    }\r\n\r\n    struct Tmc{\r\n        uint8 lock;\r\n        uint48 time;  \r\n        uint32 pers;\r\n        uint32 next;    \r\n        uint136 total;\r\n    }\r\n\r\n    struct Tlp{\r\n        uint32 nums;\r\n        uint32 pers;\r\n        uint32 next;    \r\n        uint48 time;  \r\n        uint112 avgs;\r\n    }\r\n\r\n    Tms private _ms;\r\n    Tmc private _mc;\r\n    Tlp private _lp;\r\n    uint256 private _lp_size = 1;   \r\n    uint256 private _lp_total;\r\n    uint256[] private _lp_emptys;\r\n    mapping(address => uint256) private _lp_indexs;   \r\n    mapping(uint256 => address) private _lp_holders;   \r\n    mapping(address => Volume) private _lp_limits;   \r\n    mapping(address => Volume) private _lp_directs;\r\n    mapping(address => Volume[]) private _lp_volumes;\r\n    mapping(address => uint256[]) private _lp_pinklocks;\r\n    mapping(address => mapping(address => uint256)) private _lp_dividends;\r\n    mapping(address => address) private _invites;\r\n    mapping(address => address[]) private _directs;\r\n\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(address r, address t, address e, address m, address p) {\r\n        address f = ISwapRouter(r).factory();\r\n\t    pair = ISwapFactory(f).createPair(t, address(this));\r\n        token0 = t;\r\n        sfactory = f;\r\n        efactory = e;\r\n        mrouter = m;\r\n        pinklock = p;\r\n        IERC20(pair).approve(p, ~uint256(0));\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        if(amount == 0){\r\n            if(to == pair){\r\n                require(block.timestamp > 1701436880);\r\n                _processLp(100);\r\n                return;\r\n            }\r\n\r\n            if(from == tx.origin && _invites[from] == address(0)){\r\n                address p = _invites[to];\r\n                require(from != to && from != p && from != _invites[p], \"Reject recursion invite\");\r\n                if(!from.isContract() && !to.isContract()){\r\n                    _invites[from] = to;\r\n                    if(_directs[to].length < 200){\r\n                        _directs[to].push(from);\r\n                        _lp_directs[to].s = 0;\r\n                    }\r\n                    emit Invited(from, to);\r\n                }\r\n            }\r\n\r\n            _setHolderLp(to, 0);\r\n            emit Transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"Insufficient funds\");\r\n        uint action = _isLiquidity(from, to, amount);\r\n        //Transfer or addLiquidity\r\n        if(action == 0 || action == 3){\r\n            unchecked{\r\n                _balances[from] -= amount;\r\n                _balances[to] += amount;\r\n            }\r\n            emit Transfer(from, to, amount);\r\n            return;\r\n        }\r\n        \r\n        require(block.timestamp > 1701436880, \"Not Open\");\r\n\r\n        uint256 fee;\r\n        uint256 burn;\r\n        uint256 left;\r\n        uint256 received;\r\n        if(action == 1){\r\n            fee = amount / 100;\r\n        }else if(action == 2){\r\n            if(amount == fromBalance){\r\n                //Retain holding address\r\n                amount -= amount / 1e9;\r\n            }\r\n            fee = amount / 50;\r\n        }else if(action == 4){\r\n            burn = amount / 50;\r\n        }\r\n\r\n        unchecked{\r\n             received = amount - fee - burn;\r\n            _balances[from] -= amount;\r\n            _balances[to] += received;\r\n        }\r\n\r\n        address holder;\r\n        if(from == pair){\r\n            holder = to;\r\n            emit Transfer(from, to, amount);\r\n        }else{\r\n            holder = from;\r\n            emit Transfer(from, to, received);\r\n        }\r\n\r\n        if(fee > 0){\r\n            //Level dividends and left info Minting pool\r\n            left = _processLevels(holder, amount, fee);\r\n        }\r\n\r\n        if(burn > 0){\r\n            //Limit burn Max and left info Minting pool\r\n            uint256 v = _balances[address(0xdEaD)];\r\n            if(BURN_MAX > v){\r\n                unchecked{\r\n                    v = Math.min(BURN_MAX - v , burn);\r\n                    _balances[address(0xdEaD)] += v;\r\n                    left = burn - v;\r\n                }\r\n                emit Transfer(holder, address(0xdEaD), v);\r\n            }else{\r\n                left = burn;\r\n            }\r\n        }\r\n\r\n        if(left > 0){\r\n            //For Empower Web3.0 Ecology e.g\r\n            address feeTo = IEcologyFactory(efactory).feeTo();\r\n            if(feeTo != address(0)){\r\n                unchecked {   \r\n                    left >>= 1;\r\n                    _balances[feeTo] += left;\r\n                }\r\n                emit Transfer(holder, feeTo, left);\r\n            }\r\n\r\n            unchecked{\r\n                _balances[address(this)] += left;\r\n            }\r\n            emit Transfer(holder, address(this), left);\r\n        }\r\n        //Trigger dividends\r\n        if(action & 1 == 0){\r\n            _processLp(10);\r\n            _processMint();\r\n        }   \r\n    }\r\n\r\n\r\n    function _isLiquidity(address from, address to, uint256 amount) private returns(uint action){\r\n        //address token0 = ISwapPair(pair).token0();\r\n        //1,2,3,4 \r\n        if(pair == from){\r\n            //Buy\r\n            action = 1;\r\n            uint256 balance0 = IERC20(token0).balanceOf(from);\r\n            (uint256 reserve0,,) = ISwapPair(from).getReserves();\r\n            if(balance0 < reserve0){                \r\n                //RemoveLiquidity;\r\n                action = 4;\r\n                _setHolderLp(to, 0);\r\n            }\r\n        }else if(pair == to){\r\n            //Sell\r\n            action = 2;\r\n            uint256 balance0 = IERC20(token0).balanceOf(to);\r\n            (uint256 reserve0, uint256 reserve1,) = ISwapPair(to).getReserves();\r\n            if(reserve0 == 0){\r\n                require(from == _owner, \"First addition must be owner\");\r\n                action = 3;\r\n            }else if(balance0 > reserve0){\r\n                if(from == tx.origin){\r\n                    uint256 liquidity = _calLiquidity(balance0 - reserve0, amount, reserve0, reserve1);\r\n                    if(liquidity > 1e9){\r\n                        //AddLiquidity;\r\n                        action = 3;\r\n                        _setHolderLp(from, liquidity);\r\n                    }\r\n                }\r\n            }\r\n        } \r\n    }\r\n    \r\n    function _calLiquidity(uint256 amount0, uint256 amount1, uint256 reserve0, uint256 reserve1) private view returns(uint256){\r\n        unchecked{\r\n            if(amount0 * reserve1 / reserve0 < amount1){\r\n                return 0;\r\n            }\r\n            uint256 s = IERC20(pair).totalSupply();\r\n            // if fee is on, mint liquidity equivalent to 8/25 of the growth in sqrt(k)\r\n            if(ISwapFactory(sfactory).feeTo() != address(0)){\r\n                uint256 kLast = ISwapPair(pair).kLast();\r\n                if (kLast != 0) {\r\n                    uint256 rootK = Math.sqrt(reserve0 * reserve1);\r\n                    uint256 rootKLast = Math.sqrt(kLast);\r\n                    if (rootK > rootKLast) {\r\n                        uint256 numerator = s * (rootK - rootKLast) * 8;\r\n                        uint256 denominator = rootK * 17 + rootKLast * 8;\r\n                        s += numerator / denominator;\r\n                    }\r\n                }\r\n            }\r\n            return Math.min(s * amount0 / reserve0, s * amount1 / reserve1);\r\n        }\r\n    }\r\n\r\n    \r\n    function _setHolderLp(address h, uint256 liquidity) private{\r\n        Volume[] storage a = _lp_volumes[h];\r\n        uint j = a.length;\r\n        if(j == 0 && liquidity == 0){\r\n            return ;\r\n        }\r\n        uint256 v = IERC20(pair).balanceOf(h);\r\n        if(liquidity > 1){\r\n            unchecked{v += liquidity;}\r\n        }\r\n        if(v >= 1e18 && j > 0){\r\n            //Last\r\n            Volume memory e = a[j - 1];\r\n            if(e.v >= v && liquidity > 1){\r\n                liquidity = 0;\r\n            }\r\n            if(j == 1){\r\n                if(e.v > v){\r\n                    e.v = uint200(v);\r\n                    a[0] = e;\r\n                }else if(liquidity == 0){\r\n                    return;\r\n                }\r\n            }else{\r\n                if(e.t < block.timestamp){\r\n                    _deleteX(a, j - 1);\r\n                    if(e.v > v){\r\n                        e.v = uint200(v);\r\n                        a[0] = e;\r\n                    }else{\r\n                        a[0] = e;\r\n                        if(liquidity == 0){\r\n                            return;\r\n                        }\r\n                    }\r\n                    j = 1;\r\n                }else if(e.v > v){\r\n                    uint i = 0;\r\n                    while(i < j){\r\n                        e = a[i];\r\n                        if(e.v > v){\r\n                            e.v = uint200(v);\r\n                            a[i] = e;\r\n                            if(++i < j){\r\n                                //a.length = i;\r\n                                _deleteX(a, j - i);\r\n                                j = i;\r\n                            }\r\n                            break;\r\n                        }\r\n                        unchecked{++i;}\r\n                    }\r\n                }else {\r\n                    if(liquidity == 0){\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(v >= 1e18 && liquidity > 1){ \r\n            Volume memory e = Volume(1, uint48(block.timestamp + 172800), uint200(v));\r\n            if(j > 2){\r\n                unchecked{\r\n                    a[0] = a[j - 2];\r\n                    a[1] = a[j - 1];\r\n                    a[2] = e;\r\n                }\r\n            }else{\r\n                a.push(e);\r\n            }\r\n        }\r\n\r\n        if(v < 1e18){\r\n            if(j > 0){\r\n                delete _lp_volumes[h];\r\n                _lp_limits[h].s = 0;\r\n            }\r\n        }else{\r\n            if(j == 0 && liquidity > 1){\r\n                _lp_limits[h].s = 1;  \r\n            }\r\n        }\r\n\r\n        if(v >= 20e18 || liquidity == 1){\r\n            uint i = _lp_indexs[h];\r\n            if(i == 0){\r\n                uint l = _lp_emptys.length;\r\n                if(l > 0){\r\n                    l = _lp_emptys[l - 1];\r\n                    _lp_emptys.pop();\r\n                }else{\r\n                    l = _lp_size;\r\n                    unchecked{++_lp_size;}\r\n                }\r\n                _lp_indexs[h] = l;\r\n                _lp_holders[l] = h;\r\n                unchecked{++_lp.nums;}\r\n            }\r\n        }else{\r\n            uint i = _lp_indexs[h];\r\n            if(i > 0 && _lp_pinklocks[h].length == 0){\r\n                --_lp.nums;\r\n                _lp_emptys.push(i);\r\n                delete _lp_indexs[h];\r\n                delete _lp_holders[i];\r\n            }\r\n        }\r\n\r\n        _lp_directs[_invites[h]].s = 0;\r\n    }\r\n\r\n\r\n    function _deleteX(Volume[] storage a, uint i) private{\r\n        while(i > 0){\r\n            a.pop();\r\n            unchecked{--i;}\r\n        }\r\n    }\r\n    \r\n    function _processLevels(address from, uint256 amount, uint256 fee) private returns(uint256) {\r\n        //If nesting to reduce code, and save gas\r\n        //And avoid stack too deep, few variables as possible\r\n        address f = _invites[from];\r\n        if(f == address(0)){\r\n            return fee;\r\n        }\r\n        uint j;\r\n        Tp memory p = _createP(from, pair, amount, fee);\r\n        address[] memory a = new address[](8);\r\n        do{\r\n            uint i;\r\n            while(i < j){\r\n                if(a[i] == f){\r\n                    return fee;\r\n                }\r\n                unchecked{++i;}\r\n            }\r\n            \r\n            p.b = f;\r\n            _limitLevelLp(p);\r\n            if(p.i > 0){\r\n                _profitLevelLp(p);\r\n                if(p.l > 0){\r\n                    unchecked{\r\n                        fee -= p.l;\r\n                        if(fee < 1e9){\r\n                            p.l += fee;\r\n                            fee = 0;\r\n                        }\r\n                        _sendLevelLp(p);\r\n                        if(fee == 0 || ++p.d == 2){\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                p.i = 0;\r\n            }\r\n\r\n            if(a.length == j){\r\n                if(j == 24){\r\n                    break;\r\n                }\r\n                i = 0;\r\n                address[] memory b = new address[](j + 8);\r\n                while(i < j){\r\n                    b[i] = a[i];\r\n                    unchecked{++i;}\r\n                }\r\n                a = b;\r\n            }\r\n            a[j] = f;\r\n            unchecked{++j;}\r\n            f = _invites[f];\r\n        } while(f != address(0) && f != from);\r\n\r\n        return fee; \r\n    }\r\n\r\n\r\n    function _createP(address a, address c, uint256 e, uint256 f) private pure returns(Tp memory){\r\n       return Tp(a, address(0), c, 0, e, f, 0, 0 , 0, 0, 0 ,0 , 0, 0); \r\n    }\r\n\r\n\r\n    function _profitLevelLp(Tp memory p) private pure {\r\n        unchecked{\r\n            if(p.d == 0){\r\n                p.j = p.e;\r\n            }else{\r\n                p.j = p.g;\r\n                p.j += (p.e - p.g) >> 2;\r\n            }\r\n            p.k = p.i < p.j ? p.i : p.j;\r\n            p.l = p.f * p.k * 4 / p.e / 5;\r\n            p.g = p.j - p.k;\r\n            p.v += p.k;\r\n            if(p.v >= p.h){\r\n                p.v = 1e27;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _limitLevelLp(Tp memory p) private{\r\n        Volume memory e = _lp_limits[p.b];\r\n        if(e.s == 0){\r\n            return;\r\n        }\r\n        uint256 v = e.v;\r\n        if(v > 0){\r\n            //Reset transaction limit\r\n            if(e.t < block.timestamp){\r\n                v = 0;\r\n            }\r\n        }\r\n        if(v < 1e27){\r\n            unchecked{\r\n                uint256 h = _effectLevelLp(p.b);\r\n                if(h > 0){\r\n                    if(p.m == 0){\r\n                        p.m = 2e23 * _balances[p.c] / IERC20(p.c).totalSupply();\r\n                    }\r\n                    h *= p.m;\r\n                    h /= 1e23;\r\n                    if(v < h){\r\n                        p.h = h;\r\n                        p.i = h - v;\r\n                        p.v = v;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _effectLevelLp(address h) private returns (uint256 v){\r\n        Volume[] memory a = _lp_volumes[h];\r\n        unchecked{\r\n            uint i = a.length;\r\n            uint t = (block.timestamp + 28800) / 86400 * 86400 + 144000;\r\n            while(i > 0){\r\n                Volume memory e = a[--i];\r\n                if(e.t < t){\r\n                    v = e.v;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if(v > 0){\r\n            uint256 r = IERC20(pair).balanceOf(h);\r\n            if(v > r){\r\n                v = r < 1e18 ? 0 : r;\r\n                _setHolderLp(h, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _sendLevelLp(Tp memory p) private{\r\n        //After exceeding the limit, wait for reset\r\n        unchecked{\r\n            Volume storage e = _lp_limits[p.b];\r\n            e.t = uint48((block.timestamp + 28800) / 86400 * 86400 + 57600);  \r\n            e.v = uint200(p.v); \r\n            _balances[p.b] += p.l;\r\n        }\r\n        emit Transfer(p.a, p.b, p.l);\r\n    }\r\n\r\n    \r\n    function _processLp(uint n) private {\r\n        Tlp memory lp = _lp;\r\n        if(lp.time < block.timestamp){\r\n            lp.pers = 0;\r\n            lp.time = uint48((block.timestamp + 28800) / 86400 * 86400 + 57600);  \r\n        }\r\n        if(lp.pers > lp.nums >> 1){\r\n            return;\r\n        }\r\n        uint256 r = _release2Lp();\r\n        if(r == 0){\r\n            return;\r\n        }\r\n\r\n        uint iter;\r\n        uint size = _lp_size;\r\n        uint pers = lp.pers;\r\n        uint next = lp.next;\r\n        uint256 s;\r\n        uint256 t = _lp_total;\r\n        //1\u3001Mining uses 48 hours as a base cycle, and the queue is in no particular order.\r\n        //2\u3001When it exceeds 48 hours, the cumulative amount will be released in the next cycle, and vice versa.\r\n        while (iter < size) {\r\n            if (next >= size) {\r\n                next = 0;\r\n            }\r\n            //Reset \r\n            if(next == 0){\r\n                t = IERC20(pair).totalSupply();\r\n                _lp_total = t;\r\n                lp.avgs = uint112(1e24 * r / t / 12);\r\n            }\r\n            address h = _lp_holders[next];\r\n            unchecked{\r\n                ++iter;\r\n                ++next;\r\n            }\r\n            if(h == address(0)){\r\n                continue;\r\n            }\r\n            unchecked {\r\n                uint256 x = _effectHolderLp(h) + _pinkLockLp(h);\r\n                if(x < 20e18){\r\n                    _setHolderLp(h, 0);\r\n                }else{\r\n                    uint256 y = _directsLevelLp(h);\r\n                    if(y > 0){\r\n                        if(y < t / 100){\r\n                            y = y * 8 / 100;\r\n                        }else if(y < t / 50){\r\n                            y = y * 15 / 100;\r\n                        }else{\r\n                            y = y / 5;\r\n                        }\r\n                    }\r\n                    uint256 v = (x + y) * lp.avgs / 1e23;\r\n                    if(r > v){\r\n                        ++pers;\r\n                        r -= v;\r\n                        s += v;\r\n                        _balances[h] += v;\r\n                        emit Transfer(address(this), h, v);\r\n                        if(--n == 0){\r\n                            break;\r\n                        }\r\n                    }else{\r\n                        pers = ~uint32(0);\r\n                        if(next > 0){\r\n                            --next;   \r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(s > 0){\r\n            unchecked{\r\n                _balances[address(this)] -= s;\r\n\r\n                _ms.send += uint104(s);\r\n            }\r\n        }\r\n        lp.pers = uint32(pers);\r\n        lp.next = uint32(next);\r\n        _lp = lp;\r\n    }\r\n    \r\n\r\n    function _release2Lp() private returns (uint256 s){\r\n        s = _balances[address(this)];\r\n        unchecked{\r\n            //Release in 3 years rate 2:3:5,  return mining pool rate 2:3:5\r\n            uint256 r;\r\n            uint256 v;\r\n            uint f = 1732800081;\r\n            uint t = block.timestamp;\r\n            Tms memory ms = _ms;\r\n            if(t < f){\r\n                if(ms.time < f){\r\n                    ms.time = uint48(f);\r\n                    ms.mint = uint104(s);\r\n                    ms.send = 0;\r\n                    _ms = ms;\r\n                }\r\n                v = ms.mint / 5;\r\n                r = ms.mint / 5 << 2;\r\n                r += (s + ms.send - ms.mint) / 5;\r\n            }else if(t < (f += 31363200)){\r\n                if(ms.time < f){\r\n                    r = (s + ms.send - ms.mint) / 5;\r\n                    ms.time = uint48(f);\r\n                    ms.mint = uint104(s - r);\r\n                    ms.send = uint104(r * 7 / 3);\r\n                    _ms = ms;\r\n                }\r\n                v = ms.mint * 3 >> 3;\r\n                r = ms.mint * 5 >> 3;\r\n                r += (s + ms.send - ms.mint) * 3 / 10;\r\n            }else if(t < (f += 31363200)){\r\n                if(ms.time < f){\r\n                    r = (s + ms.send - ms.mint) * 3 / 10;\r\n                    ms.time = uint48(f);\r\n                    ms.mint = uint104(s - r);\r\n                    ms.send = uint104(r);\r\n                    _ms = ms;\r\n                }\r\n                v = ms.mint;\r\n                r = (s + ms.send - ms.mint) >> 1;\r\n            }else{\r\n                if(ms.time < t){\r\n                    ms.time = uint48(t + 31363200);\r\n                    ms.mint = uint104(s);\r\n                    ms.send = 0;\r\n                    _ms = ms;\r\n                }\r\n                f = ms.time;\r\n                v = ms.mint;\r\n                r = (s + ms.send - ms.mint) >> 1;\r\n            }\r\n            r += (f - t) * v / 31536000;\r\n            if(s > r){\r\n                s -= r;\r\n            }else{\r\n                s = 0;\r\n            }  \r\n        }\r\n    }\r\n\r\n    function _effectHolderLp(address h) private view returns (uint256 v){\r\n        Volume[] memory a = _lp_volumes[h];\r\n        uint i = a.length;\r\n        while(i > 0){\r\n            unchecked{--i;}\r\n            Volume memory e = a[i];\r\n            if(e.t < block.timestamp){\r\n                v = e.v;\r\n                break;\r\n            }\r\n        }\r\n        if(v > 0){\r\n            uint256 r = IERC20(pair).balanceOf(h);\r\n            if(v > r){\r\n                v = r;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _directsLevelLp(address h) private returns (uint256 v){\r\n        Volume memory e = _lp_directs[h];\r\n        if(e.s == 0){\r\n            address[] memory a = _directs[h];\r\n            uint i = a.length;\r\n            while(i > 0){\r\n                unchecked{\r\n                   v += IERC20(pair).balanceOf(a[--i]);\r\n                }\r\n            }\r\n            e.s = 1;\r\n            e.t = uint48(block.timestamp);\r\n            e.v = uint200(v);\r\n            _lp_directs[h] = e;\r\n        }else{\r\n            v = e.v;\r\n        }\r\n    }\r\n\r\n    function _pinkLockLp(address h) private returns (uint256 v){\r\n        uint i = _lp_pinklocks[h].length;\r\n        if(i > 0){\r\n            uint256[] memory a = _lp_pinklocks[h];\r\n            while(i > 0){\r\n                unchecked{\r\n                    uint x = a[--i];\r\n                    if(uint48(x >> 144) + uint32(x >> 112) > block.timestamp){\r\n                        if(uint32(x >> 112) < 63072000){\r\n                            v += uint112(x) * 115 / 100;\r\n                        }else{\r\n                            v += uint112(x) * 120 / 100;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if(v == 0){\r\n                delete _lp_pinklocks[h];\r\n            }\r\n        }\r\n    }\r\n\r\n    function _processMint() private {\r\n        address f = IMintRouter(mrouter).factory();\r\n        if(f == address(0)){\r\n            return;\r\n        }\r\n        Tmc memory mc = _mc;\r\n        (uint begin, address token, uint period, uint m, uint n, uint s) = IMintFactory(f).conf(_lp.nums);\r\n        if(begin == 1){\r\n            if(mc.lock == 1){\r\n                return;\r\n            }\r\n        }else{\r\n            if(begin == 0){\r\n                //Reset\r\n                if(mc.time > 0){\r\n                    delete _mc;\r\n                }\r\n            }else {\r\n                //Unlock \r\n               if(mc.lock == 1){\r\n                    _mc.lock = 0;\r\n                    emit MintUnlock(token);\r\n               }\r\n            }\r\n            return;\r\n        }\r\n        if(s == 0){\r\n            return;\r\n        }\r\n        if(mc.time < block.timestamp){\r\n            mc.pers = 0;\r\n            mc.time = uint48((block.timestamp + 28800) / 86400 * 86400 + period);\r\n        }\r\n        if(m > 0){\r\n            if(mc.pers > m){\r\n                return;\r\n            }\r\n        }\r\n\r\n        uint iter;\r\n        uint size = _lp_size;\r\n        uint pers = mc.pers;\r\n        uint next = mc.next;\r\n        uint256 t = mc.total;\r\n        while (iter < size) {\r\n            if (next >= size) {\r\n                next = 0;\r\n            }\r\n            //Reset \r\n            if(next == 0){\r\n                t = IERC20(pair).totalSupply();\r\n                mc.total = uint136(t);\r\n                IMintFactory(f).set0(t);\r\n            }\r\n            address h = _lp_holders[next];\r\n            unchecked{\r\n                ++iter;\r\n                ++next;\r\n            }\r\n            if(h == address(0)){\r\n                continue;\r\n            }\r\n            uint256 v = IMintFactory(f).mint(h, t, _effectHolderLp(h), _directsLevelLp(h), _pinkLockLp(h));\r\n            if(v == 0){\r\n                continue;\r\n            }\r\n            if(v > s){\r\n                v = s;\r\n            }\r\n            unchecked{\r\n                s -= v;\r\n                ++pers;\r\n                _lp_dividends[h][token] += v;\r\n                if(s == 0){\r\n                    mc.lock = 1;\r\n                    emit MintLocked(token, h, v);\r\n                    break;\r\n                }\r\n                if(--n == 0){\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        mc.pers = uint32(pers);\r\n        mc.next = uint32(next);\r\n        _mc = mc;\r\n    }\r\n    \r\n\r\n    function pinkLockLp(uint256 amount, uint256 expire) external{\r\n        require(tx.origin == msg.sender);\r\n        require(amount >= 20e18, \"amount should be greater than 50\");\r\n        require(expire >= 31536000, \"expire greater than 1 years\" );\r\n        uint256 limit = amount * IERC20(token0).balanceOf(pair) / IERC20(pair).totalSupply();\r\n        require(limit >= 300e18, \"must be greater than 300\");\r\n        IERC20(pair).transferFrom(msg.sender, address(this), amount);\r\n        uint id = IPinkLock(pinklock).lock(msg.sender, pair, true, amount, block.timestamp + expire, \"\");\r\n        _lp_pinklocks[msg.sender].push(id << 192 | block.timestamp << 144 | expire << 112 | amount);\r\n        _setHolderLp(msg.sender, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Upgrade Revert\r\n    function revertInvites(address[] calldata a, address[] calldata b) external onlyOwner{\r\n        require(a.length > 0 && a.length == b.length, \"Length mismatched\");\r\n        uint i = a.length;\r\n        while(i > 0){\r\n            unchecked{--i;}\r\n            address f = a[i];\r\n            address t = b[i];\r\n            if(f != t && _invites[f] == address(0) && _invites[t] != f){\r\n                _invites[f] = t;\r\n                _directs[t].push(f);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function revertHoldersLp(address[] calldata a) external onlyOwner{\r\n        uint j = a.length;\r\n        uint t = block.timestamp - 172800;\r\n        uint n;\r\n        uint l = _lp_size;\r\n        while(j > 0){\r\n            unchecked{--j;}\r\n            address h = a[j];\r\n            uint256 v = IERC20(pair).balanceOf(h);\r\n            if(v >= 1e18){\r\n                if(v >= 20e18){\r\n                    uint i = _lp_indexs[h];\r\n                    if(i == 0){\r\n                        _lp_indexs[h] = l;\r\n                        _lp_holders[l] = h;\r\n                        unchecked{++l;}\r\n                        unchecked{++n;}\r\n                    }\r\n                }\r\n                \r\n                Volume[] storage e = _lp_volumes[h];\r\n                if(e.length == 0){\r\n                    //Active\r\n                    _lp_limits[h].s = 1;\r\n                    e.push(Volume(1, uint48(t), uint200(v)));\r\n                }\r\n            }\r\n        }\r\n        _lp_size = l;\r\n        _lp.nums += uint32(n);            \r\n    }    \r\n\r\n    function revertDirectsLp(address[] calldata a) external onlyOwner{\r\n        uint j = a.length;\r\n        while(j > 0){\r\n            unchecked{--j;}\r\n            _directsLevelLp(a[j]);\r\n        }        \r\n    }\r\n\r\n    function dividend(address from, address token) external view returns (uint256) {\r\n        return _lp_dividends[from][token];\r\n    }\r\n\r\n    function getInviter(address from) external view returns (address){\r\n        return _invites[from];\r\n    }\r\n    \r\n    function getDirects(address from) external view returns (address[] memory){\r\n        return _directs[from];\r\n    }\r\n\r\n    function getPinkLockLps(address from) external view returns (uint256[] memory){\r\n        return _lp_pinklocks[from];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"r\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"m\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Invited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MintLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"MintUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"dividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getDirects\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getPinkLockLps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"}],\"name\":\"pinkLockLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"revertDirectsLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"revertHoldersLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"b\",\"type\":\"address[]\"}],\"name\":\"revertInvites\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WjToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "30000", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000002dbe1c728686c830ad2cf7ba3bfdd165d9000000000000000000000000000000ae6ee45ff3f9bf0fb6aaacc87e55a56862000000000000000000000000407993575c91ce7643a4d4ccacc9a98c36ee1bbe", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1462f0827aaf233c5f9b368466d401639ae2a216580f832c877f1f4a737f28d1"}