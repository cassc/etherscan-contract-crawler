{"SourceCode": "{\"ierc20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0;\\n\\n//https://eips.ethereum.org/EIPS/eip-20\\ninterface IERC20 {\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\"},\"ixb20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0;\\n\\nimport {IXBCommon, AXBCommon} from \\\"./ixbcommon.sol\\\";\\nimport {IERC20} from \\\"./ierc20.sol\\\";\\n\\ninterface IXB20 is IXBCommon, IERC20 {\\n}\\n\\nabstract contract AXB20 is IXB20, AXBCommon {\\n\\n    uint8 private constant XB20_DECIMALS = 18;\\n\\n    string private tokenName = \\\"AXB20\\\";\\n    string private tokenSymbol = \\\"AXB20\\\";\\n    uint256 private tokenTotalSupply = 0;\\n\\n    constructor(string memory _name, string memory _symbol, uint256 _totalSupply) {\\n        tokenName = _name;\\n        tokenSymbol = _symbol;\\n        tokenTotalSupply = _totalSupply;\\n    }\\n\\n    function decimals() override public pure returns (uint8) {\\n        return XB20_DECIMALS;\\n    }\\n\\n    function name() override public view returns (string memory) {\\n        return tokenName;\\n    }\\n\\n    function symbol() override public view returns (string memory) {\\n        return tokenSymbol;\\n    }\\n\\n    function totalSupply() override public view returns (uint256) {\\n        return tokenTotalSupply;\\n    }\\n}\"},\"ixbcommon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0;\\n\\nlibrary Address {\\n    function isContract(address _account) internal view returns (bool) {\\n        uint256 _size;\\n        assembly { _size := extcodesize(_account) }\\n        return _size \\u003e 0;\\n    }\\n}\\n\\ninterface IXBApprovalForAll {\\n\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\nabstract contract AXBApprovalForAll is IXBApprovalForAll {\\n\\n    string private constant ERR_setApprovalForAll_ToSelf = \\\"ERR_setApprovalForAll_ToSelf\\\";\\n    string private constant ERR_setApprovalForAll_To0 = \\\"ERR_setApprovalForAll_To0\\\";\\n\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private operatorApprovals;\\n\\n    function setApprovalForAll(address _operator, bool _approved) override public {\\n        require(msg.sender != _operator, ERR_setApprovalForAll_ToSelf);\\n        require(_operator != address(0), ERR_setApprovalForAll_To0);\\n        operatorApprovals[msg.sender][_operator] = _approved;\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    function isApprovedForAll(address _owner, address _operator) override public view returns (bool) {\\n        return operatorApprovals[_owner][_operator];\\n    }\\n}\\n\\ninterface IXBCommon is IXBApprovalForAll {\\n\\n    function getOwner() external view returns(address);\\n    function setOwner(address _owner) external;\\n}\\n\\nabstract contract AXBCommon is IXBCommon, AXBApprovalForAll {\\n\\n    address private owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"NotOwner\\\");\\n        _;\\n    }\\n\\n    function getOwner() onlyOwner override public view returns(address) {\\n        return owner;\\n    }\\n\\n    function setOwner(address _owner) onlyOwner override public {\\n        owner = _owner;\\n    }\\n}\\n\\n\"},\"miraclegame.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0;\\n\\nimport {XB20} from \\\"./xb20.sol\\\";\\n\\ncontract MiracleUniverse is XB20 {\\n\\n    constructor() XB20(\\\"Miracle Universe\\\", \\\"MU\\\", 3360000000*(10**18)) {\\n    }\\n}\"},\"xb20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0;\\n\\nimport {AXB20} from \\\"./ixb20.sol\\\";\\n\\ncontract XB20 is AXB20 {\\n\\n    mapping (address =\\u003e uint256) private balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private allowed;\\n\\n    constructor(string memory _name, string memory _symbol, uint256 _totalSupply) AXB20(_name, _symbol, _totalSupply) {\\n        balances[msg.sender] = _totalSupply;\\n    }\\n\\n    modifier canTransfer(address _from, address _to, uint256 _value) {\\n        require(balances[_from] \\u003e= _value, \\\"BalancesNotEnough\\\");\\n        require(_to != address(0), \\\"To0\\\");\\n        _;\\n    }\\n\\n    function balanceOf(address _owner) override public view returns (uint256 balance) {\\n        return balances[_owner];\\n    }\\n\\n    function transfer(address _to, uint256 _value)\\n      canTransfer(msg.sender, _to, _value)\\n      override public returns (bool success) {\\n        balances[msg.sender] -= _value;\\n        balances[_to] += _value;\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n      canTransfer(_from, _to, _value)\\n      override public returns (bool success) {\\n        bool _all = _from == msg.sender || isApprovedForAll(_from, msg.sender);\\n        require(_all || allowed[_from][msg.sender] \\u003e= _value, \\\"NotApproved\\\");\\n        balances[_from] -= _value;\\n        balances[_to] += _value;\\n        if (!_all) {\\n            allowed[_from][msg.sender] -= _value;\\n        }\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) override public returns (bool success) {\\n        require(_spender != address(0), \\\"To0\\\");\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MiracleUniverse", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://95446cd43d906994e849757e14bc2ad3712608859d639ab8ddf6976caebbae02"}