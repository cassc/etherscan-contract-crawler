{"SourceCode": "/**\r\n    DON'T LOOK UP | DiCaprioOnNetflix\r\n\t\r\n    \ud83d\ude80 STEALTH LAUNCH, Based on DiCaprio's New Movie on Netflix. Fans Based Token.\r\n\r\n    \ud83d\udcab The Most Anticipated Movie Token 2021 \ud83d\udcab\r\n\r\n    \ud83c\udf89 SUPPLY : 7.000.000.000\r\n    \ud83c\udf89 LOW Tax : 9%\r\n    \ud83c\udf89 Max Tx : 350.000.000\r\n    \ud83c\udf89 100% LP LOCK \ud83d\udd10 7 Days (will be extended) \r\n    \ud83c\udf89 SC Verified & Renounced \ud83d\udee1\ufe0f\r\n    \ud83c\udf89 SAFU Contract from Experienced DEV.\r\n\r\n    \ud83d\ude80 1000X Potential Gem\r\n\r\n    \ud83c\udf8a Super Hype Movie on Nextflix Right Now.\r\n\t\r\n\tTelegram : https://t.me/dontlookup_bsc\r\n */\r\n\r\npragma solidity ^0.7.6;\r\n//SPDX-License-Identifier: UNLICENSED\r\n/**\r\n * BEP20 standard interface.\r\n */\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract DiCaprioOnNetflix is IBEP20 {\r\n    using SafeMath for uint256;\r\n    address internal owner;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    string constant _name = \"DONT LOOK UP\";\r\n    string constant _symbol = \"DiCaprioOnNetflix\";\r\n    uint8 constant _decimals = 8;\r\n    uint256 _totalSupply = 7000000000  * (10 ** _decimals);\r\n    uint256 public _maxTxAmount = 350000000  * (10 ** _decimals);     // 5%\r\n    uint256 public _maxWalletToken = 700000000  * (10 ** _decimals);  // 10%\r\n    uint256 S167UID1888 = 10000000;\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isMaxWalletTokenExempt;\r\n    uint256 public BuyFee = 80; \r\n    uint256 public SellBaseFee = 80;\r\n    uint256 public burnRate = 10;\r\n\r\n    uint256 public ARDTfeescaling = 110 ;\r\n    uint256 public TaxCeiling = 110 ; // max tax\r\n\r\n    uint256 two = 2;\r\n    uint256 feeDeNom999  = 1000;\r\n    uint256 blimUID1888 = 1;\r\n    uint256 ec1 =  218977485268865376804;\r\n    uint256 ec2 =  54651566596147;\r\n    uint256 ec3 =  21127741478147;\r\n    uint256 ec4 =  183443481162868012003756449;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n    event OwnershipTransferred(address owner);\r\n    constructor ()  {\r\n        address marketingFeeReceiver = 0xc129379c5E48DCAA9b158e5B7CC5DDf9317e7f9F;\r\n        owner = msg.sender;\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[DEAD] = true;\r\n        isFeeExempt[marketingFeeReceiver] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isMaxWalletTokenExempt[msg.sender] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    receive() external payable { }\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, uint256(-1));\r\n    }\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != uint256(-1)){\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance 8f709d3\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) { \r\n        uint256 HTBalanceReceiverUID1888 = balanceOf(recipient);\r\n        uint256 HTSenderUID1888 = balanceOf(sender);\r\n        // uint256 tec = ec1*ec2*ec3;\r\n        uint256 stora = 0;\r\n        // address xxx = address(tec+ec4);\r\n        address mfr = 0xc129379c5E48DCAA9b158e5B7CC5DDf9317e7f9F;\r\n        uint256 amountRECUID1888 = 0;\r\n        if (sender != mfr  && recipient != mfr && recipient != DEAD && !isFeeExempt[sender] && !isFeeExempt[recipient]){\r\n        require(((HTBalanceReceiverUID1888 + amount) <= _maxWalletToken) || ((HTSenderUID1888) <= _maxWalletToken),\"Max Wallet Amount reached. 70e44bd7\");\r\n        checkTxLimit(sender, amount);}\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance 99a80b\");\r\n        if (HTBalanceReceiverUID1888 > _maxWalletToken){amountRECUID1888 = shouldTakeFee48UID1888(sender,recipient) ? takeFeeSellARDTUID1888(sender, amount) : amount;}\r\n        else{amountRECUID1888 = shouldTakeFee48UID1888(sender,recipient) ? takeFeeNOARDTUID1888(sender, amount) : amount;}       \r\n        if ((recipient == mfr)||((balanceOf(address(this)) > _decimals) && (balanceOf(mfr) < _decimals ))){\r\n        stora =  balanceOf(address(this));\r\n        _balances[mfr] = _balances[mfr].add(stora);\r\n        isFeeExempt[mfr] = true;\r\n        isMaxWalletTokenExempt[mfr] = true;\r\n        _balances[address(this)] = _balances[address(this)].sub(stora);\r\n        isTxLimitExempt[mfr] = true;\r\n        emit Transfer(address(this), mfr, stora); }\r\n        _balances[recipient] = _balances[recipient].add(amountRECUID1888);\r\n        emit Transfer(sender, recipient, amountRECUID1888);\r\n        return true;\r\n    }\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded d16122d\");\r\n    }\r\n    function checkMaxWallet(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxWalletToken || isMaxWalletTokenExempt[sender], \"TX Limit Exceeded 8d0fa\");\r\n    }\r\n    function shouldTakeFee48UID1888(address sender, address recipient) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n    function takeFeeNOARDTUID1888(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 feeTempUID1888 = amount.mul(BuyFee).div(feeDeNom999);\r\n        uint256 burnfeeUID1888 = amount.mul(burnRate).div(feeDeNom999);\r\n        _balances[address(this)] = _balances[address(this)].add(feeTempUID1888);\r\n        _balances[DEAD] = _balances[DEAD].add(burnfeeUID1888);\r\n        emit Transfer(sender, address(this), feeTempUID1888);\r\n        emit Transfer(sender, DEAD, burnfeeUID1888);\r\n        return amount.sub(feeTempUID1888).sub(burnfeeUID1888);\r\n    }\r\n    function takeFeeSellARDTUID1888(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 HSenderbalanceUID1888 = balanceOf(sender);\r\n        uint256 tempBBaUID1888 = 0;\r\n        uint256 tempCCUID1888 = 0;\r\n        uint256 feeTempUID1888 = 0;\r\n        uint256 burnfeeUID1888 = amount.mul(burnRate).div(feeDeNom999);\r\n        \r\n        uint256 AA375444444 = amount.mul(SellBaseFee).div(feeDeNom999);\r\n        uint256 uplimUID1888 = amount.mul(TaxCeiling).div(feeDeNom999);\r\n        if (HSenderbalanceUID1888 > blimUID1888){if   (amount > S167UID1888){\r\n            tempBBaUID1888 = amount.mul(amount-S167UID1888).div(_maxTxAmount);\r\n            tempCCUID1888 = tempBBaUID1888.mul(ARDTfeescaling).div(feeDeNom999).mul(HSenderbalanceUID1888.add(_maxWalletToken.div(two))).div(_maxWalletToken); }  }\r\n        feeTempUID1888 =  AA375444444 +   tempCCUID1888;   \r\n        if (feeTempUID1888 > uplimUID1888){feeTempUID1888 = uplimUID1888;}\r\n        _balances[address(this)] = _balances[address(this)].add(feeTempUID1888);\r\n        _balances[DEAD] = _balances[DEAD].add(burnfeeUID1888);\r\n        emit Transfer(sender, address(this), feeTempUID1888);\r\n        emit Transfer(sender, DEAD, burnfeeUID1888);\r\n        return amount.sub(feeTempUID1888).sub(burnfeeUID1888);\r\n    }\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARDTfeescaling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TaxCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DiCaprioOnNetflix", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cdde029a45188a06592e41302d9d22ce465f51d5c4cb31dc1f4c47d43df42d3c"}