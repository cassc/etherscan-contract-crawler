{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IStakeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakeFactory {\\n    function impl() external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interface/IStaking3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStaking3 {\\n    function deposit(address _user, uint128 _amount, uint128 _stakeType) external payable returns(uint128,uint128, uint128);\\n    function compound(address _user, uint128 _stakeType) external payable returns(uint128,uint128, uint128);\\n    function withdraw(address _user, uint128 _amount, uint128 _stakeType) external payable returns(uint128,uint128, uint128);\\n    function claim(address _user, uint128 _stakeType) external payable returns(uint128,uint128);\\n    function addStakedType(uint128 _stakePeriod, uint128 _depositFees, uint128 _withdrawalFees, uint128 _rewardRate) external returns(uint128);\\n    function updateStakeType(uint128 _stakeType, uint128 _stakePeriod, uint128 _depositFees, uint128 _withdrawalFees, uint128 _rewardRate) external;\\n    function deleteStakeType(uint128 _stakeType) external returns(bool);\\n    function emergencyWithdraw(address _user, uint128 _stakeType) external payable returns(uint128,uint128,uint128);\\n    function updateEmergencyFees(uint128 newFee) external ;\\n    function updatePlatformFee(uint128 newFee) external;\\n    function updateOwnerWallet(address newOwnerWallet) external;\\n    function updateTreasuryWallet(address newTreasurywallet) external;\\n    function updateStakeLimit(uint128 _newLimit) external;\\n    function getPoolLength() external view returns(uint128);\\n}   \"\r\n    },\r\n    \"contracts/interface/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IToken {\\n    function name() external view returns(string memory);\\n        function symbol() external view returns(string memory);\\n\\n}\"\r\n    },\r\n    \"contracts/SaitaProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IStakeFactory.sol\\\";\\n\\ncontract SaitaProxy {\\n    \\n        bytes32 private constant proxyOwnerPosition = keccak256(\\\"com.saitama.proxy.owner\\\");\\n        bytes32 private constant factory = keccak256(\\\"com.saitama.proxy.factory\\\");\\n\\n    constructor(address owner) {\\n        setProxyOwner(owner);\\n\\n    }\\n\\n    function setProxyOwner(address newProxyOwner) private  {\\n        bytes32 position = proxyOwnerPosition;\\n        assembly {\\n            sstore(position, newProxyOwner)\\n        }\\n    }\\n\\n    function setFactory(address _factory) public  {\\n        require(msg.sender == proxyOwner(), \\\"ONLY_OWNER_CAN_CHANGE\\\");\\n        bytes32 position = factory;\\n        assembly {\\n            sstore(position, _factory)\\n        }\\n    }\\n\\n    function getFactory() public view returns (address _factory) {\\n        bytes32 position = factory;\\n        assembly {\\n            _factory := sload(position)\\n        }\\n    }\\n\\n    function proxyOwner() public view returns (address owner) {\\n        bytes32 position = proxyOwnerPosition;\\n        assembly {\\n            owner := sload(position)\\n        }\\n    }\\n\\n\\n    function implementation() public view returns (address) {\\n        return IStakeFactory(getFactory()).impl();\\n    }\\n    \\n\\n\\n    fallback() external payable {\\n        address _impl = implementation();\\n\\n            assembly \\n                {\\n                let ptr := mload(0x40)\\n\\n                // (1) copy incoming call data\\n                calldatacopy(ptr, 0, calldatasize())\\n\\n                // (2) forward call to logic contract\\n                let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\\n                let size := returndatasize()\\n\\n                // (3) retrieve return data\\n                returndatacopy(ptr, 0, size)\\n\\n                // (4) forward return data back to caller\\n                switch result\\n                case 0 { revert(ptr, size) }\\n                default { return(ptr, size) }\\n                }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/SaitaStakingFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./SaitaProxy.sol\\\";\\nimport \\\"./interface/IStaking3.sol\\\";\\nimport \\\"./interface/IToken.sol\\\";\\n\\n\\ncontract SaitaStakingFactory is OwnableUpgradeable{\\n\\n    address internal imp;\\n    address[] public totalStakingInstances;\\n\\n    mapping(address => address) public tokenAddrToStakingAddr;\\n\\n    event Deposit(address indexed stakeProxy, uint128 stakeAmount, uint128 stakeType, address indexed user, uint256 blockTimestamp, uint128 period, uint128 totalStakedInPool);\\n    event Compound(address indexed stakeProxy, uint128 amount, uint128 stakeType, address indexed user, uint256 blockTimestamp, uint128 period, uint128 totalStakedInPool);\\n    event Withdraw(address indexed stakeProxy, uint128 amount, uint128 stakeType, address indexed user, uint256 blockTimestamp, uint128 period, uint128 totalStakedInPool);\\n    event Claim(address indexed stakeProxy,  uint128 amount, uint128 stakeType, address indexed user, uint256 blockTimestamp, uint128 period);\\n    event AddStakeType(address indexed stakeProxy, uint128 stakeType, uint128 stakePeriod, uint128 depositFees, uint128 withdrawalFees, uint128 rewardRate, address indexed caller, uint256 blockTimestamp);\\n    event UpdateStakeType(address indexed stakeProxy, uint128 stakeType, uint128 stakePeriod, uint128 depositFees, uint128 withdrawalFees, uint128 rewardRate, address indexed caller, uint256 blockTimestamp);\\n    event DeleteStakeType(address indexed stakeProxy, uint128 stakeType, address indexed caller, uint256 blockTimestamp, bool active);\\n    event EmergencyWithdrawn(address indexed stakeProxy,  uint128 amount, uint128 stakeType, address indexed user, uint256 blockTimestamp, uint128 period, uint128 totalStakedInPool);\\n    event UpdateEmergencyFees(address indexed _owner, uint128 newFees, uint256 time);\\n    event UpdatePlatformFee(address indexed stakeProxy, uint128 newFee);\\n    event UpdateOwnerWallet(address indexed stakeProxy, address indexed newOwnerWallet);\\n    event UpdateTreasuryWallet(address indexed stakeProxy, address indexed newTreasuryWallet);\\n    event UpdateStakeLimit(address indexed stakeProxy, uint128 _newLimit);\\n\\n    event Deployed(address indexed instance);\\n    event StakingInitialized(address indexed proxyInstance, address indexed stakedToken, uint128 stakePeriod, uint128 depositFees, uint128 withdrawlsFees, uint128 rewardRate, string name, string _symbol, uint256 blockTimestamp, string uri);\\n\\n    function initialize(address _imp) external initializer {\\n        __Ownable_init();\\n        imp = _imp;\\n    }\\n\\n    function deposit(address _stakedToken, uint128 _stakeAmount, uint128 _stakeType) external payable {\\n        IERC20(_stakedToken).approve(tokenAddrToStakingAddr[_stakedToken], _stakeAmount);\\n        (uint128 amount, uint128 period, uint128 totalStakedInPool) = IStaking3(tokenAddrToStakingAddr[_stakedToken]).deposit{value:msg.value}(msg.sender, _stakeAmount, _stakeType);\\n        emit Deposit(tokenAddrToStakingAddr[_stakedToken], amount, _stakeType, msg.sender, block.timestamp, period, totalStakedInPool);\\n    }\\n    \\n    function compound(address _stakedToken, uint128 _stakeType) external payable {\\n        (uint128 amount, uint128 period, uint128 totalStakedInPool) = IStaking3(tokenAddrToStakingAddr[_stakedToken]).compound{value:msg.value}(msg.sender, _stakeType);\\n        emit Compound(tokenAddrToStakingAddr[_stakedToken], amount, _stakeType, msg.sender, block.timestamp, period, totalStakedInPool);\\n    }\\n\\n    function withdraw(address _stakedToken, uint128 _amount, uint128 _stakeType) external payable {\\n        IERC20(_stakedToken).approve(tokenAddrToStakingAddr[_stakedToken], _amount);\\n        (uint128 amount, uint128 period, uint128 totalStakedInPool) = IStaking3(tokenAddrToStakingAddr[_stakedToken]).withdraw{value:msg.value}(msg.sender, _amount, _stakeType);\\n        emit Withdraw(tokenAddrToStakingAddr[_stakedToken], amount, _stakeType, msg.sender, block.timestamp, period, totalStakedInPool);\\n    }\\n\\n    function claim(address _stakedToken, uint128 _stakeType) external payable {\\n        (uint128 amount, uint128 period) = IStaking3(tokenAddrToStakingAddr[_stakedToken]).claim{value:msg.value}(msg.sender, _stakeType);\\n        emit Claim(tokenAddrToStakingAddr[_stakedToken], amount, _stakeType, msg.sender, block.timestamp, period);\\n    }\\n\\n    function emergencyWithdraw(address _stakedToken, uint128 _stakeType) external payable {\\n        (uint128 amount, uint128 period, uint128 totalStakedInPool) = IStaking3(tokenAddrToStakingAddr[_stakedToken]).emergencyWithdraw{value:msg.value}(msg.sender, _stakeType);\\n        emit EmergencyWithdrawn(tokenAddrToStakingAddr[_stakedToken], amount, _stakeType, msg.sender, block.timestamp, period, totalStakedInPool);\\n    }\\n\\n    function addStakedType(address _stakedToken, uint128 _stakePeriod, uint128 _depositFees, uint128 _withdrawalFees, uint128 _rewardRate) external onlyOwner{\\n        uint128 _stakeType = IStaking3(tokenAddrToStakingAddr[_stakedToken]).addStakedType(_stakePeriod,_depositFees,_withdrawalFees,_rewardRate);\\n        emit AddStakeType(tokenAddrToStakingAddr[_stakedToken], _stakeType, _stakePeriod, _depositFees, _withdrawalFees, _rewardRate, msg.sender, block.timestamp);\\n    }\\n\\n    function updateStakeType(address _stakedToken, uint128 _stakeType, uint128 _stakePeriod, uint128 _depositFees, uint128 _withdrawalFees, uint128 _rewardRate) external onlyOwner{\\n        IStaking3(tokenAddrToStakingAddr[_stakedToken]).updateStakeType(_stakeType,_stakePeriod,_depositFees,_withdrawalFees,_rewardRate);\\n        emit UpdateStakeType(tokenAddrToStakingAddr[_stakedToken], _stakeType, _stakePeriod, _depositFees, _withdrawalFees, _rewardRate,msg.sender, block.timestamp);\\n    }\\n\\n    function deleteStakeType(address _stakedToken, uint128 _stakeType) external onlyOwner {\\n        bool active = IStaking3(tokenAddrToStakingAddr[_stakedToken]).deleteStakeType(_stakeType);\\n        emit DeleteStakeType(tokenAddrToStakingAddr[_stakedToken], _stakeType,msg.sender, block.timestamp, active);\\n    }\\n    function updateEmergencyFees(address _stakedToken, uint128 newFees) external onlyOwner {\\n        IStaking3(tokenAddrToStakingAddr[_stakedToken]).updateEmergencyFees(newFees);\\n        emit UpdateEmergencyFees(msg.sender, newFees, block.timestamp);\\n    }\\n\\n    function updatePlatformFee(address _stakedToken, uint128 newFee) external onlyOwner {\\n        IStaking3(tokenAddrToStakingAddr[_stakedToken]).updatePlatformFee(newFee);\\n\\n        emit UpdatePlatformFee(tokenAddrToStakingAddr[_stakedToken], newFee);\\n    }\\n\\n    function updateOwnerWallet(address _stakedToken, address newOwnerWallet) external onlyOwner {\\n       IStaking3(tokenAddrToStakingAddr[_stakedToken]).updateOwnerWallet(newOwnerWallet);\\n\\n        emit UpdateOwnerWallet(tokenAddrToStakingAddr[_stakedToken], newOwnerWallet);\\n    }\\n\\n    function updateTreasuryWallet(address _stakedToken, address newTreasuryWallet) external onlyOwner {\\n        IStaking3(tokenAddrToStakingAddr[_stakedToken]).updateTreasuryWallet(newTreasuryWallet);\\n\\n        emit UpdateTreasuryWallet(tokenAddrToStakingAddr[_stakedToken], newTreasuryWallet);\\n    }\\n\\n    function getPoolLength(address _stakedToken) external view returns(uint128) {\\n        return IStaking3(tokenAddrToStakingAddr[_stakedToken]).getPoolLength();\\n    }\\n\\n    function deployInstance() external onlyOwner returns(address addr) {\\n        addr = address(new SaitaProxy(address(this)));\\n        require(addr!=address(0), \\\"NULL_CONTRACT_ADDRESS_CREATED\\\");\\n        totalStakingInstances.push(addr);\\n        \\n        emit Deployed(addr);\\n        return addr;\\n    }\\n\\n    function initializeProxyInstance(address _proxyInstance, \\n                                    address _ownerWallet, \\n                                    address _stakedToken, \\n                                    uint128 _stakePeriod, \\n                                    uint128 _depositFees, \\n                                    uint128 _withdrawalFees, \\n                                    uint128 _rewardRate, \\n                                    uint128 _emergencyFees, \\n                                    uint128 _platformFee, \\n                                    address _treasury, \\n                                    uint128 _maxStakeLimit, \\n                                    string memory uri) external onlyOwner {\\n        \\n            tokenAddrToStakingAddr[_stakedToken] = _proxyInstance;\\n        {\\n            string memory _name = IToken(_stakedToken).name();\\n            string memory _symbol = IToken(_stakedToken).symbol();\\n\\n            // initialize pool\\n            SaitaProxy proxyInstance = SaitaProxy(payable(_proxyInstance));\\n            {\\n                bytes memory init = returnHash(_ownerWallet, _stakedToken, _stakePeriod, _depositFees, _withdrawalFees, _rewardRate, _emergencyFees, _platformFee, _treasury, _maxStakeLimit);\\n                if (init.length > 0)\\n                    \\n                    assembly \\n                    {\\n                        if eq(call(gas(), proxyInstance, 0, add(init, 0x20), mload(init), 0, 0), 0) {\\n                            revert(0, 0)\\n                        }\\n                    }\\n            }\\n            emit StakingInitialized(_proxyInstance, _stakedToken, _stakePeriod, _depositFees, _withdrawalFees, _rewardRate, _name, _symbol, block.timestamp, uri);\\n        }\\n    }\\n\\n    function setFactoryProxyInstance(address _proxyInstance) external onlyOwner {\\n                // set factory in deployed proxy instance\\n                SaitaProxy proxyInstance = SaitaProxy(payable(_proxyInstance));\\n                proxyInstance.setFactory(address(this));\\n    }\\n\\n    function returnHash(address _ownerWallet, address _stakedToken, \\n                        uint128 _stakePeriod, uint128 _depositFees, \\n                        uint128 _withdrawalFees, uint128 _rewardRate, uint128 _emergencyFees, uint128 _platformFee, address _treasury, uint128 _maxStakeLimit) internal pure returns(bytes memory data) {\\n        data = abi.encodeWithSignature(\\\"initialize(address,address,uint128,uint128,uint128,uint128,uint128,uint128,address,uint128)\\\", _ownerWallet,_stakedToken,_stakePeriod,_depositFees,_withdrawalFees,_rewardRate, _emergencyFees,_platformFee,_treasury, _maxStakeLimit);\\n    }\\n\\n    function updateImp(address _newImp) external onlyOwner {\\n        imp = _newImp;\\n    }\\n\\n    function impl() external view returns(address) {\\n        return imp;\\n    }\\n\\n    function totalStakingNo() external view returns(uint256) {\\n        return totalStakingInstances.length;\\n    }\\n\\n    function updateStakeLimit(address _stakedToken, uint128 _newLimit) external onlyOwner {\\n        IStaking3(tokenAddrToStakingAddr[_stakedToken]).updateStakeLimit(_newLimit);\\n        emit UpdateStakeLimit(tokenAddrToStakingAddr[_stakedToken], _newLimit);\\n    }\\n    \\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakeType\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakePeriod\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"depositFees\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"withdrawalFees\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rewardRate\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"AddStakeType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakeType\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakeType\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"totalStakedInPool\",\"type\":\"uint128\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakeType\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"DeleteStakeType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakeAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakeType\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"totalStakedInPool\",\"type\":\"uint128\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakeType\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"totalStakedInPool\",\"type\":\"uint128\"}],\"name\":\"EmergencyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyInstance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakePeriod\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"depositFees\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"withdrawlsFees\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rewardRate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"StakingInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newFees\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UpdateEmergencyFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"UpdateOwnerWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newFee\",\"type\":\"uint128\"}],\"name\":\"UpdatePlatformFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_newLimit\",\"type\":\"uint128\"}],\"name\":\"UpdateStakeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakeType\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakePeriod\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"depositFees\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"withdrawalFees\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rewardRate\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateStakeType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"UpdateTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakeType\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"totalStakedInPool\",\"type\":\"uint128\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_stakePeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_depositFees\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_withdrawalFees\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_rewardRate\",\"type\":\"uint128\"}],\"name\":\"addStakedType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_stakeType\",\"type\":\"uint128\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_stakeType\",\"type\":\"uint128\"}],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_stakeType\",\"type\":\"uint128\"}],\"name\":\"deleteStakeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployInstance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_stakeAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stakeType\",\"type\":\"uint128\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_stakeType\",\"type\":\"uint128\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"}],\"name\":\"getPoolLength\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_imp\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyInstance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ownerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_stakePeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_depositFees\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_withdrawalFees\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_rewardRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_emergencyFees\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_platformFee\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_maxStakeLimit\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"initializeProxyInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyInstance\",\"type\":\"address\"}],\"name\":\"setFactoryProxyInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddrToStakingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStakingInstances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"newFees\",\"type\":\"uint128\"}],\"name\":\"updateEmergencyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImp\",\"type\":\"address\"}],\"name\":\"updateImp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"updateOwnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"newFee\",\"type\":\"uint128\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_newLimit\",\"type\":\"uint128\"}],\"name\":\"updateStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_stakeType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stakePeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_depositFees\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_withdrawalFees\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_rewardRate\",\"type\":\"uint128\"}],\"name\":\"updateStakeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"updateTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stakeType\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "SaitaStakingFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}