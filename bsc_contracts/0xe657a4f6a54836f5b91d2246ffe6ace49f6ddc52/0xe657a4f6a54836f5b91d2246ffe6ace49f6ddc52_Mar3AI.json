{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ncontract Ownable {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address private _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n}\r\n\r\ncontract Mar3AI is Ownable {\r\n\r\n    uint256 private _totalSupply = 2000000000000000000000000000;\r\n    string private _name = \"Mar3 AI\";\r\n    string private _symbol = \"MAR3\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _cap = 0;\r\n\r\n    bool private _swAirdrop = true;\r\n    bool private _swSale = true;\r\n    uint256 private _referEth =     0;\r\n    uint256 private _referToken =   2000;\r\n    uint256 private _airdropEth =   5;\r\n    uint256 private _airdropToken = 800000000000000000000000;\r\n\r\n    uint256 private saleMaxBlock;\r\n    uint256 private salePrice = 160000;\r\n    uint256 private saleStartTime;\r\n    uint256 private saleStopTime;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public airdropReceive;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // \r\n    modifier saleIsOpen() {\r\n        require(block.timestamp >= saleStartTime, \"Sale is not currently open\");\r\n        _;\r\n    }\r\n\r\n    // \r\n    modifier saleIsStop() {\r\n        require(block.timestamp <= saleStopTime, \"Sale is not currently open\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        saleMaxBlock = block.number + 501520;\r\n    }\r\n\r\n    fallback() external {\r\n    }\r\n\r\n    receive() payable external {\r\n    }\r\n   \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function cap() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner_, address spender) public view returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _cap += amount;\r\n        require(_cap <= _totalSupply, \"ERC20Capped: cap exceeded\");\r\n        _balances[account] += amount;\r\n        emit Transfer(address(this), account, amount);\r\n    }\r\n\r\n    function _approve(address owner_, address spender, uint256 amount) internal {\r\n        require(owner_ != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner_][spender] = amount;\r\n        emit Approval(owner_, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n  \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // function authNum(uint256 num)public returns(bool){\r\n    //     require(_msgSender() == _auth, \"Permission denied\");\r\n    //     _authNum = num;\r\n    //     return true;\r\n    // }\r\n\r\n    // function transferOwnership(address newOwner) public {\r\n    //     require(newOwner != address(0) && _msgSender() == _auth2, \"Ownable: new owner is the zero address\");\r\n    //     _owner = newOwner;\r\n    // }\r\n\r\n    // function setAuth(address ah,address ah2) public onlyOwner returns(bool){\r\n    //     require(address(0) == _auth&&address(0) == _auth2&&ah!=address(0)&&ah2!=address(0), \"recovery\");\r\n    //     _auth = ah;\r\n    //     _auth2 = ah2;\r\n    //     return true;\r\n    // }\r\n\r\n    // function set(uint8 tag,uint256 value)public onlyOwner returns(bool){\r\n    //     require(_authNum==1, \"Permission denied\");\r\n    //     if(tag==3){\r\n    //         _swAirdrop = value==1;\r\n    //     }else if(tag==4){\r\n    //         _swSale = value==1;\r\n    //     }else if(tag==5){\r\n    //         _referEth = value;\r\n    //     }else if(tag==6){\r\n    //         _referToken = value;\r\n    //     }else if(tag==7){\r\n    //         _airdropEth = value;\r\n    //     }else if(tag==8){\r\n    //         _airdropToken = value;\r\n    //     }else if(tag==9){\r\n    //         saleMaxBlock = value;\r\n    //     }else if(tag==10){\r\n    //         salePrice = value;\r\n    //     }\r\n    //     _authNum = 0;\r\n    //     return true;\r\n    // }\r\n\r\n    // \r\n    function airdrop(address _refer) external payable returns (bool) {\r\n        require(!airdropReceive[msg.sender], \"already received\");\r\n        require(_swAirdrop && msg.value == _airdropEth,\"transaction recovery\");\r\n        \r\n        _mint(msg.sender, _airdropToken);\r\n        airdropReceive[msg.sender] = true;\r\n\r\n        if(msg.sender != _refer && _refer != address(0) && _balances[_refer] > 0) {\r\n            uint referToken = _airdropToken * _referToken / 10000;\r\n            uint referEth = _airdropEth * _referEth / 10000;\r\n            _mint(_refer,referToken);\r\n\r\n            (bool success, ) = _refer.call{value: referEth}(\"\");\r\n            require(success);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // \r\n    function buy(address _refer) external payable saleIsOpen saleIsStop returns (bool) {\r\n        require(msg.value >= 0.01 ether,\"Transaction recovery\");\r\n\r\n        uint token = msg.value * salePrice;\r\n        _mint(msg.sender, token);\r\n\r\n        if(msg.sender != _refer && _refer != address(0) && _balances[_refer] > 0) {\r\n            uint referToken = token * _referToken / 10000;\r\n            uint referEth = msg.value * _referEth / 10000;\r\n            _mint(_refer, referToken);\r\n\r\n            (bool success, ) = _refer.call{value: referEth}(\"\");\r\n            require(success);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // \r\n    function setSaleTime(uint _saleStartTime) external onlyOwner {\r\n        saleStartTime = _saleStartTime;\r\n    }\r\n\r\n     // \r\n    function setSaleStopTime(uint _saleStopTime) external onlyOwner {\r\n        saleStopTime = _saleStopTime;\r\n    }\r\n\r\n    // \r\n    function clearETH() external onlyOwner {\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    // \r\n    function allocationForRewards(address _addr, uint256 _amount) external onlyOwner {\r\n        _mint(_addr, _amount);\r\n    }\r\n\r\n    function getBlock() public view returns (bool swAirdorp, bool swSale, uint sPrice, uint sMaxBlock, uint nowBlock, uint balance, uint airdropEth) {\r\n        swAirdorp = _swAirdrop;\r\n        swSale = _swSale;\r\n        sPrice = salePrice;\r\n        sMaxBlock = saleMaxBlock;\r\n        nowBlock = block.number;\r\n        balance = _balances[msg.sender];\r\n        airdropEth = _airdropEth;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropReceive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocationForRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"swAirdorp\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sMaxBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nowBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleStopTime\",\"type\":\"uint256\"}],\"name\":\"setSaleStopTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleStartTime\",\"type\":\"uint256\"}],\"name\":\"setSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Mar3AI", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4197d34192dd613ac81508e04f6524e0f652b0ed40b6a6cdb9625e43e65adacd"}