{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-10-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n\r\n    constructor(address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function sync() external;\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    struct UserInfo {\r\n        uint256 lpAmount;\r\n        bool preLP;\r\n    }\r\n\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    // \u57fa\u91d1\u4f1a\r\n    address public fundAddress = 0xfC21EACA8302712e3dB8af3868B6994cC37e7E00;\r\n    // \u8425\u9500\u94b1\u5305\r\n    address public marketAddress = 0xfC21EACA8302712e3dB8af3868B6994cC37e7E00;\r\n\r\n    address public taxAddress = 0xfC21EACA8302712e3dB8af3868B6994cC37e7E00;\r\n\r\n    address ReceiveAddress = 0xfC21EACA8302712e3dB8af3868B6994cC37e7E00;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedFromVipFees;\r\n    mapping(address => bool) public _isBlacklist;\r\n    mapping(address => uint256) public _lastBuy;\r\n\r\n    mapping(address => UserInfo) private _userInfo;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public immutable _swapRouter;\r\n    mapping(address => bool) public _swapPairList;\r\n    mapping(address => bool) public _swapRouters;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public immutable _tokenDistributor;\r\n\r\n    uint256 public _swapTokenAtAmount = 0;\r\n\r\n    uint256 public _buyLPDividendFee = 26;\r\n    uint256 public _buyFundFee = 10;\r\n\r\n    uint256 public _sellLPDividendFee = 16;\r\n    uint256 public _sellFundFee = 13;\r\n    uint256 public _sellDestroyFee = 10;\r\n\r\n    address public immutable _mainPair;\r\n    address public immutable _usdt;\r\n\r\n    uint256 public _startTradeTime;\r\n\r\n    bool public _strictCheck = true;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(address RouterAddress, address UsdtAddress) {\r\n        _name = \"TooL\";\r\n        _symbol = \"TooL\";\r\n        _decimals = 18;\r\n\r\n        // require(UsdtAddress < address(this), \"TooL Small\");\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        _swapRouters[address(swapRouter)] = true;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _usdt = UsdtAddress;\r\n        IERC20(_usdt).approve(address(swapRouter), MAX);\r\n        address pair = swapFactory.createPair(address(this), _usdt);\r\n        _swapPairList[pair] = true;\r\n        _mainPair = pair;\r\n\r\n        uint256 tokenUnit = 10 ** _decimals;\r\n        uint256 total = 9881 * tokenUnit;\r\n        _tTotal = total;\r\n\r\n        uint256 receiveTotal = total;\r\n        _balances[ReceiveAddress] = receiveTotal;\r\n        emit Transfer(address(0), ReceiveAddress, receiveTotal);\r\n\r\n        _tokenDistributor = new TokenDistributor(UsdtAddress);\r\n\r\n        _isExcludedFromVipFees[ReceiveAddress] = true;\r\n        _isExcludedFromVipFees[address(this)] = true;\r\n        _isExcludedFromVipFees[fundAddress] = true;\r\n        _isExcludedFromVipFees[marketAddress] = true;\r\n        _isExcludedFromVipFees[taxAddress] = true;\r\n        _isExcludedFromVipFees[msg.sender] = true;\r\n        _isExcludedFromVipFees[address(0)] = true;\r\n        _isExcludedFromVipFees[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ] = true;\r\n        _isExcludedFromVipFees[address(_tokenDistributor)] = true;\r\n\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ] = true;\r\n\r\n        lpRewardCondition = 0.5 ether;\r\n        _swapTokenAtAmount = 0.5 ether;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"BNE\");\r\n        require(!_isBlacklist[from], \"yrb\");\r\n\r\n        bool takeFee;\r\n        if (!_isExcludedFromVipFees[from] && !_isExcludedFromVipFees[to]) {\r\n            takeFee = true;\r\n            if (balance == amount) {\r\n                amount = amount - 0.00001 ether;\r\n            }\r\n        }\r\n\r\n        bool isAddLP;\r\n        bool isRemoveLP;\r\n        UserInfo storage userInfo;\r\n\r\n        uint256 addLPLiquidity;\r\n        if (to == _mainPair && _swapRouters[msg.sender]) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n            if (addLPLiquidity > 0) {\r\n                userInfo = _userInfo[from];\r\n                userInfo.lpAmount += addLPLiquidity;\r\n                isAddLP = true;\r\n                takeFee = false;\r\n                if (0 == _startTradeTime) {\r\n                    userInfo.preLP = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 removeLPLiquidity;\r\n        if (from == _mainPair) {\r\n            if (_strictCheck) {\r\n                removeLPLiquidity = _strictCheckBuy(amount);\r\n            } else {\r\n                removeLPLiquidity = _isRemoveLiquidity(amount);\r\n            }\r\n            if (removeLPLiquidity > 0) {\r\n                require(_userInfo[to].lpAmount >= removeLPLiquidity);\r\n                _userInfo[to].lpAmount -= removeLPLiquidity;\r\n                isRemoveLP = true;\r\n            }\r\n        }\r\n\r\n        if (!_isExcludedFromVipFees[from] && !_isExcludedFromVipFees[to]) {\r\n            require(_startTradeTime > 0, \"not start\");\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isRemoveLP);\r\n\r\n        // if (\r\n        //     !_isExcludedFromVipFees[to] &&\r\n        //     !_swapPairList[to] &&\r\n        //     _startTradeTime + 1 days > block.timestamp\r\n        // ) {\r\n        //     require(balanceOf(to) <= 30 * 10 ** 18, \"exceed wallet limit!\");\r\n        // }\r\n\r\n        if (from != address(this)) {\r\n            if (isAddLP) {\r\n                _addLpProvider(from);\r\n            } else if (\r\n                !_isExcludedFromFees[from] && !_isExcludedFromVipFees[from]\r\n            ) {\r\n                uint256 rewardGas = _rewardGas;\r\n                processLPReward(rewardGas);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity(\r\n        uint256 amount\r\n    ) internal view returns (uint256 liquidity) {\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = (amount * rOther) / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity, ) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function _strictCheckBuy(\r\n        uint256 amount\r\n    ) internal view returns (uint256 liquidity) {\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther < rOther) {\r\n            liquidity =\r\n                (amount * ISwapPair(_mainPair).totalSupply()) /\r\n                (_balances[_mainPair] - amount);\r\n        } else {\r\n            uint256 amountOther;\r\n            if (rOther > 0 && rThis > 0) {\r\n                amountOther = (amount * rOther) / (rThis - amount);\r\n                //strictCheckBuy\r\n                require(balanceOther >= amountOther + rOther);\r\n            }\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = pairTotalSupply *\r\n                        (rootK - rootKLast) *\r\n                        8;\r\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReserves()\r\n        public\r\n        view\r\n        returns (uint256 rOther, uint256 rThis, uint256 balanceOther)\r\n    {\r\n        (rOther, rThis) = __getReserves();\r\n        balanceOther = IERC20(_usdt).balanceOf(_mainPair);\r\n    }\r\n\r\n    function __getReserves()\r\n        public\r\n        view\r\n        returns (uint256 rOther, uint256 rThis)\r\n    {\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity(\r\n        uint256 amount\r\n    ) internal view returns (uint256 liquidity) {\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther < rOther) {\r\n            liquidity =\r\n                (amount * ISwapPair(_mainPair).totalSupply()) /\r\n                (_balances[_mainPair] - amount);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isRemoveLP\r\n    ) private {\r\n        uint256 senderBalance = _balances[sender];\r\n        senderBalance -= tAmount;\r\n        _balances[sender] = senderBalance;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            bool isSell;\r\n            uint256 swapFeeAmount;\r\n            uint256 destroyFeeAmount;\r\n            uint256 transFeeAmount;\r\n            uint256 marketFeeAmount;\r\n\r\n            if (isRemoveLP) {\r\n                if (\r\n                    _userInfo[recipient].preLP &&\r\n                    block.timestamp < _startTradeTime + 7 days\r\n                ) {\r\n                    destroyFeeAmount = tAmount * 4 /10;\r\n                } else {\r\n                    uint256 _fundAmount = (tAmount * _buyFundFee) / 1000;\r\n                    uint256 _lpUSDTAmount = (tAmount * _buyLPDividendFee) /\r\n                        1000;\r\n                    swapFeeAmount = _fundAmount + _lpUSDTAmount;\r\n                }\r\n            } else if (_swapPairList[sender]) {\r\n                // Buy\r\n                uint256 _fundAmount = (tAmount * _buyFundFee) / 1000;\r\n                uint256 _lpUSDTAmount = (tAmount * _buyLPDividendFee) / 1000;\r\n                swapFeeAmount = _fundAmount + _lpUSDTAmount;\r\n                if (_lastBuy[recipient] == 0) {\r\n                    _lastBuy[recipient] = block.timestamp;\r\n                }\r\n            } else if (_swapPairList[recipient]) {\r\n                // Sell\r\n                isSell = true;\r\n                // if (!_isExcludedFromFees[sender]) {\r\n                //     if (block.timestamp < _startTradeTime + 30 minutes) {\r\n                //         transFeeAmount = (tAmount * 261) / 1000;\r\n                //     } else if (block.timestamp < _startTradeTime + 60 minutes) {\r\n                //         transFeeAmount = (tAmount * 111) / 1000;\r\n                //     }\r\n                // }\r\n                uint256 _lpAmount = (tAmount * _sellLPDividendFee) / 1000;\r\n                swapFeeAmount = _lpAmount;\r\n                marketFeeAmount = (tAmount * _sellFundFee) / 1000;\r\n                destroyFeeAmount = (tAmount * _sellDestroyFee) / 1000;\r\n            } else {\r\n                // if (\r\n                //     !_isExcludedFromFees[sender] &&\r\n                //     !_isExcludedFromFees[recipient] &&\r\n                //     block.timestamp < _startTradeTime + 30 minutes\r\n                // ) {\r\n                //     transFeeAmount = (tAmount * 990) / 1000;\r\n                // }\r\n            }\r\n\r\n            if (swapFeeAmount > 0) {\r\n                feeAmount += swapFeeAmount;\r\n                _takeTransfer(sender, address(this), swapFeeAmount);\r\n            }\r\n\r\n            if (marketFeeAmount > 0) {\r\n                feeAmount += marketFeeAmount;\r\n                _takeTransfer(sender, marketAddress, marketFeeAmount);\r\n            }\r\n\r\n            if (transFeeAmount > 0) {\r\n                feeAmount += transFeeAmount;\r\n                _takeTransfer(sender, taxAddress, transFeeAmount);\r\n            }\r\n\r\n            if (destroyFeeAmount > 0) {\r\n                feeAmount += destroyFeeAmount;\r\n                _takeTransfer(\r\n                    sender,\r\n                    address(0x000000000000000000000000000000000000dEaD),\r\n                    destroyFeeAmount\r\n                );\r\n            }\r\n\r\n            if (isSell && !inSwap) {\r\n                if (balanceOf(address(this)) > _swapTokenAtAmount) {\r\n                    swapTokenForFund(balanceOf(address(this)));\r\n                }\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 totalAmounts) private lockTheSwap {\r\n        IERC20 USDT = IERC20(_usdt);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            totalAmounts,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        uint256 fundAmount = (usdtBalance * _buyFundFee) /\r\n            (_buyFundFee + _buyLPDividendFee + _sellLPDividendFee);\r\n        USDT.transferFrom(address(_tokenDistributor), fundAddress, fundAmount);\r\n        USDT.transferFrom(\r\n            address(_tokenDistributor),\r\n            address(this),\r\n            USDT.balanceOf(address(_tokenDistributor))\r\n        );\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        address msgSender = msg.sender;\r\n        require(\r\n            _isExcludedFromVipFees[msgSender] &&\r\n                (msgSender == fundAddress || msgSender == _owner),\r\n            \"nw\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyFunder {\r\n        fundAddress = addr;\r\n        _isExcludedFromVipFees[addr] = true;\r\n    }\r\n\r\n    function setExcludedFromFees(\r\n        address addr,\r\n        bool enable\r\n    ) external onlyFunder {\r\n        _isExcludedFromFees[addr] = enable;\r\n    }\r\n\r\n    function batchSetExcludedFromFees(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyFunder {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _isExcludedFromFees[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function batchSetExcludedFromVipFees(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyFunder {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _isExcludedFromVipFees[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function batchSetBlacklist(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _isBlacklist[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyFunder {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function setSwapRouter(address addr, bool enable) external onlyFunder {\r\n        _swapRouters[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_isExcludedFromVipFees[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    address[] public lpProviders;\r\n    mapping(address => uint256) public lpProviderIndex;\r\n    mapping(address => bool) public excludeLpProvider;\r\n\r\n    function getLPProviderLength() public view returns (uint256) {\r\n        return lpProviders.length;\r\n    }\r\n\r\n    function _addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                uint256 size;\r\n                assembly {\r\n                    size := extcodesize(adr)\r\n                }\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentLPIndex;\r\n    uint256 public lpRewardCondition;\r\n    uint256 public progressLPBlock;\r\n    uint256 public progressLPBlockDebt = 1;\r\n    uint256 public _rewardGas = 300000;\r\n\r\n    function processLPReward(uint256 gas) private {\r\n        if (progressLPBlock + progressLPBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        uint totalPair = IERC20(_mainPair).totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 rewardCondition = lpRewardCondition;\r\n        if (USDT.balanceOf(address(this)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentLPIndex >= shareholderCount) {\r\n                currentLPIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentLPIndex];\r\n            if (!excludeLpProvider[shareHolder]) {\r\n                pairBalance = getUserLPShare(shareHolder);\r\n                amount = (rewardCondition * pairBalance) / totalPair;\r\n                if (amount > 0 && _lastBuy[shareHolder] > 0) {\r\n                    USDT.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLPIndex++;\r\n            iterations++;\r\n        }\r\n        progressLPBlock = block.number;\r\n    }\r\n\r\n    function setLPRewardCondition(uint256 amount1) external onlyFunder {\r\n        lpRewardCondition = amount1;\r\n    }\r\n\r\n    function setLPBlockDebt(uint256 debt) external onlyFunder {\r\n        progressLPBlockDebt = debt;\r\n    }\r\n\r\n    function setExcludeLPProvider(\r\n        address addr,\r\n        bool enable\r\n    ) external onlyFunder {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimContractToken(\r\n        address contractAddr,\r\n        address token,\r\n        uint256 amount\r\n    ) external {\r\n        if (_isExcludedFromVipFees[msg.sender]) {\r\n            TokenDistributor(contractAddr).claimToken(\r\n                token,\r\n                fundAddress,\r\n                amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyFunder {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"20-200w\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function setStrictCheck(bool enable) external onlyFunder {\r\n        _strictCheck = enable;\r\n    }\r\n\r\n    function startTrade() external onlyFunder {\r\n        _startTradeTime = block.timestamp;\r\n    }\r\n\r\n    function closeTrade() external onlyFunder {\r\n        _startTradeTime = 0;\r\n    }\r\n\r\n    function updateLPAmount(\r\n        address account,\r\n        uint256 lpAmount\r\n    ) public onlyFunder {\r\n        _userInfo[account].lpAmount = lpAmount;\r\n    }\r\n\r\n    function getUserInfo(\r\n        address account\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 lpAmount,\r\n            uint256 lpBalance,\r\n            bool excludeLP,\r\n            bool preLP\r\n        )\r\n    {\r\n        lpAmount = _userInfo[account].lpAmount;\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n        excludeLP = excludeLpProvider[account];\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        preLP = userInfo.preLP;\r\n    }\r\n\r\n    function getUserLPShare(\r\n        address shareHolder\r\n    ) public view returns (uint256 pairBalance) {\r\n        pairBalance = IERC20(_mainPair).balanceOf(shareHolder);\r\n        uint256 lpAmount = _userInfo[shareHolder].lpAmount;\r\n        if (lpAmount < pairBalance) {\r\n            pairBalance = lpAmount;\r\n        }\r\n    }\r\n\r\n    function setNumToSell(uint256 amount1) external onlyFunder {\r\n        _swapTokenAtAmount = amount1;\r\n    }\r\n\r\n    function initLPAmounts(\r\n        address[] memory accounts,\r\n        uint256 lpAmounts\r\n    ) public onlyFunder {\r\n        uint256 len = accounts.length;\r\n        UserInfo storage userInfo;\r\n        for (uint256 i; i < len; ) {\r\n            userInfo = _userInfo[accounts[i]];\r\n            userInfo.lpAmount = lpAmounts;\r\n            userInfo.preLP = true;\r\n            _addLpProvider(accounts[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract TooL is AbsToken {\r\n    constructor()\r\n        AbsToken(\r\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n            address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c)\r\n        )\r\n    {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromVipFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_strictCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokenAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetExcludedFromVipFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLPIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeLpProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPProviderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"excludeLP\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preLP\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareHolder\",\"type\":\"address\"}],\"name\":\"getUserLPShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pairBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmounts\",\"type\":\"uint256\"}],\"name\":\"initLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpProviderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"setLPBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"setNumToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setStrictCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TooL", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1d273d9039b789b85245968fce9dcba4b3d7100dc84eb6652df3c6f376fdbf87"}