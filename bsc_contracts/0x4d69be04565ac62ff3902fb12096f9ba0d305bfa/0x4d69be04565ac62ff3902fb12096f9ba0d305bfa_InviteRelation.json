{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract InviteRelation is Ownable{\r\n    using SafeMath for address;\r\n\r\n    uint256 public maxNmbrella;\r\n    struct Referrer {\r\n        address owner;\r\n        uint256 row;\r\n    }\r\n    mapping(address => Referrer) private _referrers;\r\n    mapping(address => address[]) private _umbrellas;\r\n\r\n    event CreateReferrer(uint256 indexed userRow, address indexed owner, address indexed user);\r\n\r\n    constructor( ) {\r\n        _referrers[address(0)] = Referrer(\r\n            address(this),\r\n            0\r\n        );\r\n    }\r\n    \r\n    function setMaxNmber(uint256 _maxNmbrella) external onlyOwner {\r\n        maxNmbrella =  _maxNmbrella;\r\n    }\r\n\r\n    function umbrellaNumOf(address _owner) public view returns(uint256) {\r\n        return _umbrellas[_owner].length;\r\n    }\r\n\r\n    function umbrella(address _owner) external view returns(address[] memory) {\r\n        return _umbrellas[_owner];\r\n    }\r\n\r\n    function referrer(address _owner) external view returns(address, uint256) {\r\n        return (_referrers[_owner].owner, _referrers[_owner].row);\r\n    }\r\n\r\n    function getReferrerFor(address _owner, uint _size) external view returns(address[] memory refs) {\r\n        address[] memory _refs = new address[](_size);\r\n        uint len;\r\n        address owner_refs = _owner;\r\n        for(uint256 i = 0; i < _size; i++) {\r\n            owner_refs = _referrers[owner_refs].owner;\r\n            if ( owner_refs == address(this) || owner_refs == address(0)) break;\r\n            _refs[len] = owner_refs;\r\n                len++;\r\n        }\r\n        refs = new address[](len);\r\n        for(uint256 i = 0; i < len; i++) {\r\n            refs[i] = _refs[i];\r\n        }\r\n    }\r\n    \r\n    function addReferrer(address _referrer_) external {\r\n        _addReferrerFor(_msgSender(),_referrer_);\r\n    }\r\n\r\n    function _addReferrerFor(address _owner,address _referrer_) internal {\r\n        Referrer storage _ref = _referrers[_owner];\r\n        Referrer memory _ref_referrers = _referrers[_referrer_];\r\n        require(_referrer_ != _owner, \"referrer cannot self\");\r\n        require(_referrer_ != address(0), \"referrer cannot 0x00\");\r\n        require(_ref.owner == address(0), \"Referrered\");\r\n        require(_ref_referrers.owner != address(0) || _referrer_ == address(this), \"referrer need referrered\");\r\n        require(_ref_referrers.owner != _owner, \"Referrered error\");\r\n        _ref.owner = _referrer_;\r\n        _ref.row = _ref_referrers.row + 1;\r\n        _umbrellas[_referrer_].push(\r\n            _owner\r\n        );\r\n        require(maxNmbrella == 0 || umbrellaNumOf(_referrer_) <= maxNmbrella, \"maxNmbrella overflow\");\r\n        emit CreateReferrer(_ref.row, _referrer_, _msgSender());\r\n    }\r\n\r\n    function withdrawRest(address _token) public onlyOwner{\r\n        IERC20(_token).transfer(owner(),IERC20(_token).balanceOf(address(this)));\r\n    }\r\n    function releaseRefer(address _add) public onlyOwner{\r\n        Referrer storage _ref = _referrers[_add];\r\n        _ref.owner = address(0);\r\n        _ref.row = 0;\r\n   \r\n        uint256 _len = _umbrellas[_ref.owner].length;\r\n        address[] memory _de = new address[](_len);\r\n        \r\n        delete _de[_len -1];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userRow\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"CreateReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer_\",\"type\":\"address\"}],\"name\":\"addReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getReferrerFor\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"refs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNmbrella\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"releaseRefer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNmbrella\",\"type\":\"uint256\"}],\"name\":\"setMaxNmber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"umbrella\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"umbrellaNumOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawRest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InviteRelation", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4a6257ac0968253ed694e4b8f5144134c947428853a90ba9fcae34f71b44e6e0"}