{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/v3-core/contracts/interfaces/callback/IPancakeV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IPancakeV3PoolActions#swap\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\ninterface IPancakeV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\n    function pancakeV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IPancakeV3PoolImmutables.sol';\\nimport './pool/IPancakeV3PoolState.sol';\\nimport './pool/IPancakeV3PoolDerivedState.sol';\\nimport './pool/IPancakeV3PoolActions.sol';\\nimport './pool/IPancakeV3PoolOwnerActions.sol';\\nimport './pool/IPancakeV3PoolEvents.sol';\\n\\n/// @title The interface for a PancakeSwap V3 Pool\\n/// @notice A PancakeSwap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IPancakeV3Pool is\\n    IPancakeV3PoolImmutables,\\n    IPancakeV3PoolState,\\n    IPancakeV3PoolDerivedState,\\n    IPancakeV3PoolActions,\\n    IPancakeV3PoolOwnerActions,\\n    IPancakeV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IPancakeV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3MintCallback#pancakeV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3SwapCallback#pancakeV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3FlashCallback#pancakeV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IPancakeV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IPancakeV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    /// @param protocolFeesToken0 The protocol fee of token0 in the swap\\n    /// @param protocolFeesToken1 The protocol fee of token1 in the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick,\\n        uint128 protocolFeesToken0,\\n        uint128 protocolFeesToken1\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(\\n        uint32 feeProtocol0Old,\\n        uint32 feeProtocol1Old,\\n        uint32 feeProtocol0New,\\n        uint32 feeProtocol1New\\n    );\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IPancakeV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IPancakeV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint32 feeProtocol0, uint32 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Set the LM pool to enable liquidity mining\\n    function setLmPool(address lmPool) external;\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IPancakeV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint32 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"@prb/math/src/Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\n/// Common mathematical functions used in both SD59x18 and UD60x18. Note that these global functions do not\\n/// always operate with SD59x18 and UD60x18 numbers.\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                CUSTOM ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Emitted when the ending result in the fixed-point version of `mulDiv` would overflow uint256.\\nerror PRBMath_MulDiv18_Overflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the ending result in `mulDiv` would overflow uint256.\\nerror PRBMath_MulDiv_Overflow(uint256 x, uint256 y, uint256 denominator);\\n\\n/// @notice Emitted when attempting to run `mulDiv` with one of the inputs `type(int256).min`.\\nerror PRBMath_MulDivSigned_InputTooSmall();\\n\\n/// @notice Emitted when the ending result in the signed version of `mulDiv` would overflow int256.\\nerror PRBMath_MulDivSigned_Overflow(int256 x, int256 y);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CONSTANTS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev The maximum value an uint128 number can have.\\nuint128 constant MAX_UINT128 = type(uint128).max;\\n\\n/// @dev The maximum value an uint40 number can have.\\nuint40 constant MAX_UINT40 = type(uint40).max;\\n\\n/// @dev How many trailing decimals can be represented.\\nuint256 constant UNIT = 1e18;\\n\\n/// @dev Largest power of two that is a divisor of `UNIT`.\\nuint256 constant UNIT_LPOTD = 262144;\\n\\n/// @dev The `UNIT` number inverted mod 2^256.\\nuint256 constant UNIT_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Finds the zero-based index of the first one in the binary representation of x.\\n/// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n///\\n/// Each of the steps in this implementation is equivalent to this high-level code:\\n///\\n/// ```solidity\\n/// if (x >= 2 ** 128) {\\n///     x >>= 128;\\n///     result += 128;\\n/// }\\n/// ```\\n///\\n/// Where 128 is swapped with each respective power of two factor. See the full high-level implementation here:\\n/// https://gist.github.com/PaulRBerg/f932f8693f2733e30c4d479e8e980948\\n///\\n/// A list of the Yul instructions used below:\\n/// - \\\"gt\\\" is \\\"greater than\\\"\\n/// - \\\"or\\\" is the OR bitwise operator\\n/// - \\\"shl\\\" is \\\"shift left\\\"\\n/// - \\\"shr\\\" is \\\"shift right\\\"\\n///\\n/// @param x The uint256 number for which to find the index of the most significant bit.\\n/// @return result The index of the most significant bit as an uint256.\\nfunction msb(uint256 x) pure returns (uint256 result) {\\n    // 2^128\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^64\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^32\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(5, gt(x, 0xFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^16\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(4, gt(x, 0xFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^8\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(3, gt(x, 0xFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^4\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(2, gt(x, 0xF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^2\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(1, gt(x, 0x3))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^1\\n    // No need to shift x any more.\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := gt(x, 0x1)\\n        result := or(result, factor)\\n    }\\n}\\n\\n/// @notice Calculates floor(x*y\u00f7denominator) with full precision.\\n///\\n/// @dev Credits to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n///\\n/// Requirements:\\n/// - The denominator cannot be zero.\\n/// - The result must fit within uint256.\\n///\\n/// Caveats:\\n/// - This function does not work with fixed-point numbers.\\n///\\n/// @param x The multiplicand as an uint256.\\n/// @param y The multiplier as an uint256.\\n/// @param denominator The divisor as an uint256.\\n/// @return result The result as an uint256.\\nfunction mulDiv(uint256 x, uint256 y, uint256 denominator) pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / denominator;\\n        }\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    if (prod1 >= denominator) {\\n        revert PRBMath_MulDiv_Overflow(x, y, denominator);\\n    }\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        // Compute remainder using the mulmod Yul instruction.\\n        remainder := mulmod(x, y, denominator)\\n\\n        // Subtract 256 bit number from 512 bit number.\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n    unchecked {\\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\\n        uint256 lpotdod = denominator & (~denominator + 1);\\n        assembly (\\\"memory-safe\\\") {\\n            // Divide denominator by lpotdod.\\n            denominator := div(denominator, lpotdod)\\n\\n            // Divide [prod1 prod0] by lpotdod.\\n            prod0 := div(prod0, lpotdod)\\n\\n            // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n            lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n        }\\n\\n        // Shift in bits from prod1 into prod0.\\n        prod0 |= prod1 * lpotdod;\\n\\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n        // four bits. That is, denominator * inv = 1 mod 2^4.\\n        uint256 inverse = (3 * denominator) ^ 2;\\n\\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n        // in modular arithmetic, doubling the correct bits in each step.\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inverse;\\n    }\\n}\\n\\n/// @notice Calculates floor(x*y\u00f71e18) with full precision.\\n///\\n/// @dev Variant of `mulDiv` with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n/// final result, we add 1 if `(x * y) % UNIT >= HALF_UNIT`. Without this adjustment, 6.6e-19 would be truncated to 0\\n/// instead of being rounded to 1e-18. See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n///\\n/// Requirements:\\n/// - The result must fit within uint256.\\n///\\n/// Caveats:\\n/// - The body is purposely left uncommented; to understand how this works, see the NatSpec comments in `mulDiv`.\\n/// - It is assumed that the result can never be `type(uint256).max` when x and y solve the following two equations:\\n///     1. x * y = type(uint256).max * UNIT\\n///     2. (x * y) % UNIT >= UNIT / 2\\n///\\n/// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n/// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\nfunction mulDiv18(uint256 x, uint256 y) pure returns (uint256 result) {\\n    uint256 prod0;\\n    uint256 prod1;\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    if (prod1 >= UNIT) {\\n        revert PRBMath_MulDiv18_Overflow(x, y);\\n    }\\n\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        remainder := mulmod(x, y, UNIT)\\n    }\\n\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / UNIT;\\n        }\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n        result := mul(\\n            or(\\n                div(sub(prod0, remainder), UNIT_LPOTD),\\n                mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, UNIT_LPOTD), UNIT_LPOTD), 1))\\n            ),\\n            UNIT_INVERSE\\n        )\\n    }\\n}\\n\\n/// @notice Calculates floor(x*y\u00f7denominator) with full precision.\\n///\\n/// @dev An extension of `mulDiv` for signed numbers. Works by computing the signs and the absolute values separately.\\n///\\n/// Requirements:\\n/// - None of the inputs can be `type(int256).min`.\\n/// - The result must fit within int256.\\n///\\n/// @param x The multiplicand as an int256.\\n/// @param y The multiplier as an int256.\\n/// @param denominator The divisor as an int256.\\n/// @return result The result as an int256.\\nfunction mulDivSigned(int256 x, int256 y, int256 denominator) pure returns (int256 result) {\\n    if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n        revert PRBMath_MulDivSigned_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x, y and the denominator.\\n    uint256 absX;\\n    uint256 absY;\\n    uint256 absD;\\n    unchecked {\\n        absX = x < 0 ? uint256(-x) : uint256(x);\\n        absY = y < 0 ? uint256(-y) : uint256(y);\\n        absD = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n    }\\n\\n    // Compute the absolute value of (x*y)\u00f7denominator. The result must fit within int256.\\n    uint256 rAbs = mulDiv(absX, absY, absD);\\n    if (rAbs > uint256(type(int256).max)) {\\n        revert PRBMath_MulDivSigned_Overflow(x, y);\\n    }\\n\\n    // Get the signs of x, y and the denominator.\\n    uint256 sx;\\n    uint256 sy;\\n    uint256 sd;\\n    assembly (\\\"memory-safe\\\") {\\n        // This works thanks to two's complement.\\n        // \\\"sgt\\\" stands for \\\"signed greater than\\\" and \\\"sub(0,1)\\\" is max uint256.\\n        sx := sgt(x, sub(0, 1))\\n        sy := sgt(y, sub(0, 1))\\n        sd := sgt(denominator, sub(0, 1))\\n    }\\n\\n    // XOR over sx, sy and sd. What this does is to check whether there are 1 or 3 negative signs in the inputs.\\n    // If there are, the result should be negative. Otherwise, it should be positive.\\n    unchecked {\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n/// @dev Has to use 192.64-bit fixed-point numbers.\\n/// See https://ethereum.stackexchange.com/a/96594/24693.\\n/// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\nfunction prbExp2(uint256 x) pure returns (uint256 result) {\\n    unchecked {\\n        // Start from 0.5 in the 192.64-bit fixed-point format.\\n        result = 0x800000000000000000000000000000000000000000000000;\\n\\n        // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n        // because the initial result is 2^191 and all magic factors are less than 2^65.\\n        if (x & 0xFF00000000000000 > 0) {\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000000000 > 0) {\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000000000 > 0) {\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00000000 > 0) {\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00000000 > 0) {\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000 > 0) {\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00 > 0) {\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF > 0) {\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n        }\\n\\n        // We're doing two things at the same time:\\n        //\\n        //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n        //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n        //      rather than 192.\\n        //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n        //\\n        // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n        result *= UNIT;\\n        result >>= (191 - (x >> 64));\\n    }\\n}\\n\\n/// @notice Calculates the square root of x, rounding down if x is not a perfect square.\\n/// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n/// Credits to OpenZeppelin for the explanations in code comments below.\\n///\\n/// Caveats:\\n/// - This function does not work with fixed-point numbers.\\n///\\n/// @param x The uint256 number for which to calculate the square root.\\n/// @return result The result as an uint256.\\nfunction prbSqrt(uint256 x) pure returns (uint256 result) {\\n    if (x == 0) {\\n        return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of x.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of x is a power of 2 such that we have:\\n    //\\n    // $$\\n    // msb(x) <= x <= 2*msb(x)$\\n    // $$\\n    //\\n    // We write $msb(x)$ as $2^k$ and we get:\\n    //\\n    // $$\\n    // k = log_2(x)\\n    // $$\\n    //\\n    // Thus we can write the initial inequality as:\\n    //\\n    // $$\\n    // 2^{log_2(x)} <= x <= 2*2^{log_2(x)+1} \\\\\\\\\\n    // sqrt(2^k) <= sqrt(x) < sqrt(2^{k+1}) \\\\\\\\\\n    // 2^{k/2} <= sqrt(x) < 2^{(k+1)/2} <= 2^{(k/2)+1}\\n    // $$\\n    //\\n    // Consequently, $2^{log_2(x) /2}` is a good first approximation of sqrt(x) with at least one correct bit.\\n    uint256 xAux = uint256(x);\\n    result = 1;\\n    if (xAux >= 2 ** 128) {\\n        xAux >>= 128;\\n        result <<= 64;\\n    }\\n    if (xAux >= 2 ** 64) {\\n        xAux >>= 64;\\n        result <<= 32;\\n    }\\n    if (xAux >= 2 ** 32) {\\n        xAux >>= 32;\\n        result <<= 16;\\n    }\\n    if (xAux >= 2 ** 16) {\\n        xAux >>= 16;\\n        result <<= 8;\\n    }\\n    if (xAux >= 2 ** 8) {\\n        xAux >>= 8;\\n        result <<= 4;\\n    }\\n    if (xAux >= 2 ** 4) {\\n        xAux >>= 4;\\n        result <<= 2;\\n    }\\n    if (xAux >= 2 ** 2) {\\n        result <<= 1;\\n    }\\n\\n    // At this point, `result` is an estimation with at least one bit of precision. We know the true value has at\\n    // most 128 bits, since  it is the square root of a uint256. Newton's method converges quadratically (precision\\n    // doubles at every iteration). We thus need at most 7 iteration to turn our partial result with one bit of\\n    // precision into the expected uint128 result.\\n    unchecked {\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n\\n        // Round down the result in case x is not a perfect square.\\n        uint256 roundedDownResult = x / result;\\n        if (result >= roundedDownResult) {\\n            result = roundedDownResult;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/GrizzlyVaultStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport { OwnableUninitialized } from \\\"./OwnableUninitialized.sol\\\";\\r\\nimport { IPancakeV3Pool } from \\\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\\\";\\r\\nimport { IUniswapV3TickSpacing } from \\\"../interfaces/IUniswapV3TickSpacing.sol\\\";\\r\\nimport { TickMath } from \\\"../pancakeswap/TickMath.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n// solhint-disable max-line-length\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport { ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\n// solhint-enable max-line-length\\r\\nimport { IGrizzlyVaultStorage } from \\\"../interfaces/IGrizzlyVaultStorage.sol\\\";\\r\\n\\r\\n/// @dev Single Global upgradeable state var storage base\\r\\n/// @dev Add all inherited contracts with state vars here\\r\\n/// @dev ERC20Upgradable Includes Initialize\\r\\n// solhint-disable-next-line max-states-count\\r\\nabstract contract GrizzlyVaultStorage is\\r\\n\\tIGrizzlyVaultStorage,\\r\\n\\tERC20Upgradeable,\\r\\n\\tReentrancyGuardUpgradeable,\\r\\n\\tOwnableUninitialized\\r\\n{\\r\\n\\tTicks public baseTicks;\\r\\n\\r\\n\\tuint24 public oracleSlippage;\\r\\n\\tuint32 public oracleSlippageInterval;\\r\\n\\r\\n\\tuint24 public cakeWethFee;\\r\\n\\tuint24 public wethToken0Fee;\\r\\n\\tuint24 public wethToken1Fee;\\r\\n\\r\\n\\tuint24 public treasuryFee;\\r\\n\\taddress public treasury;\\r\\n\\r\\n\\tuint256 public treasuryBalance0;\\r\\n\\tuint256 public treasuryBalance1;\\r\\n\\r\\n\\tIPancakeV3Pool public pool;\\r\\n\\tIERC20 public token0;\\r\\n\\tIERC20 public token1;\\r\\n\\tuint24 public uniPoolFee;\\r\\n\\r\\n\\t/* solhint-disable */\\r\\n\\tuint32 internal constant MIN_INITIAL_SHARES = 1e9;\\r\\n\\tuint24 internal constant basisOne = 1000000;\\r\\n\\tuint16 internal constant basisOneSqrt = 1000;\\r\\n\\t/* solhint-enable */\\r\\n\\r\\n\\t// How much slippage we allow between swaps -> 5000 = 0.5% slippage (1e6 scale)\\r\\n\\tuint24 public slippageUserMax;\\r\\n\\tuint24 public slippageRebalanceMax;\\r\\n\\r\\n\\taddress public immutable factory = 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865;\\r\\n\\r\\n\\taddress public keeperAddress;\\r\\n\\taddress public pancakeV3HelperAddress;\\r\\n\\r\\n\\tevent UpdateGrizzlyParams(uint24 oracleSlippage, uint32 oracleSlippageInterval);\\r\\n\\tevent SetKeeperAddress(address keeperAddress);\\r\\n\\tevent SetPancakeV3HelperAddress(address helperAddress);\\r\\n\\tevent SetOperationParams(\\r\\n\\t\\tuint24 treasuryFee,\\r\\n\\t\\tuint24 slippageUserMax,\\r\\n\\t\\tuint24 slippageRebalanceMax\\r\\n\\t);\\r\\n\\r\\n\\tmodifier onlyAuthorized() {\\r\\n\\t\\trequire(msg.sender == manager() || msg.sender == keeperAddress, \\\"NA\\\"); // not authorized\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Initialize storage variables on a new Grizzly vault pool, only called once\\r\\n\\t/// @param _name Name of Grizzly vault token\\r\\n\\t/// @param _symbol Symbol of Grizzly vault token\\r\\n\\t/// @param _pool Address of Pancakeswap V3 pool\\r\\n\\t/// Note that the 3 above params are NOT UPDATABLE AFTER INITIALIZATION\\r\\n\\t/// @param _treasuryFee Proportion of fees earned that go to treasury\\r\\n\\t/// @param _lowerTick Initial lowerTick (only changeable with positionRebalance)\\r\\n\\t/// @param _lowerTick Initial upperTick (only changeable with positionRebalance)\\r\\n\\t/// @param _manager_ Address of manager (ownership can be transferred)\\r\\n\\tfunction initialize(\\r\\n\\t\\tstring memory _name,\\r\\n\\t\\tstring memory _symbol,\\r\\n\\t\\taddress _pool,\\r\\n\\t\\tuint24 _treasuryFee,\\r\\n\\t\\tint24 _lowerTick,\\r\\n\\t\\tint24 _upperTick,\\r\\n\\t\\taddress _manager_\\r\\n\\t) external override initializer {\\r\\n\\t\\trequire(_treasuryFee <= basisOne, \\\"FH\\\"); // fee too high\\r\\n\\r\\n\\t\\trequire(_validateTickSpacing(_pool, _lowerTick, _upperTick), \\\"TM\\\"); // tickSpacing mismatch\\r\\n\\r\\n\\t\\t// These variables are immutable after initialization\\r\\n\\t\\tpool = IPancakeV3Pool(_pool);\\r\\n\\t\\ttoken0 = IERC20(pool.token0());\\r\\n\\t\\ttoken1 = IERC20(pool.token1());\\r\\n\\t\\tuniPoolFee = pool.fee();\\r\\n\\t\\ttreasuryFee = _treasuryFee; // if set to 0 here manager can still initialize later\\r\\n\\r\\n\\t\\t// These variables can be updated by the manager\\r\\n\\t\\tslippageUserMax = 5000; // default: 0.5% slippage\\r\\n\\t\\tslippageRebalanceMax = 5000; // default: 0.5% slippage\\r\\n\\t\\toracleSlippageInterval = 60; // default: last 60 seconds, block time in BSC < 3s;\\r\\n\\t\\toracleSlippage = 5000; // default: 0.5% slippage\\r\\n\\r\\n\\t\\ttreasury = _manager_; // default: treasury is admin\\r\\n\\r\\n\\t\\tbaseTicks.lowerTick = _lowerTick;\\r\\n\\t\\tbaseTicks.upperTick = _upperTick;\\r\\n\\r\\n\\t\\t_manager = _manager_;\\r\\n\\r\\n\\t\\t// e.g. \\\"Grizzly Uniswap USDC/DAI LP\\\" and \\\"hsUSDC-DAI\\\"\\r\\n\\t\\t__ERC20_init(_name, _symbol);\\r\\n\\t\\t__ReentrancyGuard_init();\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Change configurable parameters, only manager can call\\r\\n\\t/// @param newOracleSlippage Maximum slippage on swaps during Grizzly rebalance.\\r\\n\\t/// Accepts values from 0 to 1000000, e.g. 5000 <-> 0.5%\\r\\n\\t/// @param newOracleSlippageInterval Length of time for TWAP used in computing slippage on swaps\\r\\n\\t/// @param newTreasury Address where treasuryFee withdrawals are sent\\r\\n\\tfunction updateConfigParams(\\r\\n\\t\\tuint24 newOracleSlippage,\\r\\n\\t\\tuint32 newOracleSlippageInterval,\\r\\n\\t\\taddress newTreasury\\r\\n\\t) external onlyManager {\\r\\n\\t\\trequire(newOracleSlippage <= basisOne, \\\"SH\\\"); // slippage too high\\r\\n\\r\\n\\t\\tif (newOracleSlippage != 0) oracleSlippage = newOracleSlippage;\\r\\n\\t\\tif (newOracleSlippageInterval != 0) oracleSlippageInterval = newOracleSlippageInterval;\\r\\n\\t\\temit UpdateGrizzlyParams(newOracleSlippage, newOracleSlippageInterval);\\r\\n\\r\\n\\t\\tif (newTreasury != address(0)) treasury = newTreasury;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice setPancakeV3HelperAddress sets the contract helper address for view methods\\r\\n\\tfunction setPancakeV3HelperAddress(address _pancakeV3HelperAddress) external onlyManager {\\r\\n\\t\\trequire(_pancakeV3HelperAddress != address(0), \\\"ZA\\\"); // zeroAddress\\r\\n\\t\\tpancakeV3HelperAddress = _pancakeV3HelperAddress;\\r\\n\\t\\temit SetPancakeV3HelperAddress(pancakeV3HelperAddress);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice setKeeperAddress sets the keeper address for the rebalances automation\\r\\n\\tfunction setKeeperAddress(address _keeperAddress) external onlyManager {\\r\\n\\t\\trequire(_keeperAddress != address(0), \\\"ZA\\\"); // zeroAddress\\r\\n\\t\\tkeeperAddress = _keeperAddress;\\r\\n\\t\\temit SetKeeperAddress(keeperAddress);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice setOperationParams sets slippages, only manager can call\\r\\n\\t/// @param _treasuryFee Proportion of fees earned that are credited to manager.\\r\\n\\t// /// Accepts values from 1 to 1000000, e.g. 5000 <-> 0.5%\\r\\n\\t/// @param _slippageUserMax new maximum user slippage. Accepts values\\r\\n\\t/// from 0 to 1000000, e.g. 5000 <-> 0.5%\\r\\n\\t/// @param _slippageRebalanceMax new maximum rebalance slippage. Accepts values\\r\\n\\t/// from 0 to 1000000, e.g. 5000 <-> 0.5%\\r\\n\\tfunction setOperationParams(\\r\\n\\t\\tuint24 _treasuryFee,\\r\\n\\t\\tuint24 _slippageUserMax,\\r\\n\\t\\tuint24 _slippageRebalanceMax\\r\\n\\t) external onlyManager {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_slippageUserMax <= basisOne &&\\r\\n\\t\\t\\t\\t_slippageRebalanceMax <= basisOne &&\\r\\n\\t\\t\\t\\t_treasuryFee > 0 &&\\r\\n\\t\\t\\t\\t_treasuryFee <= basisOne,\\r\\n\\t\\t\\t\\\"WI\\\"\\r\\n\\t\\t); // wrong inputs\\r\\n\\t\\ttreasuryFee = _treasuryFee;\\r\\n\\t\\tslippageUserMax = _slippageUserMax;\\r\\n\\t\\tslippageRebalanceMax = _slippageRebalanceMax;\\r\\n\\r\\n\\t\\temit SetOperationParams(treasuryFee, slippageUserMax, slippageRebalanceMax);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice setPathFees sets the fee path for swaps, only manager can call\\r\\n\\t/// @param _cakeWethFee Fee tier of the CAKE-BNB pool e.g 2500\\r\\n\\t/// @param _wethToken0Fee Fee tier of the BNB-Token0 pool e.g 500\\r\\n\\t/// @param _wethToken1Fee Fee tier of the BNB-Token1 pool e.g 500\\r\\n\\tfunction setPathFees(\\r\\n\\t\\tuint24 _cakeWethFee,\\r\\n\\t\\tuint24 _wethToken0Fee,\\r\\n\\t\\tuint24 _wethToken1Fee\\r\\n\\t) external onlyManager {\\r\\n\\t\\t_validateFeeValue(_cakeWethFee);\\r\\n\\t\\tcakeWethFee = _cakeWethFee;\\r\\n\\r\\n\\t\\t_validateFeeValue(_wethToken0Fee);\\r\\n\\t\\twethToken0Fee = _wethToken0Fee;\\r\\n\\r\\n\\t\\t_validateFeeValue(_wethToken1Fee);\\r\\n\\t\\twethToken1Fee = _wethToken1Fee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _validateTickSpacing(\\r\\n\\t\\taddress uniPool,\\r\\n\\t\\tint24 lowerTick,\\r\\n\\t\\tint24 upperTick\\r\\n\\t) internal view returns (bool) {\\r\\n\\t\\tint24 spacing = IUniswapV3TickSpacing(uniPool).tickSpacing();\\r\\n\\t\\treturn\\r\\n\\t\\t\\tlowerTick < upperTick &&\\r\\n\\t\\t\\tlowerTick % spacing == 0 &&\\r\\n\\t\\t\\tupperTick % spacing == 0 &&\\r\\n\\t\\t\\tlowerTick >= TickMath.MIN_TICK &&\\r\\n\\t\\t\\tupperTick <= TickMath.MAX_TICK;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _validateFeeValue(uint24 value) internal view {\\r\\n\\t\\trequire(value == 100 || value == 500 || value == 2500 || value == 10000, \\\"WI\\\"); // wrong input\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/abstract/OwnableUninitialized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an manager) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the manager account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyManager`, which can be applied to your functions to restrict their use to\\r\\n * the manager.\\r\\n */\\r\\n\\r\\nabstract contract OwnableUninitialized {\\r\\n\\taddress internal _manager;\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousManager, address indexed newManager);\\r\\n\\r\\n\\t/// @dev Initializes the contract setting the deployer as the initial manager.\\r\\n\\t/// CONSTRUCTOR EMPTY - USE INITIALIZABLE INSTEAD\\r\\n\\t// solhint-disable-next-line no-empty-blocks\\r\\n\\tconstructor() {}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the address of the current manager.\\r\\n\\t */\\r\\n\\tfunction manager() public view virtual returns (address) {\\r\\n\\t\\treturn _manager;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Throws if called by any account other than the manager.\\r\\n\\t */\\r\\n\\tmodifier onlyManager() {\\r\\n\\t\\trequire(manager() == msg.sender, \\\"Ownable: caller is not the manager\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Leaves the contract without manager. It will not be possible to call\\r\\n\\t * `onlyManager` functions anymore. Can only be called by the current manager.\\r\\n\\t *\\r\\n\\t * NOTE: Renouncing ownership will leave the contract without an manager,\\r\\n\\t * thereby removing any functionality that is only available to the manager.\\r\\n\\t */\\r\\n\\tfunction renounceOwnership() public virtual onlyManager {\\r\\n\\t\\temit OwnershipTransferred(_manager, address(0));\\r\\n\\t\\t_manager = address(0);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n\\t * Can only be called by the current manager.\\r\\n\\t */\\r\\n\\tfunction transferOwnership(address newOwner) public virtual onlyManager {\\r\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new manager is the zero address\\\");\\r\\n\\t\\temit OwnershipTransferred(_manager, newOwner);\\r\\n\\t\\t_manager = newOwner;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/GrizzlyVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n// solhint-disable\\r\\nimport { IPancakeV3SwapCallback } from \\\"@pancakeswap/v3-core/contracts/interfaces/callback/IPancakeV3SwapCallback.sol\\\";\\r\\nimport { IUniswapV3PositionsNFT } from \\\"contracts/interfaces/IUniswapV3PositionsNFT.sol\\\";\\r\\nimport { IMasterChefV3 } from \\\"contracts/interfaces/IMasterChefV3.sol\\\";\\r\\nimport { IPancakeV3 } from \\\"contracts/interfaces/IPancakeV3.sol\\\";\\r\\nimport { IPancakeV3Helper } from \\\"contracts/interfaces/IPancakeV3Helper.sol\\\";\\r\\nimport { GrizzlyVaultStorage } from \\\"./abstract/GrizzlyVaultStorage.sol\\\";\\r\\nimport { TickMath } from \\\"./pancakeswap/TickMath.sol\\\";\\r\\nimport { IERC20, SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport { prbSqrt } from \\\"@prb/math/src/Common.sol\\\";\\r\\nimport { FullMath } from \\\"./pancakeswap/FullMath.sol\\\";\\r\\n\\r\\ncontract GrizzlyVault is IPancakeV3SwapCallback, GrizzlyVaultStorage {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\tusing TickMath for int24;\\r\\n\\r\\n\\taddress public constant nftManager = 0x46A15B0b27311cedF172AB29E4f4766fbE7F4364;\\r\\n\\r\\n\\taddress internal constant cake = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\\r\\n\\r\\n\\taddress internal constant weth = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n\\r\\n\\taddress internal constant uniRouter = 0x1b81D678ffb9C0263b24A97847620C99d213eB14;\\r\\n\\r\\n\\tuint256 public tokenId;\\r\\n\\r\\n\\tIMasterChefV3 public constant masterChef =\\r\\n\\t\\tIMasterChefV3(0x556B9306565093C855AEA9AE92A594704c2Cd59e);\\r\\n\\r\\n\\tevent Minted(\\r\\n\\t\\taddress indexed receiver,\\r\\n\\t\\tuint256 mintAmount,\\r\\n\\t\\tuint256 amount0In,\\r\\n\\t\\tuint256 amount1In,\\r\\n\\t\\tuint128 liquidityMinted\\r\\n\\t);\\r\\n\\r\\n\\tevent Burned(\\r\\n\\t\\taddress indexed receiver,\\r\\n\\t\\tuint256 burnAmount,\\r\\n\\t\\tuint256 amount0Out,\\r\\n\\t\\tuint256 amount1Out,\\r\\n\\t\\tuint128 liquidityBurned\\r\\n\\t);\\r\\n\\r\\n\\tevent AutoCompound(\\r\\n\\t\\tuint256 currentTokenId,\\r\\n\\t\\tint24 lowerTick_,\\r\\n\\t\\tint24 upperTick_,\\r\\n\\t\\tuint128 liquidityBefore,\\r\\n\\t\\tuint128 liquidityAfter\\r\\n\\t);\\r\\n\\r\\n\\tevent PositionRebalance(\\r\\n\\t\\tuint256 newTokenId,\\r\\n\\t\\tint24 lowerTick_,\\r\\n\\t\\tint24 upperTick_,\\r\\n\\t\\tuint128 liquidityBefore,\\r\\n\\t\\tuint128 liquidityAfter\\r\\n\\t);\\r\\n\\r\\n\\tevent FeesEarned(uint256 feesEarned0, uint256 feesEarned1);\\r\\n\\r\\n\\t// --- UniV3 callback functions --- //\\r\\n\\r\\n\\t/// @notice Pancake v3 callback function, called back on pool.swap\\r\\n\\tfunction pancakeV3SwapCallback(\\r\\n\\t\\tint256 amount0Delta,\\r\\n\\t\\tint256 amount1Delta,\\r\\n\\t\\tbytes calldata /*data*/\\r\\n\\t) external override {\\r\\n\\t\\trequire(msg.sender == address(pool), \\\"CC\\\"); // callback caller\\r\\n\\r\\n\\t\\tif (amount0Delta > 0) token0.safeTransfer(msg.sender, uint256(amount0Delta));\\r\\n\\t\\tif (amount1Delta > 0) token1.safeTransfer(msg.sender, uint256(amount1Delta));\\r\\n\\t}\\r\\n\\r\\n\\t// --- User functions --- //\\r\\n\\r\\n\\t/// @notice Mint fungible Grizzly Vault tokens, fractional shares of a Uniswap V3 position\\r\\n\\t/// @dev To compute the amount of tokens necessary to mint `mintAmount` see getMintAmounts\\r\\n\\t/// @param mintAmount The number of Grizzly Vault tokens to mint\\r\\n\\t/// @param receiver The account to receive the minted tokens\\r\\n\\t/// @return amount0 Amount of token0 transferred from msg.sender to mint `mintAmount`\\r\\n\\t/// @return amount1 Amount of token1 transferred from msg.sender to mint `mintAmount`\\r\\n\\t/// @return liquidityMinted Amount of liquidity added to the underlying Uniswap V3 position\\r\\n\\t// solhint-disable-next-line function-max-lines, code-complexity\\r\\n\\tfunction mint(\\r\\n\\t\\tuint256 mintAmount,\\r\\n\\t\\taddress receiver\\r\\n\\t) external nonReentrant returns (uint256 amount0, uint256 amount1, uint128 liquidityMinted) {\\r\\n\\t\\trequire(mintAmount > 0, \\\"M0\\\"); // mint 0\\r\\n\\r\\n\\t\\tuint256 totalSupply = totalSupply();\\r\\n\\r\\n\\t\\tTicks memory ticks = baseTicks;\\r\\n\\t\\t(uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\\r\\n\\r\\n\\t\\tif (totalSupply > 0) {\\r\\n\\t\\t\\t(uint256 amount0Current, uint256 amount1Current) = getUnderlyingBalances();\\r\\n\\r\\n\\t\\t\\tamount0 = FullMath.mulDivRoundingUp(amount0Current, mintAmount, totalSupply);\\r\\n\\t\\t\\tamount1 = FullMath.mulDivRoundingUp(amount1Current, mintAmount, totalSupply);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// Prevent first staker from stealing funds of subsequent stakers\\r\\n\\t\\t\\t// solhint-disable-next-line max-line-length\\r\\n\\t\\t\\t// https://code4rena.com/reports/2022-01-sherlock/#h-01-first-user-can-steal-everyone-elses-tokens\\r\\n\\t\\t\\trequire(mintAmount > MIN_INITIAL_SHARES, \\\"MS\\\"); // min shares\\r\\n\\r\\n\\t\\t\\t// If supply is 0 mintAmount == liquidity to deposit\\r\\n\\t\\t\\t(amount0, amount1) = IPancakeV3Helper(pancakeV3HelperAddress).amountsForLiquidity(\\r\\n\\t\\t\\t\\tSafeCast.toUint128(mintAmount),\\r\\n\\t\\t\\t\\tticks,\\r\\n\\t\\t\\t\\tsqrtRatioX96\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Transfer amounts owed to contract\\r\\n\\t\\tif (amount0 > 0) {\\r\\n\\t\\t\\ttoken0.safeTransferFrom(msg.sender, address(this), amount0);\\r\\n\\t\\t}\\r\\n\\t\\tif (amount1 > 0) {\\r\\n\\t\\t\\ttoken1.safeTransferFrom(msg.sender, address(this), amount1);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (tokenId != 0) {\\r\\n\\t\\t\\t// NFT existing, just increase liquidity via masterChef\\r\\n\\t\\t\\t(liquidityMinted, , ) = masterChef.increaseLiquidity(\\r\\n\\t\\t\\t\\tIMasterChefV3.IncreaseLiquidityParams({\\r\\n\\t\\t\\t\\t\\ttokenId: tokenId,\\r\\n\\t\\t\\t\\t\\tamount0Desired: amount0,\\r\\n\\t\\t\\t\\t\\tamount1Desired: amount1,\\r\\n\\t\\t\\t\\t\\tamount0Min: 0,\\r\\n\\t\\t\\t\\t\\tamount1Min: 0,\\r\\n\\t\\t\\t\\t\\tdeadline: block.timestamp\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// This only is called once, approve masterChef to spend token0 & token1\\r\\n\\t\\t\\ttoken0.safeApprove(address(masterChef), type(uint256).max);\\r\\n\\t\\t\\ttoken1.safeApprove(address(masterChef), type(uint256).max);\\r\\n\\r\\n\\t\\t\\t// This only is called once, approve nftManager to spend token0 & token1\\r\\n\\t\\t\\ttoken0.safeApprove(address(nftManager), type(uint256).max);\\r\\n\\t\\t\\ttoken1.safeApprove(address(nftManager), type(uint256).max);\\r\\n\\r\\n\\t\\t\\t// Also approve UniV3 router for processing rewards\\r\\n\\t\\t\\t_giveRouterAllowances();\\r\\n\\r\\n\\t\\t\\t// Need to mint a NFT\\r\\n\\t\\t\\t(tokenId, liquidityMinted, , ) = IUniswapV3PositionsNFT(nftManager).mint(\\r\\n\\t\\t\\t\\tIUniswapV3PositionsNFT.MintParams({\\r\\n\\t\\t\\t\\t\\ttoken0: address(token0),\\r\\n\\t\\t\\t\\t\\ttoken1: address(token1),\\r\\n\\t\\t\\t\\t\\tfee: pool.fee(),\\r\\n\\t\\t\\t\\t\\ttickLower: ticks.lowerTick,\\r\\n\\t\\t\\t\\t\\ttickUpper: ticks.upperTick,\\r\\n\\t\\t\\t\\t\\tamount0Desired: amount0,\\r\\n\\t\\t\\t\\t\\tamount1Desired: amount1,\\r\\n\\t\\t\\t\\t\\tamount0Min: 0,\\r\\n\\t\\t\\t\\t\\tamount1Min: 0,\\r\\n\\t\\t\\t\\t\\trecipient: address(this),\\r\\n\\t\\t\\t\\t\\tdeadline: block.timestamp\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t// Right after minting we transfer the NFT to Pancake masterChef\\r\\n\\t\\t\\tIUniswapV3PositionsNFT(nftManager).safeTransferFrom(\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\taddress(masterChef),\\r\\n\\t\\t\\t\\ttokenId\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_mint(receiver, mintAmount);\\r\\n\\r\\n\\t\\temit Minted(receiver, mintAmount, amount0, amount1, liquidityMinted);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Burn Grizzly Vault tokens (fractional shares of a UniV3 position) and receive tokens\\r\\n\\t/// @param burnAmount The number of Grizzly Vault tokens to burn\\r\\n\\t/// @param receiver The account to receive the underlying amounts of token0 and token1\\r\\n\\t/// @return amount0 Amount of token0 transferred to receiver for burning `burnAmount`\\r\\n\\t/// @return amount1 Amount of token1 transferred to receiver for burning `burnAmount`\\r\\n\\t/// @return liquidityBurned Amount of liquidity removed from the underlying Uniswap V3 position\\r\\n\\t// solhint-disable-next-line function-max-lines\\r\\n\\tfunction burn(\\r\\n\\t\\tuint256 burnAmount,\\r\\n\\t\\taddress receiver\\r\\n\\t) external nonReentrant returns (uint256 amount0, uint256 amount1, uint128 liquidityBurned) {\\r\\n\\t\\trequire(burnAmount > 0, \\\"B0\\\"); // burn 0\\r\\n\\r\\n\\t\\tLocalVariablesBurn memory vars;\\r\\n\\r\\n\\t\\tvars.totalSupply = totalSupply();\\r\\n\\r\\n\\t\\tTicks memory ticks = baseTicks;\\r\\n\\r\\n\\t\\t(uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\\r\\n\\r\\n\\t\\tuint128 liquidity = liquidityOfPool(tokenId);\\r\\n\\r\\n\\t\\t_burn(msg.sender, burnAmount);\\r\\n\\r\\n\\t\\tuint256 left0Share = FullMath.mulDiv(\\r\\n\\t\\t\\tburnAmount,\\r\\n\\t\\t\\t_balanceOfToken(token0) - treasuryBalance0,\\r\\n\\t\\t\\tvars.totalSupply\\r\\n\\t\\t);\\r\\n\\t\\tuint256 left1Share = FullMath.mulDiv(\\r\\n\\t\\t\\tburnAmount,\\r\\n\\t\\t\\t_balanceOfToken(token1) - treasuryBalance1,\\r\\n\\t\\t\\tvars.totalSupply\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tvars.liquidityBurnt = FullMath.mulDiv(burnAmount, liquidity, vars.totalSupply);\\r\\n\\r\\n\\t\\t(uint256 amount0Expect, uint256 amount1Expect) = IPancakeV3Helper(pancakeV3HelperAddress)\\r\\n\\t\\t\\t.amountsForLiquidity(uint128(vars.liquidityBurnt), ticks, sqrtRatioX96);\\r\\n\\r\\n\\t\\t(amount0, amount1) = masterChef.decreaseLiquidity(\\r\\n\\t\\t\\tIMasterChefV3.DecreaseLiquidityParams({\\r\\n\\t\\t\\t\\ttokenId: tokenId,\\r\\n\\t\\t\\t\\tliquidity: uint128(vars.liquidityBurnt),\\r\\n\\t\\t\\t\\tamount0Min: amount0Expect,\\r\\n\\t\\t\\t\\tamount1Min: amount1Expect,\\r\\n\\t\\t\\t\\tdeadline: block.timestamp\\r\\n\\t\\t\\t})\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Only collect decreasedLiquidity, not trading fees\\r\\n\\t\\tmasterChef.collect(\\r\\n\\t\\t\\tIMasterChefV3.CollectParams({\\r\\n\\t\\t\\t\\ttokenId: tokenId,\\r\\n\\t\\t\\t\\trecipient: address(this),\\r\\n\\t\\t\\t\\tamount0Max: uint128(amount0),\\r\\n\\t\\t\\t\\tamount1Max: uint128(amount1)\\r\\n\\t\\t\\t})\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tamount0 += left0Share;\\r\\n\\t\\tamount1 += left1Share;\\r\\n\\r\\n\\t\\t_transferAmounts(amount0, amount1, receiver);\\r\\n\\r\\n\\t\\temit Burned(receiver, burnAmount, amount0, amount1, liquidityBurned);\\r\\n\\t}\\r\\n\\r\\n\\t// --- External authorized functions --- // Can be automated\\r\\n\\r\\n\\t/// @notice Change the range of underlying UniswapV3 position, only authorized can call\\r\\n\\t/// @dev When changing the range the inventory of token0 and token1 may be rebalanced\\r\\n\\t/// with a swap to deposit as much liquidity as possible into the new position.\\r\\n\\t/// Swap a proportion of this leftover to deposit more liquidity into the position,\\r\\n\\t/// since any leftover will be unused and sit idle until the next rebalance\\r\\n\\t/// @param newLowerTick The new lower bound of the position's range\\r\\n\\t/// @param newUpperTick The new upper bound of the position's range\\r\\n\\t/// @param minLiquidity Minimum liquidity of the new position in order to not revert\\r\\n\\t// solhint-disable-next-line function-max-lines\\r\\n\\tfunction positionRebalance(\\r\\n\\t\\tint24 newLowerTick,\\r\\n\\t\\tint24 newUpperTick,\\r\\n\\t\\tuint128 minLiquidity\\r\\n\\t) external onlyAuthorized {\\r\\n\\t\\t// Validate new ticks, if incorrect will revert anyway from Pancakeswap\\r\\n\\t\\trequire(_validateTickSpacing(address(pool), newLowerTick, newUpperTick), \\\"TM\\\"); // tickSpacing mismatch\\r\\n\\r\\n\\t\\t// First check pool health\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tIPancakeV3Helper(pancakeV3HelperAddress).checkPriceSlippage(\\r\\n\\t\\t\\t\\tpool,\\r\\n\\t\\t\\t\\toracleSlippageInterval,\\r\\n\\t\\t\\t\\toracleSlippage,\\r\\n\\t\\t\\t\\tbasisOne,\\r\\n\\t\\t\\t\\tbasisOneSqrt\\r\\n\\t\\t\\t),\\r\\n\\t\\t\\t\\\"HS\\\"\\r\\n\\t\\t); // high slippage\\r\\n\\r\\n\\t\\tuint256 _tokenId = tokenId;\\r\\n\\r\\n\\t\\tuint128 liquidity;\\r\\n\\r\\n\\t\\tTicks memory newTicks = Ticks(newLowerTick, newUpperTick);\\r\\n\\r\\n\\t\\tif (_tokenId != 0) {\\r\\n\\t\\t\\t// Claim Cake rewards from masterChef\\r\\n\\t\\t\\tmasterChef.harvest(_tokenId, address(this));\\r\\n\\r\\n\\t\\t\\tuint256 initBalToken0 = _balanceOfToken(token0);\\r\\n\\t\\t\\tuint256 initBalToken1 = _balanceOfToken(token1);\\r\\n\\r\\n\\t\\t\\t_processCake();\\r\\n\\r\\n\\t\\t\\tliquidity = liquidityOfPool(_tokenId);\\r\\n\\r\\n\\t\\t\\t(uint256 liqAmount0, uint256 liqAmount1) = masterChef.decreaseLiquidity(\\r\\n\\t\\t\\t\\tIMasterChefV3.DecreaseLiquidityParams({\\r\\n\\t\\t\\t\\t\\ttokenId: _tokenId,\\r\\n\\t\\t\\t\\t\\tliquidity: liquidity,\\r\\n\\t\\t\\t\\t\\tamount0Min: 0,\\r\\n\\t\\t\\t\\t\\tamount1Min: 0,\\r\\n\\t\\t\\t\\t\\tdeadline: block.timestamp\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t// This has to be done after decreaseLiquidity to collect the tokens from liquidity and fees\\r\\n\\t\\t\\tmasterChef.collect(\\r\\n\\t\\t\\t\\tIMasterChefV3.CollectParams({\\r\\n\\t\\t\\t\\t\\ttokenId: _tokenId,\\r\\n\\t\\t\\t\\t\\trecipient: address(this),\\r\\n\\t\\t\\t\\t\\tamount0Max: type(uint128).max,\\r\\n\\t\\t\\t\\t\\tamount1Max: type(uint128).max\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t// Transfers the full amount of a token held by masterChef to this contract\\r\\n\\t\\t\\tmasterChef.sweepToken(address(token0), 0, address(this));\\r\\n\\t\\t\\tmasterChef.sweepToken(address(token1), 0, address(this));\\r\\n\\t\\t\\tmasterChef.burn(_tokenId);\\r\\n\\r\\n\\t\\t\\t_applyFees(\\r\\n\\t\\t\\t\\t_balanceOfToken(token0) - liqAmount0 - initBalToken0,\\r\\n\\t\\t\\t\\t_balanceOfToken(token1) - liqAmount1 - initBalToken1\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 reinvest0 = _balanceOfToken(token0) - treasuryBalance0;\\r\\n\\t\\tuint256 reinvest1 = _balanceOfToken(token1) - treasuryBalance1;\\r\\n\\r\\n\\t\\t(uint256 finalAmount0, uint256 finalAmount1) = _balanceAmounts(\\r\\n\\t\\t\\tnewTicks,\\r\\n\\t\\t\\treinvest0,\\r\\n\\t\\t\\treinvest1\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t(uint256 newTokenId, , , ) = IUniswapV3PositionsNFT(nftManager).mint(\\r\\n\\t\\t\\tIUniswapV3PositionsNFT.MintParams({\\r\\n\\t\\t\\t\\ttoken0: address(token0),\\r\\n\\t\\t\\t\\ttoken1: address(token1),\\r\\n\\t\\t\\t\\tfee: pool.fee(),\\r\\n\\t\\t\\t\\ttickLower: newLowerTick,\\r\\n\\t\\t\\t\\ttickUpper: newUpperTick,\\r\\n\\t\\t\\t\\tamount0Desired: finalAmount0,\\r\\n\\t\\t\\t\\tamount1Desired: finalAmount1,\\r\\n\\t\\t\\t\\tamount0Min: 0,\\r\\n\\t\\t\\t\\tamount1Min: 0,\\r\\n\\t\\t\\t\\trecipient: address(this),\\r\\n\\t\\t\\t\\tdeadline: block.timestamp\\r\\n\\t\\t\\t})\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Right after minting we transfer the NFT to Pancake masterChef\\r\\n\\t\\tIUniswapV3PositionsNFT(nftManager).safeTransferFrom(\\r\\n\\t\\t\\taddress(this),\\r\\n\\t\\t\\taddress(masterChef),\\r\\n\\t\\t\\tnewTokenId\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Update storage variables\\r\\n\\t\\ttokenId = newTokenId;\\r\\n\\t\\tbaseTicks = newTicks;\\r\\n\\r\\n\\t\\tuint128 newLiquidity = liquidityOfPool(newTokenId);\\r\\n\\r\\n\\t\\trequire(newLiquidity > minLiquidity, \\\"ML\\\"); // min liquidity\\r\\n\\r\\n\\t\\temit PositionRebalance(newTokenId, newLowerTick, newUpperTick, liquidity, newLiquidity);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Reinvest fees earned into underlying position, only authorized executors can call\\r\\n\\t/// @dev As the ticks do not change, liquidity must increase, otherwise will revert\\r\\n\\t/// Position bounds CANNOT be altered, only via positionRebalance\\r\\n\\tfunction autoCompound() external onlyAuthorized {\\r\\n\\t\\t// First check pool health\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tIPancakeV3Helper(pancakeV3HelperAddress).checkPriceSlippage(\\r\\n\\t\\t\\t\\tpool,\\r\\n\\t\\t\\t\\toracleSlippageInterval,\\r\\n\\t\\t\\t\\toracleSlippage,\\r\\n\\t\\t\\t\\tbasisOne,\\r\\n\\t\\t\\t\\tbasisOneSqrt\\r\\n\\t\\t\\t),\\r\\n\\t\\t\\t\\\"HS\\\"\\r\\n\\t\\t); // high slippage\\r\\n\\r\\n\\t\\tTicks memory ticks = baseTicks;\\r\\n\\r\\n\\t\\tuint256 _tokenId = tokenId;\\r\\n\\r\\n\\t\\tuint128 liquidity = liquidityOfPool(_tokenId);\\r\\n\\r\\n\\t\\t// Claim Cake rewards from masterChef\\r\\n\\t\\tmasterChef.harvest(_tokenId, address(this));\\r\\n\\r\\n\\t\\tuint256 initBalToken0 = _balanceOfToken(token0);\\r\\n\\t\\tuint256 initBalToken1 = _balanceOfToken(token1);\\r\\n\\r\\n\\t\\t_processCake();\\r\\n\\r\\n\\t\\tmasterChef.collect(\\r\\n\\t\\t\\tIMasterChefV3.CollectParams({\\r\\n\\t\\t\\t\\ttokenId: _tokenId,\\r\\n\\t\\t\\t\\trecipient: address(this),\\r\\n\\t\\t\\t\\tamount0Max: type(uint128).max,\\r\\n\\t\\t\\t\\tamount1Max: type(uint128).max\\r\\n\\t\\t\\t})\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t_applyFees(\\r\\n\\t\\t\\t_balanceOfToken(token0) - initBalToken0,\\r\\n\\t\\t\\t_balanceOfToken(token1) - initBalToken1\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 leftover0 = _balanceOfToken(token0) - treasuryBalance0;\\r\\n\\t\\tuint256 leftover1 = _balanceOfToken(token1) - treasuryBalance1;\\r\\n\\r\\n\\t\\tif (leftover0 > 0 && leftover1 > 0) {\\r\\n\\t\\t\\tmasterChef.increaseLiquidity(\\r\\n\\t\\t\\t\\tIMasterChefV3.IncreaseLiquidityParams({\\r\\n\\t\\t\\t\\t\\ttokenId: _tokenId,\\r\\n\\t\\t\\t\\t\\tamount0Desired: leftover0,\\r\\n\\t\\t\\t\\t\\tamount1Desired: leftover1,\\r\\n\\t\\t\\t\\t\\tamount0Min: 0,\\r\\n\\t\\t\\t\\t\\tamount1Min: 0,\\r\\n\\t\\t\\t\\t\\tdeadline: block.timestamp\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint128 newLiquidity = liquidityOfPool(_tokenId);\\r\\n\\t\\trequire(newLiquidity > liquidity, \\\"LI\\\"); // liquidity must increase\\r\\n\\r\\n\\t\\temit AutoCompound(_tokenId, ticks.lowerTick, ticks.upperTick, liquidity, newLiquidity);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Withdraw manager fees accrued, only authorized executors can call\\r\\n\\t/// Target account to receive fees is treasury, alterable by only manager\\r\\n\\tfunction withdrawManagerBalance() external onlyAuthorized {\\r\\n\\t\\tuint256 amount0 = treasuryBalance0;\\r\\n\\t\\tuint256 amount1 = treasuryBalance1;\\r\\n\\r\\n\\t\\ttreasuryBalance0 = 0;\\r\\n\\t\\ttreasuryBalance1 = 0;\\r\\n\\r\\n\\t\\t_transferAmounts(amount0, amount1, treasury);\\r\\n\\t}\\r\\n\\r\\n\\t// --- External view functions --- //\\r\\n\\r\\n\\t/// @notice Compute max Grizzly Vault tokens that can be minted from `amount0Max` & `amount1Max`\\r\\n\\t/// @param amount0Max The maximum amount of token0 to forward on mint\\r\\n\\t/// @param amount0Max The maximum amount of token1 to forward on mint\\r\\n\\t/// @return amount0 Actual amount of token0 to forward when minting `mintAmount`\\r\\n\\t/// @return amount1 Actual amount of token1 to forward when minting `mintAmount`\\r\\n\\t/// @return mintAmount Maximum number of Grizzly Vault tokens to mint\\r\\n\\tfunction getMintAmounts(\\r\\n\\t\\tuint256 amount0Max,\\r\\n\\t\\tuint256 amount1Max\\r\\n\\t) external view returns (uint256 amount0, uint256 amount1, uint256 mintAmount) {\\r\\n\\t\\tuint256 totalSupply = totalSupply();\\r\\n\\r\\n\\t\\tif (totalSupply > 0) {\\r\\n\\t\\t\\t(amount0, amount1, mintAmount) = IPancakeV3Helper(pancakeV3HelperAddress)\\r\\n\\t\\t\\t\\t.computeMintAmounts(address(this), totalSupply, amount0Max, amount1Max);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tTicks memory ticks = baseTicks;\\r\\n\\t\\t\\t(uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\\r\\n\\r\\n\\t\\t\\tuint128 newLiquidity = IPancakeV3Helper(pancakeV3HelperAddress).liquidityForAmounts(\\r\\n\\t\\t\\t\\tticks,\\r\\n\\t\\t\\t\\tsqrtRatioX96,\\r\\n\\t\\t\\t\\tamount0Max,\\r\\n\\t\\t\\t\\tamount1Max\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tmintAmount = uint256(newLiquidity);\\r\\n\\r\\n\\t\\t\\tif (mintAmount < MIN_INITIAL_SHARES) return (0, 0, 0);\\r\\n\\r\\n\\t\\t\\t(amount0, amount1) = IPancakeV3Helper(pancakeV3HelperAddress).amountsForLiquidity(\\r\\n\\t\\t\\t\\tnewLiquidity,\\r\\n\\t\\t\\t\\tticks,\\r\\n\\t\\t\\t\\tsqrtRatioX96\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction liquidityOfPool(uint256 nftId) public view returns (uint128 liquidity) {\\r\\n\\t\\t(, , , , , , , liquidity, , , , ) = IUniswapV3PositionsNFT(nftManager).positions(nftId);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Provides the pending rewards generated by the strategy\\r\\n\\tfunction pendingCake() external view returns (uint256 pendingRewards) {\\r\\n\\t\\tpendingRewards = masterChef.pendingCake(tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Compute total underlying holdings of the Grizzly Vault token supply\\r\\n\\t/// Includes current liquidity invested in uniswap position, current fees earned\\r\\n\\t/// and any uninvested leftover (but does not include manager or Grizzly fees accrued)\\r\\n\\t/// @return amount0Current current total underlying balance of token0\\r\\n\\t/// @return amount1Current current total underlying balance of token1\\r\\n\\tfunction getUnderlyingBalances()\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 amount0Current, uint256 amount1Current)\\r\\n\\t{\\r\\n\\t\\t(uint160 sqrtRatioX96, int24 tick, , , , , ) = pool.slot0();\\r\\n\\t\\treturn _getUnderlyingBalances(sqrtRatioX96, tick);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice estimate the fees generated for each pair on the vault position\\r\\n\\tfunction estimateFees() external view returns (uint256 token0Fee, uint256 token1Fee) {\\r\\n\\t\\t(token0Fee, token1Fee) = IPancakeV3Helper(pancakeV3HelperAddress).estimateFees(\\r\\n\\t\\t\\tpool,\\r\\n\\t\\t\\tbaseTicks,\\r\\n\\t\\t\\ttokenId\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t// --- Internal core functions --- //\\r\\n\\r\\n\\tfunction _giveRouterAllowances() internal {\\r\\n\\t\\tIERC20(cake).safeApprove(uniRouter, 0);\\r\\n\\t\\tIERC20(cake).safeApprove(uniRouter, type(uint256).max);\\r\\n\\r\\n\\t\\tIERC20(weth).safeApprove(uniRouter, 0);\\r\\n\\t\\tIERC20(weth).safeApprove(uniRouter, type(uint256).max);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _processCake() internal {\\r\\n\\t\\tuint256 cakeBal = IERC20(cake).balanceOf(address(this));\\r\\n\\r\\n\\t\\tuint256 amountWethOut;\\r\\n\\r\\n\\t\\tif (cakeBal > 0) {\\r\\n\\t\\t\\tamountWethOut = IPancakeV3(uniRouter).exactInput(\\r\\n\\t\\t\\t\\tIPancakeV3.ExactInputParams({\\r\\n\\t\\t\\t\\t\\tpath: abi.encodePacked(cake, cakeWethFee, weth),\\r\\n\\t\\t\\t\\t\\trecipient: address(this),\\r\\n\\t\\t\\t\\t\\tdeadline: block.timestamp,\\r\\n\\t\\t\\t\\t\\tamountIn: cakeBal,\\r\\n\\t\\t\\t\\t\\tamountOutMinimum: 0\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (amountWethOut > 0) {\\r\\n\\t\\t\\tif (address(token0) != weth) {\\r\\n\\t\\t\\t\\tIPancakeV3(uniRouter).exactInput(\\r\\n\\t\\t\\t\\t\\tIPancakeV3.ExactInputParams({\\r\\n\\t\\t\\t\\t\\t\\tpath: abi.encodePacked(weth, wethToken0Fee, address(token0)),\\r\\n\\t\\t\\t\\t\\t\\trecipient: address(this),\\r\\n\\t\\t\\t\\t\\t\\tdeadline: block.timestamp,\\r\\n\\t\\t\\t\\t\\t\\tamountIn: amountWethOut / 2,\\r\\n\\t\\t\\t\\t\\t\\tamountOutMinimum: 0\\r\\n\\t\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (address(token1) != weth) {\\r\\n\\t\\t\\t\\tIPancakeV3(uniRouter).exactInput(\\r\\n\\t\\t\\t\\t\\tIPancakeV3.ExactInputParams({\\r\\n\\t\\t\\t\\t\\t\\tpath: abi.encodePacked(weth, wethToken1Fee, address(token1)),\\r\\n\\t\\t\\t\\t\\t\\trecipient: address(this),\\r\\n\\t\\t\\t\\t\\t\\tdeadline: block.timestamp,\\r\\n\\t\\t\\t\\t\\t\\tamountIn: amountWethOut / 2,\\r\\n\\t\\t\\t\\t\\t\\tamountOutMinimum: 0\\r\\n\\t\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _balanceAmounts(\\r\\n\\t\\tTicks memory ticks,\\r\\n\\t\\tuint256 amount0Desired,\\r\\n\\t\\tuint256 amount1Desired\\r\\n\\t) internal returns (uint256 finalAmount0, uint256 finalAmount1) {\\r\\n\\t\\t(uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\\r\\n\\r\\n\\t\\t// Get max liquidity for amounts available\\r\\n\\t\\tuint128 liquidity = IPancakeV3Helper(pancakeV3HelperAddress).liquidityForAmounts(\\r\\n\\t\\t\\tticks,\\r\\n\\t\\t\\tsqrtRatioX96,\\r\\n\\t\\t\\tamount0Desired,\\r\\n\\t\\t\\tamount1Desired\\r\\n\\t\\t);\\r\\n\\t\\t// Get correct amounts of each token for the liquidity we have\\r\\n\\t\\t(uint256 amount0, uint256 amount1) = IPancakeV3Helper(pancakeV3HelperAddress)\\r\\n\\t\\t\\t.amountsForLiquidity(liquidity, ticks, sqrtRatioX96);\\r\\n\\r\\n\\t\\t// Determine the trade direction\\r\\n\\t\\tbool _zeroForOne;\\r\\n\\t\\tif (amount1Desired == 0) {\\r\\n\\t\\t\\t_zeroForOne = true;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t_zeroForOne = IPancakeV3Helper(pancakeV3HelperAddress).amountsDirection(\\r\\n\\t\\t\\t\\tamount0Desired,\\r\\n\\t\\t\\t\\tamount1Desired,\\r\\n\\t\\t\\t\\tamount0,\\r\\n\\t\\t\\t\\tamount1\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Determine the amount to swap, it is not 100% precise but is a very good approximation\\r\\n\\t\\tuint256 _amountSpecified = IPancakeV3Helper(pancakeV3HelperAddress).getSwapAmount(\\r\\n\\t\\t\\tsqrtRatioX96,\\r\\n\\t\\t\\tticks,\\r\\n\\t\\t\\tamount0Desired - amount0,\\r\\n\\t\\t\\tamount1Desired - amount1,\\r\\n\\t\\t\\tuniPoolFee,\\r\\n\\t\\t\\tbasisOne\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tif (_amountSpecified > 0) {\\r\\n\\t\\t\\t(int256 amount0Delta, int256 amount1Delta) = _swap(\\r\\n\\t\\t\\t\\t_amountSpecified,\\r\\n\\t\\t\\t\\t_zeroForOne,\\r\\n\\t\\t\\t\\tslippageRebalanceMax\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\tfinalAmount0 = uint256(SafeCast.toInt256(amount0Desired) - amount0Delta);\\r\\n\\t\\t\\tfinalAmount1 = uint256(SafeCast.toInt256(amount1Desired) - amount1Delta);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn (amount0, amount1);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _addLiquidity(Ticks memory ticks, uint256 amount0, uint256 amount1) internal {\\r\\n\\t\\t// As we have made a swap in the pool sqrtRatioX96 changes\\r\\n\\t\\t(uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\\r\\n\\r\\n\\t\\tuint128 liquidityAfterSwap = IPancakeV3Helper(pancakeV3HelperAddress).liquidityForAmounts(\\r\\n\\t\\t\\tticks,\\r\\n\\t\\t\\tsqrtRatioX96,\\r\\n\\t\\t\\tamount0,\\r\\n\\t\\t\\tamount1\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tif (liquidityAfterSwap > 0) {\\r\\n\\t\\t\\tpool.mint(address(this), ticks.lowerTick, ticks.upperTick, liquidityAfterSwap, \\\"\\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice slippageMax variable as argument to differentiate between user and rebalance swaps\\r\\n\\tfunction _swap(\\r\\n\\t\\tuint256 amountIn,\\r\\n\\t\\tbool zeroForOne,\\r\\n\\t\\tuint256 slippageMax\\r\\n\\t) internal returns (int256, int256) {\\r\\n\\t\\t(uint160 _sqrtPriceX96, , , , , , ) = pool.slot0();\\r\\n\\r\\n\\t\\tuint256 _slippageMax = slippageMax == 0 ? slippageUserMax : slippageMax;\\r\\n\\t\\tuint256 _slippageSqrt = zeroForOne\\r\\n\\t\\t\\t? prbSqrt(basisOne - _slippageMax)\\r\\n\\t\\t\\t: prbSqrt(basisOne + _slippageMax);\\r\\n\\r\\n\\t\\treturn\\r\\n\\t\\t\\tpool.swap(\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\tzeroForOne, // Swap direction, true: token0 -> token1, false: token1 -> token0\\r\\n\\t\\t\\t\\tSafeCast.toInt256(amountIn),\\r\\n\\t\\t\\t\\tuint160(uint256((_sqrtPriceX96 * _slippageSqrt) / basisOneSqrt)), // sqrtPriceLimitX96\\r\\n\\t\\t\\t\\tabi.encode(0)\\r\\n\\t\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transferAmounts(uint256 amount0, uint256 amount1, address receiver) internal {\\r\\n\\t\\tif (amount0 > 0) {\\r\\n\\t\\t\\ttoken0.safeTransfer(receiver, amount0);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (amount1 > 0) {\\r\\n\\t\\t\\ttoken1.safeTransfer(receiver, amount1);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _applyFees(\\r\\n\\t\\tuint256 rawFee0,\\r\\n\\t\\tuint256 rawFee1\\r\\n\\t) internal returns (uint256 fee0, uint256 fee1) {\\r\\n\\t\\tuint256 actualFee0 = (rawFee0 * treasuryFee) / basisOne;\\r\\n\\t\\tuint256 actualFee1 = (rawFee1 * treasuryFee) / basisOne;\\r\\n\\r\\n\\t\\ttreasuryBalance0 += actualFee0;\\r\\n\\t\\ttreasuryBalance1 += actualFee1;\\r\\n\\r\\n\\t\\tfee0 = rawFee0 - actualFee0;\\r\\n\\t\\tfee1 = rawFee1 - actualFee1;\\r\\n\\r\\n\\t\\temit FeesEarned(fee0, fee1);\\r\\n\\t}\\r\\n\\r\\n\\t// --- Internal view functions --- //\\r\\n\\r\\n\\tfunction _balanceOfToken(IERC20 token) internal view returns (uint256) {\\r\\n\\t\\treturn token.balanceOf(address(this));\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getUnderlyingBalances(\\r\\n\\t\\tuint160 sqrtRatioX96,\\r\\n\\t\\tint24 tick\\r\\n\\t) internal view returns (uint256 amount0Current, uint256 amount1Current) {\\r\\n\\t\\tTicks memory ticks = baseTicks;\\r\\n\\t\\tLocalVariablesPosition memory vars;\\r\\n\\r\\n\\t\\t(\\r\\n\\t\\t\\t,\\r\\n\\t\\t\\t,\\r\\n\\t\\t\\t,\\r\\n\\t\\t\\t,\\r\\n\\t\\t\\t,\\r\\n\\t\\t\\t,\\r\\n\\t\\t\\t,\\r\\n\\t\\t\\tvars.liquidity,\\r\\n\\t\\t\\tvars.feeGrowthInside0Last,\\r\\n\\t\\t\\tvars.feeGrowthInside1Last,\\r\\n\\t\\t\\tvars.tokensOwed0,\\r\\n\\t\\t\\tvars.tokensOwed1\\r\\n\\t\\t) = IUniswapV3PositionsNFT(nftManager).positions(tokenId);\\r\\n\\r\\n\\t\\t// Compute current holdings from liquidity\\r\\n\\t\\t(amount0Current, amount1Current) = IPancakeV3Helper(pancakeV3HelperAddress)\\r\\n\\t\\t\\t.amountsForLiquidity(vars.liquidity, ticks, sqrtRatioX96);\\r\\n\\r\\n\\t\\t// Compute current fees earned\\r\\n\\t\\tuint256 fee0 = IPancakeV3Helper(pancakeV3HelperAddress).computeFeesEarned(\\r\\n\\t\\t\\tpool,\\r\\n\\t\\t\\ttrue,\\r\\n\\t\\t\\tvars.feeGrowthInside0Last,\\r\\n\\t\\t\\ttick,\\r\\n\\t\\t\\tvars.liquidity,\\r\\n\\t\\t\\tticks\\r\\n\\t\\t) + uint256(vars.tokensOwed0);\\r\\n\\t\\tuint256 fee1 = IPancakeV3Helper(pancakeV3HelperAddress).computeFeesEarned(\\r\\n\\t\\t\\tpool,\\r\\n\\t\\t\\tfalse,\\r\\n\\t\\t\\tvars.feeGrowthInside1Last,\\r\\n\\t\\t\\ttick,\\r\\n\\t\\t\\tvars.liquidity,\\r\\n\\t\\t\\tticks\\r\\n\\t\\t) + uint256(vars.tokensOwed1);\\r\\n\\r\\n\\t\\tfee0 = (fee0 * (basisOne - treasuryFee)) / basisOne;\\r\\n\\t\\tfee1 = (fee1 * (basisOne - treasuryFee)) / basisOne;\\r\\n\\r\\n\\t\\t// Add any leftover in contract to current holdings\\r\\n\\t\\tamount0Current += fee0 + _balanceOfToken(token0) - treasuryBalance0;\\r\\n\\t\\tamount1Current += fee1 + _balanceOfToken(token1) - treasuryBalance1;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice This is here so our contract can receive ERC721 tokens\\r\\n\\tfunction onERC721Received(\\r\\n\\t\\taddress,\\r\\n\\t\\taddress,\\r\\n\\t\\tuint256,\\r\\n\\t\\tbytes calldata\\r\\n\\t) public pure virtual returns (bytes4) {\\r\\n\\t\\treturn this.onERC721Received.selector;\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IGrizzlyVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport { IPancakeV3Pool } from \\\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { IGrizzlyVaultStorage } from \\\"./IGrizzlyVaultStorage.sol\\\";\\r\\n\\r\\ninterface IGrizzlyVault is IGrizzlyVaultStorage, IERC20 {\\r\\n\\tfunction pool() external view returns (IPancakeV3Pool);\\r\\n\\r\\n\\tfunction token0() external view returns (IERC20);\\r\\n\\r\\n\\tfunction token1() external view returns (IERC20);\\r\\n\\r\\n\\tfunction baseTicks() external view returns (Ticks memory);\\r\\n\\r\\n\\tfunction getMintAmounts(\\r\\n\\t\\tuint256 amount0Max,\\r\\n\\t\\tuint256 amount1Max\\r\\n\\t) external returns (uint256 amount0, uint256 amount1, uint256 mintAmount);\\r\\n\\r\\n\\tfunction mint(\\r\\n\\t\\tuint256 mintAmount,\\r\\n\\t\\taddress receiver\\r\\n\\t) external returns (uint256 amount0, uint256 amount1, uint128 liquidityMinted);\\r\\n\\r\\n\\tfunction burn(\\r\\n\\t\\tuint256 burnAmount,\\r\\n\\t\\taddress receiver\\r\\n\\t) external returns (uint256 amount0, uint256 amount1, uint128 liquidityBurned);\\r\\n\\r\\n\\tfunction getUnderlyingBalances()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 amount0Current, uint256 amount1Current);\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IGrizzlyVaultStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IGrizzlyVaultStorage {\\r\\n\\t// Needed to avoid error compiler stack too deep\\r\\n\\tstruct LocalVariablesBurn {\\r\\n\\t\\tuint256 totalSupply;\\r\\n\\t\\tuint256 liquidityBurnt;\\r\\n\\t\\tint256 amount0Delta;\\r\\n\\t\\tint256 amount1Delta;\\r\\n\\t}\\r\\n\\r\\n\\tstruct Ticks {\\r\\n\\t\\tint24 lowerTick;\\r\\n\\t\\tint24 upperTick;\\r\\n\\t}\\r\\n\\r\\n\\tstruct LocalVariablesPosition {\\r\\n\\t\\tuint128 liquidity;\\r\\n\\t\\tuint256 feeGrowthInside0Last;\\r\\n\\t\\tuint256 feeGrowthInside1Last;\\r\\n\\t\\tuint128 tokensOwed0;\\r\\n\\t\\tuint128 tokensOwed1;\\r\\n\\t}\\r\\n\\r\\n\\tfunction initialize(\\r\\n\\t\\tstring memory _name,\\r\\n\\t\\tstring memory _symbol,\\r\\n\\t\\taddress _pool,\\r\\n\\t\\tuint24 _treasuryFee,\\r\\n\\t\\tint24 _lowerTick,\\r\\n\\t\\tint24 _upperTick,\\r\\n\\t\\taddress _manager\\r\\n\\t) external;\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterChefV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\n//solhint-disable\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport { IPancakeV3Pool } from \\\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\\\";\\r\\n\\r\\n/// @title Pancake MasterChefV3\\r\\n/// @notice Allows liquidity mining on top of NFT positions.\\r\\ninterface IMasterChefV3 {\\r\\n\\tstruct PoolInfo {\\r\\n\\t\\tuint256 allocPoint;\\r\\n\\t\\t// V3 pool address\\r\\n\\t\\tIPancakeV3Pool v3Pool;\\r\\n\\t\\t// V3 pool token0 address\\r\\n\\t\\taddress token0;\\r\\n\\t\\t// V3 pool token1 address\\r\\n\\t\\taddress token1;\\r\\n\\t\\t// V3 pool fee\\r\\n\\t\\tuint24 fee;\\r\\n\\t\\t// total liquidity staking in the pool\\r\\n\\t\\tuint256 totalLiquidity;\\r\\n\\t\\t// total boost liquidity staking in the pool\\r\\n\\t\\tuint256 totalBoostLiquidity;\\r\\n\\t}\\r\\n\\r\\n\\tstruct UserPositionInfo {\\r\\n\\t\\tuint128 liquidity;\\r\\n\\t\\tuint128 boostLiquidity;\\r\\n\\t\\tint24 tickLower;\\r\\n\\t\\tint24 tickUpper;\\r\\n\\t\\tuint256 rewardGrowthInside;\\r\\n\\t\\tuint256 reward;\\r\\n\\t\\taddress user;\\r\\n\\t\\tuint256 pid;\\r\\n\\t\\tuint256 boostMultiplier;\\r\\n\\t}\\r\\n\\r\\n\\tstruct IncreaseLiquidityParams {\\r\\n\\t\\tuint256 tokenId;\\r\\n\\t\\tuint256 amount0Desired;\\r\\n\\t\\tuint256 amount1Desired;\\r\\n\\t\\tuint256 amount0Min;\\r\\n\\t\\tuint256 amount1Min;\\r\\n\\t\\tuint256 deadline;\\r\\n\\t}\\r\\n\\r\\n\\tstruct DecreaseLiquidityParams {\\r\\n\\t\\tuint256 tokenId;\\r\\n\\t\\tuint128 liquidity;\\r\\n\\t\\tuint256 amount0Min;\\r\\n\\t\\tuint256 amount1Min;\\r\\n\\t\\tuint256 deadline;\\r\\n\\t}\\r\\n\\r\\n\\tstruct CollectParams {\\r\\n\\t\\tuint256 tokenId;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint128 amount0Max;\\r\\n\\t\\tuint128 amount1Max;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice View function to read mapping userPositionInfos[tokenId] => UserPositionInfo\\r\\n\\tfunction userPositionInfos(\\r\\n\\t\\tuint256 _tokenId\\r\\n\\t) external view returns (UserPositionInfo memory info);\\r\\n\\r\\n\\t/// @notice View function for checking pending CAKE rewards.\\r\\n\\t/// @dev The pending cake amount is based on the last state in LMPool. The actual amount will happen whenever liquidity changes or harvest.\\r\\n\\t/// @param _tokenId Token Id of NFT.\\r\\n\\tfunction pendingCake(uint256 _tokenId) external view returns (uint256 reward);\\r\\n\\r\\n\\t/// @notice harvest cake from pool.\\r\\n\\t/// @param _tokenId Token Id of NFT.\\r\\n\\t/// @param _to Address to.\\r\\n\\tfunction harvest(uint256 _tokenId, address _to) external returns (uint256 reward);\\r\\n\\r\\n\\t/// @notice Withdraw LP tokens from pool.\\r\\n\\t/// @param _tokenId Token Id of NFT to deposit.\\r\\n\\t/// @param _to Address to which NFT token to withdraw.\\r\\n\\tfunction withdraw(uint256 _tokenId, address _to) external returns (uint256 reward);\\r\\n\\r\\n\\t/// @notice Update liquidity for the NFT position.\\r\\n\\t/// @param _tokenId Token Id of NFT to update.\\r\\n\\tfunction updateLiquidity(uint256 _tokenId) external;\\r\\n\\r\\n\\t/// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\r\\n\\t/// @param params tokenId The ID of the token for which liquidity is being increased,\\r\\n\\t/// amount0Desired The desired amount of token0 to be spent,\\r\\n\\t/// amount1Desired The desired amount of token1 to be spent,\\r\\n\\t/// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\r\\n\\t/// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\r\\n\\t/// deadline The time by which the transaction must be included to effect the change\\r\\n\\t/// @return liquidity The new liquidity amount as a result of the increase\\r\\n\\t/// @return amount0 The amount of token0 to achieve resulting liquidity\\r\\n\\t/// @return amount1 The amount of token1 to achieve resulting liquidity\\r\\n\\tfunction increaseLiquidity(\\r\\n\\t\\tIncreaseLiquidityParams memory params\\r\\n\\t) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n\\r\\n\\t/// @notice Decreases the amount of liquidity in a position and accounts it to the position\\r\\n\\t/// @param params tokenId The ID of the token for which liquidity is being decreased,\\r\\n\\t/// amount The amount by which liquidity will be decreased,\\r\\n\\t/// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\r\\n\\t/// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\r\\n\\t/// deadline The time by which the transaction must be included to effect the change\\r\\n\\t/// @return amount0 The amount of token0 accounted to the position's tokens owed\\r\\n\\t/// @return amount1 The amount of token1 accounted to the position's tokens owed\\r\\n\\tfunction decreaseLiquidity(\\r\\n\\t\\tDecreaseLiquidityParams memory params\\r\\n\\t) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n\\t/// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\r\\n\\t/// @param params tokenId The ID of the NFT for which tokens are being collected,\\r\\n\\t/// recipient The account that should receive the tokens,\\r\\n\\t/// @dev Warning!!! Please make sure to use multicall to call unwrapWETH9 or sweepToken when set recipient address(0), or you will lose your funds.\\r\\n\\t/// amount0Max The maximum amount of token0 to collect,\\r\\n\\t/// amount1Max The maximum amount of token1 to collect\\r\\n\\t/// @return amount0 The amount of fees collected in token0\\r\\n\\t/// @return amount1 The amount of fees collected in token1\\r\\n\\tfunction collect(\\r\\n\\t\\tCollectParams memory params\\r\\n\\t) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n\\t/// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\r\\n\\t/// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\r\\n\\t/// @param amountMinimum The minimum amount of WETH9 to unwrap\\r\\n\\t/// @param recipient The address receiving ETH\\r\\n\\tfunction unwrapWETH9(uint256 amountMinimum, address recipient) external;\\r\\n\\r\\n\\t/// @notice Transfers the full amount of a token held by this contract to recipient\\r\\n\\t/// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\r\\n\\t/// @param token The contract address of the token which will be transferred to `recipient`\\r\\n\\t/// @param amountMinimum The minimum amount of token required for a transfer\\r\\n\\t/// @param recipient The destination address of the token\\r\\n\\tfunction sweepToken(address token, uint256 amountMinimum, address recipient) external;\\r\\n\\r\\n\\t/// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\r\\n\\t/// must be collected first.\\r\\n\\t/// @param _tokenId The ID of the token that is being burned\\r\\n\\tfunction burn(uint256 _tokenId) external;\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IPancakeV3 {\\r\\n\\tstruct ExactInputParams {\\r\\n\\t\\tbytes path;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 deadline;\\r\\n\\t\\tuint256 amountIn;\\r\\n\\t\\tuint256 amountOutMinimum;\\r\\n\\t}\\r\\n\\r\\n\\tfunction exactInput(\\r\\n\\t\\tExactInputParams calldata params\\r\\n\\t) external payable returns (uint256 amountOut);\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeV3Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport { IPancakeV3Pool } from \\\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\\\";\\r\\nimport { IGrizzlyVaultStorage } from \\\"contracts/interfaces/IGrizzlyVaultStorage.sol\\\";\\r\\nimport { IGrizzlyVault } from \\\"contracts/interfaces/IGrizzlyVault.sol\\\";\\r\\n\\r\\ninterface IPancakeV3Helper {\\r\\n\\tfunction estimateFees(\\r\\n\\t\\tIPancakeV3Pool pool,\\r\\n\\t\\tIGrizzlyVaultStorage.Ticks memory ticks,\\r\\n\\t\\tuint256 tokenId\\r\\n\\t) external view returns (uint256 token0Fee, uint256 token1Fee);\\r\\n\\r\\n\\tfunction computeFeesEarned(\\r\\n\\t\\tIPancakeV3Pool pool,\\r\\n\\t\\tbool isZero,\\r\\n\\t\\tuint256 feeGrowthInsideLast,\\r\\n\\t\\tint24 tick,\\r\\n\\t\\tuint128 liquidity,\\r\\n\\t\\tIGrizzlyVaultStorage.Ticks memory ticks\\r\\n\\t) external view returns (uint256 fee);\\r\\n\\r\\n\\tfunction amountsForLiquidity(\\r\\n\\t\\tuint128 liquidity,\\r\\n\\t\\tIGrizzlyVaultStorage.Ticks memory ticks,\\r\\n\\t\\tuint160 sqrtRatioX96\\r\\n\\t) external view returns (uint256, uint256);\\r\\n\\r\\n\\tfunction liquidityForAmounts(\\r\\n\\t\\tIGrizzlyVaultStorage.Ticks memory ticks,\\r\\n\\t\\tuint160 sqrtRatioX96,\\r\\n\\t\\tuint256 amount0,\\r\\n\\t\\tuint256 amount1\\r\\n\\t) external view returns (uint128);\\r\\n\\r\\n\\tfunction getSwapAmount(\\r\\n\\t\\tuint160 sqrtRatioX96,\\r\\n\\t\\tIGrizzlyVaultStorage.Ticks memory ticks,\\r\\n\\t\\tuint256 amount0,\\r\\n\\t\\tuint256 amount1,\\r\\n\\t\\tuint24 swapFee,\\r\\n\\t\\tuint24 basisOne\\r\\n\\t) external view returns (uint256 amountToSwap);\\r\\n\\r\\n\\tfunction computeMintAmounts(\\r\\n\\t\\taddress grizzlyVault,\\r\\n\\t\\tuint256 totalSupply,\\r\\n\\t\\tuint256 amount0Max,\\r\\n\\t\\tuint256 amount1Max\\r\\n\\t) external view returns (uint256 amount0, uint256 amount1, uint256 mintAmount);\\r\\n\\r\\n\\tfunction amountsDirection(\\r\\n\\t\\tuint256 amount0Desired,\\r\\n\\t\\tuint256 amount1Desired,\\r\\n\\t\\tuint256 amount0,\\r\\n\\t\\tuint256 amount1\\r\\n\\t) external pure returns (bool zeroGreaterOne);\\r\\n\\r\\n\\tfunction checkPriceSlippage(\\r\\n\\t\\tIPancakeV3Pool pool,\\r\\n\\t\\tuint32 oracleSlippageInterval,\\r\\n\\t\\tuint24 oracleSlippage,\\r\\n\\t\\tuint24 basisOne,\\r\\n\\t\\tuint16 basisOneSqrt\\r\\n\\t) external view returns (bool);\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3PositionsNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nimport \\\"../libraries/PoolAddress.sol\\\";\\r\\n\\r\\n/// @title Creates and initializes V3 Pools\\r\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\r\\n/// require the pool to exist.\\r\\ninterface IPoolInitializer {\\r\\n\\t/// @notice Creates a new pool if it does not exist, then initializes if not initialized\\r\\n\\t/// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\r\\n\\t/// @param token0 The contract address of token0 of the pool\\r\\n\\t/// @param token1 The contract address of token1 of the pool\\r\\n\\t/// @param fee The fee amount of the v3 pool for the specified token pair\\r\\n\\t/// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\r\\n\\t/// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\r\\n\\tfunction createAndInitializePoolIfNecessary(\\r\\n\\t\\taddress token0,\\r\\n\\t\\taddress token1,\\r\\n\\t\\tuint24 fee,\\r\\n\\t\\tuint160 sqrtPriceX96\\r\\n\\t) external payable returns (address pool);\\r\\n}\\r\\n\\r\\n/// @title ERC721 with permit\\r\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\r\\ninterface IERC721Permit is IERC721 {\\r\\n\\t/// @notice The permit typehash used in the permit signature\\r\\n\\t/// @return The typehash for the permit\\r\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n\\t/// @notice The domain separator used in the permit signature\\r\\n\\t/// @return The domain seperator used in encoding of permit signature\\r\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n\\t/// @notice Approve of a specific token ID for spending by spender via signature\\r\\n\\t/// @param spender The account that is being approved\\r\\n\\t/// @param tokenId The ID of the token that is being approved for spending\\r\\n\\t/// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\r\\n\\t/// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\r\\n\\t/// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\r\\n\\t/// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\r\\n\\tfunction permit(\\r\\n\\t\\taddress spender,\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tuint256 deadline,\\r\\n\\t\\tuint8 v,\\r\\n\\t\\tbytes32 r,\\r\\n\\t\\tbytes32 s\\r\\n\\t) external payable;\\r\\n}\\r\\n\\r\\n/// @title Periphery Payments\\r\\n/// @notice Functions to ease deposits and withdrawals of ETH\\r\\ninterface IPeripheryPayments {\\r\\n\\t/// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\r\\n\\t/// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\r\\n\\t/// @param amountMinimum The minimum amount of WETH9 to unwrap\\r\\n\\t/// @param recipient The address receiving ETH\\r\\n\\tfunction unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\r\\n\\r\\n\\t/// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\r\\n\\t/// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\r\\n\\t/// that use ether for the input amount\\r\\n\\tfunction refundETH() external payable;\\r\\n\\r\\n\\t/// @notice Transfers the full amount of a token held by this contract to recipient\\r\\n\\t/// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\r\\n\\t/// @param token The contract address of the token which will be transferred to `recipient`\\r\\n\\t/// @param amountMinimum The minimum amount of token required for a transfer\\r\\n\\t/// @param recipient The destination address of the token\\r\\n\\tfunction sweepToken(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint256 amountMinimum,\\r\\n\\t\\taddress recipient\\r\\n\\t) external payable;\\r\\n}\\r\\n\\r\\n/// @title Immutable state\\r\\n/// @notice Functions that return immutable state of the router\\r\\ninterface IPeripheryImmutableState {\\r\\n\\t/// @return Returns the address of the Uniswap V3 factory\\r\\n\\tfunction factory() external view returns (address);\\r\\n\\r\\n\\t/// @return Returns the address of WETH9\\r\\n\\tfunction WETH9() external view returns (address);\\r\\n}\\r\\n\\r\\n/// @title Non-fungible token for positions\\r\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\r\\n/// and authorized.\\r\\ninterface IUniswapV3PositionsNFT is\\r\\n\\tIPoolInitializer,\\r\\n\\tIPeripheryPayments,\\r\\n\\tIPeripheryImmutableState,\\r\\n\\tIERC721Metadata,\\r\\n\\tIERC721Enumerable,\\r\\n\\tIERC721Permit\\r\\n{\\r\\n\\t/// @notice Emitted when liquidity is increased for a position NFT\\r\\n\\t/// @dev Also emitted when a token is minted\\r\\n\\t/// @param tokenId The ID of the token for which liquidity was increased\\r\\n\\t/// @param liquidity The amount by which liquidity for the NFT position was increased\\r\\n\\t/// @param amount0 The amount of token0 that was paid for the increase in liquidity\\r\\n\\t/// @param amount1 The amount of token1 that was paid for the increase in liquidity\\r\\n\\tevent IncreaseLiquidity(\\r\\n\\t\\tuint256 indexed tokenId,\\r\\n\\t\\tuint128 liquidity,\\r\\n\\t\\tuint256 amount0,\\r\\n\\t\\tuint256 amount1\\r\\n\\t);\\r\\n\\t/// @notice Emitted when liquidity is decreased for a position NFT\\r\\n\\t/// @param tokenId The ID of the token for which liquidity was decreased\\r\\n\\t/// @param liquidity The amount by which liquidity for the NFT position was decreased\\r\\n\\t/// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\r\\n\\t/// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\r\\n\\tevent DecreaseLiquidity(\\r\\n\\t\\tuint256 indexed tokenId,\\r\\n\\t\\tuint128 liquidity,\\r\\n\\t\\tuint256 amount0,\\r\\n\\t\\tuint256 amount1\\r\\n\\t);\\r\\n\\t/// @notice Emitted when tokens are collected for a position NFT\\r\\n\\t/// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\r\\n\\t/// @param tokenId The ID of the token for which underlying tokens were collected\\r\\n\\t/// @param recipient The address of the account that received the collected tokens\\r\\n\\t/// @param amount0 The amount of token0 owed to the position that was collected\\r\\n\\t/// @param amount1 The amount of token1 owed to the position that was collected\\r\\n\\tevent Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\r\\n\\r\\n\\t/// @notice Returns the position information associated with a given token ID.\\r\\n\\t/// @dev Throws if the token ID is not valid.\\r\\n\\t/// @param tokenId The ID of the token that represents the position\\r\\n\\t/// @return nonce The nonce for permits\\r\\n\\t/// @return operator The address that is approved for spending\\r\\n\\t/// @return token0 The address of the token0 for a specific pool\\r\\n\\t/// @return token1 The address of the token1 for a specific pool\\r\\n\\t/// @return fee The fee associated with the pool\\r\\n\\t/// @return tickLower The lower end of the tick range for the position\\r\\n\\t/// @return tickUpper The higher end of the tick range for the position\\r\\n\\t/// @return liquidity The liquidity of the position\\r\\n\\t/// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\r\\n\\t/// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\r\\n\\t/// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\r\\n\\t/// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\r\\n\\tfunction positions(\\r\\n\\t\\tuint256 tokenId\\r\\n\\t)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint96 nonce,\\r\\n\\t\\t\\taddress operator,\\r\\n\\t\\t\\taddress token0,\\r\\n\\t\\t\\taddress token1,\\r\\n\\t\\t\\tuint24 fee,\\r\\n\\t\\t\\tint24 tickLower,\\r\\n\\t\\t\\tint24 tickUpper,\\r\\n\\t\\t\\tuint128 liquidity,\\r\\n\\t\\t\\tuint256 feeGrowthInside0LastX128,\\r\\n\\t\\t\\tuint256 feeGrowthInside1LastX128,\\r\\n\\t\\t\\tuint128 tokensOwed0,\\r\\n\\t\\t\\tuint128 tokensOwed1\\r\\n\\t\\t);\\r\\n\\r\\n\\tstruct MintParams {\\r\\n\\t\\taddress token0;\\r\\n\\t\\taddress token1;\\r\\n\\t\\tuint24 fee;\\r\\n\\t\\tint24 tickLower;\\r\\n\\t\\tint24 tickUpper;\\r\\n\\t\\tuint256 amount0Desired;\\r\\n\\t\\tuint256 amount1Desired;\\r\\n\\t\\tuint256 amount0Min;\\r\\n\\t\\tuint256 amount1Min;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 deadline;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Creates a new position wrapped in a NFT\\r\\n\\t/// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\r\\n\\t/// a method does not exist, i.e. the pool is assumed to be initialized.\\r\\n\\t/// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\r\\n\\t/// @return tokenId The ID of the token that represents the minted position\\r\\n\\t/// @return liquidity The amount of liquidity for this position\\r\\n\\t/// @return amount0 The amount of token0\\r\\n\\t/// @return amount1 The amount of token1\\r\\n\\tfunction mint(\\r\\n\\t\\tMintParams calldata params\\r\\n\\t)\\r\\n\\t\\texternal\\r\\n\\t\\tpayable\\r\\n\\t\\treturns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n\\r\\n\\tstruct IncreaseLiquidityParams {\\r\\n\\t\\tuint256 tokenId;\\r\\n\\t\\tuint256 amount0Desired;\\r\\n\\t\\tuint256 amount1Desired;\\r\\n\\t\\tuint256 amount0Min;\\r\\n\\t\\tuint256 amount1Min;\\r\\n\\t\\tuint256 deadline;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\r\\n\\t/// @param params tokenId The ID of the token for which liquidity is being increased,\\r\\n\\t/// amount0Desired The desired amount of token0 to be spent,\\r\\n\\t/// amount1Desired The desired amount of token1 to be spent,\\r\\n\\t/// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\r\\n\\t/// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\r\\n\\t/// deadline The time by which the transaction must be included to effect the change\\r\\n\\t/// @return liquidity The new liquidity amount as a result of the increase\\r\\n\\t/// @return amount0 The amount of token0 to acheive resulting liquidity\\r\\n\\t/// @return amount1 The amount of token1 to acheive resulting liquidity\\r\\n\\tfunction increaseLiquidity(\\r\\n\\t\\tIncreaseLiquidityParams calldata params\\r\\n\\t) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n\\r\\n\\tstruct DecreaseLiquidityParams {\\r\\n\\t\\tuint256 tokenId;\\r\\n\\t\\tuint128 liquidity;\\r\\n\\t\\tuint256 amount0Min;\\r\\n\\t\\tuint256 amount1Min;\\r\\n\\t\\tuint256 deadline;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Decreases the amount of liquidity in a position and accounts it to the position\\r\\n\\t/// @param params tokenId The ID of the token for which liquidity is being decreased,\\r\\n\\t/// amount The amount by which liquidity will be decreased,\\r\\n\\t/// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\r\\n\\t/// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\r\\n\\t/// deadline The time by which the transaction must be included to effect the change\\r\\n\\t/// @return amount0 The amount of token0 accounted to the position's tokens owed\\r\\n\\t/// @return amount1 The amount of token1 accounted to the position's tokens owed\\r\\n\\tfunction decreaseLiquidity(\\r\\n\\t\\tDecreaseLiquidityParams calldata params\\r\\n\\t) external payable returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n\\tstruct CollectParams {\\r\\n\\t\\tuint256 tokenId;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint128 amount0Max;\\r\\n\\t\\tuint128 amount1Max;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\r\\n\\t/// @param params tokenId The ID of the NFT for which tokens are being collected,\\r\\n\\t/// recipient The account that should receive the tokens,\\r\\n\\t/// amount0Max The maximum amount of token0 to collect,\\r\\n\\t/// amount1Max The maximum amount of token1 to collect\\r\\n\\t/// @return amount0 The amount of fees collected in token0\\r\\n\\t/// @return amount1 The amount of fees collected in token1\\r\\n\\tfunction collect(\\r\\n\\t\\tCollectParams calldata params\\r\\n\\t) external payable returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n\\t/// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\r\\n\\t/// must be collected first.\\r\\n\\t/// @param tokenId The ID of the token that is being burned\\r\\n\\tfunction burn(uint256 tokenId) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3TickSpacing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IUniswapV3TickSpacing {\\r\\n\\tfunction tickSpacing() external view returns (int24);\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/libraries/PoolAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\r\\nlibrary PoolAddress {\\r\\n\\tbytes32 internal constant POOL_INIT_CODE_HASH =\\r\\n\\t\\t0xa598dd2fba360510c5a8f02f44423a4468e902df5857dbce3ca162a43a3a31ff;\\r\\n\\r\\n\\t/// @notice The identifying key of the pool\\r\\n\\tstruct PoolKey {\\r\\n\\t\\taddress token0;\\r\\n\\t\\taddress token1;\\r\\n\\t\\tuint24 fee;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\r\\n\\t/// @param tokenA The first token of a pool, unsorted\\r\\n\\t/// @param tokenB The second token of a pool, unsorted\\r\\n\\t/// @param fee The fee level of the pool\\r\\n\\t/// @return Poolkey The pool details with ordered token0 and token1 assignments\\r\\n\\tfunction getPoolKey(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint24 fee\\r\\n\\t) internal pure returns (PoolKey memory) {\\r\\n\\t\\tif (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\r\\n\\t\\treturn PoolKey({ token0: tokenA, token1: tokenB, fee: fee });\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Deterministically computes the pool address given the factory and PoolKey\\r\\n\\t/// @param factory The Uniswap V3 factory contract address\\r\\n\\t/// @param key The PoolKey\\r\\n\\t/// @return pool The contract address of the V3 pool\\r\\n\\tfunction computeAddress(\\r\\n\\t\\taddress factory,\\r\\n\\t\\tPoolKey memory key\\r\\n\\t) internal pure returns (address pool) {\\r\\n\\t\\trequire(key.token0 < key.token1);\\r\\n\\t\\tpool = address(\\r\\n\\t\\t\\tuint160(\\r\\n\\t\\t\\t\\tuint256(\\r\\n\\t\\t\\t\\t\\tkeccak256(\\r\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\r\\n\\t\\t\\t\\t\\t\\t\\thex\\\"ff\\\",\\r\\n\\t\\t\\t\\t\\t\\t\\tfactory,\\r\\n\\t\\t\\t\\t\\t\\t\\tkeccak256(abi.encode(key.token0, key.token1, key.fee)),\\r\\n\\t\\t\\t\\t\\t\\t\\tPOOL_INIT_CODE_HASH\\r\\n\\t\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/pancakeswap/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n// solhint-disable\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n\\t/// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n\\t/// @param a The multiplicand\\r\\n\\t/// @param b The multiplier\\r\\n\\t/// @param denominator The divisor\\r\\n\\t/// @return result The 256-bit result\\r\\n\\t/// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n\\tfunction mulDiv(\\r\\n\\t\\tuint256 a,\\r\\n\\t\\tuint256 b,\\r\\n\\t\\tuint256 denominator\\r\\n\\t) internal pure returns (uint256 result) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t// 512-bit multiply [prod1 prod0] = a * b\\r\\n\\t\\t\\t// Compute the product mod 2**256 and mod 2**256 - 1\\r\\n\\t\\t\\t// then use the Chinese Remainder Theorem to reconstruct\\r\\n\\t\\t\\t// the 512 bit result. The result is stored in two 256\\r\\n\\t\\t\\t// variables such that product = prod1 * 2**256 + prod0\\r\\n\\t\\t\\tuint256 prod0; // Least significant 256 bits of the product\\r\\n\\t\\t\\tuint256 prod1; // Most significant 256 bits of the product\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tlet mm := mulmod(a, b, not(0))\\r\\n\\t\\t\\t\\tprod0 := mul(a, b)\\r\\n\\t\\t\\t\\tprod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Handle non-overflow cases, 256 by 256 division\\r\\n\\t\\t\\tif (prod1 == 0) {\\r\\n\\t\\t\\t\\trequire(denominator > 0);\\r\\n\\t\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\t\\tresult := div(prod0, denominator)\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\treturn result;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Make sure the result is less than 2**256.\\r\\n\\t\\t\\t// Also prevents denominator == 0\\r\\n\\t\\t\\trequire(denominator > prod1);\\r\\n\\r\\n\\t\\t\\t///////////////////////////////////////////////\\r\\n\\t\\t\\t// 512 by 256 division.\\r\\n\\t\\t\\t///////////////////////////////////////////////\\r\\n\\r\\n\\t\\t\\t// Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n\\t\\t\\t// Compute remainder using mulmod\\r\\n\\t\\t\\tuint256 remainder;\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tremainder := mulmod(a, b, denominator)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// Subtract 256 bit number from 512 bit number\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tprod1 := sub(prod1, gt(remainder, prod0))\\r\\n\\t\\t\\t\\tprod0 := sub(prod0, remainder)\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Factor powers of two out of denominator\\r\\n\\t\\t\\t// Compute largest power of two divisor of denominator.\\r\\n\\t\\t\\t// Always >= 1.\\r\\n\\t\\t\\t// EDIT for 0.8 compatibility:\\r\\n\\t\\t\\t// see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\r\\n\\t\\t\\tuint256 twos = denominator & (~denominator + 1);\\r\\n\\r\\n\\t\\t\\t// Divide denominator by power of two\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tdenominator := div(denominator, twos)\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Divide [prod1 prod0] by the factors of two\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tprod0 := div(prod0, twos)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// Shift in bits from prod1 into prod0. For this we need\\r\\n\\t\\t\\t// to flip `twos` such that it is 2**256 / twos.\\r\\n\\t\\t\\t// If twos is zero, then it becomes one\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\ttwos := add(div(sub(0, twos), twos), 1)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tprod0 |= prod1 * twos;\\r\\n\\r\\n\\t\\t\\t// Invert denominator mod 2**256\\r\\n\\t\\t\\t// Now that denominator is an odd number, it has an inverse\\r\\n\\t\\t\\t// modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n\\t\\t\\t// Compute the inverse by starting with a seed that is correct\\r\\n\\t\\t\\t// correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n\\t\\t\\tuint256 inv = (3 * denominator) ^ 2;\\r\\n\\t\\t\\t// Now use Newton-Raphson iteration to improve the precision.\\r\\n\\t\\t\\t// Thanks to Hensel's lifting lemma, this also works in modular\\r\\n\\t\\t\\t// arithmetic, doubling the correct bits in each step.\\r\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n\\t\\t\\t// Because the division is now exact we can divide by multiplying\\r\\n\\t\\t\\t// with the modular inverse of denominator. This will give us the\\r\\n\\t\\t\\t// correct result modulo 2**256. Since the precoditions guarantee\\r\\n\\t\\t\\t// that the outcome is less than 2**256, this is the final result.\\r\\n\\t\\t\\t// We don't need to compute the high bits of the result and prod1\\r\\n\\t\\t\\t// is no longer required.\\r\\n\\t\\t\\tresult = prod0 * inv;\\r\\n\\t\\t\\treturn result;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n\\t/// @param a The multiplicand\\r\\n\\t/// @param b The multiplier\\r\\n\\t/// @param denominator The divisor\\r\\n\\t/// @return result The 256-bit result\\r\\n\\tfunction mulDivRoundingUp(\\r\\n\\t\\tuint256 a,\\r\\n\\t\\tuint256 b,\\r\\n\\t\\tuint256 denominator\\r\\n\\t) internal pure returns (uint256 result) {\\r\\n\\t\\tresult = mulDiv(a, b, denominator);\\r\\n\\t\\tif (mulmod(a, b, denominator) > 0) {\\r\\n\\t\\t\\trequire(result < type(uint256).max);\\r\\n\\t\\t\\tresult++;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/pancakeswap/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n// solhint-disable\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\nlibrary TickMath {\\r\\n\\t/// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n\\tint24 internal constant MIN_TICK = -887272;\\r\\n\\t/// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n\\tint24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n\\t/// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n\\tuint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n\\t/// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n\\tuint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n\\t/// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n\\t/// @dev Throws if |tick| > max tick\\r\\n\\t/// @param tick The input tick for the above formula\\r\\n\\t/// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n\\t/// at the given tick\\r\\n\\tfunction getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\r\\n\\t\\tuint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\r\\n\\r\\n\\t\\t// EDIT: 0.8 compatibility\\r\\n\\t\\trequire(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\r\\n\\r\\n\\t\\tuint256 ratio = absTick & 0x1 != 0\\r\\n\\t\\t\\t? 0xfffcb933bd6fad37aa2d162d1a594001\\r\\n\\t\\t\\t: 0x100000000000000000000000000000000;\\r\\n\\t\\tif (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n\\t\\tif (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n\\t\\tif (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n\\t\\tif (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n\\t\\tif (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n\\t\\tif (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n\\t\\tif (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n\\t\\tif (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n\\t\\tif (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n\\t\\tif (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n\\t\\tif (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n\\t\\tif (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n\\t\\tif (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n\\t\\tif (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n\\t\\tif (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n\\t\\tif (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n\\t\\tif (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n\\t\\tif (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n\\t\\tif (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n\\t\\tif (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n\\t\\t// this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n\\t\\t// we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n\\t\\t// we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n\\t\\tsqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n\\t/// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n\\t/// ever return.\\r\\n\\t/// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\r\\n\\t/// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n\\tfunction getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\r\\n\\t\\t// second inequality must be < because the price can never reach the price at the max tick\\r\\n\\t\\trequire(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \\\"R\\\");\\r\\n\\t\\tuint256 ratio = uint256(sqrtPriceX96) << 32;\\r\\n\\r\\n\\t\\tuint256 r = ratio;\\r\\n\\t\\tuint256 msb = 0;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlet f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlet f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlet f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlet f := shl(4, gt(r, 0xFFFF))\\r\\n\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlet f := shl(3, gt(r, 0xFF))\\r\\n\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlet f := shl(2, gt(r, 0xF))\\r\\n\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlet f := shl(1, gt(r, 0x3))\\r\\n\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlet f := gt(r, 0x1)\\r\\n\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (msb >= 128) r = ratio >> (msb - 127);\\r\\n\\t\\telse r = ratio << (127 - msb);\\r\\n\\r\\n\\t\\tint256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(63, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(62, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(61, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(60, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(59, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(58, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(57, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(56, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(55, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(54, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(53, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(52, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(51, f))\\r\\n\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t}\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\tlog_2 := or(log_2, shl(50, f))\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tint256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n\\t\\tint24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n\\t\\tint24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n\\t\\ttick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\r\\n\\t\\t\\t? tickHi\\r\\n\\t\\t\\t: tickLow;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 495\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"lowerTick_\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"upperTick_\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityBefore\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityAfter\",\"type\":\"uint128\"}],\"name\":\"AutoCompound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityBurned\",\"type\":\"uint128\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesEarned0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesEarned1\",\"type\":\"uint256\"}],\"name\":\"FeesEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityMinted\",\"type\":\"uint128\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"lowerTick_\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"upperTick_\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityBefore\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityAfter\",\"type\":\"uint128\"}],\"name\":\"PositionRebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeperAddress\",\"type\":\"address\"}],\"name\":\"SetKeeperAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"treasuryFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"slippageUserMax\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"slippageRebalanceMax\",\"type\":\"uint24\"}],\"name\":\"SetOperationParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"helperAddress\",\"type\":\"address\"}],\"name\":\"SetPancakeV3HelperAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"oracleSlippage\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oracleSlippageInterval\",\"type\":\"uint32\"}],\"name\":\"UpdateGrizzlyParams\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTicks\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidityBurned\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeWethFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Max\",\"type\":\"uint256\"}],\"name\":\"getMintAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Current\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_treasuryFee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"_lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_upperTick\",\"type\":\"int24\"},{\"internalType\":\"address\",\"name\":\"_manager_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"liquidityOfPool\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChefV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidityMinted\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleSlippage\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleSlippageInterval\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV3HelperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"pancakeV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPancakeV3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"newLowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"newUpperTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"minLiquidity\",\"type\":\"uint128\"}],\"name\":\"positionRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"setKeeperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_treasuryFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_slippageUserMax\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_slippageRebalanceMax\",\"type\":\"uint24\"}],\"name\":\"setOperationParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeV3HelperAddress\",\"type\":\"address\"}],\"name\":\"setPancakeV3HelperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_cakeWethFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_wethToken0Fee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_wethToken1Fee\",\"type\":\"uint24\"}],\"name\":\"setPathFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageRebalanceMax\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageUserMax\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryBalance0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryBalance1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniPoolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"newOracleSlippage\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"newOracleSlippageInterval\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"updateConfigParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken0Fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken1Fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawManagerBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GrizzlyVault", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "495", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}