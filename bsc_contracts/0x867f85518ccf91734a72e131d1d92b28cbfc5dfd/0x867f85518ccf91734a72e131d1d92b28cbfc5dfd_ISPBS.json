{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(  address indexed owner,address indexed spender, uint256 value);\r\n\r\n}\r\n\r\nabstract contract Ownable {\r\n\r\n    address private _owner;\r\n\r\n    address private _previousOwner;\r\n\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n\r\n        address msgSender = msg.sender;\r\n\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }    \r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    } \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {  \r\n    \r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n\r\n    }    \r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b <= a, errorMessage);\r\n\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n\r\n    }    \r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n\r\n    }\r\n\r\n    function div(\r\n\r\n        uint256 a,\r\n\r\n        uint256 b,\r\n\r\n        string memory errorMessage\r\n\r\n    ) internal pure returns (uint256) {\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        uint256 c = a / b;\r\n        \r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    event PairCreated(address indexed token0,address indexed token1, address pair,uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    event Approval( address indexed owner,address indexed spender,uint256 value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to,uint256 value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(address owner,address spender,uint256 value, uint256 deadline,uint8 v, bytes32 r,bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\r\n    event Burn( address indexed sender,uint256 amount0,uint256 amount1,address indexed to );\r\n\r\n    event Swap(address indexed sender, uint256 amount0In,uint256 amount1In,uint256 amount0Out,uint256 amount1Out,address indexed to);\r\n\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0,uint112 reserve1,uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(uint256 amount0Out,uint256 amount1Out,address to,bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity( address tokenA,address tokenB,uint256 amountADesired,uint256 amountBDesired,uint256 amountAMin, uint256 amountBMin, address to,uint256 deadline) external returns (uint256 amountA,uint256 amountB,uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint256 amountTokenDesired,\r\n\r\n        uint256 amountTokenMin,\r\n\r\n        uint256 amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    )  external payable\r\n\r\n    returns (\r\n\r\n\r\n        uint256 amountToken,\r\n\r\n        uint256 amountETH,\r\n\r\n        uint256 liquidity\r\n\r\n        );\r\n\r\n    function removeLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint256 liquidity,\r\n\r\n        uint256 amountAMin,\r\n\r\n        uint256 amountBMin,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n\r\n\r\n    function removeLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint256 liquidity,\r\n\r\n        uint256 amountTokenMin,\r\n\r\n        uint256 amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n\r\n\r\n    function removeLiquidityWithPermit(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint256 liquidity,\r\n\r\n        uint256 amountAMin,\r\n\r\n        uint256 amountBMin,\r\n\r\n        address to,\r\n\r\n        uint256 deadline,\r\n\r\n        bool approveMax,\r\n\r\n        uint8 v,\r\n\r\n        bytes32 r,\r\n\r\n        bytes32 s\r\n\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n\r\n\r\n    function removeLiquidityETHWithPermit(\r\n\r\n        address token,\r\n\r\n        uint256 liquidity,\r\n\r\n        uint256 amountTokenMin,\r\n\r\n        uint256 amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint256 deadline,\r\n\r\n        bool approveMax,\r\n\r\n        uint8 v,\r\n\r\n        bytes32 r,\r\n\r\n        bytes32 s\r\n\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n\r\n\r\n    function swapExactTokensForTokens(\r\n\r\n        uint256 amountIn,\r\n\r\n        uint256 amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n\r\n\r\n    function swapTokensForExactTokens(\r\n\r\n        uint256 amountOut,\r\n\r\n        uint256 amountInMax,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n\r\n\r\n    function swapExactETHForTokens(\r\n\r\n        uint256 amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n\r\n\r\n    function swapTokensForExactETH(\r\n\r\n        uint256 amountOut,\r\n\r\n        uint256 amountInMax,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n\r\n\r\n    function swapExactTokensForETH(\r\n\r\n        uint256 amountIn,\r\n\r\n        uint256 amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n\r\n\r\n    function swapETHForExactTokens(\r\n\r\n        uint256 amountOut,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n\r\n\r\n    function quote(\r\n\r\n        uint256 amountA,\r\n\r\n        uint256 reserveA,\r\n\r\n        uint256 reserveB\r\n\r\n    ) external pure returns (uint256 amountB);\r\n\r\n\r\n\r\n    function getAmountOut(\r\n\r\n        uint256 amountIn,\r\n\r\n        uint256 reserveIn,\r\n\r\n        uint256 reserveOut\r\n\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n\r\n\r\n    function getAmountIn(\r\n\r\n        uint256 amountOut,\r\n\r\n        uint256 reserveIn,\r\n\r\n        uint256 reserveOut\r\n\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n\r\n        external\r\n\r\n        view\r\n\r\n        returns (uint256[] memory amounts);\r\n\r\n\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n\r\n        external\r\n\r\n        view\r\n\r\n        returns (uint256[] memory amounts);\r\n\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint256 liquidity,\r\n\r\n        uint256 amountTokenMin,\r\n\r\n        uint256 amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external returns (uint256 amountETH);\r\n\r\n\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint256 liquidity,\r\n\r\n        uint256 amountTokenMin,\r\n\r\n        uint256 amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint256 deadline,\r\n\r\n        bool approveMax,\r\n\r\n        uint8 v,\r\n\r\n        bytes32 r,\r\n\r\n        bytes32 s\r\n\r\n    ) external returns (uint256 amountETH);\r\n\r\n\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint256 amountIn,\r\n\r\n        uint256 amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external;\r\n\r\n\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint256 amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external payable;\r\n\r\n\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint256 amountIn,\r\n\r\n        uint256 amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint256 deadline\r\n\r\n    ) external;\r\n\r\n}\r\n\r\ncontract ISPBS is IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances; \r\n\r\n    string private _name = \"ISPBS\";\r\n\r\n    string private _symbol = \"ISPBS\";\r\n\r\n    uint8 private _decimals = 18;\r\n\r\n    uint256 private _returnFee = 0;\r\n\r\n    uint256 currentIndex;  \r\n\r\n    uint256 private _tTotal = 7000 * 10**18;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n\r\n    address public immutable uniswapV2Pair;\r\n\r\n    bool public tradeSwitch = false;\r\n\r\n    address public feeAddress;\r\n\r\n    constructor() {\r\n\r\n        _tOwned[msg.sender] = _tTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), address(0x55d398326f99059fF775485246999027B3197955));        \r\n           \r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        feeAddress = msg.sender;\r\n\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n\r\n    }    \r\n\r\n    function changeFeeAddress(address _feeAddress) public onlyOwner {\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function controlTradeSwitch(bool _switch) public onlyOwner {\r\n        tradeSwitch = _switch;\r\n    } \r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender,address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender,spender,_allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve( msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue,\"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    receive() external payable {}    \r\n      \r\n    function _approve(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 amount\r\n\r\n    ) private {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n    function _transfer(address from, address to,uint256 amount) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint8 takeType = 0;\r\n\r\n        if (from == address(uniswapV2Pair) || to == address(uniswapV2Pair) || from == address(uniswapV2Router)) {\r\n            require(tradeSwitch, \"trade is not open\");\r\n            takeType = 1;\r\n        } \r\n\r\n        _tokenTransfer(from, to, amount, takeType);        \r\n        \r\n    }  \r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, uint8 takeType) private {\r\n\r\n        if(takeType == 0){\r\n            _returnFee =  0;   \r\n         } \r\n         else if(takeType == 1){\r\n           _returnFee =  100;   \r\n        }\r\n        \r\n        _transferStandard(sender, recipient, amount);\r\n    }\r\n\r\n    function _takeReturn( address sender, uint256 tAmount) private {\r\n\r\n        if (_returnFee == 0) return;\r\n\r\n        _tOwned[feeAddress] = _tOwned[feeAddress].add(tAmount);\r\n\r\n        emit Transfer(sender, feeAddress, tAmount);\r\n\r\n    }  \r\n\r\n    function _transferStandard( address sender, address recipient,uint256 tAmount) private {\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        _takeReturn(sender, tAmount.div(10000).mul(_returnFee));\r\n\r\n        uint256 recipientRate = 10000 - _returnFee;\r\n\r\n        _tOwned[recipient] = _tOwned[recipient].add( tAmount.div(10000).mul(recipientRate) );\r\n\r\n        emit Transfer(sender, recipient, tAmount.div(10000).mul(recipientRate));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"changeFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_switch\",\"type\":\"bool\"}],\"name\":\"controlTradeSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ISPBS", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cf86a9517902f78c452ae2ca6721597833854df9c872a43969a697ec5b042ccb"}