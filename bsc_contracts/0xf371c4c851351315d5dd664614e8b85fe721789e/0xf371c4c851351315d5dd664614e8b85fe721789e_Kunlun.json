{"SourceCode": "pragma solidity ^0.8.5;\r\n// SPDX-License-Identifier: MIT\r\n// Developed by: jawadklair\r\n\r\ninterface IBEP20 {\r\n\r\n    /**  \r\n     * @dev Returns the total tokens supply  \r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n \r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data; // msg.data is used to handle array, bytes, string \r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an BNB balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner = 0x08275fC91666Ef43a4dc236Fa3929a89E74F2dDE;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n        _previousOwner = address(0);\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract Kunlun is Context, IBEP20, Ownable { // contract name\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _tOwned; // total Owned tokens\r\n    mapping (address => mapping (address => uint256)) private _allowances; // allowed allowance for spender\r\n    mapping (address => bool) public _isExcludedFromAntiWhale; // Limits how many tokens can an address hold\r\n\r\n    mapping (address => bool) public _isExcludedFromFee; // excluded address from all fee\r\n\r\n    mapping (address => bool) public _isExcludedFromMaxTxAmount; // excluded address MaxTxAmount\r\n    \r\n    mapping (address => uint256) private _transactionCheckpoint; // save last transaction time of an address\r\n\r\n    mapping (address => bool) public _isBlacklisted; // blocks an address from buy and selling\r\n\r\n    mapping(address => bool) public _isExcludedFromTransactionlock; // Address to be excluded from transaction cooldown\r\n\r\n    address payable public _marketingAddress = payable(0x54A69543aB614Dd7Fb63c8147C43b58E42Fa9eeD); // Marketing Address\r\n    address payable public _burnAddress = payable(0x000000000000000000000000000000000000dEaD); // Burn Address\r\n\r\n    string private _name = \"Kunlun\"; // token name\r\n    string private _symbol = \"KL\"; // token symbol\r\n    uint8 private _decimals = 18; // 1 token can be divided into 10e_decimals parts\r\n\r\n    uint256 private _tTotal = 10 * 10**4 * 10**_decimals;\r\n\r\n    uint256 public previousBuyBackTime = block.timestamp; // to store previous buyback time\r\n    \r\n    uint256 public durationBetweenEachBuyback = 1 days; // duration betweeen each buyback\r\n\r\n    // All fees are with one decimal value. so if you want 0.5 set value to 5, for 10 set 100. so on...\r\n\r\n    // Below Fees to be deducted and sent as tokens\r\n    uint256 public _tokenFee = 10; // marketing fee 1% to be sent as tokens\r\n    uint256 private _previousTokenFee = _tokenFee; // marketing tokens fee\r\n    \r\n    uint256 public _buyBackFee = 60; // buyback fee 12%\r\n    uint256 private _previousBuyBackFee = _buyBackFee; // buyback fee\r\n\r\n    uint256 public _marketingBNBFee = 10; // marketing BNB fee\r\n    uint256 private _previousMarketinBNBFee = _marketingBNBFee; // marketing BNB fee\r\n\r\n    uint256 public _liquidityFee = 30; // liquidity fee 5%\r\n    uint256 private _previousLiquidityFee = _liquidityFee; // restore liquidity fee\r\n\r\n    uint256 private _deductableFee = _liquidityFee.add(_buyBackFee).add(_marketingBNBFee); // liquidity + buyback  + marketing BNB fee on each transaction\r\n    uint256 private _previousDeductableFee = _deductableFee; // restore old liquidity fee\r\n\r\n\tuint256 private _transactionLockTime = 60; //Cool down time between each transaction per address\r\n\r\n    IPancakeRouter02 public pancakeRouter; // pancakeswap router assiged using address\r\n    address public pancakePair; // for creating WETH pair with our token\r\n    \r\n    bool inSwapAndLiquify; // after each successfull swapandliquify disable the swapandliquify\r\n    bool public swapAndLiquifyEnabled = true; // set auto swap to BNB and liquify collected liquidity fee\r\n    \r\n    uint256 public _maxTxAmount = _tTotal.div(500); // max allowed tokens tranfer per transaction\r\n    uint256 public _minTokensSwapToAndTransferTo = 20 * 10**1 * 10**_decimals; // min token liquidity fee collected before swapandLiquify\r\n    uint256 public _maxTokensPerAddress          = _tTotal.div(100); // Max number of tokens that an address can hold 5% of total supply\r\n\r\n    \r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap); //event fire min token liquidity fee collected before swapandLiquify \r\n    event SwapAndLiquifyEnabledUpdated(bool enabled); // event fire set auto swap to BNB and liquify collected liquidity fee\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqiudity\r\n    ); // fire event how many tokens were swapedandLiquified\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    } // modifier to after each successfull swapandliquify disable the swapandliquify\r\n    \r\n    constructor () {\r\n        _tOwned[owner()] = _tTotal; // assigning the max token to owner's address  \r\n        \r\n        IPancakeRouter02 _pancakeRouter = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         // Create a pancakeswap pair for this new token\r\n        pancakePair = IPancakeFactory(_pancakeRouter.factory())\r\n            .createPair(address(this), _pancakeRouter.WETH());    \r\n\r\n        // set the rest of the contract variables\r\n        pancakeRouter = _pancakeRouter;\r\n        \r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()]             = true;\r\n        _isExcludedFromFee[_burnAddress]        = true;\r\n        _isExcludedFromFee[address(this)]       = true;\r\n        _isExcludedFromFee[_marketingAddress]   = true;\r\n\r\n        //exclude below addresses from transaction cooldown\r\n        _isExcludedFromTransactionlock[owner()]                 = true;\r\n        _isExcludedFromTransactionlock[address(this)]           = true;\r\n        _isExcludedFromTransactionlock[_burnAddress]            = true;\r\n        _isExcludedFromTransactionlock[pancakePair]             = true;\r\n        _isExcludedFromTransactionlock[_marketingAddress]       = true;\r\n        _isExcludedFromTransactionlock[address(_pancakeRouter)] = true;\r\n\r\n        //exclude below addresses from maxTx amount\r\n        _isExcludedFromMaxTxAmount[owner()]                 = true;\r\n        _isExcludedFromMaxTxAmount[address(this)]           = true;\r\n        _isExcludedFromMaxTxAmount[_burnAddress]            = true;\r\n        _isExcludedFromMaxTxAmount[pancakePair]             = true;\r\n        _isExcludedFromMaxTxAmount[_marketingAddress]       = true;\r\n        _isExcludedFromMaxTxAmount[address(_pancakeRouter)] = true;\r\n\r\n        //Exclude's below addresses from per account tokens limit\r\n        _isExcludedFromAntiWhale[owner()]                   = true;\r\n        _isExcludedFromAntiWhale[address(this)]             = true;\r\n        _isExcludedFromAntiWhale[pancakePair]               = true;\r\n        _isExcludedFromAntiWhale[_burnAddress]              = true;\r\n        _isExcludedFromAntiWhale[_marketingAddress]         = true;\r\n        _isExcludedFromAntiWhale[address(_pancakeRouter)]   = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    /**  \r\n     * @dev approves allowance of a spender\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    /**  \r\n     * @dev transfers from a sender to receipent with subtracting spenders allowance with each successfull transfer\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n         return true;\r\n    }\r\n\r\n    /**  \r\n     * @dev approves allowance of a spender should set it to zero first than increase\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**  \r\n     * @dev decrease allowance of spender that it can spend on behalf of owner\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    /**  \r\n     * @dev auto send tokens with each transaction to marketing\r\n     */\r\n    function _sendToMarketing(address account, uint256 amount) internal {\r\n        if(amount > 0)// No need to send if collected marketing token fee is zero\r\n        {\r\n            _tOwned[_marketingAddress] = _tOwned[_marketingAddress].add(amount);\r\n            emit Transfer(account, _marketingAddress, amount);\r\n        }\r\n    }\r\n    \r\n    /**  \r\n     * @dev exclude an address from fee\r\n     */\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    /**  \r\n     * @dev include an address for fee\r\n     */\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    /**  \r\n     * @dev exclude an address from per address tokens limit\r\n     */\r\n    function excludedFromAntiWhale(address account) public onlyOwner {\r\n        _isExcludedFromAntiWhale[account] = true;\r\n    }\r\n\r\n    /**  \r\n     * @dev include an address in per address tokens limit\r\n     */\r\n    function includeInAntiWhale(address account) public onlyOwner {\r\n        _isExcludedFromAntiWhale[account] = false;\r\n    }\r\n\r\n    /**  \r\n     * @dev exclude an address from per address tokens limit\r\n     */\r\n    function excludedFromMaxTxAmount(address account) public onlyOwner {\r\n        _isExcludedFromMaxTxAmount[account] = true;\r\n    }\r\n\r\n    /**  \r\n     * @dev include an address in per address tokens limit\r\n     */\r\n    function includeInMaxTxAmount(address account) public onlyOwner {\r\n        _isExcludedFromMaxTxAmount[account] = false;\r\n    }\r\n    \r\n    /**  \r\n     * @dev set's marketing token fee percentage\r\n     */\r\n    function setMarketingTokenFeePercent(uint256 Fee) external onlyOwner {\r\n        _tokenFee = Fee;\r\n    }\r\n    \r\n    /**  \r\n     * @dev set's marketing fee percentage\r\n     */\r\n    function setMarketingFeePercent(uint256 Fee) external onlyOwner {\r\n        _buyBackFee = Fee;\r\n        _deductableFee = _liquidityFee.add(_buyBackFee).add(_marketingBNBFee);\r\n    }\r\n\r\n    /**  \r\n     * @dev set's liquidity fee percentage\r\n     */\r\n    function setLiquidityFeePercent(uint256 Fee) external onlyOwner {\r\n        _liquidityFee = Fee;\r\n        _deductableFee = _liquidityFee.add(_buyBackFee).add(_marketingBNBFee);\r\n    }\r\n\r\n\r\n    /**  \r\n     * @dev set's marketing BNB fee percentage\r\n     */\r\n    function setMarketingBNBFeePercent(uint256 Fee) external onlyOwner {\r\n        _marketingBNBFee = Fee;\r\n        _deductableFee = _liquidityFee.add(_buyBackFee).add(_marketingBNBFee);\r\n    }\r\n   \r\n    /**  \r\n     * @dev set's max amount of tokens percentage \r\n     * that can be transfered in each transaction from an address\r\n     */\r\n    function setMaxTxTokens(uint256 maxTxTokens) external onlyOwner {\r\n        _maxTxAmount = maxTxTokens.mul( 10**_decimals );\r\n    }\r\n\r\n    /**  \r\n     * @dev set's max amount of tokens\r\n     * that an address can hold\r\n     */\r\n    function setMaxTokenPerAddress(uint256 maxTokens) external onlyOwner {\r\n        _maxTokensPerAddress = maxTokens.mul( 10**_decimals );\r\n    }\r\n\r\n    /**  \r\n     * @dev set's minimmun amount of tokens required \r\n     * before swaped and BNB send to  wallet\r\n     * same value will be used for auto swapandliquifiy threshold\r\n     */\r\n    function setMinTokensSwapAndTransfer(uint256 minAmount) public onlyOwner {\r\n        _minTokensSwapToAndTransferTo = minAmount.mul( 10**_decimals );\r\n    }\r\n\r\n    /**  \r\n     * @dev set's  address\r\n     */\r\n    function setMarketingAddress(address payable marketingAddress) external onlyOwner {\r\n        _marketingAddress = marketingAddress;\r\n    }\r\n\r\n    /**\r\n\t* @dev Sets transactions on time periods or cooldowns. Buzz Buzz Bots.\r\n\t* Can only be set by owner set in seconds.\r\n\t*/\r\n\tfunction setTransactionCooldownTime(uint256 transactiontime) public onlyOwner {\r\n\t\t_transactionLockTime = transactiontime;\r\n\t}\r\n    \r\n    /**\r\n\t* @dev Set duration between each buyback minimum is 1 day and max can be N-days\r\n\t*/\r\n\tfunction setDurationBetweenEachBuyBcakTime(uint256 duration) public onlyOwner {\r\n\t\tdurationBetweenEachBuyback = duration * 1 minutes;\r\n\t}\r\n\r\n    /**\r\n\t * @dev Exclude's an address from transactions from cooldowns.\r\n\t * Can only be set by owner.\r\n\t */\r\n\tfunction excludedFromTransactionCooldown(address account) public onlyOwner {\r\n\t\t_isExcludedFromTransactionlock[account] = true;\r\n\t}\r\n\r\n     /**\r\n\t * @dev Include's an address in transactions from cooldowns.\r\n\t * Can only be set by owner.\r\n\t */\r\n\tfunction includeInTransactionCooldown(address account) public onlyOwner {\r\n\t\t_isExcludedFromTransactionlock[account] = false;\r\n\t}\r\n\r\n    /**  \r\n     * @dev set's auto SwapandLiquify when contract's token balance threshold is reached\r\n     */\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n    \r\n     //to recieve BNB from pancakeRouter when swaping\r\n    receive() external payable {}\r\n\r\n    /**  \r\n     * @dev get/calculates all values e.g taxfee, \r\n     * liquidity fee, actual transfer amount to receiver, \r\n     * deuction amount from sender\r\n     * amount with reward to all holders\r\n     * amount without reward to all holders\r\n     */\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 bFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        return (tTransferAmount, bFee, tLiquidity);\r\n    }\r\n\r\n    /**  \r\n     * @dev get/calculates marketingtokensfee, liquidity fee\r\n     * without reward amount\r\n     */\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        uint256 mTFee = calculateMarketingTokenFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tLiquidity).sub(mTFee);\r\n        return (tTransferAmount, mTFee, tLiquidity);\r\n    }\r\n    \r\n    /**  \r\n     * @dev take's liquidity fee tokens from tansaction and saves in contract\r\n     */\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n    \r\n    /**  \r\n     * @dev calculates burn fee tokens to be deducted\r\n     */\r\n    function calculateMarketingTokenFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_tokenFee).div(\r\n            10**3\r\n        );\r\n    }\r\n\r\n    /**  \r\n     * @dev calculates liquidity fee tokens to be deducted\r\n     */\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_deductableFee).div(\r\n            10**3\r\n        );\r\n    }\r\n    \r\n    /**  \r\n     * @dev removes all fee from transaction if takefee is set to false\r\n     */\r\n    function removeAllFee() private {\r\n        if(_deductableFee == 0 && _tokenFee == 0 && _buyBackFee == 0\r\n           && _marketingBNBFee == 0 && _liquidityFee == 0) return;\r\n        \r\n        _previousTokenFee = _tokenFee;\r\n        _previousBuyBackFee = _buyBackFee;\r\n        _previousLiquidityFee = _liquidityFee; \r\n        _previousDeductableFee = _deductableFee;\r\n        _previousMarketinBNBFee = _marketingBNBFee;\r\n        \r\n        _tokenFee = 0;\r\n        _buyBackFee = 0;\r\n        _liquidityFee = 0;\r\n        _deductableFee = 0;\r\n        _marketingBNBFee = 0;\r\n    }\r\n    \r\n    /**  \r\n     * @dev restores all fee after exclude fee transaction completes\r\n     */\r\n    function restoreAllFee() private {\r\n        _tokenFee = _previousTokenFee;\r\n        _buyBackFee = _previousBuyBackFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _deductableFee = _previousDeductableFee;\r\n        _marketingBNBFee = _previousMarketinBNBFee;\r\n    }\r\n\r\n    /**  \r\n     * @dev approves amount of token spender can spend on behalf of an owner\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**  \r\n     * @dev transfers token from sender to recipient also auto \r\n     * swapsandliquify if contract's token balance threshold is reached\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(_isBlacklisted[from] == false, \"You are banned\");\r\n        require(_isBlacklisted[to] == false, \"The recipient is banned\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(_isExcludedFromAntiWhale[to] || balanceOf(to) + amount <= _maxTokensPerAddress,\r\n        \"Max tokens limit for this account exceeded. Or try lower amount\");\r\n        require(_isExcludedFromTransactionlock[from] || block.timestamp >= _transactionCheckpoint[from] + _transactionLockTime,\r\n        \"Wait for transaction cooldown time to end before making a tansaction\");\r\n        require(_isExcludedFromTransactionlock[to] || block.timestamp >= _transactionCheckpoint[to] + _transactionLockTime,\r\n        \"Wait for transaction cooldown time to end before making a tansaction\");\r\n        if(from == pancakePair && !_isExcludedFromMaxTxAmount[to])\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        else if(!_isExcludedFromMaxTxAmount[from] && to == pancakePair)\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n        _transactionCheckpoint[from] = block.timestamp;\r\n        _transactionCheckpoint[to] = block.timestamp;\r\n        \r\n        if(block.timestamp >= previousBuyBackTime.add(durationBetweenEachBuyback)\r\n            && address(this).balance > 0 && !inSwapAndLiquify && from != pancakePair)\r\n        {\r\n            uint256 buyBackAmount = address(this).balance.div(2);\r\n            swapETHForTokens(buyBackAmount);\r\n            previousBuyBackTime = block.timestamp;\r\n        }\r\n        \r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is pancakeswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        if(contractTokenBalance >= _maxTxAmount)\r\n        {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n        \r\n        bool overMinTokenBalance = contractTokenBalance >=_minTokensSwapToAndTransferTo;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != pancakePair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance =_minTokensSwapToAndTransferTo;\r\n            //add liquidity\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n        \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        \r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        \r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n    /**  \r\n     * @dev swapsAndLiquify tokens to pancakeswap if swapandliquify is enabled\r\n     */\r\n    function swapAndLiquify(uint256 tokenBalance) private lockTheSwap {\r\n        // first split contract into marketing fee and liquidity fee\r\n        uint256 swapPercent = _marketingBNBFee.add(_buyBackFee).add(_liquidityFee/2);\r\n        uint256 swapTokens = tokenBalance.div(_deductableFee).mul(swapPercent);\r\n        uint256 liquidityTokens = tokenBalance.sub(swapTokens);\r\n        uint256 initialBalance = address(this).balance;\r\n        \r\n        swapTokensForBNB(swapTokens);\r\n\r\n        uint256 transferredBalance = address(this).balance.sub(initialBalance);\r\n        uint256 marketingAmount = 0;\r\n        uint256 buyBackAmount = 0;\r\n\r\n        if(_marketingBNBFee > 0)\r\n        {\r\n            marketingAmount = transferredBalance.mul(_marketingBNBFee);\r\n            marketingAmount = marketingAmount.div(swapPercent);\r\n\r\n            _marketingAddress.transfer(marketingAmount);\r\n        }\r\n\r\n        if(_buyBackFee > 0)\r\n        {\r\n            buyBackAmount = transferredBalance.mul(_buyBackFee);\r\n            buyBackAmount = buyBackAmount.div(swapPercent);\r\n        }\r\n        \r\n        if(_liquidityFee > 0)\r\n        {\r\n            transferredBalance = transferredBalance.sub(marketingAmount).sub(buyBackAmount);\r\n            addLiquidity(owner(), liquidityTokens, transferredBalance);\r\n\r\n            emit SwapAndLiquify(liquidityTokens, transferredBalance, liquidityTokens);\r\n        }\r\n    }\r\n\r\n    /**  \r\n     * @dev buyBack exact amount of BNB for tokens if and send to burn Address\r\n     */\r\n    function swapETHForTokens(uint256 amount) private lockTheSwap {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n      // make the swap\r\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            _burnAddress, // Burn address\r\n            block.timestamp.add(15)\r\n        );\r\n    }\r\n\r\n    /**  \r\n     * @dev swap's exact amount of tokens for BNB if swapandliquify is enabled\r\n     */\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        // generate the pancakeswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        _approve(address(this), address(pancakeRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**  \r\n     * @dev add's liquidy to pancakeswap if swapandliquify is enabled\r\n     */\r\n    function addLiquidity(address recipient, uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(pancakeRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        pancakeRouter.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        \r\n        (uint256 tTransferAmount, uint256 mTFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\r\n        _sendToMarketing(sender, mTFee);\r\n        _takeLiquidity(tLiquidity);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    /**  \r\n     * @dev Blacklist a singel wallet from buying and selling\r\n     */\r\n    function blacklistSingleWallet(address account) public onlyOwner {\r\n        if(_isBlacklisted[account] == true) return;\r\n        _isBlacklisted[account] = true;\r\n    }\r\n\r\n    /**  \r\n     * @dev Blacklist multiple wallets from buying and selling\r\n     */\r\n    function blacklistMultipleWallets(address[] calldata accounts) public onlyOwner {\r\n        require(accounts.length < 800, \"Can not blacklist more then 800 address in one transaction\");\r\n        for (uint256 i; i < accounts.length; ++i) {\r\n            _isBlacklisted[accounts[i]] = true;\r\n        }\r\n    }\r\n    \r\n    /**  \r\n     * @dev un blacklist a singel wallet from buying and selling\r\n     */\r\n    function unBlacklistSingleWallet(address account) external onlyOwner {\r\n         if(_isBlacklisted[account] == false) return;\r\n        _isBlacklisted[account] = false;\r\n    }\r\n\r\n    /**  \r\n     * @dev un blacklist multiple wallets from buying and selling\r\n     */\r\n    function unBlacklistMultipleWallets(address[] calldata accounts) public onlyOwner {\r\n        require(accounts.length < 800, \"Can not Unblacklist more then 800 address in one transaction\");\r\n        for (uint256 i; i < accounts.length; ++i) {\r\n            _isBlacklisted[accounts[i]] = false;\r\n        }\r\n    }\r\n\r\n    /**  \r\n     * @dev recovers any tokens stuck in Contract's balance\r\n     * NOTE! if ownership is renounced then it will not work\r\n     * NOTE! Contract's Address and Owner's address MUST NOT\r\n     * be excluded from reflection reward\r\n     */\r\n    function recoverTokens() public onlyOwner {\r\n        address recipient = _msgSender();\r\n        uint256 tokensToRecover = balanceOf(address(this));\r\n        _tOwned[address(this)] = _tOwned[address(this)].sub(tokensToRecover);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tokensToRecover);\r\n    }\r\n    \r\n    /**  \r\n     * @dev recovers any BNB stuck in Contract's balance\r\n     * NOTE! if ownership is renounced then it will not work\r\n     */\r\n    function recoverBNB() public onlyOwner {\r\n        address payable recipient = _msgSender();\r\n        if(address(this).balance > 0)\r\n            recipient.transfer(address(this).balance);\r\n    }\r\n    \r\n    //New Pancakeswap router version?\r\n    //No problem, just change it!\r\n    function setRouterAddress(address newRouter) public onlyOwner {\r\n        IPancakeRouter02 _newPancakeRouter = IPancakeRouter02(newRouter);\r\n        pancakePair = IPancakeFactory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\r\n        pancakeRouter = _newPancakeRouter;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqiudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromAntiWhale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromMaxTxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromTransactionlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingBNBFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTokensPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTokensSwapToAndTransferTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"blacklistMultipleWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklistSingleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationBetweenEachBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludedFromAntiWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludedFromMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludedFromTransactionCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInAntiWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInTransactionCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousBuyBackTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setDurationBetweenEachBuyBcakTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Fee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Fee\",\"type\":\"uint256\"}],\"name\":\"setMarketingBNBFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Fee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Fee\",\"type\":\"uint256\"}],\"name\":\"setMarketingTokenFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxTxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinTokensSwapAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactiontime\",\"type\":\"uint256\"}],\"name\":\"setTransactionCooldownTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"unBlacklistMultipleWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unBlacklistSingleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Kunlun", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aec1b02e72b03142cdae6ef3d552b51a9ad5806e52feca85da16bdb87f8d245c"}