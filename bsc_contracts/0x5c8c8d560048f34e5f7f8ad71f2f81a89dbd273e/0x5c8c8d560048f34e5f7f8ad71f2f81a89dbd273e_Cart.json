{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    uint256                                           internal  _totalSupply;\r\n    mapping (address => uint256)                      internal  _balanceOf;\r\n    mapping (address => mapping (address => uint256)) internal  _allowance;\r\n    string                                            public  symbol;\r\n    uint8                                           public  immutable  decimals = 18;\r\n    string                                            public  name;     // Optional token name\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint wad);\r\n    event Transfer(address indexed src, address indexed dst, uint wad);\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address guy) public view virtual returns (uint256) {\r\n        return _balanceOf[guy];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowance[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint wad) public virtual returns (bool) {\r\n        return _approve(msg.sender, spender, wad);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowance[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowance[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public virtual returns (bool) {\r\n        return _transfer(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad) public virtual returns (bool) {\r\n        uint256 allowed = _allowance[src][msg.sender];\r\n\r\n        if (src != msg.sender && allowed != type(uint).max) {\r\n            require(allowed >= wad, \"ERC20: Insufficient approval\");\r\n            _approve(src, msg.sender, allowed - wad);\r\n        }\r\n\r\n        return _transfer(src, dst, wad);\r\n    }\r\n\r\n\r\n    function _transfer(address src, address dst, uint wad) internal virtual returns (bool) {\r\n        require(dst != address(0), \"ERC20:cannot transfer to the zero address\");\r\n        require(_balanceOf[src] >= wad, \"ERC20: Insufficient balance\");\r\n        _balanceOf[src] = _balanceOf[src] - wad;\r\n        _balanceOf[dst] = _balanceOf[dst] + wad;\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint wad) internal virtual returns (bool) {\r\n        _allowance[owner][spender] = wad;\r\n        emit Approval(owner, spender, wad);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address dst, uint wad) internal virtual {\r\n        require(dst != address(0), \"ERC20: mint to the zero address\");\r\n        _balanceOf[dst] = _balanceOf[dst] + wad;\r\n        _totalSupply = _totalSupply + wad;\r\n        emit Transfer(address(0), dst, wad);\r\n    }\r\n\r\n    function _burn(address src, uint wad) internal virtual {\r\n        require(_balanceOf[src] >= wad, \"ERC20: Insufficient balance\");\r\n        _balanceOf[src] = _balanceOf[src] - wad;\r\n        _totalSupply = _totalSupply - wad;\r\n        emit Transfer(src, address(0), wad);\r\n    }\r\n\r\n    function _burnFrom(address src, uint wad) internal virtual {\r\n      uint256 allowed = _allowance[src][msg.sender];\r\n      if (src != msg.sender && allowed != type(uint).max) {\r\n          require(allowed >= wad, \"ERC20: Insufficient approval\");\r\n          _approve(src, msg.sender, allowed - wad);\r\n      }\r\n\r\n      _burn(src, wad);\r\n    }\r\n\r\n    \r\n}\r\n\r\n// File: contracts/interface/IERC2612.sol\r\n\r\npragma solidity 0.8.0;\r\n/**\r\n * @dev Interface of the ERC2612 standard as defined in the EIP.\r\n *\r\n * Adds the {permit} method, which can be used to change one's\r\n * {IERC20-allowance} without having to send a transaction, by signing a\r\n * message. This allows users to spend tokens without having to hold Ether.\r\n *\r\n * See https://eips.ethereum.org/EIPS/eip-2612.\r\n */\r\ninterface IERC2612 {\r\n\r\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\nabstract contract ERC20Permit is ERC20, IERC2612 {\r\n    mapping (address => uint256) public override nonces;\r\n\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public immutable DOMAIN_SEPARATOR;\r\n\r\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\r\n        uint256 chainId = block.chainid;\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name_)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC2612-permit}.\r\n     *\r\n     * In cases where the free option is not a concern, deadline can simply be\r\n     * set to uint(-1), so it should be seen as an optional parameter\r\n     */\r\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\r\n        require(deadline >= block.timestamp, \"ERC20Permit: expired deadline\");\r\n\r\n        bytes32 hashStruct = keccak256(\r\n            abi.encode(\r\n                PERMIT_TYPEHASH,\r\n                owner,\r\n                spender,\r\n                amount,\r\n                nonces[owner]++,\r\n                deadline\r\n            )\r\n        );\r\n\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                hashStruct\r\n            )\r\n        );\r\n\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(\r\n            signer != address(0) && signer == owner,\r\n            \"ERC20Permit: invalid signature\"\r\n        );\r\n\r\n        _approve(owner, spender, amount);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nabstract contract DelegateERC20 is ERC20Permit {\r\n\r\n  mapping (address => address) public delegates;\r\n  \r\n  struct Checkpoint {\r\n    uint32 fromBlock;\r\n    uint votes;\r\n  }\r\n\r\n  mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n  mapping (address => uint32) public numCheckpoints;\r\n\r\n\r\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n  event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n\r\n  constructor(string memory name_, string memory symbol_) ERC20Permit(name_, symbol_) {\r\n  }\r\n\r\n  function _mint(address dst, uint wad) internal override {\r\n    super._mint(dst, wad); \r\n    _moveDelegates(address(0), delegates[dst], wad);\r\n  }\r\n\r\n  function _transfer(address src, address dst, uint wad) internal override returns (bool) {\r\n    super._transfer(src, dst, wad);\r\n    _moveDelegates(delegates[src], delegates[dst], wad);\r\n    return true;\r\n  }\r\n\r\n  function _burn(address src, uint wad) internal override {\r\n    super._burn(src, wad);\r\n    _moveDelegates(delegates[src], address(0), wad);\r\n  }\r\n\r\n  function delegate(address delegatee) public {\r\n    return _delegate(msg.sender, delegatee);\r\n  }\r\n\r\n  function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\r\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n    \r\n    bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, structHash));\r\n    address signatory = ecrecover(digest, v, r, s);\r\n    require(signatory != address(0), \"delegateBySig: invalid signature\");\r\n    require(nonce == nonces[signatory]++, \"delegateBySig: invalid nonce\");\r\n    require(block.timestamp <= expiry, \"delegateBySig: signature expired\");\r\n    return _delegate(signatory, delegatee);\r\n  }\r\n\r\n  function getCurrentVotes(address account) external view returns (uint256) {\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n  }\r\n\r\n  function getPriorVotes(address account, uint blockNumber) public view returns (uint256) {\r\n    require(blockNumber < block.number, \"getPriorVotes: not yet determined\");\r\n\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    if (nCheckpoints == 0) {\r\n        return 0;\r\n    }\r\n\r\n    // First check most recent balance\r\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n        return checkpoints[account][nCheckpoints - 1].votes;\r\n    }\r\n\r\n    // Next check implicit zero balance\r\n    if (checkpoints[account][0].fromBlock > blockNumber) {\r\n        return 0;\r\n    }\r\n\r\n    uint32 lower = 0;\r\n    uint32 upper = nCheckpoints - 1;\r\n    while (upper > lower) {\r\n        uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n        Checkpoint memory cp = checkpoints[account][center];\r\n        if (cp.fromBlock == blockNumber) {\r\n            return cp.votes;\r\n        } else if (cp.fromBlock < blockNumber) {\r\n            lower = center;\r\n        } else {\r\n            upper = center - 1;\r\n        }\r\n    }\r\n    return checkpoints[account][lower].votes;\r\n  }\r\n\r\n  function _delegate(address delegator, address delegatee) internal {\r\n    address currentDelegate = delegates[delegator];\r\n    uint delegatorBalance = balanceOf(delegator);\r\n    delegates[delegator] = delegatee;\r\n\r\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n  }\r\n\r\n  function _moveDelegates(address srcRep, address dstRep, uint amount) internal {\r\n    if (srcRep != dstRep && amount > 0) {\r\n      if (srcRep != address(0)) {\r\n          uint32 srcRepNum = numCheckpoints[srcRep];\r\n          uint srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n          uint srcRepNew = srcRepOld - amount;\r\n          _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n      }\r\n\r\n      if (dstRep != address(0)) {\r\n          uint32 dstRepNum = numCheckpoints[dstRep];\r\n          uint dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n          uint dstRepNew = dstRepOld + amount;\r\n          _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint oldVotes, uint newVotes) internal {\r\n    uint32 blockNumber = safe32(block.number, \"_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n        checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n    } else {\r\n        checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n        numCheckpoints[delegatee] = nCheckpoints + 1;\r\n    }\r\n\r\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n  }\r\n\r\n  function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n    require(n < 2**32, errorMessage);\r\n    return uint32(n);\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface TokenRecipient {\r\n  // must return ture\r\n  function tokensReceived(\r\n      address from,\r\n      uint amount,\r\n      bytes calldata exData\r\n  ) external returns (bool);\r\n}\r\n\r\ncontract Cart is DelegateERC20 {\r\n  using Address for address;\r\n\r\n  uint256 private constant preMineSupply = 100000000 * 1e18;\r\n\r\n  constructor (address owner) DelegateERC20(\"CryptoArt.Ai\", \"CART\")  {\r\n    _mint(owner, preMineSupply);\r\n  }\r\n\r\n  function burn(uint amount) public {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function burnFrom(address account, uint amount) public {\r\n    _burnFrom(account, amount);\r\n  }\r\n\r\n  function send(address recipient, uint amount, bytes calldata exData) external returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n\r\n    if (recipient.isContract()) {\r\n      bool rv = TokenRecipient(recipient).tokensReceived(msg.sender, amount, exData);\r\n      require(rv, \"No TokenRecipient\");\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"exData\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Cart", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000199aa9e922aa2d2af79de99ac4c9b5727acde2c4", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2421eb18149d75816c4f0d8536026dbc22c416e4180e45e81f9ee6c3ca882cf0"}