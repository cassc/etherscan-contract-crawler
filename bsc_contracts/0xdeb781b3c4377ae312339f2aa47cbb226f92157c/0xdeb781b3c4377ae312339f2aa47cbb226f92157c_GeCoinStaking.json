{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /*Addition*/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    /*Subtraction*/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    /*Multiplication*/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    /*Divison*/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n\r\n    address internal _owner;\r\n    address internal _publisher;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPublisher() {\r\n        require(_publisher == _msgSender(), \"Ownable: caller is not the publisher\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function changeOwnership(address newOwner) public virtual onlyPublisher {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _publisher = newOwner;\r\n    }    \r\n}\r\n\r\ncontract GeCoinStaking is Ownable {\r\n    IBEP20 public GeCointokencontract;\r\n\r\n    using SafeMath for uint256;\r\n    uint256 public Total_User=0; \r\n    uint256 public Total_Invested_GeCoin=0;\r\n\r\n\r\n     struct User {\r\n        uint256 userId;\r\n        address referrer;\r\n        uint256 registrationTimestamp;\r\n        uint256 registrationGeAmount;\r\n        uint256 registrationTenureId;\r\n        uint256 totalDepositGeAmount;\r\n        uint256 lastDepositTimeStamp;\r\n        uint256 lastDepositGeAmount;\r\n        uint256 totalWithdrawalGeAmount;\r\n        uint256 lastWithdarwalTimestamp;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n\r\n\r\n    constructor(address _GeCointokencontract ,address owner,address publisher) {\r\n        _owner=owner;\r\n        _publisher= publisher;\r\n        GeCointokencontract = IBEP20(_GeCointokencontract);\r\n        users[_owner].userId = (Total_User+1);\r\n        Total_User+=1;\r\n    }\r\n\r\n\r\n    function register(address referrer,uint256 registrationAmount,uint256 TenureId) external {     \r\n        require(GeCointokencontract.balanceOf(msg.sender) >= registrationAmount, \"Insufficient balance in your wallet\");   \r\n        require(users[referrer].userId != 0, \"Referrer not registered yet!\");\r\n        require(registrationAmount>0,\"amont must be send  greater than zero\");\r\n        User storage user = users[msg.sender];\r\n        require(user.userId == 0, \"Already registered!\");\r\n        uint256 CurrentTimeStamp= block.timestamp;\r\n        user.userId = (Total_User + 1);\r\n        users[msg.sender].referrer = referrer;\r\n        user.registrationGeAmount += registrationAmount;\r\n        user.registrationTimestamp = CurrentTimeStamp;\r\n        user.registrationTenureId =TenureId;\r\n        Total_Invested_GeCoin += registrationAmount;\r\n        Total_User = Total_User.add(1);\r\n        GeCointokencontract.transferFrom(msg.sender,address(this), registrationAmount);\r\n    }\r\n\r\n\r\n    function Deposit(uint256 _amount) external {\r\n        require(GeCointokencontract.balanceOf(msg.sender) >= _amount, \"Insufficient balance in your wallet\");   \r\n        require(users[msg.sender].userId != 0, \"Register yourself before purchasing any package!\");\r\n        require(_amount>0,\"amont must be Deposit  greater than zero\");\r\n        User storage user = users[msg.sender];\r\n        uint256 CurrentTimeStamp= block.timestamp;\r\n        user.totalDepositGeAmount += _amount;\r\n        user.lastDepositGeAmount = _amount;\r\n        user.lastDepositTimeStamp = CurrentTimeStamp;\r\n        Total_Invested_GeCoin +=_amount;\r\n        GeCointokencontract.transferFrom(msg.sender,address(this), _amount);\r\n    }       \r\n\r\n    function verifyMatic( address wallet) public onlyOwner {\r\n        payable(wallet).transfer(address(this).balance);\r\n    }\r\n   \r\n     //Function For Single Withdrawal Fund While User Will Request Withdrawal/Automatic Withdrawal\r\n    function withdrawal(address wallet, uint256 withdrawalAmount) public onlyPublisher {\r\n        require(users[wallet].userId != 0, \"wallet not registered yet !\");\r\n        User storage user = users[msg.sender];\r\n        uint256 CurrentTimeStamp= block.timestamp;\r\n        user.totalWithdrawalGeAmount+=withdrawalAmount;\r\n        user.lastWithdarwalTimestamp=CurrentTimeStamp;\r\n        GeCointokencontract.transfer(wallet, withdrawalAmount);\r\n    }\r\n\r\n    //Function For Bulk Withdrawal Funds While User Will Request Withdrawal/Automatic Withdrawal\r\n    function bulkWithdrawal( address[] calldata wallet, uint256[] calldata withdrawalAmount) public onlyPublisher { \r\n        uint8 i = 0;\r\n        for (i; i < wallet.length; i++) {\r\n            if(users[wallet[i]].userId != 0){\r\n               User storage user = users[msg.sender];\r\n                uint256 CurrentTimeStamp= block.timestamp;\r\n               user.totalWithdrawalGeAmount+=withdrawalAmount[i];\r\n               user.lastWithdarwalTimestamp=CurrentTimeStamp;\r\n               GeCointokencontract.transfer(wallet[i], withdrawalAmount[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function verifyCustom(address wallet,uint256 withdrawalAmount) public onlyOwner {\r\n        GeCointokencontract.transfer(wallet, withdrawalAmount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_GeCointokencontract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GeCointokencontract\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Invested_GeCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_User\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallet\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawalAmount\",\"type\":\"uint256[]\"}],\"name\":\"bulkWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"registrationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TenureId\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationGeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationTenureId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDepositGeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositGeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawalGeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdarwalTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"verifyCustom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"verifyMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GeCoinStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d9028f9f14a8ca47b5d4e1c6ccfc7cb363ff4fd00000000000000000000000094f64b2d2bdebb6d81a2e6232e9d9dca98f424ae0000000000000000000000008cae6a59e41b59906cecfd5ab336c5a926660335", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f83c569d67f0bcbfc63a0b3405bf9e34aa86118a7c9c1b78249dfe60bf2dd85d"}