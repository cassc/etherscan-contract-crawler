{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ILnAsset is IERC20 {\\r\\n    function keyName() external view returns (bytes32);\\r\\n\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    function burn(address account, uint256 amount) external;\\r\\n\\r\\n    function move(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnAssetSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\ninterface ILnAssetSystem {\\r\\n    function perpAddresses(bytes32 symbol) external view returns (address);\\r\\n\\r\\n    function perpSymbols(address perpAddress) external view returns (bytes32);\\r\\n\\r\\n    function isPerpAddressRegistered(address perpAddress) external view returns (bool);\\r\\n\\r\\n    function totalAssetsInUsd() external view returns (uint256 rTotal);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\ninterface ILnConfig {\\r\\n    function BUILD_RATIO() external view returns (bytes32);\\r\\n\\r\\n    function getUint(bytes32 key) external view returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnPerpetual.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\ninterface ILnPerpetual {\\r\\n    function underlyingTokenSymbol() external view returns (bytes32);\\r\\n\\r\\n    function totalUsdDebt() external view returns (uint256);\\r\\n\\r\\n    function totalUnderlyingDebt() external view returns (uint256);\\r\\n\\r\\n    function openPosition(\\r\\n        address user,\\r\\n        bool isLong,\\r\\n        uint256 size,\\r\\n        uint256 collateral\\r\\n    ) external returns (uint256 positionId, uint256 underlyingPrice);\\r\\n\\r\\n    function increasePosition(\\r\\n        address user,\\r\\n        uint256 positionId,\\r\\n        uint256 size,\\r\\n        uint256 collateral\\r\\n    ) external returns (uint256 underlyingPrice);\\r\\n\\r\\n    function closePositionByAmount(\\r\\n        address user,\\r\\n        uint256 positionId,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256 underlyingPrice);\\r\\n\\r\\n    function closePosition(\\r\\n        address user,\\r\\n        uint256 positionId,\\r\\n        address to\\r\\n    ) external returns (uint256 underlyingPrice);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnPerpExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\ninterface ILnPerpExchange {\\r\\n    function insuranceFundHolder() external view returns (address);\\r\\n\\r\\n    function submitFees(uint256 positionId, uint256 amount) external;\\r\\n\\r\\n    function submitInsuranceFund(uint256 positionId, uint256 amount) external;\\r\\n\\r\\n    function requestPositionMint(address to) external returns (uint256 positionId);\\r\\n\\r\\n    function requestPositionBurn(uint256 positionId) external;\\r\\n\\r\\n    function requestAssetMint(\\r\\n        address asset,\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function requestAssetBurn(\\r\\n        address asset,\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnPerpPositionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\n\\r\\ninterface ILnPerpPositionToken is IERC721Upgradeable {\\r\\n    function positionExists(address perpAddress, uint256 positionId) external view returns (bool);\\r\\n\\r\\n    function mint(address perpAddress, address to) external returns (uint256 tokenId);\\r\\n\\r\\n    function burn(uint256 tokenId) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/LnPerpExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\";\\r\\nimport \\\"./interfaces/ILnAsset.sol\\\";\\r\\nimport \\\"./interfaces/ILnAssetSystem.sol\\\";\\r\\nimport \\\"./interfaces/ILnConfig.sol\\\";\\r\\nimport \\\"./interfaces/ILnPerpetual.sol\\\";\\r\\nimport \\\"./interfaces/ILnPerpExchange.sol\\\";\\r\\nimport \\\"./interfaces/ILnPerpPositionToken.sol\\\";\\r\\n\\r\\ncontract LnPerpExchange is ILnPerpExchange, OwnableUpgradeable {\\r\\n    using SafeCastUpgradeable for uint256;\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    event OpenPositionActionQueued(\\r\\n        uint256 actionId,\\r\\n        address user,\\r\\n        bytes32 underlying,\\r\\n        bool isLong,\\r\\n        uint256 size,\\r\\n        uint256 collateral\\r\\n    );\\r\\n    event IncreasePositionActionQueued(\\r\\n        uint256 actionId,\\r\\n        address user,\\r\\n        bytes32 underlying,\\r\\n        uint256 positionId,\\r\\n        uint256 size,\\r\\n        uint256 collateral\\r\\n    );\\r\\n    event ClosePositionActionQueued(\\r\\n        uint256 actionId,\\r\\n        address user,\\r\\n        bytes32 underlying,\\r\\n        uint256 positionId,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    );\\r\\n    event ActionSettled(uint256 actionId, uint256 underlyingPrice);\\r\\n    event ActionReverted(uint256 actionId);\\r\\n    event PoolFeeHolderChanged(address newPoolFeeHolder);\\r\\n    event FoundationFeeHolderChanged(address newFoundationFeeHolder);\\r\\n    event FeesCharged(uint256 positionId, uint256 feeForPool, uint256 feeForFoundation);\\r\\n    event InsuranceFundContribution(uint256 positionId, uint256 amount);\\r\\n\\r\\n    struct PendingActionMeta {\\r\\n        uint64 timestamp;\\r\\n        address user;\\r\\n        uint8 actionType;\\r\\n    }\\r\\n    struct OpenPositionActionData {\\r\\n        bytes32 underlying;\\r\\n        bool isLong;\\r\\n        uint256 size;\\r\\n        uint256 collateral;\\r\\n    }\\r\\n    struct IncreasePositionActionData {\\r\\n        bytes32 underlying;\\r\\n        uint256 positionId;\\r\\n        uint256 size;\\r\\n        uint256 collateral;\\r\\n    }\\r\\n    struct ClosePositionActionData {\\r\\n        bytes32 underlying;\\r\\n        uint256 positionId;\\r\\n        uint256 amount;\\r\\n        address to;\\r\\n    }\\r\\n\\r\\n    ILnAssetSystem public lnAssetSystem;\\r\\n    ILnConfig public lnConfig;\\r\\n    ILnPerpPositionToken public positionToken;\\r\\n    ILnAsset public lusdToken;\\r\\n    address public override insuranceFundHolder;\\r\\n    address public poolFeeHolder;\\r\\n    address public foundationFeeHolder;\\r\\n\\r\\n    uint256 public lastPendingActionId;\\r\\n    mapping(uint256 => PendingActionMeta) public pendingActionMetas;\\r\\n    mapping(uint256 => OpenPositionActionData) public openPositionActions;\\r\\n    mapping(uint256 => IncreasePositionActionData) public increasePositionActions;\\r\\n    mapping(uint256 => ClosePositionActionData) public closePositionActions;\\r\\n\\r\\n    uint8 public constant ACTION_TYPE_OPEN_POSITION = 1;\\r\\n    uint8 public constant ACTION_TYPE_INCREASE_POSITION = 2;\\r\\n    uint8 public constant ACTION_TYPE_CLOSE_POSITION = 3;\\r\\n\\r\\n    uint256 private constant UNIT = 10**18;\\r\\n    bytes32 private constant CONFIG_TRADE_SETTLEMENT_DELAY = \\\"TradeSettlementDelay\\\";\\r\\n    bytes32 private constant CONFIG_TRADE_REVERT_DELAY = \\\"TradeRevertDelay\\\";\\r\\n    bytes32 private constant CONFIG_FEE_SPLIT = \\\"FoundationFeeSplit\\\";\\r\\n\\r\\n    function __LnPerpExchange_init(\\r\\n        ILnAssetSystem _lnAssetSystem,\\r\\n        ILnConfig _lnConfig,\\r\\n        ILnPerpPositionToken _positionToken,\\r\\n        ILnAsset _lusdToken,\\r\\n        address _insuranceFundHolder\\r\\n    ) public initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        require(address(_lnAssetSystem) != address(0), \\\"LnPerpExchange: zero address\\\");\\r\\n        require(address(_lnConfig) != address(0), \\\"LnPerpExchange: zero address\\\");\\r\\n        require(address(_positionToken) != address(0), \\\"LnPerpExchange: zero address\\\");\\r\\n        require(address(_lusdToken) != address(0), \\\"LnPerpExchange: zero address\\\");\\r\\n\\r\\n        lnAssetSystem = _lnAssetSystem;\\r\\n        lnConfig = _lnConfig;\\r\\n        positionToken = _positionToken;\\r\\n        lusdToken = _lusdToken;\\r\\n        insuranceFundHolder = _insuranceFundHolder;\\r\\n    }\\r\\n\\r\\n    function setPoolFeeHolder(address newPoolFeeHolder) external onlyOwner {\\r\\n        poolFeeHolder = newPoolFeeHolder;\\r\\n\\r\\n        emit PoolFeeHolderChanged(newPoolFeeHolder);\\r\\n    }\\r\\n\\r\\n    function setFoundationFeeHolder(address newFoundationFeeHolder) external onlyOwner {\\r\\n        foundationFeeHolder = newFoundationFeeHolder;\\r\\n\\r\\n        emit FoundationFeeHolderChanged(newFoundationFeeHolder);\\r\\n    }\\r\\n\\r\\n    function SetLusdTokenAddress(address _address) external onlyOwner {\\r\\n        _setLusdTokenAddress(_address);\\r\\n    }  \\r\\n    \\r\\n    function openPosition(\\r\\n        bytes32 underlying,\\r\\n        bool isLong,\\r\\n        uint256 size,\\r\\n        uint256 collateral\\r\\n    ) external {\\r\\n        // TODO: perform basic argument validation\\r\\n\\r\\n        // Lock up user's lUSD until settlement\\r\\n        lusdToken.transferFrom(msg.sender, address(this), collateral);\\r\\n\\r\\n        uint256 actionId = _queueActionMeta(msg.sender, ACTION_TYPE_OPEN_POSITION);\\r\\n        openPositionActions[actionId] = OpenPositionActionData({\\r\\n            underlying: underlying,\\r\\n            isLong: isLong,\\r\\n            size: size,\\r\\n            collateral: collateral\\r\\n        });\\r\\n\\r\\n        emit OpenPositionActionQueued(actionId, msg.sender, underlying, isLong, size, collateral);\\r\\n    }\\r\\n\\r\\n    function increasePosition(\\r\\n        bytes32 underlying,\\r\\n        uint256 positionId,\\r\\n        uint256 size,\\r\\n        uint256 collateral\\r\\n    ) external {\\r\\n        // TODO: perform basic argument validation\\r\\n        _assertPositionExists(underlying, positionId);\\r\\n\\r\\n        // Lock up user's lUSD until settlement\\r\\n        lusdToken.transferFrom(msg.sender, address(this), collateral);\\r\\n\\r\\n        uint256 actionId = _queueActionMeta(msg.sender, ACTION_TYPE_INCREASE_POSITION);\\r\\n        increasePositionActions[actionId] = IncreasePositionActionData({\\r\\n            underlying: underlying,\\r\\n            positionId: positionId,\\r\\n            size: size,\\r\\n            collateral: collateral\\r\\n        });\\r\\n\\r\\n        emit IncreasePositionActionQueued(actionId, msg.sender, underlying, positionId, size, collateral);\\r\\n    }\\r\\n\\r\\n    function closePositionByAmount(\\r\\n        bytes32 underlying,\\r\\n        uint256 positionId,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external {\\r\\n        // TODO: perform basic argument validation\\r\\n        require(amount > 0, \\\"LnPerpExchange: zero amount\\\");\\r\\n        _assertPositionExists(underlying, positionId);\\r\\n\\r\\n        uint256 actionId = _queueActionMeta(msg.sender, ACTION_TYPE_CLOSE_POSITION);\\r\\n        closePositionActions[actionId] = ClosePositionActionData({\\r\\n            underlying: underlying,\\r\\n            positionId: positionId,\\r\\n            amount: amount,\\r\\n            to: to\\r\\n        });\\r\\n\\r\\n        emit ClosePositionActionQueued(actionId, msg.sender, underlying, positionId, amount, to);\\r\\n    }\\r\\n\\r\\n    function closePosition(\\r\\n        bytes32 underlying,\\r\\n        uint256 positionId,\\r\\n        address to\\r\\n    ) external {\\r\\n        // TODO: perform basic argument validation\\r\\n        _assertPositionExists(underlying, positionId);\\r\\n\\r\\n        uint256 actionId = _queueActionMeta(msg.sender, ACTION_TYPE_CLOSE_POSITION);\\r\\n        closePositionActions[actionId] = ClosePositionActionData({\\r\\n            underlying: underlying,\\r\\n            positionId: positionId,\\r\\n            amount: 0,\\r\\n            to: to\\r\\n        });\\r\\n\\r\\n        emit ClosePositionActionQueued(actionId, msg.sender, underlying, positionId, 0, to);\\r\\n    }\\r\\n\\r\\n    function settleAction(uint256 pendingActionId) external {\\r\\n        PendingActionMeta memory actionMeta = pendingActionMetas[pendingActionId];\\r\\n        require(actionMeta.actionType > 0, \\\"LnPerpExchange: pending action not found\\\");\\r\\n\\r\\n        // Assert settlement delay\\r\\n        uint settlementDelay = lnConfig.getUint(CONFIG_TRADE_SETTLEMENT_DELAY);\\r\\n        uint256 revertDelay = lnConfig.getUint(CONFIG_TRADE_REVERT_DELAY);\\r\\n        require(settlementDelay > 0, \\\"LnPerpExchange: settlement delay not set\\\");\\r\\n        require(revertDelay > 0, \\\"LnPerpExchange: revert delay not set\\\");\\r\\n        require(block.timestamp >= actionMeta.timestamp + settlementDelay, \\\"LnPerpExchange: settlement delay not passed\\\");\\r\\n        require(block.timestamp <= actionMeta.timestamp + revertDelay, \\\"LnPerpExchange: action can only be reverted now\\\");\\r\\n\\r\\n        uint256 underlyingPrice;\\r\\n\\r\\n        if (actionMeta.actionType == ACTION_TYPE_OPEN_POSITION) {\\r\\n            OpenPositionActionData memory data = openPositionActions[pendingActionId];\\r\\n\\r\\n            ILnPerpetual perpContract = _getPerpContract(data.underlying);\\r\\n            lusdToken.approve(address(perpContract), data.collateral);\\r\\n            (, underlyingPrice) = perpContract.openPosition(actionMeta.user, data.isLong, data.size, data.collateral);\\r\\n        } else if (actionMeta.actionType == ACTION_TYPE_INCREASE_POSITION) {\\r\\n            IncreasePositionActionData memory data = increasePositionActions[pendingActionId];\\r\\n\\r\\n            ILnPerpetual perpContract = _getPerpContract(data.underlying);\\r\\n            lusdToken.approve(address(perpContract), data.collateral);\\r\\n            underlyingPrice = perpContract.increasePosition(actionMeta.user, data.positionId, data.size, data.collateral);\\r\\n        } else if (actionMeta.actionType == ACTION_TYPE_CLOSE_POSITION) {\\r\\n            ClosePositionActionData memory data = closePositionActions[pendingActionId];\\r\\n\\r\\n            if (data.amount > 0) {\\r\\n                underlyingPrice = _getPerpContract(data.underlying).closePositionByAmount(\\r\\n                    actionMeta.user,\\r\\n                    data.positionId,\\r\\n                    data.amount,\\r\\n                    data.to\\r\\n                );\\r\\n            } else {\\r\\n                underlyingPrice = _getPerpContract(data.underlying).closePosition(actionMeta.user, data.positionId, data.to);\\r\\n            }\\r\\n        } else {\\r\\n            require(false, \\\"LnPerpExchange: unknown action type\\\");\\r\\n        }\\r\\n\\r\\n        // Remove action data from storage\\r\\n        _removeActionData(pendingActionId, actionMeta.actionType);\\r\\n\\r\\n        emit ActionSettled(pendingActionId, underlyingPrice);\\r\\n    }\\r\\n\\r\\n    function revertAction(uint256 pendingActionId) external {\\r\\n        PendingActionMeta memory actionMeta = pendingActionMetas[pendingActionId];\\r\\n        require(actionMeta.actionType > 0, \\\"LnPerpExchange: pending action not found\\\");\\r\\n\\r\\n        // Assert revert delay\\r\\n        uint256 revertDelay = lnConfig.getUint(CONFIG_TRADE_REVERT_DELAY);\\r\\n        require(revertDelay > 0, \\\"LnPerpExchange: revert delay not set\\\");\\r\\n        require(block.timestamp > actionMeta.timestamp + revertDelay, \\\"LnPerpExchange: revert delay not passed\\\");\\r\\n\\r\\n        // Refund collateral taken\\r\\n        if (actionMeta.actionType == ACTION_TYPE_OPEN_POSITION) {\\r\\n            lusdToken.transfer(actionMeta.user, openPositionActions[pendingActionId].collateral);\\r\\n        } else if (actionMeta.actionType == ACTION_TYPE_INCREASE_POSITION) {\\r\\n            lusdToken.transfer(actionMeta.user, increasePositionActions[pendingActionId].collateral);\\r\\n        }\\r\\n\\r\\n        // Remove action data from storage\\r\\n        _removeActionData(pendingActionId, actionMeta.actionType);\\r\\n\\r\\n        emit ActionReverted(pendingActionId);\\r\\n    }\\r\\n\\r\\n    function submitFees(uint256 positionId, uint256 amount) external override {\\r\\n        require(poolFeeHolder != address(0), \\\"LnPerpExchange: fee pool not set\\\");\\r\\n\\r\\n        lusdToken.transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        uint256 foundationSplit;\\r\\n        if (foundationFeeHolder == address(0)) {\\r\\n            foundationSplit = 0;\\r\\n        } else {\\r\\n            uint256 splitRatio = lnConfig.getUint(CONFIG_FEE_SPLIT);\\r\\n\\r\\n            if (splitRatio == 0) {\\r\\n                foundationSplit = 0;\\r\\n            } else {\\r\\n                foundationSplit = amount.mul(splitRatio).div(UNIT);\\r\\n                amount = amount.sub(foundationSplit);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (amount > 0) {\\r\\n            lusdToken.transfer(poolFeeHolder, amount);\\r\\n        }\\r\\n        if (foundationSplit > 0) {\\r\\n            lusdToken.transfer(foundationFeeHolder, foundationSplit);\\r\\n        }\\r\\n\\r\\n        emit FeesCharged(positionId, amount, foundationSplit);\\r\\n    }\\r\\n\\r\\n    function submitInsuranceFund(uint256 positionId, uint256 amount) external override {\\r\\n        lusdToken.transferFrom(msg.sender, insuranceFundHolder, amount);\\r\\n        emit InsuranceFundContribution(positionId, amount);\\r\\n    }\\r\\n\\r\\n    function requestPositionMint(address to) external override returns (uint256 positionId) {\\r\\n        _assertRegisteredPerp(msg.sender);\\r\\n        positionId = positionToken.mint(msg.sender, to);\\r\\n    }\\r\\n\\r\\n    function requestPositionBurn(uint256 positionId) external override {\\r\\n        _assertRegisteredPerp(msg.sender);\\r\\n        positionToken.burn(positionId);\\r\\n    }\\r\\n\\r\\n    function requestAssetMint(\\r\\n        address asset,\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external override {\\r\\n        _assertRegisteredPerp(msg.sender);\\r\\n        ILnAsset(asset).mint(account, amount);\\r\\n    }\\r\\n\\r\\n    function requestAssetBurn(\\r\\n        address asset,\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external override {\\r\\n        _assertRegisteredPerp(msg.sender);\\r\\n        ILnAsset(asset).burn(account, amount);\\r\\n    }\\r\\n\\r\\n    function _queueActionMeta(address user, uint8 actionType) private returns (uint256 actionId) {\\r\\n        actionId = ++lastPendingActionId;\\r\\n        pendingActionMetas[actionId] = PendingActionMeta({\\r\\n            timestamp: block.timestamp.toUint64(),\\r\\n            user: user,\\r\\n            actionType: actionType\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function _setLusdTokenAddress(address _lusdAddress) private {        \\r\\n        require(_lusdAddress != address(0), \\\"IERC20Upgradeable: zero address\\\");\\r\\n        require(_lusdAddress != address(lusdToken), \\\"IERC20Upgradeable: address not changed\\\");\\r\\n        address oldAddress = address(lusdToken); \\r\\n        lusdToken = ILnAsset(_lusdAddress);        \\r\\n    }\\r\\n\\r\\n    function _getPerpContract(bytes32 symbol) private view returns (ILnPerpetual) {\\r\\n        address perpAddress = lnAssetSystem.perpAddresses(symbol);\\r\\n        require(perpAddress != address(0), \\\"LnPerpExchange: perp address not found\\\");\\r\\n\\r\\n        return ILnPerpetual(perpAddress);\\r\\n    }\\r\\n\\r\\n    function _assertRegisteredPerp(address perpAddress) private view {\\r\\n        require(lnAssetSystem.isPerpAddressRegistered(perpAddress), \\\"LnPerpExchange: perp address not registered\\\");\\r\\n    }\\r\\n\\r\\n    function _assertPositionExists(bytes32 symbol, uint256 positionId) private view {\\r\\n        require(\\r\\n            positionToken.positionExists(address(_getPerpContract(symbol)), positionId),\\r\\n            \\\"LnPerpExchange: position not found\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _removeActionData(uint256 actionId, uint8 actionType) private {\\r\\n        delete pendingActionMetas[actionId];\\r\\n        if (actionType == ACTION_TYPE_OPEN_POSITION) {\\r\\n            delete openPositionActions[actionId];\\r\\n        } else if (actionType == ACTION_TYPE_INCREASE_POSITION) {\\r\\n            delete increasePositionActions[actionId];\\r\\n        } else if (actionType == ACTION_TYPE_CLOSE_POSITION) {\\r\\n            delete closePositionActions[actionId];\\r\\n        } else {\\r\\n            require(false, \\\"LnPerpExchange: unknown action type\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"ActionReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"name\":\"ActionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClosePositionActionQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeForPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeForFoundation\",\"type\":\"uint256\"}],\"name\":\"FeesCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFoundationFeeHolder\",\"type\":\"address\"}],\"name\":\"FoundationFeeHolderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"IncreasePositionActionQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsuranceFundContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"OpenPositionActionQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPoolFeeHolder\",\"type\":\"address\"}],\"name\":\"PoolFeeHolderChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTION_TYPE_CLOSE_POSITION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ACTION_TYPE_INCREASE_POSITION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ACTION_TYPE_OPEN_POSITION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetLusdTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILnAssetSystem\",\"name\":\"_lnAssetSystem\",\"type\":\"address\"},{\"internalType\":\"contract ILnConfig\",\"name\":\"_lnConfig\",\"type\":\"address\"},{\"internalType\":\"contract ILnPerpPositionToken\",\"name\":\"_positionToken\",\"type\":\"address\"},{\"internalType\":\"contract ILnAsset\",\"name\":\"_lusdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_insuranceFundHolder\",\"type\":\"address\"}],\"name\":\"__LnPerpExchange_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"closePositionActions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"closePositionByAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationFeeHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"increasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increasePositionActions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPendingActionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lnAssetSystem\",\"outputs\":[{\"internalType\":\"contract ILnAssetSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lnConfig\",\"outputs\":[{\"internalType\":\"contract ILnConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lusdToken\",\"outputs\":[{\"internalType\":\"contract ILnAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"openPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openPositionActions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingActionMetas\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"actionType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFeeHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionToken\",\"outputs\":[{\"internalType\":\"contract ILnPerpPositionToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestAssetBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestAssetMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"requestPositionBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"requestPositionMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingActionId\",\"type\":\"uint256\"}],\"name\":\"revertAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFoundationFeeHolder\",\"type\":\"address\"}],\"name\":\"setFoundationFeeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPoolFeeHolder\",\"type\":\"address\"}],\"name\":\"setPoolFeeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingActionId\",\"type\":\"uint256\"}],\"name\":\"settleAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"submitFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"submitInsuranceFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LnPerpExchange", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}