{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-07-29\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor () internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StakeContract is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    event Stake(address _account, uint256 _amount, uint256 _id);\r\n    event Unstake(address _account, uint256[] _indexes);\r\n    event DepositProfit(address _bep20, uint256 _amount, address[] _users, uint256[] _bagIndexs);\r\n    event OwnerStake(uint256 _totalAmount);\r\n    event OwnerCompensateRewards(address _bep20, uint256 _totalAmount);\r\n\r\n    struct Bag {\r\n        uint256 start;\r\n        uint256 amount;\r\n        mapping(address => uint256) userBalance; // asset => balance\r\n    }\r\n\r\n    struct Package {\r\n        uint256[] bagLength;\r\n        mapping(uint256 => Bag) bags;\r\n    }\r\n\r\n    mapping(address => Package) private packages;\r\n\r\n    IBEP20 public bep20 = IBEP20(0x23d91ECd922Ac08aA6B585035E55DaD551a25866);\r\n    address public takeBep20 = 0x3303003A792386c0528020008F7b2eA3C97A21Ed;\r\n    uint256 public stakeTime = 1209600; // 14 days\r\n    uint256 public minStake = 1000 ether;\r\n    uint256 public panaltyPercent = 10;\r\n    uint256 public stakeFeePercent = 1;\r\n    uint256 public percentDecimal = 6; // % two places after the decimal separator    \r\n    address[] public bep20Profit = [0xE2Ba84CE48A79108D7D3639f35bAe385d264a6cE,0x72c92db6be41c860bfe91D9fB3533337fCbe1B02,0xC41cC47E102Ef23552f0548821a95890d983Cb13,0xE8b198305291D7E0F67B36fb7423e0E1fEeAc1ef,0x325046246bCbF51cADEdd3E71453A2BDe6d004E6];\r\n    \r\n    modifier notContract() {\r\n        address account = _msgSender();\r\n        require(!(account).isContract(), \"Contract not allowed\");\r\n        require(account == tx.origin, \"Contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    function() payable external{}\r\n\r\n    function _stake(address _account, uint256 _id, uint256 _amount, uint256 _time) private {\r\n      require(packages[_account].bags[_id].amount == 0, \"Stake: Already exist\");\r\n      packages[_account].bags[_id] = Bag(_time, _amount);\r\n      packages[_account].bagLength.push(_id);\r\n      emit Stake(_account, _amount, _id);\r\n    }\r\n\r\n    function stake(uint256 _id, uint256 _amount) external notContract nonReentrant {\r\n      require(_amount >= minStake, \"Stake: Amount less than min stake\");\r\n      require(bep20.transferFrom(msg.sender, address(this), _amount), \"Stake: Insufficient-allowance\");\r\n      _stake(msg.sender, _id, _amount, block.timestamp);\r\n    }\r\n\r\n    function ownerStake(address[] calldata _accounts, uint256[] calldata _ids, uint256[] calldata _amounts) external onlyOwner {\r\n      uint256 length = _accounts.length;\r\n      require(length == _ids.length && length == _amounts.length, \"Stake: Length mismatch\");\r\n      uint256 totalAmount = 0;\r\n      for(uint256 i = 0; i < length; i++) {\r\n        require(packages[_accounts[i]].bags[_ids[i]].amount == 0, \"Stake: Already exist\");\r\n        packages[_accounts[i]].bags[_ids[i]] = Bag(_ids[i], _amounts[i]);\r\n        packages[_accounts[i]].bagLength.push(_ids[i]);\r\n        totalAmount = totalAmount.add(_amounts[i]);\r\n      }\r\n      emit OwnerStake(totalAmount);\r\n    }\r\n\r\n    function _removeBagIndex(uint256 _bagLengthIndex) private {\r\n        packages[msg.sender].bags[packages[msg.sender].bagLength[_bagLengthIndex]] = Bag(0, 0);\r\n        packages[msg.sender].bagLength[_bagLengthIndex] = packages[msg.sender].bagLength[packages[msg.sender].bagLength.length - 1];\r\n        packages[msg.sender].bagLength.length--;\r\n    }\r\n\r\n    function _refundReward(uint256 index) private {\r\n      uint256 bnbBalance = packages[_msgSender()].bags[index].userBalance[address(0)];\r\n      if(bnbBalance > 0) msg.sender.transfer(bnbBalance);\r\n      for(uint256 i = 0; i < bep20Profit.length; i++) {\r\n        uint256 bep20pfBalance = packages[_msgSender()].bags[index].userBalance[bep20Profit[i]];\r\n        if(bep20pfBalance > 0) {\r\n          IBEP20 bep20pf = IBEP20(bep20Profit[i]);\r\n          bep20pf.transfer(msg.sender, bep20pfBalance);\r\n        }\r\n      }\r\n    }\r\n    \r\n    function _refundToken(uint256 index) private {\r\n      address account = _msgSender();\r\n      require(packages[account].bags[index].amount > 0, \"Stake: index is not exist\");\r\n      uint256 stakeStart = packages[account].bags[index].start;\r\n      uint256 stakeAmount = packages[account].bags[index].amount;\r\n      uint256 percent = block.timestamp.sub(stakeStart) < stakeTime ? panaltyPercent : stakeFeePercent;\r\n      uint256 fee = stakeAmount.mul(percent).div(100);\r\n      bep20.transfer(takeBep20, fee);\r\n      bep20.transfer(account, stakeAmount.sub(fee));\r\n    }\r\n\r\n    function unstake(uint256 _bagLengthIndex) external notContract nonReentrant {\r\n        address account = _msgSender();\r\n        uint256[] memory indexes = new uint256[](1);\r\n        uint256 index = packages[account].bagLength[_bagLengthIndex];\r\n        indexes[0] = index;\r\n        _refundToken(index);\r\n        _refundReward(index);\r\n        _removeBagIndex(_bagLengthIndex);\r\n        emit Unstake(account, indexes);\r\n    }\r\n    \r\n    function unstakes(uint256[] memory indexs) public notContract nonReentrant {\r\n      address account = _msgSender();\r\n      uint256 length = indexs.length;\r\n      uint256[] memory indexes = new uint256[](length);\r\n\r\n      for(uint256 i = 0; i < length; i++) {\r\n          uint256 index = packages[account].bagLength[indexs[i]];\r\n          indexes[i] = index;\r\n          _refundToken(index);\r\n          _refundReward(index);\r\n          packages[account].bags[index] = Bag(0, 0);\r\n          packages[account].bagLength[indexs[i]] = packages[account].bagLength[packages[account].bagLength.length - (i+1)];\r\n      }\r\n      packages[account].bagLength.length = packages[account].bagLength.length.sub(length);\r\n      emit Unstake(account, indexes);\r\n    }\r\n\r\n    function _updateBalance(uint256[] memory _amounts, address[] memory _users, address _asset, uint256[] memory _bagIndexs) private returns (uint256){\r\n        uint256 length = _users.length;\r\n        uint256 amount = 0;\r\n        for(uint256 i = 0; i < length; i++) {\r\n            packages[_users[i]].bags[_bagIndexs[i]].userBalance[_asset] = packages[_users[i]].bags[_bagIndexs[i]].userBalance[_asset].add(_amounts[i]);\r\n            amount = amount.add(_amounts[i]);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function depositProfit(uint256[] memory _amounts, address[] memory _users, uint256[] memory _bagIndexs) public payable onlyOwner {\r\n      require(_amounts.length == _users.length && _amounts.length == _bagIndexs.length && _amounts.length > 0, \"Stake: Length mismatch\");\r\n      uint256 _amount = _updateBalance(_amounts, _users, address(0), _bagIndexs);\r\n      require(msg.value >= _amount, \"Stake: insufficient-allowance\");\r\n      emit DepositProfit(address(0), _amount, _users, _bagIndexs);\r\n    }\r\n\r\n    function depositProfitBep20(address _bep20pf, uint256[] memory _amounts, address[] memory _users, uint256[] memory _bagIndexs) public onlyOwner {\r\n      require(_amounts.length == _users.length && _amounts.length == _bagIndexs.length && _amounts.length > 0, \"Stake: Length mismatch\");\r\n\r\n      uint256 _amount = _updateBalance(_amounts, _users, _bep20pf, _bagIndexs);\r\n      require(IBEP20(_bep20pf).transferFrom(msg.sender, address(this), _amount), \"Stake: insufficient-allowance\");\r\n      bool existed;\r\n      for(uint256 i = 0; i < bep20Profit.length; i++) {\r\n          if(bep20Profit[i] == _bep20pf) {\r\n            existed = true;\r\n            break;\r\n          }\r\n      }\r\n      if(!existed) bep20Profit.push(_bep20pf);\r\n      emit DepositProfit(_bep20pf, _amount, _users, _bagIndexs);\r\n    }\r\n\r\n    function compensateRewards(address _bep20pf, uint256[] memory _amounts, address[] memory _users, uint256[] memory _bagIndexs) public onlyOwner {\r\n      uint256 _amount = _updateBalance(_amounts, _users, _bep20pf, _bagIndexs);\r\n      emit OwnerCompensateRewards(_bep20pf, _amount);\r\n    }\r\n\r\n    function getOccupancy(uint256 _stakeAmount) external view returns (uint256) {\r\n        uint256 bep20Balance = getRemainingToken(bep20);\r\n        if(bep20Balance == 0) return 0;\r\n        return _stakeAmount.mul(10 ** percentDecimal).div(bep20Balance);\r\n    }\r\n\r\n    function getBep20Profit() public view returns(address[] memory) {\r\n        return bep20Profit;\r\n    }\r\n\r\n    function getStake(address _guy) public view returns(uint256[] memory bagLength) {\r\n        bagLength = packages[_guy].bagLength; \r\n    }\r\n\r\n    function getStake(address _guy, uint256 _index) public view returns(uint256 start, uint256 amount) {\r\n        return (packages[_guy].bags[_index].start, packages[_guy].bags[_index].amount); \r\n    }\r\n\r\n    function getStakeReward(address _guy, uint256 _index, address _asset) public view returns(uint256 reward) {\r\n        return packages[_guy].bags[_index].userBalance[_asset];\r\n    }\r\n\r\n    function config(uint256 _stakeTime, uint256 _minStake, address _takeBep20,  uint256 _percentDecimal, uint256 _panaltyPercent, uint256 _stakeFeePercent) public onlyOwner {\r\n        stakeTime = _stakeTime;\r\n        minStake = _minStake;\r\n        takeBep20 = _takeBep20;\r\n        percentDecimal = _percentDecimal;\r\n        panaltyPercent = _panaltyPercent;\r\n        stakeFeePercent = _stakeFeePercent;\r\n    }\r\n\r\n    function getRemainingToken(IBEP20 _token) public view returns (uint256) {\r\n        return _token.balanceOf(address(this));\r\n    }\r\n\r\n    function withdrawBEP20(address _to, IBEP20 _bep20, uint256 _amount) external onlyOwner {\r\n        _bep20.transfer(_to, _amount);\r\n    }\r\n\r\n    function withdraw(address payable _to, uint256 _amount) external onlyOwner {\r\n        _to.transfer(_amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bep20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_bagIndexs\",\"type\":\"uint256[]\"}],\"name\":\"DepositProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bep20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"OwnerCompensateRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"OwnerStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"bep20\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bep20Profit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bep20pf\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bagIndexs\",\"type\":\"uint256[]\"}],\"name\":\"compensateRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_takeBep20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_panaltyPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFeePercent\",\"type\":\"uint256\"}],\"name\":\"config\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bagIndexs\",\"type\":\"uint256[]\"}],\"name\":\"depositProfit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bep20pf\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bagIndexs\",\"type\":\"uint256[]\"}],\"name\":\"depositProfitBep20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBep20Profit\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"getOccupancy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRemainingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bagLength\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"ownerStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"panaltyPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"takeBep20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bagLengthIndex\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexs\",\"type\":\"uint256[]\"}],\"name\":\"unstakes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_bep20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBEP20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakeContract", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://edcdd1ce8efab96e834eeb7504ee84e7f606975bc3c458534c962265395e810e"}