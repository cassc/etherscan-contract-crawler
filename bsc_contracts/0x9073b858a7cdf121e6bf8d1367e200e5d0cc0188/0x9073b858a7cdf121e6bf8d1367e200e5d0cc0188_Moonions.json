{"SourceCode": "pragma solidity 0.8.10;\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint256);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     * bokdatawow!\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Moonions is Ownable, IERC20 { \r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    mapping (address => bool) public isGrantedConfigAccess;\r\n    mapping (address => bool) public isExcludedFromFee; \r\n    mapping (address => bool) public isBlacklisted;\r\n    mapping (address => bool) public isLimitExempt;\r\n    mapping (address => bool) public isExcluded; \r\n    mapping (address => bool) public isPair;\r\n\r\n    bool public isTradingActive = false; \r\n\r\n    address payable public constant Wallet_Burn = payable(0x000000000000000000000000000000000000dEaD); \r\n    address payable public Wallet_Marketing = payable(0x000000000000000000000000000000000000dEaD);      \r\n    address payable public Wallet_LP = payable(0x000000000000000000000000000000000000dEaD);         \r\n\r\n    uint256 public FeeBuy = 3;  \r\n    uint256 public FeeSell = 5;  \r\n    uint256 public FeeP2P = 0;  \r\n\r\n    uint256 public ReflectBuy = 1;\r\n    uint256 public ReflectSell = 1;  \r\n    uint256 public ReflectP2P = 0;\r\n    \r\n    uint256 public maxWallet; \r\n    uint256 public maxTransaction;  \r\n\r\n    uint256 public minSwapLiquidity; \r\n    uint256 public maxSwapLiquidity; \r\n\r\n    uint256 public immutable boughtEarlyIndicator; \r\n    uint256 public immutable boughtEarlySellCooldown; \r\n    uint256 public boughtEarlyThreshold;\r\n\r\n    mapping(address => bool) public boughtEarly;\r\n    mapping(address => uint256) public boughtEarlyAt;\r\n\r\n    bool public inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true; \r\n\r\n    uint256 public swapTrigger = 10; \r\n    uint256 public txCount = 1;\r\n\r\n    uint256 internal tReflect; \r\n    uint256 internal rReflect; \r\n\r\n    uint256 internal tFees; \r\n    uint256 internal rFees; \r\n\r\n    uint256 internal rAmount; \r\n    uint256 internal tTransferAmount; \r\n    uint256 internal rTransferAmount; \r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    string private constant _name = \"MOONIONS\"; \r\n    string private constant _symbol = \"MOONION\";  \r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _decimals = 18;\r\n    uint256 private _tTotal = 2000000000000 ether;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    uint256 private percentLP = 70;\r\n    address[] private _excluded; \r\n    \r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event LimitExempted(\r\n        address account, \r\n        bool isExempt\r\n    );\r\n\r\n    event AccessGranted(\r\n        address account, \r\n        bool isGrantedAccess\r\n    );\r\n\r\n    event PairConfigured(\r\n        address account, \r\n        bool isConfigured\r\n    );\r\n\r\n    event ExcludedFromFee(\r\n        address account, \r\n        bool isExcludedFromFee\r\n    );\r\n\r\n    event Blacklisted(\r\n        address account, \r\n        bool isBlacklisted);\r\n\r\n    event ExcludedFromRewards(address account);\r\n    event IncludedForRewards(address account);\r\n\r\n    event FeesUpdated(\r\n        uint256 FeeBuy, \r\n        uint256 FeeSell, \r\n        uint256 FeeP2P, \r\n        uint256 ReflectBuy, \r\n        uint256 ReflectSell, \r\n        uint256 ReflectP2P\r\n    );\r\n\r\n    event LimitsUpdated(\r\n        uint256 newWalletLimit, \r\n        uint256 newTxLimit\r\n    );\r\n\r\n    event MarketingWalletUpdated(\r\n        address indexed oldWallet, \r\n        address indexed newWallet\r\n    );\r\n\r\n    event LPWalletUpdated(\r\n        address indexed oldWallet, \r\n        address indexed newWallet\r\n    );\r\n\r\n    event BoughtEarly(address indexed account);\r\n    event SwapAndLiquifyEnabledUpdated(bool isEnabled);\r\n    event TriggerLimitsUpdated(uint256 newTriggerMinimum, uint256 newTriggerMax);    \r\n    event TradingActive(bool isOpen);\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor () {\r\n\r\n        _rOwned[owner()] = _rTotal;\r\n        IUniswapV2Router02 _uniswapV2Router = \r\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n      \r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[Wallet_Burn] = true;\r\n\r\n        isLimitExempt[owner()] = true;\r\n        isLimitExempt[address(this)] = true;\r\n        isLimitExempt[Wallet_Burn] = true;\r\n        isLimitExempt[uniswapV2Pair] = true;\r\n\r\n        isPair[uniswapV2Pair] = true;\r\n        isGrantedConfigAccess[owner()] = true;\r\n\r\n        isExcluded[Wallet_Burn] = true;\r\n        isExcluded[uniswapV2Pair] = true;\r\n        isExcluded[address(this)] = true;\r\n\r\n        _excluded.push(Wallet_Burn);\r\n        _excluded.push(uniswapV2Pair);\r\n        _excluded.push(address(this));\r\n\r\n        boughtEarlyIndicator = 10 minutes;\r\n        boughtEarlySellCooldown = 1 minutes;\r\n\r\n        minSwapLiquidity = _tTotal * 5 / 10000; \r\n        maxSwapLiquidity = _tTotal / 100; \r\n\r\n        maxWallet = _tTotal * 20 / 1000; \r\n        maxTransaction = _tTotal * 5 / 1000;  \r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setlimitExempt(\r\n        address account, \r\n        bool isExempt) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {    \r\n\r\n        isLimitExempt[account] = isExempt;\r\n        emit LimitExempted(account, isExempt);\r\n        return true;\r\n    }\r\n\r\n    function setPair(\r\n        address account, \r\n        bool isPairs) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        isPair[account] = isPairs;\r\n        emit PairConfigured(account, isPairs);\r\n        return true;\r\n    }\r\n\r\n    function setExcludedFromFee(\r\n        address account, \r\n        bool isExcludedFromFees) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        isExcludedFromFee[account] = isExcludedFromFees;\r\n        emit ExcludedFromFee(account, isExcludedFromFees);\r\n        return true;\r\n    }\r\n\r\n    function setBlacklist(\r\n        address account, \r\n        bool isBlacklistedd) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        isBlacklisted[account] = isBlacklistedd;\r\n        emit Blacklisted(account, isBlacklistedd);\r\n        return true;\r\n    }\r\n\r\n    function setExcludedFromRewards(address account) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        require(\r\n            !isExcluded[account], \r\n            \"Account is already excluded\"\r\n        );\r\n\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n\r\n        isExcluded[account] = true;\r\n        _excluded.push(account);\r\n        emit ExcludedFromRewards(account);\r\n        return true;\r\n    }\r\n\r\n    function setIncludedForRewards(address account) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        require(\r\n            isExcluded[account], \r\n            \"Account is already included\"\r\n        );\r\n        \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n        emit IncludedForRewards(account);\r\n        return true;\r\n    }\r\n\r\n    function setFees(\r\n        uint256 newFeeBuy,\r\n        uint256 newFeeSell,\r\n        uint256 newFeeP2P,\r\n        uint256 newReflectBuy,\r\n        uint256 newReflectSell,\r\n        uint256 newReflectP2P) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        require(\r\n            newFeeBuy <= 20, \r\n            \"Buy fee too high\"\r\n        );\r\n        require(\r\n            newFeeSell <= 20, \r\n            \"Sell fee too high\"\r\n        );\r\n        require(\r\n            newFeeP2P <= 20, \r\n            \"P2P fee too high\"\r\n        );\r\n\r\n        require(\r\n            newReflectBuy <= newFeeBuy, \r\n            \"Fee_Buy must include Reflect_Buy\"\r\n        );\r\n        require(\r\n            newReflectSell <= newFeeSell, \r\n            \"Fee_Sell must include Reflect_Sell\"\r\n        );\r\n        require(\r\n            newReflectP2P <= newFeeP2P, \r\n            \"Fee_P2P must include Reflect_P2P\"\r\n        );\r\n\r\n        FeeBuy      = newFeeBuy;\r\n        FeeSell     = newFeeSell;\r\n        FeeP2P      = newFeeP2P;\r\n        ReflectBuy  = newReflectBuy;\r\n        ReflectSell = newReflectSell;\r\n        ReflectP2P  = newReflectP2P;\r\n\r\n        emit FeesUpdated(\r\n            FeeBuy, \r\n            FeeSell, \r\n            FeeP2P, \r\n            ReflectBuy, \r\n            ReflectSell, \r\n            ReflectP2P\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function setTradingActive() \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        isTradingActive = true;\r\n        boughtEarlyThreshold = block.timestamp + boughtEarlyIndicator;\r\n        emit TradingActive(isTradingActive);\r\n        return true;\r\n    }\r\n\r\n    function setFeeDistribution(uint256 newPercentLP) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        percentLP = newPercentLP;\r\n        return true;\r\n    }\r\n\r\n    function setMarketingWallet(address payable newWallet) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        require(\r\n            newWallet != address(0), \r\n            \"new wallet is the zero address\"\r\n        );\r\n\r\n        emit MarketingWalletUpdated(Wallet_Marketing, newWallet);\r\n        Wallet_Marketing = newWallet;\r\n        return true;\r\n    }\r\n\r\n    function setLPWallet(address payable newWallet) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        require(\r\n            newWallet != address(0), \r\n            \"new wallet is the zero address\"\r\n        );\r\n        \r\n        emit LPWalletUpdated(Wallet_LP, newWallet);\r\n        Wallet_LP = newWallet;\r\n        return true;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool isEnabled) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        swapAndLiquifyEnabled = isEnabled;\r\n        emit SwapAndLiquifyEnabledUpdated(isEnabled);\r\n        return true;\r\n    }\r\n\r\n    function setLimitsForWallets(\r\n        uint256 newMaxTransaction,\r\n        uint256 newMaxWallet) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        require(\r\n            newMaxWallet > 0, \r\n            \"Must be greater than 0\"\r\n        );\r\n        require(\r\n            newMaxTransaction > 0, \r\n            \"Must be greater than 0\"\r\n        );\r\n        \r\n        maxWallet = newMaxWallet * 1 ether;\r\n        maxTransaction = newMaxTransaction * 1 ether;\r\n      \r\n        emit LimitsUpdated(maxWallet, maxTransaction);\r\n        return true;\r\n    }\r\n\r\n    function setLimitsForSwapTrigger(\r\n        uint256 newMinSwapLiquidity, \r\n        uint256 newMaxSwapLiquidity) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n       \r\n        minSwapLiquidity = newMinSwapLiquidity * 1 ether;\r\n        maxSwapLiquidity = newMaxSwapLiquidity * 1 ether;\r\n        emit TriggerLimitsUpdated(minSwapLiquidity, maxSwapLiquidity);\r\n        return true;\r\n    }    \r\n\r\n    function recoverForeignTokens(\r\n        address token, \r\n        uint256 percent) \r\n        external \r\n        onlyOwner \r\n        returns (bool recovered)\r\n    {\r\n\r\n        if (percent > 100) { \r\n            percent = 100; \r\n        }\r\n\r\n        uint256 total = IERC20(token).balanceOf(address(this));\r\n        uint256 recover = total * percent / 100;\r\n        recovered = IERC20(token).transfer(msg.sender, recover);\r\n    }\r\n\r\n    function setManualLiquification(uint256 percent) \r\n        external \r\n        onlyOwner \r\n        returns (bool) \r\n    {\r\n\r\n        require(\r\n            !inSwapAndLiquify, \r\n            \"Currently processing, try later.\"\r\n        ); \r\n\r\n        if (percent > 100) { \r\n            percent == 100;\r\n        }\r\n\r\n        uint256 tokensOnContract = balanceOf(address(this));\r\n        uint256 sendTokens = tokensOnContract * percent / 100;\r\n        \r\n        swapAndLiquify(sendTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(\r\n        address spender, \r\n        uint256 amount) \r\n        external \r\n        override \r\n        returns (bool) \r\n    {\r\n\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender, \r\n        address recipient, \r\n        uint256 amount) \r\n        external \r\n        override \r\n        returns (bool) \r\n    {\r\n\r\n        _transfer(sender, recipient, amount);\r\n        \r\n        _approve(\r\n            sender, \r\n            _msgSender(), \r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender, \r\n        uint256 addedValue) \r\n        external \r\n        virtual \r\n        returns (bool) \r\n    {\r\n\r\n        _approve(\r\n            _msgSender(), \r\n            spender, \r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender, \r\n        uint256 subtractedValue) \r\n        external \r\n        virtual \r\n        returns (bool) \r\n    {\r\n\r\n        _approve(\r\n            _msgSender(), \r\n            spender, \r\n            _allowances[_msgSender()][spender] - subtractedValue\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function name() \r\n        external \r\n        pure \r\n        returns (string memory) \r\n    {\r\n\r\n        return _name;\r\n    }\r\n\r\n    function symbol() \r\n        external \r\n        pure \r\n        returns (string memory) \r\n    {\r\n\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() \r\n        external \r\n        pure \r\n        returns (uint256) \r\n    {\r\n\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() \r\n        external \r\n        view \r\n        override \r\n        returns (uint256) \r\n    {\r\n\r\n        return _tTotal;\r\n    }\r\n\r\n    function allowance(\r\n        address theOwner, \r\n        address spender) \r\n        external \r\n        view \r\n        override \r\n        returns (uint256) \r\n    {\r\n\r\n        return _allowances[theOwner][spender];\r\n    }\r\n\r\n    function isExcludedFromReward(address account) \r\n        external \r\n        view \r\n        returns (bool) \r\n    {\r\n\r\n        return isExcluded[account];\r\n    }\r\n\r\n    function totalFees() \r\n        external \r\n        view \r\n        returns (uint256) \r\n    {\r\n\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function transfer(\r\n        address recipient, \r\n        uint256 amount) \r\n        public \r\n        override \r\n        returns (bool) \r\n    {\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) \r\n        public \r\n        view \r\n        override \r\n        returns (uint256) \r\n    {\r\n\r\n        if (isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 _rAmount) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n\r\n        require(\r\n            _rAmount <= _rTotal, \r\n            \"Amount must be less than total reflections\"\r\n        );\r\n\r\n        uint256 currentRate =  _getRate();\r\n        return _rAmount / currentRate;\r\n    }\r\n\r\n    function _getRate() \r\n        private \r\n        view \r\n        returns (uint256) \r\n    {\r\n\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() \r\n        private \r\n        view \r\n        returns (uint256, uint256) \r\n    {\r\n\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;  \r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply || \r\n                _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount) \r\n        private \r\n    {\r\n\r\n        if (!isTradingActive) {\r\n            require(\r\n                isGrantedConfigAccess[from] || \r\n                isGrantedConfigAccess[to], \r\n                \"Trade not open\"\r\n            );\r\n        }\r\n\r\n        if (to != owner()){\r\n            require(\r\n                !isBlacklisted[from] && !isBlacklisted[to], \r\n                \"This address is blacklisted. Transaction reverted.\"\r\n            );\r\n        }\r\n\r\n        if (!isLimitExempt[to]) {\r\n            uint256 heldTokens = balanceOf(to);\r\n            require(\r\n                (heldTokens + amount) <= maxWallet, \r\n                \"Over max wallet\"\r\n            );\r\n        }\r\n\r\n        if (!isLimitExempt[to] || !isLimitExempt[from])\r\n            require(\r\n                amount <= maxTransaction, \r\n                \"Over max TX\"\r\n            );\r\n\r\n        require(\r\n            from != address(0) && \r\n            to != address(0), \r\n            \"Can not be 0 address\"\r\n        );\r\n\r\n        require(\r\n            amount > 0, \r\n            \"Can not be 0 tokens!\"\r\n        );\r\n\r\n        if (isPair[to] &&\r\n            txCount > swapTrigger &&\r\n            !inSwapAndLiquify &&\r\n            swapAndLiquifyEnabled) \r\n        \r\n        {  \r\n            uint256 contractBalance = balanceOf(address(this));\r\n\r\n            if (contractBalance > minSwapLiquidity) {\r\n                if (contractBalance < maxSwapLiquidity) {\r\n                    swapAndLiquify(contractBalance);\r\n                } \r\n                else {\r\n                    swapAndLiquify(maxSwapLiquidity);\r\n                }\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        if (isExcludedFromFee[from] || isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        } else {\r\n            if (txCount <= swapTrigger) {\r\n                txCount++;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee); \r\n    }\r\n    \r\n    function sendToWallet(address payable wallet, uint256 amount) private {\r\n        wallet.transfer(amount);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        \r\n        uint256 Tokens_LP = contractTokenBalance * percentLP / 200;\r\n        uint256 Tokens_Swap = contractTokenBalance - Tokens_LP;\r\n\r\n        uint256 contract_BNB = address(this).balance;\r\n        swapTokensForEth(Tokens_Swap);\r\n        uint256 returned_BNB = address(this).balance - contract_BNB;\r\n\r\n        uint256 fee_Split = 200 - percentLP;\r\n        uint256 BNB_L = returned_BNB * percentLP / fee_Split;\r\n\r\n        if (Tokens_LP != 0){\r\n            addLiquidity(Tokens_LP, BNB_L);\r\n            emit SwapAndLiquify(Tokens_LP, BNB_L, Tokens_LP);\r\n        }\r\n\r\n        contract_BNB = address(this).balance;\r\n\r\n        if (contract_BNB > 0) {\r\n            sendToWallet(Wallet_Marketing, contract_BNB);\r\n        }\r\n\r\n        txCount = 1;\r\n\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0, \r\n            Wallet_LP,\r\n            block.timestamp\r\n        );\r\n    } \r\n\r\n    function _takeRFI(uint256 _tReflect, uint256 _rReflect) private {\r\n        \r\n        _rTotal = _rTotal - _rReflect;\r\n        _tFeeTotal = _tFeeTotal + _tReflect;\r\n    }\r\n\r\n    function _takeFees(uint256 _tFees, uint256 _rFees) private {\r\n        \r\n        _rOwned[address(this)] = _rOwned[address(this)] + _rFees;\r\n        if(isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + _tFees;\r\n    }\r\n\r\n    function _approve(\r\n        address theOwner, \r\n        address spender, \r\n        uint256 amount) \r\n        private \r\n    {\r\n        require(\r\n            theOwner != address(0) && spender != address(0), \r\n            \"must not be the zero address\"\r\n        );\r\n\r\n        _allowances[theOwner][spender] = amount;\r\n        emit Approval(theOwner, spender, amount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender, \r\n        address recipient, \r\n        uint256 amount, \r\n        bool takeFee) \r\n        private \r\n    {  \r\n\r\n        if (!takeFee) {\r\n                tReflect = 0;\r\n                tFees = 0;\r\n        } \r\n\r\n        else if (isPair[sender]) {\r\n            tReflect = amount * ReflectBuy / 100;\r\n            tFees = amount * (FeeBuy - ReflectBuy) / 100;\r\n\r\n            if (block.timestamp < boughtEarlyThreshold) {\r\n                    boughtEarly[recipient] = true;\r\n                    boughtEarlyAt[recipient] = block.timestamp;\r\n                    emit BoughtEarly(recipient);\r\n                }\r\n        } \r\n        \r\n        else if (isPair[recipient]) {\r\n            tReflect = amount * ReflectSell / 100;\r\n            tFees = amount * (FeeSell - ReflectSell) / 100;\r\n\r\n            if (boughtEarly[sender] && block.timestamp <= boughtEarlyThreshold) {\r\n                    require(block.timestamp > boughtEarlyAt[sender] + boughtEarlySellCooldown, \r\n                    \": must wait till bought early sell cooldown is over\");\r\n            }\r\n        } \r\n        \r\n        else {\r\n            tReflect = amount * ReflectP2P / 100;\r\n            tFees = amount * (FeeP2P - ReflectP2P) / 100;\r\n\r\n            if (boughtEarly[sender] && block.timestamp <= boughtEarlyThreshold) {\r\n                    require(block.timestamp > boughtEarlyAt[sender] + boughtEarlySellCooldown, \r\n                    \": must wait till bought early sell cooldown is over\");\r\n            }\r\n        } \r\n        \r\n        uint256 rateRFI = _getRate();\r\n\r\n        rAmount = amount * rateRFI;\r\n        rReflect = tReflect * rateRFI;\r\n        rFees = tFees * rateRFI;\r\n\r\n        tTransferAmount = amount - (tReflect + tFees);\r\n        rTransferAmount = rAmount - (rReflect + rFees);\r\n\r\n        if (isExcluded[sender] && !isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount, takeFee);\r\n        } \r\n        \r\n        else if (!isExcluded[sender] && isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount, takeFee);\r\n        } \r\n        \r\n        else if (!isExcluded[sender] && !isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount, takeFee);\r\n        } \r\n        \r\n        else if (isExcluded[sender] && isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount, takeFee);\r\n        } \r\n        \r\n        else {\r\n            _transferStandard(sender, recipient, amount, takeFee);\r\n        }\r\n    }\r\n\r\n   function _transferStandard(\r\n       address sender, \r\n       address recipient, \r\n       uint256 tAmount, \r\n       bool takeFee) \r\n       private \r\n    {\r\n\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        if (recipient != Wallet_Burn) {\r\n            _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        }\r\n\r\n        if(takeFee) {\r\n            _takeRFI(tReflect, rReflect);\r\n            _takeFees(tFees, rFees);\r\n        }\r\n\r\n        if (recipient == Wallet_Burn) {\r\n            _tTotal = _tTotal - tAmount;\r\n            _rTotal = _rTotal - rAmount;\r\n        }\r\n        \r\n        emit Transfer(\r\n            sender, \r\n            recipient, \r\n            tTransferAmount\r\n        );\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender, \r\n        address recipient, \r\n        uint256 tAmount, \r\n        bool takeFee) \r\n        private \r\n    {\r\n        \r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        if (recipient != Wallet_Burn) {\r\n            _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n            _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        }\r\n\r\n        if (takeFee) {\r\n            _takeRFI(tReflect, rReflect);\r\n            _takeFees(tFees, rFees);\r\n        }\r\n\r\n\r\n        if (recipient == Wallet_Burn) {\r\n            _tTotal = _tTotal - tAmount;\r\n            _rTotal = _rTotal - rAmount;\r\n        }\r\n        \r\n        emit Transfer(\r\n            sender, \r\n            recipient, \r\n            tTransferAmount\r\n        );\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender, \r\n        address recipient, \r\n        uint256 tAmount, \r\n        bool takeFee) \r\n        private \r\n    {\r\n\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        if (recipient != Wallet_Burn) {\r\n            _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        }\r\n\r\n        if (takeFee) {\r\n            _takeRFI(tReflect, rReflect);\r\n            _takeFees(tFees, rFees);\r\n        }\r\n\r\n\r\n        if (recipient == Wallet_Burn) {\r\n            _tTotal = _tTotal - tAmount;\r\n            _rTotal = _rTotal - rAmount;\r\n        }\r\n        \r\n        emit Transfer(\r\n            sender, \r\n            recipient, \r\n            tTransferAmount\r\n        );\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender, \r\n        address recipient, \r\n        uint256 tAmount, \r\n        bool takeFee) \r\n        private \r\n    {\r\n\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        if (recipient != Wallet_Burn) {\r\n            _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n            _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        }\r\n\r\n        if (takeFee) {\r\n            _takeRFI(tReflect, rReflect);\r\n            _takeFees(tFees, rFees);\r\n        }\r\n\r\n\r\n        if (recipient == Wallet_Burn) {\r\n            _tTotal = _tTotal - tAmount;\r\n            _rTotal = _rTotal - rAmount;\r\n        }\r\n        \r\n        emit Transfer(\r\n            sender, \r\n            recipient, \r\n            tTransferAmount\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGrantedAccess\",\"type\":\"bool\"}],\"name\":\"AccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BoughtEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcludedFromFee\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FeeBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FeeSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FeeP2P\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReflectBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReflectSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReflectP2P\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedForRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"LPWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"LimitExempted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWalletLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTxLimit\",\"type\":\"uint256\"}],\"name\":\"LimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isConfigured\",\"type\":\"bool\"}],\"name\":\"PairConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"TradingActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTriggerMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTriggerMax\",\"type\":\"uint256\"}],\"name\":\"TriggerLimitsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeP2P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReflectBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReflectP2P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReflectSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Burn\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_LP\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtEarly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtEarlyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boughtEarlyIndicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boughtEarlySellCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boughtEarlyThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGrantedConfigAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"recoverForeignTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"recovered\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklistedd\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcludedFromFees\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentLP\",\"type\":\"uint256\"}],\"name\":\"setFeeDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFeeP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReflectBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReflectSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReflectP2P\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setIncludedForRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setLPWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinSwapLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxSwapLiquidity\",\"type\":\"uint256\"}],\"name\":\"setLimitsForSwapTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"setLimitsForWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setManualLiquification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPairs\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setlimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTrigger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Moonions", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://33451f5227fbbca8e93d8fee8f961deb79245741e23195b3c1fb6e6c503e1f22"}