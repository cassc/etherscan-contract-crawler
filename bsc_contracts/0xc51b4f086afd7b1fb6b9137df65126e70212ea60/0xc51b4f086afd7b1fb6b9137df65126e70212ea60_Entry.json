{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/kevinyuh/work/lightnet-cn/hermes-contract/contracts/impl/Entry.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"./StorageStateful.sol\\\";\\n\\ncontract Entry is StorageStateful, Proxy {\\n    bool public isInitialized;\\n\\n\\tevent UpdateStorage(address indexed admin, address indexed storage_);\\n\\n\\tconstructor() public {\\n\\t\\tData storage_ = new Data(address(this));\\n\\t\\t_installStorage(storage_);\\n\\t}\\n\\n\\tfunction _installStorage(Data storage_) internal {\\n\\t\\t_storage = storage_;\\n\\t\\temit UpdateStorage(msg.sender, address(storage_));\\n\\t}\\n\\n\\tfunction initialize(address logic_) external onlyOwner {\\n\\t    require(!isInitialized, \\\"Entry: has already initialized\\\");\\n\\t    upgradeTo(\\\"0.0.1\\\", logic_);\\n\\t    isInitialized = true;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/kevinyuh/work/lightnet-cn/hermes-contract/contracts/third/IToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\ninterface IToken {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function getCallAddress() external view returns (address);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/kevinyuh/work/lightnet-cn/hermes-contract/contracts/interfaces/IProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\ninterface IProxy {\\n    function implementation() external view returns (address);\\n    function upgradeTo(string calldata _newVersion, address _newImplementation) external;\\n    function getImplFromVersion(string calldata _version) external view returns(address);\\n    function transferOwnership(address newOwner) external;\\n    event Upgraded(string indexed newVersion, address indexed newImplementation, string version);\\n}\\n\\n\"\r\n    },\r\n    \"/Users/kevinyuh/work/lightnet-cn/hermes-contract/contracts/impl/StorageStateful.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./Data.sol\\\";\\nimport \\\"../third/IToken.sol\\\";\\n\\ncontract StorageStateful {\\n    Data public _storage;\\n}\\n\"\r\n    },\r\n    \"/Users/kevinyuh/work/lightnet-cn/hermes-contract/contracts/impl/Proxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IProxy.sol\\\";\\n\\ncontract Proxy is IProxy, Ownable {\\n\\t// \u7248\u672c\u5bf9\u5e94\u7684\u903b\u8f91\u5408\u7ea6\u5730\u5740 \u7248\u672c\u53f7 => \u903b\u8f91\u5408\u7ea6\u5730\u5740\\n\\tmapping(string => address) internal _versions;\\n\\n\\t// \u7248\u672c\u5217\u8868\\n\\tstring[] public versionList;\\n\\n\\t// \u5f53\u524d\u7248\u672c\\n\\tstring public version;\\n\\n\\tevent Upgraded(string indexed newVersion, address indexed newImplementation, string version);\\n\\n\\tfunction implementation() public view returns (address) {\\n\\t\\treturn _versions[version];\\n\\t}\\n\\n\\tfunction upgradeTo(string memory _newVersion, address _newImplementation) public onlyOwner {\\n\\t\\trequire(\\n            implementation() != _newImplementation && _newImplementation != address(0),\\n            \\\"Old address is not allowed and implementation address should not be 0x\\\"\\n        );\\n\\t\\trequire(Address.isContract(_newImplementation), \\\"Cannot set a proxy implementation to a non-contract address\\\");\\n\\t\\trequire(bytes(_newVersion).length > 0, \\\"Version should not be empty string\\\");\\n\\t\\tversion = _newVersion;\\n\\t\\t_versions[version] = _newImplementation;\\n\\t\\tversionList.push(_newVersion);\\n\\t\\temit Upgraded(_newVersion, _newImplementation, _newVersion);\\n\\t}\\n\\n\\tfunction getImplFromVersion(string calldata _version) external view returns(address) {\\n\\t\\trequire(bytes(_version).length > 0, \\\"Version should not be empty string\\\");\\n\\t\\treturn _versions[_version];\\n\\t}\\n\\n\\t// fallback\\n\\tfunction () external payable {\\n\\t\\taddress _impl = implementation();\\n\\t\\trequire(_impl != address(0), \\\"implementation not set\\\");\\n\\n\\t\\t// \u59d4\u6258\u8c03\u7528\u8fd4\u56de\u7ed3\u679c\\n\\t\\tassembly {\\n\\t\\t\\tlet ptr := mload(0x40)\\n\\t\\t\\tcalldatacopy(ptr, 0, calldatasize)\\n\\t\\t\\tlet result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\\n\\t\\t\\tlet size := returndatasize\\n\\t\\t\\treturndatacopy(ptr, 0, size)\\n\\n\\t\\t\\tswitch result\\n\\t\\t\\tcase 0 { revert(ptr, size) }\\n\\t\\t\\tdefault { return(ptr, size) }\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/Users/kevinyuh/work/lightnet-cn/hermes-contract/contracts/impl/Data.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract Data {\\n    address public proxy;\\n\\n    struct Asset {\\n\\t\\tuint256 typeid;\\n        bytes32 name;\\n        address tokenAddress;\\n        string partnerIssuer;\\n    }\\n\\n    mapping(uint256 => Asset) internal Assets;\\n    mapping (uint256 => uint256) internal AssetIndex;\\n\\tuint256[] internal AssetIds;\\n\\n    constructor(address _proxy) public {\\n        require(_proxy != address(0), \\\"zero address is not allowed\\\");\\n        proxy = _proxy;\\n    }\\n\\n    // \u9a8c\u8bc1\u5bf9model\u7684\u64cd\u4f5c\u662f\u5426\u6765\u6e90\u4e8eProxy\\n    modifier onlyAuthorized {\\n        require(msg.sender == proxy, \\\"Data: must be called by entry contract\\\");\\n        _;\\n    }\\n\\n    function _checkParam(uint256 _typeid, bytes32 _name, address _tokenAddress, string memory _partnerIssuer) internal view {\\n\\t\\trequire(_typeid != uint256(0), \\\"Data: _typeid null is not allowed\\\");\\n\\t\\trequire(_name != bytes32(0), \\\"Data: _name null is not allowed\\\");\\n\\t\\trequire(_tokenAddress != address(0), \\\"Data: _tokenAddress null is not allowed\\\");\\n\\t\\trequire(Address.isContract(_tokenAddress), \\\"_tokenAddress is a non-contract address\\\");\\n\\t\\trequire(bytes(_partnerIssuer).length > 0, \\\"Data: _partnerIssuer null is not allowed\\\");\\n\\t}\\n\\n    function _insert(\\n\\t\\tuint256 _typeid,\\n        bytes32 _name,\\n        address _tokenAddress,\\n        string memory _partnerIssuer\\n    ) internal {\\n        _checkParam(_typeid, _name, _tokenAddress, _partnerIssuer);\\n        require(\\n            Assets[_typeid].typeid == uint256(0),\\n            \\\"Data: current Asset exist\\\"\\n        );\\n        Asset memory a = Asset(_typeid, _name, _tokenAddress, _partnerIssuer);\\n        Assets[_typeid] = a;\\n        AssetIds.push(_typeid);\\n\\t\\tAssetIndex[_typeid] = AssetIds.length;\\n    }\\n\\n    function insert(\\n        uint256 _typeid,\\n\\t\\tbytes32 _name,\\n\\t\\taddress _tokenAddress,\\n\\t\\tstring calldata _partnerIssuer\\n    ) external onlyAuthorized {\\n        _insert(_typeid, _name, _tokenAddress, _partnerIssuer);\\n    }\\n\\n    function _update(\\n        uint256 _typeid,\\n\\t\\tbytes32 _name,\\n\\t\\taddress _tokenAddress,\\n\\t\\tstring memory _partnerIssuer\\n    ) internal {\\n        require(\\n            _typeid != uint256(0),\\n            \\\"Data: _typeid 0 is not allowed\\\"\\n        );\\n        require(\\n            Assets[_typeid].typeid != uint256(0),\\n            \\\"Data: current Asset not exist\\\"\\n        );\\n\\n        Asset memory a = Assets[_typeid];\\n        if (_name != bytes32(0)) {\\n            a.name = _name;\\n        }\\n        if (_tokenAddress != address(0)) {\\n            a.tokenAddress = _tokenAddress;\\n        }\\n        if (bytes(_partnerIssuer).length > 0) {\\n            a.partnerIssuer = _partnerIssuer;\\n        }\\n        Assets[_typeid] = a;\\n    }\\n\\n    function update(\\n        uint256 _typeid,\\n\\t\\tbytes32 _name,\\n\\t\\taddress _tokenAddress,\\n\\t\\tstring calldata _partnerIssuer\\n    ) external onlyAuthorized {\\n\\t\\t_update(_typeid, _name, _tokenAddress, _partnerIssuer);\\n    }\\n\\n    function _search(uint256 _typeid)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n\\t\\t\\tbytes32,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory\\n        )\\n    {\\n        require(\\n            _typeid != uint256(0),\\n            \\\"Data: _typeid 0 is not allowed\\\"\\n        );\\n        require(\\n            Assets[_typeid].typeid != uint256(0),\\n            \\\"Data: current Asset not exist\\\"\\n        );\\n\\n        Asset memory a = Assets[_typeid];\\n        return (a.typeid, a.name, a.tokenAddress, a.partnerIssuer);\\n    }\\n\\n    function search(uint256 _typeid)\\n        external\\n        view\\n\\t\\tonlyAuthorized\\n        returns (\\n            uint256,\\n\\t\\t\\tbytes32,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory\\n        )\\n    {\\n        return _search(_typeid);\\n    }\\n\\n    function _delete(uint256 _typeid) internal {\\n\\t\\trequire(_typeid != uint256(0), \\\"Data: _typeid 0 is not allowed\\\");\\n        require(Assets[_typeid].typeid != uint256(0), \\\"Data: current Asset not exist\\\");\\n        uint256 _deleteIndex = AssetIndex[_typeid] - 1;\\n\\t\\tuint256 _lastIndex = AssetIds.length - 1;\\n        if(_deleteIndex != _lastIndex){\\n\\t\\t\\tAssetIds[_deleteIndex] = AssetIds[_lastIndex];\\n\\t\\t\\tAssetIndex[AssetIds[_lastIndex]] = _deleteIndex + 1;\\n\\t\\t}\\n\\t\\tAssetIds.pop();\\n        delete Assets[_typeid];\\n    }\\n\\n    function del(uint256 _typeid) external onlyAuthorized {\\n        _delete(_typeid);\\n    }\\n\\n    //return Array of assetId\\n    function getAssetIds() external view onlyAuthorized returns (uint256[] memory){\\n        uint256[] memory ret = AssetIds;\\n        return ret;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"constantinople\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"storage_\",\"type\":\"address\"}],\"name\":\"UpdateStorage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newVersion\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"_storage\",\"outputs\":[{\"internalType\":\"contract Data\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"getImplFromVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Entry", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "constantinople", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x839f1cd6e0e5f021add45bcf66b5b53fe95fe581", "SwarmSource": ""}