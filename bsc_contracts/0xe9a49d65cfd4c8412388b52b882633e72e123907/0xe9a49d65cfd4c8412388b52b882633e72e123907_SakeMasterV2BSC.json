{"SourceCode": "// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\EnumerableSet.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IMigratorChef.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IMigratorChef {\r\n    // Perform LP token migration from legacy UniswapV2 to SakeSwap.\r\n    // Take the current LP token address and return the new LP token address.\r\n    // Migrator should have full access to the caller's LP token.\r\n    // Return the new LP token address.\r\n    //\r\n    // XXX Migrator must have allowance access to UniswapV2 LP tokens.\r\n    // SakeSwap must mint EXACTLY the same amount of SakeSwap LP tokens or\r\n    // else something bad will happen. Traditional UniswapV2 does not\r\n    // do that so be careful!\r\n    function migrate(IERC20 token) external returns (IERC20);\r\n}\r\n\r\n// File: contracts\\pancake\\IMasterChef.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IMasterChef {\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\r\n\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n}\r\n\r\n// File: contracts\\pancake\\router\\interfaces\\IPancakeRouter01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts\\pancake\\router\\interfaces\\IPancakeRouter02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts\\SakeMasterV2BSC.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// SakeMaster is the master of Sake. He can make Sake and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once SAKE is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract SakeMasterV2BSC is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 pengdingSake; // record sake amount when user withdraw lp.\r\n        uint256 sakeRewardDebt; // Reward debt. See explanation below.\r\n        uint256 cakeRewardDebt; // Reward debt. See explanation below.\r\n        uint256 lastWithdrawBlock; // user last withdraw time;\r\n\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of SAKEs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accSakePerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accSakePerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 totalSupply; // total lp token amount\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. SAKEs to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that SAKEs distribution occurs.\r\n        uint256 accSakePerShare; // Accumulated SAKEs per share, times 1e12. See below.\r\n        uint256 accCakePerShare; // Accumulated CAKEs per share, times 1e12. See below.\r\n        bool sakeLockSwitch; // true-have sake withdraw interval,default 1 months;false-no withdraw interval,but have sake withdraw fee,default 10%\r\n        bool isDual;\r\n        bool migrated;\r\n        uint256 cpid; // pid in cake masterChef\r\n    }\r\n\r\n    // The SAKE TOKEN!\r\n    IERC20 public sake;\r\n    // sakeMaker address.\r\n    address public sakeMaker;\r\n    // admin address.\r\n    address public admin;\r\n    // receive sake fee address\r\n    address public sakeFeeAddress;\r\n    // Block number when trade mining speed up period ends.\r\n    uint256 public tradeMiningSpeedUpEndBlock;\r\n    // Block number when phase II yield farming period ends.\r\n    uint256 public yieldFarmingIIEndBlock;\r\n    // Block number when trade mining period ends.\r\n    uint256 public tradeMiningEndBlock;\r\n    // trade mining speed end block num,about 1 months.\r\n    // ***********BSC block mint interval is 3 s,so one month is about 864000***************\r\n    uint256 public tradeMiningSpeedUpEndBlockNum = 864000;\r\n    // phase II yield farming end block num,about 6 months.\r\n    // ***********BSC block mint interval is 3 s,so 6 month is about 5184000***************\r\n    uint256 public yieldFarmingIIEndBlockNum = 5184000;\r\n    // trade mining end block num,about 12 months.\r\n    //**************BSC block mint interval is 3 s,so 12 month is about 10368000*************\r\n    uint256 public tradeMiningEndBlockNum = 10368000;\r\n    // SAKE tokens created per block for phase II yield farming.\r\n    uint256 public sakePerBlockYieldFarming = 7 * 10**17;\r\n    // SAKE tokens created per block for trade mining.\r\n    uint256 public sakePerBlockTradeMining = 1 * 10**18;\r\n    // Bonus muliplier for trade mining.\r\n    uint256 public constant BONUS_MULTIPLIER = 2;\r\n    // withdraw block num interval,about 1 months.\r\n    // ***********BSC block mint interval is 3 s,so one month is about 864000***************\r\n    uint256 public withdrawInterval = 864000;\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when SAKE mining starts.\r\n    uint256 public startBlock;\r\n    // The ratio of withdraw lp fee(default is 0%)\r\n    uint8 public lpFeeRatio = 0;\r\n    // The ratio of withdraw sake fee if no withdraw interval(default is 10%)\r\n    uint8 public sakeFeeRatio = 10;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens and S tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\r\n    IMigratorChef public migrator;\r\n    IMasterChef public cakeMasterChef;\r\n    IERC20 public cake;\r\n    IPancakeRouter02 public pancakeRouter;\r\n    address public WBNBAddress;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amountLPtoken);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amountLPtoken);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amountLPtoken);\r\n\r\n    // start block should be 1409400 on bsc mainnet ,bsc testnet should be 2843207\r\n    constructor(\r\n        IERC20 _sake,\r\n        IERC20 _cake,\r\n        IPancakeRouter02 _pancakeRouter,\r\n        address _WBNBAddress,\r\n        address _admin,\r\n        address _sakeMaker,\r\n        address _sakeFeeAddress,\r\n        uint256 _startBlock,\r\n        IMasterChef _cakeMasterChef\r\n    ) public {\r\n        sake = _sake;\r\n        cake = _cake;\r\n        pancakeRouter = _pancakeRouter;\r\n        WBNBAddress = _WBNBAddress;\r\n        admin = _admin;\r\n        sakeMaker = _sakeMaker;\r\n        sakeFeeAddress = _sakeFeeAddress;\r\n        startBlock = _startBlock;\r\n        cakeMasterChef = _cakeMasterChef;\r\n        tradeMiningSpeedUpEndBlock = startBlock.add(tradeMiningSpeedUpEndBlockNum);\r\n        yieldFarmingIIEndBlock = startBlock.add(yieldFarmingIIEndBlockNum);\r\n        tradeMiningEndBlock = startBlock.add(tradeMiningEndBlockNum);\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // XXX DO NOT add the same LP token more than once.\r\n    function _checkValidity(IERC20 _lpToken) internal view {\r\n        for (uint256 i = 0; i < poolInfo.length; i++) {\r\n            require(poolInfo[i].lpToken != _lpToken, \"pool exist\");\r\n        }\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the admin.\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _lpToken,\r\n        bool _isDual,\r\n        uint256 _cpid,\r\n        bool _withUpdate\r\n    ) public {\r\n        require(msg.sender == admin, \"add:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        _checkValidity(_lpToken);\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                totalSupply: 0,\r\n                allocPoint: _allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accSakePerShare: 0,\r\n                accCakePerShare: 0,\r\n                sakeLockSwitch: true,\r\n                isDual: _isDual,\r\n                migrated: false,\r\n                cpid: _cpid\r\n            })\r\n        );\r\n    }\r\n\r\n    // Update the given pool's SAKE allocation point. Can only be called by the admin.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _isDual,\r\n        uint256 _cpid,\r\n        bool _withUpdate\r\n    ) public {\r\n        require(msg.sender == admin, \"set:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].isDual = _isDual;\r\n        poolInfo[_pid].cpid = _cpid;\r\n    }\r\n\r\n    // set sake withdraw switch. Can only be called by the admin.\r\n    function setSakeLockSwitch(\r\n        uint256 _pid,\r\n        bool _sakeLockSwitch,\r\n        bool _withUpdate\r\n    ) public {\r\n        require(msg.sender == admin, \"s:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        poolInfo[_pid].sakeLockSwitch = _sakeLockSwitch;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256 multipY, uint256 multipT) {\r\n        uint256 _toFinalY = _to > yieldFarmingIIEndBlock ? yieldFarmingIIEndBlock : _to;\r\n        uint256 _toFinalT = _to > tradeMiningEndBlock ? tradeMiningEndBlock : _to;\r\n        // phase II yield farming multiplier\r\n        if (_from >= yieldFarmingIIEndBlock) {\r\n            multipY = 0;\r\n        } else {\r\n            multipY = _toFinalY.sub(_from);\r\n        }\r\n        // trade mining multiplier\r\n        if (_from >= tradeMiningEndBlock) {\r\n            multipT = 0;\r\n        } else {\r\n            if (_toFinalT <= tradeMiningSpeedUpEndBlock) {\r\n                multipT = _toFinalT.sub(_from).mul(BONUS_MULTIPLIER);\r\n            } else {\r\n                if (_from < tradeMiningSpeedUpEndBlock) {\r\n                    multipT = tradeMiningSpeedUpEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n                        _toFinalT.sub(tradeMiningSpeedUpEndBlock)\r\n                    );\r\n                } else {\r\n                    multipT = _toFinalT.sub(_from);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getSakePerBlock(uint256 blockNum) public view returns (uint256) {\r\n        if (blockNum <= tradeMiningSpeedUpEndBlock) {\r\n            return sakePerBlockYieldFarming.add(sakePerBlockTradeMining.mul(BONUS_MULTIPLIER));\r\n        } else if (blockNum > tradeMiningSpeedUpEndBlock && blockNum <= yieldFarmingIIEndBlock) {\r\n            return sakePerBlockYieldFarming.add(sakePerBlockTradeMining);\r\n        } else if (blockNum > yieldFarmingIIEndBlock && blockNum <= tradeMiningEndBlock) {\r\n            return sakePerBlockTradeMining;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // View function to see pending SAKEs on frontend.\r\n    function pending(uint256 _pid, address _user) external view returns (uint256 _sake, uint256 _cake) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSakePerShare = pool.accSakePerShare;\r\n        uint256 accCakePerShare = pool.accCakePerShare;\r\n        uint256 totalSupply = pool.totalSupply;\r\n        if (block.number > pool.lastRewardBlock && totalSupply != 0) {\r\n            (uint256 multipY, uint256 multipT) = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 sakeRewardY = multipY.mul(sakePerBlockYieldFarming).mul(pool.allocPoint).div(totalAllocPoint);\r\n            uint256 sakeRewardT = multipT.mul(sakePerBlockTradeMining).mul(pool.allocPoint).div(totalAllocPoint);\r\n            uint256 sakeReward = sakeRewardY.add(sakeRewardT);\r\n            accSakePerShare = accSakePerShare.add(sakeReward.mul(1e12).div(totalSupply));\r\n            if (pool.isDual && !pool.migrated) {\r\n                uint256 pendingCake = cakeMasterChef.pendingCake(pool.cpid, address(this));\r\n                accCakePerShare = accCakePerShare.add(pendingCake.mul(1e12).div(totalSupply));\r\n            }\r\n        }\r\n        _sake = user.amount.mul(accSakePerShare).div(1e12).add(user.pengdingSake).sub(user.sakeRewardDebt);\r\n        _cake = user.amount.mul(accCakePerShare).div(1e12).sub(user.cakeRewardDebt);\r\n    }\r\n\r\n    // Set the migrator contract. Can only be called by the owner.\r\n    function setMigrator(IMigratorChef _migrator) public onlyOwner {\r\n        migrator = _migrator;\r\n    }\r\n\r\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\r\n    function migrate(uint256 _pid) public {\r\n        require(address(migrator) != address(0), \"migrate: no migrator\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        require(!pool.migrated, \"migrate: has migrated\");\r\n        if (pool.isDual) {\r\n            uint256 cakeBalanceBefore = cake.balanceOf(address(this));\r\n            cakeMasterChef.withdraw(pool.cpid, pool.totalSupply);\r\n            uint256 cakeBalanceAfter = cake.balanceOf(address(this));\r\n            uint256 cakeReward = cakeBalanceAfter.sub(cakeBalanceBefore);\r\n            pool.accCakePerShare = pool.accCakePerShare.add(cakeReward.mul(1e12).div(pool.totalSupply));\r\n        }\r\n        IERC20 lpToken = pool.lpToken;\r\n        uint256 bal = lpToken.balanceOf(address(this));\r\n        lpToken.safeApprove(address(migrator), bal);\r\n        IERC20 newLpToken = migrator.migrate(lpToken);\r\n        require(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\r\n        pool.lpToken = newLpToken;\r\n        pool.migrated = true;\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 totalSupply = pool.totalSupply;\r\n        if (totalSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        if (pool.isDual && !pool.migrated) {\r\n            uint256 cakeBalanceBefore = cake.balanceOf(address(this));\r\n            cakeMasterChef.deposit(pool.cpid, 0);\r\n            uint256 cakeBalanceAfter = cake.balanceOf(address(this));\r\n            uint256 cakeReward = cakeBalanceAfter.sub(cakeBalanceBefore);\r\n            pool.accCakePerShare = pool.accCakePerShare.add(cakeReward.mul(1e12).div(totalSupply));\r\n        }\r\n        (uint256 multipY, uint256 multipT) = getMultiplier(pool.lastRewardBlock, block.number);\r\n        if (multipY == 0 && multipT == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 sakeRewardY = multipY.mul(sakePerBlockYieldFarming).mul(pool.allocPoint).div(totalAllocPoint);\r\n        uint256 sakeRewardT = multipT.mul(sakePerBlockTradeMining).mul(pool.allocPoint).div(totalAllocPoint);\r\n        uint256 sakeReward = sakeRewardY.add(sakeRewardT);\r\n        pool.accSakePerShare = pool.accSakePerShare.add(sakeReward.mul(1e12).div(totalSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Deposit LP tokens to SakeMasterV2 for SAKE allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n\r\n        if (_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        }\r\n\r\n        if (pool.isDual) {\r\n            uint256 pendingCake = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.cakeRewardDebt);\r\n            if (pendingCake > 0) {\r\n                swapToSake(pendingCake, msg.sender);\r\n            }\r\n            if (!pool.migrated && _amount > 0) {\r\n                pool.lpToken.safeApprove(address(cakeMasterChef), _amount);\r\n                cakeMasterChef.deposit(pool.cpid, _amount);\r\n            }\r\n        }\r\n\r\n        uint256 pendingSake = user.amount.mul(pool.accSakePerShare).div(1e12).add(user.pengdingSake).sub(user.sakeRewardDebt);\r\n        user.amount = user.amount.add(_amount);\r\n        pool.totalSupply = pool.totalSupply.add(_amount);\r\n        user.pengdingSake = pendingSake;\r\n        \r\n        if (pool.sakeLockSwitch) {\r\n            if (block.number > (user.lastWithdrawBlock.add(withdrawInterval))) {\r\n                user.lastWithdrawBlock = block.number;\r\n                user.pengdingSake = 0;\r\n                if (pendingSake > 0) {\r\n                    _safeSakeTransfer(msg.sender, pendingSake);\r\n                }\r\n            }\r\n        } else {\r\n            user.lastWithdrawBlock = block.number;\r\n            user.pengdingSake = 0;\r\n            if (pendingSake > 0) {\r\n                uint256 sakeFee = pendingSake.mul(sakeFeeRatio).div(100);\r\n                uint256 sakeToUser = pendingSake.sub(sakeFee);\r\n                _safeSakeTransfer(msg.sender, sakeToUser);\r\n                _safeSakeTransfer(sakeFeeAddress, sakeFee);\r\n            }\r\n        }\r\n\r\n        user.sakeRewardDebt = user.amount.mul(pool.accSakePerShare).div(1e12);\r\n        if (pool.isDual) user.cakeRewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from SakeMaster.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: LP amount not enough\");\r\n        updatePool(_pid);\r\n        \r\n        if (pool.isDual) {\r\n            uint256 pendingCake = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.cakeRewardDebt);\r\n            if (pendingCake > 0) {\r\n                swapToSake(pendingCake, msg.sender);\r\n            }\r\n            if (!pool.migrated) {\r\n                cakeMasterChef.withdraw(pool.cpid, _amount);\r\n            }\r\n        }\r\n        \r\n        uint256 pendingSake = user.amount.mul(pool.accSakePerShare).div(1e12).add(user.pengdingSake).sub(user.sakeRewardDebt);\r\n        user.amount = user.amount.sub(_amount);\r\n        pool.totalSupply = pool.totalSupply.sub(_amount);\r\n        user.sakeRewardDebt = user.amount.mul(pool.accSakePerShare).div(1e12);\r\n        if (pool.isDual) user.cakeRewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\r\n\r\n        if (pool.sakeLockSwitch) {\r\n            if (block.number > (user.lastWithdrawBlock.add(withdrawInterval))) {\r\n                user.lastWithdrawBlock = block.number;\r\n                user.pengdingSake = 0;\r\n                _safeSakeTransfer(msg.sender, pendingSake);\r\n            } else {\r\n                user.pengdingSake = pendingSake;\r\n            }\r\n        } else {\r\n            user.lastWithdrawBlock = block.number;\r\n            user.pengdingSake = 0;\r\n            uint256 sakeFee = pendingSake.mul(sakeFeeRatio).div(100);\r\n            uint256 sakeToUser = pendingSake.sub(sakeFee);\r\n            _safeSakeTransfer(msg.sender, sakeToUser);\r\n            _safeSakeTransfer(sakeFeeAddress, sakeFee);\r\n        }\r\n\r\n        uint256 lpTokenFee;\r\n        uint256 lpTokenToUser;\r\n        if (block.number < tradeMiningEndBlock) {\r\n            lpTokenFee = _amount.mul(lpFeeRatio).div(100);\r\n            pool.lpToken.safeTransfer(sakeMaker, lpTokenFee);\r\n        }\r\n        lpTokenToUser = _amount.sub(lpTokenFee);\r\n        pool.lpToken.safeTransfer(address(msg.sender), lpTokenToUser);\r\n        emit Withdraw(msg.sender, _pid, lpTokenToUser);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount > 0, \"withdraw: LP amount not enough\");\r\n        uint256 _amount = user.amount;\r\n        if (pool.isDual && !pool.migrated) {\r\n            cakeMasterChef.emergencyWithdraw(pool.cpid);\r\n        }\r\n        pool.totalSupply = pool.totalSupply.sub(_amount);\r\n        user.amount = 0;\r\n        user.sakeRewardDebt = 0;\r\n        user.cakeRewardDebt = 0;\r\n\r\n        uint256 lpTokenFee;\r\n        uint256 lpTokenToUser;\r\n        if (block.number < tradeMiningEndBlock) {\r\n            lpTokenFee = _amount.mul(lpFeeRatio).div(100);\r\n            pool.lpToken.safeTransfer(sakeMaker, lpTokenFee);\r\n        }\r\n        lpTokenToUser = _amount.sub(lpTokenFee);\r\n        pool.lpToken.safeTransfer(address(msg.sender), lpTokenToUser);\r\n        emit EmergencyWithdraw(msg.sender, _pid, lpTokenToUser);\r\n    }\r\n\r\n    // Safe sake transfer function, just in case if rounding error causes pool to not have enough SAKEs.\r\n    function _safeSakeTransfer(address _to, uint256 _amount) internal {\r\n        uint256 sakeBal = sake.balanceOf(address(this));\r\n        if (_amount > sakeBal) {\r\n            sake.transfer(_to, sakeBal);\r\n        } else {\r\n            sake.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Update admin address by owner.\r\n    function setAdmin(address _adminaddr) public onlyOwner {\r\n        require(_adminaddr != address(0), \"invalid address\");\r\n        admin = _adminaddr;\r\n    }\r\n\r\n    // Update sakeMaker address by admin.\r\n    function setSakeMaker(address _sakeMaker) public {\r\n        require(msg.sender == admin, \"sm:Call must come from admin.\");\r\n        require(_sakeMaker != address(0), \"invalid address\");\r\n        sakeMaker = _sakeMaker;\r\n    }\r\n\r\n    // Update sakeFee address by admin.\r\n    function setSakeFeeAddress(address _sakeFeeAddress) public {\r\n        require(msg.sender == admin, \"sf:Call must come from admin.\");\r\n        require(_sakeFeeAddress != address(0), \"invalid address\");\r\n        sakeFeeAddress = _sakeFeeAddress;\r\n    }\r\n\r\n    // update tradeMiningSpeedUpEndBlock by owner\r\n    function setTradeMiningSpeedUpEndBlock(uint256 _endBlock) public {\r\n        require(msg.sender == admin, \"tmsu:Call must come from admin.\");\r\n        require(_endBlock > startBlock, \"invalid endBlock\");\r\n        tradeMiningSpeedUpEndBlock = _endBlock;\r\n    }\r\n\r\n    // update yieldFarmingIIEndBlock by owner\r\n    function setYieldFarmingIIEndBlock(uint256 _endBlock) public {\r\n        require(msg.sender == admin, \"yf:Call must come from admin.\");\r\n        require(_endBlock > startBlock, \"invalid endBlock\");\r\n        yieldFarmingIIEndBlock = _endBlock;\r\n    }\r\n\r\n    // update tradeMiningEndBlock by owner\r\n    function setTradeMiningEndBlock(uint256 _endBlock) public {\r\n        require(msg.sender == admin, \"tm:Call must come from admin.\");\r\n        require(_endBlock > startBlock, \"invalid endBlock\");\r\n        tradeMiningEndBlock = _endBlock;\r\n    }\r\n\r\n    function setSakeFeeRatio(uint8 newRatio) public {\r\n        require(msg.sender == admin, \"sfr:Call must come from admin.\");\r\n        require(newRatio >= 0 && newRatio <= 100, \"invalid ratio\");\r\n        sakeFeeRatio = newRatio;\r\n    }\r\n\r\n    function setLpFeeRatio(uint8 newRatio) public {\r\n        require(msg.sender == admin, \"lp:Call must come from admin.\");\r\n        require(newRatio >= 0 && newRatio <= 100, \"invalid ratio\");\r\n        lpFeeRatio = newRatio;\r\n    }\r\n\r\n    function setWithdrawInterval(uint256 _blockNum) public {\r\n        require(msg.sender == admin, \"i:Call must come from admin.\");\r\n        withdrawInterval = _blockNum;\r\n    }\r\n\r\n    // set sakePerBlock phase II yield farming\r\n    function setSakePerBlockYieldFarming(uint256 _sakePerBlockYieldFarming, bool _withUpdate) public {\r\n        require(msg.sender == admin, \"yield:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        sakePerBlockYieldFarming = _sakePerBlockYieldFarming;\r\n    }\r\n\r\n    // set sakePerBlock trade mining\r\n    function setSakePerBlockTradeMining(uint256 _sakePerBlockTradeMining, bool _withUpdate) public {\r\n        require(msg.sender == admin, \"trade:Call must come from admin.\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        sakePerBlockTradeMining = _sakePerBlockTradeMining;\r\n    }\r\n\r\n    function swapToSake(uint256 amountIn, address to) internal {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(cake);\r\n        path[1] = WBNBAddress;\r\n        path[2] = address(sake);\r\n\r\n        cake.safeApprove(address(pancakeRouter), amountIn);\r\n        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountIn,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp + 10\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sake\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WBNBAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sakeMaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sakeFeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IMasterChef\",\"name\":\"_cakeMasterChef\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLPtoken\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLPtoken\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLPtoken\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNBAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDual\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_cpid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeMasterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multipY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multipT\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"getSakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeRatio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sakeLockSwitch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDual\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"migrated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cpid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sake\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sakeFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sakeFeeRatio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sakeMaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sakePerBlockTradeMining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sakePerBlockYieldFarming\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDual\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_cpid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminaddr\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newRatio\",\"type\":\"uint8\"}],\"name\":\"setLpFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sakeFeeAddress\",\"type\":\"address\"}],\"name\":\"setSakeFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newRatio\",\"type\":\"uint8\"}],\"name\":\"setSakeFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_sakeLockSwitch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setSakeLockSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sakeMaker\",\"type\":\"address\"}],\"name\":\"setSakeMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sakePerBlockTradeMining\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setSakePerBlockTradeMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sakePerBlockYieldFarming\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setSakePerBlockYieldFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setTradeMiningEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setTradeMiningSpeedUpEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"setWithdrawInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setYieldFarmingIIEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeMiningEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeMiningEndBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeMiningSpeedUpEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeMiningSpeedUpEndBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pengdingSake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sakeRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cakeRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldFarmingIIEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldFarmingIIEndBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SakeMasterV2BSC", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008bd778b12b15416359a227f0533ce2d91844e1ed0000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce8200000000000000000000000005ff2b0db69458a0750badebc4f9e13add608c7f000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000142151d3b15b8961f2937cf7880bcd10c050800c000000000000000000000000142151d3b15b8961f2937cf7880bcd10c050800c000000000000000000000000142151d3b15b8961f2937cf7880bcd10c050800c000000000000000000000000000000000000000000000000000000000015817800000000000000000000000073feaa1ee314f8c655e354234017be2193c9e24e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d70d3e032f6c5c02f26d8bbc3339e415d038a0ac01f631c558666d175fc04dc7"}