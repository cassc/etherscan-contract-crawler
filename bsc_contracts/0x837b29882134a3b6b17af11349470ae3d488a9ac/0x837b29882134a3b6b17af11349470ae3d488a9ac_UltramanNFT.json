{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.8;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    \r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n  \r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: \u7121\u52b9\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9ID\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n   \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n   \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"\u8ffd\u52a0\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"\u6e1b\u7b97\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"\u4e57\u7b97\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"\u30bc\u30ed\u9664\u7b97\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"\u30bc\u30ed\u3092\u6cd5\u3068\u3059\u308b\");\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"\u4f4e\u30ec\u30d9\u30eb\u306e\u547c\u3073\u51fa\u3057\u304c\u5931\u6557\u3057\u307e\u3057\u305f\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"\u5024\u3092\u6307\u5b9a\u3057\u305f\u4f4e\u30ec\u30d9\u30eb\u306e\u547c\u3073\u51fa\u3057\u304c\u5931\u6557\u3057\u307e\u3057\u305f\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"\u901a\u8a71\u306e\u30d0\u30e9\u30f3\u30b9\u304c\u4e0d\u5341\u5206\");\r\n        require(isContract(target), \"\u975e\u5951\u7d04\u3078\u306e\u547c\u3073\u51fa\u3057\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary EnumerableMap {\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        MapEntry[] _entries;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { \r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) {\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1;\r\n            map._entries.pop();\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"\u7bc4\u56f2\u5916\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        if (keyIndex == 0) return (false, 0);\r\n        return (true, map._entries[keyIndex - 1]._value);\r\n    }\r\n\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, \"\u5b58\u5728\u3057\u306a\u3044\u30ad\u30fc\");\r\n        return map._entries[keyIndex - 1]._value;\r\n    }\r\n\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage);\r\n        return map._entries[keyIndex - 1]._value;\r\n    }\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n   \r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint160(uint256(value))));\r\n    }\r\n\r\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\r\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\r\n        return (success, address(uint160(uint256(value))));\r\n    }\r\n\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\r\n    }\r\n\r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\r\n    }\r\n}\r\n\r\n\r\nlibrary EnumerableSet {\r\n\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { \r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; \r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"\u7bc4\u56f2\u5916\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/**\r\n*\r\n* \u79c1\u305f\u3061\u306f\u5927\u304d\u306a\u79fb\u4f4f\u306e\u6642\u4ee3\u306b\u3044\u307e\u3059. \u307e\u3059\u307e\u3059\u591a\u304f\u306e\u8cc7\u7523\u3001\u7279\u306b\u30c8\u30c3\u30d7IP\u3068\u53ce\u96c6\u54c1\u304c\u3001\u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30fc\u30f3NFT\u306b\u79fb\u884c\u3057\u59cb\u3081\u3066\u3044\u307e\u3059. \r\n* \u3053\u308c\u306f\u30c7\u30b8\u30bf\u30eb\u6642\u4ee3\u306e\u5fc5\u7136\u7684\u306a\u50be\u5411\u3067\u3059. \u3053\u308c\u306f\u3001\u30b3\u30ec\u30af\u30bf\u30fc\u304c\u5fc5\u8981\u3068\u3059\u308b\u307e\u3063\u305f\u304f\u65b0\u3057\u3044\u4e16\u754c\u3067\u3059.\r\n* \u91cd\u304f\u3066\u4e9b\u7d30\u3067\u5909\u66f4\u304c\u96e3\u3057\u3044\u30aa\u30d5\u30e9\u30a4\u30f3ID\u304b\u3089\u81ea\u5206\u81ea\u8eab\u3092\u5206\u96e2\u3059\u308b\u307e\u3063\u305f\u304f\u65b0\u3057\u3044\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3059. \r\n* \u30b3\u30ec\u30af\u30bf\u30fc\u304c\u672c\u5f53\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u306e\u306f\u3001NFT\u306e\u6b74\u53f2\u7684\u5730\u4f4d\u3001\u5e0c\u5c11\u6027\u3001\u672c\u8cea\u7684\u4fa1\u5024\u3001IP\u306e\u5f71\u97ff\u3001\u8cc7\u7523\u52b9\u679c\u3001\u9769\u65b0\u306a\u3069\u306e\u7279\u6027\u3067\u3059.\r\n* \u3053\u308c\u3089\u306e\u7279\u6027\u304c\u3053\u308c\u3089\u306eNFT\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4eba\u3005\u306e\u8996\u91ce\u306b\u5165\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30a6\u30eb\u30c8\u30e9\u30de\u30f3\u30af\u30ea\u30d7\u30c8\u306f\u305d\u3046\u3067\u3059. \u4eba\u6c17\u304c\u3042\u308a\u307e\u3059.\r\n* \u30af\u30ea\u30d7\u30c8\u30a2\u30fc\u30c8\u306e\u5206\u91ce\u3067\u6bce\u65e5\u65b0\u3057\u3044\u4f1d\u8aac\u304c\u751f\u307e\u308c\u3001\u30a6\u30eb\u30c8\u30e9\u30de\u30f3\u30af\u30ea\u30d7\u30c8\u306f\u6700\u8fd1\u6700\u3082\u7729\u3057\u3044\u4f1d\u8aac\u3067\u3059.\r\n*/\r\n\r\n/**\r\n * @title \u975e\u4ee3\u66ff\u30c8\u30fc\u30af\u30f3\u6a19\u6e96\u306e\u57fa\u672c\u7684\u306a\u5b9f\u88c5\r\n * @dev \u898b\u308b https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract UltramanNFT is ERC165, IERC721 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n    using Strings for uint256;\r\n\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\r\n\r\n    EnumerableMap.UintToAddressMap private _tokenOwners;\r\n\r\n    struct MultiSignature{\r\n        address addr1;\r\n        address addr2;\r\n        uint256 key1;\r\n        uint256 key2;\r\n    }\r\n\r\n    struct NftAttr{\r\n        uint256 code;\r\n        uint256 index;\r\n    }\r\n\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n    mapping (address => bool) private _isBlackListed;\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n    mapping (address => MultiSignature) private _multiSignature;\r\n    mapping (uint256 => NftAttr) private _nftInfo;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    string private _baseURI;\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    bool private _paused = false;\r\n    bool private _castingStop=false;\r\n    address private _creator;\r\n   \r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"\u4e2d\u65ad\u3059\u308b\");\r\n        _;\r\n    }\r\n\r\n    modifier isOfficial() {\r\n        require(_creator==msg.sender, \"\u516c\u5f0f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\");\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        _name = \"Ultraman NFT\";\r\n        _symbol = \"UNFT\";\r\n        _creator = msg.sender;\r\n\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n   \r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n   \r\n    function balanceOf(address owner) public override view returns (uint256) {\r\n        require(owner != address(0), \"\u30bc\u30ed\u30a2\u30c9\u30ec\u30b9\u306e\u6240\u6709\u8005\u30af\u30a8\u30ea\");\r\n        return _holderTokens[owner].length();\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public override view returns (address) {\r\n        return _tokenOwners.get(tokenId, \"\u5b58\u5728\u3057\u306a\u3044\u30c8\u30fc\u30af\u30f3\u306e\u6240\u6709\u8005\u30af\u30a8\u30ea\");\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n        require(_exists(tokenId), \"\u5b58\u5728\u3057\u306a\u3044\u30c8\u30fc\u30af\u30f3\u306eURI\u30af\u30a8\u30ea\");\r\n\r\n        string memory base = baseURI();\r\n\r\n        if (bytes(base).length == 0) {\r\n            return tokenId.toString();\r\n        }\r\n        return string(abi.encodePacked(base,\"/ipfs/\",tokenId.toString()));\r\n    }\r\n\r\n    function baseURI() public view returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n   \r\n    function setBaseURI(string memory baseURI_) public isOfficial returns(bool){\r\n        _baseURI = baseURI_;\r\n        return true;\r\n    }\r\n\r\n    function setSW(uint8 setType,bool val) public isOfficial returns(bool){\r\n        if(setType == 1){\r\n            _paused = val;\r\n        }else if(setType == 2){\r\n            _castingStop = val;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n        return _holderTokens[owner].at(index);\r\n    }\r\n\r\n    function tokenByPage(uint256 page) public view returns (uint256[] memory) {\r\n        uint256[] memory tokens = new uint256[](20);\r\n        uint count = _holderTokens[_msgSender()].length();\r\n        uint start = page.mul(20);\r\n        for(uint i=0;i<20;i++){\r\n            if(start+i<count){\r\n                tokens[i]=_holderTokens[_msgSender()].at(start+i);\r\n            }\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    function nftInfo(uint256 tokenId) external view returns (uint256 code,uint256 index) {\r\n        require(_exists(tokenId), \"\u30bc\u30ed\u30a2\u30c9\u30ec\u30b9\u306e\u6240\u6709\u8005\u30af\u30a8\u30ea\");\r\n        code = _nftInfo[tokenId].code;\r\n        index = _nftInfo[tokenId].index;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenOwners.length();\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256) {\r\n        (uint256 tokenId, ) = _tokenOwners.at(index);\r\n        return tokenId;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public override whenNotPaused{\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"\u73fe\u5728\u306e\u6240\u6709\u8005\u3078\u306e\u627f\u8a8d\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"\u627f\u8a8d\u3059\u308b\u767a\u4fe1\u8005\u306f\u6240\u6709\u8005\u3067\u306f\u306a\u304f\u3001\u3059\u3079\u3066\u306e\u4eba\u306b\u627f\u8a8d\u3055\u308c\u3066\u3044\u308b\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public override view returns (address) {\r\n        require(_exists(tokenId), \"\u5b58\u5728\u3057\u306a\u3044\u30c8\u30fc\u30af\u30f3\u306e\u627f\u8a8d\u3055\u308c\u305f\u30af\u30a8\u30ea\");\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public override whenNotPaused{\r\n        require(operator != _msgSender(), \"\u767a\u4fe1\u8005\u306b\u627f\u8a8d\u3059\u308b\");\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public override view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public override whenNotPaused{\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"\u8ee2\u9001\u306e\u767a\u4fe1\u8005\u306f\u6240\u6709\u8005\u306b\u3088\u3063\u3066\u627f\u8a8d\u3055\u308c\u3066\u3044\u307e\u305b\u3093\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override whenNotPaused{\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override whenNotPaused{\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"\u8ee2\u9001\u306e\u767a\u4fe1\u8005\u306f\u6240\u6709\u8005\u3067\u3082\u627f\u8a8d\u3055\u308c\u3066\u3044\u307e\u305b\u3093\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual whenNotPaused{\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721\u4ee5\u5916\u306e\u30ec\u30b7\u30fc\u30d0\u30fc\u5b9f\u88c5\u8005\u3078\u306e\u8ee2\u9001\");\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _tokenOwners.contains(tokenId);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"\u5b58\u5728\u3057\u306a\u3044\u30c8\u30fc\u30af\u30f3\u306e\u6f14\u7b97\u5b50\u30af\u30a8\u30ea\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 tokenId) internal whenNotPaused {\r\n        require(ownerOf(tokenId) == from, \"\u6240\u6709\u3057\u3066\u3044\u306a\u3044\u30c8\u30fc\u30af\u30f3\u306e\u8ee2\u9001\");\r\n        require(to != address(0), \"\u30bc\u30ed\u30a2\u30c9\u30ec\u30b9\u306b\u8ee2\u9001\");\r\n        require(_isBlackListed[from]==false, \"\u30ea\u30ab\u30d0\u30ea\u30fc\");\r\n        _approve(address(0), tokenId);\r\n        _holderTokens[from].remove(tokenId);\r\n        _holderTokens[to].add(tokenId);\r\n        _tokenOwners.set(tokenId, to);\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool)\r\n    {\r\n        if (!isContract(to)) {\r\n            return true;\r\n        }\r\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ), \"ERC721\u4ee5\u5916\u306e\u30ec\u30b7\u30fc\u30d0\u30fc\u5b9f\u88c5\u8005\u3078\u306e\u8ee2\u9001\");\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n    \r\n    \r\n    function _approve(address to, uint256 tokenId) private whenNotPaused{\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function Casting(uint256 code,uint256 nftIndex_,address to,uint256 tokenId,uint8 v,bytes32 r,bytes32 s) public whenNotPaused {\r\n        require(nftIndex_>=1000&&nftIndex_<=1004, \"index \u57280-4\");\r\n        require(to != address(0), \"\u30bc\u30ed\u30a2\u30c9\u30ec\u30b9\u3078\u306e\u30ad\u30e3\u30b9\u30c8\");\r\n        require(!_exists(tokenId), \"\u30c8\u30fc\u30af\u30f3\u306f\u3059\u3067\u306b\u92f3\u9020\u3055\u308c\u3066\u3044\u307e\u3059\");\r\n        require(!_castingStop, \"\u30ad\u30e3\u30b9\u30c8\u3092\u505c\u6b62\u3057\u307e\u3059\");\r\n        require(_nftInfo[tokenId].index==0, \"\u30ad\u30e3\u30b9\u30c8\u3092\u505c\u6b62\u3057\u307e\u3059\");\r\n        if(_creator!=_msgSender()){\r\n            to = _msgSender();\r\n        }\r\n        require(verify(to,code,nftIndex_,tokenId,v,r,s), \"\u7121\u52b9\u306a\u30ad\u30e3\u30b9\u30c8\");\r\n        _holderTokens[to].add(tokenId);\r\n        _tokenOwners.set(tokenId, to);\r\n        _nftInfo[tokenId] = NftAttr(code,nftIndex_);\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function verify(address to,uint256 code,uint256 nftIndex_,uint256 tokenId,uint8 v,bytes32 r,bytes32 s) private view returns(bool){\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            code.toString(),\r\n            nftIndex_.toString(),\r\n            tokenId.toString(),\r\n            uint256(to).toString()\r\n            ));\r\n        return ecrecover(toEthSignedMessageHash(hash), v, r, s)==_creator;\r\n    }\r\n\r\n    function toEthSignedMessageHash(bytes32 message) private pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19 Binance Smart Chain Signed Message For Ultraman NFT:\\n32\", message));\r\n    }\r\n\r\n    function synthesis(uint256 tokenId,uint256 tokenId1,uint256 tokenId2,uint256 tokenId3,uint256 tokenId4) public returns(bool){\r\n        require(ownerOf(tokenId1)==_msgSender()&&ownerOf(tokenId2)==_msgSender()&&ownerOf(tokenId3)==_msgSender()\r\n            &&ownerOf(tokenId4)==_msgSender(), \"\u7121\u52b9\u306a\u6240\u6709\u8005\");\r\n        require(_nftInfo[tokenId1].code ==_nftInfo[tokenId2].code\r\n            &&_nftInfo[tokenId2].code ==_nftInfo[tokenId3].code\r\n            &&_nftInfo[tokenId3].code ==_nftInfo[tokenId4].code, \"\u7121\u52b9\u306a\u6240\u6709\u8005\");\r\n        require(!_exists(tokenId), \"\u30c8\u30fc\u30af\u30f3\u306f\u3059\u3067\u306b\u92f3\u9020\u3055\u308c\u3066\u3044\u307e\u3059\");\r\n\r\n        _burn(tokenId1);\r\n        _burn(tokenId2);\r\n        _burn(tokenId3);\r\n        _burn(tokenId4);\r\n\r\n        _holderTokens[_msgSender()].add(tokenId);\r\n        _tokenOwners.set(tokenId, _msgSender());\r\n        _nftInfo[tokenId] = NftAttr(_nftInfo[tokenId1].code,1000);\r\n        emit Transfer(address(1), _msgSender(),tokenId);\r\n        return true;\r\n    }\r\n\r\n    function _burn(uint256 tokenId) private {\r\n        address owner = ownerOf(tokenId);\r\n        _approve(address(0), tokenId);\r\n        _holderTokens[owner].remove(tokenId);\r\n        _tokenOwners.remove(tokenId);\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function transferOwner(address addr,uint256 key_) public returns(bool){\r\n        require(addr!=address(0),\"\u30bc\u30ed\u30a2\u30c9\u30ec\u30b9\u3092\u8a8d\u8a3c\u3067\u304d\u307e\u305b\u3093\");\r\n        require(key_>99999,\"\u7121\u52b9\u30ad\u30fc\");\r\n        MultiSignature memory _multiSignatureTemp = _multiSignature[_creator];\r\n\r\n        if(_multiSignatureTemp.addr1 == _msgSender()){\r\n            if(_multiSignatureTemp.key2 == key_){\r\n                _multiSignature[_creator].key1 = 0;\r\n                _multiSignature[_creator].key2 = 0;\r\n                _multiSignature[addr] = _multiSignature[_creator];\r\n                _creator = addr;\r\n            }else{\r\n                _multiSignature[_creator].key1 = key_;\r\n            }\r\n        }else if(_multiSignatureTemp.addr2 == _msgSender()){\r\n            if(_multiSignatureTemp.key1 == key_){\r\n                _multiSignature[_creator].key1 = 0;\r\n                _multiSignature[_creator].key2 = 0;\r\n                _multiSignature[addr] = _multiSignature[_creator];\r\n                _creator = addr;\r\n            }else{\r\n                _multiSignature[_creator].key2 = key_;\r\n            }\r\n        }else{\r\n            assert(false);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setBlackList(address _evilAddr,bool isBlock) public isOfficial {\r\n        _isBlackListed[_evilAddr] = isBlock;\r\n    }\r\n\r\n    function setMultiSignature(address addr1, address addr2) public isOfficial returns (bool) {\r\n        require(addr1!=address(0)&&addr2!=address(0)&&_creator==_msgSender(),\"\u30bc\u30ed\u30a2\u30c9\u30ec\u30b9\u3092\u8a8d\u8a3c\u3067\u304d\u307e\u305b\u3093\");\r\n        require(_multiSignature[_msgSender()].addr1==address(0)&&_multiSignature[_msgSender()].addr2==address(0),\"\u8a2d\u5b9a\u3092\u7e70\u308a\u8fd4\u3059\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\");\r\n        _multiSignature[_msgSender()] = MultiSignature(addr1,addr2,0,0);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftIndex_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"Casting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlock\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr2\",\"type\":\"address\"}],\"name\":\"setMultiSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"setType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setSW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId4\",\"type\":\"uint256\"}],\"name\":\"synthesis\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"tokenByPage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"key_\",\"type\":\"uint256\"}],\"name\":\"transferOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UltramanNFT", "CompilerVersion": "v0.6.8+commit.0bbfe453", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c79f5d8e429644895a7870990ec3b7f1d5659e3b60fcd2eea72e6226f3146f86"}