{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TradingFeeRebate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./interfaces/ITradingFeeClaimedRecord.sol\\\";\\nimport \\\"./interfaces/ICakePool.sol\\\";\\nimport \\\"./interfaces/IPancakeProfile.sol\\\";\\n\\ncontract TradingFeeRebate is Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev cakePool address\\n    address public immutable cakePoolAddress;\\n\\n    /// @dev pancakeProfile address\\n    address public immutable pancakeProfileAddress;\\n\\n    /// @dev the maximum value between start and claim time in a campaign\\n    uint256 public maxCampaignPeriod;\\n\\n    /// @dev the minimum value between claim and claim end time in a campaign\\n    uint256 public minCampaignClaimPeriod;\\n\\n    /// @dev the maximum value between claim and claim end time in a campaign\\n    uint256 public maxCampaignClaimPeriod;\\n\\n    /// @dev this is the threshold of user's CAKE period in CakePool\\n    uint256 thresholdLockTime;\\n\\n    /// @dev this is the threshold of user's CAKE amount in CakePool\\n    uint256 thresholdLockAmount;\\n\\n    /// @dev this is the flag whether user's profile activated is needed\\n    bool needProfileIsActivated;\\n\\n    /// @dev this is the minimum value of trading fee, lower than this value will not count into totalTradingFee\\n    uint256 public minAmountUSD;\\n\\n    /// @notice Represents an incentive\\n    struct Incentive {\\n        uint256 totalRewardUnclaimed;\\n        uint256 totalReward;\\n        uint256 totalTradingFee;\\n        bytes32 proofRoot;\\n        uint256 campaignStart;\\n        uint256 campaignClaimTime;\\n        uint256 campaignClaimEndTime;\\n        bool isActivated;\\n        bool isDynamicReward;\\n    }\\n\\n    /// @notice Represents an incentive reward\\n    struct IncentiveReward {\\n        address rewardToken;\\n        uint256 rewardPrice;\\n        uint256 rewardToLockRatio;\\n        uint256 rewardFeeRatio;\\n    }\\n\\n    uint256 internal constant REWARD_RATIO_DENOMINATOR = 1e12;\\n\\n    /// @dev string refers to the value of campaignId\\n    mapping(string => Incentive) public incentives;\\n\\n    /// @dev string refers to the value of campaignId\\n    mapping(string => IncentiveReward) public incentiveRewards;\\n\\n    /// @dev array of campaign Ids of all incentives\\n    string[] private incentiveCampaignIds;\\n\\n    /// @dev mapping [user][token][claimed]\\n    mapping(address => mapping(address => uint256)) public userClaimedRecords;\\n\\n    /// @dev mapping [incentive][user][bool]\\n    mapping(string => mapping(address => bool)) public userClaimedIncentives;\\n\\n    /// @dev address of tradingFeeClaimedRecord\\n    address public tradingFeeClaimedRecord;\\n\\n    event IncentiveCreated(string campaignId, address rewardToken, uint256 campaignStart, uint256 campaignClaimTime, uint256 campaignClaimEndTime);\\n    event IncentivePrepared(string campaignId, uint256 totalTradingFee);\\n    event IncentiveRewardDeposited(string campaignId, uint256 amount, bool isDynamicReward);\\n    event IncentiveActivated(string campaignId);\\n    event RewardClaimed(string campaignId, address indexed sender, uint256 amount);\\n    event WithdrawAll(string campaignId, uint256 amount);\\n    event CampaignPeriodParamsUpdated(uint256 maxPeriod, uint256 minClaimPeriod, uint256 maxClaimPeriod);\\n    event UserQualificationUpdated(uint256 thresholdLockTime, uint256 thresholdLockAmount, bool needProfileIsActivated, uint256 minAmountUSD);\\n    event RewardTokenParamsUpdated(string campaignId, address indexed rewardToken, uint256 price, uint256 toLockRatio, uint256 feeRatio);\\n    event Pause();\\n    event Unpause();\\n    event TradingFeeClaimedRecordContractUpdated(address indexed topTradersExternal);\\n\\n    constructor(\\n        address _cakePoolAddress,\\n        address _pancakeProfileAddress\\n    ) {\\n        cakePoolAddress = _cakePoolAddress;\\n        pancakeProfileAddress = _pancakeProfileAddress;\\n\\n        // init max period\\n        maxCampaignPeriod = 30 days;\\n        // init min claim period\\n        minCampaignClaimPeriod = 10 minutes;\\n        // init max claim period\\n        maxCampaignClaimPeriod = 30 days;\\n    }\\n\\n    /// @dev Create an incentive, can be called by owner only\\n    /// @param _campaignId the campaignId of the incentive\\n    /// @param _rewardToken the reward token of the incentive\\n    /// @param _rewardPrice the reward price of the incentive\\n    /// @param _rewardToLockRatio the reward to lock ratio of the incentive\\n    /// @param _rewardFeeRatio the reward fee ratio of the incentive\\n    /// @param _campaignStart the incentive start time\\n    /// @param _campaignClaimTime the incentive end time\\n    /// @param _campaignClaimEndTime the incentive end claim time, after this time user can't reward this incentive\\n    function createIncentive(\\n        string calldata _campaignId,\\n        address _rewardToken,\\n        uint256 _rewardPrice,\\n        uint256 _rewardToLockRatio,\\n        uint256 _rewardFeeRatio,\\n        uint256 _campaignStart,\\n        uint256 _campaignClaimTime,\\n        uint256 _campaignClaimEndTime\\n    ) external onlyOwner {\\n        require(_campaignStart > block.timestamp, \\\"campaignStart must be exceed than now\\\");\\n        require(_campaignClaimTime > _campaignStart, \\\"campaignClaimTime must be exceed than campaignStart\\\");\\n        require(_campaignStart < maxCampaignPeriod+block.timestamp, \\\"period too long\\\");\\n        require(_campaignClaimTime - _campaignStart < maxCampaignPeriod, \\\"period too long\\\");\\n        if (_campaignClaimEndTime > 0) {\\n            require(_campaignClaimEndTime - _campaignClaimTime > minCampaignClaimPeriod, \\\"claim period too short\\\");\\n            require(_campaignClaimEndTime - _campaignClaimTime < maxCampaignClaimPeriod, \\\"claim period too long\\\");\\n        }\\n        Incentive storage incentiveInstance = incentives[_campaignId];\\n        require(incentiveInstance.campaignClaimTime == 0, \\\"incentive exists\\\");\\n        incentiveInstance.totalRewardUnclaimed = 0;\\n        incentiveInstance.totalReward = 0;\\n        incentiveInstance.totalTradingFee = 0;\\n        incentiveInstance.proofRoot = bytes32(0);\\n        incentiveInstance.campaignStart = _campaignStart;\\n        incentiveInstance.campaignClaimTime = _campaignClaimTime;\\n        incentiveInstance.campaignClaimEndTime = _campaignClaimEndTime;\\n        incentiveInstance.isActivated = false;\\n        incentiveInstance.isDynamicReward = false;\\n        require(_rewardToken != address(0), \\\"reward token address non-exist\\\");\\n        require(_rewardPrice > 0, \\\"reward price has to exceeds than 0\\\");\\n        require(_rewardToLockRatio > 0 && _rewardToLockRatio <= REWARD_RATIO_DENOMINATOR, \\\"ratio should less than the max value\\\");\\n        require(_rewardFeeRatio > 0 && _rewardFeeRatio <= REWARD_RATIO_DENOMINATOR, \\\"ratio should less than the max value\\\");\\n        IncentiveReward storage incentiveRewardInstance = incentiveRewards[_campaignId];\\n        incentiveRewardInstance.rewardToken = _rewardToken;\\n        incentiveRewardInstance.rewardPrice = _rewardPrice;\\n        incentiveRewardInstance.rewardToLockRatio = _rewardToLockRatio;\\n        incentiveRewardInstance.rewardFeeRatio = _rewardFeeRatio;\\n\\n        // push into Id array\\n        incentiveCampaignIds.push(_campaignId);\\n\\n        emit IncentiveCreated(_campaignId, _rewardToken, _campaignStart, _campaignClaimTime, _campaignClaimEndTime);\\n    }\\n\\n    /// @dev Prepare a created incentive, can be called by owner only\\n    /// @param _campaignId the campaignId of the incentive\\n    /// @param _totalTradingFee the total amountFeeUSD from swap transactions in this period of incentive\\n    /// @param _proofRoot the proof root of the merkle tree\\n    function prepareIncentive(\\n        string calldata _campaignId,\\n        uint256 _totalTradingFee,\\n        bytes32 _proofRoot\\n    ) external onlyOwner {\\n        Incentive storage incentiveInstance = incentives[_campaignId];\\n        require(incentiveInstance.campaignClaimTime != 0, \\\"incentive non-exist\\\");\\n        require(!incentiveInstance.isActivated, \\\"incentive activated\\\");\\n        require(_totalTradingFee > 0, \\\"total volume should exceeds 0\\\");\\n        incentiveInstance.totalTradingFee = _totalTradingFee;\\n        incentiveInstance.proofRoot = _proofRoot;\\n\\n        emit IncentivePrepared(_campaignId, _totalTradingFee);\\n    }\\n\\n    /// @dev Deposit reward token into a created incentive, can be called by owner only\\n    /// @param _campaignId the campaignId of the incentive\\n    /// @param _amount the total number of reward transfer into this contract\\n    /// @param _isDynamicReward the flag of dynamic incentive or not\\n    function depositIncentiveReward(string calldata _campaignId, uint256 _amount, bool _isDynamicReward) external onlyOwner {\\n        Incentive storage incentiveInstance = incentives[_campaignId];\\n        IncentiveReward memory incentiveRewardInstance = incentiveRewards[_campaignId];\\n        require(incentiveInstance.campaignClaimTime != 0, \\\"incentive non-exist\\\");\\n        require(!incentiveInstance.isActivated || incentiveInstance.isDynamicReward, \\\"incentive activated\\\");\\n        if (_isDynamicReward) {\\n            require(block.timestamp >= incentiveInstance.campaignClaimTime, \\\"incentive non-ended\\\");\\n            require(incentiveInstance.totalReward + _amount <= incentiveInstance.totalTradingFee * incentiveRewardInstance.rewardFeeRatio / REWARD_RATIO_DENOMINATOR, \\\"dynamic reward too much\\\");\\n            incentiveInstance.isDynamicReward = _isDynamicReward;\\n        }\\n        incentiveInstance.totalRewardUnclaimed = incentiveInstance.totalRewardUnclaimed + _amount;\\n        incentiveInstance.totalReward = incentiveInstance.totalReward + _amount;\\n\\n        // reward transfer\\n        IERC20(incentiveRewardInstance.rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit IncentiveRewardDeposited(_campaignId, _amount, _isDynamicReward);\\n    }\\n\\n    /// @dev Activate a created incentive, can be called by owner only\\n    /// @param _campaignId the campaignId of the incentive\\n    function activateIncentive(string calldata _campaignId) external onlyOwner {\\n        Incentive storage incentiveInstance = incentives[_campaignId];\\n        require(incentiveInstance.proofRoot != bytes32(0), \\\"incentive proof empty\\\");\\n        require(incentiveInstance.campaignClaimTime != 0, \\\"incentive non-exist\\\");\\n        require(incentiveInstance.totalReward > 0, \\\"incentive reward empty\\\");\\n        require(!incentiveInstance.isActivated, \\\"incentive activated\\\");\\n\\n        // activate incentive\\n        incentiveInstance.isActivated = true;\\n\\n        emit IncentiveActivated(_campaignId);\\n    }\\n\\n    /// @dev Calculate a user can claim reward base on input volume, not practical he can claim in number.\\n    /// This is not going to verify with merkle proof.\\n    /// @param _campaignId the campaignId of the incentive\\n    /// @param _selfTradingFee the volume in the period of the incentive\\n    /// @return amount calculate by totalReward * selfTradingFee / totalTradingFee\\n    function canClaim(string calldata _campaignId, address _sender, uint256 _selfTradingFee) public view returns (uint256 amount) {\\n        if (ITradingFeeClaimedRecord(tradingFeeClaimedRecord).hasClaimedTopTraders(_sender)) {\\n            amount = 0;\\n        } else if (minAmountUSD > 0 && _selfTradingFee < minAmountUSD) {\\n            amount = 0;\\n        } else {\\n            if (_checkQualified(_campaignId, _sender) && !userClaimedIncentives[_campaignId][_sender]) {\\n                Incentive memory incentiveInstance = incentives[_campaignId];\\n\\n                if (incentiveInstance.totalTradingFee > 0) {\\n                    if (incentiveInstance.campaignClaimEndTime == 0 || incentiveInstance.campaignClaimEndTime > block.timestamp ) {\\n\\n                        IncentiveReward memory incentiveRewardInstance = incentiveRewards[_campaignId];\\n\\n                        uint256 amountUSD;\\n                        uint8 rewardTokenDecimal = IERC20Metadata(incentiveRewardInstance.rewardToken).decimals();\\n\\n                        // calculate the reward\\n                        if (!incentiveInstance.isDynamicReward) {\\n                            amountUSD = _selfTradingFee * incentiveInstance.totalReward  / incentiveInstance.totalTradingFee;\\n                        } else {\\n                            amountUSD = _selfTradingFee * incentiveRewardInstance.rewardFeeRatio / REWARD_RATIO_DENOMINATOR;\\n                        }\\n\\n                        amount = amountUSD * (10 ** rewardTokenDecimal) / incentiveRewardInstance.rewardPrice;\\n\\n                        (, , , , , , , , uint256 lockAmount) = ICakePool(cakePoolAddress).userInfo(_sender);\\n\\n                        if (amount > lockAmount * incentiveRewardInstance.rewardToLockRatio / REWARD_RATIO_DENOMINATOR) {\\n                            amount = lockAmount * incentiveRewardInstance.rewardToLockRatio / REWARD_RATIO_DENOMINATOR;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Return array of all the reward user can claim base on input volumes, not practical he can claim in number.\\n    /// @param _campaignIds the array of campaignId of the incentive\\n    /// @param _selfTradingFees the array of trading fee in the period of the incentive\\n    function canClaimMulti(string[] calldata _campaignIds, address[] calldata _selfAddresses, uint256[] calldata _selfTradingFees) external view returns (uint256[] memory amounts) {\\n        require(_campaignIds.length == _selfTradingFees.length, \\\"parameters length not same\\\");\\n\\n        // calculate each amount in array\\n        uint256 len = _campaignIds.length;\\n        amounts = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            amounts[i] = canClaim(_campaignIds[i], _selfAddresses[i], _selfTradingFees[i]);\\n        }\\n    }\\n\\n    /// @dev A user can claim reward when the incentive is ended\\n    /// @param _campaignId the campaignId of the incentive\\n    /// @param _merkleProof the merkle proof from user's address and volume\\n    /// @param _selfTradingFee the trading fee in the period of the incentive\\n    function claimReward(string calldata _campaignId, bytes32[] calldata _merkleProof, uint256 _selfTradingFee) public whenNotPaused {\\n        require(_selfTradingFee > 0, \\\"volume can't be negative\\\");\\n        Incentive storage incentiveInstance = incentives[_campaignId];\\n        require(incentiveInstance.campaignClaimTime < block.timestamp, \\\"too early\\\");\\n        require(incentiveInstance.isActivated, \\\"incentive not activated\\\");\\n        require(incentiveInstance.totalReward > 0, \\\"incentive is non-exist\\\");\\n        if (incentiveInstance.campaignClaimEndTime > 0) {\\n            require(incentiveInstance.campaignClaimEndTime > block.timestamp, \\\"incentive has over claim end time\\\");\\n        }\\n        require(!userClaimedIncentives[_campaignId][msg.sender], \\\"user already claimed this incentive\\\");\\n        bytes32 leaf = _encodedHash(msg.sender, _selfTradingFee);\\n        require(MerkleProof.verify(_merkleProof, incentiveInstance.proofRoot, leaf), \\\"invalid merkle proof\\\");\\n\\n        // calculate the reward\\n        uint256 amount = canClaim(_campaignId, msg.sender, _selfTradingFee);\\n        require(amount > 0, \\\"incentive reward should exceed than 0\\\");\\n        require(incentiveInstance.totalRewardUnclaimed >= amount, \\\"incentive balance is not enough\\\");\\n\\n        // update incentive mapping\\n        incentiveInstance.totalRewardUnclaimed = incentiveInstance.totalRewardUnclaimed - amount;\\n\\n        IncentiveReward memory incentiveRewardInstance = incentiveRewards[_campaignId];\\n\\n        address rewardToken = incentiveRewardInstance.rewardToken;\\n\\n        // update record mapping\\n        userClaimedRecords[msg.sender][rewardToken] += amount;\\n\\n        // update user claimed incentives\\n        userClaimedIncentives[_campaignId][msg.sender] = true;\\n\\n        // update hasClaimed\\n        ITradingFeeClaimedRecord(tradingFeeClaimedRecord).updateHasClaimedRebate(msg.sender);\\n\\n        // reward transfer\\n        IERC20(rewardToken).safeTransfer(msg.sender, amount);\\n\\n        emit RewardClaimed(_campaignId, msg.sender, amount);\\n    }\\n\\n    /// @dev A user can claim reward from incentive array when they are all ended\\n    /// @param _campaignIds the array of campaignId of the incentive\\n    /// @param _merkleProofs the array of merkle proof from user's address and volume\\n    /// @param _selfTradingFees the array of trading fee in the period of the incentive\\n    function claimRewardMulti(string[] calldata _campaignIds, bytes32[][] calldata _merkleProofs, uint256[] calldata _selfTradingFees) external {\\n        uint256 len = _campaignIds.length;\\n        require(len == _merkleProofs.length, \\\"parameters length not same\\\");\\n        require(len == _selfTradingFees.length, \\\"parameters length not same\\\");\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            claimReward(_campaignIds[i], _merkleProofs[i], _selfTradingFees[i]);\\n        }\\n    }\\n\\n    /// @dev Withdraw all the reward in some cases, can be called by owner only\\n    /// @param _campaignId the campaignId of the incentive\\n    function withdrawAll(string calldata _campaignId) external onlyOwner {\\n        Incentive storage incentiveInstance = incentives[_campaignId];\\n        require(incentiveInstance.totalRewardUnclaimed > 0, \\\"incentive balance is empty\\\");\\n        uint256 amount = incentiveInstance.totalRewardUnclaimed;\\n        incentiveInstance.totalRewardUnclaimed = 0;\\n        incentiveInstance.totalReward -= amount;\\n        incentiveInstance.isActivated = false;\\n        require(amount >= 0, \\\"incentive unclaimed reward empty\\\");\\n        IncentiveReward memory incentiveRewardInstance = incentiveRewards[_campaignId];\\n\\n        // reward transfer\\n        IERC20(incentiveRewardInstance.rewardToken).safeTransfer(msg.sender, amount);\\n\\n        emit WithdrawAll(_campaignId, amount);\\n    }\\n\\n    /// @dev Update the period of campaign between start and claim time.\\n    /// @param _maxPeriod the value of maxCampaignPeriod\\n    function updateCampaignPeriodParams(uint256 _maxPeriod, uint256 _minClaimPeriod, uint256 _maxClaimPeriod) external onlyOwner {\\n        require(_maxClaimPeriod > _minClaimPeriod, \\\"max claim period should larger than min claim period\\\");\\n        maxCampaignPeriod = _maxPeriod;\\n        minCampaignClaimPeriod = _minClaimPeriod;\\n        maxCampaignClaimPeriod = _maxClaimPeriod;\\n\\n        emit CampaignPeriodParamsUpdated(_maxPeriod, _minClaimPeriod, _maxClaimPeriod);\\n    }\\n\\n    /// @dev Update the user qualification conditions of each incentive.\\n    /// @param _thresholdLockTime the threshold of CAKE locked period\\n    /// @param _thresholdLockAmount the threshold of CAKE locked amount\\n    /// @param _needProfileIsActivated the flag whether profile activated is needed\\n    /// @param _minAmountUSD the minimum volume that user can claim reward\\n    function updateUserQualification(\\n        uint256 _thresholdLockTime,\\n        uint256 _thresholdLockAmount,\\n        bool _needProfileIsActivated,\\n        uint256 _minAmountUSD\\n    ) external onlyOwner {\\n        thresholdLockTime = _thresholdLockTime;\\n        thresholdLockAmount = _thresholdLockAmount;\\n        needProfileIsActivated = _needProfileIsActivated;\\n        minAmountUSD = _minAmountUSD;\\n        emit UserQualificationUpdated(_thresholdLockTime, _thresholdLockAmount, _needProfileIsActivated, _minAmountUSD);\\n    }\\n\\n    /// @dev Update the price of reward token, only called by the owner.\\n    /// @param _rewardToken the address of reward token\\n    /// @param _rewardPrice the reward price of the incentive\\n    /// @param _rewardToLockRatio the reward to lock ratio of the incentive\\n    /// @param _rewardFeeRatio the reward fee ratio of the incentive\\n    function updateRewardTokenParams(string memory _campaignId, address _rewardToken, uint256 _rewardPrice, uint256 _rewardToLockRatio, uint256 _rewardFeeRatio) external onlyOwner {\\n        Incentive storage incentiveInstance = incentives[_campaignId];\\n        require(incentiveInstance.campaignClaimTime > block.timestamp, \\\"too late to update reward token parameters\\\");\\n        require(_rewardToken != address(0), \\\"reward token address non-exist\\\");\\n        uint8 rewardTokenDecimal = IERC20Metadata(_rewardToken).decimals();\\n        require(_rewardPrice > 0 && _rewardPrice < 1000000*10**rewardTokenDecimal, \\\"reward price should not be too crazy\\\");\\n        require(_rewardToLockRatio > 0 && _rewardToLockRatio <= REWARD_RATIO_DENOMINATOR, \\\"ratio should less than the max value\\\");\\n        require(_rewardFeeRatio > 0 && _rewardFeeRatio <= REWARD_RATIO_DENOMINATOR, \\\"ratio should less than the max value\\\");\\n        IncentiveReward storage incentiveRewardInstance = incentiveRewards[_campaignId];\\n        incentiveRewardInstance.rewardToken = _rewardToken;\\n        incentiveRewardInstance.rewardPrice = _rewardPrice;\\n        incentiveRewardInstance.rewardToLockRatio = _rewardToLockRatio;\\n        incentiveRewardInstance.rewardFeeRatio = _rewardFeeRatio;\\n        emit RewardTokenParamsUpdated(_campaignId, _rewardToken, _rewardPrice, _rewardToLockRatio, _rewardFeeRatio);\\n    }\\n\\n    /// @dev Update the tradingFeeClaimedRecord address\\n    /// @param _tradingFeeClaimedRecord the address of tradingFeeClaimedRecord contract\\n    function updateTradingFeeClaimedRecordContract(address _tradingFeeClaimedRecord) external onlyOwner {\\n        require(_tradingFeeClaimedRecord != address(0), \\\"tradingFeeClaimedRecord contract address should not be 0\\\");\\n        tradingFeeClaimedRecord = _tradingFeeClaimedRecord;\\n        emit TradingFeeClaimedRecordContractUpdated(_tradingFeeClaimedRecord);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state\\n     * @dev Only possible when contract not paused.\\n     */\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state\\n     * @dev Only possible when contract is paused.\\n     */\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n        emit Unpause();\\n    }\\n\\n    /// @dev CleanUp incentiveCampaignIds, erase test data, can be called by owner only\\n    function cleanUpIncentiveCampaignIds() external onlyOwner {\\n        // delete it\\n        delete incentiveCampaignIds;\\n    }\\n\\n    /// @dev return all incentive campaign Id array\\n    function getIncentiveCampaignIds() external view returns (string[] memory) {\\n        return incentiveCampaignIds;\\n    }\\n\\n    /// @dev return user total claimed reward by sender\\n    function getTotalClaimedReward(address _token, address _sender) external view returns (uint256) {\\n        return userClaimedRecords[_sender][_token];\\n    }\\n\\n    /// @dev return threshold and minAmountUSD\\n    function getUserQualification() external view returns (uint256, uint256, bool, uint256) {\\n        return (thresholdLockTime, thresholdLockAmount, needProfileIsActivated, minAmountUSD);\\n    }\\n\\n    /// @dev return encode bytes32 hash from sender address and volume\\n    function getEncodedHash(address _sender, uint256 _volume) external pure returns (bytes32) {\\n        return _encodedHash(_sender, _volume);\\n    }\\n\\n    /// @dev return if user's locked period is eligible with threshold\\n    function isEligibleLockTime(string memory _campaignId, address _sender) external view returns (bool) {\\n        Incentive memory incentiveInstance = incentives[_campaignId];\\n        (, , , , , uint256 lockEndTime, , , ) = ICakePool(cakePoolAddress).userInfo(_sender);\\n        return lockEndTime - incentiveInstance.campaignClaimTime >= thresholdLockTime;\\n    }\\n\\n    /// @dev return if user's locked amount is eligible with threshold\\n    function isEligibleLockAmount(address _sender) external view returns (bool) {\\n        (, , , , , , , , uint256 lockAmount) = ICakePool(cakePoolAddress).userInfo(_sender);\\n        return lockAmount >= thresholdLockAmount;\\n    }\\n\\n    // @dev Check if the user is qualified to claim reward\\n    function _checkQualified(string calldata _campaignId, address _sender) internal view returns (bool) {\\n        if (needProfileIsActivated) {\\n            bool isActive = IPancakeProfile(pancakeProfileAddress).getUserStatus(_sender);\\n            if (!isActive) {\\n                return false;\\n            }\\n        }\\n        Incentive memory incentiveInstance = incentives[_campaignId];\\n        (, , , , , uint256 lockEndTime, , , uint256 lockAmount) = ICakePool(cakePoolAddress).userInfo(_sender);\\n        if (\\n            lockEndTime - incentiveInstance.campaignClaimTime >= thresholdLockTime &&\\n            lockAmount >= thresholdLockAmount\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Encoded bytes32 hash from sender address and volume\\n    function _encodedHash(address _sender, uint256 _volume) internal pure returns (bytes32 hash) {\\n        hash = keccak256(bytes.concat(keccak256(abi.encodePacked(_sender, _volume))));\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITradingFeeClaimedRecord.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ITradingFeeClaimedRecord {\\n    function hasClaimedRebate(address _msgSender)\\n        external\\n        view\\n        returns (\\n            bool claimed\\n        );\\n\\n    function hasClaimedTopTraders(address _msgSender)\\n        external\\n        view\\n        returns (\\n            bool claimed\\n        );\\n\\n    /// @dev Update hasClaimed record from rebate contract\\n    /// @param _msgSender the address of user\\n    function updateHasClaimedRebate(address _msgSender) external;\\n\\n    /// @dev Update hasClaimed record from topTraders contract\\n    /// @param _msgSender the address of user\\n    function updateHasClaimedTopTraders(address _msgSender) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IPancakeProfile {\\n    /**\\n     * @dev Check the user's status for a given address\\n     */\\n    function getUserStatus(address _userAddress) external view returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICakePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICakePool {\\n    /**\\n     * @dev Get the user's userInfo from CakePool contract.\\n     */\\n    function userInfo(address _userAddress)\\n        external\\n        view\\n        returns (\\n            uint256 shares,\\n            uint256 lastDepositedTime,\\n            uint256 cakeAtLastUserAction,\\n            uint256 lastUserActionTime,\\n            uint256 lockStartTime,\\n            uint256 lockEndTime,\\n            uint256 userBoostedShare,\\n            bool locked,\\n            uint256 lockedAmount\\n        );\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cakePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeProfileAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minClaimPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxClaimPeriod\",\"type\":\"uint256\"}],\"name\":\"CampaignPeriodParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaignId\",\"type\":\"string\"}],\"name\":\"IncentiveActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaignId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignClaimTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignClaimEndTime\",\"type\":\"uint256\"}],\"name\":\"IncentiveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaignId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTradingFee\",\"type\":\"uint256\"}],\"name\":\"IncentivePrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaignId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDynamicReward\",\"type\":\"bool\"}],\"name\":\"IncentiveRewardDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaignId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaignId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toLockRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"}],\"name\":\"RewardTokenParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"topTradersExternal\",\"type\":\"address\"}],\"name\":\"TradingFeeClaimedRecordContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdLockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"needProfileIsActivated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountUSD\",\"type\":\"uint256\"}],\"name\":\"UserQualificationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaignId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_campaignId\",\"type\":\"string\"}],\"name\":\"activateIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakePoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_campaignId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_selfTradingFee\",\"type\":\"uint256\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_campaignIds\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_selfAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_selfTradingFees\",\"type\":\"uint256[]\"}],\"name\":\"canClaimMulti\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_campaignId\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_selfTradingFee\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_campaignIds\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_merkleProofs\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_selfTradingFees\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanUpIncentiveCampaignIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_campaignId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardToLockRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_campaignStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_campaignClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_campaignClaimEndTime\",\"type\":\"uint256\"}],\"name\":\"createIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_campaignId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDynamicReward\",\"type\":\"bool\"}],\"name\":\"depositIncentiveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_volume\",\"type\":\"uint256\"}],\"name\":\"getEncodedHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentiveCampaignIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getTotalClaimedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserQualification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"incentiveRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardToLockRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"incentives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRewardUnclaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTradingFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"proofRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"campaignStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"campaignClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"campaignClaimEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActivated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDynamicReward\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isEligibleLockAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_campaignId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isEligibleLockTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCampaignClaimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCampaignPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCampaignClaimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeProfileAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_campaignId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalTradingFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_proofRoot\",\"type\":\"bytes32\"}],\"name\":\"prepareIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFeeClaimedRecord\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minClaimPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxClaimPeriod\",\"type\":\"uint256\"}],\"name\":\"updateCampaignPeriodParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_campaignId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardToLockRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFeeRatio\",\"type\":\"uint256\"}],\"name\":\"updateRewardTokenParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradingFeeClaimedRecord\",\"type\":\"address\"}],\"name\":\"updateTradingFeeClaimedRecordContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thresholdLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdLockAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_needProfileIsActivated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountUSD\",\"type\":\"uint256\"}],\"name\":\"updateUserQualification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimedIncentives\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimedRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_campaignId\",\"type\":\"string\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TradingFeeRebate", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "00000000000000000000000045c54210128a065de780c4b0df3d16664f7f859e000000000000000000000000df4dbf6536201370f95e06a0f8a7a70fe40e388a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}