{"SourceCode": "{\"GEStakingCalculation.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"./GEStakingInitialize.sol\\\";\\r\\n\\r\\n contract GEStakingCalculation is GEStakingInitialize {\\r\\n    function _refPayout(address _addr, uint256 _amount) internal {\\r\\n\\t\\t    address up = useraffiliatedetails[_addr].referrer;\\r\\n        for(uint8 i = 0; i \\u003c ref_bonuses.length; i++) {\\r\\n            if(up == address(0)) break;\\r\\n            if(useraffiliatedetails[up].refs[0] \\u003e= requiredDirect[i]){ \\r\\n    \\t\\t    uint256 bonus = (_amount * ref_bonuses[i] ) / 100;\\r\\n              if(!useraffiliatedetails[_addr].isIncomeBlocked)\\r\\n              {\\r\\n                useraffiliatedetails[up].creditedLevelBonus += bonus;\\r\\n                totalLevelIncome += bonus;\\r\\n                useraffiliatedetails[up].availableLevelBonus += bonus;\\r\\n                useraffiliatedetails[up].levelWiseBonus[i] += bonus;\\r\\n              }\\r\\n              if(i\\u003cnoofleveljackpot)\\r\\n              {\\r\\n                _jackpotPayout(up, bonus,i);\\r\\n              }\\r\\n            }\\r\\n            _rewardPayout(up);\\r\\n            up = useraffiliatedetails[up].referrer;\\r\\n      }\\r\\n  }\\r\\n\\r\\n  function _jackpotPayout(address _addr, uint256 _amount,uint i) internal {\\r\\n     uint256 bonus = (_amount * jackpot_bonuses[i] ) / 100;\\r\\n     if(!useraffiliatedetails[_addr].isIncomeBlocked)\\r\\n     {\\r\\n       useraffiliatedetails[_addr].availableJackpotBonus += bonus;\\r\\n       totalJackportIncome += bonus;\\r\\n       useraffiliatedetails[_addr].levelWiseJackpotBonus[i] += bonus;\\r\\n     }\\r\\n  }\\r\\n\\r\\n  function _rewardupdation(address _addr,uint _index) internal{\\r\\n       UserAffiliateDetails storage useraffiliate = useraffiliatedetails[_addr];\\r\\n       UserRewardDetails storage userreward = userrewarddetails[_addr];\\r\\n       if(!useraffiliatedetails[_addr].isIncomeBlocked)\\r\\n       {\\r\\n          if(useraffiliate.totalBusiness\\u003e=requiredBusiness[_index]){\\r\\n            if(useraffiliate.totalReferrer\\u003e=requiredNoofId[_index]){\\r\\n                uint NoofId=0;\\r\\n                for(uint8 j = 0; j \\u003c requiredLevel[_index]; j++) {\\r\\n                    NoofId += useraffiliate.refs[j];\\r\\n                }\\r\\n                if(NoofId\\u003e=requiredNoofId[_index]){\\r\\n                    totalAwardAndReward += reward[_index];\\r\\n                    useraffiliate.availableAwardRewardBonus += reward[_index];\\r\\n                    if(_index==0){\\r\\n                      userreward.tierfirstreceived=true;\\r\\n                    }\\r\\n                    else if(_index==1){\\r\\n                      userreward.tiersecondreceived=true;\\r\\n                    }\\r\\n                    else if(_index==2){\\r\\n                      userreward.tierthirdreceived=true;\\r\\n                    }\\r\\n                    else if(_index==3){\\r\\n                      userreward.tierfourthreceived=true;\\r\\n                    }\\r\\n                    else if(_index==4){\\r\\n                      userreward.tierfifthreceived=true;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n      }\\r\\n   }\\r\\n\\r\\n   function _rewardPayout(address _addr) internal {\\r\\n        UserRewardDetails storage userreward = userrewarddetails[_addr];\\r\\n        if(userreward.tierfirstreceived==false){\\r\\n             _rewardupdation(_addr,0);\\r\\n        }\\r\\n        if(userreward.tiersecondreceived==false){\\r\\n            _rewardupdation(_addr,1);\\r\\n        }\\r\\n        if(userreward.tierthirdreceived==false){\\r\\n            _rewardupdation(_addr,2);\\r\\n        }\\r\\n        if(userreward.tierfourthreceived==false){\\r\\n            _rewardupdation(_addr,3);\\r\\n        }\\r\\n        if(userreward.tierfifthreceived==false){\\r\\n             _rewardupdation(_addr,4);\\r\\n        }\\r\\n   }\\r\\n}\\r\\n\"},\"GEStakingInitialize.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function transferFrom(address sender,address recipient,uint amount ) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value); \\r\\n}\\r\\n\\r\\ncontract GEStakingInitialize {\\r\\n\\r\\n    IBEP20 public nativetoken;\\r\\n\\r\\n    address public contractOwner;\\r\\n\\r\\n    uint256 public lockingDays=300;\\r\\n    uint256 public adminCharge=10;\\r\\n    uint256 public minimumWithdrawal=5000000000000000000000;\\r\\n\\r\\n    uint256 public totalNumberofStakers;\\r\\n    uint256 public totalTierOneStakers;\\r\\n    uint256 public totalTierTwoStakers;\\r\\n    uint256 public totalTierThreeStakers;\\r\\n\\r\\n\\tuint256 public totalStakesGE;\\r\\n    uint256 public totalLevelIncome;\\r\\n    uint256 public totalJackportIncome;\\r\\n    uint256 public totalAwardAndReward;\\r\\n\\r\\n    //Index For Every Thing Will Start From 0,1,2\\r\\n    uint256[3] public tierYearSlab = [1,2,3];\\r\\n    uint256[3] public tierAPY = [12 ether,24 ether,36 ether];\\r\\n    uint256[3] public tierLocking = [20,50,80];\\r\\n    uint256[3] public stakePenaltySlab = [10,20,30];\\r\\n\\r\\n    struct UserStakingDetails {\\r\\n        uint256 userId;\\r\\n        bool[3] stakingStatus;\\r\\n        uint256[3] totalStakedAvailable;\\r\\n        uint256[3] totalUnLockedStaked;\\r\\n        uint256[3] totalLockedStaked;\\r\\n        uint256[3] totalStaked;\\r\\n        uint256[3] totalUnStaked;\\r\\n        uint256[3] totalReward;\\r\\n        uint256[3] rewards;\\r\\n\\t\\tuint256[3] totalRewardWithdrawal;\\r\\n\\t\\tuint256[3] totalRewardStaked;\\r\\n        uint256[3] penaltyCollected;\\r\\n        uint[3] lastStakedUpdateTime;\\r\\n        uint[3] lastUnStakedUpdateTime;\\r\\n        uint[3] lastUpdateTime;\\r\\n\\t}\\r\\n\\r\\n    struct UserOverallDetails {\\r\\n        uint256 totalStakedAvailable;\\r\\n        uint256 totalUnLockedStaked;\\r\\n        uint256 totalLockedStaked;\\r\\n        uint256 totalStaked;\\r\\n        uint256 totalUnStaked;\\r\\n        uint256 totalReward;\\r\\n\\t\\tuint256 totalRewardWithdrawal;\\r\\n\\t\\tuint256 totalRewardStaked;\\r\\n        uint256 penaltyCollected;\\r\\n        uint lastStakedUpdateTime;\\r\\n        uint lastUnStakedUpdateTime;\\r\\n        uint lastUpdateTime;\\r\\n    }\\r\\n\\r\\n    struct UserAffiliateDetails {\\r\\n        uint256 checkpoint;\\r\\n        bool isIncomeBlocked;\\r\\n        address referrer;\\r\\n\\t\\tuint256 totalReferrer;\\r\\n        uint256 totalBusiness;\\r\\n        uint256 availableAwardRewardBonus;\\r\\n\\t\\tuint256 awardRewardBonusWithdrawn;\\r\\n        uint256 creditedLevelBonus;\\r\\n\\t\\tuint256 availableLevelBonus;\\r\\n\\t\\tuint256 levelBonusWithdrawn;\\r\\n        uint256 availableJackpotBonus;\\r\\n\\t\\tuint256 jackpotBonusWithdrawn;\\r\\n\\t\\tuint256[41] levelWiseBusiness;\\r\\n        uint256[41] levelWiseBonus;\\r\\n\\t\\tuint[41] refs;\\r\\n        string[41] allIds;\\r\\n        uint256[20] levelWiseJackpotBonus;\\r\\n    }\\r\\n\\r\\n    struct UserRewardDetails {\\r\\n        bool tierfirstreceived;\\r\\n        bool tiersecondreceived;\\r\\n        bool tierthirdreceived;\\r\\n        bool tierfourthreceived;\\r\\n        bool tierfifthreceived;\\r\\n    }\\r\\n\\r\\n    // Index For Every Thing Will Start From 0,1,2\\r\\n\\r\\n    uint[41] public ref_bonuses = [15,10,5,5,5,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]; \\r\\n    uint[41] public requiredDirect = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41];\\r\\n    \\r\\n    uint noofleveljackpot=3;\\r\\n    uint[20]  public jackpot_bonuses = [30,30,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\\r\\n\\r\\n    uint[5]  public requiredBusiness = [5000000000000000000000000,10000000000000000000000000,30000000000000000000000000,100000000000000000000000000,200000000000000000000000000];\\r\\n    uint[5]  public requiredLevel = [3,5,10,30,41];\\r\\n    uint[5]  public requiredNoofId = [100,300,1000,5000,10000];\\r\\n    uint[5]  public reward= [50000000000000000000000,100000000000000000000000,300000000000000000000000,1000000000000000000000000,10000000000000000000000000];\\r\\n\\r\\n    mapping (address =\\u003e UserStakingDetails) public userstakingdetails;\\r\\n    mapping (address =\\u003e UserOverallDetails) public useraggregatedetails;\\r\\n    mapping (address =\\u003e UserAffiliateDetails) public useraffiliatedetails;\\r\\n    mapping (address =\\u003e UserRewardDetails) public userrewarddetails;\\r\\n\\r\\n\\tevent Staking(address indexed _user, uint256 _amount,uint256 _tierslab);\\r\\n\\tevent UnStakeUnlockedAmount(address indexed _user, uint256 _amount,uint256 _tierslab);\\r\\n\\tevent UnStakeLockedAmount(address indexed _user, uint256 _amount,uint256 _tierslab);\\r\\n    event RewardWithdrawal(address indexed _user, uint256 _amount,uint256 _tierslab);\\r\\n    event RewardStaking(address indexed _user, uint256 _amount,uint256 _tierslab);\\r\\n\\tevent Withdrawn(address indexed _user, uint256 _amount);\\r\\n\\r\\n    constructor() {\\r\\n        contractOwner = 0x2A39C10369726913360BA5c88CC8b02Cebe8a51A;\\r\\n        nativetoken = IBEP20(0x0D9028F9F14A8ca47b5d4E1C6ccfc7Cb363ff4Fd);\\r\\n        useraffiliatedetails[contractOwner].checkpoint = block.timestamp;\\r\\n        userstakingdetails[contractOwner].userId = block.timestamp;\\r\\n    }\\r\\n}\"},\"GEStakingMain.sol\":{\"content\":\"/**\\r\\n\\r\\n DOA Based Smart Contract For (Decentralized Green Energy (GE)) Community\\r\\n\\r\\n What is a DAO in blockchain?\\r\\n what is a DAO? A decentralized autonomous organization is exactly what the name says; \\r\\n a group of people who come together without a central leader or company dictating any of the \\r\\n Decisions.They are built on a blockchain using smart contracts (digital one-of-one agreements)\\r\\n\\r\\n*/\\r\\n\\r\\n//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"./GEStakingUniversal.sol\\\";\\r\\n\\r\\ncontract GEStakingMain  is GEStakingUniversal {\\r\\n\\r\\n    function _Stake(uint _amount,uint256 _tierslab,address referrer) public updateReward(msg.sender,_tierslab) {\\r\\n        UserStakingDetails storage usertier = userstakingdetails[msg.sender];\\r\\n        UserOverallDetails storage useroverall = useraggregatedetails[msg.sender];\\r\\n        //Manage Stake Holder \\u0026 Staked Maticpad\\r\\n        if(usertier.totalStakedAvailable[_tierslab]==0){\\r\\n            totalNumberofStakers += 1;\\r\\n            if(_tierslab==0)\\r\\n            {\\r\\n                totalTierOneStakers += 1;\\r\\n            }\\r\\n            else if(_tierslab==1)\\r\\n            {\\r\\n                totalTierTwoStakers += 1;\\r\\n            }\\r\\n            else if(_tierslab==2)\\r\\n            {\\r\\n                totalTierThreeStakers += 1;\\r\\n            }\\r\\n        }\\r\\n        totalStakesGE +=_amount;\\r\\n        uint256 _lockedAmount=(_amount*tierLocking[_tierslab])/(100);\\r\\n        //Update User Stake Section Tier Wise\\r\\n        usertier.totalStaked[_tierslab] +=_amount;\\r\\n        usertier.totalUnLockedStaked[_tierslab] +=(_amount-_lockedAmount);\\r\\n        usertier.totalLockedStaked[_tierslab] +=_lockedAmount;\\r\\n        usertier.totalStakedAvailable[_tierslab] +=_amount;\\r\\n        usertier.stakingStatus[_tierslab] =true;\\r\\n        usertier.lastStakedUpdateTime[_tierslab] =block.timestamp;\\r\\n        //Update User Section Aggregate\\r\\n        useroverall.totalStaked +=_amount;\\r\\n        useroverall.totalUnLockedStaked +=(_amount-_lockedAmount);\\r\\n        useroverall.totalLockedStaked +=_lockedAmount;\\r\\n        useroverall.totalStakedAvailable +=_amount;\\r\\n        useroverall.lastStakedUpdateTime =block.timestamp;\\r\\n        //Manage Referral Systeh Start Here\\r\\n        require(_amount \\u003e= 3,\\u0027Minimum 3 GE Can Be Staked !\\u0027);\\r\\n        UserAffiliateDetails storage useraffiliate = useraffiliatedetails[msg.sender];   \\r\\n        useraffiliate.isIncomeBlocked=false;\\r\\n        if (useraffiliate.referrer == address(0) \\u0026\\u0026 (useraffiliatedetails[referrer].checkpoint \\u003e 0 || referrer == contractOwner) \\u0026\\u0026 referrer != msg.sender ) {\\r\\n            useraffiliate.referrer = referrer;\\r\\n        }   \\r\\n\\t\\t\\r\\n        require(useraffiliate.referrer != address(0) || msg.sender == contractOwner, \\\"No upline\\\");\\r\\n       \\r\\n        if (useraffiliate.referrer != address(0)) {\\t   \\r\\n        // unilevel level count\\r\\n        address upline = useraffiliate.referrer;\\r\\n        for (uint i = 0; i \\u003c ref_bonuses.length; i++) {\\r\\n            if (upline != address(0)) {\\r\\n                useraffiliatedetails[upline].levelWiseBusiness[i] += _amount;\\r\\n                useraffiliatedetails[upline].totalBusiness += _amount;\\r\\n                if(useraffiliate.checkpoint == 0){\\r\\n                    useraffiliatedetails[upline].refs[i] += 1;\\r\\n\\t\\t\\t\\t\\tuseraffiliatedetails[upline].totalReferrer++;\\r\\n                }\\r\\n                upline = useraffiliatedetails[upline].referrer;\\r\\n            } else break;\\r\\n        }\\r\\n      }\\r\\n      //Level Referral Income Distribution\\r\\n\\t  _refPayout(msg.sender,_amount);\\r\\n      if(useraffiliate.checkpoint == 0) {\\r\\n        useraffiliate.checkpoint = block.timestamp;\\r\\n        usertier.userId = block.timestamp;\\r\\n\\t  }\\r\\n      //Manage Referral System End Here\\r\\n      nativetoken.transferFrom(msg.sender, address(this), _amount);\\r\\n      emit Staking(msg.sender, _amount,_tierslab);\\r\\n    }\\r\\n\\r\\n    function _UnStakeUnlockedAmount(uint _amount,uint256 _tierslab) public updateReward(msg.sender,_tierslab) {\\r\\n        UserStakingDetails storage usertier = userstakingdetails[msg.sender];\\r\\n        UserOverallDetails storage useroverall = useraggregatedetails[msg.sender];\\r\\n        require(_amount \\u003c usertier.totalUnLockedStaked[_tierslab],\\u0027Insufficient GE For Unstake\\u0027);\\r\\n        //Get Penalty Percentage\\r\\n        uint penaltyPer=getUnStakePenaltyPer(usertier.lastStakedUpdateTime[_tierslab],block.timestamp,_tierslab);\\r\\n        //Get Penalty Amount\\r\\n        uint256 penalty=_amount * penaltyPer / 100;\\r\\n        //Update Penalty Collected\\r\\n        usertier.penaltyCollected[_tierslab] +=penalty;\\r\\n        useroverall.penaltyCollected +=penalty;\\r\\n        //Update Unstake Section\\r\\n        usertier.totalStakedAvailable[_tierslab] -= _amount;\\r\\n        useroverall.totalStakedAvailable -= _amount;\\r\\n        usertier.totalUnLockedStaked[_tierslab] -= _amount;\\r\\n        useroverall.totalUnLockedStaked -= _amount;\\r\\n        usertier.totalUnStaked[_tierslab] += _amount;\\r\\n        useroverall.totalUnStaked += _amount;\\r\\n        usertier.lastUnStakedUpdateTime[_tierslab] = block.timestamp;\\r\\n        useroverall.lastUnStakedUpdateTime = block.timestamp;\\r\\n        //Get Net Receivable Unstake Amount\\r\\n        uint256 _payableamount=_amount-penalty;\\r\\n        //Update Supply \\u0026 Balance of UserStakingDetails\\r\\n        if(usertier.totalStakedAvailable[_tierslab]==0){\\r\\n            if(useroverall.totalStakedAvailable==0){\\r\\n              totalNumberofStakers -= 1;\\r\\n            }\\r\\n            if(_tierslab==0)\\r\\n            {\\r\\n                totalTierOneStakers -= 1;\\r\\n            }\\r\\n            else if(_tierslab==1)\\r\\n            {\\r\\n                totalTierTwoStakers -= 1;\\r\\n            }\\r\\n            else if(_tierslab==2)\\r\\n            {\\r\\n                totalTierThreeStakers -= 1;\\r\\n            }\\r\\n        }\\r\\n        totalStakesGE -=_amount;\\r\\n        nativetoken.transfer(msg.sender, _payableamount);\\r\\n        emit UnStakeUnlockedAmount(msg.sender, _payableamount,_tierslab);\\r\\n    }\\r\\n\\r\\n    function _UnStakeLockedAmount(uint256 _tierslab) public updateReward(msg.sender,_tierslab) {\\r\\n        UserStakingDetails storage usertier = userstakingdetails[msg.sender];\\r\\n        UserOverallDetails storage useroverall = useraggregatedetails[msg.sender];\\r\\n        //Get Penalty Percentage\\r\\n        uint penaltyPer=getUnStakePenaltyPer(usertier.lastStakedUpdateTime[_tierslab],block.timestamp,_tierslab);\\r\\n        require(penaltyPer == 0 ,\\u0027Untill Your Tenure Will Not Complete You Can Not Withdraw Your Locked Amount\\u0027);\\r\\n        uint256 _amount=usertier.totalLockedStaked[_tierslab];\\r\\n        //Get Penalty Amount\\r\\n        uint256 penalty=_amount * penaltyPer / 100;\\r\\n        //Update Penalty Collected\\r\\n        usertier.penaltyCollected[_tierslab] +=penalty;\\r\\n        useroverall.penaltyCollected +=penalty;\\r\\n        //Update Unstake Section\\r\\n        usertier.totalStakedAvailable[_tierslab] -= _amount;\\r\\n        useroverall.totalStakedAvailable -= _amount;\\r\\n        usertier.totalLockedStaked[_tierslab] -= _amount;\\r\\n        useroverall.totalLockedStaked -= _amount;\\r\\n        usertier.totalUnStaked[_tierslab] += _amount;\\r\\n        useroverall.totalUnStaked += _amount;\\r\\n        usertier.lastUnStakedUpdateTime[_tierslab] = block.timestamp;\\r\\n        useroverall.lastUnStakedUpdateTime = block.timestamp;\\r\\n        //Get Net Receivable Unstake Amount\\r\\n        uint256 _payableamount=_amount-penalty;\\r\\n        //Update Supply \\u0026 Balance of UserStakingDetails\\r\\n        if(usertier.totalStakedAvailable[_tierslab]==0){\\r\\n            if(useroverall.totalStakedAvailable==0){\\r\\n              totalNumberofStakers -= 1;\\r\\n            }\\r\\n            if(_tierslab==0)\\r\\n            {\\r\\n                totalTierOneStakers -= 1;\\r\\n            }\\r\\n            else if(_tierslab==1)\\r\\n            {\\r\\n                totalTierTwoStakers -= 1;\\r\\n            }\\r\\n            else if(_tierslab==2)\\r\\n            {\\r\\n                totalTierThreeStakers -= 1;\\r\\n            }\\r\\n        }\\r\\n        totalStakesGE -=_amount;\\r\\n        nativetoken.transfer(msg.sender, _payableamount);\\r\\n        emit UnStakeLockedAmount(msg.sender, _payableamount,_tierslab);\\r\\n    }\\r\\n\\r\\n    function _RewardWithdrawal(uint256 _tierslab) public updateReward(msg.sender,_tierslab) {\\r\\n        UserStakingDetails storage usertier = userstakingdetails[msg.sender];\\r\\n        UserOverallDetails storage useroverall = useraggregatedetails[msg.sender];\\r\\n        uint256 _reward = usertier.rewards[_tierslab];\\r\\n        // Set Reward 0\\r\\n        usertier.rewards[_tierslab] = 0;\\r\\n        usertier.totalRewardWithdrawal[_tierslab] += _reward;\\r\\n        // Reward Withdrawal Section\\r\\n        useroverall.totalRewardWithdrawal += _reward;\\r\\n        nativetoken.transfer(msg.sender, _reward);\\r\\n        emit RewardWithdrawal(msg.sender, _reward,_tierslab);\\r\\n    }   \\r\\n\\r\\n    function _Withdrawal() public {  \\r\\n      UserAffiliateDetails storage useraffiliate = useraffiliatedetails[msg.sender];\\r\\n      uint256 dailyReleasePer = 100*1e18 / lockingDays*1e18;\\r\\n      uint256 levelIncomeReleasable = ((useraffiliatedetails[msg.sender].creditedLevelBonus) * dailyReleasePer)/(100*1e18);\\r\\n      levelIncomeReleasable /= 1e18;\\r\\n      if(levelIncomeReleasable\\u003euseraffiliatedetails[msg.sender].availableLevelBonus)\\r\\n      {\\r\\n          levelIncomeReleasable=0;\\r\\n      }\\r\\n      (uint noofTotalSecond, uint noofHour, uint noofDay,uint noofYear) = view_DiffTwoDate(useraffiliate.checkpoint,block.timestamp);\\r\\n      levelIncomeReleasable *= noofDay;\\r\\n      uint256 TotalBonus = 0;\\r\\n      TotalBonus += useraffiliate.availableJackpotBonus;\\r\\n      TotalBonus += useraffiliate.availableAwardRewardBonus; \\r\\n      TotalBonus += levelIncomeReleasable;\\r\\n      require(TotalBonus \\u003e= minimumWithdrawal,\\u0027No Minimum Withdrawal GE !\\u0027);\\r\\n      uint256 _fees = (TotalBonus*adminCharge)/100;\\r\\n      uint256 actualAmountToSend = (TotalBonus-_fees);\\r\\n      useraffiliate.awardRewardBonusWithdrawn += useraffiliate.availableAwardRewardBonus;\\r\\n      useraffiliate.availableAwardRewardBonus=0;\\r\\n      useraffiliate.jackpotBonusWithdrawn += useraffiliate.availableJackpotBonus;\\r\\n      useraffiliate.availableJackpotBonus=0;\\r\\n      useraffiliate.levelBonusWithdrawn += levelIncomeReleasable;\\r\\n      useraffiliate.availableLevelBonus -= levelIncomeReleasable;\\r\\n      useraffiliate.checkpoint=block.timestamp;\\r\\n      nativetoken.transfer(msg.sender, actualAmountToSend);  \\r\\n      emit Withdrawn(msg.sender,actualAmountToSend);\\r\\n    }\\r\\n}\"},\"GEStakingUniversal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"./GEStakingCalculation.sol\\\";\\r\\n\\r\\ncontract GEStakingUniversal is GEStakingCalculation {\\r\\n\\r\\n    // Get Level Downline With Bonus And Bonus Percentage\\r\\n    function level_downline(address _user,uint _level) view public returns(uint _noOfUser, uint256 _investment,uint256 _bonusper, uint256 _bonus){\\r\\n       return (useraffiliatedetails[_user].refs[_level],useraffiliatedetails[_user].levelWiseBusiness[_level],ref_bonuses[_level],useraffiliatedetails[_user].levelWiseBonus[_level]);\\r\\n    }\\r\\n\\r\\n    // Get Level Downline With Bonus And Bonus Percentage\\r\\n    function jackpot_downline(address _user,uint _level) view public returns(uint _noOfUser, uint256 _levelincome,uint256 _bonusper, uint256 _bonus){\\r\\n       return (useraffiliatedetails[_user].refs[_level],useraffiliatedetails[_user].levelWiseBonus[_level],jackpot_bonuses[_level],useraffiliatedetails[_user].levelWiseJackpotBonus[_level]);\\r\\n    }\\r\\n\\r\\n    // Get Level Downline With Bonus And Bonus Percentage\\r\\n    function staking_reward_tier(address _user,uint _tier) view public returns(uint256 _userId,uint256 _totalReward,uint256 _rewards,uint256 _totalRewardWithdrawal,uint256 _totalRewardStaked,uint256 _penaltyCollected){\\r\\n       UserStakingDetails storage usertier = userstakingdetails[_user];\\r\\n       return (usertier.userId,usertier.totalReward[_tier],usertier.rewards[_tier],usertier.totalRewardWithdrawal[_tier],usertier.totalRewardStaked[_tier],usertier.penaltyCollected[_tier]);\\r\\n    }\\r\\n\\r\\n    // Get Level Downline With Bonus And Bonus Percentage\\r\\n    function staking_tier(address _user,uint _tier) view public returns(uint256 _userId,uint256 _totalStakedAvailable,uint256 _totalUnLockedStaked,uint256 _totalLockedStaked,uint256 _totalStaked,uint256 _totalUnStaked){\\r\\n       UserStakingDetails storage usertier = userstakingdetails[_user];\\r\\n       return (usertier.userId,usertier.totalStakedAvailable[_tier],usertier.totalUnLockedStaked[_tier],usertier.totalLockedStaked[_tier],usertier.totalStaked[_tier],usertier.totalUnStaked[_tier]);\\r\\n    }\\r\\n\\r\\n     //Get User Total Staked Amount\\r\\n    function GETTotalStakedGE(address account) public view returns(uint256){\\r\\n        UserOverallDetails storage useroverall = useraggregatedetails[account];\\r\\n        return (useroverall.totalStakedAvailable);\\r\\n    }\\r\\n\\r\\n    // View Get Current Time Stamp\\r\\n    function view_GetCurrentTimeStamp() public view returns(uint _timestamp){\\r\\n       return (block.timestamp);\\r\\n    }\\r\\n\\r\\n    // View No Second Between Two Date \\u0026 Time\\r\\n    function view_DiffTwoDate(uint _startDate,uint _endDate) public pure returns(uint _second,uint _hour,uint _days,uint _year){\\r\\n        uint startDate = _startDate;\\r\\n        uint endDate = _endDate;\\r\\n        uint datediffs = (endDate - startDate);\\r\\n        uint datediffh = (endDate - startDate) / 60 / 60;\\r\\n        uint datediffd = (endDate - startDate)/ 60 / 60 / 24;\\r\\n        uint yeardiff = (datediffd) / 365 ;\\r\\n        return (datediffs,datediffh,datediffd,yeardiff);\\r\\n    }\\r\\n    \\r\\n    // Update Year Tier Slab\\r\\n    // _tier=0 Then Year 1st\\r\\n    // _tier=1 Then Year 2nd\\r\\n    // _tier=2 Then Year 3rd\\r\\n    function update_TierYear(uint _tier,uint256 _tierYearSlab,uint256 _tierAPY,uint256 _tierLocking,uint256 _stakePenaltySlab) public {\\r\\n      require(contractOwner==msg.sender, \\u0027Admin what?\\u0027);\\r\\n      tierYearSlab[_tier]=_tierYearSlab;\\r\\n      tierAPY[_tier]=_tierAPY;\\r\\n      tierLocking[_tier]=_tierLocking;\\r\\n      stakePenaltySlab[_tier]=_stakePenaltySlab;\\r\\n    }\\r\\n\\r\\n    // Update Affiliate Settings\\r\\n    function affiliate_Settings(uint256 _lockingDays,uint256 _minimumWithdrawal,uint256 _adminCharge) public {\\r\\n      require(contractOwner==msg.sender, \\u0027Admin what?\\u0027);\\r\\n      lockingDays=_lockingDays;\\r\\n      minimumWithdrawal=_minimumWithdrawal;\\r\\n      adminCharge=_adminCharge; \\r\\n    }\\r\\n\\r\\n    // Update Level Income Percentage\\r\\n    function update_LevelIncomeSlab(uint256 _index,uint256 _percentage) public {\\r\\n      require(contractOwner==msg.sender, \\u0027Admin what?\\u0027);\\r\\n      ref_bonuses[_index]=_percentage;\\r\\n    }\\r\\n\\r\\n    // Update Direct Required For Qualify Level\\r\\n    function update_DirectRequiredForLevelQualify(uint256 _index,uint256 _noofdirect) public {\\r\\n      require(contractOwner==msg.sender, \\u0027Admin what?\\u0027);\\r\\n      requiredDirect[_index]=_noofdirect;\\r\\n    }\\r\\n\\r\\n    // Update Staking Reward Status\\r\\n    function update_StakingRewardStaus(address _user,bool _stakingStatus,bool _affiliateIncomeStatus) public {\\r\\n      require(contractOwner==msg.sender, \\u0027Admin what?\\u0027);\\r\\n      UserStakingDetails storage usertier = userstakingdetails[_user];\\r\\n      usertier.stakingStatus[0] = _stakingStatus;\\r\\n      usertier.stakingStatus[1] = _stakingStatus;\\r\\n      usertier.stakingStatus[2] = _stakingStatus;\\r\\n      UserAffiliateDetails storage useraffiliate = useraffiliatedetails[msg.sender];   \\r\\n      useraffiliate.isIncomeBlocked = _affiliateIncomeStatus;\\r\\n    }\\r\\n\\r\\n    // Update Jackpot Income Slab\\r\\n    function update_JackpotIncomeSlab(uint256 _index,uint256 _percentage) public {\\r\\n      require(contractOwner==msg.sender, \\u0027Admin what?\\u0027);\\r\\n      jackpot_bonuses[_index]=_percentage;\\r\\n    }\\r\\n\\r\\n    // Update Jackpot Income Slab\\r\\n    function update_NooflevelForJackpot(uint _noofleveljackpot) public {\\r\\n      require(contractOwner==msg.sender, \\u0027Admin what?\\u0027);\\r\\n      noofleveljackpot=_noofleveljackpot;\\r\\n    }\\r\\n\\r\\n    // Update Award \\u0026 Reward\\r\\n    // _tier=0 Then Award \\u0026 Reward Slab 1\\r\\n    // _tier=1 Then Award \\u0026 Reward Slab 2\\r\\n    // _tier=2 Then Award \\u0026 Reward Slab 3\\r\\n    // _tier=3 Then Award \\u0026 Reward Slab 4\\r\\n    // _tier=4 Then Award \\u0026 Reward Slab 5\\r\\n    function update_AwardRewardSettings(uint256 _tier,uint256 _requiredBusiness,uint256 _requiredLevel,uint256 _requiredNoofId,uint256 _reward) public {\\r\\n      require(contractOwner==msg.sender, \\u0027Admin what?\\u0027);\\r\\n      requiredBusiness[_tier]=_requiredBusiness;\\r\\n      requiredLevel[_tier]=_requiredLevel;\\r\\n      requiredNoofId[_tier]=_requiredNoofId;\\r\\n      reward[_tier]=_reward;\\r\\n    }\\r\\n\\r\\n    // Update Staking\\r\\n    function verify_StakingTransaction(uint256 _totalNumberofStakers,uint256 _totalTierOneStakers,uint256 _totalTierTwoStakers,uint256 _totalTierThreeStakers) public {\\r\\n      require(contractOwner==msg.sender, \\u0027Admin what?\\u0027);\\r\\n      totalNumberofStakers += _totalNumberofStakers;\\r\\n      totalTierOneStakers += _totalTierOneStakers;\\r\\n      totalTierTwoStakers += _totalTierTwoStakers;\\r\\n      totalTierThreeStakers += _totalTierThreeStakers;\\r\\n    }\\r\\n\\r\\n    function rewardPerDayToken(address account,uint _tierslab) public view returns (uint256 perdayinterest) {\\r\\n        uint256 _perdayinterest=0;\\r\\n        if (userstakingdetails[account].totalStakedAvailable[_tierslab] \\u003c= 0 || userstakingdetails[account].stakingStatus[_tierslab] == false) {\\r\\n            return _perdayinterest;\\r\\n        }\\r\\n        else{\\r\\n            uint256 StakingToken=userstakingdetails[account].totalStakedAvailable[_tierslab];\\r\\n            uint256 APYPer=tierAPY[_tierslab];\\r\\n            uint256 perDayPer=((APYPer*1e18)/(365*1e18));\\r\\n            _perdayinterest=((StakingToken*perDayPer)/100)/1e18;\\r\\n            return _perdayinterest;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function earned(address account,uint _tierslab) public view returns (uint256 totalearnedinterest) {\\r\\n        (uint noofSecond, uint noofHour, uint noofDay,uint noofYear) = view_DiffTwoDate(userstakingdetails[account].lastUpdateTime[_tierslab],block.timestamp);\\r\\n        uint256 _perdayinterest=rewardPerDayToken(account,_tierslab);\\r\\n        return((_perdayinterest * noofDay)+userstakingdetails[account].rewards[_tierslab]);\\r\\n    }\\r\\n\\r\\n    modifier updateReward(address account,uint256 _tierslab) {\\r\\n        UserStakingDetails storage user = userstakingdetails[account];\\r\\n        userstakingdetails[account].rewards[_tierslab] = earned(account,_tierslab);\\r\\n        user.lastUpdateTime[_tierslab] = block.timestamp;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _totalBonus(address _user) public view returns(uint256 _availableBonus) {\\r\\n      UserAffiliateDetails storage useraffiliate = useraffiliatedetails[_user];\\r\\n      uint256 dailyReleasePer = 100*1e18 / lockingDays*1e18;\\r\\n      uint256 levelIncomeReleasable = ((useraffiliatedetails[_user].creditedLevelBonus) * dailyReleasePer)/(100*1e18);\\r\\n      levelIncomeReleasable /= 1e18;\\r\\n      if(levelIncomeReleasable\\u003euseraffiliatedetails[_user].availableLevelBonus)\\r\\n      {\\r\\n        levelIncomeReleasable=0;\\r\\n      }\\r\\n      (uint noofTotalSecond, uint noofHour, uint noofDay,uint noofYear) = view_DiffTwoDate(useraffiliate.checkpoint,block.timestamp);\\r\\n      levelIncomeReleasable *= noofDay;\\r\\n      uint256 TotalBonus = 0;\\r\\n      TotalBonus += useraffiliate.availableJackpotBonus;\\r\\n      TotalBonus += useraffiliate.availableAwardRewardBonus; \\r\\n      TotalBonus += levelIncomeReleasable;\\r\\n      return (TotalBonus);\\r\\n    }\\r\\n\\r\\n    // Verify Staking By Admin In Case If Needed\\r\\n    function _VerifyStake(uint _amount) public {\\r\\n        require(contractOwner==msg.sender, \\u0027Admin what?\\u0027);\\r\\n        nativetoken.transferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n     // Verify Un Staking By Admin In Case If Needed\\r\\n    function _VerifyUnStake(uint _amount) public {\\r\\n        require(contractOwner==msg.sender, \\u0027Admin what?\\u0027);\\r\\n        require(_amount \\u003e= nativetoken.balanceOf(address(this)),\\u0027Insufficient GE For Collect\\u0027);\\r\\n        nativetoken.transfer(contractOwner, _amount);\\r\\n    }\\r\\n\\r\\n    //Get Un Staking Penalty Percentage According To Time\\r\\n    function getUnStakePenaltyPer(uint _startDate,uint _endDate,uint256 _tierslab) public view returns(uint penalty){\\r\\n        (uint noofSecond, uint noofHour, uint noofDay,uint noofYear) = view_DiffTwoDate(_startDate,_endDate);\\r\\n        uint _penalty=0;\\r\\n        if(noofYear \\u003c tierYearSlab[_tierslab]) {\\r\\n           _penalty=stakePenaltySlab[_tierslab];\\r\\n        }\\r\\n        return (_penalty);\\r\\n    }\\r\\n\\r\\n   function getUserPenaltyDetails(address account,uint256 _tierslab) public view returns (uint256 _penaltyPer,uint _noofHour,uint _stakedYear,uint _stakedDay,uint _nooftotalSecond) {\\r\\n        UserStakingDetails storage usertier = userstakingdetails[account];\\r\\n        uint lastStakedUpdateTime=usertier.lastStakedUpdateTime[_tierslab];\\r\\n        (uint noofTotalSecond, uint noofHour, uint stakedDay,uint stakedYear) = view_DiffTwoDate(lastStakedUpdateTime,block.timestamp);\\r\\n        uint penaltyPer=getUnStakePenaltyPer(lastStakedUpdateTime,block.timestamp,_tierslab);\\r\\n        return(penaltyPer,noofHour,stakedYear,stakedDay,noofTotalSecond);\\r\\n   }\\r\\n}\\r\\n\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"RewardStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"Staking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"UnStakeLockedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"UnStakeUnlockedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GETTotalStakedGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"_RewardWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"_Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"_UnStakeLockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"_UnStakeUnlockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_VerifyStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_VerifyUnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"_totalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_availableBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockingDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminCharge\",\"type\":\"uint256\"}],\"name\":\"affiliate_Settings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalearnedinterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"getUnStakePenaltyPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"getUserPenaltyDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_penaltyPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_noofHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nooftotalSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jackpot_bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"jackpot_downline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_noOfUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_levelincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"level_downline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_noOfUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativetoken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredBusiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredNoofId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierslab\",\"type\":\"uint256\"}],\"name\":\"rewardPerDayToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"perdayinterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakePenaltySlab\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"staking_reward_tier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewardWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewardStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyCollected\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"staking_tier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStakedAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUnLockedStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLockedStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUnStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierLocking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierYearSlab\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAwardAndReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJackportIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLevelIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberofStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTierOneStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTierThreeStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTierTwoStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredBusiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredNoofId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"update_AwardRewardSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_noofdirect\",\"type\":\"uint256\"}],\"name\":\"update_DirectRequiredForLevelQualify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"update_JackpotIncomeSlab\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"update_LevelIncomeSlab\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noofleveljackpot\",\"type\":\"uint256\"}],\"name\":\"update_NooflevelForJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stakingStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_affiliateIncomeStatus\",\"type\":\"bool\"}],\"name\":\"update_StakingRewardStaus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierYearSlab\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierLocking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakePenaltySlab\",\"type\":\"uint256\"}],\"name\":\"update_TierYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"useraffiliatedetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isIncomeBlocked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBusiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAwardRewardBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awardRewardBonusWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creditedLevelBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLevelBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelBonusWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableJackpotBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jackpotBonusWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"useraggregatedetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakedAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnLockedStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLockedStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakedUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnStakedUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userrewarddetails\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tierfirstreceived\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tiersecondreceived\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tierthirdreceived\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tierfourthreceived\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tierfifthreceived\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userstakingdetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalNumberofStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTierOneStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTierTwoStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTierThreeStakers\",\"type\":\"uint256\"}],\"name\":\"verify_StakingTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"view_DiffTwoDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_second\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_year\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"view_GetCurrentTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GEStakingMain", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7ad7bcfff3cfc4129f4168498c61d2befc91b75a03bc952b5de3871f6582e744"}