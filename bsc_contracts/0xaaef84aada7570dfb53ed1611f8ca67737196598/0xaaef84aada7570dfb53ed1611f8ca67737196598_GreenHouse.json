{"SourceCode": "// File: @openzeppelin/contracts/utils/math/SafeCast.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint224).\r\n     *\r\n     * Counterpart to Solidity's `uint224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     */\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/greenhouse.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n/**\r\n * @title GreenHouse staking contract\r\n * @dev A stakable smart contract that stores ERC20 trusted token.\r\n */\r\ncontract GreenHouse is Ownable {\r\n    // Staking ERC20 trustedToken\r\n    IERC20 public trustedToken;\r\n\r\n    // All Users Stakes\r\n    uint256 public allStakes = 0;\r\n    uint256 public everStakedUsersCount = 0;\r\n\r\n    // Bonus and Monthly Reward Pools\r\n    uint256 public bonusRewardPool = 0;  // Bonus Reward Pool\r\n    uint256 public monthlyRewardPool = 0;  // Monthly Reward Pool\r\n    mapping(address => uint256) public referralRewards;\r\n\r\n    // Users stakes, withdrawals and users that has staked at least once\r\n    mapping(address => uint256) internal _stakes;\r\n    mapping(address => uint256) internal _withdrawals;\r\n    mapping(address => bool) internal _hasStaked;\r\n\r\n    // Reward calculation magic\r\n    uint256 constant internal MAGNITUDE = 2**128;\r\n\r\n    uint256 internal _magnifiedRewardPerStake = 0;\r\n    mapping(address => int256) internal _magnifiedRewardCorrections;\r\n\r\n    // Staking and Unstaking fees\r\n    uint256 constant internal FEE_ALL_USERS_STAKED_PERMILLE = 700;\r\n    uint256 constant internal FEE_BONUS_POOL_PERMILLE = 100;\r\n    uint256 constant internal FEE_PLATFORM_WALLET_PERMILLE = 100;\r\n    uint256 constant internal TOKEN_DECIMAL=10**8;\r\n    uint256 constant internal FEE_REFERRAL_PERMILLE = 50;\r\n    uint256 constant internal FEE_PARTNER_WALLET_PERMILLE = 50;\r\n\r\n    // Monthly Pool distribution and timer\r\n    uint256 constant internal MONTHLY_POOL_DISTRIBUTE_ALL_USERS_PERCENT = 50;\r\n    uint256 constant internal MONYHLY_POOL_TIMER = 2592000; // 30 days  =2592000\r\n    uint256 internal _monthlyPoolLastDistributedAt=0;\r\n\r\n    // Bonus Pool distribution\r\n    uint256 constant internal BONUS_POOL_DISTRIBUTE_ALL_USERS_PERCENT = 40;\r\n    uint256 constant internal BONUS_POOL_DISTRIBUTE_LEADERBOARD_PERCENT = 40;\r\n\r\n    // Bonus Pool Leaderboard queue\r\n    mapping(uint256 => address) internal _bonusPoolLeaderboard;\r\n    mapping(address => uint256) internal _bonusPoolLeaderboardPositionsCount;\r\n    uint256 internal _bonusPoolLeaderboardFirst = 1;\r\n    uint256 internal _bonusPoolLeaderboardLast = 0;\r\n    uint256 constant internal BONUS_POOL_LEADERBOARD_MAX_USERS_COUNT = 10;\r\n    uint256 constant internal BONUS_POOL_LEADERBOARD_MIN_STAKE_TO_QUALIFY = 1000;\r\n    uint256 constant internal BONUS_POOL_LEADERBOARD_MIN_STAKE_TO_MAINTAIN_POSITION = 900; // 90%\r\n\r\n// Bonus Timer settings\r\nuint256 internal _bonusPoolTimer;\r\nuint256 internal _bonusPoolLastDistributedAt=0;\r\nuint256 constant internal BONUS_POOL_NEW_STAKEHOLDER_TIME_ADDITION = 900;   // 15 minutes\r\n    uint256 constant internal BONUS_POOL_TIMER_INITIAL = 21600; // 6 hours\r\n\r\n    // Platform Team wallets\r\n    address[] internal _platformWallets;\r\n    // Partner wallet\r\n    address   internal _partnerWallet;\r\n\r\n    event Staked(address indexed sender, uint256 amount, address indexed referrer);\r\n    event Unstaked(address indexed sender, uint256 amount);\r\n    event RewardWithdrawn(address indexed sender, uint256 amount);\r\n    event BonusRewardPoolDistributed(uint256 amountAllUsers, uint256 amountLeaderboard);\r\n    event MonthlyRewardPoolDistributed(uint256 amount);\r\n    event Timer(uint256 timer);\r\n    /// @param trustedToken_ A ERC20 trustedToken to use in this contract\r\n    /// @param partnerWallet A Partner's wallet to reward\r\n    /// @param platformWallets List of Platform Team's wallets\r\n    constructor(\r\n        address trustedToken_,\r\n        address partnerWallet,\r\n        address[] memory platformWallets\r\n    ) Ownable() {  // solhint-disable func-visibility\r\n        // solhint-disable mark-callable-contracts\r\n        trustedToken = IERC20(trustedToken_);\r\n        _platformWallets = platformWallets;\r\n        _partnerWallet = partnerWallet;\r\n        _bonusPoolTimer = BONUS_POOL_TIMER_INITIAL;\r\n    }\r\n\r\n    modifier AttemptToDistrubuteBonusPools() {\r\n        if(_bonusPoolLastDistributedAt == 0 && _monthlyPoolLastDistributedAt== 0){\r\n            _bonusPoolLastDistributedAt = block.timestamp;\r\n            _monthlyPoolLastDistributedAt = block.timestamp;\r\n        }\r\n        _maybeDistributeMonthlyRewardPool();\r\n        _maybeDistributeBonusRewardPool();\r\n        _;\r\n    }\r\n\r\n    // External functions\r\n\r\n    function stake(uint256 amount, address referrer) external AttemptToDistrubuteBonusPools {\r\n        amount=amount*TOKEN_DECIMAL;\r\n        require(amount != 0, \"GreenHouse: staking zero\");\r\n        require(\r\n            trustedToken.transferFrom(msg.sender, address(this), amount),\r\n            \"GreenHouse: staking transfer\"\r\n        );\r\n        require(msg.sender!=referrer,\"GreenHouse: You cannot indicate yourself as a referral \");\r\n        if(_stakes[referrer]<100*TOKEN_DECIMAL){\r\n            referrer=address(0);\r\n        }\r\n        if (!_hasStaked[msg.sender]) {\r\n            _hasStaked[msg.sender] = true;\r\n            everStakedUsersCount++;\r\n        }\r\n        if (amount >= BONUS_POOL_LEADERBOARD_MIN_STAKE_TO_QUALIFY*TOKEN_DECIMAL) {\r\n            _bonusPoolProcessStakeholder(msg.sender);\r\n        }\r\n\r\n        _processStake(amount, referrer);\r\n        emit Staked(msg.sender, amount, referrer);\r\n    }\r\n\r\n    function unstake(uint256 amount) external AttemptToDistrubuteBonusPools {\r\n        amount=amount*TOKEN_DECIMAL;\r\n        require(amount != 0, \"GreenHouse: unstaking zero\");\r\n        require(_stakes[msg.sender] >= amount, \"GreenHouse: unstake amount\");\r\n\r\n        (uint256 net, uint256 fee) = _applyFeesAndDistributeRewards(amount, address(0));\r\n        _stakes[msg.sender] -= amount;\r\n        _bonusPoolLeaderboardUnstakeToKick(msg.sender, _stakes[msg.sender]);\r\n\r\n        // solhint-disable mark-callable-contracts\r\n        _magnifiedRewardCorrections[msg.sender] += SafeCast.toInt256(_magnifiedRewardPerStake * amount);\r\n        _rewardAllUsersStaked(fee);\r\n        allStakes -= amount;\r\n\r\n        require(\r\n            trustedToken.transfer(msg.sender, net),\r\n            \"GreenHouse: unstake transfer\"\r\n        );\r\n\r\n        emit Unstaked(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawReward() external AttemptToDistrubuteBonusPools {\r\n        uint256 withdrawable = withdrawableRewardOf(msg.sender);\r\n        require(withdrawable > 0, \"GreenHouse: nothing to withdraw\");\r\n        _withdrawals[msg.sender] += withdrawable;\r\n        require(\r\n            trustedToken.transfer(msg.sender, withdrawable),\r\n            \"GreenHouse: withdrawal transfer\"\r\n        );\r\n        emit RewardWithdrawn(msg.sender, withdrawable);\r\n    }\r\n\r\n    function bonusPoolLeaderboard() external view returns(address[] memory) {\r\n        uint256 leaderboardUsersCount = _bonusPoolLeaderboardUsersCount();\r\n        address[] memory leaderboard = new address[](leaderboardUsersCount);\r\n        uint256 ptr = 0;\r\n        for (uint256 i = _bonusPoolLeaderboardFirst; i <= _bonusPoolLeaderboardLast; i++) {\r\n            leaderboard[ptr] = _bonusPoolLeaderboard[i];\r\n            ptr++;\r\n        }\r\n        return leaderboard;\r\n    }\r\n    // External functions only owner\r\n\r\n    function setPartnerWallet(address address_) external onlyOwner {\r\n        _partnerWallet = address_;\r\n    }\r\n\r\n    function setPlatformWallets(address[] memory addresses) external onlyOwner {\r\n        _platformWallets = addresses;\r\n    }\r\n\r\n\r\n    // Public view functions\r\n\r\n    function stakeOf(address stakeholder) public view returns(uint256) {\r\n        return _stakes[stakeholder];\r\n    }\r\n\r\n    function accumulativeRewardOf(address stakeholder) public view returns(uint256) {\r\n        // solhint-disable mark-callable-contracts\r\n        return SafeCast.toUint256(\r\n            SafeCast.toInt256(\r\n                stakeOf(stakeholder) * _magnifiedRewardPerStake\r\n            ) + _magnifiedRewardCorrections[stakeholder]\r\n        ) / MAGNITUDE;\r\n    }\r\n\r\n    function withdrawnRewardOf(address stakeholder) public view returns(uint256) {\r\n        return _withdrawals[stakeholder];\r\n    }\r\n\r\n    function withdrawableRewardOf(address stakeholder) public view returns(uint256) {\r\n        return accumulativeRewardOf(stakeholder) - withdrawnRewardOf(stakeholder);\r\n    }\r\n\r\n    function bonusRewardPoolCountdown() public view returns(uint256) {\r\n        uint256 timeSinceLastDistributed = block.timestamp - _bonusPoolLastDistributedAt;\r\n        if (timeSinceLastDistributed >= _bonusPoolTimer) return 0;\r\n        return _bonusPoolTimer - timeSinceLastDistributed;\r\n    }\r\n\r\n    function monthlyRewardPoolCountdown() public view returns(uint256) {\r\n        uint256 timeSinceLastDistributed = block.timestamp - _monthlyPoolLastDistributedAt;\r\n        if (timeSinceLastDistributed >= MONYHLY_POOL_TIMER) return 0;\r\n        return MONYHLY_POOL_TIMER - timeSinceLastDistributed;\r\n    }\r\n\r\n    // internal functions\r\n\r\n    function _bonusPoolLeaderboardPop() internal {\r\n        address removed = _bonusPoolLeaderboard[_bonusPoolLeaderboardFirst];\r\n        delete _bonusPoolLeaderboard[_bonusPoolLeaderboardFirst];\r\n        _bonusPoolLeaderboardFirst++;\r\n        _bonusPoolLeaderboardPositionsCount[removed]--;\r\n        if (_bonusPoolLeaderboardPositionsCount[removed] == 0)\r\n            delete _bonusPoolLeaderboardPositionsCount[removed];\r\n    }\r\n\r\n    function _bonusPoolLeaderboardPush(address value) internal {\r\n        _bonusPoolLeaderboardLast++;\r\n        _bonusPoolLeaderboard[_bonusPoolLeaderboardLast] = value;\r\n        _bonusPoolLeaderboardPositionsCount[value] += 1;\r\n        if((bonusRewardPoolCountdown()+BONUS_POOL_NEW_STAKEHOLDER_TIME_ADDITION) < BONUS_POOL_TIMER_INITIAL){\r\n        _bonusPoolTimer += BONUS_POOL_NEW_STAKEHOLDER_TIME_ADDITION;\r\n        }\r\n        emit Timer(bonusRewardPoolCountdown()+BONUS_POOL_NEW_STAKEHOLDER_TIME_ADDITION);\r\n    }\r\n\r\n    /**\r\n     @notice Adds new qualified staker to the Bonus Pool Leaderboard's queue\r\n             and update Bonus Pool Timer\r\n     @param stakeholder The address of a stakeholder\r\n     */\r\n    function _bonusPoolProcessStakeholder(address stakeholder) internal {\r\n        _bonusPoolLeaderboardPush(stakeholder);\r\n\r\n        if (_bonusPoolLeaderboardUsersCount() > BONUS_POOL_LEADERBOARD_MAX_USERS_COUNT)\r\n            _bonusPoolLeaderboardPop();\r\n    }\r\n\r\n    function _bonusPoolLeaderboardKick(address stakeholder, uint256 positions) internal {\r\n        // filter remaining participants\r\n        uint256 positionsLeftToKick = positions;\r\n        address[] memory leaderboard = new address[](_bonusPoolLeaderboardUsersCount() - positions);\r\n        uint256 ptr = 0;\r\n        for (\r\n            uint256 i = _bonusPoolLeaderboardFirst;\r\n            i <= _bonusPoolLeaderboardLast;\r\n            i++\r\n        ) {\r\n            if (positionsLeftToKick > 0 && _bonusPoolLeaderboard[i] == stakeholder) {\r\n                positionsLeftToKick--;\r\n            } else {\r\n                leaderboard[ptr] = _bonusPoolLeaderboard[i];\r\n                ptr++;\r\n            }\r\n\r\n        }\r\n        // rebuild the whole leaderboard :'(\r\n        while (_bonusPoolLeaderboardUsersCount() > 0)\r\n            _bonusPoolLeaderboardPop();\r\n        for (uint256 i = 0; i < leaderboard.length; ++i)\r\n            _bonusPoolLeaderboardPush(leaderboard[i]);\r\n    }\r\n\r\n    function _bonusPoolLeaderboardUnstakeToKick(address stakeholder, uint256 remaining) internal {\r\n        uint256 maxPositions = remaining / BONUS_POOL_LEADERBOARD_MIN_STAKE_TO_MAINTAIN_POSITION;\r\n        if (maxPositions < _bonusPoolLeaderboardPositionsCount[stakeholder]) {\r\n            uint256 positionsToKick = _bonusPoolLeaderboardPositionsCount[stakeholder] - maxPositions;\r\n            _bonusPoolLeaderboardKick(stakeholder, positionsToKick);\r\n        }\r\n    }\r\n\r\n    function _bonusPoolLeaderboardUsersCount() internal view returns(uint256) {\r\n        return _bonusPoolLeaderboardLast + 1 - _bonusPoolLeaderboardFirst;\r\n    }\r\n\r\n    function _transferRewardPartner(uint256 amount) internal {\r\n        require(\r\n            trustedToken.transfer(_partnerWallet, amount),\r\n            \"GreenHouse: partner transfer\"\r\n        );\r\n    }\r\n\r\n    function _transferRewardPlatform(uint256 amount) internal {\r\n        uint256 perWallet = amount / _platformWallets.length;\r\n        for (uint256 i = 0; i != _platformWallets.length; ++i) {\r\n            require(\r\n                trustedToken.transfer(_platformWallets[i], perWallet),\r\n                \"GreenHouse: platform transfer\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function _rewardAllUsersStaked(uint256 amount) internal {\r\n        _magnifiedRewardPerStake += allStakes != 0 ? (MAGNITUDE * amount) / allStakes : 0;\r\n    }\r\n\r\n    function _transferRewardReferral(uint256 amount, address referrer) internal {\r\n        referralRewards[referrer] += amount;\r\n        bool success = trustedToken.transfer(referrer, amount);\r\n        require(success, \"GreenHouse: referral transfer\");\r\n    }\r\n\r\n    function _rewardBonusPool(uint256 amount) internal {\r\n        bonusRewardPool += amount;\r\n    }\r\n\r\n    function _rewardMonthlyPool(uint256 amount) internal {\r\n        monthlyRewardPool += amount;\r\n    }\r\n\r\n    function _calculateFees(uint256 amount)\r\n    internal pure\r\n    returns(\r\n        uint256 allUsers,\r\n        uint256 bonusPool,\r\n        uint256 partner,\r\n        uint256 referral,\r\n        uint256 platform,\r\n        uint256 net\r\n    ) {\r\n        allUsers = (amount * FEE_ALL_USERS_STAKED_PERMILLE) / 10000;\r\n        bonusPool = (amount * FEE_BONUS_POOL_PERMILLE) / 10000;\r\n        partner = (amount * FEE_PARTNER_WALLET_PERMILLE) / 10000;\r\n        referral = (amount * FEE_REFERRAL_PERMILLE) / 10000;\r\n        platform = (amount * FEE_PLATFORM_WALLET_PERMILLE) / 10000;\r\n        net = amount - allUsers - bonusPool - partner - referral - platform;\r\n    }\r\n\r\n    function _applyFeesAndDistributeRewards(uint256 amount, address referrer)\r\n        internal\r\n        returns(uint256, uint256)\r\n    {\r\n        (\r\n            uint256 fee,\r\n            uint256 feeBonusPool,\r\n            uint256 feePartnerWallet,\r\n            uint256 feeReferral,\r\n            uint256 feePlatformWallet,\r\n            uint256 net\r\n        ) = _calculateFees(amount);\r\n\r\n        _rewardBonusPool(feeBonusPool);\r\n        _transferRewardPartner(feePartnerWallet);\r\n        _transferRewardPlatform(feePlatformWallet);\r\n\r\n        if (referrer == address(0))\r\n            _rewardMonthlyPool(feeReferral);\r\n        else\r\n            _transferRewardReferral(feeReferral, referrer);\r\n\r\n        return (net, fee);\r\n    }\r\n    function _processStake(uint256 amount, address referrer) internal {\r\n        (uint256 net, uint256 fee) = _applyFeesAndDistributeRewards(amount, referrer);\r\n        _stakes[msg.sender] += net;\r\n\r\n        allStakes += net;\r\n        // solhint-disable mark-callable-contracts\r\n        _magnifiedRewardCorrections[msg.sender] -= SafeCast.toInt256(_magnifiedRewardPerStake * net);\r\n        _rewardAllUsersStaked(fee);\r\n    }\r\n\r\n    function _maybeDistributeMonthlyRewardPool() internal {\r\n        if (monthlyRewardPoolCountdown() == 0 && monthlyRewardPool != 0) {\r\n            uint256 amountToDistribute = (monthlyRewardPool * MONTHLY_POOL_DISTRIBUTE_ALL_USERS_PERCENT) / 100;\r\n            _rewardAllUsersStaked(amountToDistribute);\r\n            _monthlyPoolLastDistributedAt = block.timestamp;\r\n            monthlyRewardPool -= amountToDistribute;\r\n            emit MonthlyRewardPoolDistributed(amountToDistribute);\r\n        }\r\n    }\r\n\r\n    function _maybeDistributeBonusRewardPool() internal {\r\n        if (bonusRewardPoolCountdown() == 0 && bonusRewardPool != 0) {\r\n            uint256 amountToDistributeAllUsers = (bonusRewardPool * BONUS_POOL_DISTRIBUTE_ALL_USERS_PERCENT) / 100;\r\n            _rewardAllUsersStaked(amountToDistributeAllUsers);\r\n\r\n            uint256 leaderboardUsersCount = _bonusPoolLeaderboardUsersCount();\r\n            uint256 amountToDistributeLeaderboard = (bonusRewardPool * BONUS_POOL_DISTRIBUTE_LEADERBOARD_PERCENT) / 100;\r\n            _bonusPoolTimer = BONUS_POOL_TIMER_INITIAL;  // reset bonus pool timer\r\n            _bonusPoolLastDistributedAt = block.timestamp;\r\n            bonusRewardPool -= amountToDistributeAllUsers + amountToDistributeLeaderboard;\r\n\r\n            if (leaderboardUsersCount != 0) {\r\n                uint256 amountToDistributePerLeader = amountToDistributeLeaderboard / leaderboardUsersCount;\r\n\r\n                if (amountToDistributePerLeader > 0)\r\n                    for (uint256 i = _bonusPoolLeaderboardFirst; i <= _bonusPoolLeaderboardLast; ++i) {\r\n                        require(\r\n                            trustedToken.transfer(_bonusPoolLeaderboard[i], amountToDistributePerLeader),\r\n                            \"GreenHouse: bonus transfer\"\r\n                        );\r\n                    }\r\n            }\r\n\r\n            emit BonusRewardPoolDistributed(amountToDistributeAllUsers, amountToDistributeLeaderboard);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partnerWallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"platformWallets\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAllUsers\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLeaderboard\",\"type\":\"uint256\"}],\"name\":\"BonusRewardPoolDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MonthlyRewardPoolDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timer\",\"type\":\"uint256\"}],\"name\":\"Timer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"accumulativeRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPoolLeaderboard\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusRewardPoolCountdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everStakedUsersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthlyRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthlyRewardPoolCountdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setPartnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"setPlatformWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"withdrawableRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"withdrawnRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GreenHouse", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000dcba3fbd7bbc28abd18a472d28358089467a8a740000000000000000000000004e9422199343b13fe5c0e30cd86d18039de7f337000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000030000000000000000000000003180257dd50c44b0336df72d65507b20ebdfd0c1000000000000000000000000fae3f1cf56480fa6e9783379ff5302ade1a379d7000000000000000000000000add13c1472c7507db39acc63e5981822aee747c7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3e2e4878aef64c09a8a09750c6b21c82b195216f5d07270a8ea482c25485b15e"}