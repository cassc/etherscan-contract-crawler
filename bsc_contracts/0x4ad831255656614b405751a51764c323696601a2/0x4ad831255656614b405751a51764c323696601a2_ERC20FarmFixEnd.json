{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ERC20FarmFixEnd.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IFarmDeployer.sol\\\";\\r\\n\\r\\ncontract ERC20FarmFixEnd is Ownable, ReentrancyGuard, IERC20FarmFixEnd{\\r\\n\\r\\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\\r\\n    event Deposit(\\r\\n        address indexed user,\\r\\n        uint256 amount,\\r\\n        uint256 shares,\\r\\n        uint256 rewardsAmount\\r\\n    );\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount, uint256 shares);\\r\\n    event NewStartBlock(uint256);\\r\\n    event NewEndBlock(uint256);\\r\\n    event NewMinimumLockTime(uint256);\\r\\n    event NewUserStakeLimit(uint256);\\r\\n    event NewEarlyWithdrawalFee(uint256);\\r\\n    event RewardIncome(uint256);\\r\\n    event NewReflectionOnDeposit(bool);\\r\\n    event NewFeeReceiver(address);\\r\\n    event Withdraw(\\r\\n        address indexed user,\\r\\n        uint256 amount,\\r\\n        uint256 shares,\\r\\n        uint256 rewardsAmount\\r\\n    );\\r\\n\\r\\n    address public feeReceiver;\\r\\n    IERC20 public stakeToken;\\r\\n    IERC20 public rewardToken;\\r\\n    IFarmDeployer private farmDeployer;\\r\\n\\r\\n    uint256 public startBlock;\\r\\n    uint256 public endBlock;\\r\\n    uint256 public lastRewardBlock;\\r\\n    uint256 public userStakeLimit;\\r\\n    uint256 public minimumLockTime;\\r\\n    uint256 public earlyWithdrawalFee;\\r\\n    uint256 public rewardTotalShares = 0;\\r\\n    uint256 public stakeTotalShares = 0;\\r\\n    uint256 public totalPendingReward = 0;\\r\\n    uint256 public defaultStakePPS;\\r\\n    uint256 public defaultRewardPPS;\\r\\n\\r\\n    // Accrued token per share\\r\\n    uint256 public accTokenPerShare;\\r\\n\\r\\n    // The precision factor\\r\\n    uint256 public PRECISION_FACTOR;\\r\\n    uint256 private constant MIN_SHARES = 100;\\r\\n\\r\\n    // Info of each user that stakes tokens (stakeToken)\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n    bool private initialized = false;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 shares; // How many shares the user has for staking\\r\\n        uint256 rewardDebt; // Reward debt\\r\\n        uint256 depositBlock; // Reward debt\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Initialize the contract\\r\\n     * @param _stakeToken: stake token address\\r\\n     * @param _rewardToken: reward token address\\r\\n     * @param _startBlock: start block\\r\\n     * @param _endBlock: end reward block\\r\\n     * @param _userStakeLimit: maximum amount of tokens a user is allowed to stake (if any, else 0)\\r\\n     * @param _minimumLockTime: minimum number of blocks user should wait after deposit to withdraw without fee\\r\\n     * @param _earlyWithdrawalFee: fee for early withdrawal - in basis points\\r\\n     * @param _feeReceiver: Receiver of early withdrawal fees\\r\\n     * @param owner: admin address with ownership\\r\\n     */\\r\\n    function initialize(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        address contractOwner\\r\\n    ) external {\\r\\n        require(!initialized, \\\"Already initialized\\\");\\r\\n        initialized = true;\\r\\n\\r\\n        transferOwnership(contractOwner);\\r\\n\\r\\n        if(_feeReceiver == address(0)){\\r\\n            feeReceiver = address(this);\\r\\n        } else {\\r\\n            feeReceiver = _feeReceiver;\\r\\n        }\\r\\n\\r\\n        farmDeployer = IFarmDeployer(IFarmDeployer20FixEnd(msg.sender).farmDeployer());\\r\\n\\r\\n        stakeToken = IERC20(_stakeToken);\\r\\n        rewardToken = IERC20(_rewardToken);\\r\\n        startBlock = _startBlock;\\r\\n        lastRewardBlock = _startBlock;\\r\\n        endBlock = _endBlock;\\r\\n        userStakeLimit = _userStakeLimit;\\r\\n        minimumLockTime = _minimumLockTime;\\r\\n        earlyWithdrawalFee = _earlyWithdrawalFee;\\r\\n\\r\\n        uint256 decimalsRewardToken = uint256(\\r\\n            IERC20Metadata(_rewardToken).decimals()\\r\\n        );\\r\\n        uint256 decimalsStakeToken = uint256(\\r\\n            IERC20Metadata(_stakeToken).decimals()\\r\\n        );\\r\\n        require(decimalsRewardToken < 30, \\\"Must be inferior to 30\\\");\\r\\n        PRECISION_FACTOR = uint256(10**(30 - decimalsRewardToken));\\r\\n        require(decimalsRewardToken >= 5 && decimalsStakeToken >= 5, \\\"Invalid decimals\\\");\\r\\n\\r\\n        defaultRewardPPS = 10 ** (decimalsRewardToken / 2);\\r\\n        if (_rewardToken == _stakeToken) {\\r\\n            defaultStakePPS = defaultRewardPPS;\\r\\n        } else {\\r\\n            defaultStakePPS = 10 ** (decimalsStakeToken - decimalsStakeToken / 2);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n      * @notice Deposit staked tokens on behalf of msg.sender and collect reward tokens (if any)\\r\\n     * @param amount: amount to deposit (in stakedToken)\\r\\n     */\\r\\n    function deposit(uint256 amount) external {\\r\\n        _deposit(amount, address(msg.sender));\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Deposit staked tokens on behalf account and collect reward tokens (if any)\\r\\n     * @param amount: amount to deposit (in stakedToken)\\r\\n     * @param account: future owner of deposit\\r\\n     */\\r\\n    function depositOnBehalf(uint256 amount, address account) external {\\r\\n        _deposit(amount, account);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\r\\n     * @param amount: amount to deposit (in stakedToken)\\r\\n     * @param account: future owner of deposit\\r\\n     * @dev Internal function\\r\\n     */\\r\\n    function _deposit(uint256 amount, address account) internal nonReentrant {\\r\\n        require(block.number >= startBlock, \\\"Pool is not active yet\\\");\\r\\n        require(block.number < endBlock, \\\"Pool has ended\\\");\\r\\n        UserInfo storage user = userInfo[account];\\r\\n\\r\\n        if (userStakeLimit > 0) {\\r\\n            require(\\r\\n                amount + user.shares * stakePPS() <= userStakeLimit,\\r\\n                \\\"User amount above limit\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _updatePool();\\r\\n        uint256 PPS = stakePPS();\\r\\n\\r\\n        uint256 pending = 0;\\r\\n        uint256 rewardsAmount = 0;\\r\\n        if (user.shares > 0) {\\r\\n            pending = user.shares * accTokenPerShare / PRECISION_FACTOR - user.rewardDebt;\\r\\n            if (pending > 0) {\\r\\n                rewardsAmount = _transferReward(account, pending);\\r\\n                if (totalPendingReward >= pending) {\\r\\n                    totalPendingReward -= pending;\\r\\n                } else {\\r\\n                    totalPendingReward = 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 depositedAmount = 0;\\r\\n        {\\r\\n            uint256 initialBalance = stakeToken.balanceOf(address(this));\\r\\n            stakeToken.transferFrom(\\r\\n                address(msg.sender),\\r\\n                address(this),\\r\\n                amount\\r\\n            );\\r\\n            uint256 subsequentBalance = stakeToken.balanceOf(address(this));\\r\\n            depositedAmount = subsequentBalance - initialBalance;\\r\\n        }\\r\\n        uint256 newShares = depositedAmount / PPS;\\r\\n        require(newShares >= MIN_SHARES, \\\"Below minimum amount\\\");\\r\\n\\r\\n        user.shares = user.shares + newShares;\\r\\n        stakeTotalShares += newShares;\\r\\n\\r\\n        user.rewardDebt = user.shares * accTokenPerShare / PRECISION_FACTOR;\\r\\n        user.depositBlock = block.number;\\r\\n\\r\\n        emit Deposit(account, depositedAmount, newShares, rewardsAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Withdraw staked tokens and collect reward tokens\\r\\n     * @notice Early withdrawal has a penalty\\r\\n     * @param _shares: amount of shares to withdraw\\r\\n     */\\r\\n    function withdraw(uint256 _shares) external nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        uint256 _userShares = user.shares;\\r\\n        require(user.shares >= _shares, \\\"Amount to withdraw too high\\\");\\r\\n\\r\\n        if (_userShares - _shares < MIN_SHARES) {\\r\\n            _shares = _userShares;\\r\\n        }\\r\\n\\r\\n        _updatePool();\\r\\n\\r\\n        uint256 pending = _userShares * accTokenPerShare / PRECISION_FACTOR - user.rewardDebt;\\r\\n\\r\\n        uint256 transferredAmount = 0;\\r\\n        if (_shares > 0) {\\r\\n            user.shares = _userShares - _shares;\\r\\n            uint256 earliestBlockToWithdrawWithoutFee = user.depositBlock + minimumLockTime;\\r\\n            if(block.number < earliestBlockToWithdrawWithoutFee){\\r\\n                transferredAmount = _transferStakeWithFee(address(msg.sender), _shares);\\r\\n            } else {\\r\\n                transferredAmount = _transferStake(address(msg.sender), _shares);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.shares * accTokenPerShare / PRECISION_FACTOR;\\r\\n\\r\\n        uint256 rewardsAmount = 0;\\r\\n        if (pending > 0) {\\r\\n            rewardsAmount = _transferReward(address(msg.sender), pending);\\r\\n            if (totalPendingReward >= pending) {\\r\\n                totalPendingReward -= pending;\\r\\n            } else {\\r\\n                totalPendingReward = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Withdraw(msg.sender, transferredAmount, _shares, rewardsAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Withdraw staked tokens without caring about rewards\\r\\n     * @notice Early withdrawal has a penalty\\r\\n     * @dev Needs to be for emergency.\\r\\n     */\\r\\n    function emergencyWithdraw() external nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        uint256 shares = user.shares;\\r\\n\\r\\n        uint256 pending = user.shares * accTokenPerShare / PRECISION_FACTOR - user.rewardDebt;\\r\\n        if (totalPendingReward >= pending) {\\r\\n            totalPendingReward -= pending;\\r\\n        } else {\\r\\n            totalPendingReward = 0;\\r\\n        }\\r\\n        user.shares = 0;\\r\\n        user.rewardDebt = 0;\\r\\n\\r\\n        uint256 transferredAmount = 0;\\r\\n        if (shares > 0) {\\r\\n            uint256 earliestBlockToWithdrawWithoutFee = user.depositBlock + minimumLockTime;\\r\\n            if(block.number < earliestBlockToWithdrawWithoutFee){\\r\\n                transferredAmount = _transferStakeWithFee(address(msg.sender), shares);\\r\\n            } else {\\r\\n                transferredAmount = _transferStake(address(msg.sender), shares);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit EmergencyWithdraw(msg.sender, transferredAmount, shares);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Calculates the reward per block shares amount\\r\\n     * @return Amount of reward shares\\r\\n     * @dev Internal function for smart contract calculations\\r\\n     */\\r\\n    function _rewardPerBlock() private view returns (uint256) {\\r\\n        if(endBlock <= lastRewardBlock) {\\r\\n            return 0;\\r\\n        }\\r\\n        return (rewardTotalShares - totalPendingReward) / (endBlock - lastRewardBlock);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Calculates the reward per block shares amount\\r\\n     * @return Amount of reward shares\\r\\n     * @dev External function for the front end\\r\\n     */\\r\\n    function rewardPerBlock() external view returns (uint256) {\\r\\n        uint256 firstBlock = stakeTotalShares == 0 ? block.number : lastRewardBlock;\\r\\n        if(endBlock <= firstBlock) {\\r\\n            return 0;\\r\\n        }\\r\\n        return (rewardTotalShares - totalPendingReward) / (endBlock - firstBlock);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Calculates Price Per Share of Stake token\\r\\n     * @return Price Per Share of Stake token\\r\\n     */\\r\\n    function stakePPS() public view returns(uint256) {\\r\\n        if(stakeTotalShares >= MIN_SHARES) {\\r\\n            if(address(stakeToken) != address(rewardToken)){\\r\\n                return stakeToken.balanceOf(address(this)) / stakeTotalShares;\\r\\n            } else {\\r\\n                return stakeToken.balanceOf(address(this)) / (stakeTotalShares + rewardTotalShares);\\r\\n            }\\r\\n        } else if (address(stakeToken) == address(rewardToken) && rewardTotalShares > 0) {\\r\\n            return rewardPPS();\\r\\n        }\\r\\n        return defaultStakePPS;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Calculates Price Per Reward of Reward token\\r\\n     * @return Price Per Share of Reward token\\r\\n     */\\r\\n    function rewardPPS() public view returns(uint256) {\\r\\n        if(rewardTotalShares >= MIN_SHARES) {\\r\\n            if(address(stakeToken) != address(rewardToken)){\\r\\n                return rewardToken.balanceOf(address(this)) / rewardTotalShares;\\r\\n            } else {\\r\\n                return rewardToken.balanceOf(address(this)) / (stakeTotalShares + rewardTotalShares);\\r\\n            }\\r\\n        } else if (address(stakeToken) == address(rewardToken) && stakeTotalShares > 0) {\\r\\n            return stakePPS();\\r\\n        }\\r\\n        return defaultRewardPPS;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Allows Owner to withdraw ERC20 tokens from the contract\\r\\n     * @notice Can't withdraw deposited funds\\r\\n     * @param _tokenAddress: Address of ERC20 token contract\\r\\n     * @param _tokenAmount: Amount of tokens to withdraw\\r\\n     */\\r\\n    function recoverERC20(\\r\\n        address _tokenAddress,\\r\\n        uint256 _tokenAmount\\r\\n    ) external onlyOwner {\\r\\n        //If stake and reward tokens are same - forbid recover of these tokens\\r\\n        require(!(address(stakeToken) == address(rewardToken)\\r\\n            && _tokenAddress == address(stakeToken))\\r\\n            , \\\"Not allowed\\\");\\r\\n        _updatePool();\\r\\n\\r\\n        if(_tokenAddress == address(stakeToken)){\\r\\n            require(_tokenAmount <= (stakeToken.balanceOf(address(this)) - stakeTotalShares * stakePPS())\\r\\n            , \\\"Over deposits amount\\\");\\r\\n        }\\r\\n\\r\\n        if(_tokenAddress == address(rewardToken)){\\r\\n            uint256 _rewardPPS = rewardPPS();\\r\\n            uint256 sameTokens = 0;\\r\\n            if(_tokenAddress == address(stakeToken)){\\r\\n                sameTokens = stakeTotalShares * stakePPS();\\r\\n            }\\r\\n            uint256 allowedAmount = (rewardTotalShares - totalPendingReward) * _rewardPPS - sameTokens;\\r\\n            require(_tokenAmount <= allowedAmount, \\\"Over pending rewards\\\");\\r\\n            if(rewardTotalShares * _rewardPPS > _tokenAmount) {\\r\\n                rewardTotalShares -= _tokenAmount / _rewardPPS;\\r\\n            } else {\\r\\n                rewardTotalShares = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        IERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\\r\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets start block of the pool\\r\\n     * @param _startBlock: Number of start block\\r\\n     */\\r\\n    function setStartBlock(uint256 _startBlock) public onlyOwner {\\r\\n        require(_startBlock >= block.number, \\\"Can't set past block\\\");\\r\\n        require(startBlock >= block.number, \\\"Staking has already started\\\");\\r\\n        startBlock = _startBlock;\\r\\n        lastRewardBlock = _startBlock;\\r\\n\\r\\n        emit NewStartBlock(_startBlock);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets end block of reward distribution\\r\\n     * @param _endBlock: End block\\r\\n     */\\r\\n    function setEndBlock(uint256 _endBlock) public onlyOwner {\\r\\n        require(block.number < _endBlock, \\\"Invalid number\\\");\\r\\n        _updatePool();\\r\\n        endBlock = _endBlock;\\r\\n\\r\\n        emit NewEndBlock(_endBlock);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets maximum amount of tokens 1 user is able to stake. 0 for no limit\\r\\n     * @param _userStakeLimit: Maximum amount of tokens allowed to stake\\r\\n     */\\r\\n    function setUserStakeLimit(uint256 _userStakeLimit) public onlyOwner {\\r\\n        require(_userStakeLimit != 0);\\r\\n        userStakeLimit = _userStakeLimit;\\r\\n\\r\\n        emit NewUserStakeLimit(_userStakeLimit);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets early withdrawal fee\\r\\n     * @param _earlyWithdrawalFee: Early withdrawal fee (in basis points)\\r\\n     */\\r\\n    function setEarlyWithdrawalFee(uint256 _earlyWithdrawalFee) public onlyOwner {\\r\\n        require(_earlyWithdrawalFee <= 10000);\\r\\n        require(_earlyWithdrawalFee < earlyWithdrawalFee, \\\"Can't increase\\\");\\r\\n        earlyWithdrawalFee = _earlyWithdrawalFee;\\r\\n\\r\\n        emit NewEarlyWithdrawalFee(_earlyWithdrawalFee);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets minimum amount of blocks that should pass before user can withdraw\\r\\n     * his deposit without a fee\\r\\n     * @param _minimumLockTime: Number of blocks\\r\\n     */\\r\\n    function setMinimumLockTime(uint256 _minimumLockTime) public onlyOwner {\\r\\n        require(_minimumLockTime <= farmDeployer.maxLockTime(),\\\"Over max lock time\\\");\\r\\n        require(_minimumLockTime < minimumLockTime, \\\"Can't increase\\\");\\r\\n        minimumLockTime = _minimumLockTime;\\r\\n\\r\\n        emit NewMinimumLockTime(_minimumLockTime);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets receivers of fees for early withdrawal\\r\\n     * @param _feeReceiver: Address of fee receiver\\r\\n     */\\r\\n    function setFeeReceiver(address _feeReceiver) public onlyOwner {\\r\\n        require(_feeReceiver != address(0));\\r\\n        require(_feeReceiver != feeReceiver, \\\"Already set\\\");\\r\\n\\r\\n        feeReceiver = _feeReceiver;\\r\\n\\r\\n        emit NewFeeReceiver(_feeReceiver);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets farm variables\\r\\n     * @param _startBlock: Number of start block\\r\\n     * @param _endBlock: End block\\r\\n     * @param _userStakeLimit: Maximum amount of tokens allowed to stake\\r\\n     * @param _earlyWithdrawalFee: Early withdrawal fee (in basis points)\\r\\n     * @param _minimumLockTime: Number of blocks\\r\\n     * @param _feeReceiver: Address of fee receiver\\r\\n     */\\r\\n    function setFarmValues(\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        uint256 _minimumLockTime,\\r\\n        address _feeReceiver\\r\\n    ) external onlyOwner {\\r\\n        //start block\\r\\n        if (startBlock != _startBlock) {\\r\\n            setStartBlock(_startBlock);\\r\\n        }\\r\\n\\r\\n        //reward per block\\r\\n        if (endBlock != _endBlock) {\\r\\n            setEndBlock(_endBlock);\\r\\n        }\\r\\n\\r\\n        //user stake limit\\r\\n        if (userStakeLimit != _userStakeLimit) {\\r\\n            setUserStakeLimit(_userStakeLimit);\\r\\n        }\\r\\n\\r\\n        //early withdrawal fee\\r\\n        if (earlyWithdrawalFee != _earlyWithdrawalFee) {\\r\\n            setEarlyWithdrawalFee(_earlyWithdrawalFee);\\r\\n        }\\r\\n\\r\\n        //min lock time\\r\\n        if (minimumLockTime != _minimumLockTime) {\\r\\n            setMinimumLockTime(_minimumLockTime);\\r\\n        }\\r\\n\\r\\n        //fee receiver\\r\\n        if (feeReceiver != _feeReceiver) {\\r\\n            setFeeReceiver(_feeReceiver);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Adds reward to the pool\\r\\n     * @param amount: Amount of reward token\\r\\n     */\\r\\n    function addReward(uint256 amount) external {\\r\\n        uint256 initialBalance = rewardToken.balanceOf(address(this));\\r\\n        rewardToken.transferFrom(msg.sender, address(this), amount);\\r\\n        uint256 rewardsAmount = rewardToken.balanceOf(address(this)) - initialBalance;\\r\\n        uint256 _rewardPPS = rewardPPS();\\r\\n        require(rewardsAmount > _rewardPPS);\\r\\n\\r\\n        uint256 incomeFee = farmDeployer.incomeFee();\\r\\n        uint256 feeAmount = 0;\\r\\n        if (incomeFee > 0) {\\r\\n            feeAmount = rewardsAmount * farmDeployer.incomeFee() / 10_000;\\r\\n            rewardToken.transfer(farmDeployer.feeReceiver(), feeAmount);\\r\\n        }\\r\\n        uint256 finalAmount = rewardsAmount - feeAmount;\\r\\n\\r\\n        rewardTotalShares += finalAmount / _rewardPPS;\\r\\n        emit RewardIncome(finalAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice View function to see pending reward on frontend.\\r\\n     * @param _user: user address\\r\\n     * @return Pending reward for a given user\\r\\n     */\\r\\n    function pendingReward(address _user) external view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        if (block.number > lastRewardBlock && stakeTotalShares != 0) {\\r\\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n            uint256 cakeReward = multiplier * _rewardPerBlock();\\r\\n            uint256 adjustedTokenPerShare = accTokenPerShare +\\r\\n                cakeReward * PRECISION_FACTOR / stakeTotalShares;\\r\\n            return (user.shares * adjustedTokenPerShare / PRECISION_FACTOR - user.rewardDebt) * rewardPPS();\\r\\n        } else {\\r\\n            return (user.shares * accTokenPerShare / PRECISION_FACTOR - user.rewardDebt) * rewardPPS();\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Updates pool variables\\r\\n     */\\r\\n    function _updatePool() private {\\r\\n        if (block.number <= lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (stakeTotalShares == 0) {\\r\\n            lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n        uint256 cakeReward = multiplier == 0 ? 0 : multiplier * _rewardPerBlock();\\r\\n        totalPendingReward += cakeReward;\\r\\n        accTokenPerShare = accTokenPerShare +\\r\\n            cakeReward * PRECISION_FACTOR / stakeTotalShares;\\r\\n        lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Calculates number of blocks to pay reward for.\\r\\n     * @param _from: Starting block\\r\\n     * @param _to: Ending block\\r\\n     * @return Number of blocks, that should be rewarded\\r\\n     */\\r\\n    function _getMultiplier(\\r\\n        uint256 _from,\\r\\n        uint256 _to\\r\\n    )\\r\\n    private\\r\\n    view\\r\\n    returns (uint256)\\r\\n    {\\r\\n        if (_to <= endBlock) {\\r\\n            return _to - _from;\\r\\n        } else if (_from >= endBlock) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return endBlock - _from;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Transfers specific amount of shares of stake tokens.\\r\\n     * @param receiver: Receiver address\\r\\n     * @param shares: Amount of shares\\r\\n     * @return transferAmount: Amount of tokens to transfer\\r\\n     */\\r\\n    function _transferStake(address receiver, uint256 shares)\\r\\n        private returns(uint256 transferredAmount)\\r\\n    {\\r\\n        transferredAmount = shares * stakePPS();\\r\\n        stakeToken.transfer(receiver, transferredAmount);\\r\\n        stakeTotalShares -= shares;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Transfers specific amount of shares of stake tokens.\\r\\n     * @notice Calculating fee for early withdrawal.\\r\\n     * @param receiver: Receiver address\\r\\n     * @param shares: Amount of shares\\r\\n     * @return transferAmount: Amount of tokens that were transferred to the user\\r\\n     */\\r\\n    function _transferStakeWithFee(address receiver, uint256 shares)\\r\\n        private returns(uint256 transferredAmount)\\r\\n    {\\r\\n        uint256 feeAmount = shares * earlyWithdrawalFee / 10000;\\r\\n        uint256 transferAmount = shares - feeAmount;\\r\\n        transferredAmount = _transferStake(receiver, transferAmount);\\r\\n\\r\\n        if(feeReceiver != address(this)) {\\r\\n            _transferStake(feeReceiver, feeAmount);\\r\\n        } else if(address(stakeToken) == address(rewardToken)) {\\r\\n            rewardTotalShares += feeAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Transfers specific amount of shares of reward tokens.\\r\\n     * @param receiver: Receiver address\\r\\n     * @param shares: Amount of shares\\r\\n     * @return rewardsAmount rewardsAmount\\r\\n     */\\r\\n    function _transferReward(address receiver, uint256 shares)\\r\\n    private returns(uint256 rewardsAmount){\\r\\n        rewardsAmount = shares * rewardPPS();\\r\\n        rewardToken.transfer(receiver, rewardsAmount);\\r\\n        rewardTotalShares -= shares;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IFarmDeployer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface IFarmDeployer {\\r\\n    function maxLockTime() external returns(uint256);\\r\\n    function incomeFee() external returns(uint256);\\r\\n    function feeReceiver() external returns(address payable);\\r\\n}\\r\\n\\r\\ninterface IFarmDeployer20 {\\r\\n    function farmDeployer() external returns(address);\\r\\n    function deploy(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        bool _keepReflectionOnDeposit,\\r\\n        address owner\\r\\n    ) external returns(address);\\r\\n}\\r\\n\\r\\ninterface IFarmDeployer20FixEnd {\\r\\n    function farmDeployer() external returns(address);\\r\\n    function deploy(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        address owner\\r\\n    ) external returns(address);\\r\\n}\\r\\n\\r\\ninterface IFarmDeployer721 {\\r\\n    function farmDeployer() external returns(address);\\r\\n    function deploy(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        address owner\\r\\n    ) external returns(address);\\r\\n}\\r\\n\\r\\ninterface IFarmDeployer721FixEnd {\\r\\n    function farmDeployer() external returns(address);\\r\\n    function deploy(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        address owner\\r\\n    ) external returns(address);\\r\\n}\\r\\n\\r\\ninterface IERC20Farm {\\r\\n    function initialize(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        bool _keepReflectionOnDeposit,\\r\\n        address owner\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IERC20FarmFixEnd {\\r\\n    function initialize(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        address owner\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IERC721Farm {\\r\\n    function initialize(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        address owner\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IERC721FarmFixEnd {\\r\\n    function initialize(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        address owner\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewEarlyWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NewFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewMinimumLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"NewReflectionOnDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewStartBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewUserStakeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RewardIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRewardPPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultStakePPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userStakeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setEarlyWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userStakeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumLockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFarmValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumLockTime\",\"type\":\"uint256\"}],\"name\":\"setMinimumLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userStakeLimit\",\"type\":\"uint256\"}],\"name\":\"setUserStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userStakeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20FarmFixEnd", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}