{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n/// tg: https://t.me/HappyPepeToken\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20Permit {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n    function nonces(address owner) external view returns(uint256);\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns(bytes32);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns(address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns(bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address account) external view returns(uint256);\r\n    function transfer(address to, uint256 amount) external returns(bool);\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns(bool);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns(bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns(bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns(bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns(bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns(bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns(bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns(bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns(bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns(bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns(bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        if (returndata.length > 0) {\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns(bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns(bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n                set._values[toDeleteIndex] = lastValue;\r\n                set._indexes[lastValue] = valueIndex;\r\n            }\r\n\r\n            set._values.pop();\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns(bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns(uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns(bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    function _values(Set storage set) private view returns(bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value) internal returns(bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns(bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns(bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns(uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns(address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    function values(AddressSet storage set) internal view returns(address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary PancakeLibrary {\r\n    using SafeMath for uint;\r\n\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');\r\n    }\r\n\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66' // init code hash\r\n            )))));\r\n    }\r\n\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        pairFor(factory, tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IPancakePair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract HappyPepeBNB is Context, IERC20, Ownable, ReentrancyGuard {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    EnumerableSet.AddressSet private _excludedFromFees;\r\n    EnumerableSet.AddressSet private _holders;\r\n    EnumerableSet.AddressSet private _excludedFromMaxBalance;\r\n    EnumerableSet.AddressSet private _excluded;\r\n    EnumerableSet.AddressSet private _bots;\r\n\r\n    mapping(address => uint256) private _lastTx;\r\n    mapping(address => uint256) private _ledger;\r\n    mapping(address => uint256) private _bonus;\r\n    mapping(address => bool) private routers;\r\n    mapping(address => bool) private pairs;\r\n    \r\n    mapping(address => uint256) private _airdropped;\r\n\r\n    string private _name = \"HappyPepeBNB\";\r\n    string private _symbol = \"HPYPEPE\";\r\n    uint8 private _decimals = 18;\r\n\r\n    address immutable dead = 0x000000000000000000000000000000000000dEaD;\r\n    address payable admin;\r\n\r\n    uint256 constant MAX_SUPPLY =  1000000000000 * 1e18;\r\n    uint256 constant MIN_SUPPLY =   500000000000 * 1e18;\r\n    uint256 constant INITIAL_BURN = 250000000000 * 1e18;\r\n    uint256 constant AIRDROP =       50000000000 * 1e18;\r\n\r\n    struct Min {\r\n        uint256 holders;\r\n        uint256 eligible;\r\n    }\r\n    Min private min = Min(20, 100000000 ether);\r\n\r\n    struct Max {\r\n        uint256 walletBalance;\r\n        uint256 buyAmount; \r\n        uint256 sellAmount;\r\n        uint256 airdrop;\r\n    }\r\n    Max private max = Max(0, 0, 0, 0);\r\n\r\n    struct Threshold {\r\n        uint256 burn;\r\n        uint256 swap;\r\n        uint256 fees;\r\n    }\r\n    Threshold private threshold = Threshold(\r\n        0, \r\n        0,\r\n        250000000 gwei\r\n    );\r\n\r\n    struct Vars {\r\n        bool tradingEnabled;\r\n        bool bonusEnabled;\r\n        bool bonusPaused;\r\n        bool limitsEnabled;\r\n        bool autoSwap;\r\n        bool autoSend;\r\n        bool autoBurn;\r\n        bool autoBoot;\r\n        uint256 bonusDelay;\r\n        uint256 transferDelay;\r\n        uint256 bonusPercent;\r\n        uint256 rndRange;\r\n        uint256 rndHit;\r\n        uint256 holdersCount;\r\n    }\r\n    Vars private vars = Vars(\r\n        false, true, false, true, \r\n        true, true, true, true,\r\n        10, 100, 10, 6, 3, 0\r\n    );\r\n\r\n    IPancakeRouter02 private router;\r\n    IPancakePair private pair;\r\n    address private lpair;\r\n    uint8 routerChanges = 3;\r\n    uint256 routerChangeTime = 0;\r\n    uint256 lastManualSwapTime = 0;\r\n\r\n    struct Taxes {\r\n        uint256 burn;\r\n        uint256 buy;\r\n        uint256 sell;\r\n        uint256 mint;\r\n        uint256 bots;\r\n    }\r\n    Taxes private tax = Taxes(2, 3, 3, 3, 7);\r\n\r\n    address _burnable = 0x3da4e1759772B278e11EbffdB44cfc07D78f1942;\r\n    address _airdrop = 0x106D135C1823395c70FF9E6ebE5771b267cd5124;\r\n    address _airdropper = 0xF53C50BE7658a37D77994d0EF6731582A59afE21;\r\n\r\n    struct Total {\r\n        uint256 supply;\r\n        uint256 burned;\r\n        uint256 bonus;\r\n        uint256 fees;\r\n        uint256 feeTokens;\r\n        uint256 feeEthers;\r\n        uint256 minsupply;\r\n        uint256 maxsupply;\r\n        uint256 available;\r\n        uint256 burnable;\r\n        uint256 toairdrop;\r\n    }\r\n    Total private total = Total(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n\r\n    struct Bonus {\r\n        uint256 execs;\r\n        uint256 hits;\r\n        uint256 miss;\r\n        uint256 fail;\r\n        uint256 nextBlock;\r\n        uint256 threshold;\r\n    }\r\n    Bonus private bonus = Bonus(0, 0, 0, 0, 0, 0);\r\n\r\n    struct Next {\r\n        bool bonus;\r\n        address holder;\r\n        uint256 random;\r\n        uint256 percent;\r\n        uint256 balance;\r\n    }\r\n    Next private next = Next(false, address(0), 0, 0, 0);\r\n\r\n    struct TxOp {\r\n        bool isBuy;\r\n        bool isSell;\r\n        bool isTrs;\r\n        bool isDeo;\r\n        bool isTrx;\r\n        bool isCon;\r\n        bool inSwap;\r\n        address from;\r\n        address to;\r\n        address origin;\r\n        address sender;\r\n        uint256 fee;\r\n        uint256 amount;\r\n    }\r\n    TxOp private txOp = TxOp(\r\n        false, false, false, false, false, false, false,\r\n        address(0), address(0), address(0), address(0), 0, 0\r\n    );\r\n\r\n    struct Balances {\r\n        uint256 adminToken;\r\n        uint256 adminBNB;\r\n        uint256 contractToken;\r\n        uint256 contractBNB;\r\n        uint256 burnable;\r\n        uint256 airdrop;\r\n    }\r\n\r\n    uint256 startBlock = 0;\r\n\r\n    error TradingHasNotBeenEnabled();\r\n    error BuyAmountExceedsMaxBuyAmount(uint256 amount, uint256 max);\r\n    error SellAmountExceedsMaxSellAmount(uint256 amount, uint256 max);\r\n    error WalletBalanceLimitExceeded(uint256 amount, uint256 max);\r\n\r\n    event ExcludeFromFees(address indexed account, bool excluded);\r\n    event UpdatedSwapTreshold(uint256 treshold);\r\n    event UpdatedBurnTreshold(uint256 treshold);\r\n    event Swapped(uint256 tokensSwapped, uint256 ethReceived);\r\n    event NewBonusPercentSet(uint256 percent);\r\n    event BonusLog(\r\n        bool hit,\r\n        address indexed account, \r\n        uint256 amount, \r\n        uint256 random, \r\n        uint256 needed,\r\n        uint256 percent, \r\n        uint256 nextBlock,\r\n        uint256 addressTotal,\r\n        uint256 bonusTotal,\r\n        uint256 bonousAvailable\r\n    );\r\n    event TradingEnabled();\r\n    event NewTransferDelaySet(uint256 delay);\r\n    event NewRndRangeSet(uint256 range);\r\n    event NewMaxWalletBalanceSet(uint256 balance);\r\n    event UpdatedBurnalbleAddress(address burnable);\r\n    event NewBonusDelaySet(uint256 step);\r\n    event RemovedBot(address account);\r\n    event FeesSent(address account, uint256 amount);\r\n    event UpdatedBonusTreshold(uint256 treshold);\r\n    event UpdatedMinEligible(uint256 amount);\r\n    event SetMinHolders(uint256 minHolders);\r\n    event PairAdded(address pair);\r\n    event RouterAdded(address router);\r\n    event LimitsDisabled();\r\n    event UpdatedFeesTreshold(uint256 treshold);\r\n    event Airdropped(address account, uint256 amount);\r\n    event UpdatedAirdopperAddress(address account);\r\n\r\n    bool inSwap;\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(_msgSender() == admin, \"Caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    constructor() {       \r\n        bonus.nextBlock = block.number + 100;\r\n        admin = payable(_msgSender());\r\n\r\n        router = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IPancakePair(IPancakeFactory(router.factory()).createPair(router.WETH(), address(this)));\r\n        addRouter(address(router));\r\n        addRouter(0x13f4EA83D0bd40E75C8222255bc855a974568Dd4);\r\n        addPair(address(pair));\r\n        _approve(admin, address(router), type(uint256).max);\r\n        _approve(address(this), address(router), type(uint256).max);\r\n\r\n        exclude(admin);\r\n        exclude(address(this));\r\n        exclude(address(0));\r\n        exclude(dead);\r\n        exclude(_burnable);\r\n        exclude(_airdrop);\r\n\r\n        max.walletBalance = calcx(MAX_SUPPLY, 50);\r\n        max.buyAmount = max.walletBalance;\r\n        max.sellAmount = max.walletBalance;\r\n        threshold.burn = max.walletBalance / 10;\r\n        threshold.swap = max.walletBalance / 10;\r\n        bonus.threshold = 100000000 ether;\r\n\r\n        total.supply = MAX_SUPPLY;\r\n        total.minsupply = MIN_SUPPLY;\r\n        total.maxsupply = MAX_SUPPLY;\r\n        total.available = INITIAL_BURN;\r\n\r\n        _balances[_airdrop] += AIRDROP;\r\n        _balances[_burnable] += INITIAL_BURN;\r\n        _balances[admin] += MAX_SUPPLY - INITIAL_BURN - AIRDROP;\r\n    }\r\n\r\n    function exclude(address account) private {\r\n        _excluded.add(account);\r\n        _excludedFromFees.add(account);\r\n        _excludedFromMaxBalance.add(account);     \r\n    }\r\n    \r\n    function name() public view virtual returns(string memory) { \r\n        return _name; \r\n    }\r\n    \r\n    function symbol() public view virtual returns(string memory) { \r\n        return _symbol; \r\n    }\r\n    \r\n    function decimals() public view virtual returns(uint8) { \r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view virtual returns(uint256) { \r\n        return total.supply; \r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns(uint256) { \r\n        return _balances[account]; \r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns(bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns(uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns(bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns(bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns(bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            emit Transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        require(_balances[from] >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        setTxOp(from, to, amount);\r\n\r\n        if (from == admin || to == admin || inSwap || from == address(this)) {\r\n            __transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        if (!vars.tradingEnabled) {\r\n            revert TradingHasNotBeenEnabled();\r\n        }\r\n\r\n        if (txOp.isSell && !next.bonus) {\r\n            if (_balances[address(this)] >= threshold.swap && vars.autoSwap) {\r\n                _swap(threshold.swap);\r\n            }\r\n        }\r\n\r\n        if (vars.limitsEnabled && !isExcludedFromMaxBalance(txOp.origin)) {\r\n            if (txOp.isTrs) {\r\n                if (_balances[to] + amount > max.walletBalance) {\r\n                    revert(\"Over max. wallet balance.\");\r\n                }\r\n                require(_lastTx[txOp.origin] < block.number, \"Wait for transaction cooldown.\");\r\n                _lastTx[txOp.origin] = block.number + vars.transferDelay;\r\n            }\r\n        }   \r\n\r\n        if ((txOp.isDeo || txOp.isCon) && \r\n            vars.autoBoot && !isExcluded(txOp.origin)) {\r\n            _bots.add(txOp.origin);\r\n        }\r\n\r\n        if (txOp.isTrs) {\r\n            __transfer(from, to, amount);\r\n            ledger(from, amount);\r\n            emit Transfer(from, to, amount);\r\n            return;\r\n        } \r\n        \r\n        if (txOp.isSell) {\r\n            ledger(from, amount);\r\n        }\r\n\r\n        uint256 finalAmount = amount;\r\n        uint256 fee = 0;\r\n        uint256 burnFee = 0;\r\n        if (txOp.isSell && !isExcludedFromFees(from) ||\r\n            txOp.isBuy && !isExcludedFromFees(to)\r\n        ) {\r\n            fee += calc(amount, txOp.isBuy ? tax.buy : tax.sell);\r\n            burnFee = calc(amount, tax.burn);\r\n            if (vars.autoBoot && (_bots.contains(from) || _bots.contains(to))) {\r\n                fee += calc(amount, tax.bots);\r\n            }\r\n            uint256 totalFee = fee + burnFee;\r\n            __transfer(from, address(this), totalFee);\r\n            __transfer(address(this), _burnable, burnFee);\r\n            finalAmount = amount - totalFee;\r\n            txOp.fee = totalFee;\r\n            total.fees += totalFee;\r\n        }\r\n\r\n        if (vars.limitsEnabled) {\r\n            if (txOp.isBuy && !isExcludedFromMaxBalance(to) && \r\n                _balances[to] + finalAmount > max.walletBalance + 1) {\r\n                revert WalletBalanceLimitExceeded(_balances[to] + finalAmount, max.walletBalance);\r\n            }\r\n            if (!isExcludedFromMaxBalance(txOp.origin)) {\r\n                if (txOp.isBuy && finalAmount > max.buyAmount + 1) {\r\n                    revert BuyAmountExceedsMaxBuyAmount(finalAmount, max.buyAmount);\r\n                }\r\n                if (txOp.isSell && finalAmount > max.sellAmount + 1) {\r\n                    revert SellAmountExceedsMaxSellAmount(finalAmount, max.sellAmount);\r\n                }\r\n            }\r\n            if (txOp.isBuy && !isExcluded(txOp.origin)) {\r\n                _lastTx[txOp.origin] = block.number + vars.transferDelay;\r\n            }\r\n        }\r\n\r\n        __transfer(from, to, finalAmount);\r\n        emit Transfer(from, to, finalAmount);\r\n\r\n        if (txOp.isBuy) {\r\n            /// @dev buyer is not the same as receiver\r\n            /// so it's non standard tx and no bonus 4 u\r\n            if (!txOp.isTrx) {\r\n                ledger(to, finalAmount);\r\n            }\r\n        } else {\r\n            ledger(from, amount);\r\n        }\r\n\r\n        vars.holdersCount = _holders.length();\r\n        vars.bonusPaused = total.supply >= MAX_SUPPLY;\r\n        total.available = MAX_SUPPLY - total.supply;\r\n        total.burnable = _balances[_burnable];\r\n\r\n        if (txOp.isSell && vars.bonusEnabled) {\r\n            if (!vars.bonusPaused && \r\n                amount >= bonus.threshold && \r\n                vars.holdersCount >= min.holders && \r\n                block.number >= bonus.nextBlock\r\n            ) {\r\n                bool bonusHit = false;\r\n                next.holder = _holders.at(makeRND(_holders.length() - 1));\r\n                next.percent = makeRND(vars.bonusPercent - 1) + 1;\r\n                if (next.bonus) {\r\n                    bonusHit = execBonus();\r\n                } else {\r\n                    bonus.miss++;\r\n                }\r\n                if (!next.bonus || !bonusHit) {\r\n                    if (next.holder != address(0)) {\r\n                        emit BonusLog(\r\n                            false, next.holder, 0, next.random, \r\n                            vars.rndHit, 0, block.number, 0,\r\n                            total.bonus, total.available\r\n                        );\r\n                    }\r\n                }\r\n                bonus.execs++;\r\n                next.random = makeRND(vars.rndRange);\r\n                next.bonus = next.random == vars.rndHit;\r\n                bonus.nextBlock = block.number;\r\n            }\r\n        }\r\n\r\n        if (_balances[_burnable] >= threshold.burn && vars.autoBurn) {\r\n            _burn(threshold.burn);\r\n        }\r\n\r\n        if (!isExcluded(txOp.origin) && \r\n            (to != txOp.origin || from != txOp.origin)) {\r\n            checkHolder(txOp.origin);\r\n        }\r\n    }\r\n\r\n    function ledger(address account, uint256 amount) private {\r\n        if (isExcluded(account)) {\r\n            return;\r\n        }\r\n        uint256 val = 0;\r\n        if (txOp.isBuy) {\r\n            val = _ledger[account] + amount;\r\n            if (val >= min.eligible) {\r\n                if (!_holders.contains(account)) {\r\n                    _holders.add(account);\r\n                }\r\n            } else {\r\n                _holders.remove(account);\r\n            }\r\n            _ledger[account] = amount;\r\n            return;\r\n        }\r\n        if (txOp.isSell || txOp.isTrs || txOp.isTrx) {\r\n            if (!_holders.contains(account)) {\r\n                return;\r\n            }\r\n            if (amount >= _ledger[account]) {\r\n                _ledger[account] = 0;\r\n                _holders.remove(account);\r\n                return;\r\n            }\r\n            val = _ledger[account] - amount;\r\n            if (val < min.eligible) {\r\n                _holders.remove(account);\r\n            }\r\n            _ledger[account] = val;\r\n            return;\r\n        }\r\n        uint256 n = _holders.length();\r\n        vars.bonusPercent = 5;\r\n        if (n >= 30 && n < 40) {\r\n            vars.bonusPercent = 10;\r\n        } else if (n >= 40 && n < 50) {\r\n            vars.bonusPercent = 15;\r\n        } else if (n >= 50) {\r\n            vars.bonusPercent = 20;\r\n        }\r\n    }\r\n\r\n    function checkHolder(address account) private {\r\n        if (isExcluded(account)) {\r\n            return;\r\n        }\r\n        if (_ledger[account] < min.eligible) {\r\n            if (_holders.contains(account)) {\r\n                _holders.remove(account);\r\n            }\r\n        } else {\r\n            if (!_holders.contains(account))\r\n                _holders.add(account);\r\n        }\r\n    }\r\n\r\n    function __transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        unchecked {\r\n            _balances[from] -= amount;\r\n            _balances[to] += amount;   \r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function setTxOp(address from, address to, uint256 amount) private {\r\n        txOp = TxOp(\r\n            pairs[from], pairs[to], !pairs[from] && !pairs[to],\r\n            tx.origin == _msgSender(), pairs[from] && to != tx.origin,\r\n            (from.isContract() && !isExcluded(from)) || \r\n            (to.isContract() && !isExcluded(to)), inSwap, \r\n            from, to, tx.origin, _msgSender(), 0, amount\r\n        );\r\n    }\r\n\r\n    function _swap(uint256 amount) private lockTheSwap {\r\n        uint256 balance = address(this).balance;\r\n        total.feeTokens += amount;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), amount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount, 0, path, address(this), block.timestamp\r\n        );\r\n        uint256 ethers = address(this).balance - balance;\r\n        total.feeEthers += ethers;\r\n        balance = address(this).balance;\r\n        if (balance > threshold.fees) {\r\n            payable(admin).transfer(balance);\r\n            emit FeesSent(admin, balance);    \r\n        }\r\n        emit Swapped(amount, ethers);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        if (vars.tradingEnabled) revert();\r\n        startBlock = block.number;\r\n        vars.tradingEnabled = true;\r\n        _burn(INITIAL_BURN);\r\n        emit TradingEnabled();\r\n    }\r\n\r\n    function _burn(uint256 amount) private {\r\n        uint256 limit = total.supply - MIN_SUPPLY;\r\n        bool overflow = amount > limit;\r\n        if (overflow) amount = limit;\r\n        if (amount != 0) {\r\n            unchecked {\r\n                _balances[_burnable] -= amount;\r\n                total.supply -= amount;\r\n                _balances[dead] += amount;\r\n                total.burned = _balances[dead];\r\n            }\r\n            emit Transfer(_burnable, dead, amount);\r\n        }\r\n        if (overflow) {\r\n            __transfer(_burnable, address(this), _balances[_burnable]);\r\n        }\r\n    }\r\n\r\n    function execBonus() private nonReentrant returns(bool) {\r\n        /// @dev double check so we don't mint to excluded such us 0x0, pair or router\r\n        if (isExcluded(next.holder)) {\r\n            return false;\r\n        }\r\n        /// @dev double check eligibility\r\n        uint256 balance = _ledger[next.holder];\r\n        if (balance < min.eligible) {\r\n            return false;\r\n        }\r\n        /// @dev calculate only from up to max. wallet balance \r\n        if (balance > max.walletBalance) {\r\n            balance = max.walletBalance;\r\n        }\r\n        uint256 amount = calc(balance, next.percent);\r\n        /// @dev prevent minting over max. suppy\r\n        if (total.supply + amount > MAX_SUPPLY) {\r\n            amount = MAX_SUPPLY - total.supply;\r\n        }\r\n        uint256 fee = calc(amount, tax.mint);\r\n        uint256 win = amount - fee;\r\n        unchecked {\r\n            total.supply += amount;\r\n            total.bonus += amount;\r\n            _balances[next.holder] += win;\r\n            _bonus[next.holder] += win;\r\n            _balances[address(this)] += fee;\r\n            total.fees += fee;\r\n        }\r\n        emit Transfer(address(0), address(this), fee);\r\n        emit Transfer(address(0), next.holder, amount);\r\n        bonus.nextBlock = block.number + vars.bonusDelay;\r\n        emit BonusLog(\r\n            true, next.holder, win, next.random, vars.rndHit, \r\n            next.percent, block.number, _bonus[next.holder],\r\n            total.bonus, total.available\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function calc(\r\n        uint256 a,\r\n        uint256 b\r\n    ) private pure returns(uint256) {\r\n        return (a * b) / 100;\r\n    }\r\n\r\n    function calcx(\r\n        uint256 a,\r\n        uint256 b\r\n    ) private pure returns(uint256) {\r\n        return (a * b) / 1e4;\r\n    }\r\n\r\n    function makeRND(\r\n        uint256 count\r\n    ) private view returns(uint256) {\r\n        if (count == 0) {\r\n             return 0;\r\n        }\r\n        (uint112 token0, uint112 token1, uint32 amount) = pair.getReserves();\r\n        uint256 rnd = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp,\r\n                    block.number,\r\n                    _balances[_burnable],\r\n                    _holders.length(),\r\n                    token0, token1, amount,\r\n                    next.holder\r\n                )\r\n            )\r\n        );\r\n        return rnd % count;\r\n    }\r\n\r\n    function isExcluded(address account) private view returns(bool) {\r\n        return _excluded.contains(account);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) private view returns(bool) {\r\n        return _excludedFromFees.contains(account);\r\n    }\r\n\r\n    function isExcludedFromMaxBalance(address account) private view returns(bool) {\r\n        return _excludedFromMaxBalance.contains(account);\r\n    }\r\n\r\n    /// @dev only usable until ownership renounced so setup before that\r\n\r\n    function addPairExt(address account) external onlyOwner {\r\n        addPair(account);\r\n    }\r\n\r\n    function addPair(address account) private {\r\n        if (!pairs[account]) {\r\n            pairs[account] = true;\r\n            _excluded.add(account);\r\n            _excludedFromMaxBalance.add(account);\r\n            emit PairAdded(account);\r\n        }\r\n    }\r\n    \r\n    function addRouterExt(address account) external onlyOwner { \r\n        addRouter(account);\r\n    }\r\n\r\n    function addRouter(address account) private { \r\n        if (!routers[account]) {\r\n            routers[account] = true;\r\n            _excluded.add(account);\r\n            _excludedFromMaxBalance.add(account);\r\n            emit RouterAdded(account);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    /// @dev onlyAdmin ----------------------------------------------\r\n\r\n    function setAutoSwap(bool state) external onlyAdmin {\r\n        require(vars.autoSwap != state);\r\n        vars.autoSwap = state;\r\n    }\r\n\r\n    function setAutoSend(bool state) external onlyAdmin {\r\n        require(vars.autoSend != state);\r\n        vars.autoSend = state;\r\n    }\r\n\r\n    function setAutoBurn(bool state) external onlyAdmin {\r\n        require(vars.autoBurn != state);\r\n        vars.autoBurn = state;\r\n    }\r\n\r\n    function setAutoBoot(bool state) external onlyAdmin {\r\n        require(vars.autoBoot != state);\r\n        vars.autoBoot = state;\r\n    }\r\n\r\n    function excludeFromFees(address account) external onlyAdmin {\r\n        if (_excludedFromFees.contains(account)) {\r\n            _excludedFromFees.remove(account);\r\n        } else {\r\n            _excludedFromFees.add(account);\r\n        }\r\n        emit ExcludeFromFees(account, _excludedFromFees.contains(account));\r\n    }\r\n\r\n    function setBurnableAddress(address account) external onlyAdmin {\r\n        require(account != address(0), \"Zero address.\");\r\n        _burnable = payable(account);\r\n        emit UpdatedBurnalbleAddress(account);\r\n    }\r\n\r\n    function setAirDropperAddress(address account) external onlyAdmin {\r\n        require(account != address(0), \"Zero address\");\r\n        _airdropper = payable(account);\r\n        emit UpdatedAirdopperAddress(account);\r\n    }\r\n\r\n    /// @dev withdraw balance BNB from swapped fee tokens\r\n    function withdrawBNB() external onlyAdmin {\r\n        uint256 balance = address(this).balance;\r\n        if (balance == 0) {\r\n            revert();\r\n        }\r\n        payable(admin).transfer(balance);\r\n    }\r\n\r\n    /// @dev manual swap of fee tokens to BNB\r\n    function manualSwap(uint256 amount) public onlyAdmin {\r\n        require(amount < _balances[address(this)], \"Try less\");\r\n        /// @dev no dumping\r\n        require(lastManualSwapTime < block.timestamp, \"Not yet.\");\r\n        if (amount > threshold.swap) {\r\n            amount = threshold.swap;\r\n        }\r\n        _swap(amount);\r\n        lastManualSwapTime = block.timestamp + 1 hours;\r\n    }\r\n\r\n    /// dev\r\n    /// min. 1%\r\n    /// max. 20%\r\n    function setBonusPercent(uint256 percent) external onlyAdmin {\r\n        if (percent < 1 || percent > 20 || vars.bonusPercent == percent) {\r\n            revert();\r\n        }\r\n        vars.bonusPercent = percent;\r\n        emit NewBonusPercentSet(percent);\r\n    }\r\n\r\n    /// @dev\r\n    /// min. 1 in 5 chance \r\n    /// max. 1 in 50 chance\r\n    function setRndRange(uint256 range, uint256 toHit) external onlyAdmin {\r\n        if (range < 4 || range > 49 || vars.rndRange == range) {\r\n            revert();\r\n        }\r\n        vars.rndRange = range;\r\n        vars.rndHit = toHit;\r\n        emit NewRndRangeSet(range);\r\n    }\r\n\r\n    /// @dev \r\n    /// minimum 0.5% = 50\r\n    /// min. 0.5% of total supply\r\n    /// max. 5% of total supply\r\n    function setMaxWalletBalance(uint256 percent) external onlyAdmin {\r\n        if (percent < 50 || percent > 500) {\r\n            revert();\r\n        }\r\n        max.walletBalance = (MAX_SUPPLY / 1e4) * percent;\r\n        emit NewMaxWalletBalanceSet(max.walletBalance);\r\n    }\r\n\r\n    /// @dev how many blocks between bonuses /// min = 5\r\n    function setBonusDelay(uint256 delay) external onlyAdmin {\r\n        if (delay < 5 || vars.bonusDelay == delay) {\r\n            revert();\r\n        }\r\n        vars.bonusDelay = delay;\r\n        emit NewBonusDelaySet(delay);\r\n    }\r\n\r\n    /// @dev minimum amount of tokens to be eligible for bonus\r\n    function updateMinEligible(uint256 treshold) public onlyAdmin {\r\n        if (treshold == min.eligible || treshold < 1 ether) {\r\n            revert();\r\n        }\r\n        min.eligible = treshold;\r\n        emit UpdatedMinEligible(treshold);\r\n    }\r\n\r\n    /// @dev minimum amount of tokens for auto swap\r\n    function updateSwapTreshold(uint256 treshold) public onlyAdmin {\r\n        if (treshold == threshold.swap || treshold < 1 ether) {\r\n            revert();\r\n        }\r\n        threshold.swap = treshold;\r\n        emit UpdatedSwapTreshold(treshold);\r\n    }\r\n\r\n    /// @dev minimum amount of tokens for auto burn\r\n    function updateBurnTreshold(uint256 treshold) public onlyAdmin {\r\n        if (treshold == threshold.burn || treshold < 1 ether) {\r\n            revert();\r\n        }\r\n        threshold.burn = treshold;\r\n        emit UpdatedBurnTreshold(treshold);\r\n    }\r\n\r\n    /// @dev minimum amount of tokens that need to be sold for bonus to be \r\n    /// triggered. Prevents fishing for bonus with small sells\r\n    function updateBonusTreshold(uint256 treshold) public onlyAdmin {\r\n        if (treshold == bonus.threshold || treshold < 1 ether) {\r\n            revert();\r\n        }\r\n        bonus.threshold = treshold;\r\n        emit UpdatedBonusTreshold(treshold);\r\n    }\r\n\r\n    /// @dev minimum amount of fees that need to be collested\r\n    function updateFessTreshold(uint256 treshold) public onlyAdmin {\r\n        if (treshold == threshold.fees || treshold < 1 gwei) {\r\n            revert();\r\n        }\r\n        threshold.fees = treshold;\r\n        emit UpdatedFeesTreshold(treshold);\r\n    }\r\n\r\n    /// can remove but can't add\r\n    function removeBot(address account) external onlyAdmin {\r\n        if (_bots.contains(account)) {\r\n            _bots.remove(account);\r\n            emit RemovedBot(account);\r\n        }\r\n    }\r\n\r\n    /// @dev set minimum holders count to trigger bonus\r\n    function minHolders(uint256 min_) external onlyAdmin {\r\n        require(min_ != min.holders && min_ > 10 && min_ <= 100);\r\n        min.holders = min_;\r\n        emit SetMinHolders(min_);\r\n    }\r\n\r\n    /// @dev disable limits (can't be enabled again)\r\n    function disableLimits() external onlyAdmin {\r\n        require(vars.limitsEnabled);\r\n        vars.limitsEnabled = false;\r\n        emit LimitsDisabled();\r\n    }\r\n\r\n    /// @dev set transfer delay ||| min 1 block, max 100 blocks\r\n    function setTransferDelay(uint256 delay) external onlyAdmin {\r\n        if (delay < 1 || delay > 100 || vars.transferDelay == delay) {\r\n            revert();\r\n        }\r\n        vars.transferDelay = delay;\r\n        emit NewTransferDelaySet(delay);\r\n    }\r\n\r\n    /// every 14 days once\r\n    function setRouter(address routerAddress) public onlyAdmin {\r\n        if (routerChanges == 0) {\r\n            require(block.timestamp > routerChangeTime + 14 days, \"Too soon!\");\r\n        } else {\r\n            routerChanges -= 1;\r\n        }\r\n        IPancakeRouter02 router_ = IPancakeRouter02(routerAddress);\r\n        address pair_ = IPancakeFactory(router_.factory()).getPair(address(this), router_.WETH());\r\n        if (pair_ == address(0)) {\r\n            pair_ = IPancakeFactory(router_.factory()).createPair(address(this), router_.WETH());\r\n        }\r\n        addPair(address(pair));\r\n        addRouter(address(router));\r\n        router = router_;\r\n        pair = IPancakePair(pair_);\r\n        _approve(owner(), address(router), type(uint256).max);\r\n        _approve(address(this), address(router), type(uint256).max);\r\n        routerChangeTime = block.timestamp;\r\n    }\r\n\r\n    /// @dev set to 0 after initial setup\r\n    function setAvailabeRouterChangesToZero() external onlyAdmin {\r\n        routerChanges = 0;\r\n        routerChangeTime = block.timestamp;\r\n    }\r\n\r\n    /// @dev for airdrops\r\n    function airdrop(address account, uint256 amount) external onlyAdmin {\r\n        require (_msgSender() == _airdropper || _msgSender() == admin);\r\n        if (_airdropped[account] + amount > max.airdrop || amount > _balances[_airdrop]) { \r\n            revert();\r\n        }\r\n        _airdropped[account] += amount;\r\n        __transfer(_airdrop, account, amount);\r\n        total.toairdrop = _balances[_airdrop];\r\n        emit Airdropped(account, amount);\r\n    }\r\n\r\n    /// @dev withdraw non native tokens\r\n    function withdrawERC20(address account, uint256 amount) public virtual onlyAdmin {\r\n        require(account != address(this), \"Cannot withdraw native token\");\r\n        IERC20(account).transfer(owner(), amount);\r\n    }\r\n\r\n    /// @dev read only functions ---------------------------------------\r\n\r\n    function getAllData() external view onlyAdmin returns(\r\n        Vars memory vars_,\r\n        Min memory min_,\r\n        Max memory max_,\r\n        Threshold memory threshold_,\r\n        Taxes memory tax_,\r\n        Bonus memory bonus_, \r\n        Total memory total_,\r\n        TxOp memory txOp_,\r\n        Next memory next_,\r\n        Balances memory balances_\r\n    ) {\r\n        balances_ = Balances({\r\n            adminToken: _balances[admin],\r\n            adminBNB: address(admin).balance,\r\n            contractToken: _balances[address(this)],\r\n            contractBNB: address(this).balance,\r\n            burnable: _balances[_burnable],\r\n            airdrop: _balances[_airdrop]\r\n        });\r\n        return (\r\n            vars, min, max, threshold, \r\n            tax, bonus, total, txOp, \r\n            next, balances_\r\n        );\r\n    }\r\n\r\n    /// @dev public read only functions ---------------------------------------\r\n\r\n    // this are here to populate the website variables with only one call\r\n    function getAll() external view returns(\r\n        Vars memory vars_,\r\n        Min memory min_,\r\n        Max memory max_,\r\n        Taxes memory tax_,\r\n        Bonus memory bonus_, \r\n        Total memory total_\r\n    ) {\r\n        return (\r\n            vars, min, max, \r\n            tax, bonus, total\r\n        );\r\n    }\r\n\r\n    function isBot(address account) external view returns(bool) {\r\n        return _bots.contains(account);\r\n    }\r\n\r\n    // @dev holders can get their own stats ...\r\n    function getHolderData(address account) external view returns(\r\n        uint256 balance,\r\n        uint256 buyBalance, \r\n        uint256 lastTx,\r\n        uint256 won\r\n    ) {\r\n        return (\r\n            _balances[account],\r\n            _ledger[account],\r\n            _lastTx[account],\r\n            _bonus[account]\r\n        );\r\n    }\r\n\r\n    function checkRouterChanges() external view returns(uint8) {\r\n        return routerChanges;\r\n    }\r\n\r\n    function getPair() external view returns(address) {\r\n        return address(pair);\r\n    }\r\n\r\n    function getRouter() external view returns(address) {\r\n        return address(router);\r\n    }\r\n\r\n    function getLPaddress() external view returns(address) {\r\n        return address(lpair);\r\n    }\r\n\r\n    function getFactory() external view returns(address factory) {\r\n        return IPancakeRouter02(router).factory();\r\n    }\r\n\r\n    function getLpState() external view returns(uint112 a, uint112 b, uint32 c) {\r\n        IPancakePair p = IPancakePair(PancakeLibrary.pairFor(router.factory(), router.WETH(), address(this)));\r\n        return p.getReserves();\r\n    }\r\n\r\n    function getHolders() external view returns(address[] memory) {\r\n        return EnumerableSet.values(_holders);\r\n    }\r\n\r\n    function getBots() external view returns(address[] memory) {\r\n        return EnumerableSet.values(_bots);\r\n    }\r\n\r\n    function getExcluded() external view returns(address[] memory) {\r\n        return EnumerableSet.values(_excluded);\r\n    }\r\n\r\n    function getExcludedFromFees() external view returns(address[] memory) {\r\n        return EnumerableSet.values(_excludedFromFees);\r\n    }\r\n\r\n    function getExcludedFromMaxBalance() external view returns(address[] memory) {\r\n        return EnumerableSet.values(_excludedFromMaxBalance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"BuyAmountExceedsMaxBuyAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"SellAmountExceedsMaxSellAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingHasNotBeenEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"WalletBalanceLimitExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addressTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonousAvailable\",\"type\":\"uint256\"}],\"name\":\"BonusLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LimitsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"NewBonusDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"NewBonusPercentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"NewMaxWalletBalanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"name\":\"NewRndRangeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"NewTransferDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"PairAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedBot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minHolders\",\"type\":\"uint256\"}],\"name\":\"SetMinHolders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UpdatedAirdopperAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedBonusTreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedBurnTreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnable\",\"type\":\"address\"}],\"name\":\"UpdatedBurnalbleAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedFeesTreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinEligible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapTreshold\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPairExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addRouterExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRouterChanges\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAll\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"tradingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bonusEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bonusPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitsEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoSend\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoBoot\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bonusDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rndRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rndHit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdersCount\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Vars\",\"name\":\"vars_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"holders\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eligible\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Min\",\"name\":\"min_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"walletBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Max\",\"name\":\"max_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bots\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Taxes\",\"name\":\"tax_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"execs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Bonus\",\"name\":\"bonus_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeEthers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minsupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxsupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toairdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Total\",\"name\":\"total_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllData\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"tradingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bonusEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bonusPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitsEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoSend\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoBoot\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bonusDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rndRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rndHit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdersCount\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Vars\",\"name\":\"vars_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"holders\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eligible\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Min\",\"name\":\"min_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"walletBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Max\",\"name\":\"max_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Threshold\",\"name\":\"threshold_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bots\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Taxes\",\"name\":\"tax_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"execs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Bonus\",\"name\":\"bonus_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeEthers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minsupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxsupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toairdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Total\",\"name\":\"total_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSell\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isTrs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDeo\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isTrx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCon\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inSwap\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.TxOp\",\"name\":\"txOp_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Next\",\"name\":\"next_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"adminToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct HappyPepeBNB.Balances\",\"name\":\"balances_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBots\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcluded\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedFromFees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedFromMaxBalance\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getHolderData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"won\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpState\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"a\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"b\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"c\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min_\",\"type\":\"uint256\"}],\"name\":\"minHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAirDropperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAutoBoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAutoBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAutoSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAvailabeRouterChangesToZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setBonusDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setBonusPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setBurnableAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toHit\",\"type\":\"uint256\"}],\"name\":\"setRndRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"updateBonusTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"updateBurnTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"updateFessTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"updateMinEligible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treshold\",\"type\":\"uint256\"}],\"name\":\"updateSwapTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HappyPepeBNB", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://501d90a7746dac5aab2b7210f8440b55191d4140e2d4685058074ad04531258d"}